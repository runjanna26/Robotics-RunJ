
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e014  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c0  0800e128  0800e128  0001e128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9e8  0800e9e8  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800e9e8  0800e9e8  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e9e8  0800e9e8  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9e8  0800e9e8  0001e9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9ec  0800e9ec  0001e9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800e9f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000208  0800ebf4  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  0800ebf4  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001386c  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e5  00000000  00000000  00033a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00036480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  00037770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a14f  00000000  00000000  00038968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d6f  00000000  00000000  00052ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000965e0  00000000  00000000  00065826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fbe06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a44  00000000  00000000  000fbe5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e10c 	.word	0x0800e10c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800e10c 	.word	0x0800e10c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__aeabi_d2lz>:
 800119c:	b538      	push	{r3, r4, r5, lr}
 800119e:	460c      	mov	r4, r1
 80011a0:	4605      	mov	r5, r0
 80011a2:	4621      	mov	r1, r4
 80011a4:	4628      	mov	r0, r5
 80011a6:	2200      	movs	r2, #0
 80011a8:	2300      	movs	r3, #0
 80011aa:	f7ff fc07 	bl	80009bc <__aeabi_dcmplt>
 80011ae:	b928      	cbnz	r0, 80011bc <__aeabi_d2lz+0x20>
 80011b0:	4628      	mov	r0, r5
 80011b2:	4621      	mov	r1, r4
 80011b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b8:	f000 b80a 	b.w	80011d0 <__aeabi_d2ulz>
 80011bc:	4628      	mov	r0, r5
 80011be:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011c2:	f000 f805 	bl	80011d0 <__aeabi_d2ulz>
 80011c6:	4240      	negs	r0, r0
 80011c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011cc:	bd38      	pop	{r3, r4, r5, pc}
 80011ce:	bf00      	nop

080011d0 <__aeabi_d2ulz>:
 80011d0:	b5d0      	push	{r4, r6, r7, lr}
 80011d2:	2200      	movs	r2, #0
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <__aeabi_d2ulz+0x34>)
 80011d6:	4606      	mov	r6, r0
 80011d8:	460f      	mov	r7, r1
 80011da:	f7ff f97d 	bl	80004d8 <__aeabi_dmul>
 80011de:	f7ff fc53 	bl	8000a88 <__aeabi_d2uiz>
 80011e2:	4604      	mov	r4, r0
 80011e4:	f7ff f8fe 	bl	80003e4 <__aeabi_ui2d>
 80011e8:	2200      	movs	r2, #0
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <__aeabi_d2ulz+0x38>)
 80011ec:	f7ff f974 	bl	80004d8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4630      	mov	r0, r6
 80011f6:	4639      	mov	r1, r7
 80011f8:	f7fe ffb6 	bl	8000168 <__aeabi_dsub>
 80011fc:	f7ff fc44 	bl	8000a88 <__aeabi_d2uiz>
 8001200:	4621      	mov	r1, r4
 8001202:	bdd0      	pop	{r4, r6, r7, pc}
 8001204:	3df00000 	.word	0x3df00000
 8001208:	41f00000 	.word	0x41f00000

0800120c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001214:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001218:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d013      	beq.n	800124c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001224:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001228:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800122c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00b      	beq.n	800124c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001234:	e000      	b.n	8001238 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001236:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001238:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0f9      	beq.n	8001236 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001242:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800124c:	687b      	ldr	r3, [r7, #4]
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <_write>:
float angleOpenloop(float target_angle);					//


//Serial Write
int _write(int file, char *ptr, int len)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	e009      	b.n	8001282 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	60ba      	str	r2, [r7, #8]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ffc8 	bl	800120c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	3301      	adds	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	dbf1      	blt.n	800126e <_write+0x16>
  return len;
 800128a:	687b      	ldr	r3, [r7, #4]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_CAN_RxFifo0MsgPendingCallback>:
float float_final = 0.0f;
uint32_t CAN_error;
int count1,count2;
//CAN:446
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	  count2++;
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	4a1b      	ldr	r2, [pc, #108]	; (8001310 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80012a4:	6013      	str	r3, [r2, #0]
	  if (HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &RxHeader, RxData) != HAL_OK)
 80012a6:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80012a8:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80012aa:	2100      	movs	r1, #0
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f003 ff6e 	bl	800518e <HAL_CAN_GetRxMessage>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d007      	beq.n	80012c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	  {
		  CAN_error = HAL_CAN_GetError(hcan);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f004 fac1 	bl	8005840 <HAL_CAN_GetError>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a16      	ldr	r2, [pc, #88]	; (800131c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80012c2:	6013      	str	r3, [r2, #0]
		  Error_Handler();
 80012c4:	f002 fcda 	bl	8003c7c <Error_Handler>
	  }

	  if ((RxHeader.StdId == 0x103) && RxHeader.DLC == 4)
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f240 1203 	movw	r2, #259	; 0x103
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d119      	bne.n	8001308 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d115      	bne.n	8001308 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
	  {
		  bytes[0] = RxData[0];
 80012dc:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80012de:	781a      	ldrb	r2, [r3, #0]
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80012e2:	701a      	strb	r2, [r3, #0]
		  bytes[1] = RxData[1];
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80012e6:	785a      	ldrb	r2, [r3, #1]
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80012ea:	705a      	strb	r2, [r3, #1]
		  bytes[2] = RxData[2];
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80012ee:	789a      	ldrb	r2, [r3, #2]
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80012f2:	709a      	strb	r2, [r3, #2]
		  bytes[3] = RxData[3];
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80012f6:	78da      	ldrb	r2, [r3, #3]
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80012fa:	70da      	strb	r2, [r3, #3]
		  float_final = Bytes2float(bytes);
 80012fc:	4808      	ldr	r0, [pc, #32]	; (8001320 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80012fe:	f000 fd0c 	bl	8001d1a <Bytes2float>
 8001302:	4603      	mov	r3, r0
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001306:	6013      	str	r3, [r2, #0]
	  if (RxHeader.RTR == 0x01) // Request data
	  {

	  }

}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000300 	.word	0x20000300
 8001314:	20000574 	.word	0x20000574
 8001318:	200005f0 	.word	0x200005f0
 800131c:	200003ec 	.word	0x200003ec
 8001320:	200003f4 	.word	0x200003f4
 8001324:	20000244 	.word	0x20000244

08001328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132e:	f002 fffb 	bl	8004328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001332:	f000 f99d 	bl	8001670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001336:	f000 fbe3 	bl	8001b00 <MX_GPIO_Init>
  MX_SPI1_Init();
 800133a:	f000 fa87 	bl	800184c <MX_SPI1_Init>
  MX_DMA_Init();
 800133e:	f000 fbc1 	bl	8001ac4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001342:	f000 fb95 	bl	8001a70 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001346:	f000 f9ef 	bl	8001728 <MX_ADC1_Init>
  MX_TIM2_Init();
 800134a:	f000 fab7 	bl	80018bc <MX_TIM2_Init>
  MX_CAN_Init();
 800134e:	f000 fa47 	bl	80017e0 <MX_CAN_Init>
  MX_TIM4_Init();
 8001352:	f000 fb3f 	bl	80019d4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //Delay SETUP
  DWT_Init();
 8001356:	f000 fc57 	bl	8001c08 <DWT_Init>

  //Timer Interrupt tim2,tim4

  HAL_TIM_Base_Start_IT(&htim4);
 800135a:	4891      	ldr	r0, [pc, #580]	; (80015a0 <main+0x278>)
 800135c:	f005 ff00 	bl	8007160 <HAL_TIM_Base_Start_IT>



  //Driver SETUP

    voltage_sensor_align = 3; // aligning voltage [V]
 8001360:	4b90      	ldr	r3, [pc, #576]	; (80015a4 <main+0x27c>)
 8001362:	4a91      	ldr	r2, [pc, #580]	; (80015a8 <main+0x280>)
 8001364:	601a      	str	r2, [r3, #0]
    velocity_index_search = 3;// index search velocity [rad/s]
 8001366:	4b91      	ldr	r3, [pc, #580]	; (80015ac <main+0x284>)
 8001368:	4a8f      	ldr	r2, [pc, #572]	; (80015a8 <main+0x280>)
 800136a:	601a      	str	r2, [r3, #0]

	voltage_power_supply = 24.0;
 800136c:	4b90      	ldr	r3, [pc, #576]	; (80015b0 <main+0x288>)
 800136e:	4a91      	ldr	r2, [pc, #580]	; (80015b4 <main+0x28c>)
 8001370:	601a      	str	r2, [r3, #0]

    voltage_limit = 24.0;
 8001372:	4b91      	ldr	r3, [pc, #580]	; (80015b8 <main+0x290>)
 8001374:	4a8f      	ldr	r2, [pc, #572]	; (80015b4 <main+0x28c>)
 8001376:	601a      	str	r2, [r3, #0]
    current_limit = 20.0;		// current_sp maximum
 8001378:	4b90      	ldr	r3, [pc, #576]	; (80015bc <main+0x294>)
 800137a:	4a91      	ldr	r2, [pc, #580]	; (80015c0 <main+0x298>)
 800137c:	601a      	str	r2, [r3, #0]
    velocity_limit = 20.0;       // maximal velocity of the position control
 800137e:	4b91      	ldr	r3, [pc, #580]	; (80015c4 <main+0x29c>)
 8001380:	4a8f      	ldr	r2, [pc, #572]	; (80015c0 <main+0x298>)
 8001382:	601a      	str	r2, [r3, #0]

    //Control system configuration
//====Motor====
      LPF_current_d_s.y_prev = 0.0;
 8001384:	4b90      	ldr	r3, [pc, #576]	; (80015c8 <main+0x2a0>)
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
      LPF_current_d_s.Tf = 0.001;
 800138c:	4b8e      	ldr	r3, [pc, #568]	; (80015c8 <main+0x2a0>)
 800138e:	4a8f      	ldr	r2, [pc, #572]	; (80015cc <main+0x2a4>)
 8001390:	60da      	str	r2, [r3, #12]
      PID_current_d_s.P = 1.0 ;  //1.0
 8001392:	4b8f      	ldr	r3, [pc, #572]	; (80015d0 <main+0x2a8>)
 8001394:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001398:	61da      	str	r2, [r3, #28]
      PID_current_d_s.I = 0.0; //713.0
 800139a:	4b8d      	ldr	r3, [pc, #564]	; (80015d0 <main+0x2a8>)
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
      PID_current_d_s.D = 0.0;
 80013a2:	4b8b      	ldr	r3, [pc, #556]	; (80015d0 <main+0x2a8>)
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24
      PID_current_d_s.output_ramp = 1000.0;
 80013aa:	4b89      	ldr	r3, [pc, #548]	; (80015d0 <main+0x2a8>)
 80013ac:	4a89      	ldr	r2, [pc, #548]	; (80015d4 <main+0x2ac>)
 80013ae:	615a      	str	r2, [r3, #20]
      PID_current_d_s.limit = voltage_limit;
 80013b0:	4b81      	ldr	r3, [pc, #516]	; (80015b8 <main+0x290>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a86      	ldr	r2, [pc, #536]	; (80015d0 <main+0x2a8>)
 80013b6:	6193      	str	r3, [r2, #24]

      LPF_current_q_s.y_prev = 0.0;
 80013b8:	4b87      	ldr	r3, [pc, #540]	; (80015d8 <main+0x2b0>)
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
      LPF_current_q_s.Tf = 0.001;
 80013c0:	4b85      	ldr	r3, [pc, #532]	; (80015d8 <main+0x2b0>)
 80013c2:	4a82      	ldr	r2, [pc, #520]	; (80015cc <main+0x2a4>)
 80013c4:	60da      	str	r2, [r3, #12]
      PID_current_q_s.P = 1.0;  // 1.0
 80013c6:	4b85      	ldr	r3, [pc, #532]	; (80015dc <main+0x2b4>)
 80013c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013cc:	61da      	str	r2, [r3, #28]
      PID_current_q_s.I = 0.0; //10.0
 80013ce:	4b83      	ldr	r3, [pc, #524]	; (80015dc <main+0x2b4>)
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	621a      	str	r2, [r3, #32]
      PID_current_q_s.D = 0.0;
 80013d6:	4b81      	ldr	r3, [pc, #516]	; (80015dc <main+0x2b4>)
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
      PID_current_q_s.output_ramp = 1000.0;
 80013de:	4b7f      	ldr	r3, [pc, #508]	; (80015dc <main+0x2b4>)
 80013e0:	4a7c      	ldr	r2, [pc, #496]	; (80015d4 <main+0x2ac>)
 80013e2:	615a      	str	r2, [r3, #20]
      PID_current_q_s.limit = voltage_limit;
 80013e4:	4b74      	ldr	r3, [pc, #464]	; (80015b8 <main+0x290>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a7c      	ldr	r2, [pc, #496]	; (80015dc <main+0x2b4>)
 80013ea:	6193      	str	r3, [r2, #24]

      LPF_velocity_s.y_prev = 0.0;
 80013ec:	4b7c      	ldr	r3, [pc, #496]	; (80015e0 <main+0x2b8>)
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
      LPF_velocity_s.Tf = 0.01;
 80013f4:	4b7a      	ldr	r3, [pc, #488]	; (80015e0 <main+0x2b8>)
 80013f6:	4a7b      	ldr	r2, [pc, #492]	; (80015e4 <main+0x2bc>)
 80013f8:	60da      	str	r2, [r3, #12]
      PID_velocity_s.P = 0.5;   // P > 0.5 oscillate
 80013fa:	4b7b      	ldr	r3, [pc, #492]	; (80015e8 <main+0x2c0>)
 80013fc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001400:	61da      	str	r2, [r3, #28]
      PID_velocity_s.I = 55.0;  // I > 55 under-overshoot
 8001402:	4b79      	ldr	r3, [pc, #484]	; (80015e8 <main+0x2c0>)
 8001404:	4a79      	ldr	r2, [pc, #484]	; (80015ec <main+0x2c4>)
 8001406:	621a      	str	r2, [r3, #32]
      PID_velocity_s.D = 0.0;
 8001408:	4b77      	ldr	r3, [pc, #476]	; (80015e8 <main+0x2c0>)
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	; 0x24
      PID_velocity_s.output_ramp = 1000;
 8001410:	4b75      	ldr	r3, [pc, #468]	; (80015e8 <main+0x2c0>)
 8001412:	4a70      	ldr	r2, [pc, #448]	; (80015d4 <main+0x2ac>)
 8001414:	615a      	str	r2, [r3, #20]
      PID_velocity_s.limit = current_limit;  // current_limit
 8001416:	4b69      	ldr	r3, [pc, #420]	; (80015bc <main+0x294>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a73      	ldr	r2, [pc, #460]	; (80015e8 <main+0x2c0>)
 800141c:	6193      	str	r3, [r2, #24]

      LPF_angle_s.y_prev = 0.0;
 800141e:	4b74      	ldr	r3, [pc, #464]	; (80015f0 <main+0x2c8>)
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
      LPF_angle_s.Tf = 0.01;
 8001426:	4b72      	ldr	r3, [pc, #456]	; (80015f0 <main+0x2c8>)
 8001428:	4a6e      	ldr	r2, [pc, #440]	; (80015e4 <main+0x2bc>)
 800142a:	60da      	str	r2, [r3, #12]
      PID_angle_s.P = 50.0;
 800142c:	4b71      	ldr	r3, [pc, #452]	; (80015f4 <main+0x2cc>)
 800142e:	4a72      	ldr	r2, [pc, #456]	; (80015f8 <main+0x2d0>)
 8001430:	61da      	str	r2, [r3, #28]
      PID_angle_s.I = 0.0;
 8001432:	4b70      	ldr	r3, [pc, #448]	; (80015f4 <main+0x2cc>)
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	621a      	str	r2, [r3, #32]
      PID_angle_s.D = 0.2;
 800143a:	4b6e      	ldr	r3, [pc, #440]	; (80015f4 <main+0x2cc>)
 800143c:	4a6f      	ldr	r2, [pc, #444]	; (80015fc <main+0x2d4>)
 800143e:	625a      	str	r2, [r3, #36]	; 0x24
      PID_angle_s.output_ramp = 0;
 8001440:	4b6c      	ldr	r3, [pc, #432]	; (80015f4 <main+0x2cc>)
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
      PID_angle_s.limit = velocity_limit;
 8001448:	4b5e      	ldr	r3, [pc, #376]	; (80015c4 <main+0x29c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a69      	ldr	r2, [pc, #420]	; (80015f4 <main+0x2cc>)
 800144e:	6193      	str	r3, [r2, #24]

 	  PID_haptic_s.P = 40.0;
 8001450:	4b6b      	ldr	r3, [pc, #428]	; (8001600 <main+0x2d8>)
 8001452:	4a6c      	ldr	r2, [pc, #432]	; (8001604 <main+0x2dc>)
 8001454:	61da      	str	r2, [r3, #28]
	  PID_haptic_s.I = 0.1;
 8001456:	4b6a      	ldr	r3, [pc, #424]	; (8001600 <main+0x2d8>)
 8001458:	4a6b      	ldr	r2, [pc, #428]	; (8001608 <main+0x2e0>)
 800145a:	621a      	str	r2, [r3, #32]
	  PID_haptic_s.D = 0.4;
 800145c:	4b68      	ldr	r3, [pc, #416]	; (8001600 <main+0x2d8>)
 800145e:	4a6b      	ldr	r2, [pc, #428]	; (800160c <main+0x2e4>)
 8001460:	625a      	str	r2, [r3, #36]	; 0x24
	  PID_haptic_s.output_ramp = 0;
 8001462:	4b67      	ldr	r3, [pc, #412]	; (8001600 <main+0x2d8>)
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
	  PID_haptic_s.limit = velocity_limit;
 800146a:	4b56      	ldr	r3, [pc, #344]	; (80015c4 <main+0x29c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a64      	ldr	r2, [pc, #400]	; (8001600 <main+0x2d8>)
 8001470:	6193      	str	r3, [r2, #24]
      passivity_gain = -0.2 ;
 8001472:	4b67      	ldr	r3, [pc, #412]	; (8001610 <main+0x2e8>)
 8001474:	4a67      	ldr	r2, [pc, #412]	; (8001614 <main+0x2ec>)
 8001476:	601a      	str	r2, [r3, #0]


  //SPI SETUP
  MagneticSensorSPI_init(AS5048A_SPI);
 8001478:	4b67      	ldr	r3, [pc, #412]	; (8001618 <main+0x2f0>)
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	9200      	str	r2, [sp, #0]
 800147e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001480:	f000 ffb0 	bl	80023e4 <MagneticSensorSPI_init>
  //POSITION SENSOR SETUP
  Sensor_init();
 8001484:	f001 f8de 	bl	8002644 <Sensor_init>

  //CURRENT SENSE SETUP
  HAL_ADC_Start_DMA(&hadc1, adcResultDMA, 3);
 8001488:	2203      	movs	r2, #3
 800148a:	4964      	ldr	r1, [pc, #400]	; (800161c <main+0x2f4>)
 800148c:	4864      	ldr	r0, [pc, #400]	; (8001620 <main+0x2f8>)
 800148e:	f003 f8a9 	bl	80045e4 <HAL_ADC_Start_DMA>
  initCurrentsense(CurrentSense_resistance, CurrentSense_gain);
 8001492:	4964      	ldr	r1, [pc, #400]	; (8001624 <main+0x2fc>)
 8001494:	485c      	ldr	r0, [pc, #368]	; (8001608 <main+0x2e0>)
 8001496:	f000 fc5b 	bl	8001d50 <initCurrentsense>
//  calibrateOffsets();

  //PWM SETUP
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);    //pinMode
 800149a:	2100      	movs	r1, #0
 800149c:	4862      	ldr	r0, [pc, #392]	; (8001628 <main+0x300>)
 800149e:	f005 ff09 	bl	80072b4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	//pinMode
 80014a2:	2104      	movs	r1, #4
 80014a4:	4860      	ldr	r0, [pc, #384]	; (8001628 <main+0x300>)
 80014a6:	f005 ff05 	bl	80072b4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	//pinMode
 80014aa:	2108      	movs	r1, #8
 80014ac:	485e      	ldr	r0, [pc, #376]	; (8001628 <main+0x300>)
 80014ae:	f005 ff01 	bl	80072b4 <HAL_TIM_PWM_Start>

   HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);  		//Enable
 80014b2:	2201      	movs	r2, #1
 80014b4:	2120      	movs	r1, #32
 80014b6:	485d      	ldr	r0, [pc, #372]	; (800162c <main+0x304>)
 80014b8:	f004 fe4e 	bl	8006158 <HAL_GPIO_WritePin>
//   HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET); 	//Disable

   //FOC SETUP
   zero_electric_angle = 1.89523315;
 80014bc:	4b5c      	ldr	r3, [pc, #368]	; (8001630 <main+0x308>)
 80014be:	4a5d      	ldr	r2, [pc, #372]	; (8001634 <main+0x30c>)
 80014c0:	601a      	str	r2, [r3, #0]
   initFOC(zero_electric_angle, CW);  //M2 0.632764339
 80014c2:	4b5b      	ldr	r3, [pc, #364]	; (8001630 <main+0x308>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2101      	movs	r1, #1
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 ff95 	bl	80033f8 <initFOC>
//   initFOC(zero_electric_angle, UNKNOWN); //Not yet calibrate find the best init value
//while(1);
//   CAN SETUP ID: 0x446
   CAN_init_446();
 80014ce:	f000 fbd1 	bl	8001c74 <CAN_init_446>
   t1 = micros();
 80014d2:	f000 fbaf 	bl	8001c34 <micros>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a57      	ldr	r2, [pc, #348]	; (8001638 <main+0x310>)
 80014da:	6013      	str	r3, [r2, #0]
   t2 = micros();
 80014dc:	f000 fbaa 	bl	8001c34 <micros>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4a56      	ldr	r2, [pc, #344]	; (800163c <main+0x314>)
 80014e4:	6013      	str	r3, [r2, #0]
//	  LPF_current_q_s = LowPassFilter(LPF_current_q_s);
//	  sprintf(MSG, "%.3f,%.3f,%.3f \n",sensortest.a,sensortest.b,sensortest.c);
//	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);

		//Position sensor testing
	    updateSensor();
 80014e6:	f001 f8d7 	bl	8002698 <updateSensor>
//	  sprintf(MSG, " %d \n", );
//	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);

	  //=================CAN BUS=================
		//CAN:446 TX
		float2Bytes(shaft_angle, &bytes[0]);
 80014ea:	4b55      	ldr	r3, [pc, #340]	; (8001640 <main+0x318>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4955      	ldr	r1, [pc, #340]	; (8001644 <main+0x31c>)
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 fc03 	bl	8001cfc <float2Bytes>
		TxData[0] = bytes[0];
 80014f6:	4b53      	ldr	r3, [pc, #332]	; (8001644 <main+0x31c>)
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	4b53      	ldr	r3, [pc, #332]	; (8001648 <main+0x320>)
 80014fc:	701a      	strb	r2, [r3, #0]
		TxData[1] = bytes[1];
 80014fe:	4b51      	ldr	r3, [pc, #324]	; (8001644 <main+0x31c>)
 8001500:	785a      	ldrb	r2, [r3, #1]
 8001502:	4b51      	ldr	r3, [pc, #324]	; (8001648 <main+0x320>)
 8001504:	705a      	strb	r2, [r3, #1]
		TxData[2] = bytes[2];
 8001506:	4b4f      	ldr	r3, [pc, #316]	; (8001644 <main+0x31c>)
 8001508:	789a      	ldrb	r2, [r3, #2]
 800150a:	4b4f      	ldr	r3, [pc, #316]	; (8001648 <main+0x320>)
 800150c:	709a      	strb	r2, [r3, #2]
		TxData[3] = bytes[3];
 800150e:	4b4d      	ldr	r3, [pc, #308]	; (8001644 <main+0x31c>)
 8001510:	78da      	ldrb	r2, [r3, #3]
 8001512:	4b4d      	ldr	r3, [pc, #308]	; (8001648 <main+0x320>)
 8001514:	70da      	strb	r2, [r3, #3]
		if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001516:	4b4d      	ldr	r3, [pc, #308]	; (800164c <main+0x324>)
 8001518:	4a4b      	ldr	r2, [pc, #300]	; (8001648 <main+0x320>)
 800151a:	494d      	ldr	r1, [pc, #308]	; (8001650 <main+0x328>)
 800151c:	484d      	ldr	r0, [pc, #308]	; (8001654 <main+0x32c>)
 800151e:	f003 fd5c 	bl	8004fda <HAL_CAN_AddTxMessage>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d007      	beq.n	8001538 <main+0x210>
		{
			CAN_error = HAL_CAN_GetError(&hcan);
 8001528:	484a      	ldr	r0, [pc, #296]	; (8001654 <main+0x32c>)
 800152a:	f004 f989 	bl	8005840 <HAL_CAN_GetError>
 800152e:	4603      	mov	r3, r0
 8001530:	4a49      	ldr	r2, [pc, #292]	; (8001658 <main+0x330>)
 8001532:	6013      	str	r3, [r2, #0]
		    Error_Handler ();
 8001534:	f002 fba2 	bl	8003c7c <Error_Handler>
		}


//	  =====Haptic Control=====
		if (t2 - t1 >= 3000000)
 8001538:	4b40      	ldr	r3, [pc, #256]	; (800163c <main+0x314>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <main+0x310>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	4a46      	ldr	r2, [pc, #280]	; (800165c <main+0x334>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d90d      	bls.n	8001564 <main+0x23c>
		{
			do_sethome = 1;
 8001548:	4b45      	ldr	r3, [pc, #276]	; (8001660 <main+0x338>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]
			move_haptic(float_final,passivity_gain);
 800154e:	4b45      	ldr	r3, [pc, #276]	; (8001664 <main+0x33c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a2f      	ldr	r2, [pc, #188]	; (8001610 <main+0x2e8>)
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f002 fa5b 	bl	8003a14 <move_haptic>
			loopFOC(); 						//1190us --> 495 us
 800155e:	f001 ff7f 	bl	8003460 <loopFOC>
 8001562:	e00e      	b.n	8001582 <main+0x25a>
		}
		else
		{
			//Set Home
			if (do_sethome == 0)
 8001564:	4b3e      	ldr	r3, [pc, #248]	; (8001660 <main+0x338>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10a      	bne.n	8001582 <main+0x25a>
			{
				t2 = micros();
 800156c:	f000 fb62 	bl	8001c34 <micros>
 8001570:	4603      	mov	r3, r0
 8001572:	4a32      	ldr	r2, [pc, #200]	; (800163c <main+0x314>)
 8001574:	6013      	str	r3, [r2, #0]
				move_angle(0.0f); 	//161 us --> 112 us
 8001576:	f04f 0000 	mov.w	r0, #0
 800157a:	f002 f9c1 	bl	8003900 <move_angle>
				loopFOC(); 			//1190us --> 495 us
 800157e:	f001 ff6f 	bl	8003460 <loopFOC>
			}
		}
		t5 = micros() - t4;
 8001582:	f000 fb57 	bl	8001c34 <micros>
 8001586:	4602      	mov	r2, r0
 8001588:	4b37      	ldr	r3, [pc, #220]	; (8001668 <main+0x340>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	4a37      	ldr	r2, [pc, #220]	; (800166c <main+0x344>)
 8001590:	6013      	str	r3, [r2, #0]
		t4 = micros();
 8001592:	f000 fb4f 	bl	8001c34 <micros>
 8001596:	4603      	mov	r3, r0
 8001598:	4a33      	ldr	r2, [pc, #204]	; (8001668 <main+0x340>)
 800159a:	6013      	str	r3, [r2, #0]
	    updateSensor();
 800159c:	e7a3      	b.n	80014e6 <main+0x1be>
 800159e:	bf00      	nop
 80015a0:	20000304 	.word	0x20000304
 80015a4:	20000290 	.word	0x20000290
 80015a8:	40400000 	.word	0x40400000
 80015ac:	200003ac 	.word	0x200003ac
 80015b0:	200005c4 	.word	0x200005c4
 80015b4:	41c00000 	.word	0x41c00000
 80015b8:	200004f0 	.word	0x200004f0
 80015bc:	20000444 	.word	0x20000444
 80015c0:	41a00000 	.word	0x41a00000
 80015c4:	2000067c 	.word	0x2000067c
 80015c8:	200002c0 	.word	0x200002c0
 80015cc:	3a83126f 	.word	0x3a83126f
 80015d0:	200002d0 	.word	0x200002d0
 80015d4:	447a0000 	.word	0x447a0000
 80015d8:	20000298 	.word	0x20000298
 80015dc:	20000268 	.word	0x20000268
 80015e0:	200004dc 	.word	0x200004dc
 80015e4:	3c23d70a 	.word	0x3c23d70a
 80015e8:	20000458 	.word	0x20000458
 80015ec:	425c0000 	.word	0x425c0000
 80015f0:	20000368 	.word	0x20000368
 80015f4:	20000648 	.word	0x20000648
 80015f8:	42480000 	.word	0x42480000
 80015fc:	3e4ccccd 	.word	0x3e4ccccd
 8001600:	20000620 	.word	0x20000620
 8001604:	42200000 	.word	0x42200000
 8001608:	3dcccccd 	.word	0x3dcccccd
 800160c:	3ecccccd 	.word	0x3ecccccd
 8001610:	200002b4 	.word	0x200002b4
 8001614:	be4ccccd 	.word	0xbe4ccccd
 8001618:	20000000 	.word	0x20000000
 800161c:	20000480 	.word	0x20000480
 8001620:	200003bc 	.word	0x200003bc
 8001624:	41200000 	.word	0x41200000
 8001628:	2000057c 	.word	0x2000057c
 800162c:	40010c00 	.word	0x40010c00
 8001630:	20000018 	.word	0x20000018
 8001634:	3ff29700 	.word	0x3ff29700
 8001638:	2000024c 	.word	0x2000024c
 800163c:	20000250 	.word	0x20000250
 8001640:	20000448 	.word	0x20000448
 8001644:	200003f4 	.word	0x200003f4
 8001648:	200004d4 	.word	0x200004d4
 800164c:	200004f8 	.word	0x200004f8
 8001650:	200005cc 	.word	0x200005cc
 8001654:	20000378 	.word	0x20000378
 8001658:	200003ec 	.word	0x200003ec
 800165c:	002dc6bf 	.word	0x002dc6bf
 8001660:	20000240 	.word	0x20000240
 8001664:	20000244 	.word	0x20000244
 8001668:	20000254 	.word	0x20000254
 800166c:	20000258 	.word	0x20000258

08001670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b094      	sub	sp, #80	; 0x50
 8001674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800167a:	2228      	movs	r2, #40	; 0x28
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f006 fd82 	bl	8008188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a0:	2301      	movs	r3, #1
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ae:	2301      	movs	r3, #1
 80016b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b2:	2302      	movs	r3, #2
 80016b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016c6:	4618      	mov	r0, r3
 80016c8:	f004 fd5e 	bl	8006188 <HAL_RCC_OscConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016d2:	f002 fad3 	bl	8003c7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d6:	230f      	movs	r3, #15
 80016d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016da:	2302      	movs	r3, #2
 80016dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2102      	movs	r1, #2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f004 ffc8 	bl	8006688 <HAL_RCC_ClockConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80016fe:	f002 fabd 	bl	8003c7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001702:	2302      	movs	r3, #2
 8001704:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800170a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	4618      	mov	r0, r3
 8001710:	f005 f954 	bl	80069bc <HAL_RCCEx_PeriphCLKConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800171a:	f002 faaf 	bl	8003c7c <Error_Handler>
  }
}
 800171e:	bf00      	nop
 8001720:	3750      	adds	r7, #80	; 0x50
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001738:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <MX_ADC1_Init+0xb0>)
 800173a:	4a28      	ldr	r2, [pc, #160]	; (80017dc <MX_ADC1_Init+0xb4>)
 800173c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <MX_ADC1_Init+0xb0>)
 8001740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001744:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001746:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <MX_ADC1_Init+0xb0>)
 8001748:	2201      	movs	r2, #1
 800174a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <MX_ADC1_Init+0xb0>)
 800174e:	2200      	movs	r2, #0
 8001750:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <MX_ADC1_Init+0xb0>)
 8001754:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001758:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <MX_ADC1_Init+0xb0>)
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_ADC1_Init+0xb0>)
 8001762:	2203      	movs	r2, #3
 8001764:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001766:	481c      	ldr	r0, [pc, #112]	; (80017d8 <MX_ADC1_Init+0xb0>)
 8001768:	f002 fe64 	bl	8004434 <HAL_ADC_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001772:	f002 fa83 	bl	8003c7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001776:	2303      	movs	r3, #3
 8001778:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800177a:	2301      	movs	r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800177e:	2307      	movs	r3, #7
 8001780:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	4619      	mov	r1, r3
 8001786:	4814      	ldr	r0, [pc, #80]	; (80017d8 <MX_ADC1_Init+0xb0>)
 8001788:	f003 f826 	bl	80047d8 <HAL_ADC_ConfigChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001792:	f002 fa73 	bl	8003c7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001796:	2308      	movs	r3, #8
 8001798:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800179a:	2302      	movs	r3, #2
 800179c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	4619      	mov	r1, r3
 80017a2:	480d      	ldr	r0, [pc, #52]	; (80017d8 <MX_ADC1_Init+0xb0>)
 80017a4:	f003 f818 	bl	80047d8 <HAL_ADC_ConfigChannel>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80017ae:	f002 fa65 	bl	8003c7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80017b2:	2309      	movs	r3, #9
 80017b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80017b6:	2303      	movs	r3, #3
 80017b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	4619      	mov	r1, r3
 80017be:	4806      	ldr	r0, [pc, #24]	; (80017d8 <MX_ADC1_Init+0xb0>)
 80017c0:	f003 f80a 	bl	80047d8 <HAL_ADC_ConfigChannel>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80017ca:	f002 fa57 	bl	8003c7c <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */

  //DRV8323RH Unity Gain Bandwidth = 1MHz
  /* USER CODE END ADC1_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200003bc 	.word	0x200003bc
 80017dc:	40012400 	.word	0x40012400

080017e0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <MX_CAN_Init+0x64>)
 80017e6:	4a18      	ldr	r2, [pc, #96]	; (8001848 <MX_CAN_Init+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <MX_CAN_Init+0x64>)
 80017ec:	2206      	movs	r2, #6
 80017ee:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <MX_CAN_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017f6:	4b13      	ldr	r3, [pc, #76]	; (8001844 <MX_CAN_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_CAN_Init+0x64>)
 80017fe:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001802:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <MX_CAN_Init+0x64>)
 8001806:	2200      	movs	r2, #0
 8001808:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_CAN_Init+0x64>)
 800180c:	2200      	movs	r2, #0
 800180e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <MX_CAN_Init+0x64>)
 8001812:	2201      	movs	r2, #1
 8001814:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <MX_CAN_Init+0x64>)
 8001818:	2200      	movs	r2, #0
 800181a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_CAN_Init+0x64>)
 800181e:	2201      	movs	r2, #1
 8001820:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <MX_CAN_Init+0x64>)
 8001824:	2200      	movs	r2, #0
 8001826:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <MX_CAN_Init+0x64>)
 800182a:	2200      	movs	r2, #0
 800182c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_CAN_Init+0x64>)
 8001830:	f003 f9cb 	bl	8004bca <HAL_CAN_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800183a:	f002 fa1f 	bl	8003c7c <Error_Handler>
  /* USER CODE BEGIN CAN_Init 2 */


  /* USER CODE END CAN_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000378 	.word	0x20000378
 8001848:	40006400 	.word	0x40006400

0800184c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001850:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001852:	4a19      	ldr	r2, [pc, #100]	; (80018b8 <MX_SPI1_Init+0x6c>)
 8001854:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800185c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001866:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800186a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_SPI1_Init+0x68>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001874:	2201      	movs	r2, #1
 8001876:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_SPI1_Init+0x68>)
 800187a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001882:	2228      	movs	r2, #40	; 0x28
 8001884:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_SPI1_Init+0x68>)
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001894:	2200      	movs	r2, #0
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_SPI1_Init+0x68>)
 800189a:	220a      	movs	r2, #10
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_SPI1_Init+0x68>)
 80018a0:	f005 f942 	bl	8006b28 <HAL_SPI_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80018aa:	f002 f9e7 	bl	8003c7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	2000051c 	.word	0x2000051c
 80018b8:	40013000 	.word	0x40013000

080018bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08e      	sub	sp, #56	; 0x38
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d0:	f107 0320 	add.w	r3, r7, #32
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
 80018e8:	615a      	str	r2, [r3, #20]
 80018ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018ec:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <MX_TIM2_Init+0x114>)
 80018ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018f4:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <MX_TIM2_Init+0x114>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80018fa:	4b35      	ldr	r3, [pc, #212]	; (80019d0 <MX_TIM2_Init+0x114>)
 80018fc:	2220      	movs	r2, #32
 80018fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = ARR_MAX_CA;
 8001900:	4b33      	ldr	r3, [pc, #204]	; (80019d0 <MX_TIM2_Init+0x114>)
 8001902:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001906:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001908:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <MX_TIM2_Init+0x114>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800190e:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <MX_TIM2_Init+0x114>)
 8001910:	2280      	movs	r2, #128	; 0x80
 8001912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001914:	482e      	ldr	r0, [pc, #184]	; (80019d0 <MX_TIM2_Init+0x114>)
 8001916:	f005 fbd3 	bl	80070c0 <HAL_TIM_Base_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001920:	f002 f9ac 	bl	8003c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800192a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800192e:	4619      	mov	r1, r3
 8001930:	4827      	ldr	r0, [pc, #156]	; (80019d0 <MX_TIM2_Init+0x114>)
 8001932:	f005 ff27 	bl	8007784 <HAL_TIM_ConfigClockSource>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800193c:	f002 f99e 	bl	8003c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001940:	4823      	ldr	r0, [pc, #140]	; (80019d0 <MX_TIM2_Init+0x114>)
 8001942:	f005 fc5f 	bl	8007204 <HAL_TIM_PWM_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800194c:	f002 f996 	bl	8003c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001950:	2320      	movs	r3, #32
 8001952:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001958:	f107 0320 	add.w	r3, r7, #32
 800195c:	4619      	mov	r1, r3
 800195e:	481c      	ldr	r0, [pc, #112]	; (80019d0 <MX_TIM2_Init+0x114>)
 8001960:	f006 fa9c 	bl	8007e9c <HAL_TIMEx_MasterConfigSynchronization>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800196a:	f002 f987 	bl	8003c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196e:	2360      	movs	r3, #96	; 0x60
 8001970:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2200      	movs	r2, #0
 8001982:	4619      	mov	r1, r3
 8001984:	4812      	ldr	r0, [pc, #72]	; (80019d0 <MX_TIM2_Init+0x114>)
 8001986:	f005 fe3f 	bl	8007608 <HAL_TIM_PWM_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001990:	f002 f974 	bl	8003c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2204      	movs	r2, #4
 8001998:	4619      	mov	r1, r3
 800199a:	480d      	ldr	r0, [pc, #52]	; (80019d0 <MX_TIM2_Init+0x114>)
 800199c:	f005 fe34 	bl	8007608 <HAL_TIM_PWM_ConfigChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80019a6:	f002 f969 	bl	8003c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	2208      	movs	r2, #8
 80019ae:	4619      	mov	r1, r3
 80019b0:	4807      	ldr	r0, [pc, #28]	; (80019d0 <MX_TIM2_Init+0x114>)
 80019b2:	f005 fe29 	bl	8007608 <HAL_TIM_PWM_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80019bc:	f002 f95e 	bl	8003c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019c0:	4803      	ldr	r0, [pc, #12]	; (80019d0 <MX_TIM2_Init+0x114>)
 80019c2:	f002 fb01 	bl	8003fc8 <HAL_TIM_MspPostInit>

}
 80019c6:	bf00      	nop
 80019c8:	3738      	adds	r7, #56	; 0x38
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000057c 	.word	0x2000057c

080019d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019da:	f107 0308 	add.w	r3, r7, #8
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e8:	463b      	mov	r3, r7
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019f0:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <MX_TIM4_Init+0x94>)
 80019f2:	4a1e      	ldr	r2, [pc, #120]	; (8001a6c <MX_TIM4_Init+0x98>)
 80019f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 65-1;
 80019f6:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <MX_TIM4_Init+0x94>)
 80019f8:	2240      	movs	r2, #64	; 0x40
 80019fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fc:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <MX_TIM4_Init+0x94>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5625;
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <MX_TIM4_Init+0x94>)
 8001a04:	f241 52f9 	movw	r2, #5625	; 0x15f9
 8001a08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <MX_TIM4_Init+0x94>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <MX_TIM4_Init+0x94>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a16:	4814      	ldr	r0, [pc, #80]	; (8001a68 <MX_TIM4_Init+0x94>)
 8001a18:	f005 fb52 	bl	80070c0 <HAL_TIM_Base_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001a22:	f002 f92b 	bl	8003c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a2c:	f107 0308 	add.w	r3, r7, #8
 8001a30:	4619      	mov	r1, r3
 8001a32:	480d      	ldr	r0, [pc, #52]	; (8001a68 <MX_TIM4_Init+0x94>)
 8001a34:	f005 fea6 	bl	8007784 <HAL_TIM_ConfigClockSource>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001a3e:	f002 f91d 	bl	8003c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4806      	ldr	r0, [pc, #24]	; (8001a68 <MX_TIM4_Init+0x94>)
 8001a50:	f006 fa24 	bl	8007e9c <HAL_TIMEx_MasterConfigSynchronization>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001a5a:	f002 f90f 	bl	8003c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000304 	.word	0x20000304
 8001a6c:	40000800 	.word	0x40000800

08001a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a74:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <MX_USART1_UART_Init+0x48>)
 8001a76:	4a11      	ldr	r2, [pc, #68]	; (8001abc <MX_USART1_UART_Init+0x4c>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_USART1_UART_Init+0x48>)
 8001a7c:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <MX_USART1_UART_Init+0x50>)
 8001a7e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <MX_USART1_UART_Init+0x48>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_USART1_UART_Init+0x48>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <MX_USART1_UART_Init+0x48>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_USART1_UART_Init+0x48>)
 8001a94:	220c      	movs	r2, #12
 8001a96:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <MX_USART1_UART_Init+0x48>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_USART1_UART_Init+0x48>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aa4:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <MX_USART1_UART_Init+0x48>)
 8001aa6:	f006 fa69 	bl	8007f7c <HAL_UART_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001ab0:	f002 f8e4 	bl	8003c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200003f8 	.word	0x200003f8
 8001abc:	40013800 	.word	0x40013800
 8001ac0:	001e8480 	.word	0x001e8480

08001ac4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_DMA_Init+0x38>)
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <MX_DMA_Init+0x38>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6153      	str	r3, [r2, #20]
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_DMA_Init+0x38>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	200b      	movs	r0, #11
 8001ae8:	f003 ff8d 	bl	8005a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001aec:	200b      	movs	r0, #11
 8001aee:	f003 ffa6 	bl	8005a3e <HAL_NVIC_EnableIRQ>

}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000

08001b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b06:	f107 0310 	add.w	r3, r7, #16
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b14:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <MX_GPIO_Init+0xf8>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a37      	ldr	r2, [pc, #220]	; (8001bf8 <MX_GPIO_Init+0xf8>)
 8001b1a:	f043 0310 	orr.w	r3, r3, #16
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <MX_GPIO_Init+0xf8>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0310 	and.w	r3, r3, #16
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2c:	4b32      	ldr	r3, [pc, #200]	; (8001bf8 <MX_GPIO_Init+0xf8>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a31      	ldr	r2, [pc, #196]	; (8001bf8 <MX_GPIO_Init+0xf8>)
 8001b32:	f043 0320 	orr.w	r3, r3, #32
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b2f      	ldr	r3, [pc, #188]	; (8001bf8 <MX_GPIO_Init+0xf8>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b44:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <MX_GPIO_Init+0xf8>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <MX_GPIO_Init+0xf8>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b29      	ldr	r3, [pc, #164]	; (8001bf8 <MX_GPIO_Init+0xf8>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5c:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <MX_GPIO_Init+0xf8>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a25      	ldr	r2, [pc, #148]	; (8001bf8 <MX_GPIO_Init+0xf8>)
 8001b62:	f043 0308 	orr.w	r3, r3, #8
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <MX_GPIO_Init+0xf8>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b7a:	4820      	ldr	r0, [pc, #128]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b7c:	f004 faec 	bl	8006158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2110      	movs	r1, #16
 8001b84:	481e      	ldr	r0, [pc, #120]	; (8001c00 <MX_GPIO_Init+0x100>)
 8001b86:	f004 fae7 	bl	8006158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|EN_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001b90:	481c      	ldr	r0, [pc, #112]	; (8001c04 <MX_GPIO_Init+0x104>)
 8001b92:	f004 fae1 	bl	8006158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba8:	f107 0310 	add.w	r3, r7, #16
 8001bac:	4619      	mov	r1, r3
 8001bae:	4813      	ldr	r0, [pc, #76]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001bb0:	f004 f94e 	bl	8005e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001bb4:	2310      	movs	r3, #16
 8001bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480d      	ldr	r0, [pc, #52]	; (8001c00 <MX_GPIO_Init+0x100>)
 8001bcc:	f004 f940 	bl	8005e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 EN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|EN_Pin;
 8001bd0:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2302      	movs	r3, #2
 8001be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be2:	f107 0310 	add.w	r3, r7, #16
 8001be6:	4619      	mov	r1, r3
 8001be8:	4806      	ldr	r0, [pc, #24]	; (8001c04 <MX_GPIO_Init+0x104>)
 8001bea:	f004 f931 	bl	8005e50 <HAL_GPIO_Init>

}
 8001bee:	bf00      	nop
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40011000 	.word	0x40011000
 8001c00:	40010800 	.word	0x40010800
 8001c04:	40010c00 	.word	0x40010c00

08001c08 <DWT_Init>:
/* USER CODE BEGIN 4 */


//Delay function
__STATIC_INLINE void DWT_Init(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <DWT_Init+0x24>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4a06      	ldr	r2, [pc, #24]	; (8001c2c <DWT_Init+0x24>)
 8001c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c16:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Data watchpoint trigger(DWT)
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <DWT_Init+0x28>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <DWT_Init+0x28>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	e000edf0 	.word	0xe000edf0
 8001c30:	e0001000 	.word	0xe0001000

08001c34 <micros>:
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <micros+0x20>)
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <micros+0x24>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4906      	ldr	r1, [pc, #24]	; (8001c5c <micros+0x28>)
 8001c42:	fba1 1303 	umull	r1, r3, r1, r3
 8001c46:	0c9b      	lsrs	r3, r3, #18
 8001c48:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	e0001000 	.word	0xe0001000
 8001c58:	20000020 	.word	0x20000020
 8001c5c:	431bde83 	.word	0x431bde83

08001c60 <HAL_TIM_PeriodElapsedCallback>:

//Timer interrupt routine
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	if(htim == &htim4) //interrupt every 1ms
	{
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
	...

08001c74 <CAN_init_446>:

//CAN function
void CAN_init_446()
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
	if(HAL_CAN_Start(&hcan) != HAL_OK)
 8001c7a:	481e      	ldr	r0, [pc, #120]	; (8001cf4 <CAN_init_446+0x80>)
 8001c7c:	f003 f969 	bl	8004f52 <HAL_CAN_Start>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <CAN_init_446+0x16>
	 {
	 	Error_Handler();
 8001c86:	f001 fff9 	bl	8003c7c <Error_Handler>
	 }

	   CAN_FilterTypeDef canfilterconfig;
	   canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	623b      	str	r3, [r7, #32]
	   canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
	   canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
	   canfilterconfig.FilterIdHigh = 0x103<<5;
 8001c96:	f242 0360 	movw	r3, #8288	; 0x2060
 8001c9a:	603b      	str	r3, [r7, #0]
	   canfilterconfig.FilterIdLow = 0x0000;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	607b      	str	r3, [r7, #4]
	   canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 8001ca0:	f242 0360 	movw	r3, #8288	; 0x2060
 8001ca4:	60bb      	str	r3, [r7, #8]
	   canfilterconfig.FilterMaskIdLow = 0x0000;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
	   canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
	   canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	61fb      	str	r3, [r7, #28]
	   canfilterconfig.SlaveStartFilterBank = 14;  // doesn't matter in single can controllers
 8001cb2:	230e      	movs	r3, #14
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24

	   if(HAL_CAN_ConfigFilter(&hcan, &canfilterconfig) != HAL_OK)
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480e      	ldr	r0, [pc, #56]	; (8001cf4 <CAN_init_446+0x80>)
 8001cbc:	f003 f880 	bl	8004dc0 <HAL_CAN_ConfigFilter>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <CAN_init_446+0x56>
	   {
	 	  Error_Handler();
 8001cc6:	f001 ffd9 	bl	8003c7c <Error_Handler>
	   }

	   HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001cca:	2102      	movs	r1, #2
 8001ccc:	4809      	ldr	r0, [pc, #36]	; (8001cf4 <CAN_init_446+0x80>)
 8001cce:	f003 fb6f 	bl	80053b0 <HAL_CAN_ActivateNotification>

	   TxHeader.DLC = 4;  // data length
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <CAN_init_446+0x84>)
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	611a      	str	r2, [r3, #16]
	   TxHeader.IDE = CAN_ID_STD;
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <CAN_init_446+0x84>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
	   TxHeader.RTR = CAN_RTR_DATA;
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <CAN_init_446+0x84>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
	   TxHeader.StdId = 0x446;  // ID
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <CAN_init_446+0x84>)
 8001ce6:	f240 4246 	movw	r2, #1094	; 0x446
 8001cea:	601a      	str	r2, [r3, #0]
}
 8001cec:	bf00      	nop
 8001cee:	3728      	adds	r7, #40	; 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000378 	.word	0x20000378
 8001cf8:	200005cc 	.word	0x200005cc

08001cfc <float2Bytes>:
	   TxHeader.IDE = CAN_ID_STD;
	   TxHeader.RTR = CAN_RTR_DATA;
	   TxHeader.StdId = 0x103;  // ID
}
void float2Bytes(float val, uint8_t* bytes_array)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  {
    float float_variable;
    uint8_t temp_array[4];
  } u;
  // Overite bytes of union with float variable
  u.float_variable = val;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
  // Assign bytes to input array
  memcpy(bytes_array, u.temp_array, 4);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	601a      	str	r2, [r3, #0]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <Bytes2float>:

float Bytes2float(uint8_t* bytes_array)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b085      	sub	sp, #20
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  uint8_t temp_array[4] = {bytes_array[0], bytes_array[1], bytes_array[2], bytes_array[3]};
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	723b      	strb	r3, [r7, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	727b      	strb	r3, [r7, #9]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	789b      	ldrb	r3, [r3, #2]
 8001d32:	72bb      	strb	r3, [r7, #10]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	78db      	ldrb	r3, [r3, #3]
 8001d38:	72fb      	strb	r3, [r7, #11]
  float f = *(float *)&temp_array;
 8001d3a:	f107 0308 	add.w	r3, r7, #8
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
  return f;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
	...

08001d50 <initCurrentsense>:
	return val;
}

//Initialize Current Sensor
void initCurrentsense(float _shunt_resistor,float _gain)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  R_sense = _shunt_resistor;
 8001d5a:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <initCurrentsense+0x2c>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6013      	str	r3, [r2, #0]
  gain_a = _gain;
 8001d60:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <initCurrentsense+0x30>)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	6013      	str	r3, [r2, #0]
  gain_b = _gain;
 8001d66:	4a07      	ldr	r2, [pc, #28]	; (8001d84 <initCurrentsense+0x34>)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6013      	str	r3, [r2, #0]
  gain_c = _gain;
 8001d6c:	4a06      	ldr	r2, [pc, #24]	; (8001d88 <initCurrentsense+0x38>)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6013      	str	r3, [r2, #0]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	2000060c 	.word	0x2000060c
 8001d80:	20000674 	.word	0x20000674
 8001d84:	200004d0 	.word	0x200004d0
 8001d88:	200003a8 	.word	0x200003a8
 8001d8c:	00000000 	.word	0x00000000

08001d90 <getPhaseCurrents>:
    offset_ic = offset_ic / calibration_rounds;
}

//// read all three phase currents (if possible 2 or 3)
struct PhaseCurrent_s getPhaseCurrents()
{
 8001d90:	b5b0      	push	{r4, r5, r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
    struct PhaseCurrent_s current;
    current.a = ((3.3 / 2) - (adcResultDMA[0] - 0) * ((3.05 - 0.25) / (3785.0 - 311.0))) / (R_sense * gain_a);
 8001d98:	4b51      	ldr	r3, [pc, #324]	; (8001ee0 <getPhaseCurrents+0x150>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fb21 	bl	80003e4 <__aeabi_ui2d>
 8001da2:	a34b      	add	r3, pc, #300	; (adr r3, 8001ed0 <getPhaseCurrents+0x140>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fb96 	bl	80004d8 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	a149      	add	r1, pc, #292	; (adr r1, 8001ed8 <getPhaseCurrents+0x148>)
 8001db2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001db6:	f7fe f9d7 	bl	8000168 <__aeabi_dsub>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4614      	mov	r4, r2
 8001dc0:	461d      	mov	r5, r3
 8001dc2:	4b48      	ldr	r3, [pc, #288]	; (8001ee4 <getPhaseCurrents+0x154>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a48      	ldr	r2, [pc, #288]	; (8001ee8 <getPhaseCurrents+0x158>)
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe ffd9 	bl	8000d84 <__aeabi_fmul>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fb27 	bl	8000428 <__aeabi_f2d>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4620      	mov	r0, r4
 8001de0:	4629      	mov	r1, r5
 8001de2:	f7fe fca3 	bl	800072c <__aeabi_ddiv>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f7fe fe6b 	bl	8000ac8 <__aeabi_d2f>
 8001df2:	4603      	mov	r3, r0
 8001df4:	60fb      	str	r3, [r7, #12]
    current.b = ((3.3 / 2) - (adcResultDMA[1] - 0) * ((3.05 - 0.25) / (3785.0 - 311.0))) / (R_sense * gain_b);
 8001df6:	4b3a      	ldr	r3, [pc, #232]	; (8001ee0 <getPhaseCurrents+0x150>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe faf2 	bl	80003e4 <__aeabi_ui2d>
 8001e00:	a333      	add	r3, pc, #204	; (adr r3, 8001ed0 <getPhaseCurrents+0x140>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	f7fe fb67 	bl	80004d8 <__aeabi_dmul>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	a132      	add	r1, pc, #200	; (adr r1, 8001ed8 <getPhaseCurrents+0x148>)
 8001e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e14:	f7fe f9a8 	bl	8000168 <__aeabi_dsub>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4614      	mov	r4, r2
 8001e1e:	461d      	mov	r5, r3
 8001e20:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <getPhaseCurrents+0x154>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a31      	ldr	r2, [pc, #196]	; (8001eec <getPhaseCurrents+0x15c>)
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe ffaa 	bl	8000d84 <__aeabi_fmul>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe faf8 	bl	8000428 <__aeabi_f2d>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	4629      	mov	r1, r5
 8001e40:	f7fe fc74 	bl	800072c <__aeabi_ddiv>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f7fe fe3c 	bl	8000ac8 <__aeabi_d2f>
 8001e50:	4603      	mov	r3, r0
 8001e52:	613b      	str	r3, [r7, #16]
    current.c = ((3.3 / 2) - (adcResultDMA[2] - 0) * ((3.05 - 0.25) / (3785.0 - 311.0))) / (R_sense * gain_c);
 8001e54:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <getPhaseCurrents+0x150>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fac3 	bl	80003e4 <__aeabi_ui2d>
 8001e5e:	a31c      	add	r3, pc, #112	; (adr r3, 8001ed0 <getPhaseCurrents+0x140>)
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	f7fe fb38 	bl	80004d8 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	a11a      	add	r1, pc, #104	; (adr r1, 8001ed8 <getPhaseCurrents+0x148>)
 8001e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e72:	f7fe f979 	bl	8000168 <__aeabi_dsub>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4614      	mov	r4, r2
 8001e7c:	461d      	mov	r5, r3
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <getPhaseCurrents+0x154>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1b      	ldr	r2, [pc, #108]	; (8001ef0 <getPhaseCurrents+0x160>)
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe ff7b 	bl	8000d84 <__aeabi_fmul>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fac9 	bl	8000428 <__aeabi_f2d>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	4629      	mov	r1, r5
 8001e9e:	f7fe fc45 	bl	800072c <__aeabi_ddiv>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f7fe fe0d 	bl	8000ac8 <__aeabi_d2f>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	617b      	str	r3, [r7, #20]
//    current.b = -current.a-current.c;
    return current;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	461c      	mov	r4, r3
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ebe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	f3af 8000 	nop.w
 8001ed0:	9f0d96a7 	.word	0x9f0d96a7
 8001ed4:	3f4a691c 	.word	0x3f4a691c
 8001ed8:	66666666 	.word	0x66666666
 8001edc:	3ffa6666 	.word	0x3ffa6666
 8001ee0:	20000480 	.word	0x20000480
 8001ee4:	2000060c 	.word	0x2000060c
 8001ee8:	20000674 	.word	0x20000674
 8001eec:	200004d0 	.word	0x200004d0
 8001ef0:	200003a8 	.word	0x200003a8
 8001ef4:	00000000 	.word	0x00000000

08001ef8 <getFOCCurrents>:
// function used with the foc algorihtm
//   calculating DQ currents from phase currents
//   - function calculating park and clarke transform of the phase currents
//   - using getPhaseCurrents internally
struct DQCurrent_s getFOCCurrents(float angle_el)
{
 8001ef8:	b5b0      	push	{r4, r5, r7, lr}
 8001efa:	b08c      	sub	sp, #48	; 0x30
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
    // read current phase currents
    struct PhaseCurrent_s current = getPhaseCurrents(); //Ia,Ib,Ic
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff42 	bl	8001d90 <getPhaseCurrents>
    // calculate clarke transform
    float i_alpha, i_beta;
//    if(!current.c)
//    {
        // if only two measured currents
        i_alpha = current.a;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        i_beta = (-(_1_SQRT3) * current.a) + (-(_2_SQRT3) * current.c);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fa88 	bl	8000428 <__aeabi_f2d>
 8001f18:	a32b      	add	r3, pc, #172	; (adr r3, 8001fc8 <getFOCCurrents+0xd0>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe fadb 	bl	80004d8 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4614      	mov	r4, r2
 8001f28:	461d      	mov	r5, r3
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fa7b 	bl	8000428 <__aeabi_f2d>
 8001f32:	a327      	add	r3, pc, #156	; (adr r3, 8001fd0 <getFOCCurrents+0xd8>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe face 	bl	80004d8 <__aeabi_dmul>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4620      	mov	r0, r4
 8001f42:	4629      	mov	r1, r5
 8001f44:	f7fe f912 	bl	800016c <__adddf3>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f7fe fdba 	bl	8000ac8 <__aeabi_d2f>
 8001f54:	4603      	mov	r3, r0
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
//        i_alpha = a;
//        i_beta = _1_SQRT3 * a + _2_SQRT3 * b;
//    }

    // calculate park transform
    float ct = _cos(angle_el);
 8001f58:	6838      	ldr	r0, [r7, #0]
 8001f5a:	f000 f995 	bl	8002288 <_cos>
 8001f5e:	6278      	str	r0, [r7, #36]	; 0x24
    float st = _sin(angle_el);
 8001f60:	6838      	ldr	r0, [r7, #0]
 8001f62:	f000 f839 	bl	8001fd8 <_sin>
 8001f66:	6238      	str	r0, [r7, #32]
    struct DQCurrent_s return_current;
    return_current.d = i_alpha * ct + i_beta * st;
 8001f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f6c:	f7fe ff0a 	bl	8000d84 <__aeabi_fmul>
 8001f70:	4603      	mov	r3, r0
 8001f72:	461c      	mov	r4, r3
 8001f74:	6a39      	ldr	r1, [r7, #32]
 8001f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f78:	f7fe ff04 	bl	8000d84 <__aeabi_fmul>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4620      	mov	r0, r4
 8001f82:	f7fe fdf7 	bl	8000b74 <__addsf3>
 8001f86:	4603      	mov	r3, r0
 8001f88:	60fb      	str	r3, [r7, #12]
    return_current.q = i_beta * ct - i_alpha * st;
 8001f8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f8e:	f7fe fef9 	bl	8000d84 <__aeabi_fmul>
 8001f92:	4603      	mov	r3, r0
 8001f94:	461c      	mov	r4, r3
 8001f96:	6a39      	ldr	r1, [r7, #32]
 8001f98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f9a:	f7fe fef3 	bl	8000d84 <__aeabi_fmul>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f7fe fde4 	bl	8000b70 <__aeabi_fsub>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	613b      	str	r3, [r7, #16]
    return return_current;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fb8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	3730      	adds	r7, #48	; 0x30
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fc4:	f3af 8000 	nop.w
 8001fc8:	45904047 	.word	0x45904047
 8001fcc:	bfe279a7 	.word	0xbfe279a7
 8001fd0:	45904047 	.word	0x45904047
 8001fd4:	bff279a7 	.word	0xbff279a7

08001fd8 <_sin>:
// ~40us (float array)
// ~50us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _sin(float a)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if(a < _PI_2)
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7fe fa21 	bl	8000428 <__aeabi_f2d>
 8001fe6:	a39c      	add	r3, pc, #624	; (adr r3, 8002258 <_sin+0x280>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fce6 	bl	80009bc <__aeabi_dcmplt>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d042      	beq.n	800207c <_sin+0xa4>
  {
 //return sine_array[(int)(199.0*( a / (_PI/2.0)))];
    //return sine_array[(int)(126.6873* a)];           // float array optimized
    return 0.0001f*sine_array[_round(126.6873f* a)];      // int array optimized
 8001ff6:	499e      	ldr	r1, [pc, #632]	; (8002270 <_sin+0x298>)
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7fe fec3 	bl	8000d84 <__aeabi_fmul>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f04f 0100 	mov.w	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff f86f 	bl	80010e8 <__aeabi_fcmpge>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d014      	beq.n	800203a <_sin+0x62>
 8002010:	4997      	ldr	r1, [pc, #604]	; (8002270 <_sin+0x298>)
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe feb6 	bl	8000d84 <__aeabi_fmul>
 8002018:	4603      	mov	r3, r0
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fa04 	bl	8000428 <__aeabi_f2d>
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	4b93      	ldr	r3, [pc, #588]	; (8002274 <_sin+0x29c>)
 8002026:	f7fe f8a1 	bl	800016c <__adddf3>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	f7fe fd01 	bl	8000a38 <__aeabi_d2iz>
 8002036:	4603      	mov	r3, r0
 8002038:	e013      	b.n	8002062 <_sin+0x8a>
 800203a:	498d      	ldr	r1, [pc, #564]	; (8002270 <_sin+0x298>)
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7fe fea1 	bl	8000d84 <__aeabi_fmul>
 8002042:	4603      	mov	r3, r0
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe f9ef 	bl	8000428 <__aeabi_f2d>
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	4b89      	ldr	r3, [pc, #548]	; (8002274 <_sin+0x29c>)
 8002050:	f7fe f88a 	bl	8000168 <__aeabi_dsub>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	f7fe fcec 	bl	8000a38 <__aeabi_d2iz>
 8002060:	4603      	mov	r3, r0
 8002062:	4a85      	ldr	r2, [pc, #532]	; (8002278 <_sin+0x2a0>)
 8002064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fe37 	bl	8000cdc <__aeabi_i2f>
 800206e:	4603      	mov	r3, r0
 8002070:	4982      	ldr	r1, [pc, #520]	; (800227c <_sin+0x2a4>)
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fe86 	bl	8000d84 <__aeabi_fmul>
 8002078:	4603      	mov	r3, r0
 800207a:	e0e9      	b.n	8002250 <_sin+0x278>
  }
  else if(a < _PI)
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7fe f9d3 	bl	8000428 <__aeabi_f2d>
 8002082:	a377      	add	r3, pc, #476	; (adr r3, 8002260 <_sin+0x288>)
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	f7fe fc98 	bl	80009bc <__aeabi_dcmplt>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d046      	beq.n	8002120 <_sin+0x148>
  {
    // return sine_array[(int)(199.0*(1.0 - (a-_PI/2.0) / (_PI/2.0)))];
    //return sine_array[398 - (int)(126.6873*a)];          // float array optimized
    return 0.0001f*sine_array[398 - _round(126.6873f*a)];     // int array optimized
 8002092:	4977      	ldr	r1, [pc, #476]	; (8002270 <_sin+0x298>)
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7fe fe75 	bl	8000d84 <__aeabi_fmul>
 800209a:	4603      	mov	r3, r0
 800209c:	f04f 0100 	mov.w	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff f821 	bl	80010e8 <__aeabi_fcmpge>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d016      	beq.n	80020da <_sin+0x102>
 80020ac:	4970      	ldr	r1, [pc, #448]	; (8002270 <_sin+0x298>)
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fe68 	bl	8000d84 <__aeabi_fmul>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe f9b6 	bl	8000428 <__aeabi_f2d>
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	4b6c      	ldr	r3, [pc, #432]	; (8002274 <_sin+0x29c>)
 80020c2:	f7fe f853 	bl	800016c <__adddf3>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	f7fe fcb3 	bl	8000a38 <__aeabi_d2iz>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 80020d8:	e015      	b.n	8002106 <_sin+0x12e>
 80020da:	4965      	ldr	r1, [pc, #404]	; (8002270 <_sin+0x298>)
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7fe fe51 	bl	8000d84 <__aeabi_fmul>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe f99f 	bl	8000428 <__aeabi_f2d>
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	4b61      	ldr	r3, [pc, #388]	; (8002274 <_sin+0x29c>)
 80020f0:	f7fe f83a 	bl	8000168 <__aeabi_dsub>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	f7fe fc9c 	bl	8000a38 <__aeabi_d2iz>
 8002100:	4603      	mov	r3, r0
 8002102:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8002106:	4a5c      	ldr	r2, [pc, #368]	; (8002278 <_sin+0x2a0>)
 8002108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fde5 	bl	8000cdc <__aeabi_i2f>
 8002112:	4603      	mov	r3, r0
 8002114:	4959      	ldr	r1, [pc, #356]	; (800227c <_sin+0x2a4>)
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fe34 	bl	8000d84 <__aeabi_fmul>
 800211c:	4603      	mov	r3, r0
 800211e:	e097      	b.n	8002250 <_sin+0x278>
  }
  else if(a < _3PI_2)
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7fe f981 	bl	8000428 <__aeabi_f2d>
 8002126:	a350      	add	r3, pc, #320	; (adr r3, 8002268 <_sin+0x290>)
 8002128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212c:	f7fe fc46 	bl	80009bc <__aeabi_dcmplt>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d046      	beq.n	80021c4 <_sin+0x1ec>
  {
    // return -sine_array[(int)(199.0*((a - _PI) / (_PI/2.0)))];
    //return -sine_array[-398 + (int)(126.6873*a)];           // float array optimized
    return -0.0001f*sine_array[-398 + _round(126.6873f*a)];      // int array optimized
 8002136:	494e      	ldr	r1, [pc, #312]	; (8002270 <_sin+0x298>)
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7fe fe23 	bl	8000d84 <__aeabi_fmul>
 800213e:	4603      	mov	r3, r0
 8002140:	f04f 0100 	mov.w	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe ffcf 	bl	80010e8 <__aeabi_fcmpge>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d016      	beq.n	800217e <_sin+0x1a6>
 8002150:	4947      	ldr	r1, [pc, #284]	; (8002270 <_sin+0x298>)
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe fe16 	bl	8000d84 <__aeabi_fmul>
 8002158:	4603      	mov	r3, r0
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f964 	bl	8000428 <__aeabi_f2d>
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	4b43      	ldr	r3, [pc, #268]	; (8002274 <_sin+0x29c>)
 8002166:	f7fe f801 	bl	800016c <__adddf3>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	f7fe fc61 	bl	8000a38 <__aeabi_d2iz>
 8002176:	4603      	mov	r3, r0
 8002178:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 800217c:	e015      	b.n	80021aa <_sin+0x1d2>
 800217e:	493c      	ldr	r1, [pc, #240]	; (8002270 <_sin+0x298>)
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7fe fdff 	bl	8000d84 <__aeabi_fmul>
 8002186:	4603      	mov	r3, r0
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe f94d 	bl	8000428 <__aeabi_f2d>
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	4b38      	ldr	r3, [pc, #224]	; (8002274 <_sin+0x29c>)
 8002194:	f7fd ffe8 	bl	8000168 <__aeabi_dsub>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	f7fe fc4a 	bl	8000a38 <__aeabi_d2iz>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 80021aa:	4a33      	ldr	r2, [pc, #204]	; (8002278 <_sin+0x2a0>)
 80021ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe fd93 	bl	8000cdc <__aeabi_i2f>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4931      	ldr	r1, [pc, #196]	; (8002280 <_sin+0x2a8>)
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fde2 	bl	8000d84 <__aeabi_fmul>
 80021c0:	4603      	mov	r3, r0
 80021c2:	e045      	b.n	8002250 <_sin+0x278>
  }
  else
  {
    // return -sine_array[(int)(199.0*(1.0 - (a - 3*_PI/2) / (_PI/2.0)))];
    //return -sine_array[796 - (int)(126.6873*a)];           // float array optimized
    return -0.0001f*sine_array[796 - _round(126.6873f*a)];      // int array optimized
 80021c4:	492a      	ldr	r1, [pc, #168]	; (8002270 <_sin+0x298>)
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7fe fddc 	bl	8000d84 <__aeabi_fmul>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f04f 0100 	mov.w	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe ff88 	bl	80010e8 <__aeabi_fcmpge>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d016      	beq.n	800220c <_sin+0x234>
 80021de:	4924      	ldr	r1, [pc, #144]	; (8002270 <_sin+0x298>)
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7fe fdcf 	bl	8000d84 <__aeabi_fmul>
 80021e6:	4603      	mov	r3, r0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f91d 	bl	8000428 <__aeabi_f2d>
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <_sin+0x29c>)
 80021f4:	f7fd ffba 	bl	800016c <__adddf3>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4610      	mov	r0, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	f7fe fc1a 	bl	8000a38 <__aeabi_d2iz>
 8002204:	4603      	mov	r3, r0
 8002206:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 800220a:	e015      	b.n	8002238 <_sin+0x260>
 800220c:	4918      	ldr	r1, [pc, #96]	; (8002270 <_sin+0x298>)
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7fe fdb8 	bl	8000d84 <__aeabi_fmul>
 8002214:	4603      	mov	r3, r0
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f906 	bl	8000428 <__aeabi_f2d>
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <_sin+0x29c>)
 8002222:	f7fd ffa1 	bl	8000168 <__aeabi_dsub>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4610      	mov	r0, r2
 800222c:	4619      	mov	r1, r3
 800222e:	f7fe fc03 	bl	8000a38 <__aeabi_d2iz>
 8002232:	4603      	mov	r3, r0
 8002234:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8002238:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <_sin+0x2a0>)
 800223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe fd4c 	bl	8000cdc <__aeabi_i2f>
 8002244:	4603      	mov	r3, r0
 8002246:	490e      	ldr	r1, [pc, #56]	; (8002280 <_sin+0x2a8>)
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe fd9b 	bl	8000d84 <__aeabi_fmul>
 800224e:	4603      	mov	r3, r0
  }
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	5443d6f4 	.word	0x5443d6f4
 800225c:	3ff921fb 	.word	0x3ff921fb
 8002260:	54442eea 	.word	0x54442eea
 8002264:	400921fb 	.word	0x400921fb
 8002268:	7f330d32 	.word	0x7f330d32
 800226c:	4012d97c 	.word	0x4012d97c
 8002270:	42fd5fe6 	.word	0x42fd5fe6
 8002274:	3fe00000 	.word	0x3fe00000
 8002278:	0800e138 	.word	0x0800e138
 800227c:	38d1b717 	.word	0x38d1b717
 8002280:	b8d1b717 	.word	0xb8d1b717
 8002284:	00000000 	.word	0x00000000

08002288 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _cos(float a)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  float a_sin = a + _PI_2;
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7fe f8c9 	bl	8000428 <__aeabi_f2d>
 8002296:	a31a      	add	r3, pc, #104	; (adr r3, 8002300 <_cos+0x78>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	f7fd ff66 	bl	800016c <__adddf3>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4610      	mov	r0, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	f7fe fc0e 	bl	8000ac8 <__aeabi_d2f>
 80022ac:	4603      	mov	r3, r0
 80022ae:	60fb      	str	r3, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f7fe f8b9 	bl	8000428 <__aeabi_f2d>
 80022b6:	a314      	add	r3, pc, #80	; (adr r3, 8002308 <_cos+0x80>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	f7fe fb9c 	bl	80009f8 <__aeabi_dcmpgt>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00f      	beq.n	80022e6 <_cos+0x5e>
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f7fe f8ae 	bl	8000428 <__aeabi_f2d>
 80022cc:	a30e      	add	r3, pc, #56	; (adr r3, 8002308 <_cos+0x80>)
 80022ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d2:	f7fd ff49 	bl	8000168 <__aeabi_dsub>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4610      	mov	r0, r2
 80022dc:	4619      	mov	r1, r3
 80022de:	f7fe fbf3 	bl	8000ac8 <__aeabi_d2f>
 80022e2:	4603      	mov	r3, r0
 80022e4:	e000      	b.n	80022e8 <_cos+0x60>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	60fb      	str	r3, [r7, #12]
  return _sin(a_sin);
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f7ff fe74 	bl	8001fd8 <_sin>
 80022f0:	4603      	mov	r3, r0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	f3af 8000 	nop.w
 8002300:	5443d6f4 	.word	0x5443d6f4
 8002304:	3ff921fb 	.word	0x3ff921fb
 8002308:	54442eea 	.word	0x54442eea
 800230c:	401921fb 	.word	0x401921fb

08002310 <_normalizeAngle>:

//normalizing radian angle to [0,2PI]
float _normalizeAngle(float angle)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  float a = fmod(angle, _2PI);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7fe f885 	bl	8000428 <__aeabi_f2d>
 800231e:	a316      	add	r3, pc, #88	; (adr r3, 8002378 <_normalizeAngle+0x68>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	f00a fbc2 	bl	800caac <fmod>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	f7fe fbca 	bl	8000ac8 <__aeabi_d2f>
 8002334:	4603      	mov	r3, r0
 8002336:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);//always project from 0 degree
 8002338:	f04f 0100 	mov.w	r1, #0
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f7fe fed3 	bl	80010e8 <__aeabi_fcmpge>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <_normalizeAngle+0x3c>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	e00e      	b.n	800236a <_normalizeAngle+0x5a>
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f7fe f86b 	bl	8000428 <__aeabi_f2d>
 8002352:	a309      	add	r3, pc, #36	; (adr r3, 8002378 <_normalizeAngle+0x68>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	f7fd ff08 	bl	800016c <__adddf3>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	f7fe fbb0 	bl	8000ac8 <__aeabi_d2f>
 8002368:	4603      	mov	r3, r0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	f3af 8000 	nop.w
 8002378:	54442eea 	.word	0x54442eea
 800237c:	401921fb 	.word	0x401921fb

08002380 <_electricalAngle>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  return (shaft_angle * pole_pairs);
 800238a:	6838      	ldr	r0, [r7, #0]
 800238c:	f7fe fca6 	bl	8000cdc <__aeabi_i2f>
 8002390:	4603      	mov	r3, r0
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe fcf5 	bl	8000d84 <__aeabi_fmul>
 800239a:	4603      	mov	r3, r0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_sqrtApprox>:

// square root approximation function using
// https://reprap.org/forum/read.php?147,219210
// https://en.wikipedia.org/wiki/Fast_inverse_square_root
float _sqrtApprox(float number)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  float y;
  // float x;
  // const float f = 1.5F; // better precision

  // x = number * 0.5F;
  y = number;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	60bb      	str	r3, [r7, #8]
  i = * ( long * ) &y;
 80023b0:	f107 0308 	add.w	r3, r7, #8
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60fb      	str	r3, [r7, #12]
  i = 0x5f375a86 - ( i >> 1 );
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	105a      	asrs	r2, r3, #1
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <_sqrtApprox+0x3c>)
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  y = * ( float * ) &i;
 80023c2:	f107 030c 	add.w	r3, r7, #12
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60bb      	str	r3, [r7, #8]
  // y = y * ( f - ( x * y * y ) ); // better precision
  return number * y;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe fcd8 	bl	8000d84 <__aeabi_fmul>
 80023d4:	4603      	mov	r3, r0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	5f375a86 	.word	0x5f375a86

080023e4 <MagneticSensorSPI_init>:

// initialize SPI for Magnetic Sensor
void MagneticSensorSPI_init(struct MagneticSensorSPIConfig_s config)
{
 80023e4:	b084      	sub	sp, #16
 80023e6:	b580      	push	{r7, lr}
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	f107 0c08 	add.w	ip, r7, #8
 80023ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  // angle read register of the magnetic sensor
  angle_register = config.angle_registers ? config.angle_registers : DEF_ANGLE_REGISTER;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MagneticSensorSPI_init+0x18>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	e001      	b.n	8002400 <MagneticSensorSPI_init+0x1c>
 80023fc:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8002400:	4a16      	ldr	r2, [pc, #88]	; (800245c <MagneticSensorSPI_init+0x78>)
 8002402:	6013      	str	r3, [r2, #0]
  // register maximum value (counts per revolution)
  cpr = pow(2, config.bit_resolution);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fd fffc 	bl	8000404 <__aeabi_i2d>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	f04f 0000 	mov.w	r0, #0
 8002414:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002418:	f00a fb7e 	bl	800cb18 <pow>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	f7fe fb50 	bl	8000ac8 <__aeabi_d2f>
 8002428:	4603      	mov	r3, r0
 800242a:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <MagneticSensorSPI_init+0x7c>)
 800242c:	6013      	str	r3, [r2, #0]
  bit_resolution = config.bit_resolution;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <MagneticSensorSPI_init+0x80>)
 8002432:	6013      	str	r3, [r2, #0]

  command_parity_bit = config.command_parity_bit; // for backwards compatibility
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	4a0c      	ldr	r2, [pc, #48]	; (8002468 <MagneticSensorSPI_init+0x84>)
 8002438:	6013      	str	r3, [r2, #0]
  command_rw_bit = config.command_rw_bit; // for backwards compatibility
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	4a0b      	ldr	r2, [pc, #44]	; (800246c <MagneticSensorSPI_init+0x88>)
 800243e:	6013      	str	r3, [r2, #0]
  data_start_bit = config.data_start_bit; // for backwards compatibility
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4a0b      	ldr	r2, [pc, #44]	; (8002470 <MagneticSensorSPI_init+0x8c>)
 8002444:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8002446:	2201      	movs	r2, #1
 8002448:	2110      	movs	r1, #16
 800244a:	480a      	ldr	r0, [pc, #40]	; (8002474 <MagneticSensorSPI_init+0x90>)
 800244c:	f003 fe84 	bl	8006158 <HAL_GPIO_WritePin>
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002458:	b004      	add	sp, #16
 800245a:	4770      	bx	lr
 800245c:	200004f4 	.word	0x200004f4
 8002460:	200002ac 	.word	0x200002ac
 8002464:	200004ec 	.word	0x200004ec
 8002468:	200005ec 	.word	0x200005ec
 800246c:	200005e4 	.word	0x200005e4
 8002470:	200002a8 	.word	0x200002a8
 8002474:	40010800 	.word	0x40010800

08002478 <spiCalcEvenParity>:

/**
 * Utility function used to calculate even parity of word
 */
uint8_t spiCalcEvenParity(uint16_t value)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for (i = 0; i < 16; i++)
 8002486:	2300      	movs	r3, #0
 8002488:	73bb      	strb	r3, [r7, #14]
 800248a:	e00d      	b.n	80024a8 <spiCalcEvenParity+0x30>
	{
		if (value & 0x1)
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <spiCalcEvenParity+0x24>
			cnt++;
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	3301      	adds	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
		value >>= 1;
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	80fb      	strh	r3, [r7, #6]
	for (i = 0; i < 16; i++)
 80024a2:	7bbb      	ldrb	r3, [r7, #14]
 80024a4:	3301      	adds	r3, #1
 80024a6:	73bb      	strb	r3, [r7, #14]
 80024a8:	7bbb      	ldrb	r3, [r7, #14]
 80024aa:	2b0f      	cmp	r3, #15
 80024ac:	d9ee      	bls.n	800248c <spiCalcEvenParity+0x14>
	}
	return cnt & 0x1;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	b2db      	uxtb	r3, r3
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <read>:
  * Read a register from the sensor
  * Takes the address of the register as a 16 bit word
  * Returns the value of the register
  */
uint16_t read(uint16_t angle_register)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	4603      	mov	r3, r0
 80024c8:	80fb      	strh	r3, [r7, #6]
  uint16_t register_value;
  uint16_t command = angle_register;
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	817b      	strh	r3, [r7, #10]


  if (command_rw_bit > 0)
 80024ce:	4b39      	ldr	r3, [pc, #228]	; (80025b4 <read+0xf4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	dd0b      	ble.n	80024ee <read+0x2e>
  {
    command = angle_register | (1 << command_rw_bit);
 80024d6:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <read+0xf4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2201      	movs	r2, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	b21a      	sxth	r2, r3
 80024e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	b21b      	sxth	r3, r3
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	817b      	strh	r3, [r7, #10]
  }
  if (command_parity_bit > 0)
 80024ee:	4b32      	ldr	r3, [pc, #200]	; (80025b8 <read+0xf8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	dd10      	ble.n	8002518 <read+0x58>
  {
   	//Add a parity bit on the the MSB
  	command |= ((uint16_t)spiCalcEvenParity(command) << command_parity_bit);
 80024f6:	897b      	ldrh	r3, [r7, #10]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ffbd 	bl	8002478 <spiCalcEvenParity>
 80024fe:	4603      	mov	r3, r0
 8002500:	461a      	mov	r2, r3
 8002502:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <read+0xf8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	b21a      	sxth	r2, r3
 800250c:	897b      	ldrh	r3, [r7, #10]
 800250e:	b21b      	sxth	r3, r3
 8002510:	4313      	orrs	r3, r2
 8002512:	b21b      	sxth	r3, r3
 8002514:	b29b      	uxth	r3, r3
 8002516:	817b      	strh	r3, [r7, #10]

  //SPI - begin transaction

  //Send the command
  //  spi->transfer16(command);
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8002518:	2200      	movs	r2, #0
 800251a:	2110      	movs	r1, #16
 800251c:	4827      	ldr	r0, [pc, #156]	; (80025bc <read+0xfc>)
 800251e:	f003 fe1b 	bl	8006158 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&command, (uint8_t *)&register_value, sizeof(register_value)/sizeof(uint16_t), 100);
 8002522:	f107 020c 	add.w	r2, r7, #12
 8002526:	f107 010a 	add.w	r1, r7, #10
 800252a:	2364      	movs	r3, #100	; 0x64
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2301      	movs	r3, #1
 8002530:	4823      	ldr	r0, [pc, #140]	; (80025c0 <read+0x100>)
 8002532:	f004 fb7d 	bl	8006c30 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8002536:	2201      	movs	r2, #1
 8002538:	2110      	movs	r1, #16
 800253a:	4820      	ldr	r0, [pc, #128]	; (80025bc <read+0xfc>)
 800253c:	f003 fe0c 	bl	8006158 <HAL_GPIO_WritePin>

//  delay_us(1);

  command = 0x0000;
 8002540:	2300      	movs	r3, #0
 8002542:	817b      	strh	r3, [r7, #10]
  //Now read the response (NO_OPERATION_COMMAND = 0x0000)
  //  uint16_t register_value = spi->transfer16(0x00);
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8002544:	2200      	movs	r2, #0
 8002546:	2110      	movs	r1, #16
 8002548:	481c      	ldr	r0, [pc, #112]	; (80025bc <read+0xfc>)
 800254a:	f003 fe05 	bl	8006158 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&command, (uint8_t *)&register_value, sizeof(register_value)/sizeof(uint16_t), 100);
 800254e:	f107 020c 	add.w	r2, r7, #12
 8002552:	f107 010a 	add.w	r1, r7, #10
 8002556:	2364      	movs	r3, #100	; 0x64
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2301      	movs	r3, #1
 800255c:	4818      	ldr	r0, [pc, #96]	; (80025c0 <read+0x100>)
 800255e:	f004 fb67 	bl	8006c30 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8002562:	2201      	movs	r2, #1
 8002564:	2110      	movs	r1, #16
 8002566:	4815      	ldr	r0, [pc, #84]	; (80025bc <read+0xfc>)
 8002568:	f003 fdf6 	bl	8006158 <HAL_GPIO_WritePin>

  //SPI - end transaction

  register_value = register_value >> (1 + data_start_bit - bit_resolution);  //this should shift data to the rightmost bits of the word
 800256c:	89bb      	ldrh	r3, [r7, #12]
 800256e:	4619      	mov	r1, r3
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <read+0x104>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <read+0x108>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	fa41 f303 	asr.w	r3, r1, r3
 8002580:	b29b      	uxth	r3, r3
 8002582:	81bb      	strh	r3, [r7, #12]
  uint16_t data_mask = 0xFFFF >> (16 - bit_resolution);
 8002584:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <read+0x108>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1c3 0310 	rsb	r3, r3, #16
 800258c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002590:	fa42 f303 	asr.w	r3, r2, r3
 8002594:	81fb      	strh	r3, [r7, #14]
  temp = register_value & data_mask;
 8002596:	89ba      	ldrh	r2, [r7, #12]
 8002598:	89fb      	ldrh	r3, [r7, #14]
 800259a:	4013      	ands	r3, r2
 800259c:	b29a      	uxth	r2, r3
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <read+0x10c>)
 80025a0:	801a      	strh	r2, [r3, #0]
  return register_value & data_mask; // Return the data, stripping the non data (e.g parity) bits
 80025a2:	89ba      	ldrh	r2, [r7, #12]
 80025a4:	89fb      	ldrh	r3, [r7, #14]
 80025a6:	4013      	ands	r3, r2
 80025a8:	b29b      	uxth	r3, r3
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200005e4 	.word	0x200005e4
 80025b8:	200005ec 	.word	0x200005ec
 80025bc:	40010800 	.word	0x40010800
 80025c0:	2000051c 	.word	0x2000051c
 80025c4:	200002a8 	.word	0x200002a8
 80025c8:	200004ec 	.word	0x200004ec
 80025cc:	200003a4 	.word	0x200003a4

080025d0 <getRawCount>:

// function reading the raw counter of the magnetic sensor
int getRawCount()
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	return (int)read(angle_register);
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <getRawCount+0x18>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff ff70 	bl	80024c0 <read>
 80025e0:	4603      	mov	r3, r0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200004f4 	.word	0x200004f4
 80025ec:	00000000 	.word	0x00000000

080025f0 <getSensorAngle>:

//  Shaft angle calculation
//  angle is in radians [rad]
float getSensorAngle()
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  return (getRawCount() / (float)cpr) * _2PI;
 80025f4:	f7ff ffec 	bl	80025d0 <getRawCount>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fb6e 	bl	8000cdc <__aeabi_i2f>
 8002600:	4602      	mov	r2, r0
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <getSensorAngle+0x50>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4619      	mov	r1, r3
 8002608:	4610      	mov	r0, r2
 800260a:	f7fe fc6f 	bl	8000eec <__aeabi_fdiv>
 800260e:	4603      	mov	r3, r0
 8002610:	4618      	mov	r0, r3
 8002612:	f7fd ff09 	bl	8000428 <__aeabi_f2d>
 8002616:	a308      	add	r3, pc, #32	; (adr r3, 8002638 <getSensorAngle+0x48>)
 8002618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261c:	f7fd ff5c 	bl	80004d8 <__aeabi_dmul>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4610      	mov	r0, r2
 8002626:	4619      	mov	r1, r3
 8002628:	f7fe fa4e 	bl	8000ac8 <__aeabi_d2f>
 800262c:	4603      	mov	r3, r0
}
 800262e:	4618      	mov	r0, r3
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	f3af 8000 	nop.w
 8002638:	54442eea 	.word	0x54442eea
 800263c:	401921fb 	.word	0x401921fb
 8002640:	200002ac 	.word	0x200002ac

08002644 <Sensor_init>:

void Sensor_init()
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
    // initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
    getSensorAngle(); // call once
 8002648:	f7ff ffd2 	bl	80025f0 <getSensorAngle>

    vel_angle_prev = getSensorAngle(); // call again
 800264c:	f7ff ffd0 	bl	80025f0 <getSensorAngle>
 8002650:	4603      	mov	r3, r0
 8002652:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <Sensor_init+0x44>)
 8002654:	6013      	str	r3, [r2, #0]
    vel_angle_prev_ts = micros();
 8002656:	f7ff faed 	bl	8001c34 <micros>
 800265a:	4603      	mov	r3, r0
 800265c:	461a      	mov	r2, r3
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <Sensor_init+0x48>)
 8002660:	601a      	str	r2, [r3, #0]
    HAL_Delay(1);
 8002662:	2001      	movs	r0, #1
 8002664:	f001 fec2 	bl	80043ec <HAL_Delay>
    getSensorAngle(); // call once
 8002668:	f7ff ffc2 	bl	80025f0 <getSensorAngle>

    angle_prev = getSensorAngle(); // call again
 800266c:	f7ff ffc0 	bl	80025f0 <getSensorAngle>
 8002670:	4603      	mov	r3, r0
 8002672:	4a07      	ldr	r2, [pc, #28]	; (8002690 <Sensor_init+0x4c>)
 8002674:	6013      	str	r3, [r2, #0]
    angle_prev_ts = micros();
 8002676:	f7ff fadd 	bl	8001c34 <micros>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	4b05      	ldr	r3, [pc, #20]	; (8002694 <Sensor_init+0x50>)
 8002680:	601a      	str	r2, [r3, #0]
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	2000022c 	.word	0x2000022c
 800268c:	20000230 	.word	0x20000230
 8002690:	20000224 	.word	0x20000224
 8002694:	20000228 	.word	0x20000228

08002698 <updateSensor>:

void updateSensor()
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
    float val = getSensorAngle();
 800269e:	f7ff ffa7 	bl	80025f0 <getSensorAngle>
 80026a2:	6078      	str	r0, [r7, #4]
    angle_prev_ts = micros();
 80026a4:	f7ff fac6 	bl	8001c34 <micros>
 80026a8:	4603      	mov	r3, r0
 80026aa:	461a      	mov	r2, r3
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <updateSensor+0x6c>)
 80026ae:	601a      	str	r2, [r3, #0]
    float d_angle = val - angle_prev;
 80026b0:	4b15      	ldr	r3, [pc, #84]	; (8002708 <updateSensor+0x70>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe fa5a 	bl	8000b70 <__aeabi_fsub>
 80026bc:	4603      	mov	r3, r0
 80026be:	603b      	str	r3, [r7, #0]
    // if overflow happened track it as full rotation
    if(abs(d_angle) > (0.8f*_2PI))
 80026c0:	6838      	ldr	r0, [r7, #0]
 80026c2:	f7fe fd25 	bl	8001110 <__aeabi_f2iz>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bfb8      	it	lt
 80026cc:	425b      	neglt	r3, r3
 80026ce:	2b05      	cmp	r3, #5
 80026d0:	dd10      	ble.n	80026f4 <updateSensor+0x5c>
      full_rotations += ( d_angle > 0 ) ? -1 : 1;
 80026d2:	f04f 0100 	mov.w	r1, #0
 80026d6:	6838      	ldr	r0, [r7, #0]
 80026d8:	f7fe fd10 	bl	80010fc <__aeabi_fcmpgt>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <updateSensor+0x50>
 80026e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026e6:	e000      	b.n	80026ea <updateSensor+0x52>
 80026e8:	2201      	movs	r2, #1
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <updateSensor+0x74>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	4a06      	ldr	r2, [pc, #24]	; (800270c <updateSensor+0x74>)
 80026f2:	6013      	str	r3, [r2, #0]
    angle_prev = val;
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <updateSensor+0x70>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6013      	str	r3, [r2, #0]
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000228 	.word	0x20000228
 8002708:	20000224 	.word	0x20000224
 800270c:	20000234 	.word	0x20000234

08002710 <getMechanicalAngle>:

float getMechanicalAngle()
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
    return angle_prev;
 8002714:	4b02      	ldr	r3, [pc, #8]	; (8002720 <getMechanicalAngle+0x10>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	20000224 	.word	0x20000224
 8002724:	00000000 	.word	0x00000000

08002728 <getAngle>:

float getAngle()
{
 8002728:	b5b0      	push	{r4, r5, r7, lr}
 800272a:	af00      	add	r7, sp, #0
    return (float)full_rotations * _2PI + angle_prev;
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <getAngle+0x58>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe fad3 	bl	8000cdc <__aeabi_i2f>
 8002736:	4603      	mov	r3, r0
 8002738:	4618      	mov	r0, r3
 800273a:	f7fd fe75 	bl	8000428 <__aeabi_f2d>
 800273e:	a30e      	add	r3, pc, #56	; (adr r3, 8002778 <getAngle+0x50>)
 8002740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002744:	f7fd fec8 	bl	80004d8 <__aeabi_dmul>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4614      	mov	r4, r2
 800274e:	461d      	mov	r5, r3
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <getAngle+0x5c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7fd fe67 	bl	8000428 <__aeabi_f2d>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4620      	mov	r0, r4
 8002760:	4629      	mov	r1, r5
 8002762:	f7fd fd03 	bl	800016c <__adddf3>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	f7fe f9ab 	bl	8000ac8 <__aeabi_d2f>
 8002772:	4603      	mov	r3, r0
}
 8002774:	4618      	mov	r0, r3
 8002776:	bdb0      	pop	{r4, r5, r7, pc}
 8002778:	54442eea 	.word	0x54442eea
 800277c:	401921fb 	.word	0x401921fb
 8002780:	20000234 	.word	0x20000234
 8002784:	20000224 	.word	0x20000224

08002788 <getvelocity>:
    return full_rotations;
}


float getvelocity()
{
 8002788:	b5b0      	push	{r4, r5, r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
    // calculate sample time
    float Ts = (angle_prev_ts - vel_angle_prev_ts)*1e-6;
 800278e:	4b3a      	ldr	r3, [pc, #232]	; (8002878 <getvelocity+0xf0>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	4b3a      	ldr	r3, [pc, #232]	; (800287c <getvelocity+0xf4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	4618      	mov	r0, r3
 800279a:	f7fd fe33 	bl	8000404 <__aeabi_i2d>
 800279e:	a332      	add	r3, pc, #200	; (adr r3, 8002868 <getvelocity+0xe0>)
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	f7fd fe98 	bl	80004d8 <__aeabi_dmul>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f7fe f98a 	bl	8000ac8 <__aeabi_d2f>
 80027b4:	4603      	mov	r3, r0
 80027b6:	607b      	str	r3, [r7, #4]
    // quick fix for strange cases (micros overflow)
    if(Ts <= 0)
 80027b8:	f04f 0100 	mov.w	r1, #0
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7fe fc89 	bl	80010d4 <__aeabi_fcmple>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <getvelocity+0x44>
    	Ts = 1e-3f;
 80027c8:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <getvelocity+0xf8>)
 80027ca:	607b      	str	r3, [r7, #4]
    // velocity calculation
    float vel = ( (float)(full_rotations - vel_full_rotations)*_2PI + (angle_prev - vel_angle_prev) ) / Ts;
 80027cc:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <getvelocity+0xfc>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <getvelocity+0x100>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fa80 	bl	8000cdc <__aeabi_i2f>
 80027dc:	4603      	mov	r3, r0
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fd fe22 	bl	8000428 <__aeabi_f2d>
 80027e4:	a322      	add	r3, pc, #136	; (adr r3, 8002870 <getvelocity+0xe8>)
 80027e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ea:	f7fd fe75 	bl	80004d8 <__aeabi_dmul>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4614      	mov	r4, r2
 80027f4:	461d      	mov	r5, r3
 80027f6:	4b25      	ldr	r3, [pc, #148]	; (800288c <getvelocity+0x104>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a25      	ldr	r2, [pc, #148]	; (8002890 <getvelocity+0x108>)
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe f9b5 	bl	8000b70 <__aeabi_fsub>
 8002806:	4603      	mov	r3, r0
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fe0d 	bl	8000428 <__aeabi_f2d>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4620      	mov	r0, r4
 8002814:	4629      	mov	r1, r5
 8002816:	f7fd fca9 	bl	800016c <__adddf3>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4614      	mov	r4, r2
 8002820:	461d      	mov	r5, r3
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fd fe00 	bl	8000428 <__aeabi_f2d>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4620      	mov	r0, r4
 800282e:	4629      	mov	r1, r5
 8002830:	f7fd ff7c 	bl	800072c <__aeabi_ddiv>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4610      	mov	r0, r2
 800283a:	4619      	mov	r1, r3
 800283c:	f7fe f944 	bl	8000ac8 <__aeabi_d2f>
 8002840:	4603      	mov	r3, r0
 8002842:	603b      	str	r3, [r7, #0]
    // save variables for future pass
    vel_angle_prev = angle_prev;
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <getvelocity+0x104>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a11      	ldr	r2, [pc, #68]	; (8002890 <getvelocity+0x108>)
 800284a:	6013      	str	r3, [r2, #0]
    vel_full_rotations = full_rotations;
 800284c:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <getvelocity+0xfc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <getvelocity+0x100>)
 8002852:	6013      	str	r3, [r2, #0]
    vel_angle_prev_ts = angle_prev_ts;
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <getvelocity+0xf0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a08      	ldr	r2, [pc, #32]	; (800287c <getvelocity+0xf4>)
 800285a:	6013      	str	r3, [r2, #0]
    return vel;
 800285c:	683b      	ldr	r3, [r7, #0]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bdb0      	pop	{r4, r5, r7, pc}
 8002866:	bf00      	nop
 8002868:	a0b5ed8d 	.word	0xa0b5ed8d
 800286c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002870:	54442eea 	.word	0x54442eea
 8002874:	401921fb 	.word	0x401921fb
 8002878:	20000228 	.word	0x20000228
 800287c:	20000230 	.word	0x20000230
 8002880:	3a83126f 	.word	0x3a83126f
 8002884:	20000234 	.word	0x20000234
 8002888:	20000238 	.word	0x20000238
 800288c:	20000224 	.word	0x20000224
 8002890:	2000022c 	.word	0x2000022c

08002894 <shaftAngle>:

// shaft angle calculation
float shaftAngle()
{
 8002894:	b590      	push	{r4, r7, lr}
 8002896:	b087      	sub	sp, #28
 8002898:	af02      	add	r7, sp, #8
  LPF_angle_s.x = getAngle();
 800289a:	f7ff ff45 	bl	8002728 <getAngle>
 800289e:	4603      	mov	r3, r0
 80028a0:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <shaftAngle+0x5c>)
 80028a2:	6013      	str	r3, [r2, #0]
  LPF_angle_s = LowPassFilter(LPF_angle_s);
 80028a4:	4c12      	ldr	r4, [pc, #72]	; (80028f0 <shaftAngle+0x5c>)
 80028a6:	4638      	mov	r0, r7
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <shaftAngle+0x5c>)
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	9200      	str	r2, [sp, #0]
 80028ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028b0:	f000 fe9c 	bl	80035ec <LowPassFilter>
 80028b4:	463b      	mov	r3, r7
 80028b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return sensor_direction*LPF_angle_s.y_prev - sensor_offset;
 80028bc:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <shaftAngle+0x60>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe fa0b 	bl	8000cdc <__aeabi_i2f>
 80028c6:	4602      	mov	r2, r0
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <shaftAngle+0x5c>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f7fe fa58 	bl	8000d84 <__aeabi_fmul>
 80028d4:	4603      	mov	r3, r0
 80028d6:	461a      	mov	r2, r3
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <shaftAngle+0x64>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4619      	mov	r1, r3
 80028de:	4610      	mov	r0, r2
 80028e0:	f7fe f946 	bl	8000b70 <__aeabi_fsub>
 80028e4:	4603      	mov	r3, r0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd90      	pop	{r4, r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000368 	.word	0x20000368
 80028f4:	2000001c 	.word	0x2000001c
 80028f8:	2000023c 	.word	0x2000023c

080028fc <shaftVelocity>:
// shaft velocity calculation
float shaftVelocity()
{
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b087      	sub	sp, #28
 8002900:	af02      	add	r7, sp, #8
  LPF_velocity_s.x = getvelocity();
 8002902:	f7ff ff41 	bl	8002788 <getvelocity>
 8002906:	4603      	mov	r3, r0
 8002908:	4a0f      	ldr	r2, [pc, #60]	; (8002948 <shaftVelocity+0x4c>)
 800290a:	6013      	str	r3, [r2, #0]
  LPF_velocity_s = LowPassFilter(LPF_velocity_s);
 800290c:	4c0e      	ldr	r4, [pc, #56]	; (8002948 <shaftVelocity+0x4c>)
 800290e:	4638      	mov	r0, r7
 8002910:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <shaftVelocity+0x4c>)
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	9200      	str	r2, [sp, #0]
 8002916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002918:	f000 fe68 	bl	80035ec <LowPassFilter>
 800291c:	463b      	mov	r3, r7
 800291e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002920:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return sensor_direction*LPF_velocity_s.y_prev;
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <shaftVelocity+0x50>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe f9d7 	bl	8000cdc <__aeabi_i2f>
 800292e:	4602      	mov	r2, r0
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <shaftVelocity+0x4c>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f7fe fa24 	bl	8000d84 <__aeabi_fmul>
 800293c:	4603      	mov	r3, r0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bd90      	pop	{r4, r7, pc}
 8002946:	bf00      	nop
 8002948:	200004dc 	.word	0x200004dc
 800294c:	2000001c 	.word	0x2000001c

08002950 <electricalAngle>:

//Conversion shaft angle to elec angle
float electricalAngle()
{
 8002950:	b598      	push	{r3, r4, r7, lr}
 8002952:	af00      	add	r7, sp, #0
  return  _normalizeAngle( (float)(sensor_direction * pole_pairs) * getMechanicalAngle()  - zero_electric_angle);
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <electricalAngle+0x44>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0f      	ldr	r2, [pc, #60]	; (8002998 <electricalAngle+0x48>)
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	fb02 f303 	mul.w	r3, r2, r3
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe f9bb 	bl	8000cdc <__aeabi_i2f>
 8002966:	4604      	mov	r4, r0
 8002968:	f7ff fed2 	bl	8002710 <getMechanicalAngle>
 800296c:	4603      	mov	r3, r0
 800296e:	4619      	mov	r1, r3
 8002970:	4620      	mov	r0, r4
 8002972:	f7fe fa07 	bl	8000d84 <__aeabi_fmul>
 8002976:	4603      	mov	r3, r0
 8002978:	461a      	mov	r2, r3
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <electricalAngle+0x4c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4619      	mov	r1, r3
 8002980:	4610      	mov	r0, r2
 8002982:	f7fe f8f5 	bl	8000b70 <__aeabi_fsub>
 8002986:	4603      	mov	r3, r0
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fcc1 	bl	8002310 <_normalizeAngle>
 800298e:	4603      	mov	r3, r0
}
 8002990:	4618      	mov	r0, r3
 8002992:	bd98      	pop	{r3, r4, r7, pc}
 8002994:	2000001c 	.word	0x2000001c
 8002998:	20000014 	.word	0x20000014
 800299c:	20000018 	.word	0x20000018

080029a0 <writeDutyCycle3PWM>:



//Write PWM fsw = 25kHzfloat Ts
void writeDutyCycle3PWM(float dc_a,float dc_b,float dc_c)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ARR_MAX_CA*dc_a );
 80029ac:	4915      	ldr	r1, [pc, #84]	; (8002a04 <writeDutyCycle3PWM+0x64>)
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f7fe f9e8 	bl	8000d84 <__aeabi_fmul>
 80029b4:	4603      	mov	r3, r0
 80029b6:	461a      	mov	r2, r3
 80029b8:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <writeDutyCycle3PWM+0x68>)
 80029ba:	681c      	ldr	r4, [r3, #0]
 80029bc:	4610      	mov	r0, r2
 80029be:	f7fe fbcd 	bl	800115c <__aeabi_f2uiz>
 80029c2:	4603      	mov	r3, r0
 80029c4:	6363      	str	r3, [r4, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ARR_MAX_CA*dc_b );
 80029c6:	490f      	ldr	r1, [pc, #60]	; (8002a04 <writeDutyCycle3PWM+0x64>)
 80029c8:	68b8      	ldr	r0, [r7, #8]
 80029ca:	f7fe f9db 	bl	8000d84 <__aeabi_fmul>
 80029ce:	4603      	mov	r3, r0
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <writeDutyCycle3PWM+0x68>)
 80029d4:	681c      	ldr	r4, [r3, #0]
 80029d6:	4610      	mov	r0, r2
 80029d8:	f7fe fbc0 	bl	800115c <__aeabi_f2uiz>
 80029dc:	4603      	mov	r3, r0
 80029de:	63a3      	str	r3, [r4, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, ARR_MAX_CA*dc_c );
 80029e0:	4908      	ldr	r1, [pc, #32]	; (8002a04 <writeDutyCycle3PWM+0x64>)
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe f9ce 	bl	8000d84 <__aeabi_fmul>
 80029e8:	4603      	mov	r3, r0
 80029ea:	461a      	mov	r2, r3
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <writeDutyCycle3PWM+0x68>)
 80029ee:	681c      	ldr	r4, [r3, #0]
 80029f0:	4610      	mov	r0, r2
 80029f2:	f7fe fbb3 	bl	800115c <__aeabi_f2uiz>
 80029f6:	4603      	mov	r3, r0
 80029f8:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd90      	pop	{r4, r7, pc}
 8002a02:	bf00      	nop
 8002a04:	44b40000 	.word	0x44b40000
 8002a08:	2000057c 	.word	0x2000057c
 8002a0c:	00000000 	.word	0x00000000

08002a10 <setPhaseVoltage>:

// Method using FOC to set Uq and Ud to the motor at the optimal angle
// Function implementing Space Vector PWM and Sine PWM algorithms
void setPhaseVoltage(float Uq, float Ud, float angle_el)
{
 8002a10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a14:	b090      	sub	sp, #64	; 0x40
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
  float Uout;
  // a bit of optitmisation
  if(Ud)
 8002a1e:	f04f 0100 	mov.w	r1, #0
 8002a22:	68b8      	ldr	r0, [r7, #8]
 8002a24:	f7fe fb42 	bl	80010ac <__aeabi_fcmpeq>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d140      	bne.n	8002ab0 <setPhaseVoltage+0xa0>
  {
	// only if Ud and Uq set
    // _sqrt is an approx of sqrt (3-4% error)
    Uout = _sqrt(Ud*Ud + Uq*Uq) / voltage_limit;
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	68b8      	ldr	r0, [r7, #8]
 8002a32:	f7fe f9a7 	bl	8000d84 <__aeabi_fmul>
 8002a36:	4603      	mov	r3, r0
 8002a38:	461c      	mov	r4, r3
 8002a3a:	68f9      	ldr	r1, [r7, #12]
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7fe f9a1 	bl	8000d84 <__aeabi_fmul>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4619      	mov	r1, r3
 8002a46:	4620      	mov	r0, r4
 8002a48:	f7fe f894 	bl	8000b74 <__addsf3>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fca8 	bl	80023a4 <_sqrtApprox>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4bbe      	ldr	r3, [pc, #760]	; (8002d50 <setPhaseVoltage+0x340>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	f7fe fa45 	bl	8000eec <__aeabi_fdiv>
 8002a62:	4603      	mov	r3, r0
 8002a64:	63fb      	str	r3, [r7, #60]	; 0x3c
    // angle normalisation in between 0 and 2pi
    // only necessary if using _sin and _cos - approximation functions
    angle_el = _normalizeAngle(angle_el + atan2(Uq, Ud));
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7fd fcde 	bl	8000428 <__aeabi_f2d>
 8002a6c:	4604      	mov	r4, r0
 8002a6e:	460d      	mov	r5, r1
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f7fd fcd9 	bl	8000428 <__aeabi_f2d>
 8002a76:	4680      	mov	r8, r0
 8002a78:	4689      	mov	r9, r1
 8002a7a:	68b8      	ldr	r0, [r7, #8]
 8002a7c:	f7fd fcd4 	bl	8000428 <__aeabi_f2d>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4640      	mov	r0, r8
 8002a86:	4649      	mov	r1, r9
 8002a88:	f00a f80e 	bl	800caa8 <atan2>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4620      	mov	r0, r4
 8002a92:	4629      	mov	r1, r5
 8002a94:	f7fd fb6a 	bl	800016c <__adddf3>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f7fe f812 	bl	8000ac8 <__aeabi_d2f>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fc32 	bl	8002310 <_normalizeAngle>
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	e01a      	b.n	8002ae6 <setPhaseVoltage+0xd6>
  }
  else
  {
	// only Uq available - no need for atan2 and sqrt
    Uout = Uq / voltage_limit;
 8002ab0:	4ba7      	ldr	r3, [pc, #668]	; (8002d50 <setPhaseVoltage+0x340>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7fe fa18 	bl	8000eec <__aeabi_fdiv>
 8002abc:	4603      	mov	r3, r0
 8002abe:	63fb      	str	r3, [r7, #60]	; 0x3c
    // angle normalisation in between 0 and 2pi
    // only necessary if using _sin and _cos - approximation functions
    angle_el = _normalizeAngle(angle_el + _PI_2);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7fd fcb1 	bl	8000428 <__aeabi_f2d>
 8002ac6:	a39c      	add	r3, pc, #624	; (adr r3, 8002d38 <setPhaseVoltage+0x328>)
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	f7fd fb4e 	bl	800016c <__adddf3>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7fd fff6 	bl	8000ac8 <__aeabi_d2f>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fc16 	bl	8002310 <_normalizeAngle>
 8002ae4:	6078      	str	r0, [r7, #4]
  }
  // find the sector we are in currently
  int sector = floor(angle_el / _PI_3) + 1;
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fd fc9e 	bl	8000428 <__aeabi_f2d>
 8002aec:	a394      	add	r3, pc, #592	; (adr r3, 8002d40 <setPhaseVoltage+0x330>)
 8002aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af2:	f7fd fe1b 	bl	800072c <__aeabi_ddiv>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f009 ff53 	bl	800c9a8 <floor>
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	4b93      	ldr	r3, [pc, #588]	; (8002d54 <setPhaseVoltage+0x344>)
 8002b08:	f7fd fb30 	bl	800016c <__adddf3>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	f7fd ff90 	bl	8000a38 <__aeabi_d2iz>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  // calculate the duty cycles
  float T1 = _SQRT3*_sin(sector*_PI_3 - angle_el) * Uout;
 8002b1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b1e:	f7fd fc71 	bl	8000404 <__aeabi_i2d>
 8002b22:	a387      	add	r3, pc, #540	; (adr r3, 8002d40 <setPhaseVoltage+0x330>)
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	f7fd fcd6 	bl	80004d8 <__aeabi_dmul>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4614      	mov	r4, r2
 8002b32:	461d      	mov	r5, r3
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7fd fc77 	bl	8000428 <__aeabi_f2d>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4620      	mov	r0, r4
 8002b40:	4629      	mov	r1, r5
 8002b42:	f7fd fb11 	bl	8000168 <__aeabi_dsub>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f7fd ffbb 	bl	8000ac8 <__aeabi_d2f>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fa3f 	bl	8001fd8 <_sin>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fd fc63 	bl	8000428 <__aeabi_f2d>
 8002b62:	a379      	add	r3, pc, #484	; (adr r3, 8002d48 <setPhaseVoltage+0x338>)
 8002b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b68:	f7fd fcb6 	bl	80004d8 <__aeabi_dmul>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4614      	mov	r4, r2
 8002b72:	461d      	mov	r5, r3
 8002b74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b76:	f7fd fc57 	bl	8000428 <__aeabi_f2d>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4620      	mov	r0, r4
 8002b80:	4629      	mov	r1, r5
 8002b82:	f7fd fca9 	bl	80004d8 <__aeabi_dmul>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f7fd ff9b 	bl	8000ac8 <__aeabi_d2f>
 8002b92:	4603      	mov	r3, r0
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
  float T2 = _SQRT3*_sin(angle_el - (sector-1.0f)*_PI_3) * Uout;
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fd fc46 	bl	8000428 <__aeabi_f2d>
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	460d      	mov	r5, r1
 8002ba0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ba2:	f7fe f89b 	bl	8000cdc <__aeabi_i2f>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fd ffdf 	bl	8000b70 <__aeabi_fsub>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fd fc37 	bl	8000428 <__aeabi_f2d>
 8002bba:	a361      	add	r3, pc, #388	; (adr r3, 8002d40 <setPhaseVoltage+0x330>)
 8002bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc0:	f7fd fc8a 	bl	80004d8 <__aeabi_dmul>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4620      	mov	r0, r4
 8002bca:	4629      	mov	r1, r5
 8002bcc:	f7fd facc 	bl	8000168 <__aeabi_dsub>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f7fd ff76 	bl	8000ac8 <__aeabi_d2f>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff f9fa 	bl	8001fd8 <_sin>
 8002be4:	4603      	mov	r3, r0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fc1e 	bl	8000428 <__aeabi_f2d>
 8002bec:	a356      	add	r3, pc, #344	; (adr r3, 8002d48 <setPhaseVoltage+0x338>)
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	f7fd fc71 	bl	80004d8 <__aeabi_dmul>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4614      	mov	r4, r2
 8002bfc:	461d      	mov	r5, r3
 8002bfe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c00:	f7fd fc12 	bl	8000428 <__aeabi_f2d>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4620      	mov	r0, r4
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	f7fd fc64 	bl	80004d8 <__aeabi_dmul>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	f7fd ff56 	bl	8000ac8 <__aeabi_d2f>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
//  float T0 = 1 - T1 - T2; // modulation_centered around driver->voltage_limit/2
  float T0 = 0; // pulled to 0 - better for low power supply voltage
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	623b      	str	r3, [r7, #32]
 8002c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	2b05      	cmp	r3, #5
 8002c2c:	f200 8106 	bhi.w	8002e3c <setPhaseVoltage+0x42c>
 8002c30:	a201      	add	r2, pc, #4	; (adr r2, 8002c38 <setPhaseVoltage+0x228>)
 8002c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c36:	bf00      	nop
 8002c38:	08002c51 	.word	0x08002c51
 8002c3c:	08002c9d 	.word	0x08002c9d
 8002c40:	08002ce9 	.word	0x08002ce9
 8002c44:	08002d59 	.word	0x08002d59
 8002c48:	08002da5 	.word	0x08002da5
 8002c4c:	08002df1 	.word	0x08002df1
  // calculate the duty cycles(times)
  float Ta, Tb, Tc;
  switch (sector)
  {
    case 1:
      Ta = T1 + T2 + T0 / 2;
 8002c50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c54:	f7fd ff8e 	bl	8000b74 <__addsf3>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461c      	mov	r4, r3
 8002c5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c60:	6a38      	ldr	r0, [r7, #32]
 8002c62:	f7fe f943 	bl	8000eec <__aeabi_fdiv>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f7fd ff82 	bl	8000b74 <__addsf3>
 8002c70:	4603      	mov	r3, r0
 8002c72:	63bb      	str	r3, [r7, #56]	; 0x38
      Tb = T2 + T0 / 2;
 8002c74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c78:	6a38      	ldr	r0, [r7, #32]
 8002c7a:	f7fe f937 	bl	8000eec <__aeabi_fdiv>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4619      	mov	r1, r3
 8002c82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c84:	f7fd ff76 	bl	8000b74 <__addsf3>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	637b      	str	r3, [r7, #52]	; 0x34
      Tc = T0 / 2;
 8002c8c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c90:	6a38      	ldr	r0, [r7, #32]
 8002c92:	f7fe f92b 	bl	8000eec <__aeabi_fdiv>
 8002c96:	4603      	mov	r3, r0
 8002c98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c9a:	e0d8      	b.n	8002e4e <setPhaseVoltage+0x43e>
    case 2:
      Ta = T1 +  T0 / 2;
 8002c9c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002ca0:	6a38      	ldr	r0, [r7, #32]
 8002ca2:	f7fe f923 	bl	8000eec <__aeabi_fdiv>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4619      	mov	r1, r3
 8002caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cac:	f7fd ff62 	bl	8000b74 <__addsf3>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	63bb      	str	r3, [r7, #56]	; 0x38
      Tb = T1 + T2 + T0 / 2;
 8002cb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cb8:	f7fd ff5c 	bl	8000b74 <__addsf3>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	461c      	mov	r4, r3
 8002cc0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002cc4:	6a38      	ldr	r0, [r7, #32]
 8002cc6:	f7fe f911 	bl	8000eec <__aeabi_fdiv>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f7fd ff50 	bl	8000b74 <__addsf3>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34
      Tc = T0 / 2;
 8002cd8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002cdc:	6a38      	ldr	r0, [r7, #32]
 8002cde:	f7fe f905 	bl	8000eec <__aeabi_fdiv>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ce6:	e0b2      	b.n	8002e4e <setPhaseVoltage+0x43e>
    case 3:
      Ta = T0 / 2;
 8002ce8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002cec:	6a38      	ldr	r0, [r7, #32]
 8002cee:	f7fe f8fd 	bl	8000eec <__aeabi_fdiv>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	63bb      	str	r3, [r7, #56]	; 0x38
      Tb = T1 + T2 + T0 / 2;
 8002cf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cfa:	f7fd ff3b 	bl	8000b74 <__addsf3>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461c      	mov	r4, r3
 8002d02:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002d06:	6a38      	ldr	r0, [r7, #32]
 8002d08:	f7fe f8f0 	bl	8000eec <__aeabi_fdiv>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4620      	mov	r0, r4
 8002d12:	f7fd ff2f 	bl	8000b74 <__addsf3>
 8002d16:	4603      	mov	r3, r0
 8002d18:	637b      	str	r3, [r7, #52]	; 0x34
      Tc = T2 + T0 / 2;
 8002d1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002d1e:	6a38      	ldr	r0, [r7, #32]
 8002d20:	f7fe f8e4 	bl	8000eec <__aeabi_fdiv>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4619      	mov	r1, r3
 8002d28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d2a:	f7fd ff23 	bl	8000b74 <__addsf3>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d32:	e08c      	b.n	8002e4e <setPhaseVoltage+0x43e>
 8002d34:	f3af 8000 	nop.w
 8002d38:	5443d6f4 	.word	0x5443d6f4
 8002d3c:	3ff921fb 	.word	0x3ff921fb
 8002d40:	382daf40 	.word	0x382daf40
 8002d44:	3ff0c152 	.word	0x3ff0c152
 8002d48:	e858606b 	.word	0xe858606b
 8002d4c:	3ffbb67a 	.word	0x3ffbb67a
 8002d50:	200004f0 	.word	0x200004f0
 8002d54:	3ff00000 	.word	0x3ff00000
    case 4:
      Ta = T0 / 2;
 8002d58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002d5c:	6a38      	ldr	r0, [r7, #32]
 8002d5e:	f7fe f8c5 	bl	8000eec <__aeabi_fdiv>
 8002d62:	4603      	mov	r3, r0
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
      Tb = T1 + T0 / 2;
 8002d66:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002d6a:	6a38      	ldr	r0, [r7, #32]
 8002d6c:	f7fe f8be 	bl	8000eec <__aeabi_fdiv>
 8002d70:	4603      	mov	r3, r0
 8002d72:	4619      	mov	r1, r3
 8002d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d76:	f7fd fefd 	bl	8000b74 <__addsf3>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	637b      	str	r3, [r7, #52]	; 0x34
      Tc = T1 + T2 + T0 / 2;
 8002d7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d82:	f7fd fef7 	bl	8000b74 <__addsf3>
 8002d86:	4603      	mov	r3, r0
 8002d88:	461c      	mov	r4, r3
 8002d8a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002d8e:	6a38      	ldr	r0, [r7, #32]
 8002d90:	f7fe f8ac 	bl	8000eec <__aeabi_fdiv>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4619      	mov	r1, r3
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f7fd feeb 	bl	8000b74 <__addsf3>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002da2:	e054      	b.n	8002e4e <setPhaseVoltage+0x43e>
    case 5:
      Ta = T2 + T0 / 2;
 8002da4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002da8:	6a38      	ldr	r0, [r7, #32]
 8002daa:	f7fe f89f 	bl	8000eec <__aeabi_fdiv>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4619      	mov	r1, r3
 8002db2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002db4:	f7fd fede 	bl	8000b74 <__addsf3>
 8002db8:	4603      	mov	r3, r0
 8002dba:	63bb      	str	r3, [r7, #56]	; 0x38
      Tb = T0 / 2;
 8002dbc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002dc0:	6a38      	ldr	r0, [r7, #32]
 8002dc2:	f7fe f893 	bl	8000eec <__aeabi_fdiv>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	637b      	str	r3, [r7, #52]	; 0x34
      Tc = T1 + T2 + T0 / 2;
 8002dca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dce:	f7fd fed1 	bl	8000b74 <__addsf3>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	461c      	mov	r4, r3
 8002dd6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002dda:	6a38      	ldr	r0, [r7, #32]
 8002ddc:	f7fe f886 	bl	8000eec <__aeabi_fdiv>
 8002de0:	4603      	mov	r3, r0
 8002de2:	4619      	mov	r1, r3
 8002de4:	4620      	mov	r0, r4
 8002de6:	f7fd fec5 	bl	8000b74 <__addsf3>
 8002dea:	4603      	mov	r3, r0
 8002dec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dee:	e02e      	b.n	8002e4e <setPhaseVoltage+0x43e>
    case 6:
      Ta = T1 + T2 + T0 / 2;
 8002df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df4:	f7fd febe 	bl	8000b74 <__addsf3>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	461c      	mov	r4, r3
 8002dfc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002e00:	6a38      	ldr	r0, [r7, #32]
 8002e02:	f7fe f873 	bl	8000eec <__aeabi_fdiv>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f7fd feb2 	bl	8000b74 <__addsf3>
 8002e10:	4603      	mov	r3, r0
 8002e12:	63bb      	str	r3, [r7, #56]	; 0x38
      Tb = T0 / 2;
 8002e14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002e18:	6a38      	ldr	r0, [r7, #32]
 8002e1a:	f7fe f867 	bl	8000eec <__aeabi_fdiv>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	637b      	str	r3, [r7, #52]	; 0x34
      Tc = T1 + T0 / 2;
 8002e22:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002e26:	6a38      	ldr	r0, [r7, #32]
 8002e28:	f7fe f860 	bl	8000eec <__aeabi_fdiv>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	4619      	mov	r1, r3
 8002e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e32:	f7fd fe9f 	bl	8000b74 <__addsf3>
 8002e36:	4603      	mov	r3, r0
 8002e38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e3a:	e008      	b.n	8002e4e <setPhaseVoltage+0x43e>
    default:
      // possible error state
      Ta = 0;
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	63bb      	str	r3, [r7, #56]	; 0x38
      Tb = 0;
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	637b      	str	r3, [r7, #52]	; 0x34
      Tc = 0;
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	633b      	str	r3, [r7, #48]	; 0x30
  }

  // calculate the phase voltages
  Ua = Ta * voltage_limit;
 8002e4e:	4b8d      	ldr	r3, [pc, #564]	; (8003084 <setPhaseVoltage+0x674>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd ff95 	bl	8000d84 <__aeabi_fmul>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b8a      	ldr	r3, [pc, #552]	; (8003088 <setPhaseVoltage+0x678>)
 8002e60:	601a      	str	r2, [r3, #0]
  Ub = Tb * voltage_limit;
 8002e62:	4b88      	ldr	r3, [pc, #544]	; (8003084 <setPhaseVoltage+0x674>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd ff8b 	bl	8000d84 <__aeabi_fmul>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b86      	ldr	r3, [pc, #536]	; (800308c <setPhaseVoltage+0x67c>)
 8002e74:	601a      	str	r2, [r3, #0]
  Uc = Tc * voltage_limit;
 8002e76:	4b83      	ldr	r3, [pc, #524]	; (8003084 <setPhaseVoltage+0x674>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd ff81 	bl	8000d84 <__aeabi_fmul>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b82      	ldr	r3, [pc, #520]	; (8003090 <setPhaseVoltage+0x680>)
 8002e88:	601a      	str	r2, [r3, #0]

  // set the voltages in hardware
  // limit the voltage in driver
  Ua = _constrain(Ua, 0.0f, voltage_limit);
 8002e8a:	4b7f      	ldr	r3, [pc, #508]	; (8003088 <setPhaseVoltage+0x678>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f04f 0100 	mov.w	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe f914 	bl	80010c0 <__aeabi_fcmplt>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <setPhaseVoltage+0x494>
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	e00f      	b.n	8002ec4 <setPhaseVoltage+0x4b4>
 8002ea4:	4b78      	ldr	r3, [pc, #480]	; (8003088 <setPhaseVoltage+0x678>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a76      	ldr	r2, [pc, #472]	; (8003084 <setPhaseVoltage+0x674>)
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe f924 	bl	80010fc <__aeabi_fcmpgt>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <setPhaseVoltage+0x4b0>
 8002eba:	4b72      	ldr	r3, [pc, #456]	; (8003084 <setPhaseVoltage+0x674>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	e001      	b.n	8002ec4 <setPhaseVoltage+0x4b4>
 8002ec0:	4b71      	ldr	r3, [pc, #452]	; (8003088 <setPhaseVoltage+0x678>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a70      	ldr	r2, [pc, #448]	; (8003088 <setPhaseVoltage+0x678>)
 8002ec6:	6013      	str	r3, [r2, #0]
  Ub = _constrain(Ub, 0.0f, voltage_limit);
 8002ec8:	4b70      	ldr	r3, [pc, #448]	; (800308c <setPhaseVoltage+0x67c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f04f 0100 	mov.w	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fe f8f5 	bl	80010c0 <__aeabi_fcmplt>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <setPhaseVoltage+0x4d2>
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	e00f      	b.n	8002f02 <setPhaseVoltage+0x4f2>
 8002ee2:	4b6a      	ldr	r3, [pc, #424]	; (800308c <setPhaseVoltage+0x67c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a67      	ldr	r2, [pc, #412]	; (8003084 <setPhaseVoltage+0x674>)
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe f905 	bl	80010fc <__aeabi_fcmpgt>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <setPhaseVoltage+0x4ee>
 8002ef8:	4b62      	ldr	r3, [pc, #392]	; (8003084 <setPhaseVoltage+0x674>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	e001      	b.n	8002f02 <setPhaseVoltage+0x4f2>
 8002efe:	4b63      	ldr	r3, [pc, #396]	; (800308c <setPhaseVoltage+0x67c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a62      	ldr	r2, [pc, #392]	; (800308c <setPhaseVoltage+0x67c>)
 8002f04:	6013      	str	r3, [r2, #0]
  Uc = _constrain(Uc, 0.0f, voltage_limit);
 8002f06:	4b62      	ldr	r3, [pc, #392]	; (8003090 <setPhaseVoltage+0x680>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f04f 0100 	mov.w	r1, #0
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe f8d6 	bl	80010c0 <__aeabi_fcmplt>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <setPhaseVoltage+0x510>
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	e00f      	b.n	8002f40 <setPhaseVoltage+0x530>
 8002f20:	4b5b      	ldr	r3, [pc, #364]	; (8003090 <setPhaseVoltage+0x680>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a57      	ldr	r2, [pc, #348]	; (8003084 <setPhaseVoltage+0x674>)
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe f8e6 	bl	80010fc <__aeabi_fcmpgt>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <setPhaseVoltage+0x52c>
 8002f36:	4b53      	ldr	r3, [pc, #332]	; (8003084 <setPhaseVoltage+0x674>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	e001      	b.n	8002f40 <setPhaseVoltage+0x530>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <setPhaseVoltage+0x680>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a53      	ldr	r2, [pc, #332]	; (8003090 <setPhaseVoltage+0x680>)
 8002f42:	6013      	str	r3, [r2, #0]
  // calculate duty cycle
  float dc_a;  //duty cycle phase A [0, 1]
  float dc_b;  //duty cycle phase B [0, 1]
  float dc_c;  //duty cycle phase C [0, 1]
  // limited in [0,1]
  dc_a = _constrain(Ua / voltage_power_supply, 0.0f , 1.0f );
 8002f44:	4b50      	ldr	r3, [pc, #320]	; (8003088 <setPhaseVoltage+0x678>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a52      	ldr	r2, [pc, #328]	; (8003094 <setPhaseVoltage+0x684>)
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd ffcc 	bl	8000eec <__aeabi_fdiv>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f04f 0100 	mov.w	r1, #0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe f8b0 	bl	80010c0 <__aeabi_fcmplt>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <setPhaseVoltage+0x55c>
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	e01c      	b.n	8002fa6 <setPhaseVoltage+0x596>
 8002f6c:	4b46      	ldr	r3, [pc, #280]	; (8003088 <setPhaseVoltage+0x678>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a48      	ldr	r2, [pc, #288]	; (8003094 <setPhaseVoltage+0x684>)
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd ffb8 	bl	8000eec <__aeabi_fdiv>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fe f8ba 	bl	80010fc <__aeabi_fcmpgt>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <setPhaseVoltage+0x584>
 8002f8e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002f92:	e008      	b.n	8002fa6 <setPhaseVoltage+0x596>
 8002f94:	4b3c      	ldr	r3, [pc, #240]	; (8003088 <setPhaseVoltage+0x678>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a3e      	ldr	r2, [pc, #248]	; (8003094 <setPhaseVoltage+0x684>)
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd ffa4 	bl	8000eec <__aeabi_fdiv>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	61fb      	str	r3, [r7, #28]
  dc_b = _constrain(Ub / voltage_power_supply, 0.0f , 1.0f );
 8002fa8:	4b38      	ldr	r3, [pc, #224]	; (800308c <setPhaseVoltage+0x67c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a39      	ldr	r2, [pc, #228]	; (8003094 <setPhaseVoltage+0x684>)
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd ff9a 	bl	8000eec <__aeabi_fdiv>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f04f 0100 	mov.w	r1, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe f87e 	bl	80010c0 <__aeabi_fcmplt>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <setPhaseVoltage+0x5c0>
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e01c      	b.n	800300a <setPhaseVoltage+0x5fa>
 8002fd0:	4b2e      	ldr	r3, [pc, #184]	; (800308c <setPhaseVoltage+0x67c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a2f      	ldr	r2, [pc, #188]	; (8003094 <setPhaseVoltage+0x684>)
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd ff86 	bl	8000eec <__aeabi_fdiv>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe f888 	bl	80010fc <__aeabi_fcmpgt>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <setPhaseVoltage+0x5e8>
 8002ff2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002ff6:	e008      	b.n	800300a <setPhaseVoltage+0x5fa>
 8002ff8:	4b24      	ldr	r3, [pc, #144]	; (800308c <setPhaseVoltage+0x67c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a25      	ldr	r2, [pc, #148]	; (8003094 <setPhaseVoltage+0x684>)
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd ff72 	bl	8000eec <__aeabi_fdiv>
 8003008:	4603      	mov	r3, r0
 800300a:	61bb      	str	r3, [r7, #24]
  dc_c = _constrain(Uc / voltage_power_supply, 0.0f , 1.0f );
 800300c:	4b20      	ldr	r3, [pc, #128]	; (8003090 <setPhaseVoltage+0x680>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a20      	ldr	r2, [pc, #128]	; (8003094 <setPhaseVoltage+0x684>)
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd ff68 	bl	8000eec <__aeabi_fdiv>
 800301c:	4603      	mov	r3, r0
 800301e:	f04f 0100 	mov.w	r1, #0
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe f84c 	bl	80010c0 <__aeabi_fcmplt>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <setPhaseVoltage+0x624>
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	e01c      	b.n	800306e <setPhaseVoltage+0x65e>
 8003034:	4b16      	ldr	r3, [pc, #88]	; (8003090 <setPhaseVoltage+0x680>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a16      	ldr	r2, [pc, #88]	; (8003094 <setPhaseVoltage+0x684>)
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	4611      	mov	r1, r2
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd ff54 	bl	8000eec <__aeabi_fdiv>
 8003044:	4603      	mov	r3, r0
 8003046:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe f856 	bl	80010fc <__aeabi_fcmpgt>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <setPhaseVoltage+0x64c>
 8003056:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800305a:	e008      	b.n	800306e <setPhaseVoltage+0x65e>
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <setPhaseVoltage+0x680>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0c      	ldr	r2, [pc, #48]	; (8003094 <setPhaseVoltage+0x684>)
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd ff40 	bl	8000eec <__aeabi_fdiv>
 800306c:	4603      	mov	r3, r0
 800306e:	617b      	str	r3, [r7, #20]
  writeDutyCycle3PWM(dc_a, dc_b, dc_c);
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	69b9      	ldr	r1, [r7, #24]
 8003074:	69f8      	ldr	r0, [r7, #28]
 8003076:	f7ff fc93 	bl	80029a0 <writeDutyCycle3PWM>
}
 800307a:	bf00      	nop
 800307c:	3740      	adds	r7, #64	; 0x40
 800307e:	46bd      	mov	sp, r7
 8003080:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003084:	200004f0 	.word	0x200004f0
 8003088:	20000610 	.word	0x20000610
 800308c:	200002b8 	.word	0x200002b8
 8003090:	200004fc 	.word	0x200004fc
 8003094:	200005c4 	.word	0x200005c4

08003098 <needsSearch>:

// returns 0 if it does need search for absolute zero
// 0 - magnetic sensor (& encoder with index which is found)
// 1 - encoder with index (with index not found yet)
int needsSearch()
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
    return 0;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr
	...

080030a8 <absoluteZeroSearch>:
// Encoder alignment the absolute zero angle
// - to the index
int absoluteZeroSearch()
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
  // search the absolute zero with small velocity
  float limit_vel = velocity_limit;
 80030ae:	4b24      	ldr	r3, [pc, #144]	; (8003140 <absoluteZeroSearch+0x98>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	607b      	str	r3, [r7, #4]
  float limit_volt = voltage_limit;
 80030b4:	4b23      	ldr	r3, [pc, #140]	; (8003144 <absoluteZeroSearch+0x9c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	603b      	str	r3, [r7, #0]
  velocity_limit = velocity_index_search;
 80030ba:	4b23      	ldr	r3, [pc, #140]	; (8003148 <absoluteZeroSearch+0xa0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a20      	ldr	r2, [pc, #128]	; (8003140 <absoluteZeroSearch+0x98>)
 80030c0:	6013      	str	r3, [r2, #0]
  voltage_limit = voltage_sensor_align;
 80030c2:	4b22      	ldr	r3, [pc, #136]	; (800314c <absoluteZeroSearch+0xa4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1f      	ldr	r2, [pc, #124]	; (8003144 <absoluteZeroSearch+0x9c>)
 80030c8:	6013      	str	r3, [r2, #0]
  shaft_angle = 0;
 80030ca:	4b21      	ldr	r3, [pc, #132]	; (8003150 <absoluteZeroSearch+0xa8>)
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
  while(needsSearch() && shaft_angle < _2PI)
 80030d2:	e004      	b.n	80030de <absoluteZeroSearch+0x36>
  {
    angleOpenloop(1.5*_2PI);
 80030d4:	481f      	ldr	r0, [pc, #124]	; (8003154 <absoluteZeroSearch+0xac>)
 80030d6:	f000 fd03 	bl	8003ae0 <angleOpenloop>
    // call important for some sensors not to loose count
    // not needed for the search
    getAngle();
 80030da:	f7ff fb25 	bl	8002728 <getAngle>
  while(needsSearch() && shaft_angle < _2PI)
 80030de:	f7ff ffdb 	bl	8003098 <needsSearch>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00c      	beq.n	8003102 <absoluteZeroSearch+0x5a>
 80030e8:	4b19      	ldr	r3, [pc, #100]	; (8003150 <absoluteZeroSearch+0xa8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd f99b 	bl	8000428 <__aeabi_f2d>
 80030f2:	a311      	add	r3, pc, #68	; (adr r3, 8003138 <absoluteZeroSearch+0x90>)
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f7fd fc60 	bl	80009bc <__aeabi_dcmplt>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1e8      	bne.n	80030d4 <absoluteZeroSearch+0x2c>
  }
  setPhaseVoltage(0, 0, 0);
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	f04f 0000 	mov.w	r0, #0
 800310e:	f7ff fc7f 	bl	8002a10 <setPhaseVoltage>

  // re-init the limits
  velocity_limit = limit_vel;
 8003112:	4a0b      	ldr	r2, [pc, #44]	; (8003140 <absoluteZeroSearch+0x98>)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6013      	str	r3, [r2, #0]
  voltage_limit = limit_volt;
 8003118:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <absoluteZeroSearch+0x9c>)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6013      	str	r3, [r2, #0]
  return !needsSearch();
 800311e:	f7ff ffbb 	bl	8003098 <needsSearch>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	54442eea 	.word	0x54442eea
 800313c:	401921fb 	.word	0x401921fb
 8003140:	2000067c 	.word	0x2000067c
 8003144:	200004f0 	.word	0x200004f0
 8003148:	200003ac 	.word	0x200003ac
 800314c:	20000290 	.word	0x20000290
 8003150:	20000448 	.word	0x20000448
 8003154:	4116cbe4 	.word	0x4116cbe4

08003158 <alignSensor>:
// Encoder alignment to electrical 0 angle
int alignSensor()
{
 8003158:	b5b0      	push	{r4, r5, r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
  int exit_flag = 1; //success
 800315e:	2301      	movs	r3, #1
 8003160:	61fb      	str	r3, [r7, #28]
  // if unknown natural direction
  if(!_isset(sensor_direction)) //sensor_direction == -12345.0
 8003162:	4b9b      	ldr	r3, [pc, #620]	; (80033d0 <alignSensor+0x278>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a9b      	ldr	r2, [pc, #620]	; (80033d4 <alignSensor+0x27c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	f040 80e5 	bne.w	8003338 <alignSensor+0x1e0>
  {
    // check if sensor needs zero search
    if(needsSearch()) //needSearch == 0 because use Magnetic sensor
 800316e:	f7ff ff93 	bl	8003098 <needsSearch>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <alignSensor+0x26>
      exit_flag = absoluteZeroSearch(); // o
 8003178:	f7ff ff96 	bl	80030a8 <absoluteZeroSearch>
 800317c:	61f8      	str	r0, [r7, #28]
    if(!exit_flag)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <alignSensor+0x30>
      return exit_flag;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	e117      	b.n	80033b8 <alignSensor+0x260>

    // find natural direction
    // move one electrical revolution forward
    for (int i = 0; i <=500; i++ )
 8003188:	2300      	movs	r3, #0
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	e02f      	b.n	80031ee <alignSensor+0x96>
    {
      float angle = _3PI_2 + _2PI * i / 500.0;
 800318e:	69b8      	ldr	r0, [r7, #24]
 8003190:	f7fd f938 	bl	8000404 <__aeabi_i2d>
 8003194:	a38a      	add	r3, pc, #552	; (adr r3, 80033c0 <alignSensor+0x268>)
 8003196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319a:	f7fd f99d 	bl	80004d8 <__aeabi_dmul>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4610      	mov	r0, r2
 80031a4:	4619      	mov	r1, r3
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	4b8b      	ldr	r3, [pc, #556]	; (80033d8 <alignSensor+0x280>)
 80031ac:	f7fd fabe 	bl	800072c <__aeabi_ddiv>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4610      	mov	r0, r2
 80031b6:	4619      	mov	r1, r3
 80031b8:	a383      	add	r3, pc, #524	; (adr r3, 80033c8 <alignSensor+0x270>)
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	f7fc ffd5 	bl	800016c <__adddf3>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4610      	mov	r0, r2
 80031c8:	4619      	mov	r1, r3
 80031ca:	f7fd fc7d 	bl	8000ac8 <__aeabi_d2f>
 80031ce:	4603      	mov	r3, r0
 80031d0:	603b      	str	r3, [r7, #0]
      setPhaseVoltage(voltage_sensor_align, 0,  angle);
 80031d2:	4b82      	ldr	r3, [pc, #520]	; (80033dc <alignSensor+0x284>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	f04f 0100 	mov.w	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fc17 	bl	8002a10 <setPhaseVoltage>
      HAL_Delay(2);
 80031e2:	2002      	movs	r0, #2
 80031e4:	f001 f902 	bl	80043ec <HAL_Delay>
    for (int i = 0; i <=500; i++ )
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	3301      	adds	r3, #1
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031f4:	ddcb      	ble.n	800318e <alignSensor+0x36>
    }
    updateSensor();
 80031f6:	f7ff fa4f 	bl	8002698 <updateSensor>
    // take and angle in the middle
    float mid_angle = getAngle();
 80031fa:	f7ff fa95 	bl	8002728 <getAngle>
 80031fe:	6138      	str	r0, [r7, #16]
    // move one electrical revolution backwards
    for (int i = 500; i >=0; i-- )
 8003200:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	e02f      	b.n	8003268 <alignSensor+0x110>
    {
      float angle = _3PI_2 + _2PI * i / 500.0 ;
 8003208:	6978      	ldr	r0, [r7, #20]
 800320a:	f7fd f8fb 	bl	8000404 <__aeabi_i2d>
 800320e:	a36c      	add	r3, pc, #432	; (adr r3, 80033c0 <alignSensor+0x268>)
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	f7fd f960 	bl	80004d8 <__aeabi_dmul>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4610      	mov	r0, r2
 800321e:	4619      	mov	r1, r3
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	4b6c      	ldr	r3, [pc, #432]	; (80033d8 <alignSensor+0x280>)
 8003226:	f7fd fa81 	bl	800072c <__aeabi_ddiv>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	a365      	add	r3, pc, #404	; (adr r3, 80033c8 <alignSensor+0x270>)
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	f7fc ff98 	bl	800016c <__adddf3>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	f7fd fc40 	bl	8000ac8 <__aeabi_d2f>
 8003248:	4603      	mov	r3, r0
 800324a:	607b      	str	r3, [r7, #4]
      setPhaseVoltage(voltage_sensor_align, 0,  angle);
 800324c:	4b63      	ldr	r3, [pc, #396]	; (80033dc <alignSensor+0x284>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	f04f 0100 	mov.w	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff fbda 	bl	8002a10 <setPhaseVoltage>
      HAL_Delay(2);
 800325c:	2002      	movs	r0, #2
 800325e:	f001 f8c5 	bl	80043ec <HAL_Delay>
    for (int i = 500; i >=0; i-- )
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	3b01      	subs	r3, #1
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2b00      	cmp	r3, #0
 800326c:	dacc      	bge.n	8003208 <alignSensor+0xb0>
    }
    updateSensor();
 800326e:	f7ff fa13 	bl	8002698 <updateSensor>
    float end_angle = getAngle();
 8003272:	f7ff fa59 	bl	8002728 <getAngle>
 8003276:	60f8      	str	r0, [r7, #12]
    setPhaseVoltage(0, 0, 0);
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0100 	mov.w	r1, #0
 8003280:	f04f 0000 	mov.w	r0, #0
 8003284:	f7ff fbc4 	bl	8002a10 <setPhaseVoltage>
    HAL_Delay(200);
 8003288:	20c8      	movs	r0, #200	; 0xc8
 800328a:	f001 f8af 	bl	80043ec <HAL_Delay>
    // determine the direction the sensor moved
    if (mid_angle == end_angle)
 800328e:	68f9      	ldr	r1, [r7, #12]
 8003290:	6938      	ldr	r0, [r7, #16]
 8003292:	f7fd ff0b 	bl	80010ac <__aeabi_fcmpeq>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <alignSensor+0x148>
    {
      return 0; // failed calibration
 800329c:	2300      	movs	r3, #0
 800329e:	e08b      	b.n	80033b8 <alignSensor+0x260>
    }
    else if (mid_angle < end_angle)
 80032a0:	68f9      	ldr	r1, [r7, #12]
 80032a2:	6938      	ldr	r0, [r7, #16]
 80032a4:	f7fd ff0c 	bl	80010c0 <__aeabi_fcmplt>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <alignSensor+0x160>
    {
      sensor_direction = CCW;
 80032ae:	4b48      	ldr	r3, [pc, #288]	; (80033d0 <alignSensor+0x278>)
 80032b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e002      	b.n	80032be <alignSensor+0x166>
    }
    else
    {
      sensor_direction = CW;
 80032b8:	4b45      	ldr	r3, [pc, #276]	; (80033d0 <alignSensor+0x278>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
    }
    // check pole pair number

    float moved =  fabs(mid_angle - end_angle);
 80032be:	68f9      	ldr	r1, [r7, #12]
 80032c0:	6938      	ldr	r0, [r7, #16]
 80032c2:	f7fd fc55 	bl	8000b70 <__aeabi_fsub>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032cc:	60bb      	str	r3, [r7, #8]
    if( fabs(moved*pole_pairs - _2PI) > 0.5 )
 80032ce:	4b44      	ldr	r3, [pc, #272]	; (80033e0 <alignSensor+0x288>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd fd02 	bl	8000cdc <__aeabi_i2f>
 80032d8:	4603      	mov	r3, r0
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd fd51 	bl	8000d84 <__aeabi_fmul>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fd f89f 	bl	8000428 <__aeabi_f2d>
 80032ea:	a335      	add	r3, pc, #212	; (adr r3, 80033c0 <alignSensor+0x268>)
 80032ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f0:	f7fc ff3a 	bl	8000168 <__aeabi_dsub>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4614      	mov	r4, r2
 80032fa:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	4b38      	ldr	r3, [pc, #224]	; (80033e4 <alignSensor+0x28c>)
 8003304:	4620      	mov	r0, r4
 8003306:	4629      	mov	r1, r5
 8003308:	f7fd fb76 	bl	80009f8 <__aeabi_dcmpgt>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d012      	beq.n	8003338 <alignSensor+0x1e0>
    { // 0.5 is arbitrary number it can be lower or higher!
    	pp_check = _2PI/moved;
 8003312:	68b8      	ldr	r0, [r7, #8]
 8003314:	f7fd f888 	bl	8000428 <__aeabi_f2d>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	a128      	add	r1, pc, #160	; (adr r1, 80033c0 <alignSensor+0x268>)
 800331e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003322:	f7fd fa03 	bl	800072c <__aeabi_ddiv>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4610      	mov	r0, r2
 800332c:	4619      	mov	r1, r3
 800332e:	f7fd fbcb 	bl	8000ac8 <__aeabi_d2f>
 8003332:	4603      	mov	r3, r0
 8003334:	4a2c      	ldr	r2, [pc, #176]	; (80033e8 <alignSensor+0x290>)
 8003336:	6013      	str	r3, [r2, #0]
    }
  }

  // zero electric angle not known
  if(!_isset(zero_electric_angle))
 8003338:	4b2c      	ldr	r3, [pc, #176]	; (80033ec <alignSensor+0x294>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	492c      	ldr	r1, [pc, #176]	; (80033f0 <alignSensor+0x298>)
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd feb4 	bl	80010ac <__aeabi_fcmpeq>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d035      	beq.n	80033b6 <alignSensor+0x25e>
  {
    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    setPhaseVoltage(voltage_sensor_align, 0,  _3PI_2);
 800334a:	4b24      	ldr	r3, [pc, #144]	; (80033dc <alignSensor+0x284>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a29      	ldr	r2, [pc, #164]	; (80033f4 <alignSensor+0x29c>)
 8003350:	f04f 0100 	mov.w	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fb5b 	bl	8002a10 <setPhaseVoltage>
    HAL_Delay(700);
 800335a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800335e:	f001 f845 	bl	80043ec <HAL_Delay>
    zero_electric_angle = _normalizeAngle(_electricalAngle(sensor_direction*getAngle(), pole_pairs));
 8003362:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <alignSensor+0x278>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fd fcb8 	bl	8000cdc <__aeabi_i2f>
 800336c:	4604      	mov	r4, r0
 800336e:	f7ff f9db 	bl	8002728 <getAngle>
 8003372:	4603      	mov	r3, r0
 8003374:	4619      	mov	r1, r3
 8003376:	4620      	mov	r0, r4
 8003378:	f7fd fd04 	bl	8000d84 <__aeabi_fmul>
 800337c:	4603      	mov	r3, r0
 800337e:	461a      	mov	r2, r3
 8003380:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <alignSensor+0x288>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4619      	mov	r1, r3
 8003386:	4610      	mov	r0, r2
 8003388:	f7fe fffa 	bl	8002380 <_electricalAngle>
 800338c:	4603      	mov	r3, r0
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe ffbe 	bl	8002310 <_normalizeAngle>
 8003394:	4603      	mov	r3, r0
 8003396:	4a15      	ldr	r2, [pc, #84]	; (80033ec <alignSensor+0x294>)
 8003398:	6013      	str	r3, [r2, #0]
    HAL_Delay(20);
 800339a:	2014      	movs	r0, #20
 800339c:	f001 f826 	bl	80043ec <HAL_Delay>
    // stop everything
    setPhaseVoltage(0, 0, 0);
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0100 	mov.w	r1, #0
 80033a8:	f04f 0000 	mov.w	r0, #0
 80033ac:	f7ff fb30 	bl	8002a10 <setPhaseVoltage>
    HAL_Delay(200);
 80033b0:	20c8      	movs	r0, #200	; 0xc8
 80033b2:	f001 f81b 	bl	80043ec <HAL_Delay>
  }
  return exit_flag;
 80033b6:	69fb      	ldr	r3, [r7, #28]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bdb0      	pop	{r4, r5, r7, pc}
 80033c0:	54442eea 	.word	0x54442eea
 80033c4:	401921fb 	.word	0x401921fb
 80033c8:	7f330d32 	.word	0x7f330d32
 80033cc:	4012d97c 	.word	0x4012d97c
 80033d0:	2000001c 	.word	0x2000001c
 80033d4:	ffffcfc7 	.word	0xffffcfc7
 80033d8:	407f4000 	.word	0x407f4000
 80033dc:	20000290 	.word	0x20000290
 80033e0:	20000014 	.word	0x20000014
 80033e4:	3fe00000 	.word	0x3fe00000
 80033e8:	200003b0 	.word	0x200003b0
 80033ec:	20000018 	.word	0x20000018
 80033f0:	c640e400 	.word	0xc640e400
 80033f4:	4096cbe4 	.word	0x4096cbe4

080033f8 <initFOC>:

// zero_electric_offset , _sensor_direction : from Run code "find_sensor_offset_and_direction"
// sensor : Encoder , Hall sensor , Magnetic encoder
int initFOC( float zero_electric_offset, enum Direction _sensor_direction)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	70fb      	strb	r3, [r7, #3]
  int exit_flag = 1;
 8003404:	2301      	movs	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
  // align motor if necessary
  // alignment necessary for encoders.
  if(_isset(zero_electric_offset))
 8003408:	4911      	ldr	r1, [pc, #68]	; (8003450 <initFOC+0x58>)
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd fe4e 	bl	80010ac <__aeabi_fcmpeq>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <initFOC+0x2c>
  {
    // absolute zero offset provided - no need to align
    zero_electric_angle = zero_electric_offset;
 8003416:	4a0f      	ldr	r2, [pc, #60]	; (8003454 <initFOC+0x5c>)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6013      	str	r3, [r2, #0]
    // set the sensor direction - default CW
    sensor_direction = _sensor_direction;
 800341c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003420:	4a0d      	ldr	r2, [pc, #52]	; (8003458 <initFOC+0x60>)
 8003422:	6013      	str	r3, [r2, #0]
  }
  // sensor and motor alignment - can be skipped
  // by setting motor.sensor_direction and motor.zero_electric_angle
  exit_flag *= alignSensor();
 8003424:	f7ff fe98 	bl	8003158 <alignSensor>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	fb02 f303 	mul.w	r3, r2, r3
 8003430:	60fb      	str	r3, [r7, #12]
  // added the shaft_angle update
  shaft_angle = getAngle();
 8003432:	f7ff f979 	bl	8002728 <getAngle>
 8003436:	4603      	mov	r3, r0
 8003438:	4a08      	ldr	r2, [pc, #32]	; (800345c <initFOC+0x64>)
 800343a:	6013      	str	r3, [r2, #0]
  HAL_Delay(500);
 800343c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003440:	f000 ffd4 	bl	80043ec <HAL_Delay>

  return exit_flag;
 8003444:	68fb      	ldr	r3, [r7, #12]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	c640e400 	.word	0xc640e400
 8003454:	20000018 	.word	0x20000018
 8003458:	2000001c 	.word	0x2000001c
 800345c:	20000448 	.word	0x20000448

08003460 <loopFOC>:

void loopFOC()
{
 8003460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003462:	b09b      	sub	sp, #108	; 0x6c
 8003464:	af08      	add	r7, sp, #32
  updateSensor();
 8003466:	f7ff f917 	bl	8002698 <updateSensor>
  // shaft angle/velocity need the update() to be called first
  // get shaft angle
  shaft_angle = shaftAngle();
 800346a:	f7ff fa13 	bl	8002894 <shaftAngle>
 800346e:	4603      	mov	r3, r0
 8003470:	4a55      	ldr	r2, [pc, #340]	; (80035c8 <loopFOC+0x168>)
 8003472:	6013      	str	r3, [r2, #0]
  // electrical angle - need shaftAngle to be called first
  electrical_angle = electricalAngle();
 8003474:	f7ff fa6c 	bl	8002950 <electricalAngle>
 8003478:	4603      	mov	r3, r0
 800347a:	4a54      	ldr	r2, [pc, #336]	; (80035cc <loopFOC+0x16c>)
 800347c:	6013      	str	r3, [r2, #0]

  // Chosen TorqueControlType::foc_current
  // read dq currents
  current = getFOCCurrents(electrical_angle);
 800347e:	4b53      	ldr	r3, [pc, #332]	; (80035cc <loopFOC+0x16c>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4c53      	ldr	r4, [pc, #332]	; (80035d0 <loopFOC+0x170>)
 8003484:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003488:	4611      	mov	r1, r2
 800348a:	4618      	mov	r0, r3
 800348c:	f7fe fd34 	bl	8001ef8 <getFOCCurrents>
 8003490:	4622      	mov	r2, r4
 8003492:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003496:	e893 0003 	ldmia.w	r3, {r0, r1}
 800349a:	e882 0003 	stmia.w	r2, {r0, r1}
  LPF_current_q_s.x = current.q;
 800349e:	4b4c      	ldr	r3, [pc, #304]	; (80035d0 <loopFOC+0x170>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4a4c      	ldr	r2, [pc, #304]	; (80035d4 <loopFOC+0x174>)
 80034a4:	6013      	str	r3, [r2, #0]
  LPF_current_q_s = LowPassFilter(LPF_current_q_s);
 80034a6:	4c4b      	ldr	r4, [pc, #300]	; (80035d4 <loopFOC+0x174>)
 80034a8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80034ac:	4b49      	ldr	r3, [pc, #292]	; (80035d4 <loopFOC+0x174>)
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	9200      	str	r2, [sp, #0]
 80034b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034b4:	f000 f89a 	bl	80035ec <LowPassFilter>
 80034b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  current.q = LPF_current_q_s.y_prev;   // filter values
 80034c2:	4b44      	ldr	r3, [pc, #272]	; (80035d4 <loopFOC+0x174>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	4a42      	ldr	r2, [pc, #264]	; (80035d0 <loopFOC+0x170>)
 80034c8:	6053      	str	r3, [r2, #4]

  LPF_current_d_s.x = current.d;
 80034ca:	4b41      	ldr	r3, [pc, #260]	; (80035d0 <loopFOC+0x170>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a42      	ldr	r2, [pc, #264]	; (80035d8 <loopFOC+0x178>)
 80034d0:	6013      	str	r3, [r2, #0]
  LPF_current_d_s = LowPassFilter(LPF_current_d_s);
 80034d2:	4c41      	ldr	r4, [pc, #260]	; (80035d8 <loopFOC+0x178>)
 80034d4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80034d8:	4b3f      	ldr	r3, [pc, #252]	; (80035d8 <loopFOC+0x178>)
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	9200      	str	r2, [sp, #0]
 80034de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034e0:	f000 f884 	bl	80035ec <LowPassFilter>
 80034e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  current.d = LPF_current_d_s.y_prev;   // filter values
 80034ee:	4b3a      	ldr	r3, [pc, #232]	; (80035d8 <loopFOC+0x178>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	4a37      	ldr	r2, [pc, #220]	; (80035d0 <loopFOC+0x170>)
 80034f4:	6013      	str	r3, [r2, #0]



  // calculate the phase voltages
  PID_current_q_s.error = current_sp - current.q;
 80034f6:	4b39      	ldr	r3, [pc, #228]	; (80035dc <loopFOC+0x17c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a35      	ldr	r2, [pc, #212]	; (80035d0 <loopFOC+0x170>)
 80034fc:	6852      	ldr	r2, [r2, #4]
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f7fd fb35 	bl	8000b70 <__aeabi_fsub>
 8003506:	4603      	mov	r3, r0
 8003508:	461a      	mov	r2, r3
 800350a:	4b35      	ldr	r3, [pc, #212]	; (80035e0 <loopFOC+0x180>)
 800350c:	601a      	str	r2, [r3, #0]
  PID_current_q_s = PID(PID_current_q_s);
 800350e:	4b34      	ldr	r3, [pc, #208]	; (80035e0 <loopFOC+0x180>)
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	f107 0c08 	add.w	ip, r7, #8
 8003516:	4e32      	ldr	r6, [pc, #200]	; (80035e0 <loopFOC+0x180>)
 8003518:	466d      	mov	r5, sp
 800351a:	f106 040c 	add.w	r4, r6, #12
 800351e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003522:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003526:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800352a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800352e:	4660      	mov	r0, ip
 8003530:	f000 f8d2 	bl	80036d8 <PID>
 8003534:	687d      	ldr	r5, [r7, #4]
 8003536:	f107 0408 	add.w	r4, r7, #8
 800353a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800353c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800353e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003542:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003546:	e885 0003 	stmia.w	r5, {r0, r1}
  voltage.q = PID_current_q_s.output_prev;
 800354a:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <loopFOC+0x180>)
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	4a25      	ldr	r2, [pc, #148]	; (80035e4 <loopFOC+0x184>)
 8003550:	6053      	str	r3, [r2, #4]

  PID_current_d_s.error = 0 - current.d;
 8003552:	4b1f      	ldr	r3, [pc, #124]	; (80035d0 <loopFOC+0x170>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4619      	mov	r1, r3
 8003558:	f04f 0000 	mov.w	r0, #0
 800355c:	f7fd fb08 	bl	8000b70 <__aeabi_fsub>
 8003560:	4603      	mov	r3, r0
 8003562:	461a      	mov	r2, r3
 8003564:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <loopFOC+0x188>)
 8003566:	601a      	str	r2, [r3, #0]
  PID_current_d_s = PID(PID_current_d_s);
 8003568:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <loopFOC+0x188>)
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	f107 0c08 	add.w	ip, r7, #8
 8003570:	4e1d      	ldr	r6, [pc, #116]	; (80035e8 <loopFOC+0x188>)
 8003572:	466d      	mov	r5, sp
 8003574:	f106 040c 	add.w	r4, r6, #12
 8003578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800357a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800357c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003580:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003584:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003588:	4660      	mov	r0, ip
 800358a:	f000 f8a5 	bl	80036d8 <PID>
 800358e:	687d      	ldr	r5, [r7, #4]
 8003590:	f107 0408 	add.w	r4, r7, #8
 8003594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800359a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800359c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035a0:	e885 0003 	stmia.w	r5, {r0, r1}
  voltage.d = PID_current_d_s.output_prev;
 80035a4:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <loopFOC+0x188>)
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	4a0e      	ldr	r2, [pc, #56]	; (80035e4 <loopFOC+0x184>)
 80035aa:	6013      	str	r3, [r2, #0]

  // set the phase voltage - FOC heart function :)
  setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
 80035ac:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <loopFOC+0x184>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4a0c      	ldr	r2, [pc, #48]	; (80035e4 <loopFOC+0x184>)
 80035b2:	6811      	ldr	r1, [r2, #0]
 80035b4:	4a05      	ldr	r2, [pc, #20]	; (80035cc <loopFOC+0x16c>)
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fa29 	bl	8002a10 <setPhaseVoltage>
}
 80035be:	bf00      	nop
 80035c0:	374c      	adds	r7, #76	; 0x4c
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000448 	.word	0x20000448
 80035cc:	2000043c 	.word	0x2000043c
 80035d0:	2000044c 	.word	0x2000044c
 80035d4:	20000298 	.word	0x20000298
 80035d8:	200002c0 	.word	0x200002c0
 80035dc:	200005e8 	.word	0x200005e8
 80035e0:	20000268 	.word	0x20000268
 80035e4:	200003b4 	.word	0x200003b4
 80035e8:	200002d0 	.word	0x200002d0

080035ec <LowPassFilter>:

//Low-Pass Filter
struct LPF LowPassFilter(struct LPF LPF)
{
 80035ec:	b084      	sub	sp, #16
 80035ee:	b590      	push	{r4, r7, lr}
 80035f0:	b087      	sub	sp, #28
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80035fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    unsigned long timestamp = micros();
 80035fe:	f7fe fb19 	bl	8001c34 <micros>
 8003602:	6138      	str	r0, [r7, #16]

    float dt = (timestamp - LPF.timestamp_prev)*1e-6f;
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd fb62 	bl	8000cd4 <__aeabi_ui2f>
 8003610:	4603      	mov	r3, r0
 8003612:	492e      	ldr	r1, [pc, #184]	; (80036cc <LowPassFilter+0xe0>)
 8003614:	4618      	mov	r0, r3
 8003616:	f7fd fbb5 	bl	8000d84 <__aeabi_fmul>
 800361a:	4603      	mov	r3, r0
 800361c:	617b      	str	r3, [r7, #20]


    if (dt < 0.0f )
 800361e:	f04f 0100 	mov.w	r1, #0
 8003622:	6978      	ldr	r0, [r7, #20]
 8003624:	f7fd fd4c 	bl	80010c0 <__aeabi_fcmplt>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <LowPassFilter+0x48>
        dt = 1e-3f;
 800362e:	4b28      	ldr	r3, [pc, #160]	; (80036d0 <LowPassFilter+0xe4>)
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	e012      	b.n	800365a <LowPassFilter+0x6e>
    else if(dt > 0.3f)
 8003634:	4927      	ldr	r1, [pc, #156]	; (80036d4 <LowPassFilter+0xe8>)
 8003636:	6978      	ldr	r0, [r7, #20]
 8003638:	f7fd fd60 	bl	80010fc <__aeabi_fcmpgt>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <LowPassFilter+0x6e>
    {
    	LPF.y_prev = LPF.x;
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	637b      	str	r3, [r7, #52]	; 0x34
    	LPF.timestamp_prev = timestamp;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	633b      	str	r3, [r7, #48]	; 0x30
        return LPF;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	461c      	mov	r4, r3
 800364e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003654:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003658:	e031      	b.n	80036be <LowPassFilter+0xd2>
    }

    float alpha = LPF.Tf/(LPF.Tf + dt);
 800365a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	6979      	ldr	r1, [r7, #20]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fd fa87 	bl	8000b74 <__addsf3>
 8003666:	4603      	mov	r3, r0
 8003668:	4619      	mov	r1, r3
 800366a:	4620      	mov	r0, r4
 800366c:	f7fd fc3e 	bl	8000eec <__aeabi_fdiv>
 8003670:	4603      	mov	r3, r0
 8003672:	60fb      	str	r3, [r7, #12]
    float y = alpha*LPF.y_prev + (1.0f - alpha)*LPF.x;
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003676:	68f9      	ldr	r1, [r7, #12]
 8003678:	4618      	mov	r0, r3
 800367a:	f7fd fb83 	bl	8000d84 <__aeabi_fmul>
 800367e:	4603      	mov	r3, r0
 8003680:	461c      	mov	r4, r3
 8003682:	68f9      	ldr	r1, [r7, #12]
 8003684:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003688:	f7fd fa72 	bl	8000b70 <__aeabi_fsub>
 800368c:	4603      	mov	r3, r0
 800368e:	461a      	mov	r2, r3
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	4619      	mov	r1, r3
 8003694:	4610      	mov	r0, r2
 8003696:	f7fd fb75 	bl	8000d84 <__aeabi_fmul>
 800369a:	4603      	mov	r3, r0
 800369c:	4619      	mov	r1, r3
 800369e:	4620      	mov	r0, r4
 80036a0:	f7fd fa68 	bl	8000b74 <__addsf3>
 80036a4:	4603      	mov	r3, r0
 80036a6:	60bb      	str	r3, [r7, #8]

    LPF.y_prev = y;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	637b      	str	r3, [r7, #52]	; 0x34
    LPF.timestamp_prev = timestamp;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	633b      	str	r3, [r7, #48]	; 0x30

    return LPF;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	461c      	mov	r4, r3
 80036b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	371c      	adds	r7, #28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80036c8:	b004      	add	sp, #16
 80036ca:	4770      	bx	lr
 80036cc:	358637bd 	.word	0x358637bd
 80036d0:	3a83126f 	.word	0x3a83126f
 80036d4:	3e99999a 	.word	0x3e99999a

080036d8 <PID>:

//float PID(float error,float P, float I, float D, float output_ramp, float limit, unsigned long timestamp_prev, float integral_prev, float error_prev , float output_prev)
struct PID PID(struct PID PID)
{
 80036d8:	b084      	sub	sp, #16
 80036da:	b5b0      	push	{r4, r5, r7, lr}
 80036dc:	b08a      	sub	sp, #40	; 0x28
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80036e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	 // calculate the time from the last call
	    unsigned long timestamp_now = micros();
 80036ea:	f7fe faa3 	bl	8001c34 <micros>
 80036ee:	61f8      	str	r0, [r7, #28]
	    float Ts = (timestamp_now - PID.timestamp_prev) * 1e-6;
 80036f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f2:	69fa      	ldr	r2, [r7, #28]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fc fe74 	bl	80003e4 <__aeabi_ui2d>
 80036fc:	a37c      	add	r3, pc, #496	; (adr r3, 80038f0 <PID+0x218>)
 80036fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003702:	f7fc fee9 	bl	80004d8 <__aeabi_dmul>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4610      	mov	r0, r2
 800370c:	4619      	mov	r1, r3
 800370e:	f7fd f9db 	bl	8000ac8 <__aeabi_d2f>
 8003712:	4603      	mov	r3, r0
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
	    // quick fix for strange cases (micros overflow)
	    if(Ts <= 0 || Ts > 0.5)
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800371c:	f7fd fcda 	bl	80010d4 <__aeabi_fcmple>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d107      	bne.n	8003736 <PID+0x5e>
 8003726:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800372a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800372c:	f7fd fce6 	bl	80010fc <__aeabi_fcmpgt>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <PID+0x62>
	    	 Ts = 1e-3;
 8003736:	4b70      	ldr	r3, [pc, #448]	; (80038f8 <PID+0x220>)
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
	    dtx = Ts;
 800373a:	4a70      	ldr	r2, [pc, #448]	; (80038fc <PID+0x224>)
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	6013      	str	r3, [r2, #0]
	    // u(s) = (P + I/s + Ds)e(s)
	    // Discrete implementations
	    // proportional part
	    // u_p  = P *e(k)
	    float proportional = PID.P * PID.error;
 8003740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003742:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd fb1c 	bl	8000d84 <__aeabi_fmul>
 800374c:	4603      	mov	r3, r0
 800374e:	61bb      	str	r3, [r7, #24]
	    // Tustin transform of the integral part
	    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
	    float integral = PID.integral_prev + PID.I*Ts*0.5f*(PID.error + PID.error_prev);
 8003750:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8003752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003756:	4618      	mov	r0, r3
 8003758:	f7fd fb14 	bl	8000d84 <__aeabi_fmul>
 800375c:	4603      	mov	r3, r0
 800375e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003762:	4618      	mov	r0, r3
 8003764:	f7fd fb0e 	bl	8000d84 <__aeabi_fmul>
 8003768:	4603      	mov	r3, r0
 800376a:	461d      	mov	r5, r3
 800376c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f7fd f9fe 	bl	8000b74 <__addsf3>
 8003778:	4603      	mov	r3, r0
 800377a:	4619      	mov	r1, r3
 800377c:	4628      	mov	r0, r5
 800377e:	f7fd fb01 	bl	8000d84 <__aeabi_fmul>
 8003782:	4603      	mov	r3, r0
 8003784:	4619      	mov	r1, r3
 8003786:	4620      	mov	r0, r4
 8003788:	f7fd f9f4 	bl	8000b74 <__addsf3>
 800378c:	4603      	mov	r3, r0
 800378e:	617b      	str	r3, [r7, #20]
	    // antiwindup - limit the output
	    integral = _constrain(integral, -PID.limit, PID.limit);
 8003790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003792:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003796:	4619      	mov	r1, r3
 8003798:	6978      	ldr	r0, [r7, #20]
 800379a:	f7fd fc91 	bl	80010c0 <__aeabi_fcmplt>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <PID+0xd4>
 80037a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80037aa:	e00a      	b.n	80037c2 <PID+0xea>
 80037ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ae:	4619      	mov	r1, r3
 80037b0:	6978      	ldr	r0, [r7, #20]
 80037b2:	f7fd fca3 	bl	80010fc <__aeabi_fcmpgt>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <PID+0xe8>
 80037bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037be:	e000      	b.n	80037c2 <PID+0xea>
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	617b      	str	r3, [r7, #20]
	    // Discrete derivation
	    // u_dk = D(ek - ek_1)/Ts
	    float derivative = PID.D*(PID.error - PID.error_prev)/Ts;
 80037c4:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80037c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fd f9cf 	bl	8000b70 <__aeabi_fsub>
 80037d2:	4603      	mov	r3, r0
 80037d4:	4619      	mov	r1, r3
 80037d6:	4620      	mov	r0, r4
 80037d8:	f7fd fad4 	bl	8000d84 <__aeabi_fmul>
 80037dc:	4603      	mov	r3, r0
 80037de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fd fb83 	bl	8000eec <__aeabi_fdiv>
 80037e6:	4603      	mov	r3, r0
 80037e8:	613b      	str	r3, [r7, #16]

	    // sum all the components
	    float output = proportional + integral + derivative;
 80037ea:	6979      	ldr	r1, [r7, #20]
 80037ec:	69b8      	ldr	r0, [r7, #24]
 80037ee:	f7fd f9c1 	bl	8000b74 <__addsf3>
 80037f2:	4603      	mov	r3, r0
 80037f4:	4619      	mov	r1, r3
 80037f6:	6938      	ldr	r0, [r7, #16]
 80037f8:	f7fd f9bc 	bl	8000b74 <__addsf3>
 80037fc:	4603      	mov	r3, r0
 80037fe:	623b      	str	r3, [r7, #32]
	    // antiwindup - limit the output variable
	    output = _constrain(output, -PID.limit, PID.limit);
 8003800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003802:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003806:	4619      	mov	r1, r3
 8003808:	6a38      	ldr	r0, [r7, #32]
 800380a:	f7fd fc59 	bl	80010c0 <__aeabi_fcmplt>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <PID+0x144>
 8003814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003816:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800381a:	e00a      	b.n	8003832 <PID+0x15a>
 800381c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800381e:	4619      	mov	r1, r3
 8003820:	6a38      	ldr	r0, [r7, #32]
 8003822:	f7fd fc6b 	bl	80010fc <__aeabi_fcmpgt>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <PID+0x158>
 800382c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800382e:	e000      	b.n	8003832 <PID+0x15a>
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	623b      	str	r3, [r7, #32]

	    // if output ramp defined
	    float output_ramp = PID.output_ramp;
 8003834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003836:	60fb      	str	r3, [r7, #12]
	    if(output_ramp > 0)
 8003838:	f04f 0100 	mov.w	r1, #0
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f7fd fc5d 	bl	80010fc <__aeabi_fcmpgt>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d035      	beq.n	80038b4 <PID+0x1dc>
	    {
	        // limit the acceleration by ramping the output
	        float output_rate = (output - PID.output_prev)/Ts;
 8003848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384a:	4619      	mov	r1, r3
 800384c:	6a38      	ldr	r0, [r7, #32]
 800384e:	f7fd f98f 	bl	8000b70 <__aeabi_fsub>
 8003852:	4603      	mov	r3, r0
 8003854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003856:	4618      	mov	r0, r3
 8003858:	f7fd fb48 	bl	8000eec <__aeabi_fdiv>
 800385c:	4603      	mov	r3, r0
 800385e:	60bb      	str	r3, [r7, #8]
	        if (output_rate > output_ramp)
 8003860:	68f9      	ldr	r1, [r7, #12]
 8003862:	68b8      	ldr	r0, [r7, #8]
 8003864:	f7fd fc4a 	bl	80010fc <__aeabi_fcmpgt>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00c      	beq.n	8003888 <PID+0x1b0>
	            output = PID.output_prev + output_ramp*Ts;
 800386e:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8003870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7fd fa86 	bl	8000d84 <__aeabi_fmul>
 8003878:	4603      	mov	r3, r0
 800387a:	4619      	mov	r1, r3
 800387c:	4620      	mov	r0, r4
 800387e:	f7fd f979 	bl	8000b74 <__addsf3>
 8003882:	4603      	mov	r3, r0
 8003884:	623b      	str	r3, [r7, #32]
 8003886:	e015      	b.n	80038b4 <PID+0x1dc>
	        else if (output_rate < -output_ramp)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800388e:	4619      	mov	r1, r3
 8003890:	68b8      	ldr	r0, [r7, #8]
 8003892:	f7fd fc15 	bl	80010c0 <__aeabi_fcmplt>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00b      	beq.n	80038b4 <PID+0x1dc>
	            output = PID.output_prev - output_ramp*Ts;
 800389c:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800389e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f7fd fa6f 	bl	8000d84 <__aeabi_fmul>
 80038a6:	4603      	mov	r3, r0
 80038a8:	4619      	mov	r1, r3
 80038aa:	4620      	mov	r0, r4
 80038ac:	f7fd f960 	bl	8000b70 <__aeabi_fsub>
 80038b0:	4603      	mov	r3, r0
 80038b2:	623b      	str	r3, [r7, #32]
	    }

	    // saving for the next pass
	    PID.integral_prev = integral;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	643b      	str	r3, [r7, #64]	; 0x40
	    PID.output_prev = output;
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	    PID.error_prev = PID.error;
 80038bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038be:	647b      	str	r3, [r7, #68]	; 0x44
	    PID.timestamp_prev = timestamp_now;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	64bb      	str	r3, [r7, #72]	; 0x48
	    return PID;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	461d      	mov	r5, r3
 80038c8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80038cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038d8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	3728      	adds	r7, #40	; 0x28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80038e6:	b004      	add	sp, #16
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	f3af 8000 	nop.w
 80038f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80038f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80038f8:	3a83126f 	.word	0x3a83126f
 80038fc:	20000248 	.word	0x20000248

08003900 <move_angle>:
//  voltage.d = 0;

}

void move_angle(float new_target)
{
 8003900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003902:	b097      	sub	sp, #92	; 0x5c
 8003904:	af08      	add	r7, sp, #32
 8003906:	6378      	str	r0, [r7, #52]	; 0x34
  // get angular velocity
  shaft_velocity = shaftVelocity(); // read value even if motor is disabled to keep the monitoring updated
 8003908:	f7fe fff8 	bl	80028fc <shaftVelocity>
 800390c:	4603      	mov	r3, r0
 800390e:	4a38      	ldr	r2, [pc, #224]	; (80039f0 <move_angle+0xf0>)
 8003910:	6013      	str	r3, [r2, #0]

  // downsampling (optional)
  // if(motion_cnt++ < motion_downsample) return;
  // motion_cnt = 0;
  // set internal target variable
  if(_isset(new_target))
 8003912:	4938      	ldr	r1, [pc, #224]	; (80039f4 <move_angle+0xf4>)
 8003914:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003916:	f7fd fbc9 	bl	80010ac <__aeabi_fcmpeq>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d102      	bne.n	8003926 <move_angle+0x26>
	  target = new_target;
 8003920:	4a35      	ldr	r2, [pc, #212]	; (80039f8 <move_angle+0xf8>)
 8003922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003924:	6013      	str	r3, [r2, #0]

  // angle set point
  shaft_angle_sp = target;
 8003926:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <move_angle+0xf8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a34      	ldr	r2, [pc, #208]	; (80039fc <move_angle+0xfc>)
 800392c:	6013      	str	r3, [r2, #0]
  // calculate velocity set point
  PID_angle_s.error = shaft_angle_sp - shaft_angle;
 800392e:	4b33      	ldr	r3, [pc, #204]	; (80039fc <move_angle+0xfc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a33      	ldr	r2, [pc, #204]	; (8003a00 <move_angle+0x100>)
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f7fd f919 	bl	8000b70 <__aeabi_fsub>
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	4b30      	ldr	r3, [pc, #192]	; (8003a04 <move_angle+0x104>)
 8003944:	601a      	str	r2, [r3, #0]
  PID_angle_s = PID(PID_angle_s);
 8003946:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <move_angle+0x104>)
 8003948:	607b      	str	r3, [r7, #4]
 800394a:	f107 0c08 	add.w	ip, r7, #8
 800394e:	4e2d      	ldr	r6, [pc, #180]	; (8003a04 <move_angle+0x104>)
 8003950:	466d      	mov	r5, sp
 8003952:	f106 040c 	add.w	r4, r6, #12
 8003956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800395a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800395e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003962:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003966:	4660      	mov	r0, ip
 8003968:	f7ff feb6 	bl	80036d8 <PID>
 800396c:	687d      	ldr	r5, [r7, #4]
 800396e:	f107 0408 	add.w	r4, r7, #8
 8003972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800397a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800397e:	e885 0003 	stmia.w	r5, {r0, r1}
  shaft_velocity_sp = PID_angle_s.output_prev;
 8003982:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <move_angle+0x104>)
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	4a20      	ldr	r2, [pc, #128]	; (8003a08 <move_angle+0x108>)
 8003988:	6013      	str	r3, [r2, #0]
  // calculate the torque command
  PID_velocity_s.error = shaft_velocity_sp - shaft_velocity ;
 800398a:	4b1f      	ldr	r3, [pc, #124]	; (8003a08 <move_angle+0x108>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a18      	ldr	r2, [pc, #96]	; (80039f0 <move_angle+0xf0>)
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f7fd f8eb 	bl	8000b70 <__aeabi_fsub>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <move_angle+0x10c>)
 80039a0:	601a      	str	r2, [r3, #0]
  PID_velocity_s = PID(PID_velocity_s);
 80039a2:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <move_angle+0x10c>)
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	f107 0c08 	add.w	ip, r7, #8
 80039aa:	4e18      	ldr	r6, [pc, #96]	; (8003a0c <move_angle+0x10c>)
 80039ac:	466d      	mov	r5, sp
 80039ae:	f106 040c 	add.w	r4, r6, #12
 80039b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039b6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80039ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80039be:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80039c2:	4660      	mov	r0, ip
 80039c4:	f7ff fe88 	bl	80036d8 <PID>
 80039c8:	687d      	ldr	r5, [r7, #4]
 80039ca:	f107 0408 	add.w	r4, r7, #8
 80039ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039da:	e885 0003 	stmia.w	r5, {r0, r1}
  current_sp = PID_velocity_s.output_prev;
 80039de:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <move_angle+0x10c>)
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	4a0b      	ldr	r2, [pc, #44]	; (8003a10 <move_angle+0x110>)
 80039e4:	6013      	str	r3, [r2, #0]

//  voltage.q = current_sp*phase_resistance;
//  voltage.d = 0;
}
 80039e6:	bf00      	nop
 80039e8:	373c      	adds	r7, #60	; 0x3c
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000518 	.word	0x20000518
 80039f4:	c640e400 	.word	0xc640e400
 80039f8:	20000678 	.word	0x20000678
 80039fc:	200003a0 	.word	0x200003a0
 8003a00:	20000448 	.word	0x20000448
 8003a04:	20000648 	.word	0x20000648
 8003a08:	20000670 	.word	0x20000670
 8003a0c:	20000458 	.word	0x20000458
 8003a10:	200005e8 	.word	0x200005e8

08003a14 <move_haptic>:

void move_haptic(float new_target, float passivity_gain)
{
 8003a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a16:	b097      	sub	sp, #92	; 0x5c
 8003a18:	af08      	add	r7, sp, #32
 8003a1a:	6378      	str	r0, [r7, #52]	; 0x34
 8003a1c:	6339      	str	r1, [r7, #48]	; 0x30
	// get angular velocity
	  shaft_velocity = shaftVelocity(); // read value even if motor is disabled to keep the monitoring updated
 8003a1e:	f7fe ff6d 	bl	80028fc <shaftVelocity>
 8003a22:	4603      	mov	r3, r0
 8003a24:	4a27      	ldr	r2, [pc, #156]	; (8003ac4 <move_haptic+0xb0>)
 8003a26:	6013      	str	r3, [r2, #0]

	  // downsampling (optional)
	  // if(motion_cnt++ < motion_downsample) return;
	  // motion_cnt = 0;
	  // set internal target variable
	  if(_isset(new_target))
 8003a28:	4927      	ldr	r1, [pc, #156]	; (8003ac8 <move_haptic+0xb4>)
 8003a2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a2c:	f7fd fb3e 	bl	80010ac <__aeabi_fcmpeq>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d102      	bne.n	8003a3c <move_haptic+0x28>
		  target = new_target;
 8003a36:	4a25      	ldr	r2, [pc, #148]	; (8003acc <move_haptic+0xb8>)
 8003a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3a:	6013      	str	r3, [r2, #0]
	  // angle set point
	  shaft_angle_sp = target;
 8003a3c:	4b23      	ldr	r3, [pc, #140]	; (8003acc <move_haptic+0xb8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a23      	ldr	r2, [pc, #140]	; (8003ad0 <move_haptic+0xbc>)
 8003a42:	6013      	str	r3, [r2, #0]
	  // calculate velocity set point
	  PID_haptic_s.error = shaft_angle_sp - shaft_angle;
 8003a44:	4b22      	ldr	r3, [pc, #136]	; (8003ad0 <move_haptic+0xbc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <move_haptic+0xc0>)
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fd f88e 	bl	8000b70 <__aeabi_fsub>
 8003a54:	4603      	mov	r3, r0
 8003a56:	461a      	mov	r2, r3
 8003a58:	4b1f      	ldr	r3, [pc, #124]	; (8003ad8 <move_haptic+0xc4>)
 8003a5a:	601a      	str	r2, [r3, #0]
	  PID_haptic_s = PID(PID_haptic_s);
 8003a5c:	4b1e      	ldr	r3, [pc, #120]	; (8003ad8 <move_haptic+0xc4>)
 8003a5e:	607b      	str	r3, [r7, #4]
 8003a60:	f107 0c08 	add.w	ip, r7, #8
 8003a64:	4e1c      	ldr	r6, [pc, #112]	; (8003ad8 <move_haptic+0xc4>)
 8003a66:	466d      	mov	r5, sp
 8003a68:	f106 040c 	add.w	r4, r6, #12
 8003a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a70:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003a74:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003a78:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003a7c:	4660      	mov	r0, ip
 8003a7e:	f7ff fe2b 	bl	80036d8 <PID>
 8003a82:	687d      	ldr	r5, [r7, #4]
 8003a84:	f107 0408 	add.w	r4, r7, #8
 8003a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a94:	e885 0003 	stmia.w	r5, {r0, r1}
	  current_sp = PID_haptic_s.output_prev - (shaft_velocity * passivity_gain);
 8003a98:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <move_haptic+0xc4>)
 8003a9a:	691c      	ldr	r4, [r3, #16]
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <move_haptic+0xb0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fd f96e 	bl	8000d84 <__aeabi_fmul>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4620      	mov	r0, r4
 8003aae:	f7fd f85f 	bl	8000b70 <__aeabi_fsub>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <move_haptic+0xc8>)
 8003ab8:	601a      	str	r2, [r3, #0]
}
 8003aba:	bf00      	nop
 8003abc:	373c      	adds	r7, #60	; 0x3c
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000518 	.word	0x20000518
 8003ac8:	c640e400 	.word	0xc640e400
 8003acc:	20000678 	.word	0x20000678
 8003ad0:	200003a0 	.word	0x200003a0
 8003ad4:	20000448 	.word	0x20000448
 8003ad8:	20000620 	.word	0x20000620
 8003adc:	200005e8 	.word	0x200005e8

08003ae0 <angleOpenloop>:

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float angleOpenloop(float target_angle)
{
 8003ae0:	b590      	push	{r4, r7, lr}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  unsigned long now_us = micros();
 8003ae8:	f7fe f8a4 	bl	8001c34 <micros>
 8003aec:	6138      	str	r0, [r7, #16]
  // calculate the sample time from last call
  float Ts = (now_us - open_loop_timestamp) * 1e-6;
 8003aee:	4b5c      	ldr	r3, [pc, #368]	; (8003c60 <angleOpenloop+0x180>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fc fc73 	bl	80003e4 <__aeabi_ui2d>
 8003afe:	a356      	add	r3, pc, #344	; (adr r3, 8003c58 <angleOpenloop+0x178>)
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	f7fc fce8 	bl	80004d8 <__aeabi_dmul>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	f7fc ffda 	bl	8000ac8 <__aeabi_d2f>
 8003b14:	4603      	mov	r3, r0
 8003b16:	617b      	str	r3, [r7, #20]
  // quick fix for strange cases (micros overflow + timestamp not defined)
  if(Ts <= 0 || Ts > 0.5) Ts = 1e-3;
 8003b18:	f04f 0100 	mov.w	r1, #0
 8003b1c:	6978      	ldr	r0, [r7, #20]
 8003b1e:	f7fd fad9 	bl	80010d4 <__aeabi_fcmple>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d107      	bne.n	8003b38 <angleOpenloop+0x58>
 8003b28:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003b2c:	6978      	ldr	r0, [r7, #20]
 8003b2e:	f7fd fae5 	bl	80010fc <__aeabi_fcmpgt>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <angleOpenloop+0x5c>
 8003b38:	4b4a      	ldr	r3, [pc, #296]	; (8003c64 <angleOpenloop+0x184>)
 8003b3a:	617b      	str	r3, [r7, #20]

  // calculate the necessary angle to move from current position towards target angle
  // with maximal velocity (velocity_limit)
  if(abs( target_angle - shaft_angle ) > abs(velocity_limit*Ts))
 8003b3c:	4b4a      	ldr	r3, [pc, #296]	; (8003c68 <angleOpenloop+0x188>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4619      	mov	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fd f814 	bl	8000b70 <__aeabi_fsub>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fd fae0 	bl	8001110 <__aeabi_f2iz>
 8003b50:	4603      	mov	r3, r0
 8003b52:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8003b56:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8003b5a:	4b44      	ldr	r3, [pc, #272]	; (8003c6c <angleOpenloop+0x18c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6979      	ldr	r1, [r7, #20]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fd f90f 	bl	8000d84 <__aeabi_fmul>
 8003b66:	4603      	mov	r3, r0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd fad1 	bl	8001110 <__aeabi_f2iz>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bfb8      	it	lt
 8003b74:	425b      	neglt	r3, r3
 8003b76:	429c      	cmp	r4, r3
 8003b78:	dd4a      	ble.n	8003c10 <angleOpenloop+0x130>
  {
    shaft_angle += _sign(target_angle - shaft_angle) * abs( velocity_limit )*Ts;
 8003b7a:	4b3b      	ldr	r3, [pc, #236]	; (8003c68 <angleOpenloop+0x188>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7fc fff5 	bl	8000b70 <__aeabi_fsub>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fd fa97 	bl	80010c0 <__aeabi_fcmplt>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <angleOpenloop+0xbe>
 8003b98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003b9c:	e014      	b.n	8003bc8 <angleOpenloop+0xe8>
 8003b9e:	4b32      	ldr	r3, [pc, #200]	; (8003c68 <angleOpenloop+0x188>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7fc ffe3 	bl	8000b70 <__aeabi_fsub>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2201      	movs	r2, #1
 8003bae:	4614      	mov	r4, r2
 8003bb0:	f04f 0100 	mov.w	r1, #0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fd faa1 	bl	80010fc <__aeabi_fcmpgt>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <angleOpenloop+0xe4>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	461c      	mov	r4, r3
 8003bc4:	b2e3      	uxtb	r3, r4
 8003bc6:	461c      	mov	r4, r3
 8003bc8:	4b28      	ldr	r3, [pc, #160]	; (8003c6c <angleOpenloop+0x18c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fd fa9f 	bl	8001110 <__aeabi_f2iz>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bfb8      	it	lt
 8003bd8:	425b      	neglt	r3, r3
 8003bda:	fb03 f304 	mul.w	r3, r3, r4
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fd f87c 	bl	8000cdc <__aeabi_i2f>
 8003be4:	4603      	mov	r3, r0
 8003be6:	6979      	ldr	r1, [r7, #20]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fd f8cb 	bl	8000d84 <__aeabi_fmul>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <angleOpenloop+0x188>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	f7fc ffbb 	bl	8000b74 <__addsf3>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	461a      	mov	r2, r3
 8003c02:	4b19      	ldr	r3, [pc, #100]	; (8003c68 <angleOpenloop+0x188>)
 8003c04:	601a      	str	r2, [r3, #0]
    shaft_velocity = velocity_limit;
 8003c06:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <angleOpenloop+0x18c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <angleOpenloop+0x190>)
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e006      	b.n	8003c1e <angleOpenloop+0x13e>
  }
  else
  {
    shaft_angle = target_angle;
 8003c10:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <angleOpenloop+0x188>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6013      	str	r3, [r2, #0]
    shaft_velocity = 0;
 8003c16:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <angleOpenloop+0x190>)
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
  }


  // use voltage limit or current limit
  float Uq = voltage_limit;
 8003c1e:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <angleOpenloop+0x194>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]
//  if(_isset(phase_resistance))
//	  Uq =  current_limit*phase_resistance;

  // set the maximal allowed voltage (voltage_limit) with the necessary angle
  setPhaseVoltage(Uq,  0, _electricalAngle(shaft_angle, pole_pairs));
 8003c24:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <angleOpenloop+0x188>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <angleOpenloop+0x198>)
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fba6 	bl	8002380 <_electricalAngle>
 8003c34:	4603      	mov	r3, r0
 8003c36:	461a      	mov	r2, r3
 8003c38:	f04f 0100 	mov.w	r1, #0
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f7fe fee7 	bl	8002a10 <setPhaseVoltage>

  open_loop_timestamp = now_us;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4a06      	ldr	r2, [pc, #24]	; (8003c60 <angleOpenloop+0x180>)
 8003c46:	6013      	str	r3, [r2, #0]
  return Uq;
 8003c48:	68fb      	ldr	r3, [r7, #12]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd90      	pop	{r4, r7, pc}
 8003c52:	bf00      	nop
 8003c54:	f3af 8000 	nop.w
 8003c58:	a0b5ed8d 	.word	0xa0b5ed8d
 8003c5c:	3eb0c6f7 	.word	0x3eb0c6f7
 8003c60:	200002fc 	.word	0x200002fc
 8003c64:	3a83126f 	.word	0x3a83126f
 8003c68:	20000448 	.word	0x20000448
 8003c6c:	2000067c 	.word	0x2000067c
 8003c70:	20000518 	.word	0x20000518
 8003c74:	200004f0 	.word	0x200004f0
 8003c78:	20000014 	.word	0x20000014

08003c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c80:	b672      	cpsid	i
}
 8003c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c84:	e7fe      	b.n	8003c84 <Error_Handler+0x8>
	...

08003c88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003c8e:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <HAL_MspInit+0x5c>)
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	4a14      	ldr	r2, [pc, #80]	; (8003ce4 <HAL_MspInit+0x5c>)
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	6193      	str	r3, [r2, #24]
 8003c9a:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <HAL_MspInit+0x5c>)
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ca6:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <HAL_MspInit+0x5c>)
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4a0e      	ldr	r2, [pc, #56]	; (8003ce4 <HAL_MspInit+0x5c>)
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	61d3      	str	r3, [r2, #28]
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <HAL_MspInit+0x5c>)
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	607b      	str	r3, [r7, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003cbe:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <HAL_MspInit+0x60>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	4a04      	ldr	r2, [pc, #16]	; (8003ce8 <HAL_MspInit+0x60>)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cda:	bf00      	nop
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40010000 	.word	0x40010000

08003cec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08a      	sub	sp, #40	; 0x28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf4:	f107 0318 	add.w	r3, r7, #24
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a33      	ldr	r2, [pc, #204]	; (8003dd4 <HAL_ADC_MspInit+0xe8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d15f      	bne.n	8003dcc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d0c:	4b32      	ldr	r3, [pc, #200]	; (8003dd8 <HAL_ADC_MspInit+0xec>)
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	4a31      	ldr	r2, [pc, #196]	; (8003dd8 <HAL_ADC_MspInit+0xec>)
 8003d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d16:	6193      	str	r3, [r2, #24]
 8003d18:	4b2f      	ldr	r3, [pc, #188]	; (8003dd8 <HAL_ADC_MspInit+0xec>)
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d24:	4b2c      	ldr	r3, [pc, #176]	; (8003dd8 <HAL_ADC_MspInit+0xec>)
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	4a2b      	ldr	r2, [pc, #172]	; (8003dd8 <HAL_ADC_MspInit+0xec>)
 8003d2a:	f043 0304 	orr.w	r3, r3, #4
 8003d2e:	6193      	str	r3, [r2, #24]
 8003d30:	4b29      	ldr	r3, [pc, #164]	; (8003dd8 <HAL_ADC_MspInit+0xec>)
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d3c:	4b26      	ldr	r3, [pc, #152]	; (8003dd8 <HAL_ADC_MspInit+0xec>)
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	4a25      	ldr	r2, [pc, #148]	; (8003dd8 <HAL_ADC_MspInit+0xec>)
 8003d42:	f043 0308 	orr.w	r3, r3, #8
 8003d46:	6193      	str	r3, [r2, #24]
 8003d48:	4b23      	ldr	r3, [pc, #140]	; (8003dd8 <HAL_ADC_MspInit+0xec>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SOA_Pin;
 8003d54:	2308      	movs	r3, #8
 8003d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SOA_GPIO_Port, &GPIO_InitStruct);
 8003d5c:	f107 0318 	add.w	r3, r7, #24
 8003d60:	4619      	mov	r1, r3
 8003d62:	481e      	ldr	r0, [pc, #120]	; (8003ddc <HAL_ADC_MspInit+0xf0>)
 8003d64:	f002 f874 	bl	8005e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SOB_Pin|SOC_Pin;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d70:	f107 0318 	add.w	r3, r7, #24
 8003d74:	4619      	mov	r1, r3
 8003d76:	481a      	ldr	r0, [pc, #104]	; (8003de0 <HAL_ADC_MspInit+0xf4>)
 8003d78:	f002 f86a 	bl	8005e50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003d7c:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <HAL_ADC_MspInit+0xf8>)
 8003d7e:	4a1a      	ldr	r2, [pc, #104]	; (8003de8 <HAL_ADC_MspInit+0xfc>)
 8003d80:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d82:	4b18      	ldr	r3, [pc, #96]	; (8003de4 <HAL_ADC_MspInit+0xf8>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d88:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <HAL_ADC_MspInit+0xf8>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003d8e:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <HAL_ADC_MspInit+0xf8>)
 8003d90:	2280      	movs	r2, #128	; 0x80
 8003d92:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d94:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <HAL_ADC_MspInit+0xf8>)
 8003d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d9a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d9c:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <HAL_ADC_MspInit+0xf8>)
 8003d9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003da2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003da4:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <HAL_ADC_MspInit+0xf8>)
 8003da6:	2220      	movs	r2, #32
 8003da8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003daa:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <HAL_ADC_MspInit+0xf8>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003db0:	480c      	ldr	r0, [pc, #48]	; (8003de4 <HAL_ADC_MspInit+0xf8>)
 8003db2:	f001 fe5f 	bl	8005a74 <HAL_DMA_Init>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8003dbc:	f7ff ff5e 	bl	8003c7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a08      	ldr	r2, [pc, #32]	; (8003de4 <HAL_ADC_MspInit+0xf8>)
 8003dc4:	621a      	str	r2, [r3, #32]
 8003dc6:	4a07      	ldr	r2, [pc, #28]	; (8003de4 <HAL_ADC_MspInit+0xf8>)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003dcc:	bf00      	nop
 8003dce:	3728      	adds	r7, #40	; 0x28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40012400 	.word	0x40012400
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40010800 	.word	0x40010800
 8003de0:	40010c00 	.word	0x40010c00
 8003de4:	2000048c 	.word	0x2000048c
 8003de8:	40020008 	.word	0x40020008

08003dec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df4:	f107 0310 	add.w	r3, r7, #16
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	605a      	str	r2, [r3, #4]
 8003dfe:	609a      	str	r2, [r3, #8]
 8003e00:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a2c      	ldr	r2, [pc, #176]	; (8003eb8 <HAL_CAN_MspInit+0xcc>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d151      	bne.n	8003eb0 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003e0c:	4b2b      	ldr	r3, [pc, #172]	; (8003ebc <HAL_CAN_MspInit+0xd0>)
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	4a2a      	ldr	r2, [pc, #168]	; (8003ebc <HAL_CAN_MspInit+0xd0>)
 8003e12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e16:	61d3      	str	r3, [r2, #28]
 8003e18:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <HAL_CAN_MspInit+0xd0>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e24:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <HAL_CAN_MspInit+0xd0>)
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	4a24      	ldr	r2, [pc, #144]	; (8003ebc <HAL_CAN_MspInit+0xd0>)
 8003e2a:	f043 0304 	orr.w	r3, r3, #4
 8003e2e:	6193      	str	r3, [r2, #24]
 8003e30:	4b22      	ldr	r3, [pc, #136]	; (8003ebc <HAL_CAN_MspInit+0xd0>)
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003e3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e4a:	f107 0310 	add.w	r3, r7, #16
 8003e4e:	4619      	mov	r1, r3
 8003e50:	481b      	ldr	r0, [pc, #108]	; (8003ec0 <HAL_CAN_MspInit+0xd4>)
 8003e52:	f001 fffd 	bl	8005e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e60:	2303      	movs	r3, #3
 8003e62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e64:	f107 0310 	add.w	r3, r7, #16
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4815      	ldr	r0, [pc, #84]	; (8003ec0 <HAL_CAN_MspInit+0xd4>)
 8003e6c:	f001 fff0 	bl	8005e50 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8003e70:	2200      	movs	r2, #0
 8003e72:	2100      	movs	r1, #0
 8003e74:	2013      	movs	r0, #19
 8003e76:	f001 fdc6 	bl	8005a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8003e7a:	2013      	movs	r0, #19
 8003e7c:	f001 fddf 	bl	8005a3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003e80:	2200      	movs	r2, #0
 8003e82:	2100      	movs	r1, #0
 8003e84:	2014      	movs	r0, #20
 8003e86:	f001 fdbe 	bl	8005a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003e8a:	2014      	movs	r0, #20
 8003e8c:	f001 fdd7 	bl	8005a3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003e90:	2200      	movs	r2, #0
 8003e92:	2100      	movs	r1, #0
 8003e94:	2015      	movs	r0, #21
 8003e96:	f001 fdb6 	bl	8005a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003e9a:	2015      	movs	r0, #21
 8003e9c:	f001 fdcf 	bl	8005a3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	2016      	movs	r0, #22
 8003ea6:	f001 fdae 	bl	8005a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8003eaa:	2016      	movs	r0, #22
 8003eac:	f001 fdc7 	bl	8005a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003eb0:	bf00      	nop
 8003eb2:	3720      	adds	r7, #32
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40006400 	.word	0x40006400
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40010800 	.word	0x40010800

08003ec4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ecc:	f107 0310 	add.w	r3, r7, #16
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1b      	ldr	r2, [pc, #108]	; (8003f4c <HAL_SPI_MspInit+0x88>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d12f      	bne.n	8003f44 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ee4:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <HAL_SPI_MspInit+0x8c>)
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_SPI_MspInit+0x8c>)
 8003eea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003eee:	6193      	str	r3, [r2, #24]
 8003ef0:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <HAL_SPI_MspInit+0x8c>)
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003efc:	4b14      	ldr	r3, [pc, #80]	; (8003f50 <HAL_SPI_MspInit+0x8c>)
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	4a13      	ldr	r2, [pc, #76]	; (8003f50 <HAL_SPI_MspInit+0x8c>)
 8003f02:	f043 0304 	orr.w	r3, r3, #4
 8003f06:	6193      	str	r3, [r2, #24]
 8003f08:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <HAL_SPI_MspInit+0x8c>)
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003f14:	23a0      	movs	r3, #160	; 0xa0
 8003f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f20:	f107 0310 	add.w	r3, r7, #16
 8003f24:	4619      	mov	r1, r3
 8003f26:	480b      	ldr	r0, [pc, #44]	; (8003f54 <HAL_SPI_MspInit+0x90>)
 8003f28:	f001 ff92 	bl	8005e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f2c:	2340      	movs	r3, #64	; 0x40
 8003f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f38:	f107 0310 	add.w	r3, r7, #16
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4805      	ldr	r0, [pc, #20]	; (8003f54 <HAL_SPI_MspInit+0x90>)
 8003f40:	f001 ff86 	bl	8005e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f44:	bf00      	nop
 8003f46:	3720      	adds	r7, #32
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40013000 	.word	0x40013000
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40010800 	.word	0x40010800

08003f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f68:	d10c      	bne.n	8003f84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f6a:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <HAL_TIM_Base_MspInit+0x68>)
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	4a14      	ldr	r2, [pc, #80]	; (8003fc0 <HAL_TIM_Base_MspInit+0x68>)
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	61d3      	str	r3, [r2, #28]
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_TIM_Base_MspInit+0x68>)
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003f82:	e018      	b.n	8003fb6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a0e      	ldr	r2, [pc, #56]	; (8003fc4 <HAL_TIM_Base_MspInit+0x6c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d113      	bne.n	8003fb6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f8e:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <HAL_TIM_Base_MspInit+0x68>)
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	4a0b      	ldr	r2, [pc, #44]	; (8003fc0 <HAL_TIM_Base_MspInit+0x68>)
 8003f94:	f043 0304 	orr.w	r3, r3, #4
 8003f98:	61d3      	str	r3, [r2, #28]
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <HAL_TIM_Base_MspInit+0x68>)
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2100      	movs	r1, #0
 8003faa:	201e      	movs	r0, #30
 8003fac:	f001 fd2b 	bl	8005a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003fb0:	201e      	movs	r0, #30
 8003fb2:	f001 fd44 	bl	8005a3e <HAL_NVIC_EnableIRQ>
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40000800 	.word	0x40000800

08003fc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd0:	f107 0310 	add.w	r3, r7, #16
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	609a      	str	r2, [r3, #8]
 8003fdc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe6:	d117      	bne.n	8004018 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe8:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <HAL_TIM_MspPostInit+0x58>)
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	4a0c      	ldr	r2, [pc, #48]	; (8004020 <HAL_TIM_MspPostInit+0x58>)
 8003fee:	f043 0304 	orr.w	r3, r3, #4
 8003ff2:	6193      	str	r3, [r2, #24]
 8003ff4:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <HAL_TIM_MspPostInit+0x58>)
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin|PWMC_Pin;
 8004000:	2307      	movs	r3, #7
 8004002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004004:	2302      	movs	r3, #2
 8004006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004008:	2302      	movs	r3, #2
 800400a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800400c:	f107 0310 	add.w	r3, r7, #16
 8004010:	4619      	mov	r1, r3
 8004012:	4804      	ldr	r0, [pc, #16]	; (8004024 <HAL_TIM_MspPostInit+0x5c>)
 8004014:	f001 ff1c 	bl	8005e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004018:	bf00      	nop
 800401a:	3720      	adds	r7, #32
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40021000 	.word	0x40021000
 8004024:	40010800 	.word	0x40010800

08004028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004030:	f107 0310 	add.w	r3, r7, #16
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a1c      	ldr	r2, [pc, #112]	; (80040b4 <HAL_UART_MspInit+0x8c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d131      	bne.n	80040ac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004048:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <HAL_UART_MspInit+0x90>)
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	4a1a      	ldr	r2, [pc, #104]	; (80040b8 <HAL_UART_MspInit+0x90>)
 800404e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004052:	6193      	str	r3, [r2, #24]
 8004054:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <HAL_UART_MspInit+0x90>)
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004060:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <HAL_UART_MspInit+0x90>)
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	4a14      	ldr	r2, [pc, #80]	; (80040b8 <HAL_UART_MspInit+0x90>)
 8004066:	f043 0304 	orr.w	r3, r3, #4
 800406a:	6193      	str	r3, [r2, #24]
 800406c:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <HAL_UART_MspInit+0x90>)
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800407c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407e:	2302      	movs	r3, #2
 8004080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004082:	2303      	movs	r3, #3
 8004084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004086:	f107 0310 	add.w	r3, r7, #16
 800408a:	4619      	mov	r1, r3
 800408c:	480b      	ldr	r0, [pc, #44]	; (80040bc <HAL_UART_MspInit+0x94>)
 800408e:	f001 fedf 	bl	8005e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409c:	2300      	movs	r3, #0
 800409e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a0:	f107 0310 	add.w	r3, r7, #16
 80040a4:	4619      	mov	r1, r3
 80040a6:	4805      	ldr	r0, [pc, #20]	; (80040bc <HAL_UART_MspInit+0x94>)
 80040a8:	f001 fed2 	bl	8005e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80040ac:	bf00      	nop
 80040ae:	3720      	adds	r7, #32
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40013800 	.word	0x40013800
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40010800 	.word	0x40010800

080040c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040c4:	e7fe      	b.n	80040c4 <NMI_Handler+0x4>

080040c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040c6:	b480      	push	{r7}
 80040c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040ca:	e7fe      	b.n	80040ca <HardFault_Handler+0x4>

080040cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040d0:	e7fe      	b.n	80040d0 <MemManage_Handler+0x4>

080040d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040d2:	b480      	push	{r7}
 80040d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040d6:	e7fe      	b.n	80040d6 <BusFault_Handler+0x4>

080040d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040dc:	e7fe      	b.n	80040dc <UsageFault_Handler+0x4>

080040de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040de:	b480      	push	{r7}
 80040e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr

080040ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040ea:	b480      	push	{r7}
 80040ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040ee:	bf00      	nop
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040f6:	b480      	push	{r7}
 80040f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr

08004102 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004106:	f000 f955 	bl	80043b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800410a:	bf00      	nop
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004114:	4802      	ldr	r0, [pc, #8]	; (8004120 <DMA1_Channel1_IRQHandler+0x10>)
 8004116:	f001 fd67 	bl	8005be8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	2000048c 	.word	0x2000048c

08004124 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004128:	4802      	ldr	r0, [pc, #8]	; (8004134 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800412a:	f001 f966 	bl	80053fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800412e:	bf00      	nop
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000378 	.word	0x20000378

08004138 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800413c:	4802      	ldr	r0, [pc, #8]	; (8004148 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800413e:	f001 f95c 	bl	80053fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004142:	bf00      	nop
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000378 	.word	0x20000378

0800414c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004150:	4802      	ldr	r0, [pc, #8]	; (800415c <CAN1_RX1_IRQHandler+0x10>)
 8004152:	f001 f952 	bl	80053fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004156:	bf00      	nop
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000378 	.word	0x20000378

08004160 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004164:	4802      	ldr	r0, [pc, #8]	; (8004170 <CAN1_SCE_IRQHandler+0x10>)
 8004166:	f001 f948 	bl	80053fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800416a:	bf00      	nop
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000378 	.word	0x20000378

08004174 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004178:	4802      	ldr	r0, [pc, #8]	; (8004184 <TIM4_IRQHandler+0x10>)
 800417a:	f003 f93d 	bl	80073f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000304 	.word	0x20000304

08004188 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
	return 1;
 800418c:	2301      	movs	r3, #1
}
 800418e:	4618      	mov	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr

08004196 <_kill>:

int _kill(int pid, int sig)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041a0:	f003 ffc8 	bl	8008134 <__errno>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2216      	movs	r2, #22
 80041a8:	601a      	str	r2, [r3, #0]
	return -1;
 80041aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <_exit>:

void _exit (int status)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ffe7 	bl	8004196 <_kill>
	while (1) {}		/* Make sure we hang here */
 80041c8:	e7fe      	b.n	80041c8 <_exit+0x12>

080041ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b086      	sub	sp, #24
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e00a      	b.n	80041f2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041dc:	f3af 8000 	nop.w
 80041e0:	4601      	mov	r1, r0
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	60ba      	str	r2, [r7, #8]
 80041e8:	b2ca      	uxtb	r2, r1
 80041ea:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	3301      	adds	r3, #1
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	dbf0      	blt.n	80041dc <_read+0x12>
	}

return len;
 80041fa:	687b      	ldr	r3, [r7, #4]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	return -1;
 800420c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr

0800421a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800422a:	605a      	str	r2, [r3, #4]
	return 0;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <_isatty>:

int _isatty(int file)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
	return 1;
 8004240:	2301      	movs	r3, #1
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
	return 0;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr

08004264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800426c:	4a14      	ldr	r2, [pc, #80]	; (80042c0 <_sbrk+0x5c>)
 800426e:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <_sbrk+0x60>)
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004278:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <_sbrk+0x64>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d102      	bne.n	8004286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004280:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <_sbrk+0x64>)
 8004282:	4a12      	ldr	r2, [pc, #72]	; (80042cc <_sbrk+0x68>)
 8004284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004286:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <_sbrk+0x64>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4413      	add	r3, r2
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	429a      	cmp	r2, r3
 8004292:	d207      	bcs.n	80042a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004294:	f003 ff4e 	bl	8008134 <__errno>
 8004298:	4603      	mov	r3, r0
 800429a:	220c      	movs	r2, #12
 800429c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800429e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042a2:	e009      	b.n	80042b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042a4:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <_sbrk+0x64>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042aa:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <_sbrk+0x64>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4413      	add	r3, r2
 80042b2:	4a05      	ldr	r2, [pc, #20]	; (80042c8 <_sbrk+0x64>)
 80042b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042b6:	68fb      	ldr	r3, [r7, #12]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20005000 	.word	0x20005000
 80042c4:	00000400 	.word	0x00000400
 80042c8:	2000025c 	.word	0x2000025c
 80042cc:	200006a0 	.word	0x200006a0

080042d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042d4:	bf00      	nop
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */

   ldr r0, =_sdata
 80042dc:	480c      	ldr	r0, [pc, #48]	; (8004310 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80042de:	490d      	ldr	r1, [pc, #52]	; (8004314 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80042e0:	4a0d      	ldr	r2, [pc, #52]	; (8004318 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80042e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042e4:	e002      	b.n	80042ec <LoopCopyDataInit>

080042e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042ea:	3304      	adds	r3, #4

080042ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042f0:	d3f9      	bcc.n	80042e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042f2:	4a0a      	ldr	r2, [pc, #40]	; (800431c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042f4:	4c0a      	ldr	r4, [pc, #40]	; (8004320 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042f8:	e001      	b.n	80042fe <LoopFillZerobss>

080042fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042fc:	3204      	adds	r2, #4

080042fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004300:	d3fb      	bcc.n	80042fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004302:	f7ff ffe5 	bl	80042d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004306:	f003 ff1b 	bl	8008140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800430a:	f7fd f80d 	bl	8001328 <main>
  bx lr
 800430e:	4770      	bx	lr
   ldr r0, =_sdata
 8004310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004314:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8004318:	0800e9f0 	.word	0x0800e9f0
  ldr r2, =_sbss
 800431c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004320:	2000069c 	.word	0x2000069c

08004324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004324:	e7fe      	b.n	8004324 <ADC1_2_IRQHandler>
	...

08004328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800432c:	4b08      	ldr	r3, [pc, #32]	; (8004350 <HAL_Init+0x28>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a07      	ldr	r2, [pc, #28]	; (8004350 <HAL_Init+0x28>)
 8004332:	f043 0310 	orr.w	r3, r3, #16
 8004336:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004338:	2003      	movs	r0, #3
 800433a:	f001 fb59 	bl	80059f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800433e:	200f      	movs	r0, #15
 8004340:	f000 f808 	bl	8004354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004344:	f7ff fca0 	bl	8003c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40022000 	.word	0x40022000

08004354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800435c:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <HAL_InitTick+0x54>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b12      	ldr	r3, [pc, #72]	; (80043ac <HAL_InitTick+0x58>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	4619      	mov	r1, r3
 8004366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800436a:	fbb3 f3f1 	udiv	r3, r3, r1
 800436e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004372:	4618      	mov	r0, r3
 8004374:	f001 fb71 	bl	8005a5a <HAL_SYSTICK_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e00e      	b.n	80043a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b0f      	cmp	r3, #15
 8004386:	d80a      	bhi.n	800439e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004388:	2200      	movs	r2, #0
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004390:	f001 fb39 	bl	8005a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004394:	4a06      	ldr	r2, [pc, #24]	; (80043b0 <HAL_InitTick+0x5c>)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e000      	b.n	80043a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20000020 	.word	0x20000020
 80043ac:	20000028 	.word	0x20000028
 80043b0:	20000024 	.word	0x20000024

080043b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <HAL_IncTick+0x1c>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_IncTick+0x20>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4413      	add	r3, r2
 80043c4:	4a03      	ldr	r2, [pc, #12]	; (80043d4 <HAL_IncTick+0x20>)
 80043c6:	6013      	str	r3, [r2, #0]
}
 80043c8:	bf00      	nop
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bc80      	pop	{r7}
 80043ce:	4770      	bx	lr
 80043d0:	20000028 	.word	0x20000028
 80043d4:	20000688 	.word	0x20000688

080043d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  return uwTick;
 80043dc:	4b02      	ldr	r3, [pc, #8]	; (80043e8 <HAL_GetTick+0x10>)
 80043de:	681b      	ldr	r3, [r3, #0]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr
 80043e8:	20000688 	.word	0x20000688

080043ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043f4:	f7ff fff0 	bl	80043d8 <HAL_GetTick>
 80043f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004404:	d005      	beq.n	8004412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004406:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <HAL_Delay+0x44>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004412:	bf00      	nop
 8004414:	f7ff ffe0 	bl	80043d8 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	429a      	cmp	r2, r3
 8004422:	d8f7      	bhi.n	8004414 <HAL_Delay+0x28>
  {
  }
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000028 	.word	0x20000028

08004434 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e0be      	b.n	80045d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff fc3a 	bl	8003cec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 faff 	bl	8004a7c <ADC_ConversionStop_Disable>
 800447e:	4603      	mov	r3, r0
 8004480:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	2b00      	cmp	r3, #0
 800448c:	f040 8099 	bne.w	80045c2 <HAL_ADC_Init+0x18e>
 8004490:	7dfb      	ldrb	r3, [r7, #23]
 8004492:	2b00      	cmp	r3, #0
 8004494:	f040 8095 	bne.w	80045c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80044a0:	f023 0302 	bic.w	r3, r3, #2
 80044a4:	f043 0202 	orr.w	r2, r3, #2
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80044b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	7b1b      	ldrb	r3, [r3, #12]
 80044ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80044bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044cc:	d003      	beq.n	80044d6 <HAL_ADC_Init+0xa2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d102      	bne.n	80044dc <HAL_ADC_Init+0xa8>
 80044d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044da:	e000      	b.n	80044de <HAL_ADC_Init+0xaa>
 80044dc:	2300      	movs	r3, #0
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	7d1b      	ldrb	r3, [r3, #20]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d119      	bne.n	8004520 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	7b1b      	ldrb	r3, [r3, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	035a      	lsls	r2, r3, #13
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	e00b      	b.n	8004520 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	f043 0220 	orr.w	r2, r3, #32
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	f043 0201 	orr.w	r2, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	430a      	orrs	r2, r1
 8004532:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	4b28      	ldr	r3, [pc, #160]	; (80045dc <HAL_ADC_Init+0x1a8>)
 800453c:	4013      	ands	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	430b      	orrs	r3, r1
 8004546:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004550:	d003      	beq.n	800455a <HAL_ADC_Init+0x126>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d104      	bne.n	8004564 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	3b01      	subs	r3, #1
 8004560:	051b      	lsls	r3, r3, #20
 8004562:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	430a      	orrs	r2, r1
 8004576:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	4b18      	ldr	r3, [pc, #96]	; (80045e0 <HAL_ADC_Init+0x1ac>)
 8004580:	4013      	ands	r3, r2
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	429a      	cmp	r2, r3
 8004586:	d10b      	bne.n	80045a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	f023 0303 	bic.w	r3, r3, #3
 8004596:	f043 0201 	orr.w	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800459e:	e018      	b.n	80045d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	f023 0312 	bic.w	r3, r3, #18
 80045a8:	f043 0210 	orr.w	r2, r3, #16
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	f043 0201 	orr.w	r2, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80045c0:	e007      	b.n	80045d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	f043 0210 	orr.w	r2, r3, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	ffe1f7fd 	.word	0xffe1f7fd
 80045e0:	ff1f0efe 	.word	0xff1f0efe

080045e4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a64      	ldr	r2, [pc, #400]	; (800478c <HAL_ADC_Start_DMA+0x1a8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d004      	beq.n	8004608 <HAL_ADC_Start_DMA+0x24>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a63      	ldr	r2, [pc, #396]	; (8004790 <HAL_ADC_Start_DMA+0x1ac>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d106      	bne.n	8004616 <HAL_ADC_Start_DMA+0x32>
 8004608:	4b60      	ldr	r3, [pc, #384]	; (800478c <HAL_ADC_Start_DMA+0x1a8>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004610:	2b00      	cmp	r3, #0
 8004612:	f040 80b3 	bne.w	800477c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_ADC_Start_DMA+0x40>
 8004620:	2302      	movs	r3, #2
 8004622:	e0ae      	b.n	8004782 <HAL_ADC_Start_DMA+0x19e>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f9cb 	bl	80049c8 <ADC_Enable>
 8004632:	4603      	mov	r3, r0
 8004634:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004636:	7dfb      	ldrb	r3, [r7, #23]
 8004638:	2b00      	cmp	r3, #0
 800463a:	f040 809a 	bne.w	8004772 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004642:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a4e      	ldr	r2, [pc, #312]	; (8004790 <HAL_ADC_Start_DMA+0x1ac>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d105      	bne.n	8004668 <HAL_ADC_Start_DMA+0x84>
 800465c:	4b4b      	ldr	r3, [pc, #300]	; (800478c <HAL_ADC_Start_DMA+0x1a8>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d115      	bne.n	8004694 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467e:	2b00      	cmp	r3, #0
 8004680:	d026      	beq.n	80046d0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800468a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004692:	e01d      	b.n	80046d0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a39      	ldr	r2, [pc, #228]	; (800478c <HAL_ADC_Start_DMA+0x1a8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d004      	beq.n	80046b4 <HAL_ADC_Start_DMA+0xd0>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a38      	ldr	r2, [pc, #224]	; (8004790 <HAL_ADC_Start_DMA+0x1ac>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d10d      	bne.n	80046d0 <HAL_ADC_Start_DMA+0xec>
 80046b4:	4b35      	ldr	r3, [pc, #212]	; (800478c <HAL_ADC_Start_DMA+0x1a8>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d006      	beq.n	80046ea <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	f023 0206 	bic.w	r2, r3, #6
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80046e8:	e002      	b.n	80046f0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	4a25      	ldr	r2, [pc, #148]	; (8004794 <HAL_ADC_Start_DMA+0x1b0>)
 80046fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	4a24      	ldr	r2, [pc, #144]	; (8004798 <HAL_ADC_Start_DMA+0x1b4>)
 8004706:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	4a23      	ldr	r2, [pc, #140]	; (800479c <HAL_ADC_Start_DMA+0x1b8>)
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0202 	mvn.w	r2, #2
 8004718:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004728:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a18      	ldr	r0, [r3, #32]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	334c      	adds	r3, #76	; 0x4c
 8004734:	4619      	mov	r1, r3
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f001 f9f5 	bl	8005b28 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004748:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800474c:	d108      	bne.n	8004760 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800475c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800475e:	e00f      	b.n	8004780 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800476e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004770:	e006      	b.n	8004780 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800477a:	e001      	b.n	8004780 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004780:	7dfb      	ldrb	r3, [r7, #23]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40012400 	.word	0x40012400
 8004790:	40012800 	.word	0x40012800
 8004794:	08004aff 	.word	0x08004aff
 8004798:	08004b7b 	.word	0x08004b7b
 800479c:	08004b97 	.word	0x08004b97

080047a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr
	...

080047d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x20>
 80047f4:	2302      	movs	r3, #2
 80047f6:	e0dc      	b.n	80049b2 <HAL_ADC_ConfigChannel+0x1da>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b06      	cmp	r3, #6
 8004806:	d81c      	bhi.n	8004842 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	3b05      	subs	r3, #5
 800481a:	221f      	movs	r2, #31
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	43db      	mvns	r3, r3
 8004822:	4019      	ands	r1, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	3b05      	subs	r3, #5
 8004834:	fa00 f203 	lsl.w	r2, r0, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	635a      	str	r2, [r3, #52]	; 0x34
 8004840:	e03c      	b.n	80048bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b0c      	cmp	r3, #12
 8004848:	d81c      	bhi.n	8004884 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	3b23      	subs	r3, #35	; 0x23
 800485c:	221f      	movs	r2, #31
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	43db      	mvns	r3, r3
 8004864:	4019      	ands	r1, r3
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	3b23      	subs	r3, #35	; 0x23
 8004876:	fa00 f203 	lsl.w	r2, r0, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	631a      	str	r2, [r3, #48]	; 0x30
 8004882:	e01b      	b.n	80048bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	3b41      	subs	r3, #65	; 0x41
 8004896:	221f      	movs	r2, #31
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	4019      	ands	r1, r3
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	6818      	ldr	r0, [r3, #0]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	3b41      	subs	r3, #65	; 0x41
 80048b0:	fa00 f203 	lsl.w	r2, r0, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b09      	cmp	r3, #9
 80048c2:	d91c      	bls.n	80048fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68d9      	ldr	r1, [r3, #12]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	4613      	mov	r3, r2
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	4413      	add	r3, r2
 80048d4:	3b1e      	subs	r3, #30
 80048d6:	2207      	movs	r2, #7
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	43db      	mvns	r3, r3
 80048de:	4019      	ands	r1, r3
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	6898      	ldr	r0, [r3, #8]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4613      	mov	r3, r2
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	4413      	add	r3, r2
 80048ee:	3b1e      	subs	r3, #30
 80048f0:	fa00 f203 	lsl.w	r2, r0, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	60da      	str	r2, [r3, #12]
 80048fc:	e019      	b.n	8004932 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6919      	ldr	r1, [r3, #16]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	4613      	mov	r3, r2
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	4413      	add	r3, r2
 800490e:	2207      	movs	r2, #7
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	4019      	ands	r1, r3
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	6898      	ldr	r0, [r3, #8]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	4613      	mov	r3, r2
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	4413      	add	r3, r2
 8004926:	fa00 f203 	lsl.w	r2, r0, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b10      	cmp	r3, #16
 8004938:	d003      	beq.n	8004942 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800493e:	2b11      	cmp	r3, #17
 8004940:	d132      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1d      	ldr	r2, [pc, #116]	; (80049bc <HAL_ADC_ConfigChannel+0x1e4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d125      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d126      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004968:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b10      	cmp	r3, #16
 8004970:	d11a      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004972:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a13      	ldr	r2, [pc, #76]	; (80049c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8004978:	fba2 2303 	umull	r2, r3, r2, r3
 800497c:	0c9a      	lsrs	r2, r3, #18
 800497e:	4613      	mov	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004988:	e002      	b.n	8004990 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	3b01      	subs	r3, #1
 800498e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f9      	bne.n	800498a <HAL_ADC_ConfigChannel+0x1b2>
 8004996:	e007      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499c:	f043 0220 	orr.w	r2, r3, #32
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr
 80049bc:	40012400 	.word	0x40012400
 80049c0:	20000020 	.word	0x20000020
 80049c4:	431bde83 	.word	0x431bde83

080049c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d040      	beq.n	8004a68 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0201 	orr.w	r2, r2, #1
 80049f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80049f6:	4b1f      	ldr	r3, [pc, #124]	; (8004a74 <ADC_Enable+0xac>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a1f      	ldr	r2, [pc, #124]	; (8004a78 <ADC_Enable+0xb0>)
 80049fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004a00:	0c9b      	lsrs	r3, r3, #18
 8004a02:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004a04:	e002      	b.n	8004a0c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f9      	bne.n	8004a06 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a12:	f7ff fce1 	bl	80043d8 <HAL_GetTick>
 8004a16:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004a18:	e01f      	b.n	8004a5a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a1a:	f7ff fcdd 	bl	80043d8 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d918      	bls.n	8004a5a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d011      	beq.n	8004a5a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	f043 0210 	orr.w	r2, r3, #16
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	f043 0201 	orr.w	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e007      	b.n	8004a6a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d1d8      	bne.n	8004a1a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20000020 	.word	0x20000020
 8004a78:	431bde83 	.word	0x431bde83

08004a7c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d12e      	bne.n	8004af4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0201 	bic.w	r2, r2, #1
 8004aa4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004aa6:	f7ff fc97 	bl	80043d8 <HAL_GetTick>
 8004aaa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004aac:	e01b      	b.n	8004ae6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004aae:	f7ff fc93 	bl	80043d8 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d914      	bls.n	8004ae6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d10d      	bne.n	8004ae6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	f043 0210 	orr.w	r2, r3, #16
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ada:	f043 0201 	orr.w	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e007      	b.n	8004af6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d0dc      	beq.n	8004aae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b084      	sub	sp, #16
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d127      	bne.n	8004b68 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004b2e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004b32:	d115      	bne.n	8004b60 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d111      	bne.n	8004b60 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d105      	bne.n	8004b60 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	f043 0201 	orr.w	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7ff fe1d 	bl	80047a0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004b66:	e004      	b.n	8004b72 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	4798      	blx	r3
}
 8004b72:	bf00      	nop
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f7ff fe12 	bl	80047b2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b8e:	bf00      	nop
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	f043 0204 	orr.w	r2, r3, #4
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7ff fe01 	bl	80047c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b084      	sub	sp, #16
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0ed      	b.n	8004db8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d102      	bne.n	8004bee <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff f8ff 	bl	8003dec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f042 0201 	orr.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bfe:	f7ff fbeb 	bl	80043d8 <HAL_GetTick>
 8004c02:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c04:	e012      	b.n	8004c2c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c06:	f7ff fbe7 	bl	80043d8 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b0a      	cmp	r3, #10
 8004c12:	d90b      	bls.n	8004c2c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2205      	movs	r2, #5
 8004c24:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0c5      	b.n	8004db8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0e5      	beq.n	8004c06 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0202 	bic.w	r2, r2, #2
 8004c48:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c4a:	f7ff fbc5 	bl	80043d8 <HAL_GetTick>
 8004c4e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004c50:	e012      	b.n	8004c78 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c52:	f7ff fbc1 	bl	80043d8 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b0a      	cmp	r3, #10
 8004c5e:	d90b      	bls.n	8004c78 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2205      	movs	r2, #5
 8004c70:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e09f      	b.n	8004db8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e5      	bne.n	8004c52 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	7e1b      	ldrb	r3, [r3, #24]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d108      	bne.n	8004ca0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	e007      	b.n	8004cb0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	7e5b      	ldrb	r3, [r3, #25]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d108      	bne.n	8004cca <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	e007      	b.n	8004cda <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	7e9b      	ldrb	r3, [r3, #26]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d108      	bne.n	8004cf4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0220 	orr.w	r2, r2, #32
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e007      	b.n	8004d04 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0220 	bic.w	r2, r2, #32
 8004d02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	7edb      	ldrb	r3, [r3, #27]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d108      	bne.n	8004d1e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0210 	bic.w	r2, r2, #16
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	e007      	b.n	8004d2e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0210 	orr.w	r2, r2, #16
 8004d2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	7f1b      	ldrb	r3, [r3, #28]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d108      	bne.n	8004d48 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0208 	orr.w	r2, r2, #8
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	e007      	b.n	8004d58 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0208 	bic.w	r2, r2, #8
 8004d56:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	7f5b      	ldrb	r3, [r3, #29]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d108      	bne.n	8004d72 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0204 	orr.w	r2, r2, #4
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	e007      	b.n	8004d82 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0204 	bic.w	r2, r2, #4
 8004d80:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	ea42 0103 	orr.w	r1, r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	1e5a      	subs	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dd6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004dd8:	7cfb      	ldrb	r3, [r7, #19]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d003      	beq.n	8004de6 <HAL_CAN_ConfigFilter+0x26>
 8004dde:	7cfb      	ldrb	r3, [r7, #19]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	f040 80aa 	bne.w	8004f3a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dec:	f043 0201 	orr.w	r2, r3, #1
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f003 031f 	and.w	r3, r3, #31
 8004dfe:	2201      	movs	r2, #1
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	401a      	ands	r2, r3
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d123      	bne.n	8004e68 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	401a      	ands	r2, r3
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004e42:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	3248      	adds	r2, #72	; 0x48
 8004e48:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e5c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e5e:	6979      	ldr	r1, [r7, #20]
 8004e60:	3348      	adds	r3, #72	; 0x48
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	440b      	add	r3, r1
 8004e66:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d122      	bne.n	8004eb6 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e90:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	3248      	adds	r2, #72	; 0x48
 8004e96:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004eaa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004eac:	6979      	ldr	r1, [r7, #20]
 8004eae:	3348      	adds	r3, #72	; 0x48
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	440b      	add	r3, r1
 8004eb4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d109      	bne.n	8004ed2 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	401a      	ands	r2, r3
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004ed0:	e007      	b.n	8004ee2 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d109      	bne.n	8004efe <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	401a      	ands	r2, r3
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004efc:	e007      	b.n	8004f0e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d107      	bne.n	8004f26 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f2c:	f023 0201 	bic.w	r2, r3, #1
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e006      	b.n	8004f48 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
  }
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr

08004f52 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d12e      	bne.n	8004fc4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2202      	movs	r2, #2
 8004f6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0201 	bic.w	r2, r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f7e:	f7ff fa2b 	bl	80043d8 <HAL_GetTick>
 8004f82:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f84:	e012      	b.n	8004fac <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f86:	f7ff fa27 	bl	80043d8 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b0a      	cmp	r3, #10
 8004f92:	d90b      	bls.n	8004fac <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2205      	movs	r2, #5
 8004fa4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e012      	b.n	8004fd2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e5      	bne.n	8004f86 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	e006      	b.n	8004fd2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
  }
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b089      	sub	sp, #36	; 0x24
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	607a      	str	r2, [r7, #4]
 8004fe6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fee:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004ff8:	7ffb      	ldrb	r3, [r7, #31]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d003      	beq.n	8005006 <HAL_CAN_AddTxMessage+0x2c>
 8004ffe:	7ffb      	ldrb	r3, [r7, #31]
 8005000:	2b02      	cmp	r3, #2
 8005002:	f040 80b8 	bne.w	8005176 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005016:	2b00      	cmp	r3, #0
 8005018:	d105      	bne.n	8005026 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80a0 	beq.w	8005166 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	0e1b      	lsrs	r3, r3, #24
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d907      	bls.n	8005046 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e09e      	b.n	8005184 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005046:	2201      	movs	r2, #1
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	409a      	lsls	r2, r3
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10d      	bne.n	8005074 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005062:	68f9      	ldr	r1, [r7, #12]
 8005064:	6809      	ldr	r1, [r1, #0]
 8005066:	431a      	orrs	r2, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	3318      	adds	r3, #24
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	440b      	add	r3, r1
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	e00f      	b.n	8005094 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800507e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005084:	68f9      	ldr	r1, [r7, #12]
 8005086:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005088:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	3318      	adds	r3, #24
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	440b      	add	r3, r1
 8005092:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6819      	ldr	r1, [r3, #0]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	3318      	adds	r3, #24
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	440b      	add	r3, r1
 80050a4:	3304      	adds	r3, #4
 80050a6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	7d1b      	ldrb	r3, [r3, #20]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d111      	bne.n	80050d4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	3318      	adds	r3, #24
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	4413      	add	r3, r2
 80050bc:	3304      	adds	r3, #4
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	6811      	ldr	r1, [r2, #0]
 80050c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	3318      	adds	r3, #24
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	440b      	add	r3, r1
 80050d0:	3304      	adds	r3, #4
 80050d2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3307      	adds	r3, #7
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	061a      	lsls	r2, r3, #24
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3306      	adds	r3, #6
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3305      	adds	r3, #5
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	4313      	orrs	r3, r2
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	3204      	adds	r2, #4
 80050f4:	7812      	ldrb	r2, [r2, #0]
 80050f6:	4610      	mov	r0, r2
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	6811      	ldr	r1, [r2, #0]
 80050fc:	ea43 0200 	orr.w	r2, r3, r0
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	440b      	add	r3, r1
 8005106:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800510a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3303      	adds	r3, #3
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	061a      	lsls	r2, r3, #24
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3302      	adds	r3, #2
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	041b      	lsls	r3, r3, #16
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3301      	adds	r3, #1
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	4313      	orrs	r3, r2
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	7812      	ldrb	r2, [r2, #0]
 800512c:	4610      	mov	r0, r2
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	6811      	ldr	r1, [r2, #0]
 8005132:	ea43 0200 	orr.w	r2, r3, r0
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	440b      	add	r3, r1
 800513c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005140:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	3318      	adds	r3, #24
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	4413      	add	r3, r2
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	6811      	ldr	r1, [r2, #0]
 8005154:	f043 0201 	orr.w	r2, r3, #1
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	3318      	adds	r3, #24
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	440b      	add	r3, r1
 8005160:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	e00e      	b.n	8005184 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e006      	b.n	8005184 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
  }
}
 8005184:	4618      	mov	r0, r3
 8005186:	3724      	adds	r7, #36	; 0x24
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800518e:	b480      	push	{r7}
 8005190:	b087      	sub	sp, #28
 8005192:	af00      	add	r7, sp, #0
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	607a      	str	r2, [r7, #4]
 800519a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051a2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d003      	beq.n	80051b2 <HAL_CAN_GetRxMessage+0x24>
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	f040 80f3 	bne.w	8005398 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10e      	bne.n	80051d6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d116      	bne.n	80051f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e0e7      	b.n	80053a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d107      	bne.n	80051f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e0d8      	b.n	80053a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	331b      	adds	r3, #27
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	4413      	add	r3, r2
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0204 	and.w	r2, r3, #4
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10c      	bne.n	800522c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	331b      	adds	r3, #27
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	4413      	add	r3, r2
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	0d5b      	lsrs	r3, r3, #21
 8005222:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	e00b      	b.n	8005244 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	331b      	adds	r3, #27
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	4413      	add	r3, r2
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	08db      	lsrs	r3, r3, #3
 800523c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	331b      	adds	r3, #27
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	4413      	add	r3, r2
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0202 	and.w	r2, r3, #2
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	331b      	adds	r3, #27
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	4413      	add	r3, r2
 8005266:	3304      	adds	r3, #4
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 020f 	and.w	r2, r3, #15
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	331b      	adds	r3, #27
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	4413      	add	r3, r2
 800527e:	3304      	adds	r3, #4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	0a1b      	lsrs	r3, r3, #8
 8005284:	b2da      	uxtb	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	331b      	adds	r3, #27
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	4413      	add	r3, r2
 8005296:	3304      	adds	r3, #4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	0c1b      	lsrs	r3, r3, #16
 800529c:	b29a      	uxth	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	0a1a      	lsrs	r2, r3, #8
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	3301      	adds	r3, #1
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	4413      	add	r3, r2
 80052dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	0c1a      	lsrs	r2, r3, #16
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	3302      	adds	r3, #2
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	0e1a      	lsrs	r2, r3, #24
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	3303      	adds	r3, #3
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	4413      	add	r3, r2
 8005310:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	3304      	adds	r3, #4
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	4413      	add	r3, r2
 8005328:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	0a1a      	lsrs	r2, r3, #8
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	3305      	adds	r3, #5
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	4413      	add	r3, r2
 8005342:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	0c1a      	lsrs	r2, r3, #16
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	3306      	adds	r3, #6
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	4413      	add	r3, r2
 800535c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	0e1a      	lsrs	r2, r3, #24
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	3307      	adds	r3, #7
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d108      	bne.n	8005384 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0220 	orr.w	r2, r2, #32
 8005380:	60da      	str	r2, [r3, #12]
 8005382:	e007      	b.n	8005394 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691a      	ldr	r2, [r3, #16]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0220 	orr.w	r2, r2, #32
 8005392:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	e006      	b.n	80053a6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
  }
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr

080053b0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053c0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d002      	beq.n	80053ce <HAL_CAN_ActivateNotification+0x1e>
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d109      	bne.n	80053e2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6959      	ldr	r1, [r3, #20]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	e006      	b.n	80053f0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
  }
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr

080053fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b08a      	sub	sp, #40	; 0x28
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005402:	2300      	movs	r3, #0
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d07c      	beq.n	800553a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d023      	beq.n	8005492 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2201      	movs	r2, #1
 8005450:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f983 	bl	8005768 <HAL_CAN_TxMailbox0CompleteCallback>
 8005462:	e016      	b.n	8005492 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d004      	beq.n	8005478 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
 8005476:	e00c      	b.n	8005492 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d004      	beq.n	800548c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
 800548a:	e002      	b.n	8005492 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f986 	bl	800579e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005498:	2b00      	cmp	r3, #0
 800549a:	d024      	beq.n	80054e6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f962 	bl	800577a <HAL_CAN_TxMailbox1CompleteCallback>
 80054b6:	e016      	b.n	80054e6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d004      	beq.n	80054cc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ca:	e00c      	b.n	80054e6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d004      	beq.n	80054e0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
 80054de:	e002      	b.n	80054e6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f965 	bl	80057b0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d024      	beq.n	800553a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f941 	bl	800578c <HAL_CAN_TxMailbox2CompleteCallback>
 800550a:	e016      	b.n	800553a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d004      	beq.n	8005520 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	e00c      	b.n	800553a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
 8005532:	e002      	b.n	800553a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f944 	bl	80057c2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00c      	beq.n	800555e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f003 0310 	and.w	r3, r3, #16
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005554:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2210      	movs	r2, #16
 800555c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00b      	beq.n	8005580 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d006      	beq.n	8005580 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2208      	movs	r2, #8
 8005578:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f92a 	bl	80057d4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d009      	beq.n	800559e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0303 	and.w	r3, r3, #3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7fb fe7b 	bl	8001294 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00c      	beq.n	80055c2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d007      	beq.n	80055c2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2210      	movs	r2, #16
 80055c0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00b      	beq.n	80055e4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d006      	beq.n	80055e4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2208      	movs	r2, #8
 80055dc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f90a 	bl	80057f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	f003 0310 	and.w	r3, r3, #16
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d009      	beq.n	8005602 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f8f2 	bl	80057e6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00b      	beq.n	8005624 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	f003 0310 	and.w	r3, r3, #16
 8005612:	2b00      	cmp	r3, #0
 8005614:	d006      	beq.n	8005624 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2210      	movs	r2, #16
 800561c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f8f3 	bl	800580a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00b      	beq.n	8005646 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d006      	beq.n	8005646 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2208      	movs	r2, #8
 800563e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f8eb 	bl	800581c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d07b      	beq.n	8005748 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	d072      	beq.n	8005740 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	d008      	beq.n	8005676 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	f043 0301 	orr.w	r3, r3, #1
 8005674:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	f043 0302 	orr.w	r3, r3, #2
 8005690:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005698:	2b00      	cmp	r3, #0
 800569a:	d008      	beq.n	80056ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	f043 0304 	orr.w	r3, r3, #4
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d043      	beq.n	8005740 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d03e      	beq.n	8005740 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056c8:	2b60      	cmp	r3, #96	; 0x60
 80056ca:	d02b      	beq.n	8005724 <HAL_CAN_IRQHandler+0x32a>
 80056cc:	2b60      	cmp	r3, #96	; 0x60
 80056ce:	d82e      	bhi.n	800572e <HAL_CAN_IRQHandler+0x334>
 80056d0:	2b50      	cmp	r3, #80	; 0x50
 80056d2:	d022      	beq.n	800571a <HAL_CAN_IRQHandler+0x320>
 80056d4:	2b50      	cmp	r3, #80	; 0x50
 80056d6:	d82a      	bhi.n	800572e <HAL_CAN_IRQHandler+0x334>
 80056d8:	2b40      	cmp	r3, #64	; 0x40
 80056da:	d019      	beq.n	8005710 <HAL_CAN_IRQHandler+0x316>
 80056dc:	2b40      	cmp	r3, #64	; 0x40
 80056de:	d826      	bhi.n	800572e <HAL_CAN_IRQHandler+0x334>
 80056e0:	2b30      	cmp	r3, #48	; 0x30
 80056e2:	d010      	beq.n	8005706 <HAL_CAN_IRQHandler+0x30c>
 80056e4:	2b30      	cmp	r3, #48	; 0x30
 80056e6:	d822      	bhi.n	800572e <HAL_CAN_IRQHandler+0x334>
 80056e8:	2b10      	cmp	r3, #16
 80056ea:	d002      	beq.n	80056f2 <HAL_CAN_IRQHandler+0x2f8>
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	d005      	beq.n	80056fc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80056f0:	e01d      	b.n	800572e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	f043 0308 	orr.w	r3, r3, #8
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056fa:	e019      	b.n	8005730 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	f043 0310 	orr.w	r3, r3, #16
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005704:	e014      	b.n	8005730 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	f043 0320 	orr.w	r3, r3, #32
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800570e:	e00f      	b.n	8005730 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005718:	e00a      	b.n	8005730 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005722:	e005      	b.n	8005730 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800572c:	e000      	b.n	8005730 <HAL_CAN_IRQHandler+0x336>
            break;
 800572e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699a      	ldr	r2, [r3, #24]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800573e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2204      	movs	r2, #4
 8005746:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	2b00      	cmp	r3, #0
 800574c:	d008      	beq.n	8005760 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f867 	bl	800582e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005760:	bf00      	nop
 8005762:	3728      	adds	r7, #40	; 0x28
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr

0800577a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr

0800578c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr

0800579e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bc80      	pop	{r7}
 80057ae:	4770      	bx	lr

080057b0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	bc80      	pop	{r7}
 80057c0:	4770      	bx	lr

080057c2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bc80      	pop	{r7}
 80057d2:	4770      	bx	lr

080057d4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	4770      	bx	lr

080057e6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr

080057f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr

0800580a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr

0800581c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	bc80      	pop	{r7}
 800582c:	4770      	bx	lr

0800582e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr

08005840 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr
	...

08005858 <__NVIC_SetPriorityGrouping>:
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005868:	4b0c      	ldr	r3, [pc, #48]	; (800589c <__NVIC_SetPriorityGrouping+0x44>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005874:	4013      	ands	r3, r2
 8005876:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800588a:	4a04      	ldr	r2, [pc, #16]	; (800589c <__NVIC_SetPriorityGrouping+0x44>)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	60d3      	str	r3, [r2, #12]
}
 8005890:	bf00      	nop
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	e000ed00 	.word	0xe000ed00

080058a0 <__NVIC_GetPriorityGrouping>:
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058a4:	4b04      	ldr	r3, [pc, #16]	; (80058b8 <__NVIC_GetPriorityGrouping+0x18>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	0a1b      	lsrs	r3, r3, #8
 80058aa:	f003 0307 	and.w	r3, r3, #7
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	e000ed00 	.word	0xe000ed00

080058bc <__NVIC_EnableIRQ>:
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	4603      	mov	r3, r0
 80058c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	db0b      	blt.n	80058e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	f003 021f 	and.w	r2, r3, #31
 80058d4:	4906      	ldr	r1, [pc, #24]	; (80058f0 <__NVIC_EnableIRQ+0x34>)
 80058d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058da:	095b      	lsrs	r3, r3, #5
 80058dc:	2001      	movs	r0, #1
 80058de:	fa00 f202 	lsl.w	r2, r0, r2
 80058e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr
 80058f0:	e000e100 	.word	0xe000e100

080058f4 <__NVIC_SetPriority>:
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	4603      	mov	r3, r0
 80058fc:	6039      	str	r1, [r7, #0]
 80058fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005904:	2b00      	cmp	r3, #0
 8005906:	db0a      	blt.n	800591e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	b2da      	uxtb	r2, r3
 800590c:	490c      	ldr	r1, [pc, #48]	; (8005940 <__NVIC_SetPriority+0x4c>)
 800590e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005912:	0112      	lsls	r2, r2, #4
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	440b      	add	r3, r1
 8005918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800591c:	e00a      	b.n	8005934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	b2da      	uxtb	r2, r3
 8005922:	4908      	ldr	r1, [pc, #32]	; (8005944 <__NVIC_SetPriority+0x50>)
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	3b04      	subs	r3, #4
 800592c:	0112      	lsls	r2, r2, #4
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	440b      	add	r3, r1
 8005932:	761a      	strb	r2, [r3, #24]
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	bc80      	pop	{r7}
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	e000e100 	.word	0xe000e100
 8005944:	e000ed00 	.word	0xe000ed00

08005948 <NVIC_EncodePriority>:
{
 8005948:	b480      	push	{r7}
 800594a:	b089      	sub	sp, #36	; 0x24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f1c3 0307 	rsb	r3, r3, #7
 8005962:	2b04      	cmp	r3, #4
 8005964:	bf28      	it	cs
 8005966:	2304      	movcs	r3, #4
 8005968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	3304      	adds	r3, #4
 800596e:	2b06      	cmp	r3, #6
 8005970:	d902      	bls.n	8005978 <NVIC_EncodePriority+0x30>
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	3b03      	subs	r3, #3
 8005976:	e000      	b.n	800597a <NVIC_EncodePriority+0x32>
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800597c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	43da      	mvns	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	401a      	ands	r2, r3
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005990:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	fa01 f303 	lsl.w	r3, r1, r3
 800599a:	43d9      	mvns	r1, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059a0:	4313      	orrs	r3, r2
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3724      	adds	r7, #36	; 0x24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr

080059ac <SysTick_Config>:
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059bc:	d301      	bcc.n	80059c2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80059be:	2301      	movs	r3, #1
 80059c0:	e00f      	b.n	80059e2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059c2:	4a0a      	ldr	r2, [pc, #40]	; (80059ec <SysTick_Config+0x40>)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059ca:	210f      	movs	r1, #15
 80059cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059d0:	f7ff ff90 	bl	80058f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059d4:	4b05      	ldr	r3, [pc, #20]	; (80059ec <SysTick_Config+0x40>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059da:	4b04      	ldr	r3, [pc, #16]	; (80059ec <SysTick_Config+0x40>)
 80059dc:	2207      	movs	r2, #7
 80059de:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	e000e010 	.word	0xe000e010

080059f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff ff2d 	bl	8005858 <__NVIC_SetPriorityGrouping>
}
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b086      	sub	sp, #24
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	607a      	str	r2, [r7, #4]
 8005a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a18:	f7ff ff42 	bl	80058a0 <__NVIC_GetPriorityGrouping>
 8005a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	6978      	ldr	r0, [r7, #20]
 8005a24:	f7ff ff90 	bl	8005948 <NVIC_EncodePriority>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a2e:	4611      	mov	r1, r2
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff ff5f 	bl	80058f4 <__NVIC_SetPriority>
}
 8005a36:	bf00      	nop
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	4603      	mov	r3, r0
 8005a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff ff35 	bl	80058bc <__NVIC_EnableIRQ>
}
 8005a52:	bf00      	nop
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b082      	sub	sp, #8
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7ff ffa2 	bl	80059ac <SysTick_Config>
 8005a68:	4603      	mov	r3, r0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e043      	b.n	8005b12 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	4b22      	ldr	r3, [pc, #136]	; (8005b1c <HAL_DMA_Init+0xa8>)
 8005a92:	4413      	add	r3, r2
 8005a94:	4a22      	ldr	r2, [pc, #136]	; (8005b20 <HAL_DMA_Init+0xac>)
 8005a96:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9a:	091b      	lsrs	r3, r3, #4
 8005a9c:	009a      	lsls	r2, r3, #2
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a1f      	ldr	r2, [pc, #124]	; (8005b24 <HAL_DMA_Init+0xb0>)
 8005aa6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005abe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005ac2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ae4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr
 8005b1c:	bffdfff8 	.word	0xbffdfff8
 8005b20:	cccccccd 	.word	0xcccccccd
 8005b24:	40020000 	.word	0x40020000

08005b28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_DMA_Start_IT+0x20>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e04a      	b.n	8005bde <HAL_DMA_Start_IT+0xb6>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d13a      	bne.n	8005bd0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0201 	bic.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 f938 	bl	8005df4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d008      	beq.n	8005b9e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 020e 	orr.w	r2, r2, #14
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	e00f      	b.n	8005bbe <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0204 	bic.w	r2, r2, #4
 8005bac:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 020a 	orr.w	r2, r2, #10
 8005bbc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0201 	orr.w	r2, r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	e005      	b.n	8005bdc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005bd8:	2302      	movs	r3, #2
 8005bda:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	2204      	movs	r2, #4
 8005c06:	409a      	lsls	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d04f      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0xc8>
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d04a      	beq.n	8005cb0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d107      	bne.n	8005c38 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0204 	bic.w	r2, r2, #4
 8005c36:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a66      	ldr	r2, [pc, #408]	; (8005dd8 <HAL_DMA_IRQHandler+0x1f0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d029      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xae>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a65      	ldr	r2, [pc, #404]	; (8005ddc <HAL_DMA_IRQHandler+0x1f4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d022      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xaa>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a63      	ldr	r2, [pc, #396]	; (8005de0 <HAL_DMA_IRQHandler+0x1f8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d01a      	beq.n	8005c8c <HAL_DMA_IRQHandler+0xa4>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a62      	ldr	r2, [pc, #392]	; (8005de4 <HAL_DMA_IRQHandler+0x1fc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d012      	beq.n	8005c86 <HAL_DMA_IRQHandler+0x9e>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a60      	ldr	r2, [pc, #384]	; (8005de8 <HAL_DMA_IRQHandler+0x200>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00a      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x98>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a5f      	ldr	r2, [pc, #380]	; (8005dec <HAL_DMA_IRQHandler+0x204>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d102      	bne.n	8005c7a <HAL_DMA_IRQHandler+0x92>
 8005c74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c78:	e00e      	b.n	8005c98 <HAL_DMA_IRQHandler+0xb0>
 8005c7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005c7e:	e00b      	b.n	8005c98 <HAL_DMA_IRQHandler+0xb0>
 8005c80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c84:	e008      	b.n	8005c98 <HAL_DMA_IRQHandler+0xb0>
 8005c86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c8a:	e005      	b.n	8005c98 <HAL_DMA_IRQHandler+0xb0>
 8005c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c90:	e002      	b.n	8005c98 <HAL_DMA_IRQHandler+0xb0>
 8005c92:	2340      	movs	r3, #64	; 0x40
 8005c94:	e000      	b.n	8005c98 <HAL_DMA_IRQHandler+0xb0>
 8005c96:	2304      	movs	r3, #4
 8005c98:	4a55      	ldr	r2, [pc, #340]	; (8005df0 <HAL_DMA_IRQHandler+0x208>)
 8005c9a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8094 	beq.w	8005dce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005cae:	e08e      	b.n	8005dce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	409a      	lsls	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d056      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x186>
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d051      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10b      	bne.n	8005cf0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 020a 	bic.w	r2, r2, #10
 8005ce6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a38      	ldr	r2, [pc, #224]	; (8005dd8 <HAL_DMA_IRQHandler+0x1f0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d029      	beq.n	8005d4e <HAL_DMA_IRQHandler+0x166>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a37      	ldr	r2, [pc, #220]	; (8005ddc <HAL_DMA_IRQHandler+0x1f4>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d022      	beq.n	8005d4a <HAL_DMA_IRQHandler+0x162>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a35      	ldr	r2, [pc, #212]	; (8005de0 <HAL_DMA_IRQHandler+0x1f8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01a      	beq.n	8005d44 <HAL_DMA_IRQHandler+0x15c>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a34      	ldr	r2, [pc, #208]	; (8005de4 <HAL_DMA_IRQHandler+0x1fc>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d012      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x156>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a32      	ldr	r2, [pc, #200]	; (8005de8 <HAL_DMA_IRQHandler+0x200>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00a      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x150>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a31      	ldr	r2, [pc, #196]	; (8005dec <HAL_DMA_IRQHandler+0x204>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d102      	bne.n	8005d32 <HAL_DMA_IRQHandler+0x14a>
 8005d2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d30:	e00e      	b.n	8005d50 <HAL_DMA_IRQHandler+0x168>
 8005d32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d36:	e00b      	b.n	8005d50 <HAL_DMA_IRQHandler+0x168>
 8005d38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d3c:	e008      	b.n	8005d50 <HAL_DMA_IRQHandler+0x168>
 8005d3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d42:	e005      	b.n	8005d50 <HAL_DMA_IRQHandler+0x168>
 8005d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d48:	e002      	b.n	8005d50 <HAL_DMA_IRQHandler+0x168>
 8005d4a:	2320      	movs	r3, #32
 8005d4c:	e000      	b.n	8005d50 <HAL_DMA_IRQHandler+0x168>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	4a27      	ldr	r2, [pc, #156]	; (8005df0 <HAL_DMA_IRQHandler+0x208>)
 8005d52:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d034      	beq.n	8005dce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005d6c:	e02f      	b.n	8005dce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	2208      	movs	r2, #8
 8005d74:	409a      	lsls	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d028      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x1e8>
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f003 0308 	and.w	r3, r3, #8
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d023      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 020e 	bic.w	r2, r2, #14
 8005d96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da0:	2101      	movs	r1, #1
 8005da2:	fa01 f202 	lsl.w	r2, r1, r2
 8005da6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d004      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	4798      	blx	r3
    }
  }
  return;
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
}
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	40020008 	.word	0x40020008
 8005ddc:	4002001c 	.word	0x4002001c
 8005de0:	40020030 	.word	0x40020030
 8005de4:	40020044 	.word	0x40020044
 8005de8:	40020058 	.word	0x40020058
 8005dec:	4002006c 	.word	0x4002006c
 8005df0:	40020000 	.word	0x40020000

08005df4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b10      	cmp	r3, #16
 8005e20:	d108      	bne.n	8005e34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005e32:	e007      	b.n	8005e44 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	60da      	str	r2, [r3, #12]
}
 8005e44:	bf00      	nop
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr
	...

08005e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b08b      	sub	sp, #44	; 0x2c
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e62:	e169      	b.n	8006138 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005e64:	2201      	movs	r2, #1
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	4013      	ands	r3, r2
 8005e76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	f040 8158 	bne.w	8006132 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	4a9a      	ldr	r2, [pc, #616]	; (80060f0 <HAL_GPIO_Init+0x2a0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d05e      	beq.n	8005f4a <HAL_GPIO_Init+0xfa>
 8005e8c:	4a98      	ldr	r2, [pc, #608]	; (80060f0 <HAL_GPIO_Init+0x2a0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d875      	bhi.n	8005f7e <HAL_GPIO_Init+0x12e>
 8005e92:	4a98      	ldr	r2, [pc, #608]	; (80060f4 <HAL_GPIO_Init+0x2a4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d058      	beq.n	8005f4a <HAL_GPIO_Init+0xfa>
 8005e98:	4a96      	ldr	r2, [pc, #600]	; (80060f4 <HAL_GPIO_Init+0x2a4>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d86f      	bhi.n	8005f7e <HAL_GPIO_Init+0x12e>
 8005e9e:	4a96      	ldr	r2, [pc, #600]	; (80060f8 <HAL_GPIO_Init+0x2a8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d052      	beq.n	8005f4a <HAL_GPIO_Init+0xfa>
 8005ea4:	4a94      	ldr	r2, [pc, #592]	; (80060f8 <HAL_GPIO_Init+0x2a8>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d869      	bhi.n	8005f7e <HAL_GPIO_Init+0x12e>
 8005eaa:	4a94      	ldr	r2, [pc, #592]	; (80060fc <HAL_GPIO_Init+0x2ac>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d04c      	beq.n	8005f4a <HAL_GPIO_Init+0xfa>
 8005eb0:	4a92      	ldr	r2, [pc, #584]	; (80060fc <HAL_GPIO_Init+0x2ac>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d863      	bhi.n	8005f7e <HAL_GPIO_Init+0x12e>
 8005eb6:	4a92      	ldr	r2, [pc, #584]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d046      	beq.n	8005f4a <HAL_GPIO_Init+0xfa>
 8005ebc:	4a90      	ldr	r2, [pc, #576]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d85d      	bhi.n	8005f7e <HAL_GPIO_Init+0x12e>
 8005ec2:	2b12      	cmp	r3, #18
 8005ec4:	d82a      	bhi.n	8005f1c <HAL_GPIO_Init+0xcc>
 8005ec6:	2b12      	cmp	r3, #18
 8005ec8:	d859      	bhi.n	8005f7e <HAL_GPIO_Init+0x12e>
 8005eca:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <HAL_GPIO_Init+0x80>)
 8005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed0:	08005f4b 	.word	0x08005f4b
 8005ed4:	08005f25 	.word	0x08005f25
 8005ed8:	08005f37 	.word	0x08005f37
 8005edc:	08005f79 	.word	0x08005f79
 8005ee0:	08005f7f 	.word	0x08005f7f
 8005ee4:	08005f7f 	.word	0x08005f7f
 8005ee8:	08005f7f 	.word	0x08005f7f
 8005eec:	08005f7f 	.word	0x08005f7f
 8005ef0:	08005f7f 	.word	0x08005f7f
 8005ef4:	08005f7f 	.word	0x08005f7f
 8005ef8:	08005f7f 	.word	0x08005f7f
 8005efc:	08005f7f 	.word	0x08005f7f
 8005f00:	08005f7f 	.word	0x08005f7f
 8005f04:	08005f7f 	.word	0x08005f7f
 8005f08:	08005f7f 	.word	0x08005f7f
 8005f0c:	08005f7f 	.word	0x08005f7f
 8005f10:	08005f7f 	.word	0x08005f7f
 8005f14:	08005f2d 	.word	0x08005f2d
 8005f18:	08005f41 	.word	0x08005f41
 8005f1c:	4a79      	ldr	r2, [pc, #484]	; (8006104 <HAL_GPIO_Init+0x2b4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d013      	beq.n	8005f4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005f22:	e02c      	b.n	8005f7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	623b      	str	r3, [r7, #32]
          break;
 8005f2a:	e029      	b.n	8005f80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	3304      	adds	r3, #4
 8005f32:	623b      	str	r3, [r7, #32]
          break;
 8005f34:	e024      	b.n	8005f80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	3308      	adds	r3, #8
 8005f3c:	623b      	str	r3, [r7, #32]
          break;
 8005f3e:	e01f      	b.n	8005f80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	330c      	adds	r3, #12
 8005f46:	623b      	str	r3, [r7, #32]
          break;
 8005f48:	e01a      	b.n	8005f80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005f52:	2304      	movs	r3, #4
 8005f54:	623b      	str	r3, [r7, #32]
          break;
 8005f56:	e013      	b.n	8005f80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d105      	bne.n	8005f6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f60:	2308      	movs	r3, #8
 8005f62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	611a      	str	r2, [r3, #16]
          break;
 8005f6a:	e009      	b.n	8005f80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f6c:	2308      	movs	r3, #8
 8005f6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	615a      	str	r2, [r3, #20]
          break;
 8005f76:	e003      	b.n	8005f80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	623b      	str	r3, [r7, #32]
          break;
 8005f7c:	e000      	b.n	8005f80 <HAL_GPIO_Init+0x130>
          break;
 8005f7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2bff      	cmp	r3, #255	; 0xff
 8005f84:	d801      	bhi.n	8005f8a <HAL_GPIO_Init+0x13a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	e001      	b.n	8005f8e <HAL_GPIO_Init+0x13e>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	2bff      	cmp	r3, #255	; 0xff
 8005f94:	d802      	bhi.n	8005f9c <HAL_GPIO_Init+0x14c>
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	e002      	b.n	8005fa2 <HAL_GPIO_Init+0x152>
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	3b08      	subs	r3, #8
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	210f      	movs	r1, #15
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	401a      	ands	r2, r3
 8005fb4:	6a39      	ldr	r1, [r7, #32]
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 80b1 	beq.w	8006132 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005fd0:	4b4d      	ldr	r3, [pc, #308]	; (8006108 <HAL_GPIO_Init+0x2b8>)
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	4a4c      	ldr	r2, [pc, #304]	; (8006108 <HAL_GPIO_Init+0x2b8>)
 8005fd6:	f043 0301 	orr.w	r3, r3, #1
 8005fda:	6193      	str	r3, [r2, #24]
 8005fdc:	4b4a      	ldr	r3, [pc, #296]	; (8006108 <HAL_GPIO_Init+0x2b8>)
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	60bb      	str	r3, [r7, #8]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005fe8:	4a48      	ldr	r2, [pc, #288]	; (800610c <HAL_GPIO_Init+0x2bc>)
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	089b      	lsrs	r3, r3, #2
 8005fee:	3302      	adds	r3, #2
 8005ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	220f      	movs	r2, #15
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	43db      	mvns	r3, r3
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4013      	ands	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a40      	ldr	r2, [pc, #256]	; (8006110 <HAL_GPIO_Init+0x2c0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d013      	beq.n	800603c <HAL_GPIO_Init+0x1ec>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a3f      	ldr	r2, [pc, #252]	; (8006114 <HAL_GPIO_Init+0x2c4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00d      	beq.n	8006038 <HAL_GPIO_Init+0x1e8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a3e      	ldr	r2, [pc, #248]	; (8006118 <HAL_GPIO_Init+0x2c8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d007      	beq.n	8006034 <HAL_GPIO_Init+0x1e4>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a3d      	ldr	r2, [pc, #244]	; (800611c <HAL_GPIO_Init+0x2cc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d101      	bne.n	8006030 <HAL_GPIO_Init+0x1e0>
 800602c:	2303      	movs	r3, #3
 800602e:	e006      	b.n	800603e <HAL_GPIO_Init+0x1ee>
 8006030:	2304      	movs	r3, #4
 8006032:	e004      	b.n	800603e <HAL_GPIO_Init+0x1ee>
 8006034:	2302      	movs	r3, #2
 8006036:	e002      	b.n	800603e <HAL_GPIO_Init+0x1ee>
 8006038:	2301      	movs	r3, #1
 800603a:	e000      	b.n	800603e <HAL_GPIO_Init+0x1ee>
 800603c:	2300      	movs	r3, #0
 800603e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006040:	f002 0203 	and.w	r2, r2, #3
 8006044:	0092      	lsls	r2, r2, #2
 8006046:	4093      	lsls	r3, r2
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800604e:	492f      	ldr	r1, [pc, #188]	; (800610c <HAL_GPIO_Init+0x2bc>)
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	089b      	lsrs	r3, r3, #2
 8006054:	3302      	adds	r3, #2
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d006      	beq.n	8006076 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006068:	4b2d      	ldr	r3, [pc, #180]	; (8006120 <HAL_GPIO_Init+0x2d0>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	492c      	ldr	r1, [pc, #176]	; (8006120 <HAL_GPIO_Init+0x2d0>)
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	4313      	orrs	r3, r2
 8006072:	600b      	str	r3, [r1, #0]
 8006074:	e006      	b.n	8006084 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006076:	4b2a      	ldr	r3, [pc, #168]	; (8006120 <HAL_GPIO_Init+0x2d0>)
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	43db      	mvns	r3, r3
 800607e:	4928      	ldr	r1, [pc, #160]	; (8006120 <HAL_GPIO_Init+0x2d0>)
 8006080:	4013      	ands	r3, r2
 8006082:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d006      	beq.n	800609e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006090:	4b23      	ldr	r3, [pc, #140]	; (8006120 <HAL_GPIO_Init+0x2d0>)
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	4922      	ldr	r1, [pc, #136]	; (8006120 <HAL_GPIO_Init+0x2d0>)
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	4313      	orrs	r3, r2
 800609a:	604b      	str	r3, [r1, #4]
 800609c:	e006      	b.n	80060ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800609e:	4b20      	ldr	r3, [pc, #128]	; (8006120 <HAL_GPIO_Init+0x2d0>)
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	43db      	mvns	r3, r3
 80060a6:	491e      	ldr	r1, [pc, #120]	; (8006120 <HAL_GPIO_Init+0x2d0>)
 80060a8:	4013      	ands	r3, r2
 80060aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d006      	beq.n	80060c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80060b8:	4b19      	ldr	r3, [pc, #100]	; (8006120 <HAL_GPIO_Init+0x2d0>)
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	4918      	ldr	r1, [pc, #96]	; (8006120 <HAL_GPIO_Init+0x2d0>)
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	608b      	str	r3, [r1, #8]
 80060c4:	e006      	b.n	80060d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80060c6:	4b16      	ldr	r3, [pc, #88]	; (8006120 <HAL_GPIO_Init+0x2d0>)
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	43db      	mvns	r3, r3
 80060ce:	4914      	ldr	r1, [pc, #80]	; (8006120 <HAL_GPIO_Init+0x2d0>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d021      	beq.n	8006124 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80060e0:	4b0f      	ldr	r3, [pc, #60]	; (8006120 <HAL_GPIO_Init+0x2d0>)
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	490e      	ldr	r1, [pc, #56]	; (8006120 <HAL_GPIO_Init+0x2d0>)
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60cb      	str	r3, [r1, #12]
 80060ec:	e021      	b.n	8006132 <HAL_GPIO_Init+0x2e2>
 80060ee:	bf00      	nop
 80060f0:	10320000 	.word	0x10320000
 80060f4:	10310000 	.word	0x10310000
 80060f8:	10220000 	.word	0x10220000
 80060fc:	10210000 	.word	0x10210000
 8006100:	10120000 	.word	0x10120000
 8006104:	10110000 	.word	0x10110000
 8006108:	40021000 	.word	0x40021000
 800610c:	40010000 	.word	0x40010000
 8006110:	40010800 	.word	0x40010800
 8006114:	40010c00 	.word	0x40010c00
 8006118:	40011000 	.word	0x40011000
 800611c:	40011400 	.word	0x40011400
 8006120:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006124:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <HAL_GPIO_Init+0x304>)
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	43db      	mvns	r3, r3
 800612c:	4909      	ldr	r1, [pc, #36]	; (8006154 <HAL_GPIO_Init+0x304>)
 800612e:	4013      	ands	r3, r2
 8006130:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	3301      	adds	r3, #1
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	fa22 f303 	lsr.w	r3, r2, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	f47f ae8e 	bne.w	8005e64 <HAL_GPIO_Init+0x14>
  }
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	372c      	adds	r7, #44	; 0x2c
 800614e:	46bd      	mov	sp, r7
 8006150:	bc80      	pop	{r7}
 8006152:	4770      	bx	lr
 8006154:	40010400 	.word	0x40010400

08006158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	807b      	strh	r3, [r7, #2]
 8006164:	4613      	mov	r3, r2
 8006166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006168:	787b      	ldrb	r3, [r7, #1]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800616e:	887a      	ldrh	r2, [r7, #2]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006174:	e003      	b.n	800617e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006176:	887b      	ldrh	r3, [r7, #2]
 8006178:	041a      	lsls	r2, r3, #16
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	611a      	str	r2, [r3, #16]
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	bc80      	pop	{r7}
 8006186:	4770      	bx	lr

08006188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e26c      	b.n	8006674 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 8087 	beq.w	80062b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061a8:	4b92      	ldr	r3, [pc, #584]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f003 030c 	and.w	r3, r3, #12
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d00c      	beq.n	80061ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061b4:	4b8f      	ldr	r3, [pc, #572]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f003 030c 	and.w	r3, r3, #12
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d112      	bne.n	80061e6 <HAL_RCC_OscConfig+0x5e>
 80061c0:	4b8c      	ldr	r3, [pc, #560]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061cc:	d10b      	bne.n	80061e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ce:	4b89      	ldr	r3, [pc, #548]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d06c      	beq.n	80062b4 <HAL_RCC_OscConfig+0x12c>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d168      	bne.n	80062b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e246      	b.n	8006674 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ee:	d106      	bne.n	80061fe <HAL_RCC_OscConfig+0x76>
 80061f0:	4b80      	ldr	r3, [pc, #512]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a7f      	ldr	r2, [pc, #508]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 80061f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	e02e      	b.n	800625c <HAL_RCC_OscConfig+0xd4>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10c      	bne.n	8006220 <HAL_RCC_OscConfig+0x98>
 8006206:	4b7b      	ldr	r3, [pc, #492]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a7a      	ldr	r2, [pc, #488]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 800620c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	4b78      	ldr	r3, [pc, #480]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a77      	ldr	r2, [pc, #476]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 8006218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	e01d      	b.n	800625c <HAL_RCC_OscConfig+0xd4>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006228:	d10c      	bne.n	8006244 <HAL_RCC_OscConfig+0xbc>
 800622a:	4b72      	ldr	r3, [pc, #456]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a71      	ldr	r2, [pc, #452]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 8006230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	4b6f      	ldr	r3, [pc, #444]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a6e      	ldr	r2, [pc, #440]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 800623c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	e00b      	b.n	800625c <HAL_RCC_OscConfig+0xd4>
 8006244:	4b6b      	ldr	r3, [pc, #428]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a6a      	ldr	r2, [pc, #424]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 800624a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	4b68      	ldr	r3, [pc, #416]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a67      	ldr	r2, [pc, #412]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 8006256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800625a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d013      	beq.n	800628c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006264:	f7fe f8b8 	bl	80043d8 <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800626c:	f7fe f8b4 	bl	80043d8 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b64      	cmp	r3, #100	; 0x64
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e1fa      	b.n	8006674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627e:	4b5d      	ldr	r3, [pc, #372]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f0      	beq.n	800626c <HAL_RCC_OscConfig+0xe4>
 800628a:	e014      	b.n	80062b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628c:	f7fe f8a4 	bl	80043d8 <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006294:	f7fe f8a0 	bl	80043d8 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b64      	cmp	r3, #100	; 0x64
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e1e6      	b.n	8006674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062a6:	4b53      	ldr	r3, [pc, #332]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f0      	bne.n	8006294 <HAL_RCC_OscConfig+0x10c>
 80062b2:	e000      	b.n	80062b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d063      	beq.n	800638a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062c2:	4b4c      	ldr	r3, [pc, #304]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f003 030c 	and.w	r3, r3, #12
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00b      	beq.n	80062e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80062ce:	4b49      	ldr	r3, [pc, #292]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f003 030c 	and.w	r3, r3, #12
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	d11c      	bne.n	8006314 <HAL_RCC_OscConfig+0x18c>
 80062da:	4b46      	ldr	r3, [pc, #280]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d116      	bne.n	8006314 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062e6:	4b43      	ldr	r3, [pc, #268]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d005      	beq.n	80062fe <HAL_RCC_OscConfig+0x176>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d001      	beq.n	80062fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e1ba      	b.n	8006674 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062fe:	4b3d      	ldr	r3, [pc, #244]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	4939      	ldr	r1, [pc, #228]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 800630e:	4313      	orrs	r3, r2
 8006310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006312:	e03a      	b.n	800638a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d020      	beq.n	800635e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800631c:	4b36      	ldr	r3, [pc, #216]	; (80063f8 <HAL_RCC_OscConfig+0x270>)
 800631e:	2201      	movs	r2, #1
 8006320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006322:	f7fe f859 	bl	80043d8 <HAL_GetTick>
 8006326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800632a:	f7fe f855 	bl	80043d8 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e19b      	b.n	8006674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800633c:	4b2d      	ldr	r3, [pc, #180]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0f0      	beq.n	800632a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006348:	4b2a      	ldr	r3, [pc, #168]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	4927      	ldr	r1, [pc, #156]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 8006358:	4313      	orrs	r3, r2
 800635a:	600b      	str	r3, [r1, #0]
 800635c:	e015      	b.n	800638a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800635e:	4b26      	ldr	r3, [pc, #152]	; (80063f8 <HAL_RCC_OscConfig+0x270>)
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006364:	f7fe f838 	bl	80043d8 <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800636c:	f7fe f834 	bl	80043d8 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e17a      	b.n	8006674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800637e:	4b1d      	ldr	r3, [pc, #116]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f0      	bne.n	800636c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d03a      	beq.n	800640c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d019      	beq.n	80063d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800639e:	4b17      	ldr	r3, [pc, #92]	; (80063fc <HAL_RCC_OscConfig+0x274>)
 80063a0:	2201      	movs	r2, #1
 80063a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063a4:	f7fe f818 	bl	80043d8 <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ac:	f7fe f814 	bl	80043d8 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e15a      	b.n	8006674 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063be:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <HAL_RCC_OscConfig+0x26c>)
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0f0      	beq.n	80063ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80063ca:	2001      	movs	r0, #1
 80063cc:	f000 fad8 	bl	8006980 <RCC_Delay>
 80063d0:	e01c      	b.n	800640c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063d2:	4b0a      	ldr	r3, [pc, #40]	; (80063fc <HAL_RCC_OscConfig+0x274>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063d8:	f7fd fffe 	bl	80043d8 <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063de:	e00f      	b.n	8006400 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063e0:	f7fd fffa 	bl	80043d8 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d908      	bls.n	8006400 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e140      	b.n	8006674 <HAL_RCC_OscConfig+0x4ec>
 80063f2:	bf00      	nop
 80063f4:	40021000 	.word	0x40021000
 80063f8:	42420000 	.word	0x42420000
 80063fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006400:	4b9e      	ldr	r3, [pc, #632]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	f003 0302 	and.w	r3, r3, #2
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e9      	bne.n	80063e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 80a6 	beq.w	8006566 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800641a:	2300      	movs	r3, #0
 800641c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800641e:	4b97      	ldr	r3, [pc, #604]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10d      	bne.n	8006446 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800642a:	4b94      	ldr	r3, [pc, #592]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	4a93      	ldr	r2, [pc, #588]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 8006430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006434:	61d3      	str	r3, [r2, #28]
 8006436:	4b91      	ldr	r3, [pc, #580]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800643e:	60bb      	str	r3, [r7, #8]
 8006440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006442:	2301      	movs	r3, #1
 8006444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006446:	4b8e      	ldr	r3, [pc, #568]	; (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644e:	2b00      	cmp	r3, #0
 8006450:	d118      	bne.n	8006484 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006452:	4b8b      	ldr	r3, [pc, #556]	; (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a8a      	ldr	r2, [pc, #552]	; (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800645c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800645e:	f7fd ffbb 	bl	80043d8 <HAL_GetTick>
 8006462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006466:	f7fd ffb7 	bl	80043d8 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b64      	cmp	r3, #100	; 0x64
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e0fd      	b.n	8006674 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006478:	4b81      	ldr	r3, [pc, #516]	; (8006680 <HAL_RCC_OscConfig+0x4f8>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0f0      	beq.n	8006466 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d106      	bne.n	800649a <HAL_RCC_OscConfig+0x312>
 800648c:	4b7b      	ldr	r3, [pc, #492]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	4a7a      	ldr	r2, [pc, #488]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 8006492:	f043 0301 	orr.w	r3, r3, #1
 8006496:	6213      	str	r3, [r2, #32]
 8006498:	e02d      	b.n	80064f6 <HAL_RCC_OscConfig+0x36e>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10c      	bne.n	80064bc <HAL_RCC_OscConfig+0x334>
 80064a2:	4b76      	ldr	r3, [pc, #472]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	4a75      	ldr	r2, [pc, #468]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 80064a8:	f023 0301 	bic.w	r3, r3, #1
 80064ac:	6213      	str	r3, [r2, #32]
 80064ae:	4b73      	ldr	r3, [pc, #460]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	4a72      	ldr	r2, [pc, #456]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 80064b4:	f023 0304 	bic.w	r3, r3, #4
 80064b8:	6213      	str	r3, [r2, #32]
 80064ba:	e01c      	b.n	80064f6 <HAL_RCC_OscConfig+0x36e>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	2b05      	cmp	r3, #5
 80064c2:	d10c      	bne.n	80064de <HAL_RCC_OscConfig+0x356>
 80064c4:	4b6d      	ldr	r3, [pc, #436]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	4a6c      	ldr	r2, [pc, #432]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 80064ca:	f043 0304 	orr.w	r3, r3, #4
 80064ce:	6213      	str	r3, [r2, #32]
 80064d0:	4b6a      	ldr	r3, [pc, #424]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	4a69      	ldr	r2, [pc, #420]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 80064d6:	f043 0301 	orr.w	r3, r3, #1
 80064da:	6213      	str	r3, [r2, #32]
 80064dc:	e00b      	b.n	80064f6 <HAL_RCC_OscConfig+0x36e>
 80064de:	4b67      	ldr	r3, [pc, #412]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	4a66      	ldr	r2, [pc, #408]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 80064e4:	f023 0301 	bic.w	r3, r3, #1
 80064e8:	6213      	str	r3, [r2, #32]
 80064ea:	4b64      	ldr	r3, [pc, #400]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	4a63      	ldr	r2, [pc, #396]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 80064f0:	f023 0304 	bic.w	r3, r3, #4
 80064f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d015      	beq.n	800652a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064fe:	f7fd ff6b 	bl	80043d8 <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006504:	e00a      	b.n	800651c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006506:	f7fd ff67 	bl	80043d8 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	f241 3288 	movw	r2, #5000	; 0x1388
 8006514:	4293      	cmp	r3, r2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e0ab      	b.n	8006674 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800651c:	4b57      	ldr	r3, [pc, #348]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0ee      	beq.n	8006506 <HAL_RCC_OscConfig+0x37e>
 8006528:	e014      	b.n	8006554 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800652a:	f7fd ff55 	bl	80043d8 <HAL_GetTick>
 800652e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006530:	e00a      	b.n	8006548 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006532:	f7fd ff51 	bl	80043d8 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006540:	4293      	cmp	r3, r2
 8006542:	d901      	bls.n	8006548 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e095      	b.n	8006674 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006548:	4b4c      	ldr	r3, [pc, #304]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1ee      	bne.n	8006532 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006554:	7dfb      	ldrb	r3, [r7, #23]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d105      	bne.n	8006566 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800655a:	4b48      	ldr	r3, [pc, #288]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	4a47      	ldr	r2, [pc, #284]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 8006560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006564:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 8081 	beq.w	8006672 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006570:	4b42      	ldr	r3, [pc, #264]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f003 030c 	and.w	r3, r3, #12
 8006578:	2b08      	cmp	r3, #8
 800657a:	d061      	beq.n	8006640 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	2b02      	cmp	r3, #2
 8006582:	d146      	bne.n	8006612 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006584:	4b3f      	ldr	r3, [pc, #252]	; (8006684 <HAL_RCC_OscConfig+0x4fc>)
 8006586:	2200      	movs	r2, #0
 8006588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800658a:	f7fd ff25 	bl	80043d8 <HAL_GetTick>
 800658e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006590:	e008      	b.n	80065a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006592:	f7fd ff21 	bl	80043d8 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e067      	b.n	8006674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065a4:	4b35      	ldr	r3, [pc, #212]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1f0      	bne.n	8006592 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065b8:	d108      	bne.n	80065cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80065ba:	4b30      	ldr	r3, [pc, #192]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	492d      	ldr	r1, [pc, #180]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065cc:	4b2b      	ldr	r3, [pc, #172]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a19      	ldr	r1, [r3, #32]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	430b      	orrs	r3, r1
 80065de:	4927      	ldr	r1, [pc, #156]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065e4:	4b27      	ldr	r3, [pc, #156]	; (8006684 <HAL_RCC_OscConfig+0x4fc>)
 80065e6:	2201      	movs	r2, #1
 80065e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ea:	f7fd fef5 	bl	80043d8 <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065f0:	e008      	b.n	8006604 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065f2:	f7fd fef1 	bl	80043d8 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e037      	b.n	8006674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006604:	4b1d      	ldr	r3, [pc, #116]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0f0      	beq.n	80065f2 <HAL_RCC_OscConfig+0x46a>
 8006610:	e02f      	b.n	8006672 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006612:	4b1c      	ldr	r3, [pc, #112]	; (8006684 <HAL_RCC_OscConfig+0x4fc>)
 8006614:	2200      	movs	r2, #0
 8006616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006618:	f7fd fede 	bl	80043d8 <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006620:	f7fd feda 	bl	80043d8 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e020      	b.n	8006674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006632:	4b12      	ldr	r3, [pc, #72]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1f0      	bne.n	8006620 <HAL_RCC_OscConfig+0x498>
 800663e:	e018      	b.n	8006672 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e013      	b.n	8006674 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800664c:	4b0b      	ldr	r3, [pc, #44]	; (800667c <HAL_RCC_OscConfig+0x4f4>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	429a      	cmp	r2, r3
 800665e:	d106      	bne.n	800666e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800666a:	429a      	cmp	r2, r3
 800666c:	d001      	beq.n	8006672 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e000      	b.n	8006674 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	40021000 	.word	0x40021000
 8006680:	40007000 	.word	0x40007000
 8006684:	42420060 	.word	0x42420060

08006688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e0d0      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800669c:	4b6a      	ldr	r3, [pc, #424]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d910      	bls.n	80066cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066aa:	4b67      	ldr	r3, [pc, #412]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f023 0207 	bic.w	r2, r3, #7
 80066b2:	4965      	ldr	r1, [pc, #404]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ba:	4b63      	ldr	r3, [pc, #396]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0307 	and.w	r3, r3, #7
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d001      	beq.n	80066cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e0b8      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d020      	beq.n	800671a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066e4:	4b59      	ldr	r3, [pc, #356]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	4a58      	ldr	r2, [pc, #352]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 80066ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0308 	and.w	r3, r3, #8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066fc:	4b53      	ldr	r3, [pc, #332]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	4a52      	ldr	r2, [pc, #328]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006702:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006706:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006708:	4b50      	ldr	r3, [pc, #320]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	494d      	ldr	r1, [pc, #308]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006716:	4313      	orrs	r3, r2
 8006718:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d040      	beq.n	80067a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d107      	bne.n	800673e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800672e:	4b47      	ldr	r3, [pc, #284]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d115      	bne.n	8006766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e07f      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	2b02      	cmp	r3, #2
 8006744:	d107      	bne.n	8006756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006746:	4b41      	ldr	r3, [pc, #260]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d109      	bne.n	8006766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e073      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006756:	4b3d      	ldr	r3, [pc, #244]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e06b      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006766:	4b39      	ldr	r3, [pc, #228]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f023 0203 	bic.w	r2, r3, #3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	4936      	ldr	r1, [pc, #216]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006774:	4313      	orrs	r3, r2
 8006776:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006778:	f7fd fe2e 	bl	80043d8 <HAL_GetTick>
 800677c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800677e:	e00a      	b.n	8006796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006780:	f7fd fe2a 	bl	80043d8 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	f241 3288 	movw	r2, #5000	; 0x1388
 800678e:	4293      	cmp	r3, r2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e053      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006796:	4b2d      	ldr	r3, [pc, #180]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f003 020c 	and.w	r2, r3, #12
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d1eb      	bne.n	8006780 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067a8:	4b27      	ldr	r3, [pc, #156]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d210      	bcs.n	80067d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067b6:	4b24      	ldr	r3, [pc, #144]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f023 0207 	bic.w	r2, r3, #7
 80067be:	4922      	ldr	r1, [pc, #136]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c6:	4b20      	ldr	r3, [pc, #128]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d001      	beq.n	80067d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e032      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d008      	beq.n	80067f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067e4:	4b19      	ldr	r3, [pc, #100]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	4916      	ldr	r1, [pc, #88]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d009      	beq.n	8006816 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006802:	4b12      	ldr	r3, [pc, #72]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	490e      	ldr	r1, [pc, #56]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006812:	4313      	orrs	r3, r2
 8006814:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006816:	f000 f821 	bl	800685c <HAL_RCC_GetSysClockFreq>
 800681a:	4602      	mov	r2, r0
 800681c:	4b0b      	ldr	r3, [pc, #44]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	091b      	lsrs	r3, r3, #4
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	490a      	ldr	r1, [pc, #40]	; (8006850 <HAL_RCC_ClockConfig+0x1c8>)
 8006828:	5ccb      	ldrb	r3, [r1, r3]
 800682a:	fa22 f303 	lsr.w	r3, r2, r3
 800682e:	4a09      	ldr	r2, [pc, #36]	; (8006854 <HAL_RCC_ClockConfig+0x1cc>)
 8006830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006832:	4b09      	ldr	r3, [pc, #36]	; (8006858 <HAL_RCC_ClockConfig+0x1d0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4618      	mov	r0, r3
 8006838:	f7fd fd8c 	bl	8004354 <HAL_InitTick>

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	40022000 	.word	0x40022000
 800684c:	40021000 	.word	0x40021000
 8006850:	0800e458 	.word	0x0800e458
 8006854:	20000020 	.word	0x20000020
 8006858:	20000024 	.word	0x20000024

0800685c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800685c:	b490      	push	{r4, r7}
 800685e:	b08a      	sub	sp, #40	; 0x28
 8006860:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006862:	4b2a      	ldr	r3, [pc, #168]	; (800690c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006864:	1d3c      	adds	r4, r7, #4
 8006866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006868:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800686c:	f240 2301 	movw	r3, #513	; 0x201
 8006870:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006872:	2300      	movs	r3, #0
 8006874:	61fb      	str	r3, [r7, #28]
 8006876:	2300      	movs	r3, #0
 8006878:	61bb      	str	r3, [r7, #24]
 800687a:	2300      	movs	r3, #0
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
 800687e:	2300      	movs	r3, #0
 8006880:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006886:	4b22      	ldr	r3, [pc, #136]	; (8006910 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	f003 030c 	and.w	r3, r3, #12
 8006892:	2b04      	cmp	r3, #4
 8006894:	d002      	beq.n	800689c <HAL_RCC_GetSysClockFreq+0x40>
 8006896:	2b08      	cmp	r3, #8
 8006898:	d003      	beq.n	80068a2 <HAL_RCC_GetSysClockFreq+0x46>
 800689a:	e02d      	b.n	80068f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800689c:	4b1d      	ldr	r3, [pc, #116]	; (8006914 <HAL_RCC_GetSysClockFreq+0xb8>)
 800689e:	623b      	str	r3, [r7, #32]
      break;
 80068a0:	e02d      	b.n	80068fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	0c9b      	lsrs	r3, r3, #18
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80068ae:	4413      	add	r3, r2
 80068b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80068b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d013      	beq.n	80068e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80068c0:	4b13      	ldr	r3, [pc, #76]	; (8006910 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	0c5b      	lsrs	r3, r3, #17
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80068ce:	4413      	add	r3, r2
 80068d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80068d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	4a0e      	ldr	r2, [pc, #56]	; (8006914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068da:	fb02 f203 	mul.w	r2, r2, r3
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e4:	627b      	str	r3, [r7, #36]	; 0x24
 80068e6:	e004      	b.n	80068f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	4a0b      	ldr	r2, [pc, #44]	; (8006918 <HAL_RCC_GetSysClockFreq+0xbc>)
 80068ec:	fb02 f303 	mul.w	r3, r2, r3
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	623b      	str	r3, [r7, #32]
      break;
 80068f6:	e002      	b.n	80068fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068f8:	4b06      	ldr	r3, [pc, #24]	; (8006914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068fa:	623b      	str	r3, [r7, #32]
      break;
 80068fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068fe:	6a3b      	ldr	r3, [r7, #32]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3728      	adds	r7, #40	; 0x28
 8006904:	46bd      	mov	sp, r7
 8006906:	bc90      	pop	{r4, r7}
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	0800e128 	.word	0x0800e128
 8006910:	40021000 	.word	0x40021000
 8006914:	007a1200 	.word	0x007a1200
 8006918:	003d0900 	.word	0x003d0900

0800691c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006920:	4b02      	ldr	r3, [pc, #8]	; (800692c <HAL_RCC_GetHCLKFreq+0x10>)
 8006922:	681b      	ldr	r3, [r3, #0]
}
 8006924:	4618      	mov	r0, r3
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr
 800692c:	20000020 	.word	0x20000020

08006930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006934:	f7ff fff2 	bl	800691c <HAL_RCC_GetHCLKFreq>
 8006938:	4602      	mov	r2, r0
 800693a:	4b05      	ldr	r3, [pc, #20]	; (8006950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	0a1b      	lsrs	r3, r3, #8
 8006940:	f003 0307 	and.w	r3, r3, #7
 8006944:	4903      	ldr	r1, [pc, #12]	; (8006954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006946:	5ccb      	ldrb	r3, [r1, r3]
 8006948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800694c:	4618      	mov	r0, r3
 800694e:	bd80      	pop	{r7, pc}
 8006950:	40021000 	.word	0x40021000
 8006954:	0800e468 	.word	0x0800e468

08006958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800695c:	f7ff ffde 	bl	800691c <HAL_RCC_GetHCLKFreq>
 8006960:	4602      	mov	r2, r0
 8006962:	4b05      	ldr	r3, [pc, #20]	; (8006978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	0adb      	lsrs	r3, r3, #11
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	4903      	ldr	r1, [pc, #12]	; (800697c <HAL_RCC_GetPCLK2Freq+0x24>)
 800696e:	5ccb      	ldrb	r3, [r1, r3]
 8006970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006974:	4618      	mov	r0, r3
 8006976:	bd80      	pop	{r7, pc}
 8006978:	40021000 	.word	0x40021000
 800697c:	0800e468 	.word	0x0800e468

08006980 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006988:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <RCC_Delay+0x34>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a0a      	ldr	r2, [pc, #40]	; (80069b8 <RCC_Delay+0x38>)
 800698e:	fba2 2303 	umull	r2, r3, r2, r3
 8006992:	0a5b      	lsrs	r3, r3, #9
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	fb02 f303 	mul.w	r3, r2, r3
 800699a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800699c:	bf00      	nop
  }
  while (Delay --);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	1e5a      	subs	r2, r3, #1
 80069a2:	60fa      	str	r2, [r7, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1f9      	bne.n	800699c <RCC_Delay+0x1c>
}
 80069a8:	bf00      	nop
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr
 80069b4:	20000020 	.word	0x20000020
 80069b8:	10624dd3 	.word	0x10624dd3

080069bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	613b      	str	r3, [r7, #16]
 80069c8:	2300      	movs	r3, #0
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d07d      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80069d8:	2300      	movs	r3, #0
 80069da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069dc:	4b4f      	ldr	r3, [pc, #316]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069de:	69db      	ldr	r3, [r3, #28]
 80069e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10d      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069e8:	4b4c      	ldr	r3, [pc, #304]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	4a4b      	ldr	r2, [pc, #300]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069f2:	61d3      	str	r3, [r2, #28]
 80069f4:	4b49      	ldr	r3, [pc, #292]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069fc:	60bb      	str	r3, [r7, #8]
 80069fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a00:	2301      	movs	r3, #1
 8006a02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a04:	4b46      	ldr	r3, [pc, #280]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d118      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a10:	4b43      	ldr	r3, [pc, #268]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a42      	ldr	r2, [pc, #264]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a1c:	f7fd fcdc 	bl	80043d8 <HAL_GetTick>
 8006a20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a22:	e008      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a24:	f7fd fcd8 	bl	80043d8 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b64      	cmp	r3, #100	; 0x64
 8006a30:	d901      	bls.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e06d      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a36:	4b3a      	ldr	r3, [pc, #232]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0f0      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a42:	4b36      	ldr	r3, [pc, #216]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d02e      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d027      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a60:	4b2e      	ldr	r3, [pc, #184]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a6a:	4b2e      	ldr	r3, [pc, #184]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a70:	4b2c      	ldr	r3, [pc, #176]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a76:	4a29      	ldr	r2, [pc, #164]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d014      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a86:	f7fd fca7 	bl	80043d8 <HAL_GetTick>
 8006a8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a8c:	e00a      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a8e:	f7fd fca3 	bl	80043d8 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d901      	bls.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e036      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aa4:	4b1d      	ldr	r3, [pc, #116]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0ee      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ab0:	4b1a      	ldr	r3, [pc, #104]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	4917      	ldr	r1, [pc, #92]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d105      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ac8:	4b14      	ldr	r3, [pc, #80]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	4a13      	ldr	r2, [pc, #76]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d008      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ae0:	4b0e      	ldr	r3, [pc, #56]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	490b      	ldr	r1, [pc, #44]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0310 	and.w	r3, r3, #16
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d008      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006afe:	4b07      	ldr	r3, [pc, #28]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	4904      	ldr	r1, [pc, #16]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	40007000 	.word	0x40007000
 8006b24:	42420440 	.word	0x42420440

08006b28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e076      	b.n	8006c28 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d108      	bne.n	8006b54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b4a:	d009      	beq.n	8006b60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	61da      	str	r2, [r3, #28]
 8006b52:	e005      	b.n	8006b60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fd f9a2 	bl	8003ec4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	431a      	orrs	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be4:	ea42 0103 	orr.w	r1, r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	0c1a      	lsrs	r2, r3, #16
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f002 0204 	and.w	r2, r2, #4
 8006c06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	69da      	ldr	r2, [r3, #28]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08c      	sub	sp, #48	; 0x30
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d101      	bne.n	8006c56 <HAL_SPI_TransmitReceive+0x26>
 8006c52:	2302      	movs	r3, #2
 8006c54:	e18a      	b.n	8006f6c <HAL_SPI_TransmitReceive+0x33c>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c5e:	f7fd fbbb 	bl	80043d8 <HAL_GetTick>
 8006c62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006c74:	887b      	ldrh	r3, [r7, #2]
 8006c76:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d00f      	beq.n	8006ca0 <HAL_SPI_TransmitReceive+0x70>
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c86:	d107      	bne.n	8006c98 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d103      	bne.n	8006c98 <HAL_SPI_TransmitReceive+0x68>
 8006c90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d003      	beq.n	8006ca0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006c98:	2302      	movs	r3, #2
 8006c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c9e:	e15b      	b.n	8006f58 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <HAL_SPI_TransmitReceive+0x82>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <HAL_SPI_TransmitReceive+0x82>
 8006cac:	887b      	ldrh	r3, [r7, #2]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d103      	bne.n	8006cba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006cb8:	e14e      	b.n	8006f58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	d003      	beq.n	8006cce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2205      	movs	r2, #5
 8006cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	887a      	ldrh	r2, [r7, #2]
 8006cde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	887a      	ldrh	r2, [r7, #2]
 8006ce4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	887a      	ldrh	r2, [r7, #2]
 8006cf0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	887a      	ldrh	r2, [r7, #2]
 8006cf6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0e:	2b40      	cmp	r3, #64	; 0x40
 8006d10:	d007      	beq.n	8006d22 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d2a:	d178      	bne.n	8006e1e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <HAL_SPI_TransmitReceive+0x10a>
 8006d34:	8b7b      	ldrh	r3, [r7, #26]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d166      	bne.n	8006e08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3e:	881a      	ldrh	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	1c9a      	adds	r2, r3, #2
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d5e:	e053      	b.n	8006e08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d11b      	bne.n	8006da6 <HAL_SPI_TransmitReceive+0x176>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d016      	beq.n	8006da6 <HAL_SPI_TransmitReceive+0x176>
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d113      	bne.n	8006da6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d82:	881a      	ldrh	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8e:	1c9a      	adds	r2, r3, #2
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d119      	bne.n	8006de8 <HAL_SPI_TransmitReceive+0x1b8>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d014      	beq.n	8006de8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc8:	b292      	uxth	r2, r2
 8006dca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	1c9a      	adds	r2, r3, #2
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006de4:	2301      	movs	r3, #1
 8006de6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006de8:	f7fd faf6 	bl	80043d8 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d807      	bhi.n	8006e08 <HAL_SPI_TransmitReceive+0x1d8>
 8006df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dfe:	d003      	beq.n	8006e08 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006e06:	e0a7      	b.n	8006f58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1a6      	bne.n	8006d60 <HAL_SPI_TransmitReceive+0x130>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1a1      	bne.n	8006d60 <HAL_SPI_TransmitReceive+0x130>
 8006e1c:	e07c      	b.n	8006f18 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <HAL_SPI_TransmitReceive+0x1fc>
 8006e26:	8b7b      	ldrh	r3, [r7, #26]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d16b      	bne.n	8006f04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	330c      	adds	r3, #12
 8006e36:	7812      	ldrb	r2, [r2, #0]
 8006e38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e52:	e057      	b.n	8006f04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d11c      	bne.n	8006e9c <HAL_SPI_TransmitReceive+0x26c>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d017      	beq.n	8006e9c <HAL_SPI_TransmitReceive+0x26c>
 8006e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d114      	bne.n	8006e9c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	330c      	adds	r3, #12
 8006e7c:	7812      	ldrb	r2, [r2, #0]
 8006e7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	3b01      	subs	r3, #1
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d119      	bne.n	8006ede <HAL_SPI_TransmitReceive+0x2ae>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d014      	beq.n	8006ede <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006eda:	2301      	movs	r3, #1
 8006edc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ede:	f7fd fa7b 	bl	80043d8 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d803      	bhi.n	8006ef6 <HAL_SPI_TransmitReceive+0x2c6>
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ef4:	d102      	bne.n	8006efc <HAL_SPI_TransmitReceive+0x2cc>
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d103      	bne.n	8006f04 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006f02:	e029      	b.n	8006f58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1a2      	bne.n	8006e54 <HAL_SPI_TransmitReceive+0x224>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d19d      	bne.n	8006e54 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f8b1 	bl	8007084 <SPI_EndRxTxTransaction>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d006      	beq.n	8006f36 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2220      	movs	r2, #32
 8006f32:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006f34:	e010      	b.n	8006f58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10b      	bne.n	8006f56 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f3e:	2300      	movs	r3, #0
 8006f40:	617b      	str	r3, [r7, #20]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	617b      	str	r3, [r7, #20]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	617b      	str	r3, [r7, #20]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	e000      	b.n	8006f58 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006f56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3730      	adds	r7, #48	; 0x30
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	4613      	mov	r3, r2
 8006f82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f84:	f7fd fa28 	bl	80043d8 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8c:	1a9b      	subs	r3, r3, r2
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	4413      	add	r3, r2
 8006f92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f94:	f7fd fa20 	bl	80043d8 <HAL_GetTick>
 8006f98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f9a:	4b39      	ldr	r3, [pc, #228]	; (8007080 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	015b      	lsls	r3, r3, #5
 8006fa0:	0d1b      	lsrs	r3, r3, #20
 8006fa2:	69fa      	ldr	r2, [r7, #28]
 8006fa4:	fb02 f303 	mul.w	r3, r2, r3
 8006fa8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006faa:	e054      	b.n	8007056 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fb2:	d050      	beq.n	8007056 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fb4:	f7fd fa10 	bl	80043d8 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	69fa      	ldr	r2, [r7, #28]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d902      	bls.n	8006fca <SPI_WaitFlagStateUntilTimeout+0x56>
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d13d      	bne.n	8007046 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006fd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fe2:	d111      	bne.n	8007008 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fec:	d004      	beq.n	8006ff8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff6:	d107      	bne.n	8007008 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007006:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007010:	d10f      	bne.n	8007032 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007030:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e017      	b.n	8007076 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	3b01      	subs	r3, #1
 8007054:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4013      	ands	r3, r2
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	429a      	cmp	r2, r3
 8007064:	bf0c      	ite	eq
 8007066:	2301      	moveq	r3, #1
 8007068:	2300      	movne	r3, #0
 800706a:	b2db      	uxtb	r3, r3
 800706c:	461a      	mov	r2, r3
 800706e:	79fb      	ldrb	r3, [r7, #7]
 8007070:	429a      	cmp	r2, r3
 8007072:	d19b      	bne.n	8006fac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3720      	adds	r7, #32
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	20000020 	.word	0x20000020

08007084 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af02      	add	r7, sp, #8
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2200      	movs	r2, #0
 8007098:	2180      	movs	r1, #128	; 0x80
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7ff ff6a 	bl	8006f74 <SPI_WaitFlagStateUntilTimeout>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d007      	beq.n	80070b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070aa:	f043 0220 	orr.w	r2, r3, #32
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e000      	b.n	80070b8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e041      	b.n	8007156 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d106      	bne.n	80070ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7fc ff36 	bl	8003f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	3304      	adds	r3, #4
 80070fc:	4619      	mov	r1, r3
 80070fe:	4610      	mov	r0, r2
 8007100:	f000 fc28 	bl	8007954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b01      	cmp	r3, #1
 8007172:	d001      	beq.n	8007178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e03a      	b.n	80071ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f042 0201 	orr.w	r2, r2, #1
 800718e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a18      	ldr	r2, [pc, #96]	; (80071f8 <HAL_TIM_Base_Start_IT+0x98>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d00e      	beq.n	80071b8 <HAL_TIM_Base_Start_IT+0x58>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071a2:	d009      	beq.n	80071b8 <HAL_TIM_Base_Start_IT+0x58>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a14      	ldr	r2, [pc, #80]	; (80071fc <HAL_TIM_Base_Start_IT+0x9c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d004      	beq.n	80071b8 <HAL_TIM_Base_Start_IT+0x58>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a13      	ldr	r2, [pc, #76]	; (8007200 <HAL_TIM_Base_Start_IT+0xa0>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d111      	bne.n	80071dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b06      	cmp	r3, #6
 80071c8:	d010      	beq.n	80071ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f042 0201 	orr.w	r2, r2, #1
 80071d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071da:	e007      	b.n	80071ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0201 	orr.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bc80      	pop	{r7}
 80071f6:	4770      	bx	lr
 80071f8:	40012c00 	.word	0x40012c00
 80071fc:	40000400 	.word	0x40000400
 8007200:	40000800 	.word	0x40000800

08007204 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e041      	b.n	800729a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	d106      	bne.n	8007230 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f839 	bl	80072a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3304      	adds	r3, #4
 8007240:	4619      	mov	r1, r3
 8007242:	4610      	mov	r0, r2
 8007244:	f000 fb86 	bl	8007954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b083      	sub	sp, #12
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80072aa:	bf00      	nop
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bc80      	pop	{r7}
 80072b2:	4770      	bx	lr

080072b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d109      	bne.n	80072d8 <HAL_TIM_PWM_Start+0x24>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	bf14      	ite	ne
 80072d0:	2301      	movne	r3, #1
 80072d2:	2300      	moveq	r3, #0
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	e022      	b.n	800731e <HAL_TIM_PWM_Start+0x6a>
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2b04      	cmp	r3, #4
 80072dc:	d109      	bne.n	80072f2 <HAL_TIM_PWM_Start+0x3e>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	bf14      	ite	ne
 80072ea:	2301      	movne	r3, #1
 80072ec:	2300      	moveq	r3, #0
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	e015      	b.n	800731e <HAL_TIM_PWM_Start+0x6a>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d109      	bne.n	800730c <HAL_TIM_PWM_Start+0x58>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b01      	cmp	r3, #1
 8007302:	bf14      	ite	ne
 8007304:	2301      	movne	r3, #1
 8007306:	2300      	moveq	r3, #0
 8007308:	b2db      	uxtb	r3, r3
 800730a:	e008      	b.n	800731e <HAL_TIM_PWM_Start+0x6a>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b01      	cmp	r3, #1
 8007316:	bf14      	ite	ne
 8007318:	2301      	movne	r3, #1
 800731a:	2300      	moveq	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e05e      	b.n	80073e4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d104      	bne.n	8007336 <HAL_TIM_PWM_Start+0x82>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007334:	e013      	b.n	800735e <HAL_TIM_PWM_Start+0xaa>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b04      	cmp	r3, #4
 800733a:	d104      	bne.n	8007346 <HAL_TIM_PWM_Start+0x92>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007344:	e00b      	b.n	800735e <HAL_TIM_PWM_Start+0xaa>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b08      	cmp	r3, #8
 800734a:	d104      	bne.n	8007356 <HAL_TIM_PWM_Start+0xa2>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2202      	movs	r2, #2
 8007350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007354:	e003      	b.n	800735e <HAL_TIM_PWM_Start+0xaa>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2202      	movs	r2, #2
 800735a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2201      	movs	r2, #1
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	4618      	mov	r0, r3
 8007368:	f000 fd74 	bl	8007e54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a1e      	ldr	r2, [pc, #120]	; (80073ec <HAL_TIM_PWM_Start+0x138>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d107      	bne.n	8007386 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007384:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a18      	ldr	r2, [pc, #96]	; (80073ec <HAL_TIM_PWM_Start+0x138>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d00e      	beq.n	80073ae <HAL_TIM_PWM_Start+0xfa>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007398:	d009      	beq.n	80073ae <HAL_TIM_PWM_Start+0xfa>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a14      	ldr	r2, [pc, #80]	; (80073f0 <HAL_TIM_PWM_Start+0x13c>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d004      	beq.n	80073ae <HAL_TIM_PWM_Start+0xfa>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a12      	ldr	r2, [pc, #72]	; (80073f4 <HAL_TIM_PWM_Start+0x140>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d111      	bne.n	80073d2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b06      	cmp	r3, #6
 80073be:	d010      	beq.n	80073e2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0201 	orr.w	r2, r2, #1
 80073ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d0:	e007      	b.n	80073e2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f042 0201 	orr.w	r2, r2, #1
 80073e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	40012c00 	.word	0x40012c00
 80073f0:	40000400 	.word	0x40000400
 80073f4:	40000800 	.word	0x40000800

080073f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b02      	cmp	r3, #2
 800740c:	d122      	bne.n	8007454 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b02      	cmp	r3, #2
 800741a:	d11b      	bne.n	8007454 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f06f 0202 	mvn.w	r2, #2
 8007424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	f003 0303 	and.w	r3, r3, #3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fa6f 	bl	800791e <HAL_TIM_IC_CaptureCallback>
 8007440:	e005      	b.n	800744e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fa62 	bl	800790c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fa71 	bl	8007930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f003 0304 	and.w	r3, r3, #4
 800745e:	2b04      	cmp	r3, #4
 8007460:	d122      	bne.n	80074a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b04      	cmp	r3, #4
 800746e:	d11b      	bne.n	80074a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f06f 0204 	mvn.w	r2, #4
 8007478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2202      	movs	r2, #2
 800747e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa45 	bl	800791e <HAL_TIM_IC_CaptureCallback>
 8007494:	e005      	b.n	80074a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fa38 	bl	800790c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fa47 	bl	8007930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	f003 0308 	and.w	r3, r3, #8
 80074b2:	2b08      	cmp	r3, #8
 80074b4:	d122      	bne.n	80074fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f003 0308 	and.w	r3, r3, #8
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d11b      	bne.n	80074fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f06f 0208 	mvn.w	r2, #8
 80074cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2204      	movs	r2, #4
 80074d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fa1b 	bl	800791e <HAL_TIM_IC_CaptureCallback>
 80074e8:	e005      	b.n	80074f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fa0e 	bl	800790c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fa1d 	bl	8007930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f003 0310 	and.w	r3, r3, #16
 8007506:	2b10      	cmp	r3, #16
 8007508:	d122      	bne.n	8007550 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f003 0310 	and.w	r3, r3, #16
 8007514:	2b10      	cmp	r3, #16
 8007516:	d11b      	bne.n	8007550 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f06f 0210 	mvn.w	r2, #16
 8007520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2208      	movs	r2, #8
 8007526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f9f1 	bl	800791e <HAL_TIM_IC_CaptureCallback>
 800753c:	e005      	b.n	800754a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f9e4 	bl	800790c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f9f3 	bl	8007930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b01      	cmp	r3, #1
 800755c:	d10e      	bne.n	800757c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b01      	cmp	r3, #1
 800756a:	d107      	bne.n	800757c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f06f 0201 	mvn.w	r2, #1
 8007574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7fa fb72 	bl	8001c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007586:	2b80      	cmp	r3, #128	; 0x80
 8007588:	d10e      	bne.n	80075a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007594:	2b80      	cmp	r3, #128	; 0x80
 8007596:	d107      	bne.n	80075a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fce1 	bl	8007f6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b2:	2b40      	cmp	r3, #64	; 0x40
 80075b4:	d10e      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c0:	2b40      	cmp	r3, #64	; 0x40
 80075c2:	d107      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f9b7 	bl	8007942 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	f003 0320 	and.w	r3, r3, #32
 80075de:	2b20      	cmp	r3, #32
 80075e0:	d10e      	bne.n	8007600 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f003 0320 	and.w	r3, r3, #32
 80075ec:	2b20      	cmp	r3, #32
 80075ee:	d107      	bne.n	8007600 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f06f 0220 	mvn.w	r2, #32
 80075f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fcac 	bl	8007f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800761e:	2302      	movs	r3, #2
 8007620:	e0ac      	b.n	800777c <HAL_TIM_PWM_ConfigChannel+0x174>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b0c      	cmp	r3, #12
 800762e:	f200 809f 	bhi.w	8007770 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007632:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	0800766d 	.word	0x0800766d
 800763c:	08007771 	.word	0x08007771
 8007640:	08007771 	.word	0x08007771
 8007644:	08007771 	.word	0x08007771
 8007648:	080076ad 	.word	0x080076ad
 800764c:	08007771 	.word	0x08007771
 8007650:	08007771 	.word	0x08007771
 8007654:	08007771 	.word	0x08007771
 8007658:	080076ef 	.word	0x080076ef
 800765c:	08007771 	.word	0x08007771
 8007660:	08007771 	.word	0x08007771
 8007664:	08007771 	.word	0x08007771
 8007668:	0800772f 	.word	0x0800772f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68b9      	ldr	r1, [r7, #8]
 8007672:	4618      	mov	r0, r3
 8007674:	f000 f9d0 	bl	8007a18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	699a      	ldr	r2, [r3, #24]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0208 	orr.w	r2, r2, #8
 8007686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	699a      	ldr	r2, [r3, #24]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0204 	bic.w	r2, r2, #4
 8007696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6999      	ldr	r1, [r3, #24]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	691a      	ldr	r2, [r3, #16]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	619a      	str	r2, [r3, #24]
      break;
 80076aa:	e062      	b.n	8007772 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68b9      	ldr	r1, [r7, #8]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fa16 	bl	8007ae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	699a      	ldr	r2, [r3, #24]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6999      	ldr	r1, [r3, #24]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	021a      	lsls	r2, r3, #8
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	619a      	str	r2, [r3, #24]
      break;
 80076ec:	e041      	b.n	8007772 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 fa5f 	bl	8007bb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69da      	ldr	r2, [r3, #28]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f042 0208 	orr.w	r2, r2, #8
 8007708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69da      	ldr	r2, [r3, #28]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0204 	bic.w	r2, r2, #4
 8007718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69d9      	ldr	r1, [r3, #28]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	691a      	ldr	r2, [r3, #16]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	430a      	orrs	r2, r1
 800772a:	61da      	str	r2, [r3, #28]
      break;
 800772c:	e021      	b.n	8007772 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68b9      	ldr	r1, [r7, #8]
 8007734:	4618      	mov	r0, r3
 8007736:	f000 faa9 	bl	8007c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69da      	ldr	r2, [r3, #28]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69da      	ldr	r2, [r3, #28]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69d9      	ldr	r1, [r3, #28]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	021a      	lsls	r2, r3, #8
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	61da      	str	r2, [r3, #28]
      break;
 800776e:	e000      	b.n	8007772 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007770:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007794:	2b01      	cmp	r3, #1
 8007796:	d101      	bne.n	800779c <HAL_TIM_ConfigClockSource+0x18>
 8007798:	2302      	movs	r3, #2
 800779a:	e0b3      	b.n	8007904 <HAL_TIM_ConfigClockSource+0x180>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80077ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077d4:	d03e      	beq.n	8007854 <HAL_TIM_ConfigClockSource+0xd0>
 80077d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077da:	f200 8087 	bhi.w	80078ec <HAL_TIM_ConfigClockSource+0x168>
 80077de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e2:	f000 8085 	beq.w	80078f0 <HAL_TIM_ConfigClockSource+0x16c>
 80077e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ea:	d87f      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x168>
 80077ec:	2b70      	cmp	r3, #112	; 0x70
 80077ee:	d01a      	beq.n	8007826 <HAL_TIM_ConfigClockSource+0xa2>
 80077f0:	2b70      	cmp	r3, #112	; 0x70
 80077f2:	d87b      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x168>
 80077f4:	2b60      	cmp	r3, #96	; 0x60
 80077f6:	d050      	beq.n	800789a <HAL_TIM_ConfigClockSource+0x116>
 80077f8:	2b60      	cmp	r3, #96	; 0x60
 80077fa:	d877      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x168>
 80077fc:	2b50      	cmp	r3, #80	; 0x50
 80077fe:	d03c      	beq.n	800787a <HAL_TIM_ConfigClockSource+0xf6>
 8007800:	2b50      	cmp	r3, #80	; 0x50
 8007802:	d873      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x168>
 8007804:	2b40      	cmp	r3, #64	; 0x40
 8007806:	d058      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x136>
 8007808:	2b40      	cmp	r3, #64	; 0x40
 800780a:	d86f      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x168>
 800780c:	2b30      	cmp	r3, #48	; 0x30
 800780e:	d064      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x156>
 8007810:	2b30      	cmp	r3, #48	; 0x30
 8007812:	d86b      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x168>
 8007814:	2b20      	cmp	r3, #32
 8007816:	d060      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x156>
 8007818:	2b20      	cmp	r3, #32
 800781a:	d867      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x168>
 800781c:	2b00      	cmp	r3, #0
 800781e:	d05c      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x156>
 8007820:	2b10      	cmp	r3, #16
 8007822:	d05a      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007824:	e062      	b.n	80078ec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	6899      	ldr	r1, [r3, #8]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f000 faee 	bl	8007e16 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007848:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	609a      	str	r2, [r3, #8]
      break;
 8007852:	e04e      	b.n	80078f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	6899      	ldr	r1, [r3, #8]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f000 fad7 	bl	8007e16 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007876:	609a      	str	r2, [r3, #8]
      break;
 8007878:	e03b      	b.n	80078f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6818      	ldr	r0, [r3, #0]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	6859      	ldr	r1, [r3, #4]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	461a      	mov	r2, r3
 8007888:	f000 fa4e 	bl	8007d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2150      	movs	r1, #80	; 0x50
 8007892:	4618      	mov	r0, r3
 8007894:	f000 faa5 	bl	8007de2 <TIM_ITRx_SetConfig>
      break;
 8007898:	e02b      	b.n	80078f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6818      	ldr	r0, [r3, #0]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	6859      	ldr	r1, [r3, #4]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	461a      	mov	r2, r3
 80078a8:	f000 fa6c 	bl	8007d84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2160      	movs	r1, #96	; 0x60
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fa95 	bl	8007de2 <TIM_ITRx_SetConfig>
      break;
 80078b8:	e01b      	b.n	80078f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	6859      	ldr	r1, [r3, #4]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	461a      	mov	r2, r3
 80078c8:	f000 fa2e 	bl	8007d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2140      	movs	r1, #64	; 0x40
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 fa85 	bl	8007de2 <TIM_ITRx_SetConfig>
      break;
 80078d8:	e00b      	b.n	80078f2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4619      	mov	r1, r3
 80078e4:	4610      	mov	r0, r2
 80078e6:	f000 fa7c 	bl	8007de2 <TIM_ITRx_SetConfig>
        break;
 80078ea:	e002      	b.n	80078f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078ec:	bf00      	nop
 80078ee:	e000      	b.n	80078f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	bc80      	pop	{r7}
 800791c:	4770      	bx	lr

0800791e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007926:	bf00      	nop
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	bc80      	pop	{r7}
 800792e:	4770      	bx	lr

08007930 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	bc80      	pop	{r7}
 8007940:	4770      	bx	lr

08007942 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800794a:	bf00      	nop
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	bc80      	pop	{r7}
 8007952:	4770      	bx	lr

08007954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a29      	ldr	r2, [pc, #164]	; (8007a0c <TIM_Base_SetConfig+0xb8>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d00b      	beq.n	8007984 <TIM_Base_SetConfig+0x30>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007972:	d007      	beq.n	8007984 <TIM_Base_SetConfig+0x30>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a26      	ldr	r2, [pc, #152]	; (8007a10 <TIM_Base_SetConfig+0xbc>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d003      	beq.n	8007984 <TIM_Base_SetConfig+0x30>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a25      	ldr	r2, [pc, #148]	; (8007a14 <TIM_Base_SetConfig+0xc0>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d108      	bne.n	8007996 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800798a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	4313      	orrs	r3, r2
 8007994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a1c      	ldr	r2, [pc, #112]	; (8007a0c <TIM_Base_SetConfig+0xb8>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d00b      	beq.n	80079b6 <TIM_Base_SetConfig+0x62>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a4:	d007      	beq.n	80079b6 <TIM_Base_SetConfig+0x62>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a19      	ldr	r2, [pc, #100]	; (8007a10 <TIM_Base_SetConfig+0xbc>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d003      	beq.n	80079b6 <TIM_Base_SetConfig+0x62>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a18      	ldr	r2, [pc, #96]	; (8007a14 <TIM_Base_SetConfig+0xc0>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d108      	bne.n	80079c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a07      	ldr	r2, [pc, #28]	; (8007a0c <TIM_Base_SetConfig+0xb8>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d103      	bne.n	80079fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	691a      	ldr	r2, [r3, #16]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	615a      	str	r2, [r3, #20]
}
 8007a02:	bf00      	nop
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bc80      	pop	{r7}
 8007a0a:	4770      	bx	lr
 8007a0c:	40012c00 	.word	0x40012c00
 8007a10:	40000400 	.word	0x40000400
 8007a14:	40000800 	.word	0x40000800

08007a18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f023 0201 	bic.w	r2, r3, #1
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 0303 	bic.w	r3, r3, #3
 8007a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f023 0302 	bic.w	r3, r3, #2
 8007a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a1c      	ldr	r2, [pc, #112]	; (8007ae0 <TIM_OC1_SetConfig+0xc8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d10c      	bne.n	8007a8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f023 0308 	bic.w	r3, r3, #8
 8007a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f023 0304 	bic.w	r3, r3, #4
 8007a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a13      	ldr	r2, [pc, #76]	; (8007ae0 <TIM_OC1_SetConfig+0xc8>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d111      	bne.n	8007aba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	621a      	str	r2, [r3, #32]
}
 8007ad4:	bf00      	nop
 8007ad6:	371c      	adds	r7, #28
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bc80      	pop	{r7}
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	40012c00 	.word	0x40012c00

08007ae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	f023 0210 	bic.w	r2, r3, #16
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	021b      	lsls	r3, r3, #8
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f023 0320 	bic.w	r3, r3, #32
 8007b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a1d      	ldr	r2, [pc, #116]	; (8007bb4 <TIM_OC2_SetConfig+0xd0>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d10d      	bne.n	8007b60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	011b      	lsls	r3, r3, #4
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a14      	ldr	r2, [pc, #80]	; (8007bb4 <TIM_OC2_SetConfig+0xd0>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d113      	bne.n	8007b90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	621a      	str	r2, [r3, #32]
}
 8007baa:	bf00      	nop
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bc80      	pop	{r7}
 8007bb2:	4770      	bx	lr
 8007bb4:	40012c00 	.word	0x40012c00

08007bb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f023 0303 	bic.w	r3, r3, #3
 8007bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	021b      	lsls	r3, r3, #8
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a1d      	ldr	r2, [pc, #116]	; (8007c88 <TIM_OC3_SetConfig+0xd0>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d10d      	bne.n	8007c32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	021b      	lsls	r3, r3, #8
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a14      	ldr	r2, [pc, #80]	; (8007c88 <TIM_OC3_SetConfig+0xd0>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d113      	bne.n	8007c62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	011b      	lsls	r3, r3, #4
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	011b      	lsls	r3, r3, #4
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	621a      	str	r2, [r3, #32]
}
 8007c7c:	bf00      	nop
 8007c7e:	371c      	adds	r7, #28
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bc80      	pop	{r7}
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	40012c00 	.word	0x40012c00

08007c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	021b      	lsls	r3, r3, #8
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	031b      	lsls	r3, r3, #12
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a0f      	ldr	r2, [pc, #60]	; (8007d24 <TIM_OC4_SetConfig+0x98>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d109      	bne.n	8007d00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	019b      	lsls	r3, r3, #6
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	621a      	str	r2, [r3, #32]
}
 8007d1a:	bf00      	nop
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bc80      	pop	{r7}
 8007d22:	4770      	bx	lr
 8007d24:	40012c00 	.word	0x40012c00

08007d28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b087      	sub	sp, #28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6a1b      	ldr	r3, [r3, #32]
 8007d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	f023 0201 	bic.w	r2, r3, #1
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	011b      	lsls	r3, r3, #4
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f023 030a 	bic.w	r3, r3, #10
 8007d64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	621a      	str	r2, [r3, #32]
}
 8007d7a:	bf00      	nop
 8007d7c:	371c      	adds	r7, #28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bc80      	pop	{r7}
 8007d82:	4770      	bx	lr

08007d84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b087      	sub	sp, #28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6a1b      	ldr	r3, [r3, #32]
 8007d94:	f023 0210 	bic.w	r2, r3, #16
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	031b      	lsls	r3, r3, #12
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	011b      	lsls	r3, r3, #4
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	621a      	str	r2, [r3, #32]
}
 8007dd8:	bf00      	nop
 8007dda:	371c      	adds	r7, #28
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc80      	pop	{r7}
 8007de0:	4770      	bx	lr

08007de2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b085      	sub	sp, #20
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007df8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	f043 0307 	orr.w	r3, r3, #7
 8007e04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	609a      	str	r2, [r3, #8]
}
 8007e0c:	bf00      	nop
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bc80      	pop	{r7}
 8007e14:	4770      	bx	lr

08007e16 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b087      	sub	sp, #28
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	60f8      	str	r0, [r7, #12]
 8007e1e:	60b9      	str	r1, [r7, #8]
 8007e20:	607a      	str	r2, [r7, #4]
 8007e22:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e30:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	021a      	lsls	r2, r3, #8
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	431a      	orrs	r2, r3
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	609a      	str	r2, [r3, #8]
}
 8007e4a:	bf00      	nop
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc80      	pop	{r7}
 8007e52:	4770      	bx	lr

08007e54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	f003 031f 	and.w	r3, r3, #31
 8007e66:	2201      	movs	r2, #1
 8007e68:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6a1a      	ldr	r2, [r3, #32]
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	43db      	mvns	r3, r3
 8007e76:	401a      	ands	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6a1a      	ldr	r2, [r3, #32]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	f003 031f 	and.w	r3, r3, #31
 8007e86:	6879      	ldr	r1, [r7, #4]
 8007e88:	fa01 f303 	lsl.w	r3, r1, r3
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	621a      	str	r2, [r3, #32]
}
 8007e92:	bf00      	nop
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bc80      	pop	{r7}
 8007e9a:	4770      	bx	lr

08007e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d101      	bne.n	8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e046      	b.n	8007f42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a16      	ldr	r2, [pc, #88]	; (8007f4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d00e      	beq.n	8007f16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f00:	d009      	beq.n	8007f16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a12      	ldr	r2, [pc, #72]	; (8007f50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d004      	beq.n	8007f16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a10      	ldr	r2, [pc, #64]	; (8007f54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d10c      	bne.n	8007f30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bc80      	pop	{r7}
 8007f4a:	4770      	bx	lr
 8007f4c:	40012c00 	.word	0x40012c00
 8007f50:	40000400 	.word	0x40000400
 8007f54:	40000800 	.word	0x40000800

08007f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bc80      	pop	{r7}
 8007f68:	4770      	bx	lr

08007f6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f72:	bf00      	nop
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bc80      	pop	{r7}
 8007f7a:	4770      	bx	lr

08007f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e03f      	b.n	800800e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7fc f840 	bl	8004028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2224      	movs	r2, #36	; 0x24
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f829 	bl	8008018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	691a      	ldr	r2, [r3, #16]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	695a      	ldr	r2, [r3, #20]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68da      	ldr	r2, [r3, #12]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2220      	movs	r2, #32
 8008008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
	...

08008018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	430a      	orrs	r2, r1
 8008034:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	689a      	ldr	r2, [r3, #8]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	431a      	orrs	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	4313      	orrs	r3, r2
 8008046:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008052:	f023 030c 	bic.w	r3, r3, #12
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	6812      	ldr	r2, [r2, #0]
 800805a:	68b9      	ldr	r1, [r7, #8]
 800805c:	430b      	orrs	r3, r1
 800805e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	699a      	ldr	r2, [r3, #24]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a2c      	ldr	r2, [pc, #176]	; (800812c <UART_SetConfig+0x114>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d103      	bne.n	8008088 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008080:	f7fe fc6a 	bl	8006958 <HAL_RCC_GetPCLK2Freq>
 8008084:	60f8      	str	r0, [r7, #12]
 8008086:	e002      	b.n	800808e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008088:	f7fe fc52 	bl	8006930 <HAL_RCC_GetPCLK1Freq>
 800808c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	4613      	mov	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	009a      	lsls	r2, r3, #2
 8008098:	441a      	add	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a4:	4a22      	ldr	r2, [pc, #136]	; (8008130 <UART_SetConfig+0x118>)
 80080a6:	fba2 2303 	umull	r2, r3, r2, r3
 80080aa:	095b      	lsrs	r3, r3, #5
 80080ac:	0119      	lsls	r1, r3, #4
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4613      	mov	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	009a      	lsls	r2, r3, #2
 80080b8:	441a      	add	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80080c4:	4b1a      	ldr	r3, [pc, #104]	; (8008130 <UART_SetConfig+0x118>)
 80080c6:	fba3 0302 	umull	r0, r3, r3, r2
 80080ca:	095b      	lsrs	r3, r3, #5
 80080cc:	2064      	movs	r0, #100	; 0x64
 80080ce:	fb00 f303 	mul.w	r3, r0, r3
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	011b      	lsls	r3, r3, #4
 80080d6:	3332      	adds	r3, #50	; 0x32
 80080d8:	4a15      	ldr	r2, [pc, #84]	; (8008130 <UART_SetConfig+0x118>)
 80080da:	fba2 2303 	umull	r2, r3, r2, r3
 80080de:	095b      	lsrs	r3, r3, #5
 80080e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080e4:	4419      	add	r1, r3
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	4613      	mov	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	009a      	lsls	r2, r3, #2
 80080f0:	441a      	add	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80080fc:	4b0c      	ldr	r3, [pc, #48]	; (8008130 <UART_SetConfig+0x118>)
 80080fe:	fba3 0302 	umull	r0, r3, r3, r2
 8008102:	095b      	lsrs	r3, r3, #5
 8008104:	2064      	movs	r0, #100	; 0x64
 8008106:	fb00 f303 	mul.w	r3, r0, r3
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	011b      	lsls	r3, r3, #4
 800810e:	3332      	adds	r3, #50	; 0x32
 8008110:	4a07      	ldr	r2, [pc, #28]	; (8008130 <UART_SetConfig+0x118>)
 8008112:	fba2 2303 	umull	r2, r3, r2, r3
 8008116:	095b      	lsrs	r3, r3, #5
 8008118:	f003 020f 	and.w	r2, r3, #15
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	440a      	add	r2, r1
 8008122:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008124:	bf00      	nop
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	40013800 	.word	0x40013800
 8008130:	51eb851f 	.word	0x51eb851f

08008134 <__errno>:
 8008134:	4b01      	ldr	r3, [pc, #4]	; (800813c <__errno+0x8>)
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	2000002c 	.word	0x2000002c

08008140 <__libc_init_array>:
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	2600      	movs	r6, #0
 8008144:	4d0c      	ldr	r5, [pc, #48]	; (8008178 <__libc_init_array+0x38>)
 8008146:	4c0d      	ldr	r4, [pc, #52]	; (800817c <__libc_init_array+0x3c>)
 8008148:	1b64      	subs	r4, r4, r5
 800814a:	10a4      	asrs	r4, r4, #2
 800814c:	42a6      	cmp	r6, r4
 800814e:	d109      	bne.n	8008164 <__libc_init_array+0x24>
 8008150:	f005 ffdc 	bl	800e10c <_init>
 8008154:	2600      	movs	r6, #0
 8008156:	4d0a      	ldr	r5, [pc, #40]	; (8008180 <__libc_init_array+0x40>)
 8008158:	4c0a      	ldr	r4, [pc, #40]	; (8008184 <__libc_init_array+0x44>)
 800815a:	1b64      	subs	r4, r4, r5
 800815c:	10a4      	asrs	r4, r4, #2
 800815e:	42a6      	cmp	r6, r4
 8008160:	d105      	bne.n	800816e <__libc_init_array+0x2e>
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	f855 3b04 	ldr.w	r3, [r5], #4
 8008168:	4798      	blx	r3
 800816a:	3601      	adds	r6, #1
 800816c:	e7ee      	b.n	800814c <__libc_init_array+0xc>
 800816e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008172:	4798      	blx	r3
 8008174:	3601      	adds	r6, #1
 8008176:	e7f2      	b.n	800815e <__libc_init_array+0x1e>
 8008178:	0800e9e8 	.word	0x0800e9e8
 800817c:	0800e9e8 	.word	0x0800e9e8
 8008180:	0800e9e8 	.word	0x0800e9e8
 8008184:	0800e9ec 	.word	0x0800e9ec

08008188 <memset>:
 8008188:	4603      	mov	r3, r0
 800818a:	4402      	add	r2, r0
 800818c:	4293      	cmp	r3, r2
 800818e:	d100      	bne.n	8008192 <memset+0xa>
 8008190:	4770      	bx	lr
 8008192:	f803 1b01 	strb.w	r1, [r3], #1
 8008196:	e7f9      	b.n	800818c <memset+0x4>

08008198 <__cvt>:
 8008198:	2b00      	cmp	r3, #0
 800819a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800819e:	461f      	mov	r7, r3
 80081a0:	bfbb      	ittet	lt
 80081a2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80081a6:	461f      	movlt	r7, r3
 80081a8:	2300      	movge	r3, #0
 80081aa:	232d      	movlt	r3, #45	; 0x2d
 80081ac:	b088      	sub	sp, #32
 80081ae:	4614      	mov	r4, r2
 80081b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80081b4:	7013      	strb	r3, [r2, #0]
 80081b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081b8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80081bc:	f023 0820 	bic.w	r8, r3, #32
 80081c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081c4:	d005      	beq.n	80081d2 <__cvt+0x3a>
 80081c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80081ca:	d100      	bne.n	80081ce <__cvt+0x36>
 80081cc:	3501      	adds	r5, #1
 80081ce:	2302      	movs	r3, #2
 80081d0:	e000      	b.n	80081d4 <__cvt+0x3c>
 80081d2:	2303      	movs	r3, #3
 80081d4:	aa07      	add	r2, sp, #28
 80081d6:	9204      	str	r2, [sp, #16]
 80081d8:	aa06      	add	r2, sp, #24
 80081da:	e9cd a202 	strd	sl, r2, [sp, #8]
 80081de:	e9cd 3500 	strd	r3, r5, [sp]
 80081e2:	4622      	mov	r2, r4
 80081e4:	463b      	mov	r3, r7
 80081e6:	f001 fd9f 	bl	8009d28 <_dtoa_r>
 80081ea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80081ee:	4606      	mov	r6, r0
 80081f0:	d102      	bne.n	80081f8 <__cvt+0x60>
 80081f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081f4:	07db      	lsls	r3, r3, #31
 80081f6:	d522      	bpl.n	800823e <__cvt+0xa6>
 80081f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081fc:	eb06 0905 	add.w	r9, r6, r5
 8008200:	d110      	bne.n	8008224 <__cvt+0x8c>
 8008202:	7833      	ldrb	r3, [r6, #0]
 8008204:	2b30      	cmp	r3, #48	; 0x30
 8008206:	d10a      	bne.n	800821e <__cvt+0x86>
 8008208:	2200      	movs	r2, #0
 800820a:	2300      	movs	r3, #0
 800820c:	4620      	mov	r0, r4
 800820e:	4639      	mov	r1, r7
 8008210:	f7f8 fbca 	bl	80009a8 <__aeabi_dcmpeq>
 8008214:	b918      	cbnz	r0, 800821e <__cvt+0x86>
 8008216:	f1c5 0501 	rsb	r5, r5, #1
 800821a:	f8ca 5000 	str.w	r5, [sl]
 800821e:	f8da 3000 	ldr.w	r3, [sl]
 8008222:	4499      	add	r9, r3
 8008224:	2200      	movs	r2, #0
 8008226:	2300      	movs	r3, #0
 8008228:	4620      	mov	r0, r4
 800822a:	4639      	mov	r1, r7
 800822c:	f7f8 fbbc 	bl	80009a8 <__aeabi_dcmpeq>
 8008230:	b108      	cbz	r0, 8008236 <__cvt+0x9e>
 8008232:	f8cd 901c 	str.w	r9, [sp, #28]
 8008236:	2230      	movs	r2, #48	; 0x30
 8008238:	9b07      	ldr	r3, [sp, #28]
 800823a:	454b      	cmp	r3, r9
 800823c:	d307      	bcc.n	800824e <__cvt+0xb6>
 800823e:	4630      	mov	r0, r6
 8008240:	9b07      	ldr	r3, [sp, #28]
 8008242:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008244:	1b9b      	subs	r3, r3, r6
 8008246:	6013      	str	r3, [r2, #0]
 8008248:	b008      	add	sp, #32
 800824a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800824e:	1c59      	adds	r1, r3, #1
 8008250:	9107      	str	r1, [sp, #28]
 8008252:	701a      	strb	r2, [r3, #0]
 8008254:	e7f0      	b.n	8008238 <__cvt+0xa0>

08008256 <__exponent>:
 8008256:	4603      	mov	r3, r0
 8008258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800825a:	2900      	cmp	r1, #0
 800825c:	f803 2b02 	strb.w	r2, [r3], #2
 8008260:	bfb6      	itet	lt
 8008262:	222d      	movlt	r2, #45	; 0x2d
 8008264:	222b      	movge	r2, #43	; 0x2b
 8008266:	4249      	neglt	r1, r1
 8008268:	2909      	cmp	r1, #9
 800826a:	7042      	strb	r2, [r0, #1]
 800826c:	dd2b      	ble.n	80082c6 <__exponent+0x70>
 800826e:	f10d 0407 	add.w	r4, sp, #7
 8008272:	46a4      	mov	ip, r4
 8008274:	270a      	movs	r7, #10
 8008276:	fb91 f6f7 	sdiv	r6, r1, r7
 800827a:	460a      	mov	r2, r1
 800827c:	46a6      	mov	lr, r4
 800827e:	fb07 1516 	mls	r5, r7, r6, r1
 8008282:	2a63      	cmp	r2, #99	; 0x63
 8008284:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008288:	4631      	mov	r1, r6
 800828a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800828e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008292:	dcf0      	bgt.n	8008276 <__exponent+0x20>
 8008294:	3130      	adds	r1, #48	; 0x30
 8008296:	f1ae 0502 	sub.w	r5, lr, #2
 800829a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800829e:	4629      	mov	r1, r5
 80082a0:	1c44      	adds	r4, r0, #1
 80082a2:	4561      	cmp	r1, ip
 80082a4:	d30a      	bcc.n	80082bc <__exponent+0x66>
 80082a6:	f10d 0209 	add.w	r2, sp, #9
 80082aa:	eba2 020e 	sub.w	r2, r2, lr
 80082ae:	4565      	cmp	r5, ip
 80082b0:	bf88      	it	hi
 80082b2:	2200      	movhi	r2, #0
 80082b4:	4413      	add	r3, r2
 80082b6:	1a18      	subs	r0, r3, r0
 80082b8:	b003      	add	sp, #12
 80082ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082c0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80082c4:	e7ed      	b.n	80082a2 <__exponent+0x4c>
 80082c6:	2330      	movs	r3, #48	; 0x30
 80082c8:	3130      	adds	r1, #48	; 0x30
 80082ca:	7083      	strb	r3, [r0, #2]
 80082cc:	70c1      	strb	r1, [r0, #3]
 80082ce:	1d03      	adds	r3, r0, #4
 80082d0:	e7f1      	b.n	80082b6 <__exponent+0x60>
	...

080082d4 <_printf_float>:
 80082d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d8:	b091      	sub	sp, #68	; 0x44
 80082da:	460c      	mov	r4, r1
 80082dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80082e0:	4616      	mov	r6, r2
 80082e2:	461f      	mov	r7, r3
 80082e4:	4605      	mov	r5, r0
 80082e6:	f002 fe73 	bl	800afd0 <_localeconv_r>
 80082ea:	6803      	ldr	r3, [r0, #0]
 80082ec:	4618      	mov	r0, r3
 80082ee:	9309      	str	r3, [sp, #36]	; 0x24
 80082f0:	f7f7 ff2e 	bl	8000150 <strlen>
 80082f4:	2300      	movs	r3, #0
 80082f6:	930e      	str	r3, [sp, #56]	; 0x38
 80082f8:	f8d8 3000 	ldr.w	r3, [r8]
 80082fc:	900a      	str	r0, [sp, #40]	; 0x28
 80082fe:	3307      	adds	r3, #7
 8008300:	f023 0307 	bic.w	r3, r3, #7
 8008304:	f103 0208 	add.w	r2, r3, #8
 8008308:	f894 9018 	ldrb.w	r9, [r4, #24]
 800830c:	f8d4 b000 	ldr.w	fp, [r4]
 8008310:	f8c8 2000 	str.w	r2, [r8]
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800831c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008320:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008324:	930b      	str	r3, [sp, #44]	; 0x2c
 8008326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800832a:	4640      	mov	r0, r8
 800832c:	4b9c      	ldr	r3, [pc, #624]	; (80085a0 <_printf_float+0x2cc>)
 800832e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008330:	f7f8 fb6c 	bl	8000a0c <__aeabi_dcmpun>
 8008334:	bb70      	cbnz	r0, 8008394 <_printf_float+0xc0>
 8008336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800833a:	4640      	mov	r0, r8
 800833c:	4b98      	ldr	r3, [pc, #608]	; (80085a0 <_printf_float+0x2cc>)
 800833e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008340:	f7f8 fb46 	bl	80009d0 <__aeabi_dcmple>
 8008344:	bb30      	cbnz	r0, 8008394 <_printf_float+0xc0>
 8008346:	2200      	movs	r2, #0
 8008348:	2300      	movs	r3, #0
 800834a:	4640      	mov	r0, r8
 800834c:	4651      	mov	r1, sl
 800834e:	f7f8 fb35 	bl	80009bc <__aeabi_dcmplt>
 8008352:	b110      	cbz	r0, 800835a <_printf_float+0x86>
 8008354:	232d      	movs	r3, #45	; 0x2d
 8008356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800835a:	4b92      	ldr	r3, [pc, #584]	; (80085a4 <_printf_float+0x2d0>)
 800835c:	4892      	ldr	r0, [pc, #584]	; (80085a8 <_printf_float+0x2d4>)
 800835e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008362:	bf94      	ite	ls
 8008364:	4698      	movls	r8, r3
 8008366:	4680      	movhi	r8, r0
 8008368:	2303      	movs	r3, #3
 800836a:	f04f 0a00 	mov.w	sl, #0
 800836e:	6123      	str	r3, [r4, #16]
 8008370:	f02b 0304 	bic.w	r3, fp, #4
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	4633      	mov	r3, r6
 8008378:	4621      	mov	r1, r4
 800837a:	4628      	mov	r0, r5
 800837c:	9700      	str	r7, [sp, #0]
 800837e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008380:	f000 f9d4 	bl	800872c <_printf_common>
 8008384:	3001      	adds	r0, #1
 8008386:	f040 8090 	bne.w	80084aa <_printf_float+0x1d6>
 800838a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800838e:	b011      	add	sp, #68	; 0x44
 8008390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008394:	4642      	mov	r2, r8
 8008396:	4653      	mov	r3, sl
 8008398:	4640      	mov	r0, r8
 800839a:	4651      	mov	r1, sl
 800839c:	f7f8 fb36 	bl	8000a0c <__aeabi_dcmpun>
 80083a0:	b148      	cbz	r0, 80083b6 <_printf_float+0xe2>
 80083a2:	f1ba 0f00 	cmp.w	sl, #0
 80083a6:	bfb8      	it	lt
 80083a8:	232d      	movlt	r3, #45	; 0x2d
 80083aa:	4880      	ldr	r0, [pc, #512]	; (80085ac <_printf_float+0x2d8>)
 80083ac:	bfb8      	it	lt
 80083ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80083b2:	4b7f      	ldr	r3, [pc, #508]	; (80085b0 <_printf_float+0x2dc>)
 80083b4:	e7d3      	b.n	800835e <_printf_float+0x8a>
 80083b6:	6863      	ldr	r3, [r4, #4]
 80083b8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80083bc:	1c5a      	adds	r2, r3, #1
 80083be:	d142      	bne.n	8008446 <_printf_float+0x172>
 80083c0:	2306      	movs	r3, #6
 80083c2:	6063      	str	r3, [r4, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	9206      	str	r2, [sp, #24]
 80083c8:	aa0e      	add	r2, sp, #56	; 0x38
 80083ca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80083ce:	aa0d      	add	r2, sp, #52	; 0x34
 80083d0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80083d4:	9203      	str	r2, [sp, #12]
 80083d6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80083da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80083de:	6023      	str	r3, [r4, #0]
 80083e0:	6863      	ldr	r3, [r4, #4]
 80083e2:	4642      	mov	r2, r8
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	4628      	mov	r0, r5
 80083e8:	4653      	mov	r3, sl
 80083ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80083ec:	f7ff fed4 	bl	8008198 <__cvt>
 80083f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083f2:	4680      	mov	r8, r0
 80083f4:	2947      	cmp	r1, #71	; 0x47
 80083f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80083f8:	d108      	bne.n	800840c <_printf_float+0x138>
 80083fa:	1cc8      	adds	r0, r1, #3
 80083fc:	db02      	blt.n	8008404 <_printf_float+0x130>
 80083fe:	6863      	ldr	r3, [r4, #4]
 8008400:	4299      	cmp	r1, r3
 8008402:	dd40      	ble.n	8008486 <_printf_float+0x1b2>
 8008404:	f1a9 0902 	sub.w	r9, r9, #2
 8008408:	fa5f f989 	uxtb.w	r9, r9
 800840c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008410:	d81f      	bhi.n	8008452 <_printf_float+0x17e>
 8008412:	464a      	mov	r2, r9
 8008414:	3901      	subs	r1, #1
 8008416:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800841a:	910d      	str	r1, [sp, #52]	; 0x34
 800841c:	f7ff ff1b 	bl	8008256 <__exponent>
 8008420:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008422:	4682      	mov	sl, r0
 8008424:	1813      	adds	r3, r2, r0
 8008426:	2a01      	cmp	r2, #1
 8008428:	6123      	str	r3, [r4, #16]
 800842a:	dc02      	bgt.n	8008432 <_printf_float+0x15e>
 800842c:	6822      	ldr	r2, [r4, #0]
 800842e:	07d2      	lsls	r2, r2, #31
 8008430:	d501      	bpl.n	8008436 <_printf_float+0x162>
 8008432:	3301      	adds	r3, #1
 8008434:	6123      	str	r3, [r4, #16]
 8008436:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800843a:	2b00      	cmp	r3, #0
 800843c:	d09b      	beq.n	8008376 <_printf_float+0xa2>
 800843e:	232d      	movs	r3, #45	; 0x2d
 8008440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008444:	e797      	b.n	8008376 <_printf_float+0xa2>
 8008446:	2947      	cmp	r1, #71	; 0x47
 8008448:	d1bc      	bne.n	80083c4 <_printf_float+0xf0>
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1ba      	bne.n	80083c4 <_printf_float+0xf0>
 800844e:	2301      	movs	r3, #1
 8008450:	e7b7      	b.n	80083c2 <_printf_float+0xee>
 8008452:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008456:	d118      	bne.n	800848a <_printf_float+0x1b6>
 8008458:	2900      	cmp	r1, #0
 800845a:	6863      	ldr	r3, [r4, #4]
 800845c:	dd0b      	ble.n	8008476 <_printf_float+0x1a2>
 800845e:	6121      	str	r1, [r4, #16]
 8008460:	b913      	cbnz	r3, 8008468 <_printf_float+0x194>
 8008462:	6822      	ldr	r2, [r4, #0]
 8008464:	07d0      	lsls	r0, r2, #31
 8008466:	d502      	bpl.n	800846e <_printf_float+0x19a>
 8008468:	3301      	adds	r3, #1
 800846a:	440b      	add	r3, r1
 800846c:	6123      	str	r3, [r4, #16]
 800846e:	f04f 0a00 	mov.w	sl, #0
 8008472:	65a1      	str	r1, [r4, #88]	; 0x58
 8008474:	e7df      	b.n	8008436 <_printf_float+0x162>
 8008476:	b913      	cbnz	r3, 800847e <_printf_float+0x1aa>
 8008478:	6822      	ldr	r2, [r4, #0]
 800847a:	07d2      	lsls	r2, r2, #31
 800847c:	d501      	bpl.n	8008482 <_printf_float+0x1ae>
 800847e:	3302      	adds	r3, #2
 8008480:	e7f4      	b.n	800846c <_printf_float+0x198>
 8008482:	2301      	movs	r3, #1
 8008484:	e7f2      	b.n	800846c <_printf_float+0x198>
 8008486:	f04f 0967 	mov.w	r9, #103	; 0x67
 800848a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800848c:	4299      	cmp	r1, r3
 800848e:	db05      	blt.n	800849c <_printf_float+0x1c8>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	6121      	str	r1, [r4, #16]
 8008494:	07d8      	lsls	r0, r3, #31
 8008496:	d5ea      	bpl.n	800846e <_printf_float+0x19a>
 8008498:	1c4b      	adds	r3, r1, #1
 800849a:	e7e7      	b.n	800846c <_printf_float+0x198>
 800849c:	2900      	cmp	r1, #0
 800849e:	bfcc      	ite	gt
 80084a0:	2201      	movgt	r2, #1
 80084a2:	f1c1 0202 	rsble	r2, r1, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	e7e0      	b.n	800846c <_printf_float+0x198>
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	055a      	lsls	r2, r3, #21
 80084ae:	d407      	bmi.n	80084c0 <_printf_float+0x1ec>
 80084b0:	6923      	ldr	r3, [r4, #16]
 80084b2:	4642      	mov	r2, r8
 80084b4:	4631      	mov	r1, r6
 80084b6:	4628      	mov	r0, r5
 80084b8:	47b8      	blx	r7
 80084ba:	3001      	adds	r0, #1
 80084bc:	d12b      	bne.n	8008516 <_printf_float+0x242>
 80084be:	e764      	b.n	800838a <_printf_float+0xb6>
 80084c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80084c4:	f240 80dd 	bls.w	8008682 <_printf_float+0x3ae>
 80084c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084cc:	2200      	movs	r2, #0
 80084ce:	2300      	movs	r3, #0
 80084d0:	f7f8 fa6a 	bl	80009a8 <__aeabi_dcmpeq>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d033      	beq.n	8008540 <_printf_float+0x26c>
 80084d8:	2301      	movs	r3, #1
 80084da:	4631      	mov	r1, r6
 80084dc:	4628      	mov	r0, r5
 80084de:	4a35      	ldr	r2, [pc, #212]	; (80085b4 <_printf_float+0x2e0>)
 80084e0:	47b8      	blx	r7
 80084e2:	3001      	adds	r0, #1
 80084e4:	f43f af51 	beq.w	800838a <_printf_float+0xb6>
 80084e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80084ec:	429a      	cmp	r2, r3
 80084ee:	db02      	blt.n	80084f6 <_printf_float+0x222>
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	07d8      	lsls	r0, r3, #31
 80084f4:	d50f      	bpl.n	8008516 <_printf_float+0x242>
 80084f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084fa:	4631      	mov	r1, r6
 80084fc:	4628      	mov	r0, r5
 80084fe:	47b8      	blx	r7
 8008500:	3001      	adds	r0, #1
 8008502:	f43f af42 	beq.w	800838a <_printf_float+0xb6>
 8008506:	f04f 0800 	mov.w	r8, #0
 800850a:	f104 091a 	add.w	r9, r4, #26
 800850e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008510:	3b01      	subs	r3, #1
 8008512:	4543      	cmp	r3, r8
 8008514:	dc09      	bgt.n	800852a <_printf_float+0x256>
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	079b      	lsls	r3, r3, #30
 800851a:	f100 8102 	bmi.w	8008722 <_printf_float+0x44e>
 800851e:	68e0      	ldr	r0, [r4, #12]
 8008520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008522:	4298      	cmp	r0, r3
 8008524:	bfb8      	it	lt
 8008526:	4618      	movlt	r0, r3
 8008528:	e731      	b.n	800838e <_printf_float+0xba>
 800852a:	2301      	movs	r3, #1
 800852c:	464a      	mov	r2, r9
 800852e:	4631      	mov	r1, r6
 8008530:	4628      	mov	r0, r5
 8008532:	47b8      	blx	r7
 8008534:	3001      	adds	r0, #1
 8008536:	f43f af28 	beq.w	800838a <_printf_float+0xb6>
 800853a:	f108 0801 	add.w	r8, r8, #1
 800853e:	e7e6      	b.n	800850e <_printf_float+0x23a>
 8008540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008542:	2b00      	cmp	r3, #0
 8008544:	dc38      	bgt.n	80085b8 <_printf_float+0x2e4>
 8008546:	2301      	movs	r3, #1
 8008548:	4631      	mov	r1, r6
 800854a:	4628      	mov	r0, r5
 800854c:	4a19      	ldr	r2, [pc, #100]	; (80085b4 <_printf_float+0x2e0>)
 800854e:	47b8      	blx	r7
 8008550:	3001      	adds	r0, #1
 8008552:	f43f af1a 	beq.w	800838a <_printf_float+0xb6>
 8008556:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800855a:	4313      	orrs	r3, r2
 800855c:	d102      	bne.n	8008564 <_printf_float+0x290>
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	07d9      	lsls	r1, r3, #31
 8008562:	d5d8      	bpl.n	8008516 <_printf_float+0x242>
 8008564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008568:	4631      	mov	r1, r6
 800856a:	4628      	mov	r0, r5
 800856c:	47b8      	blx	r7
 800856e:	3001      	adds	r0, #1
 8008570:	f43f af0b 	beq.w	800838a <_printf_float+0xb6>
 8008574:	f04f 0900 	mov.w	r9, #0
 8008578:	f104 0a1a 	add.w	sl, r4, #26
 800857c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800857e:	425b      	negs	r3, r3
 8008580:	454b      	cmp	r3, r9
 8008582:	dc01      	bgt.n	8008588 <_printf_float+0x2b4>
 8008584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008586:	e794      	b.n	80084b2 <_printf_float+0x1de>
 8008588:	2301      	movs	r3, #1
 800858a:	4652      	mov	r2, sl
 800858c:	4631      	mov	r1, r6
 800858e:	4628      	mov	r0, r5
 8008590:	47b8      	blx	r7
 8008592:	3001      	adds	r0, #1
 8008594:	f43f aef9 	beq.w	800838a <_printf_float+0xb6>
 8008598:	f109 0901 	add.w	r9, r9, #1
 800859c:	e7ee      	b.n	800857c <_printf_float+0x2a8>
 800859e:	bf00      	nop
 80085a0:	7fefffff 	.word	0x7fefffff
 80085a4:	0800e474 	.word	0x0800e474
 80085a8:	0800e478 	.word	0x0800e478
 80085ac:	0800e480 	.word	0x0800e480
 80085b0:	0800e47c 	.word	0x0800e47c
 80085b4:	0800e484 	.word	0x0800e484
 80085b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085bc:	429a      	cmp	r2, r3
 80085be:	bfa8      	it	ge
 80085c0:	461a      	movge	r2, r3
 80085c2:	2a00      	cmp	r2, #0
 80085c4:	4691      	mov	r9, r2
 80085c6:	dc37      	bgt.n	8008638 <_printf_float+0x364>
 80085c8:	f04f 0b00 	mov.w	fp, #0
 80085cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085d0:	f104 021a 	add.w	r2, r4, #26
 80085d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80085d8:	ebaa 0309 	sub.w	r3, sl, r9
 80085dc:	455b      	cmp	r3, fp
 80085de:	dc33      	bgt.n	8008648 <_printf_float+0x374>
 80085e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80085e4:	429a      	cmp	r2, r3
 80085e6:	db3b      	blt.n	8008660 <_printf_float+0x38c>
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	07da      	lsls	r2, r3, #31
 80085ec:	d438      	bmi.n	8008660 <_printf_float+0x38c>
 80085ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80085f2:	eba2 030a 	sub.w	r3, r2, sl
 80085f6:	eba2 0901 	sub.w	r9, r2, r1
 80085fa:	4599      	cmp	r9, r3
 80085fc:	bfa8      	it	ge
 80085fe:	4699      	movge	r9, r3
 8008600:	f1b9 0f00 	cmp.w	r9, #0
 8008604:	dc34      	bgt.n	8008670 <_printf_float+0x39c>
 8008606:	f04f 0800 	mov.w	r8, #0
 800860a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800860e:	f104 0a1a 	add.w	sl, r4, #26
 8008612:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008616:	1a9b      	subs	r3, r3, r2
 8008618:	eba3 0309 	sub.w	r3, r3, r9
 800861c:	4543      	cmp	r3, r8
 800861e:	f77f af7a 	ble.w	8008516 <_printf_float+0x242>
 8008622:	2301      	movs	r3, #1
 8008624:	4652      	mov	r2, sl
 8008626:	4631      	mov	r1, r6
 8008628:	4628      	mov	r0, r5
 800862a:	47b8      	blx	r7
 800862c:	3001      	adds	r0, #1
 800862e:	f43f aeac 	beq.w	800838a <_printf_float+0xb6>
 8008632:	f108 0801 	add.w	r8, r8, #1
 8008636:	e7ec      	b.n	8008612 <_printf_float+0x33e>
 8008638:	4613      	mov	r3, r2
 800863a:	4631      	mov	r1, r6
 800863c:	4642      	mov	r2, r8
 800863e:	4628      	mov	r0, r5
 8008640:	47b8      	blx	r7
 8008642:	3001      	adds	r0, #1
 8008644:	d1c0      	bne.n	80085c8 <_printf_float+0x2f4>
 8008646:	e6a0      	b.n	800838a <_printf_float+0xb6>
 8008648:	2301      	movs	r3, #1
 800864a:	4631      	mov	r1, r6
 800864c:	4628      	mov	r0, r5
 800864e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008650:	47b8      	blx	r7
 8008652:	3001      	adds	r0, #1
 8008654:	f43f ae99 	beq.w	800838a <_printf_float+0xb6>
 8008658:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800865a:	f10b 0b01 	add.w	fp, fp, #1
 800865e:	e7b9      	b.n	80085d4 <_printf_float+0x300>
 8008660:	4631      	mov	r1, r6
 8008662:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008666:	4628      	mov	r0, r5
 8008668:	47b8      	blx	r7
 800866a:	3001      	adds	r0, #1
 800866c:	d1bf      	bne.n	80085ee <_printf_float+0x31a>
 800866e:	e68c      	b.n	800838a <_printf_float+0xb6>
 8008670:	464b      	mov	r3, r9
 8008672:	4631      	mov	r1, r6
 8008674:	4628      	mov	r0, r5
 8008676:	eb08 020a 	add.w	r2, r8, sl
 800867a:	47b8      	blx	r7
 800867c:	3001      	adds	r0, #1
 800867e:	d1c2      	bne.n	8008606 <_printf_float+0x332>
 8008680:	e683      	b.n	800838a <_printf_float+0xb6>
 8008682:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008684:	2a01      	cmp	r2, #1
 8008686:	dc01      	bgt.n	800868c <_printf_float+0x3b8>
 8008688:	07db      	lsls	r3, r3, #31
 800868a:	d537      	bpl.n	80086fc <_printf_float+0x428>
 800868c:	2301      	movs	r3, #1
 800868e:	4642      	mov	r2, r8
 8008690:	4631      	mov	r1, r6
 8008692:	4628      	mov	r0, r5
 8008694:	47b8      	blx	r7
 8008696:	3001      	adds	r0, #1
 8008698:	f43f ae77 	beq.w	800838a <_printf_float+0xb6>
 800869c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086a0:	4631      	mov	r1, r6
 80086a2:	4628      	mov	r0, r5
 80086a4:	47b8      	blx	r7
 80086a6:	3001      	adds	r0, #1
 80086a8:	f43f ae6f 	beq.w	800838a <_printf_float+0xb6>
 80086ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086b0:	2200      	movs	r2, #0
 80086b2:	2300      	movs	r3, #0
 80086b4:	f7f8 f978 	bl	80009a8 <__aeabi_dcmpeq>
 80086b8:	b9d8      	cbnz	r0, 80086f2 <_printf_float+0x41e>
 80086ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086bc:	f108 0201 	add.w	r2, r8, #1
 80086c0:	3b01      	subs	r3, #1
 80086c2:	4631      	mov	r1, r6
 80086c4:	4628      	mov	r0, r5
 80086c6:	47b8      	blx	r7
 80086c8:	3001      	adds	r0, #1
 80086ca:	d10e      	bne.n	80086ea <_printf_float+0x416>
 80086cc:	e65d      	b.n	800838a <_printf_float+0xb6>
 80086ce:	2301      	movs	r3, #1
 80086d0:	464a      	mov	r2, r9
 80086d2:	4631      	mov	r1, r6
 80086d4:	4628      	mov	r0, r5
 80086d6:	47b8      	blx	r7
 80086d8:	3001      	adds	r0, #1
 80086da:	f43f ae56 	beq.w	800838a <_printf_float+0xb6>
 80086de:	f108 0801 	add.w	r8, r8, #1
 80086e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086e4:	3b01      	subs	r3, #1
 80086e6:	4543      	cmp	r3, r8
 80086e8:	dcf1      	bgt.n	80086ce <_printf_float+0x3fa>
 80086ea:	4653      	mov	r3, sl
 80086ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80086f0:	e6e0      	b.n	80084b4 <_printf_float+0x1e0>
 80086f2:	f04f 0800 	mov.w	r8, #0
 80086f6:	f104 091a 	add.w	r9, r4, #26
 80086fa:	e7f2      	b.n	80086e2 <_printf_float+0x40e>
 80086fc:	2301      	movs	r3, #1
 80086fe:	4642      	mov	r2, r8
 8008700:	e7df      	b.n	80086c2 <_printf_float+0x3ee>
 8008702:	2301      	movs	r3, #1
 8008704:	464a      	mov	r2, r9
 8008706:	4631      	mov	r1, r6
 8008708:	4628      	mov	r0, r5
 800870a:	47b8      	blx	r7
 800870c:	3001      	adds	r0, #1
 800870e:	f43f ae3c 	beq.w	800838a <_printf_float+0xb6>
 8008712:	f108 0801 	add.w	r8, r8, #1
 8008716:	68e3      	ldr	r3, [r4, #12]
 8008718:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800871a:	1a5b      	subs	r3, r3, r1
 800871c:	4543      	cmp	r3, r8
 800871e:	dcf0      	bgt.n	8008702 <_printf_float+0x42e>
 8008720:	e6fd      	b.n	800851e <_printf_float+0x24a>
 8008722:	f04f 0800 	mov.w	r8, #0
 8008726:	f104 0919 	add.w	r9, r4, #25
 800872a:	e7f4      	b.n	8008716 <_printf_float+0x442>

0800872c <_printf_common>:
 800872c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008730:	4616      	mov	r6, r2
 8008732:	4699      	mov	r9, r3
 8008734:	688a      	ldr	r2, [r1, #8]
 8008736:	690b      	ldr	r3, [r1, #16]
 8008738:	4607      	mov	r7, r0
 800873a:	4293      	cmp	r3, r2
 800873c:	bfb8      	it	lt
 800873e:	4613      	movlt	r3, r2
 8008740:	6033      	str	r3, [r6, #0]
 8008742:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008746:	460c      	mov	r4, r1
 8008748:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800874c:	b10a      	cbz	r2, 8008752 <_printf_common+0x26>
 800874e:	3301      	adds	r3, #1
 8008750:	6033      	str	r3, [r6, #0]
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	0699      	lsls	r1, r3, #26
 8008756:	bf42      	ittt	mi
 8008758:	6833      	ldrmi	r3, [r6, #0]
 800875a:	3302      	addmi	r3, #2
 800875c:	6033      	strmi	r3, [r6, #0]
 800875e:	6825      	ldr	r5, [r4, #0]
 8008760:	f015 0506 	ands.w	r5, r5, #6
 8008764:	d106      	bne.n	8008774 <_printf_common+0x48>
 8008766:	f104 0a19 	add.w	sl, r4, #25
 800876a:	68e3      	ldr	r3, [r4, #12]
 800876c:	6832      	ldr	r2, [r6, #0]
 800876e:	1a9b      	subs	r3, r3, r2
 8008770:	42ab      	cmp	r3, r5
 8008772:	dc28      	bgt.n	80087c6 <_printf_common+0x9a>
 8008774:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008778:	1e13      	subs	r3, r2, #0
 800877a:	6822      	ldr	r2, [r4, #0]
 800877c:	bf18      	it	ne
 800877e:	2301      	movne	r3, #1
 8008780:	0692      	lsls	r2, r2, #26
 8008782:	d42d      	bmi.n	80087e0 <_printf_common+0xb4>
 8008784:	4649      	mov	r1, r9
 8008786:	4638      	mov	r0, r7
 8008788:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800878c:	47c0      	blx	r8
 800878e:	3001      	adds	r0, #1
 8008790:	d020      	beq.n	80087d4 <_printf_common+0xa8>
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	68e5      	ldr	r5, [r4, #12]
 8008796:	f003 0306 	and.w	r3, r3, #6
 800879a:	2b04      	cmp	r3, #4
 800879c:	bf18      	it	ne
 800879e:	2500      	movne	r5, #0
 80087a0:	6832      	ldr	r2, [r6, #0]
 80087a2:	f04f 0600 	mov.w	r6, #0
 80087a6:	68a3      	ldr	r3, [r4, #8]
 80087a8:	bf08      	it	eq
 80087aa:	1aad      	subeq	r5, r5, r2
 80087ac:	6922      	ldr	r2, [r4, #16]
 80087ae:	bf08      	it	eq
 80087b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087b4:	4293      	cmp	r3, r2
 80087b6:	bfc4      	itt	gt
 80087b8:	1a9b      	subgt	r3, r3, r2
 80087ba:	18ed      	addgt	r5, r5, r3
 80087bc:	341a      	adds	r4, #26
 80087be:	42b5      	cmp	r5, r6
 80087c0:	d11a      	bne.n	80087f8 <_printf_common+0xcc>
 80087c2:	2000      	movs	r0, #0
 80087c4:	e008      	b.n	80087d8 <_printf_common+0xac>
 80087c6:	2301      	movs	r3, #1
 80087c8:	4652      	mov	r2, sl
 80087ca:	4649      	mov	r1, r9
 80087cc:	4638      	mov	r0, r7
 80087ce:	47c0      	blx	r8
 80087d0:	3001      	adds	r0, #1
 80087d2:	d103      	bne.n	80087dc <_printf_common+0xb0>
 80087d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087dc:	3501      	adds	r5, #1
 80087de:	e7c4      	b.n	800876a <_printf_common+0x3e>
 80087e0:	2030      	movs	r0, #48	; 0x30
 80087e2:	18e1      	adds	r1, r4, r3
 80087e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087ee:	4422      	add	r2, r4
 80087f0:	3302      	adds	r3, #2
 80087f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087f6:	e7c5      	b.n	8008784 <_printf_common+0x58>
 80087f8:	2301      	movs	r3, #1
 80087fa:	4622      	mov	r2, r4
 80087fc:	4649      	mov	r1, r9
 80087fe:	4638      	mov	r0, r7
 8008800:	47c0      	blx	r8
 8008802:	3001      	adds	r0, #1
 8008804:	d0e6      	beq.n	80087d4 <_printf_common+0xa8>
 8008806:	3601      	adds	r6, #1
 8008808:	e7d9      	b.n	80087be <_printf_common+0x92>
	...

0800880c <_printf_i>:
 800880c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008810:	460c      	mov	r4, r1
 8008812:	7e27      	ldrb	r7, [r4, #24]
 8008814:	4691      	mov	r9, r2
 8008816:	2f78      	cmp	r7, #120	; 0x78
 8008818:	4680      	mov	r8, r0
 800881a:	469a      	mov	sl, r3
 800881c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800881e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008822:	d807      	bhi.n	8008834 <_printf_i+0x28>
 8008824:	2f62      	cmp	r7, #98	; 0x62
 8008826:	d80a      	bhi.n	800883e <_printf_i+0x32>
 8008828:	2f00      	cmp	r7, #0
 800882a:	f000 80d9 	beq.w	80089e0 <_printf_i+0x1d4>
 800882e:	2f58      	cmp	r7, #88	; 0x58
 8008830:	f000 80a4 	beq.w	800897c <_printf_i+0x170>
 8008834:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008838:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800883c:	e03a      	b.n	80088b4 <_printf_i+0xa8>
 800883e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008842:	2b15      	cmp	r3, #21
 8008844:	d8f6      	bhi.n	8008834 <_printf_i+0x28>
 8008846:	a001      	add	r0, pc, #4	; (adr r0, 800884c <_printf_i+0x40>)
 8008848:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800884c:	080088a5 	.word	0x080088a5
 8008850:	080088b9 	.word	0x080088b9
 8008854:	08008835 	.word	0x08008835
 8008858:	08008835 	.word	0x08008835
 800885c:	08008835 	.word	0x08008835
 8008860:	08008835 	.word	0x08008835
 8008864:	080088b9 	.word	0x080088b9
 8008868:	08008835 	.word	0x08008835
 800886c:	08008835 	.word	0x08008835
 8008870:	08008835 	.word	0x08008835
 8008874:	08008835 	.word	0x08008835
 8008878:	080089c7 	.word	0x080089c7
 800887c:	080088e9 	.word	0x080088e9
 8008880:	080089a9 	.word	0x080089a9
 8008884:	08008835 	.word	0x08008835
 8008888:	08008835 	.word	0x08008835
 800888c:	080089e9 	.word	0x080089e9
 8008890:	08008835 	.word	0x08008835
 8008894:	080088e9 	.word	0x080088e9
 8008898:	08008835 	.word	0x08008835
 800889c:	08008835 	.word	0x08008835
 80088a0:	080089b1 	.word	0x080089b1
 80088a4:	680b      	ldr	r3, [r1, #0]
 80088a6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088aa:	1d1a      	adds	r2, r3, #4
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	600a      	str	r2, [r1, #0]
 80088b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088b4:	2301      	movs	r3, #1
 80088b6:	e0a4      	b.n	8008a02 <_printf_i+0x1f6>
 80088b8:	6825      	ldr	r5, [r4, #0]
 80088ba:	6808      	ldr	r0, [r1, #0]
 80088bc:	062e      	lsls	r6, r5, #24
 80088be:	f100 0304 	add.w	r3, r0, #4
 80088c2:	d50a      	bpl.n	80088da <_printf_i+0xce>
 80088c4:	6805      	ldr	r5, [r0, #0]
 80088c6:	600b      	str	r3, [r1, #0]
 80088c8:	2d00      	cmp	r5, #0
 80088ca:	da03      	bge.n	80088d4 <_printf_i+0xc8>
 80088cc:	232d      	movs	r3, #45	; 0x2d
 80088ce:	426d      	negs	r5, r5
 80088d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088d4:	230a      	movs	r3, #10
 80088d6:	485e      	ldr	r0, [pc, #376]	; (8008a50 <_printf_i+0x244>)
 80088d8:	e019      	b.n	800890e <_printf_i+0x102>
 80088da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80088de:	6805      	ldr	r5, [r0, #0]
 80088e0:	600b      	str	r3, [r1, #0]
 80088e2:	bf18      	it	ne
 80088e4:	b22d      	sxthne	r5, r5
 80088e6:	e7ef      	b.n	80088c8 <_printf_i+0xbc>
 80088e8:	680b      	ldr	r3, [r1, #0]
 80088ea:	6825      	ldr	r5, [r4, #0]
 80088ec:	1d18      	adds	r0, r3, #4
 80088ee:	6008      	str	r0, [r1, #0]
 80088f0:	0628      	lsls	r0, r5, #24
 80088f2:	d501      	bpl.n	80088f8 <_printf_i+0xec>
 80088f4:	681d      	ldr	r5, [r3, #0]
 80088f6:	e002      	b.n	80088fe <_printf_i+0xf2>
 80088f8:	0669      	lsls	r1, r5, #25
 80088fa:	d5fb      	bpl.n	80088f4 <_printf_i+0xe8>
 80088fc:	881d      	ldrh	r5, [r3, #0]
 80088fe:	2f6f      	cmp	r7, #111	; 0x6f
 8008900:	bf0c      	ite	eq
 8008902:	2308      	moveq	r3, #8
 8008904:	230a      	movne	r3, #10
 8008906:	4852      	ldr	r0, [pc, #328]	; (8008a50 <_printf_i+0x244>)
 8008908:	2100      	movs	r1, #0
 800890a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800890e:	6866      	ldr	r6, [r4, #4]
 8008910:	2e00      	cmp	r6, #0
 8008912:	bfa8      	it	ge
 8008914:	6821      	ldrge	r1, [r4, #0]
 8008916:	60a6      	str	r6, [r4, #8]
 8008918:	bfa4      	itt	ge
 800891a:	f021 0104 	bicge.w	r1, r1, #4
 800891e:	6021      	strge	r1, [r4, #0]
 8008920:	b90d      	cbnz	r5, 8008926 <_printf_i+0x11a>
 8008922:	2e00      	cmp	r6, #0
 8008924:	d04d      	beq.n	80089c2 <_printf_i+0x1b6>
 8008926:	4616      	mov	r6, r2
 8008928:	fbb5 f1f3 	udiv	r1, r5, r3
 800892c:	fb03 5711 	mls	r7, r3, r1, r5
 8008930:	5dc7      	ldrb	r7, [r0, r7]
 8008932:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008936:	462f      	mov	r7, r5
 8008938:	42bb      	cmp	r3, r7
 800893a:	460d      	mov	r5, r1
 800893c:	d9f4      	bls.n	8008928 <_printf_i+0x11c>
 800893e:	2b08      	cmp	r3, #8
 8008940:	d10b      	bne.n	800895a <_printf_i+0x14e>
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	07df      	lsls	r7, r3, #31
 8008946:	d508      	bpl.n	800895a <_printf_i+0x14e>
 8008948:	6923      	ldr	r3, [r4, #16]
 800894a:	6861      	ldr	r1, [r4, #4]
 800894c:	4299      	cmp	r1, r3
 800894e:	bfde      	ittt	le
 8008950:	2330      	movle	r3, #48	; 0x30
 8008952:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008956:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800895a:	1b92      	subs	r2, r2, r6
 800895c:	6122      	str	r2, [r4, #16]
 800895e:	464b      	mov	r3, r9
 8008960:	4621      	mov	r1, r4
 8008962:	4640      	mov	r0, r8
 8008964:	f8cd a000 	str.w	sl, [sp]
 8008968:	aa03      	add	r2, sp, #12
 800896a:	f7ff fedf 	bl	800872c <_printf_common>
 800896e:	3001      	adds	r0, #1
 8008970:	d14c      	bne.n	8008a0c <_printf_i+0x200>
 8008972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008976:	b004      	add	sp, #16
 8008978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800897c:	4834      	ldr	r0, [pc, #208]	; (8008a50 <_printf_i+0x244>)
 800897e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008982:	680e      	ldr	r6, [r1, #0]
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	f856 5b04 	ldr.w	r5, [r6], #4
 800898a:	061f      	lsls	r7, r3, #24
 800898c:	600e      	str	r6, [r1, #0]
 800898e:	d514      	bpl.n	80089ba <_printf_i+0x1ae>
 8008990:	07d9      	lsls	r1, r3, #31
 8008992:	bf44      	itt	mi
 8008994:	f043 0320 	orrmi.w	r3, r3, #32
 8008998:	6023      	strmi	r3, [r4, #0]
 800899a:	b91d      	cbnz	r5, 80089a4 <_printf_i+0x198>
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	f023 0320 	bic.w	r3, r3, #32
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	2310      	movs	r3, #16
 80089a6:	e7af      	b.n	8008908 <_printf_i+0xfc>
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	f043 0320 	orr.w	r3, r3, #32
 80089ae:	6023      	str	r3, [r4, #0]
 80089b0:	2378      	movs	r3, #120	; 0x78
 80089b2:	4828      	ldr	r0, [pc, #160]	; (8008a54 <_printf_i+0x248>)
 80089b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089b8:	e7e3      	b.n	8008982 <_printf_i+0x176>
 80089ba:	065e      	lsls	r6, r3, #25
 80089bc:	bf48      	it	mi
 80089be:	b2ad      	uxthmi	r5, r5
 80089c0:	e7e6      	b.n	8008990 <_printf_i+0x184>
 80089c2:	4616      	mov	r6, r2
 80089c4:	e7bb      	b.n	800893e <_printf_i+0x132>
 80089c6:	680b      	ldr	r3, [r1, #0]
 80089c8:	6826      	ldr	r6, [r4, #0]
 80089ca:	1d1d      	adds	r5, r3, #4
 80089cc:	6960      	ldr	r0, [r4, #20]
 80089ce:	600d      	str	r5, [r1, #0]
 80089d0:	0635      	lsls	r5, r6, #24
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	d501      	bpl.n	80089da <_printf_i+0x1ce>
 80089d6:	6018      	str	r0, [r3, #0]
 80089d8:	e002      	b.n	80089e0 <_printf_i+0x1d4>
 80089da:	0671      	lsls	r1, r6, #25
 80089dc:	d5fb      	bpl.n	80089d6 <_printf_i+0x1ca>
 80089de:	8018      	strh	r0, [r3, #0]
 80089e0:	2300      	movs	r3, #0
 80089e2:	4616      	mov	r6, r2
 80089e4:	6123      	str	r3, [r4, #16]
 80089e6:	e7ba      	b.n	800895e <_printf_i+0x152>
 80089e8:	680b      	ldr	r3, [r1, #0]
 80089ea:	1d1a      	adds	r2, r3, #4
 80089ec:	600a      	str	r2, [r1, #0]
 80089ee:	681e      	ldr	r6, [r3, #0]
 80089f0:	2100      	movs	r1, #0
 80089f2:	4630      	mov	r0, r6
 80089f4:	6862      	ldr	r2, [r4, #4]
 80089f6:	f002 fb09 	bl	800b00c <memchr>
 80089fa:	b108      	cbz	r0, 8008a00 <_printf_i+0x1f4>
 80089fc:	1b80      	subs	r0, r0, r6
 80089fe:	6060      	str	r0, [r4, #4]
 8008a00:	6863      	ldr	r3, [r4, #4]
 8008a02:	6123      	str	r3, [r4, #16]
 8008a04:	2300      	movs	r3, #0
 8008a06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a0a:	e7a8      	b.n	800895e <_printf_i+0x152>
 8008a0c:	4632      	mov	r2, r6
 8008a0e:	4649      	mov	r1, r9
 8008a10:	4640      	mov	r0, r8
 8008a12:	6923      	ldr	r3, [r4, #16]
 8008a14:	47d0      	blx	sl
 8008a16:	3001      	adds	r0, #1
 8008a18:	d0ab      	beq.n	8008972 <_printf_i+0x166>
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	079b      	lsls	r3, r3, #30
 8008a1e:	d413      	bmi.n	8008a48 <_printf_i+0x23c>
 8008a20:	68e0      	ldr	r0, [r4, #12]
 8008a22:	9b03      	ldr	r3, [sp, #12]
 8008a24:	4298      	cmp	r0, r3
 8008a26:	bfb8      	it	lt
 8008a28:	4618      	movlt	r0, r3
 8008a2a:	e7a4      	b.n	8008976 <_printf_i+0x16a>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	4632      	mov	r2, r6
 8008a30:	4649      	mov	r1, r9
 8008a32:	4640      	mov	r0, r8
 8008a34:	47d0      	blx	sl
 8008a36:	3001      	adds	r0, #1
 8008a38:	d09b      	beq.n	8008972 <_printf_i+0x166>
 8008a3a:	3501      	adds	r5, #1
 8008a3c:	68e3      	ldr	r3, [r4, #12]
 8008a3e:	9903      	ldr	r1, [sp, #12]
 8008a40:	1a5b      	subs	r3, r3, r1
 8008a42:	42ab      	cmp	r3, r5
 8008a44:	dcf2      	bgt.n	8008a2c <_printf_i+0x220>
 8008a46:	e7eb      	b.n	8008a20 <_printf_i+0x214>
 8008a48:	2500      	movs	r5, #0
 8008a4a:	f104 0619 	add.w	r6, r4, #25
 8008a4e:	e7f5      	b.n	8008a3c <_printf_i+0x230>
 8008a50:	0800e486 	.word	0x0800e486
 8008a54:	0800e497 	.word	0x0800e497

08008a58 <_scanf_float>:
 8008a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5c:	b087      	sub	sp, #28
 8008a5e:	9303      	str	r3, [sp, #12]
 8008a60:	688b      	ldr	r3, [r1, #8]
 8008a62:	4617      	mov	r7, r2
 8008a64:	1e5a      	subs	r2, r3, #1
 8008a66:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008a6a:	bf85      	ittet	hi
 8008a6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008a70:	195b      	addhi	r3, r3, r5
 8008a72:	2300      	movls	r3, #0
 8008a74:	9302      	strhi	r3, [sp, #8]
 8008a76:	bf88      	it	hi
 8008a78:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008a7c:	468b      	mov	fp, r1
 8008a7e:	f04f 0500 	mov.w	r5, #0
 8008a82:	bf8c      	ite	hi
 8008a84:	608b      	strhi	r3, [r1, #8]
 8008a86:	9302      	strls	r3, [sp, #8]
 8008a88:	680b      	ldr	r3, [r1, #0]
 8008a8a:	4680      	mov	r8, r0
 8008a8c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008a90:	f84b 3b1c 	str.w	r3, [fp], #28
 8008a94:	460c      	mov	r4, r1
 8008a96:	465e      	mov	r6, fp
 8008a98:	46aa      	mov	sl, r5
 8008a9a:	46a9      	mov	r9, r5
 8008a9c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008aa0:	9501      	str	r5, [sp, #4]
 8008aa2:	68a2      	ldr	r2, [r4, #8]
 8008aa4:	b152      	cbz	r2, 8008abc <_scanf_float+0x64>
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	2b4e      	cmp	r3, #78	; 0x4e
 8008aac:	d864      	bhi.n	8008b78 <_scanf_float+0x120>
 8008aae:	2b40      	cmp	r3, #64	; 0x40
 8008ab0:	d83c      	bhi.n	8008b2c <_scanf_float+0xd4>
 8008ab2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008ab6:	b2c8      	uxtb	r0, r1
 8008ab8:	280e      	cmp	r0, #14
 8008aba:	d93a      	bls.n	8008b32 <_scanf_float+0xda>
 8008abc:	f1b9 0f00 	cmp.w	r9, #0
 8008ac0:	d003      	beq.n	8008aca <_scanf_float+0x72>
 8008ac2:	6823      	ldr	r3, [r4, #0]
 8008ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008ace:	f1ba 0f01 	cmp.w	sl, #1
 8008ad2:	f200 8113 	bhi.w	8008cfc <_scanf_float+0x2a4>
 8008ad6:	455e      	cmp	r6, fp
 8008ad8:	f200 8105 	bhi.w	8008ce6 <_scanf_float+0x28e>
 8008adc:	2501      	movs	r5, #1
 8008ade:	4628      	mov	r0, r5
 8008ae0:	b007      	add	sp, #28
 8008ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008aea:	2a0d      	cmp	r2, #13
 8008aec:	d8e6      	bhi.n	8008abc <_scanf_float+0x64>
 8008aee:	a101      	add	r1, pc, #4	; (adr r1, 8008af4 <_scanf_float+0x9c>)
 8008af0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008af4:	08008c33 	.word	0x08008c33
 8008af8:	08008abd 	.word	0x08008abd
 8008afc:	08008abd 	.word	0x08008abd
 8008b00:	08008abd 	.word	0x08008abd
 8008b04:	08008c93 	.word	0x08008c93
 8008b08:	08008c6b 	.word	0x08008c6b
 8008b0c:	08008abd 	.word	0x08008abd
 8008b10:	08008abd 	.word	0x08008abd
 8008b14:	08008c41 	.word	0x08008c41
 8008b18:	08008abd 	.word	0x08008abd
 8008b1c:	08008abd 	.word	0x08008abd
 8008b20:	08008abd 	.word	0x08008abd
 8008b24:	08008abd 	.word	0x08008abd
 8008b28:	08008bf9 	.word	0x08008bf9
 8008b2c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008b30:	e7db      	b.n	8008aea <_scanf_float+0x92>
 8008b32:	290e      	cmp	r1, #14
 8008b34:	d8c2      	bhi.n	8008abc <_scanf_float+0x64>
 8008b36:	a001      	add	r0, pc, #4	; (adr r0, 8008b3c <_scanf_float+0xe4>)
 8008b38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008b3c:	08008beb 	.word	0x08008beb
 8008b40:	08008abd 	.word	0x08008abd
 8008b44:	08008beb 	.word	0x08008beb
 8008b48:	08008c7f 	.word	0x08008c7f
 8008b4c:	08008abd 	.word	0x08008abd
 8008b50:	08008b99 	.word	0x08008b99
 8008b54:	08008bd5 	.word	0x08008bd5
 8008b58:	08008bd5 	.word	0x08008bd5
 8008b5c:	08008bd5 	.word	0x08008bd5
 8008b60:	08008bd5 	.word	0x08008bd5
 8008b64:	08008bd5 	.word	0x08008bd5
 8008b68:	08008bd5 	.word	0x08008bd5
 8008b6c:	08008bd5 	.word	0x08008bd5
 8008b70:	08008bd5 	.word	0x08008bd5
 8008b74:	08008bd5 	.word	0x08008bd5
 8008b78:	2b6e      	cmp	r3, #110	; 0x6e
 8008b7a:	d809      	bhi.n	8008b90 <_scanf_float+0x138>
 8008b7c:	2b60      	cmp	r3, #96	; 0x60
 8008b7e:	d8b2      	bhi.n	8008ae6 <_scanf_float+0x8e>
 8008b80:	2b54      	cmp	r3, #84	; 0x54
 8008b82:	d077      	beq.n	8008c74 <_scanf_float+0x21c>
 8008b84:	2b59      	cmp	r3, #89	; 0x59
 8008b86:	d199      	bne.n	8008abc <_scanf_float+0x64>
 8008b88:	2d07      	cmp	r5, #7
 8008b8a:	d197      	bne.n	8008abc <_scanf_float+0x64>
 8008b8c:	2508      	movs	r5, #8
 8008b8e:	e029      	b.n	8008be4 <_scanf_float+0x18c>
 8008b90:	2b74      	cmp	r3, #116	; 0x74
 8008b92:	d06f      	beq.n	8008c74 <_scanf_float+0x21c>
 8008b94:	2b79      	cmp	r3, #121	; 0x79
 8008b96:	e7f6      	b.n	8008b86 <_scanf_float+0x12e>
 8008b98:	6821      	ldr	r1, [r4, #0]
 8008b9a:	05c8      	lsls	r0, r1, #23
 8008b9c:	d51a      	bpl.n	8008bd4 <_scanf_float+0x17c>
 8008b9e:	9b02      	ldr	r3, [sp, #8]
 8008ba0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008ba4:	6021      	str	r1, [r4, #0]
 8008ba6:	f109 0901 	add.w	r9, r9, #1
 8008baa:	b11b      	cbz	r3, 8008bb4 <_scanf_float+0x15c>
 8008bac:	3b01      	subs	r3, #1
 8008bae:	3201      	adds	r2, #1
 8008bb0:	9302      	str	r3, [sp, #8]
 8008bb2:	60a2      	str	r2, [r4, #8]
 8008bb4:	68a3      	ldr	r3, [r4, #8]
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	60a3      	str	r3, [r4, #8]
 8008bba:	6923      	ldr	r3, [r4, #16]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	6123      	str	r3, [r4, #16]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	607b      	str	r3, [r7, #4]
 8008bc8:	f340 8084 	ble.w	8008cd4 <_scanf_float+0x27c>
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	603b      	str	r3, [r7, #0]
 8008bd2:	e766      	b.n	8008aa2 <_scanf_float+0x4a>
 8008bd4:	eb1a 0f05 	cmn.w	sl, r5
 8008bd8:	f47f af70 	bne.w	8008abc <_scanf_float+0x64>
 8008bdc:	6822      	ldr	r2, [r4, #0]
 8008bde:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008be2:	6022      	str	r2, [r4, #0]
 8008be4:	f806 3b01 	strb.w	r3, [r6], #1
 8008be8:	e7e4      	b.n	8008bb4 <_scanf_float+0x15c>
 8008bea:	6822      	ldr	r2, [r4, #0]
 8008bec:	0610      	lsls	r0, r2, #24
 8008bee:	f57f af65 	bpl.w	8008abc <_scanf_float+0x64>
 8008bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bf6:	e7f4      	b.n	8008be2 <_scanf_float+0x18a>
 8008bf8:	f1ba 0f00 	cmp.w	sl, #0
 8008bfc:	d10e      	bne.n	8008c1c <_scanf_float+0x1c4>
 8008bfe:	f1b9 0f00 	cmp.w	r9, #0
 8008c02:	d10e      	bne.n	8008c22 <_scanf_float+0x1ca>
 8008c04:	6822      	ldr	r2, [r4, #0]
 8008c06:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008c0a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008c0e:	d108      	bne.n	8008c22 <_scanf_float+0x1ca>
 8008c10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008c14:	f04f 0a01 	mov.w	sl, #1
 8008c18:	6022      	str	r2, [r4, #0]
 8008c1a:	e7e3      	b.n	8008be4 <_scanf_float+0x18c>
 8008c1c:	f1ba 0f02 	cmp.w	sl, #2
 8008c20:	d055      	beq.n	8008cce <_scanf_float+0x276>
 8008c22:	2d01      	cmp	r5, #1
 8008c24:	d002      	beq.n	8008c2c <_scanf_float+0x1d4>
 8008c26:	2d04      	cmp	r5, #4
 8008c28:	f47f af48 	bne.w	8008abc <_scanf_float+0x64>
 8008c2c:	3501      	adds	r5, #1
 8008c2e:	b2ed      	uxtb	r5, r5
 8008c30:	e7d8      	b.n	8008be4 <_scanf_float+0x18c>
 8008c32:	f1ba 0f01 	cmp.w	sl, #1
 8008c36:	f47f af41 	bne.w	8008abc <_scanf_float+0x64>
 8008c3a:	f04f 0a02 	mov.w	sl, #2
 8008c3e:	e7d1      	b.n	8008be4 <_scanf_float+0x18c>
 8008c40:	b97d      	cbnz	r5, 8008c62 <_scanf_float+0x20a>
 8008c42:	f1b9 0f00 	cmp.w	r9, #0
 8008c46:	f47f af3c 	bne.w	8008ac2 <_scanf_float+0x6a>
 8008c4a:	6822      	ldr	r2, [r4, #0]
 8008c4c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008c50:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008c54:	f47f af39 	bne.w	8008aca <_scanf_float+0x72>
 8008c58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008c5c:	2501      	movs	r5, #1
 8008c5e:	6022      	str	r2, [r4, #0]
 8008c60:	e7c0      	b.n	8008be4 <_scanf_float+0x18c>
 8008c62:	2d03      	cmp	r5, #3
 8008c64:	d0e2      	beq.n	8008c2c <_scanf_float+0x1d4>
 8008c66:	2d05      	cmp	r5, #5
 8008c68:	e7de      	b.n	8008c28 <_scanf_float+0x1d0>
 8008c6a:	2d02      	cmp	r5, #2
 8008c6c:	f47f af26 	bne.w	8008abc <_scanf_float+0x64>
 8008c70:	2503      	movs	r5, #3
 8008c72:	e7b7      	b.n	8008be4 <_scanf_float+0x18c>
 8008c74:	2d06      	cmp	r5, #6
 8008c76:	f47f af21 	bne.w	8008abc <_scanf_float+0x64>
 8008c7a:	2507      	movs	r5, #7
 8008c7c:	e7b2      	b.n	8008be4 <_scanf_float+0x18c>
 8008c7e:	6822      	ldr	r2, [r4, #0]
 8008c80:	0591      	lsls	r1, r2, #22
 8008c82:	f57f af1b 	bpl.w	8008abc <_scanf_float+0x64>
 8008c86:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008c8a:	6022      	str	r2, [r4, #0]
 8008c8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008c90:	e7a8      	b.n	8008be4 <_scanf_float+0x18c>
 8008c92:	6822      	ldr	r2, [r4, #0]
 8008c94:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008c98:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008c9c:	d006      	beq.n	8008cac <_scanf_float+0x254>
 8008c9e:	0550      	lsls	r0, r2, #21
 8008ca0:	f57f af0c 	bpl.w	8008abc <_scanf_float+0x64>
 8008ca4:	f1b9 0f00 	cmp.w	r9, #0
 8008ca8:	f43f af0f 	beq.w	8008aca <_scanf_float+0x72>
 8008cac:	0591      	lsls	r1, r2, #22
 8008cae:	bf58      	it	pl
 8008cb0:	9901      	ldrpl	r1, [sp, #4]
 8008cb2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008cb6:	bf58      	it	pl
 8008cb8:	eba9 0101 	subpl.w	r1, r9, r1
 8008cbc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008cc0:	f04f 0900 	mov.w	r9, #0
 8008cc4:	bf58      	it	pl
 8008cc6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008cca:	6022      	str	r2, [r4, #0]
 8008ccc:	e78a      	b.n	8008be4 <_scanf_float+0x18c>
 8008cce:	f04f 0a03 	mov.w	sl, #3
 8008cd2:	e787      	b.n	8008be4 <_scanf_float+0x18c>
 8008cd4:	4639      	mov	r1, r7
 8008cd6:	4640      	mov	r0, r8
 8008cd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008cdc:	4798      	blx	r3
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	f43f aedf 	beq.w	8008aa2 <_scanf_float+0x4a>
 8008ce4:	e6ea      	b.n	8008abc <_scanf_float+0x64>
 8008ce6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cea:	463a      	mov	r2, r7
 8008cec:	4640      	mov	r0, r8
 8008cee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cf2:	4798      	blx	r3
 8008cf4:	6923      	ldr	r3, [r4, #16]
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	6123      	str	r3, [r4, #16]
 8008cfa:	e6ec      	b.n	8008ad6 <_scanf_float+0x7e>
 8008cfc:	1e6b      	subs	r3, r5, #1
 8008cfe:	2b06      	cmp	r3, #6
 8008d00:	d825      	bhi.n	8008d4e <_scanf_float+0x2f6>
 8008d02:	2d02      	cmp	r5, #2
 8008d04:	d836      	bhi.n	8008d74 <_scanf_float+0x31c>
 8008d06:	455e      	cmp	r6, fp
 8008d08:	f67f aee8 	bls.w	8008adc <_scanf_float+0x84>
 8008d0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d10:	463a      	mov	r2, r7
 8008d12:	4640      	mov	r0, r8
 8008d14:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d18:	4798      	blx	r3
 8008d1a:	6923      	ldr	r3, [r4, #16]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	6123      	str	r3, [r4, #16]
 8008d20:	e7f1      	b.n	8008d06 <_scanf_float+0x2ae>
 8008d22:	9802      	ldr	r0, [sp, #8]
 8008d24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d28:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008d2c:	463a      	mov	r2, r7
 8008d2e:	9002      	str	r0, [sp, #8]
 8008d30:	4640      	mov	r0, r8
 8008d32:	4798      	blx	r3
 8008d34:	6923      	ldr	r3, [r4, #16]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	6123      	str	r3, [r4, #16]
 8008d3a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008d3e:	fa5f fa8a 	uxtb.w	sl, sl
 8008d42:	f1ba 0f02 	cmp.w	sl, #2
 8008d46:	d1ec      	bne.n	8008d22 <_scanf_float+0x2ca>
 8008d48:	3d03      	subs	r5, #3
 8008d4a:	b2ed      	uxtb	r5, r5
 8008d4c:	1b76      	subs	r6, r6, r5
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	05da      	lsls	r2, r3, #23
 8008d52:	d52f      	bpl.n	8008db4 <_scanf_float+0x35c>
 8008d54:	055b      	lsls	r3, r3, #21
 8008d56:	d510      	bpl.n	8008d7a <_scanf_float+0x322>
 8008d58:	455e      	cmp	r6, fp
 8008d5a:	f67f aebf 	bls.w	8008adc <_scanf_float+0x84>
 8008d5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d62:	463a      	mov	r2, r7
 8008d64:	4640      	mov	r0, r8
 8008d66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d6a:	4798      	blx	r3
 8008d6c:	6923      	ldr	r3, [r4, #16]
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	6123      	str	r3, [r4, #16]
 8008d72:	e7f1      	b.n	8008d58 <_scanf_float+0x300>
 8008d74:	46aa      	mov	sl, r5
 8008d76:	9602      	str	r6, [sp, #8]
 8008d78:	e7df      	b.n	8008d3a <_scanf_float+0x2e2>
 8008d7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008d7e:	6923      	ldr	r3, [r4, #16]
 8008d80:	2965      	cmp	r1, #101	; 0x65
 8008d82:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008d86:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8008d8a:	6123      	str	r3, [r4, #16]
 8008d8c:	d00c      	beq.n	8008da8 <_scanf_float+0x350>
 8008d8e:	2945      	cmp	r1, #69	; 0x45
 8008d90:	d00a      	beq.n	8008da8 <_scanf_float+0x350>
 8008d92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d96:	463a      	mov	r2, r7
 8008d98:	4640      	mov	r0, r8
 8008d9a:	4798      	blx	r3
 8008d9c:	6923      	ldr	r3, [r4, #16]
 8008d9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	1eb5      	subs	r5, r6, #2
 8008da6:	6123      	str	r3, [r4, #16]
 8008da8:	463a      	mov	r2, r7
 8008daa:	4640      	mov	r0, r8
 8008dac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008db0:	4798      	blx	r3
 8008db2:	462e      	mov	r6, r5
 8008db4:	6825      	ldr	r5, [r4, #0]
 8008db6:	f015 0510 	ands.w	r5, r5, #16
 8008dba:	d159      	bne.n	8008e70 <_scanf_float+0x418>
 8008dbc:	7035      	strb	r5, [r6, #0]
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dc8:	d11c      	bne.n	8008e04 <_scanf_float+0x3ac>
 8008dca:	9b01      	ldr	r3, [sp, #4]
 8008dcc:	454b      	cmp	r3, r9
 8008dce:	eba3 0209 	sub.w	r2, r3, r9
 8008dd2:	d124      	bne.n	8008e1e <_scanf_float+0x3c6>
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	4659      	mov	r1, fp
 8008dd8:	4640      	mov	r0, r8
 8008dda:	f000 fe89 	bl	8009af0 <_strtod_r>
 8008dde:	f8d4 c000 	ldr.w	ip, [r4]
 8008de2:	9b03      	ldr	r3, [sp, #12]
 8008de4:	f01c 0f02 	tst.w	ip, #2
 8008de8:	4606      	mov	r6, r0
 8008dea:	460f      	mov	r7, r1
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	d021      	beq.n	8008e34 <_scanf_float+0x3dc>
 8008df0:	9903      	ldr	r1, [sp, #12]
 8008df2:	1d1a      	adds	r2, r3, #4
 8008df4:	600a      	str	r2, [r1, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	e9c3 6700 	strd	r6, r7, [r3]
 8008dfc:	68e3      	ldr	r3, [r4, #12]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	60e3      	str	r3, [r4, #12]
 8008e02:	e66c      	b.n	8008ade <_scanf_float+0x86>
 8008e04:	9b04      	ldr	r3, [sp, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d0e4      	beq.n	8008dd4 <_scanf_float+0x37c>
 8008e0a:	9905      	ldr	r1, [sp, #20]
 8008e0c:	230a      	movs	r3, #10
 8008e0e:	462a      	mov	r2, r5
 8008e10:	4640      	mov	r0, r8
 8008e12:	3101      	adds	r1, #1
 8008e14:	f000 fef8 	bl	8009c08 <_strtol_r>
 8008e18:	9b04      	ldr	r3, [sp, #16]
 8008e1a:	9e05      	ldr	r6, [sp, #20]
 8008e1c:	1ac2      	subs	r2, r0, r3
 8008e1e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008e22:	429e      	cmp	r6, r3
 8008e24:	bf28      	it	cs
 8008e26:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	4911      	ldr	r1, [pc, #68]	; (8008e74 <_scanf_float+0x41c>)
 8008e2e:	f000 f829 	bl	8008e84 <siprintf>
 8008e32:	e7cf      	b.n	8008dd4 <_scanf_float+0x37c>
 8008e34:	f01c 0f04 	tst.w	ip, #4
 8008e38:	f103 0e04 	add.w	lr, r3, #4
 8008e3c:	d003      	beq.n	8008e46 <_scanf_float+0x3ee>
 8008e3e:	9903      	ldr	r1, [sp, #12]
 8008e40:	f8c1 e000 	str.w	lr, [r1]
 8008e44:	e7d7      	b.n	8008df6 <_scanf_float+0x39e>
 8008e46:	9a03      	ldr	r2, [sp, #12]
 8008e48:	f8c2 e000 	str.w	lr, [r2]
 8008e4c:	f8d3 8000 	ldr.w	r8, [r3]
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	f7f7 fdda 	bl	8000a0c <__aeabi_dcmpun>
 8008e58:	b128      	cbz	r0, 8008e66 <_scanf_float+0x40e>
 8008e5a:	4807      	ldr	r0, [pc, #28]	; (8008e78 <_scanf_float+0x420>)
 8008e5c:	f000 f80e 	bl	8008e7c <nanf>
 8008e60:	f8c8 0000 	str.w	r0, [r8]
 8008e64:	e7ca      	b.n	8008dfc <_scanf_float+0x3a4>
 8008e66:	4630      	mov	r0, r6
 8008e68:	4639      	mov	r1, r7
 8008e6a:	f7f7 fe2d 	bl	8000ac8 <__aeabi_d2f>
 8008e6e:	e7f7      	b.n	8008e60 <_scanf_float+0x408>
 8008e70:	2500      	movs	r5, #0
 8008e72:	e634      	b.n	8008ade <_scanf_float+0x86>
 8008e74:	0800e4a8 	.word	0x0800e4a8
 8008e78:	0800e8c0 	.word	0x0800e8c0

08008e7c <nanf>:
 8008e7c:	4800      	ldr	r0, [pc, #0]	; (8008e80 <nanf+0x4>)
 8008e7e:	4770      	bx	lr
 8008e80:	7fc00000 	.word	0x7fc00000

08008e84 <siprintf>:
 8008e84:	b40e      	push	{r1, r2, r3}
 8008e86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e8a:	b500      	push	{lr}
 8008e8c:	b09c      	sub	sp, #112	; 0x70
 8008e8e:	ab1d      	add	r3, sp, #116	; 0x74
 8008e90:	9002      	str	r0, [sp, #8]
 8008e92:	9006      	str	r0, [sp, #24]
 8008e94:	9107      	str	r1, [sp, #28]
 8008e96:	9104      	str	r1, [sp, #16]
 8008e98:	4808      	ldr	r0, [pc, #32]	; (8008ebc <siprintf+0x38>)
 8008e9a:	4909      	ldr	r1, [pc, #36]	; (8008ec0 <siprintf+0x3c>)
 8008e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ea0:	9105      	str	r1, [sp, #20]
 8008ea2:	6800      	ldr	r0, [r0, #0]
 8008ea4:	a902      	add	r1, sp, #8
 8008ea6:	9301      	str	r3, [sp, #4]
 8008ea8:	f002 fe94 	bl	800bbd4 <_svfiprintf_r>
 8008eac:	2200      	movs	r2, #0
 8008eae:	9b02      	ldr	r3, [sp, #8]
 8008eb0:	701a      	strb	r2, [r3, #0]
 8008eb2:	b01c      	add	sp, #112	; 0x70
 8008eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eb8:	b003      	add	sp, #12
 8008eba:	4770      	bx	lr
 8008ebc:	2000002c 	.word	0x2000002c
 8008ec0:	ffff0208 	.word	0xffff0208

08008ec4 <sulp>:
 8008ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec8:	460f      	mov	r7, r1
 8008eca:	4690      	mov	r8, r2
 8008ecc:	f002 fc2a 	bl	800b724 <__ulp>
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	460d      	mov	r5, r1
 8008ed4:	f1b8 0f00 	cmp.w	r8, #0
 8008ed8:	d011      	beq.n	8008efe <sulp+0x3a>
 8008eda:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008ede:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	dd0b      	ble.n	8008efe <sulp+0x3a>
 8008ee6:	2400      	movs	r4, #0
 8008ee8:	051b      	lsls	r3, r3, #20
 8008eea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008eee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008ef2:	4622      	mov	r2, r4
 8008ef4:	462b      	mov	r3, r5
 8008ef6:	f7f7 faef 	bl	80004d8 <__aeabi_dmul>
 8008efa:	4604      	mov	r4, r0
 8008efc:	460d      	mov	r5, r1
 8008efe:	4620      	mov	r0, r4
 8008f00:	4629      	mov	r1, r5
 8008f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008f08 <_strtod_l>:
 8008f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0c:	469b      	mov	fp, r3
 8008f0e:	2300      	movs	r3, #0
 8008f10:	b0a1      	sub	sp, #132	; 0x84
 8008f12:	931c      	str	r3, [sp, #112]	; 0x70
 8008f14:	4ba1      	ldr	r3, [pc, #644]	; (800919c <_strtod_l+0x294>)
 8008f16:	4682      	mov	sl, r0
 8008f18:	681f      	ldr	r7, [r3, #0]
 8008f1a:	460e      	mov	r6, r1
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008f20:	f7f7 f916 	bl	8000150 <strlen>
 8008f24:	f04f 0800 	mov.w	r8, #0
 8008f28:	4604      	mov	r4, r0
 8008f2a:	f04f 0900 	mov.w	r9, #0
 8008f2e:	961b      	str	r6, [sp, #108]	; 0x6c
 8008f30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f32:	781a      	ldrb	r2, [r3, #0]
 8008f34:	2a2b      	cmp	r2, #43	; 0x2b
 8008f36:	d04c      	beq.n	8008fd2 <_strtod_l+0xca>
 8008f38:	d83a      	bhi.n	8008fb0 <_strtod_l+0xa8>
 8008f3a:	2a0d      	cmp	r2, #13
 8008f3c:	d833      	bhi.n	8008fa6 <_strtod_l+0x9e>
 8008f3e:	2a08      	cmp	r2, #8
 8008f40:	d833      	bhi.n	8008faa <_strtod_l+0xa2>
 8008f42:	2a00      	cmp	r2, #0
 8008f44:	d03d      	beq.n	8008fc2 <_strtod_l+0xba>
 8008f46:	2300      	movs	r3, #0
 8008f48:	930c      	str	r3, [sp, #48]	; 0x30
 8008f4a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008f4c:	782b      	ldrb	r3, [r5, #0]
 8008f4e:	2b30      	cmp	r3, #48	; 0x30
 8008f50:	f040 80af 	bne.w	80090b2 <_strtod_l+0x1aa>
 8008f54:	786b      	ldrb	r3, [r5, #1]
 8008f56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f5a:	2b58      	cmp	r3, #88	; 0x58
 8008f5c:	d16c      	bne.n	8009038 <_strtod_l+0x130>
 8008f5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f60:	4650      	mov	r0, sl
 8008f62:	9301      	str	r3, [sp, #4]
 8008f64:	ab1c      	add	r3, sp, #112	; 0x70
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	4a8d      	ldr	r2, [pc, #564]	; (80091a0 <_strtod_l+0x298>)
 8008f6a:	f8cd b008 	str.w	fp, [sp, #8]
 8008f6e:	ab1d      	add	r3, sp, #116	; 0x74
 8008f70:	a91b      	add	r1, sp, #108	; 0x6c
 8008f72:	f001 fd2f 	bl	800a9d4 <__gethex>
 8008f76:	f010 0607 	ands.w	r6, r0, #7
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	d005      	beq.n	8008f8a <_strtod_l+0x82>
 8008f7e:	2e06      	cmp	r6, #6
 8008f80:	d129      	bne.n	8008fd6 <_strtod_l+0xce>
 8008f82:	2300      	movs	r3, #0
 8008f84:	3501      	adds	r5, #1
 8008f86:	951b      	str	r5, [sp, #108]	; 0x6c
 8008f88:	930c      	str	r3, [sp, #48]	; 0x30
 8008f8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f040 8596 	bne.w	8009abe <_strtod_l+0xbb6>
 8008f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f94:	b1d3      	cbz	r3, 8008fcc <_strtod_l+0xc4>
 8008f96:	4642      	mov	r2, r8
 8008f98:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	b021      	add	sp, #132	; 0x84
 8008fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa6:	2a20      	cmp	r2, #32
 8008fa8:	d1cd      	bne.n	8008f46 <_strtod_l+0x3e>
 8008faa:	3301      	adds	r3, #1
 8008fac:	931b      	str	r3, [sp, #108]	; 0x6c
 8008fae:	e7bf      	b.n	8008f30 <_strtod_l+0x28>
 8008fb0:	2a2d      	cmp	r2, #45	; 0x2d
 8008fb2:	d1c8      	bne.n	8008f46 <_strtod_l+0x3e>
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	920c      	str	r2, [sp, #48]	; 0x30
 8008fb8:	1c5a      	adds	r2, r3, #1
 8008fba:	921b      	str	r2, [sp, #108]	; 0x6c
 8008fbc:	785b      	ldrb	r3, [r3, #1]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1c3      	bne.n	8008f4a <_strtod_l+0x42>
 8008fc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fc4:	961b      	str	r6, [sp, #108]	; 0x6c
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f040 8577 	bne.w	8009aba <_strtod_l+0xbb2>
 8008fcc:	4642      	mov	r2, r8
 8008fce:	464b      	mov	r3, r9
 8008fd0:	e7e4      	b.n	8008f9c <_strtod_l+0x94>
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	e7ef      	b.n	8008fb6 <_strtod_l+0xae>
 8008fd6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008fd8:	b13a      	cbz	r2, 8008fea <_strtod_l+0xe2>
 8008fda:	2135      	movs	r1, #53	; 0x35
 8008fdc:	a81e      	add	r0, sp, #120	; 0x78
 8008fde:	f002 fca5 	bl	800b92c <__copybits>
 8008fe2:	4650      	mov	r0, sl
 8008fe4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008fe6:	f002 f86d 	bl	800b0c4 <_Bfree>
 8008fea:	3e01      	subs	r6, #1
 8008fec:	2e05      	cmp	r6, #5
 8008fee:	d807      	bhi.n	8009000 <_strtod_l+0xf8>
 8008ff0:	e8df f006 	tbb	[pc, r6]
 8008ff4:	1d180b0e 	.word	0x1d180b0e
 8008ff8:	030e      	.short	0x030e
 8008ffa:	f04f 0900 	mov.w	r9, #0
 8008ffe:	46c8      	mov	r8, r9
 8009000:	0721      	lsls	r1, r4, #28
 8009002:	d5c2      	bpl.n	8008f8a <_strtod_l+0x82>
 8009004:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009008:	e7bf      	b.n	8008f8a <_strtod_l+0x82>
 800900a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800900e:	e7f7      	b.n	8009000 <_strtod_l+0xf8>
 8009010:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009012:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8009016:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800901a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800901e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009022:	e7ed      	b.n	8009000 <_strtod_l+0xf8>
 8009024:	f04f 0800 	mov.w	r8, #0
 8009028:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80091a4 <_strtod_l+0x29c>
 800902c:	e7e8      	b.n	8009000 <_strtod_l+0xf8>
 800902e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009032:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009036:	e7e3      	b.n	8009000 <_strtod_l+0xf8>
 8009038:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	921b      	str	r2, [sp, #108]	; 0x6c
 800903e:	785b      	ldrb	r3, [r3, #1]
 8009040:	2b30      	cmp	r3, #48	; 0x30
 8009042:	d0f9      	beq.n	8009038 <_strtod_l+0x130>
 8009044:	2b00      	cmp	r3, #0
 8009046:	d0a0      	beq.n	8008f8a <_strtod_l+0x82>
 8009048:	2301      	movs	r3, #1
 800904a:	9307      	str	r3, [sp, #28]
 800904c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800904e:	220a      	movs	r2, #10
 8009050:	9308      	str	r3, [sp, #32]
 8009052:	2300      	movs	r3, #0
 8009054:	469b      	mov	fp, r3
 8009056:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800905a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800905c:	7805      	ldrb	r5, [r0, #0]
 800905e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009062:	b2d9      	uxtb	r1, r3
 8009064:	2909      	cmp	r1, #9
 8009066:	d926      	bls.n	80090b6 <_strtod_l+0x1ae>
 8009068:	4622      	mov	r2, r4
 800906a:	4639      	mov	r1, r7
 800906c:	f002 fec8 	bl	800be00 <strncmp>
 8009070:	2800      	cmp	r0, #0
 8009072:	d032      	beq.n	80090da <_strtod_l+0x1d2>
 8009074:	2000      	movs	r0, #0
 8009076:	462b      	mov	r3, r5
 8009078:	465c      	mov	r4, fp
 800907a:	4602      	mov	r2, r0
 800907c:	9004      	str	r0, [sp, #16]
 800907e:	2b65      	cmp	r3, #101	; 0x65
 8009080:	d001      	beq.n	8009086 <_strtod_l+0x17e>
 8009082:	2b45      	cmp	r3, #69	; 0x45
 8009084:	d113      	bne.n	80090ae <_strtod_l+0x1a6>
 8009086:	b91c      	cbnz	r4, 8009090 <_strtod_l+0x188>
 8009088:	9b07      	ldr	r3, [sp, #28]
 800908a:	4303      	orrs	r3, r0
 800908c:	d099      	beq.n	8008fc2 <_strtod_l+0xba>
 800908e:	2400      	movs	r4, #0
 8009090:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009092:	1c73      	adds	r3, r6, #1
 8009094:	931b      	str	r3, [sp, #108]	; 0x6c
 8009096:	7873      	ldrb	r3, [r6, #1]
 8009098:	2b2b      	cmp	r3, #43	; 0x2b
 800909a:	d078      	beq.n	800918e <_strtod_l+0x286>
 800909c:	2b2d      	cmp	r3, #45	; 0x2d
 800909e:	d07b      	beq.n	8009198 <_strtod_l+0x290>
 80090a0:	2700      	movs	r7, #0
 80090a2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80090a6:	2909      	cmp	r1, #9
 80090a8:	f240 8082 	bls.w	80091b0 <_strtod_l+0x2a8>
 80090ac:	961b      	str	r6, [sp, #108]	; 0x6c
 80090ae:	2500      	movs	r5, #0
 80090b0:	e09e      	b.n	80091f0 <_strtod_l+0x2e8>
 80090b2:	2300      	movs	r3, #0
 80090b4:	e7c9      	b.n	800904a <_strtod_l+0x142>
 80090b6:	f1bb 0f08 	cmp.w	fp, #8
 80090ba:	bfd5      	itete	le
 80090bc:	9906      	ldrle	r1, [sp, #24]
 80090be:	9905      	ldrgt	r1, [sp, #20]
 80090c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80090c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80090c8:	f100 0001 	add.w	r0, r0, #1
 80090cc:	bfd4      	ite	le
 80090ce:	9306      	strle	r3, [sp, #24]
 80090d0:	9305      	strgt	r3, [sp, #20]
 80090d2:	f10b 0b01 	add.w	fp, fp, #1
 80090d6:	901b      	str	r0, [sp, #108]	; 0x6c
 80090d8:	e7bf      	b.n	800905a <_strtod_l+0x152>
 80090da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090dc:	191a      	adds	r2, r3, r4
 80090de:	921b      	str	r2, [sp, #108]	; 0x6c
 80090e0:	5d1b      	ldrb	r3, [r3, r4]
 80090e2:	f1bb 0f00 	cmp.w	fp, #0
 80090e6:	d036      	beq.n	8009156 <_strtod_l+0x24e>
 80090e8:	465c      	mov	r4, fp
 80090ea:	9004      	str	r0, [sp, #16]
 80090ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80090f0:	2a09      	cmp	r2, #9
 80090f2:	d912      	bls.n	800911a <_strtod_l+0x212>
 80090f4:	2201      	movs	r2, #1
 80090f6:	e7c2      	b.n	800907e <_strtod_l+0x176>
 80090f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090fa:	3001      	adds	r0, #1
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	921b      	str	r2, [sp, #108]	; 0x6c
 8009100:	785b      	ldrb	r3, [r3, #1]
 8009102:	2b30      	cmp	r3, #48	; 0x30
 8009104:	d0f8      	beq.n	80090f8 <_strtod_l+0x1f0>
 8009106:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800910a:	2a08      	cmp	r2, #8
 800910c:	f200 84dc 	bhi.w	8009ac8 <_strtod_l+0xbc0>
 8009110:	9004      	str	r0, [sp, #16]
 8009112:	2000      	movs	r0, #0
 8009114:	4604      	mov	r4, r0
 8009116:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009118:	9208      	str	r2, [sp, #32]
 800911a:	3b30      	subs	r3, #48	; 0x30
 800911c:	f100 0201 	add.w	r2, r0, #1
 8009120:	d013      	beq.n	800914a <_strtod_l+0x242>
 8009122:	9904      	ldr	r1, [sp, #16]
 8009124:	1905      	adds	r5, r0, r4
 8009126:	4411      	add	r1, r2
 8009128:	9104      	str	r1, [sp, #16]
 800912a:	4622      	mov	r2, r4
 800912c:	210a      	movs	r1, #10
 800912e:	42aa      	cmp	r2, r5
 8009130:	d113      	bne.n	800915a <_strtod_l+0x252>
 8009132:	1822      	adds	r2, r4, r0
 8009134:	2a08      	cmp	r2, #8
 8009136:	f104 0401 	add.w	r4, r4, #1
 800913a:	4404      	add	r4, r0
 800913c:	dc1b      	bgt.n	8009176 <_strtod_l+0x26e>
 800913e:	220a      	movs	r2, #10
 8009140:	9906      	ldr	r1, [sp, #24]
 8009142:	fb02 3301 	mla	r3, r2, r1, r3
 8009146:	9306      	str	r3, [sp, #24]
 8009148:	2200      	movs	r2, #0
 800914a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800914c:	4610      	mov	r0, r2
 800914e:	1c59      	adds	r1, r3, #1
 8009150:	911b      	str	r1, [sp, #108]	; 0x6c
 8009152:	785b      	ldrb	r3, [r3, #1]
 8009154:	e7ca      	b.n	80090ec <_strtod_l+0x1e4>
 8009156:	4658      	mov	r0, fp
 8009158:	e7d3      	b.n	8009102 <_strtod_l+0x1fa>
 800915a:	2a08      	cmp	r2, #8
 800915c:	dc04      	bgt.n	8009168 <_strtod_l+0x260>
 800915e:	9f06      	ldr	r7, [sp, #24]
 8009160:	434f      	muls	r7, r1
 8009162:	9706      	str	r7, [sp, #24]
 8009164:	3201      	adds	r2, #1
 8009166:	e7e2      	b.n	800912e <_strtod_l+0x226>
 8009168:	1c57      	adds	r7, r2, #1
 800916a:	2f10      	cmp	r7, #16
 800916c:	bfde      	ittt	le
 800916e:	9f05      	ldrle	r7, [sp, #20]
 8009170:	434f      	mulle	r7, r1
 8009172:	9705      	strle	r7, [sp, #20]
 8009174:	e7f6      	b.n	8009164 <_strtod_l+0x25c>
 8009176:	2c10      	cmp	r4, #16
 8009178:	bfdf      	itttt	le
 800917a:	220a      	movle	r2, #10
 800917c:	9905      	ldrle	r1, [sp, #20]
 800917e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009182:	9305      	strle	r3, [sp, #20]
 8009184:	e7e0      	b.n	8009148 <_strtod_l+0x240>
 8009186:	2300      	movs	r3, #0
 8009188:	2201      	movs	r2, #1
 800918a:	9304      	str	r3, [sp, #16]
 800918c:	e77c      	b.n	8009088 <_strtod_l+0x180>
 800918e:	2700      	movs	r7, #0
 8009190:	1cb3      	adds	r3, r6, #2
 8009192:	931b      	str	r3, [sp, #108]	; 0x6c
 8009194:	78b3      	ldrb	r3, [r6, #2]
 8009196:	e784      	b.n	80090a2 <_strtod_l+0x19a>
 8009198:	2701      	movs	r7, #1
 800919a:	e7f9      	b.n	8009190 <_strtod_l+0x288>
 800919c:	0800e700 	.word	0x0800e700
 80091a0:	0800e4b0 	.word	0x0800e4b0
 80091a4:	7ff00000 	.word	0x7ff00000
 80091a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80091aa:	1c59      	adds	r1, r3, #1
 80091ac:	911b      	str	r1, [sp, #108]	; 0x6c
 80091ae:	785b      	ldrb	r3, [r3, #1]
 80091b0:	2b30      	cmp	r3, #48	; 0x30
 80091b2:	d0f9      	beq.n	80091a8 <_strtod_l+0x2a0>
 80091b4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80091b8:	2908      	cmp	r1, #8
 80091ba:	f63f af78 	bhi.w	80090ae <_strtod_l+0x1a6>
 80091be:	f04f 0e0a 	mov.w	lr, #10
 80091c2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80091c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80091c8:	9309      	str	r3, [sp, #36]	; 0x24
 80091ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80091cc:	1c59      	adds	r1, r3, #1
 80091ce:	911b      	str	r1, [sp, #108]	; 0x6c
 80091d0:	785b      	ldrb	r3, [r3, #1]
 80091d2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80091d6:	2d09      	cmp	r5, #9
 80091d8:	d935      	bls.n	8009246 <_strtod_l+0x33e>
 80091da:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80091dc:	1b49      	subs	r1, r1, r5
 80091de:	2908      	cmp	r1, #8
 80091e0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80091e4:	dc02      	bgt.n	80091ec <_strtod_l+0x2e4>
 80091e6:	4565      	cmp	r5, ip
 80091e8:	bfa8      	it	ge
 80091ea:	4665      	movge	r5, ip
 80091ec:	b107      	cbz	r7, 80091f0 <_strtod_l+0x2e8>
 80091ee:	426d      	negs	r5, r5
 80091f0:	2c00      	cmp	r4, #0
 80091f2:	d14c      	bne.n	800928e <_strtod_l+0x386>
 80091f4:	9907      	ldr	r1, [sp, #28]
 80091f6:	4301      	orrs	r1, r0
 80091f8:	f47f aec7 	bne.w	8008f8a <_strtod_l+0x82>
 80091fc:	2a00      	cmp	r2, #0
 80091fe:	f47f aee0 	bne.w	8008fc2 <_strtod_l+0xba>
 8009202:	2b69      	cmp	r3, #105	; 0x69
 8009204:	d026      	beq.n	8009254 <_strtod_l+0x34c>
 8009206:	dc23      	bgt.n	8009250 <_strtod_l+0x348>
 8009208:	2b49      	cmp	r3, #73	; 0x49
 800920a:	d023      	beq.n	8009254 <_strtod_l+0x34c>
 800920c:	2b4e      	cmp	r3, #78	; 0x4e
 800920e:	f47f aed8 	bne.w	8008fc2 <_strtod_l+0xba>
 8009212:	499c      	ldr	r1, [pc, #624]	; (8009484 <_strtod_l+0x57c>)
 8009214:	a81b      	add	r0, sp, #108	; 0x6c
 8009216:	f001 fe2b 	bl	800ae70 <__match>
 800921a:	2800      	cmp	r0, #0
 800921c:	f43f aed1 	beq.w	8008fc2 <_strtod_l+0xba>
 8009220:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	2b28      	cmp	r3, #40	; 0x28
 8009226:	d12c      	bne.n	8009282 <_strtod_l+0x37a>
 8009228:	4997      	ldr	r1, [pc, #604]	; (8009488 <_strtod_l+0x580>)
 800922a:	aa1e      	add	r2, sp, #120	; 0x78
 800922c:	a81b      	add	r0, sp, #108	; 0x6c
 800922e:	f001 fe33 	bl	800ae98 <__hexnan>
 8009232:	2805      	cmp	r0, #5
 8009234:	d125      	bne.n	8009282 <_strtod_l+0x37a>
 8009236:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009238:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800923c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009240:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009244:	e6a1      	b.n	8008f8a <_strtod_l+0x82>
 8009246:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800924a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800924e:	e7bc      	b.n	80091ca <_strtod_l+0x2c2>
 8009250:	2b6e      	cmp	r3, #110	; 0x6e
 8009252:	e7dc      	b.n	800920e <_strtod_l+0x306>
 8009254:	498d      	ldr	r1, [pc, #564]	; (800948c <_strtod_l+0x584>)
 8009256:	a81b      	add	r0, sp, #108	; 0x6c
 8009258:	f001 fe0a 	bl	800ae70 <__match>
 800925c:	2800      	cmp	r0, #0
 800925e:	f43f aeb0 	beq.w	8008fc2 <_strtod_l+0xba>
 8009262:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009264:	498a      	ldr	r1, [pc, #552]	; (8009490 <_strtod_l+0x588>)
 8009266:	3b01      	subs	r3, #1
 8009268:	a81b      	add	r0, sp, #108	; 0x6c
 800926a:	931b      	str	r3, [sp, #108]	; 0x6c
 800926c:	f001 fe00 	bl	800ae70 <__match>
 8009270:	b910      	cbnz	r0, 8009278 <_strtod_l+0x370>
 8009272:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009274:	3301      	adds	r3, #1
 8009276:	931b      	str	r3, [sp, #108]	; 0x6c
 8009278:	f04f 0800 	mov.w	r8, #0
 800927c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80094a0 <_strtod_l+0x598>
 8009280:	e683      	b.n	8008f8a <_strtod_l+0x82>
 8009282:	4884      	ldr	r0, [pc, #528]	; (8009494 <_strtod_l+0x58c>)
 8009284:	f002 fda6 	bl	800bdd4 <nan>
 8009288:	4680      	mov	r8, r0
 800928a:	4689      	mov	r9, r1
 800928c:	e67d      	b.n	8008f8a <_strtod_l+0x82>
 800928e:	9b04      	ldr	r3, [sp, #16]
 8009290:	f1bb 0f00 	cmp.w	fp, #0
 8009294:	bf08      	it	eq
 8009296:	46a3      	moveq	fp, r4
 8009298:	1aeb      	subs	r3, r5, r3
 800929a:	2c10      	cmp	r4, #16
 800929c:	9806      	ldr	r0, [sp, #24]
 800929e:	4626      	mov	r6, r4
 80092a0:	9307      	str	r3, [sp, #28]
 80092a2:	bfa8      	it	ge
 80092a4:	2610      	movge	r6, #16
 80092a6:	f7f7 f89d 	bl	80003e4 <__aeabi_ui2d>
 80092aa:	2c09      	cmp	r4, #9
 80092ac:	4680      	mov	r8, r0
 80092ae:	4689      	mov	r9, r1
 80092b0:	dd13      	ble.n	80092da <_strtod_l+0x3d2>
 80092b2:	4b79      	ldr	r3, [pc, #484]	; (8009498 <_strtod_l+0x590>)
 80092b4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80092b8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80092bc:	f7f7 f90c 	bl	80004d8 <__aeabi_dmul>
 80092c0:	4680      	mov	r8, r0
 80092c2:	9805      	ldr	r0, [sp, #20]
 80092c4:	4689      	mov	r9, r1
 80092c6:	f7f7 f88d 	bl	80003e4 <__aeabi_ui2d>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4640      	mov	r0, r8
 80092d0:	4649      	mov	r1, r9
 80092d2:	f7f6 ff4b 	bl	800016c <__adddf3>
 80092d6:	4680      	mov	r8, r0
 80092d8:	4689      	mov	r9, r1
 80092da:	2c0f      	cmp	r4, #15
 80092dc:	dc36      	bgt.n	800934c <_strtod_l+0x444>
 80092de:	9b07      	ldr	r3, [sp, #28]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f43f ae52 	beq.w	8008f8a <_strtod_l+0x82>
 80092e6:	dd22      	ble.n	800932e <_strtod_l+0x426>
 80092e8:	2b16      	cmp	r3, #22
 80092ea:	dc09      	bgt.n	8009300 <_strtod_l+0x3f8>
 80092ec:	4c6a      	ldr	r4, [pc, #424]	; (8009498 <_strtod_l+0x590>)
 80092ee:	4642      	mov	r2, r8
 80092f0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80092f4:	464b      	mov	r3, r9
 80092f6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80092fa:	f7f7 f8ed 	bl	80004d8 <__aeabi_dmul>
 80092fe:	e7c3      	b.n	8009288 <_strtod_l+0x380>
 8009300:	9a07      	ldr	r2, [sp, #28]
 8009302:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009306:	4293      	cmp	r3, r2
 8009308:	db20      	blt.n	800934c <_strtod_l+0x444>
 800930a:	4d63      	ldr	r5, [pc, #396]	; (8009498 <_strtod_l+0x590>)
 800930c:	f1c4 040f 	rsb	r4, r4, #15
 8009310:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009314:	4642      	mov	r2, r8
 8009316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800931a:	464b      	mov	r3, r9
 800931c:	f7f7 f8dc 	bl	80004d8 <__aeabi_dmul>
 8009320:	9b07      	ldr	r3, [sp, #28]
 8009322:	1b1c      	subs	r4, r3, r4
 8009324:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009328:	e9d5 2300 	ldrd	r2, r3, [r5]
 800932c:	e7e5      	b.n	80092fa <_strtod_l+0x3f2>
 800932e:	9b07      	ldr	r3, [sp, #28]
 8009330:	3316      	adds	r3, #22
 8009332:	db0b      	blt.n	800934c <_strtod_l+0x444>
 8009334:	9b04      	ldr	r3, [sp, #16]
 8009336:	4a58      	ldr	r2, [pc, #352]	; (8009498 <_strtod_l+0x590>)
 8009338:	1b5d      	subs	r5, r3, r5
 800933a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800933e:	4640      	mov	r0, r8
 8009340:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009344:	4649      	mov	r1, r9
 8009346:	f7f7 f9f1 	bl	800072c <__aeabi_ddiv>
 800934a:	e79d      	b.n	8009288 <_strtod_l+0x380>
 800934c:	9b07      	ldr	r3, [sp, #28]
 800934e:	1ba6      	subs	r6, r4, r6
 8009350:	441e      	add	r6, r3
 8009352:	2e00      	cmp	r6, #0
 8009354:	dd71      	ble.n	800943a <_strtod_l+0x532>
 8009356:	f016 030f 	ands.w	r3, r6, #15
 800935a:	d00a      	beq.n	8009372 <_strtod_l+0x46a>
 800935c:	494e      	ldr	r1, [pc, #312]	; (8009498 <_strtod_l+0x590>)
 800935e:	4642      	mov	r2, r8
 8009360:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009368:	464b      	mov	r3, r9
 800936a:	f7f7 f8b5 	bl	80004d8 <__aeabi_dmul>
 800936e:	4680      	mov	r8, r0
 8009370:	4689      	mov	r9, r1
 8009372:	f036 060f 	bics.w	r6, r6, #15
 8009376:	d050      	beq.n	800941a <_strtod_l+0x512>
 8009378:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800937c:	dd27      	ble.n	80093ce <_strtod_l+0x4c6>
 800937e:	f04f 0b00 	mov.w	fp, #0
 8009382:	f8cd b010 	str.w	fp, [sp, #16]
 8009386:	f8cd b020 	str.w	fp, [sp, #32]
 800938a:	f8cd b018 	str.w	fp, [sp, #24]
 800938e:	2322      	movs	r3, #34	; 0x22
 8009390:	f04f 0800 	mov.w	r8, #0
 8009394:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80094a0 <_strtod_l+0x598>
 8009398:	f8ca 3000 	str.w	r3, [sl]
 800939c:	9b08      	ldr	r3, [sp, #32]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f43f adf3 	beq.w	8008f8a <_strtod_l+0x82>
 80093a4:	4650      	mov	r0, sl
 80093a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80093a8:	f001 fe8c 	bl	800b0c4 <_Bfree>
 80093ac:	4650      	mov	r0, sl
 80093ae:	9906      	ldr	r1, [sp, #24]
 80093b0:	f001 fe88 	bl	800b0c4 <_Bfree>
 80093b4:	4650      	mov	r0, sl
 80093b6:	9904      	ldr	r1, [sp, #16]
 80093b8:	f001 fe84 	bl	800b0c4 <_Bfree>
 80093bc:	4650      	mov	r0, sl
 80093be:	9908      	ldr	r1, [sp, #32]
 80093c0:	f001 fe80 	bl	800b0c4 <_Bfree>
 80093c4:	4659      	mov	r1, fp
 80093c6:	4650      	mov	r0, sl
 80093c8:	f001 fe7c 	bl	800b0c4 <_Bfree>
 80093cc:	e5dd      	b.n	8008f8a <_strtod_l+0x82>
 80093ce:	2300      	movs	r3, #0
 80093d0:	4640      	mov	r0, r8
 80093d2:	4649      	mov	r1, r9
 80093d4:	461f      	mov	r7, r3
 80093d6:	1136      	asrs	r6, r6, #4
 80093d8:	2e01      	cmp	r6, #1
 80093da:	dc21      	bgt.n	8009420 <_strtod_l+0x518>
 80093dc:	b10b      	cbz	r3, 80093e2 <_strtod_l+0x4da>
 80093de:	4680      	mov	r8, r0
 80093e0:	4689      	mov	r9, r1
 80093e2:	4b2e      	ldr	r3, [pc, #184]	; (800949c <_strtod_l+0x594>)
 80093e4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80093e8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80093ec:	4642      	mov	r2, r8
 80093ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093f2:	464b      	mov	r3, r9
 80093f4:	f7f7 f870 	bl	80004d8 <__aeabi_dmul>
 80093f8:	4b29      	ldr	r3, [pc, #164]	; (80094a0 <_strtod_l+0x598>)
 80093fa:	460a      	mov	r2, r1
 80093fc:	400b      	ands	r3, r1
 80093fe:	4929      	ldr	r1, [pc, #164]	; (80094a4 <_strtod_l+0x59c>)
 8009400:	4680      	mov	r8, r0
 8009402:	428b      	cmp	r3, r1
 8009404:	d8bb      	bhi.n	800937e <_strtod_l+0x476>
 8009406:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800940a:	428b      	cmp	r3, r1
 800940c:	bf86      	itte	hi
 800940e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8009412:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80094a8 <_strtod_l+0x5a0>
 8009416:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800941a:	2300      	movs	r3, #0
 800941c:	9305      	str	r3, [sp, #20]
 800941e:	e07e      	b.n	800951e <_strtod_l+0x616>
 8009420:	07f2      	lsls	r2, r6, #31
 8009422:	d507      	bpl.n	8009434 <_strtod_l+0x52c>
 8009424:	4b1d      	ldr	r3, [pc, #116]	; (800949c <_strtod_l+0x594>)
 8009426:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800942a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942e:	f7f7 f853 	bl	80004d8 <__aeabi_dmul>
 8009432:	2301      	movs	r3, #1
 8009434:	3701      	adds	r7, #1
 8009436:	1076      	asrs	r6, r6, #1
 8009438:	e7ce      	b.n	80093d8 <_strtod_l+0x4d0>
 800943a:	d0ee      	beq.n	800941a <_strtod_l+0x512>
 800943c:	4276      	negs	r6, r6
 800943e:	f016 020f 	ands.w	r2, r6, #15
 8009442:	d00a      	beq.n	800945a <_strtod_l+0x552>
 8009444:	4b14      	ldr	r3, [pc, #80]	; (8009498 <_strtod_l+0x590>)
 8009446:	4640      	mov	r0, r8
 8009448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800944c:	4649      	mov	r1, r9
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	f7f7 f96b 	bl	800072c <__aeabi_ddiv>
 8009456:	4680      	mov	r8, r0
 8009458:	4689      	mov	r9, r1
 800945a:	1136      	asrs	r6, r6, #4
 800945c:	d0dd      	beq.n	800941a <_strtod_l+0x512>
 800945e:	2e1f      	cmp	r6, #31
 8009460:	dd24      	ble.n	80094ac <_strtod_l+0x5a4>
 8009462:	f04f 0b00 	mov.w	fp, #0
 8009466:	f8cd b010 	str.w	fp, [sp, #16]
 800946a:	f8cd b020 	str.w	fp, [sp, #32]
 800946e:	f8cd b018 	str.w	fp, [sp, #24]
 8009472:	2322      	movs	r3, #34	; 0x22
 8009474:	f04f 0800 	mov.w	r8, #0
 8009478:	f04f 0900 	mov.w	r9, #0
 800947c:	f8ca 3000 	str.w	r3, [sl]
 8009480:	e78c      	b.n	800939c <_strtod_l+0x494>
 8009482:	bf00      	nop
 8009484:	0800e481 	.word	0x0800e481
 8009488:	0800e4c4 	.word	0x0800e4c4
 800948c:	0800e479 	.word	0x0800e479
 8009490:	0800e604 	.word	0x0800e604
 8009494:	0800e8c0 	.word	0x0800e8c0
 8009498:	0800e7a0 	.word	0x0800e7a0
 800949c:	0800e778 	.word	0x0800e778
 80094a0:	7ff00000 	.word	0x7ff00000
 80094a4:	7ca00000 	.word	0x7ca00000
 80094a8:	7fefffff 	.word	0x7fefffff
 80094ac:	f016 0310 	ands.w	r3, r6, #16
 80094b0:	bf18      	it	ne
 80094b2:	236a      	movne	r3, #106	; 0x6a
 80094b4:	4640      	mov	r0, r8
 80094b6:	9305      	str	r3, [sp, #20]
 80094b8:	4649      	mov	r1, r9
 80094ba:	2300      	movs	r3, #0
 80094bc:	4fb2      	ldr	r7, [pc, #712]	; (8009788 <_strtod_l+0x880>)
 80094be:	07f2      	lsls	r2, r6, #31
 80094c0:	d504      	bpl.n	80094cc <_strtod_l+0x5c4>
 80094c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094c6:	f7f7 f807 	bl	80004d8 <__aeabi_dmul>
 80094ca:	2301      	movs	r3, #1
 80094cc:	1076      	asrs	r6, r6, #1
 80094ce:	f107 0708 	add.w	r7, r7, #8
 80094d2:	d1f4      	bne.n	80094be <_strtod_l+0x5b6>
 80094d4:	b10b      	cbz	r3, 80094da <_strtod_l+0x5d2>
 80094d6:	4680      	mov	r8, r0
 80094d8:	4689      	mov	r9, r1
 80094da:	9b05      	ldr	r3, [sp, #20]
 80094dc:	b1bb      	cbz	r3, 800950e <_strtod_l+0x606>
 80094de:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80094e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	4649      	mov	r1, r9
 80094ea:	dd10      	ble.n	800950e <_strtod_l+0x606>
 80094ec:	2b1f      	cmp	r3, #31
 80094ee:	f340 812b 	ble.w	8009748 <_strtod_l+0x840>
 80094f2:	2b34      	cmp	r3, #52	; 0x34
 80094f4:	bfd8      	it	le
 80094f6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80094fa:	f04f 0800 	mov.w	r8, #0
 80094fe:	bfcf      	iteee	gt
 8009500:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009504:	3b20      	suble	r3, #32
 8009506:	fa02 f303 	lslle.w	r3, r2, r3
 800950a:	ea03 0901 	andle.w	r9, r3, r1
 800950e:	2200      	movs	r2, #0
 8009510:	2300      	movs	r3, #0
 8009512:	4640      	mov	r0, r8
 8009514:	4649      	mov	r1, r9
 8009516:	f7f7 fa47 	bl	80009a8 <__aeabi_dcmpeq>
 800951a:	2800      	cmp	r0, #0
 800951c:	d1a1      	bne.n	8009462 <_strtod_l+0x55a>
 800951e:	9b06      	ldr	r3, [sp, #24]
 8009520:	465a      	mov	r2, fp
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	4650      	mov	r0, sl
 8009526:	4623      	mov	r3, r4
 8009528:	9908      	ldr	r1, [sp, #32]
 800952a:	f001 fe37 	bl	800b19c <__s2b>
 800952e:	9008      	str	r0, [sp, #32]
 8009530:	2800      	cmp	r0, #0
 8009532:	f43f af24 	beq.w	800937e <_strtod_l+0x476>
 8009536:	9b04      	ldr	r3, [sp, #16]
 8009538:	f04f 0b00 	mov.w	fp, #0
 800953c:	1b5d      	subs	r5, r3, r5
 800953e:	9b07      	ldr	r3, [sp, #28]
 8009540:	f8cd b010 	str.w	fp, [sp, #16]
 8009544:	2b00      	cmp	r3, #0
 8009546:	bfb4      	ite	lt
 8009548:	462b      	movlt	r3, r5
 800954a:	2300      	movge	r3, #0
 800954c:	930e      	str	r3, [sp, #56]	; 0x38
 800954e:	9b07      	ldr	r3, [sp, #28]
 8009550:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009554:	9316      	str	r3, [sp, #88]	; 0x58
 8009556:	9b08      	ldr	r3, [sp, #32]
 8009558:	4650      	mov	r0, sl
 800955a:	6859      	ldr	r1, [r3, #4]
 800955c:	f001 fd72 	bl	800b044 <_Balloc>
 8009560:	9006      	str	r0, [sp, #24]
 8009562:	2800      	cmp	r0, #0
 8009564:	f43f af13 	beq.w	800938e <_strtod_l+0x486>
 8009568:	9b08      	ldr	r3, [sp, #32]
 800956a:	300c      	adds	r0, #12
 800956c:	691a      	ldr	r2, [r3, #16]
 800956e:	f103 010c 	add.w	r1, r3, #12
 8009572:	3202      	adds	r2, #2
 8009574:	0092      	lsls	r2, r2, #2
 8009576:	f001 fd57 	bl	800b028 <memcpy>
 800957a:	ab1e      	add	r3, sp, #120	; 0x78
 800957c:	9301      	str	r3, [sp, #4]
 800957e:	ab1d      	add	r3, sp, #116	; 0x74
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	4642      	mov	r2, r8
 8009584:	464b      	mov	r3, r9
 8009586:	4650      	mov	r0, sl
 8009588:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800958c:	f002 f944 	bl	800b818 <__d2b>
 8009590:	901c      	str	r0, [sp, #112]	; 0x70
 8009592:	2800      	cmp	r0, #0
 8009594:	f43f aefb 	beq.w	800938e <_strtod_l+0x486>
 8009598:	2101      	movs	r1, #1
 800959a:	4650      	mov	r0, sl
 800959c:	f001 fe96 	bl	800b2cc <__i2b>
 80095a0:	4603      	mov	r3, r0
 80095a2:	9004      	str	r0, [sp, #16]
 80095a4:	2800      	cmp	r0, #0
 80095a6:	f43f aef2 	beq.w	800938e <_strtod_l+0x486>
 80095aa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80095ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80095ae:	2d00      	cmp	r5, #0
 80095b0:	bfab      	itete	ge
 80095b2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80095b4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80095b6:	18ee      	addge	r6, r5, r3
 80095b8:	1b5c      	sublt	r4, r3, r5
 80095ba:	9b05      	ldr	r3, [sp, #20]
 80095bc:	bfa8      	it	ge
 80095be:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80095c0:	eba5 0503 	sub.w	r5, r5, r3
 80095c4:	4415      	add	r5, r2
 80095c6:	4b71      	ldr	r3, [pc, #452]	; (800978c <_strtod_l+0x884>)
 80095c8:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80095cc:	bfb8      	it	lt
 80095ce:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80095d0:	429d      	cmp	r5, r3
 80095d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80095d6:	f280 80c9 	bge.w	800976c <_strtod_l+0x864>
 80095da:	1b5b      	subs	r3, r3, r5
 80095dc:	2b1f      	cmp	r3, #31
 80095de:	f04f 0701 	mov.w	r7, #1
 80095e2:	eba2 0203 	sub.w	r2, r2, r3
 80095e6:	f300 80b6 	bgt.w	8009756 <_strtod_l+0x84e>
 80095ea:	2500      	movs	r5, #0
 80095ec:	fa07 f303 	lsl.w	r3, r7, r3
 80095f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80095f2:	18b7      	adds	r7, r6, r2
 80095f4:	9b05      	ldr	r3, [sp, #20]
 80095f6:	42be      	cmp	r6, r7
 80095f8:	4414      	add	r4, r2
 80095fa:	441c      	add	r4, r3
 80095fc:	4633      	mov	r3, r6
 80095fe:	bfa8      	it	ge
 8009600:	463b      	movge	r3, r7
 8009602:	42a3      	cmp	r3, r4
 8009604:	bfa8      	it	ge
 8009606:	4623      	movge	r3, r4
 8009608:	2b00      	cmp	r3, #0
 800960a:	bfc2      	ittt	gt
 800960c:	1aff      	subgt	r7, r7, r3
 800960e:	1ae4      	subgt	r4, r4, r3
 8009610:	1af6      	subgt	r6, r6, r3
 8009612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009614:	2b00      	cmp	r3, #0
 8009616:	dd17      	ble.n	8009648 <_strtod_l+0x740>
 8009618:	461a      	mov	r2, r3
 800961a:	4650      	mov	r0, sl
 800961c:	9904      	ldr	r1, [sp, #16]
 800961e:	f001 ff0f 	bl	800b440 <__pow5mult>
 8009622:	9004      	str	r0, [sp, #16]
 8009624:	2800      	cmp	r0, #0
 8009626:	f43f aeb2 	beq.w	800938e <_strtod_l+0x486>
 800962a:	4601      	mov	r1, r0
 800962c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800962e:	4650      	mov	r0, sl
 8009630:	f001 fe62 	bl	800b2f8 <__multiply>
 8009634:	9009      	str	r0, [sp, #36]	; 0x24
 8009636:	2800      	cmp	r0, #0
 8009638:	f43f aea9 	beq.w	800938e <_strtod_l+0x486>
 800963c:	4650      	mov	r0, sl
 800963e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009640:	f001 fd40 	bl	800b0c4 <_Bfree>
 8009644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009646:	931c      	str	r3, [sp, #112]	; 0x70
 8009648:	2f00      	cmp	r7, #0
 800964a:	f300 8093 	bgt.w	8009774 <_strtod_l+0x86c>
 800964e:	9b07      	ldr	r3, [sp, #28]
 8009650:	2b00      	cmp	r3, #0
 8009652:	dd08      	ble.n	8009666 <_strtod_l+0x75e>
 8009654:	4650      	mov	r0, sl
 8009656:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009658:	9906      	ldr	r1, [sp, #24]
 800965a:	f001 fef1 	bl	800b440 <__pow5mult>
 800965e:	9006      	str	r0, [sp, #24]
 8009660:	2800      	cmp	r0, #0
 8009662:	f43f ae94 	beq.w	800938e <_strtod_l+0x486>
 8009666:	2c00      	cmp	r4, #0
 8009668:	dd08      	ble.n	800967c <_strtod_l+0x774>
 800966a:	4622      	mov	r2, r4
 800966c:	4650      	mov	r0, sl
 800966e:	9906      	ldr	r1, [sp, #24]
 8009670:	f001 ff40 	bl	800b4f4 <__lshift>
 8009674:	9006      	str	r0, [sp, #24]
 8009676:	2800      	cmp	r0, #0
 8009678:	f43f ae89 	beq.w	800938e <_strtod_l+0x486>
 800967c:	2e00      	cmp	r6, #0
 800967e:	dd08      	ble.n	8009692 <_strtod_l+0x78a>
 8009680:	4632      	mov	r2, r6
 8009682:	4650      	mov	r0, sl
 8009684:	9904      	ldr	r1, [sp, #16]
 8009686:	f001 ff35 	bl	800b4f4 <__lshift>
 800968a:	9004      	str	r0, [sp, #16]
 800968c:	2800      	cmp	r0, #0
 800968e:	f43f ae7e 	beq.w	800938e <_strtod_l+0x486>
 8009692:	4650      	mov	r0, sl
 8009694:	9a06      	ldr	r2, [sp, #24]
 8009696:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009698:	f001 ffb4 	bl	800b604 <__mdiff>
 800969c:	4683      	mov	fp, r0
 800969e:	2800      	cmp	r0, #0
 80096a0:	f43f ae75 	beq.w	800938e <_strtod_l+0x486>
 80096a4:	2400      	movs	r4, #0
 80096a6:	68c3      	ldr	r3, [r0, #12]
 80096a8:	9904      	ldr	r1, [sp, #16]
 80096aa:	60c4      	str	r4, [r0, #12]
 80096ac:	930d      	str	r3, [sp, #52]	; 0x34
 80096ae:	f001 ff8d 	bl	800b5cc <__mcmp>
 80096b2:	42a0      	cmp	r0, r4
 80096b4:	da70      	bge.n	8009798 <_strtod_l+0x890>
 80096b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096b8:	ea53 0308 	orrs.w	r3, r3, r8
 80096bc:	f040 8096 	bne.w	80097ec <_strtod_l+0x8e4>
 80096c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f040 8091 	bne.w	80097ec <_strtod_l+0x8e4>
 80096ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096ce:	0d1b      	lsrs	r3, r3, #20
 80096d0:	051b      	lsls	r3, r3, #20
 80096d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80096d6:	f240 8089 	bls.w	80097ec <_strtod_l+0x8e4>
 80096da:	f8db 3014 	ldr.w	r3, [fp, #20]
 80096de:	b923      	cbnz	r3, 80096ea <_strtod_l+0x7e2>
 80096e0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	f340 8081 	ble.w	80097ec <_strtod_l+0x8e4>
 80096ea:	4659      	mov	r1, fp
 80096ec:	2201      	movs	r2, #1
 80096ee:	4650      	mov	r0, sl
 80096f0:	f001 ff00 	bl	800b4f4 <__lshift>
 80096f4:	9904      	ldr	r1, [sp, #16]
 80096f6:	4683      	mov	fp, r0
 80096f8:	f001 ff68 	bl	800b5cc <__mcmp>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	dd75      	ble.n	80097ec <_strtod_l+0x8e4>
 8009700:	9905      	ldr	r1, [sp, #20]
 8009702:	464b      	mov	r3, r9
 8009704:	4a22      	ldr	r2, [pc, #136]	; (8009790 <_strtod_l+0x888>)
 8009706:	2900      	cmp	r1, #0
 8009708:	f000 8091 	beq.w	800982e <_strtod_l+0x926>
 800970c:	ea02 0109 	and.w	r1, r2, r9
 8009710:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009714:	f300 808b 	bgt.w	800982e <_strtod_l+0x926>
 8009718:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800971c:	f77f aea9 	ble.w	8009472 <_strtod_l+0x56a>
 8009720:	2300      	movs	r3, #0
 8009722:	4a1c      	ldr	r2, [pc, #112]	; (8009794 <_strtod_l+0x88c>)
 8009724:	4640      	mov	r0, r8
 8009726:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800972a:	4649      	mov	r1, r9
 800972c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009730:	f7f6 fed2 	bl	80004d8 <__aeabi_dmul>
 8009734:	460b      	mov	r3, r1
 8009736:	4303      	orrs	r3, r0
 8009738:	bf08      	it	eq
 800973a:	2322      	moveq	r3, #34	; 0x22
 800973c:	4680      	mov	r8, r0
 800973e:	4689      	mov	r9, r1
 8009740:	bf08      	it	eq
 8009742:	f8ca 3000 	streq.w	r3, [sl]
 8009746:	e62d      	b.n	80093a4 <_strtod_l+0x49c>
 8009748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800974c:	fa02 f303 	lsl.w	r3, r2, r3
 8009750:	ea03 0808 	and.w	r8, r3, r8
 8009754:	e6db      	b.n	800950e <_strtod_l+0x606>
 8009756:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800975a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800975e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009762:	35e2      	adds	r5, #226	; 0xe2
 8009764:	fa07 f505 	lsl.w	r5, r7, r5
 8009768:	970f      	str	r7, [sp, #60]	; 0x3c
 800976a:	e742      	b.n	80095f2 <_strtod_l+0x6ea>
 800976c:	2301      	movs	r3, #1
 800976e:	2500      	movs	r5, #0
 8009770:	930f      	str	r3, [sp, #60]	; 0x3c
 8009772:	e73e      	b.n	80095f2 <_strtod_l+0x6ea>
 8009774:	463a      	mov	r2, r7
 8009776:	4650      	mov	r0, sl
 8009778:	991c      	ldr	r1, [sp, #112]	; 0x70
 800977a:	f001 febb 	bl	800b4f4 <__lshift>
 800977e:	901c      	str	r0, [sp, #112]	; 0x70
 8009780:	2800      	cmp	r0, #0
 8009782:	f47f af64 	bne.w	800964e <_strtod_l+0x746>
 8009786:	e602      	b.n	800938e <_strtod_l+0x486>
 8009788:	0800e4d8 	.word	0x0800e4d8
 800978c:	fffffc02 	.word	0xfffffc02
 8009790:	7ff00000 	.word	0x7ff00000
 8009794:	39500000 	.word	0x39500000
 8009798:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800979c:	d166      	bne.n	800986c <_strtod_l+0x964>
 800979e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097a4:	b35a      	cbz	r2, 80097fe <_strtod_l+0x8f6>
 80097a6:	4a9c      	ldr	r2, [pc, #624]	; (8009a18 <_strtod_l+0xb10>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d12c      	bne.n	8009806 <_strtod_l+0x8fe>
 80097ac:	9b05      	ldr	r3, [sp, #20]
 80097ae:	4640      	mov	r0, r8
 80097b0:	b303      	cbz	r3, 80097f4 <_strtod_l+0x8ec>
 80097b2:	464b      	mov	r3, r9
 80097b4:	4a99      	ldr	r2, [pc, #612]	; (8009a1c <_strtod_l+0xb14>)
 80097b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80097ba:	401a      	ands	r2, r3
 80097bc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80097c0:	d81b      	bhi.n	80097fa <_strtod_l+0x8f2>
 80097c2:	0d12      	lsrs	r2, r2, #20
 80097c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80097c8:	fa01 f303 	lsl.w	r3, r1, r3
 80097cc:	4298      	cmp	r0, r3
 80097ce:	d11a      	bne.n	8009806 <_strtod_l+0x8fe>
 80097d0:	4b93      	ldr	r3, [pc, #588]	; (8009a20 <_strtod_l+0xb18>)
 80097d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d102      	bne.n	80097de <_strtod_l+0x8d6>
 80097d8:	3001      	adds	r0, #1
 80097da:	f43f add8 	beq.w	800938e <_strtod_l+0x486>
 80097de:	f04f 0800 	mov.w	r8, #0
 80097e2:	4b8e      	ldr	r3, [pc, #568]	; (8009a1c <_strtod_l+0xb14>)
 80097e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097e6:	401a      	ands	r2, r3
 80097e8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80097ec:	9b05      	ldr	r3, [sp, #20]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d196      	bne.n	8009720 <_strtod_l+0x818>
 80097f2:	e5d7      	b.n	80093a4 <_strtod_l+0x49c>
 80097f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097f8:	e7e8      	b.n	80097cc <_strtod_l+0x8c4>
 80097fa:	460b      	mov	r3, r1
 80097fc:	e7e6      	b.n	80097cc <_strtod_l+0x8c4>
 80097fe:	ea53 0308 	orrs.w	r3, r3, r8
 8009802:	f43f af7d 	beq.w	8009700 <_strtod_l+0x7f8>
 8009806:	b1e5      	cbz	r5, 8009842 <_strtod_l+0x93a>
 8009808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800980a:	421d      	tst	r5, r3
 800980c:	d0ee      	beq.n	80097ec <_strtod_l+0x8e4>
 800980e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009810:	4640      	mov	r0, r8
 8009812:	4649      	mov	r1, r9
 8009814:	9a05      	ldr	r2, [sp, #20]
 8009816:	b1c3      	cbz	r3, 800984a <_strtod_l+0x942>
 8009818:	f7ff fb54 	bl	8008ec4 <sulp>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009824:	f7f6 fca2 	bl	800016c <__adddf3>
 8009828:	4680      	mov	r8, r0
 800982a:	4689      	mov	r9, r1
 800982c:	e7de      	b.n	80097ec <_strtod_l+0x8e4>
 800982e:	4013      	ands	r3, r2
 8009830:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009834:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009838:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800983c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009840:	e7d4      	b.n	80097ec <_strtod_l+0x8e4>
 8009842:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009844:	ea13 0f08 	tst.w	r3, r8
 8009848:	e7e0      	b.n	800980c <_strtod_l+0x904>
 800984a:	f7ff fb3b 	bl	8008ec4 <sulp>
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009856:	f7f6 fc87 	bl	8000168 <__aeabi_dsub>
 800985a:	2200      	movs	r2, #0
 800985c:	2300      	movs	r3, #0
 800985e:	4680      	mov	r8, r0
 8009860:	4689      	mov	r9, r1
 8009862:	f7f7 f8a1 	bl	80009a8 <__aeabi_dcmpeq>
 8009866:	2800      	cmp	r0, #0
 8009868:	d0c0      	beq.n	80097ec <_strtod_l+0x8e4>
 800986a:	e602      	b.n	8009472 <_strtod_l+0x56a>
 800986c:	4658      	mov	r0, fp
 800986e:	9904      	ldr	r1, [sp, #16]
 8009870:	f002 f82e 	bl	800b8d0 <__ratio>
 8009874:	2200      	movs	r2, #0
 8009876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800987a:	4606      	mov	r6, r0
 800987c:	460f      	mov	r7, r1
 800987e:	f7f7 f8a7 	bl	80009d0 <__aeabi_dcmple>
 8009882:	2800      	cmp	r0, #0
 8009884:	d075      	beq.n	8009972 <_strtod_l+0xa6a>
 8009886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009888:	2b00      	cmp	r3, #0
 800988a:	d047      	beq.n	800991c <_strtod_l+0xa14>
 800988c:	2600      	movs	r6, #0
 800988e:	4f65      	ldr	r7, [pc, #404]	; (8009a24 <_strtod_l+0xb1c>)
 8009890:	4d64      	ldr	r5, [pc, #400]	; (8009a24 <_strtod_l+0xb1c>)
 8009892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009898:	0d1b      	lsrs	r3, r3, #20
 800989a:	051b      	lsls	r3, r3, #20
 800989c:	930f      	str	r3, [sp, #60]	; 0x3c
 800989e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098a0:	4b61      	ldr	r3, [pc, #388]	; (8009a28 <_strtod_l+0xb20>)
 80098a2:	429a      	cmp	r2, r3
 80098a4:	f040 80c8 	bne.w	8009a38 <_strtod_l+0xb30>
 80098a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80098ac:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80098b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b2:	4640      	mov	r0, r8
 80098b4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80098b8:	4649      	mov	r1, r9
 80098ba:	f001 ff33 	bl	800b724 <__ulp>
 80098be:	4602      	mov	r2, r0
 80098c0:	460b      	mov	r3, r1
 80098c2:	4630      	mov	r0, r6
 80098c4:	4639      	mov	r1, r7
 80098c6:	f7f6 fe07 	bl	80004d8 <__aeabi_dmul>
 80098ca:	4642      	mov	r2, r8
 80098cc:	464b      	mov	r3, r9
 80098ce:	f7f6 fc4d 	bl	800016c <__adddf3>
 80098d2:	460b      	mov	r3, r1
 80098d4:	4951      	ldr	r1, [pc, #324]	; (8009a1c <_strtod_l+0xb14>)
 80098d6:	4a55      	ldr	r2, [pc, #340]	; (8009a2c <_strtod_l+0xb24>)
 80098d8:	4019      	ands	r1, r3
 80098da:	4291      	cmp	r1, r2
 80098dc:	4680      	mov	r8, r0
 80098de:	d95e      	bls.n	800999e <_strtod_l+0xa96>
 80098e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098e2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d103      	bne.n	80098f2 <_strtod_l+0x9ea>
 80098ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ec:	3301      	adds	r3, #1
 80098ee:	f43f ad4e 	beq.w	800938e <_strtod_l+0x486>
 80098f2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80098f6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009a20 <_strtod_l+0xb18>
 80098fa:	4650      	mov	r0, sl
 80098fc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80098fe:	f001 fbe1 	bl	800b0c4 <_Bfree>
 8009902:	4650      	mov	r0, sl
 8009904:	9906      	ldr	r1, [sp, #24]
 8009906:	f001 fbdd 	bl	800b0c4 <_Bfree>
 800990a:	4650      	mov	r0, sl
 800990c:	9904      	ldr	r1, [sp, #16]
 800990e:	f001 fbd9 	bl	800b0c4 <_Bfree>
 8009912:	4659      	mov	r1, fp
 8009914:	4650      	mov	r0, sl
 8009916:	f001 fbd5 	bl	800b0c4 <_Bfree>
 800991a:	e61c      	b.n	8009556 <_strtod_l+0x64e>
 800991c:	f1b8 0f00 	cmp.w	r8, #0
 8009920:	d119      	bne.n	8009956 <_strtod_l+0xa4e>
 8009922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009928:	b9e3      	cbnz	r3, 8009964 <_strtod_l+0xa5c>
 800992a:	2200      	movs	r2, #0
 800992c:	4630      	mov	r0, r6
 800992e:	4639      	mov	r1, r7
 8009930:	4b3c      	ldr	r3, [pc, #240]	; (8009a24 <_strtod_l+0xb1c>)
 8009932:	f7f7 f843 	bl	80009bc <__aeabi_dcmplt>
 8009936:	b9c8      	cbnz	r0, 800996c <_strtod_l+0xa64>
 8009938:	2200      	movs	r2, #0
 800993a:	4630      	mov	r0, r6
 800993c:	4639      	mov	r1, r7
 800993e:	4b3c      	ldr	r3, [pc, #240]	; (8009a30 <_strtod_l+0xb28>)
 8009940:	f7f6 fdca 	bl	80004d8 <__aeabi_dmul>
 8009944:	4604      	mov	r4, r0
 8009946:	460d      	mov	r5, r1
 8009948:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800994c:	9418      	str	r4, [sp, #96]	; 0x60
 800994e:	9319      	str	r3, [sp, #100]	; 0x64
 8009950:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8009954:	e79d      	b.n	8009892 <_strtod_l+0x98a>
 8009956:	f1b8 0f01 	cmp.w	r8, #1
 800995a:	d103      	bne.n	8009964 <_strtod_l+0xa5c>
 800995c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800995e:	2b00      	cmp	r3, #0
 8009960:	f43f ad87 	beq.w	8009472 <_strtod_l+0x56a>
 8009964:	2600      	movs	r6, #0
 8009966:	2400      	movs	r4, #0
 8009968:	4f32      	ldr	r7, [pc, #200]	; (8009a34 <_strtod_l+0xb2c>)
 800996a:	e791      	b.n	8009890 <_strtod_l+0x988>
 800996c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800996e:	4d30      	ldr	r5, [pc, #192]	; (8009a30 <_strtod_l+0xb28>)
 8009970:	e7ea      	b.n	8009948 <_strtod_l+0xa40>
 8009972:	4b2f      	ldr	r3, [pc, #188]	; (8009a30 <_strtod_l+0xb28>)
 8009974:	2200      	movs	r2, #0
 8009976:	4630      	mov	r0, r6
 8009978:	4639      	mov	r1, r7
 800997a:	f7f6 fdad 	bl	80004d8 <__aeabi_dmul>
 800997e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009980:	4604      	mov	r4, r0
 8009982:	460d      	mov	r5, r1
 8009984:	b933      	cbnz	r3, 8009994 <_strtod_l+0xa8c>
 8009986:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800998a:	9010      	str	r0, [sp, #64]	; 0x40
 800998c:	9311      	str	r3, [sp, #68]	; 0x44
 800998e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009992:	e77e      	b.n	8009892 <_strtod_l+0x98a>
 8009994:	4602      	mov	r2, r0
 8009996:	460b      	mov	r3, r1
 8009998:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800999c:	e7f7      	b.n	800998e <_strtod_l+0xa86>
 800999e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80099a2:	9b05      	ldr	r3, [sp, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1a8      	bne.n	80098fa <_strtod_l+0x9f2>
 80099a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099ae:	0d1b      	lsrs	r3, r3, #20
 80099b0:	051b      	lsls	r3, r3, #20
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d1a1      	bne.n	80098fa <_strtod_l+0x9f2>
 80099b6:	4620      	mov	r0, r4
 80099b8:	4629      	mov	r1, r5
 80099ba:	f7f7 fbef 	bl	800119c <__aeabi_d2lz>
 80099be:	f7f6 fd5d 	bl	800047c <__aeabi_l2d>
 80099c2:	4602      	mov	r2, r0
 80099c4:	460b      	mov	r3, r1
 80099c6:	4620      	mov	r0, r4
 80099c8:	4629      	mov	r1, r5
 80099ca:	f7f6 fbcd 	bl	8000168 <__aeabi_dsub>
 80099ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099d4:	ea43 0308 	orr.w	r3, r3, r8
 80099d8:	4313      	orrs	r3, r2
 80099da:	4604      	mov	r4, r0
 80099dc:	460d      	mov	r5, r1
 80099de:	d066      	beq.n	8009aae <_strtod_l+0xba6>
 80099e0:	a309      	add	r3, pc, #36	; (adr r3, 8009a08 <_strtod_l+0xb00>)
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	f7f6 ffe9 	bl	80009bc <__aeabi_dcmplt>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	f47f acda 	bne.w	80093a4 <_strtod_l+0x49c>
 80099f0:	a307      	add	r3, pc, #28	; (adr r3, 8009a10 <_strtod_l+0xb08>)
 80099f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f6:	4620      	mov	r0, r4
 80099f8:	4629      	mov	r1, r5
 80099fa:	f7f6 fffd 	bl	80009f8 <__aeabi_dcmpgt>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	f43f af7b 	beq.w	80098fa <_strtod_l+0x9f2>
 8009a04:	e4ce      	b.n	80093a4 <_strtod_l+0x49c>
 8009a06:	bf00      	nop
 8009a08:	94a03595 	.word	0x94a03595
 8009a0c:	3fdfffff 	.word	0x3fdfffff
 8009a10:	35afe535 	.word	0x35afe535
 8009a14:	3fe00000 	.word	0x3fe00000
 8009a18:	000fffff 	.word	0x000fffff
 8009a1c:	7ff00000 	.word	0x7ff00000
 8009a20:	7fefffff 	.word	0x7fefffff
 8009a24:	3ff00000 	.word	0x3ff00000
 8009a28:	7fe00000 	.word	0x7fe00000
 8009a2c:	7c9fffff 	.word	0x7c9fffff
 8009a30:	3fe00000 	.word	0x3fe00000
 8009a34:	bff00000 	.word	0xbff00000
 8009a38:	9b05      	ldr	r3, [sp, #20]
 8009a3a:	b313      	cbz	r3, 8009a82 <_strtod_l+0xb7a>
 8009a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a42:	d81e      	bhi.n	8009a82 <_strtod_l+0xb7a>
 8009a44:	a326      	add	r3, pc, #152	; (adr r3, 8009ae0 <_strtod_l+0xbd8>)
 8009a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	f7f6 ffbf 	bl	80009d0 <__aeabi_dcmple>
 8009a52:	b190      	cbz	r0, 8009a7a <_strtod_l+0xb72>
 8009a54:	4629      	mov	r1, r5
 8009a56:	4620      	mov	r0, r4
 8009a58:	f7f7 f816 	bl	8000a88 <__aeabi_d2uiz>
 8009a5c:	2801      	cmp	r0, #1
 8009a5e:	bf38      	it	cc
 8009a60:	2001      	movcc	r0, #1
 8009a62:	f7f6 fcbf 	bl	80003e4 <__aeabi_ui2d>
 8009a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a68:	4604      	mov	r4, r0
 8009a6a:	460d      	mov	r5, r1
 8009a6c:	b9d3      	cbnz	r3, 8009aa4 <_strtod_l+0xb9c>
 8009a6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a72:	9012      	str	r0, [sp, #72]	; 0x48
 8009a74:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a76:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009a7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a7c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009a80:	1a9f      	subs	r7, r3, r2
 8009a82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a86:	f001 fe4d 	bl	800b724 <__ulp>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	4630      	mov	r0, r6
 8009a90:	4639      	mov	r1, r7
 8009a92:	f7f6 fd21 	bl	80004d8 <__aeabi_dmul>
 8009a96:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009a9a:	f7f6 fb67 	bl	800016c <__adddf3>
 8009a9e:	4680      	mov	r8, r0
 8009aa0:	4689      	mov	r9, r1
 8009aa2:	e77e      	b.n	80099a2 <_strtod_l+0xa9a>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009aac:	e7e3      	b.n	8009a76 <_strtod_l+0xb6e>
 8009aae:	a30e      	add	r3, pc, #56	; (adr r3, 8009ae8 <_strtod_l+0xbe0>)
 8009ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab4:	f7f6 ff82 	bl	80009bc <__aeabi_dcmplt>
 8009ab8:	e7a1      	b.n	80099fe <_strtod_l+0xaf6>
 8009aba:	2300      	movs	r3, #0
 8009abc:	930c      	str	r3, [sp, #48]	; 0x30
 8009abe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ac0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	f7ff ba65 	b.w	8008f92 <_strtod_l+0x8a>
 8009ac8:	2b65      	cmp	r3, #101	; 0x65
 8009aca:	f43f ab5c 	beq.w	8009186 <_strtod_l+0x27e>
 8009ace:	2b45      	cmp	r3, #69	; 0x45
 8009ad0:	f43f ab59 	beq.w	8009186 <_strtod_l+0x27e>
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	f7ff bb8d 	b.w	80091f4 <_strtod_l+0x2ec>
 8009ada:	bf00      	nop
 8009adc:	f3af 8000 	nop.w
 8009ae0:	ffc00000 	.word	0xffc00000
 8009ae4:	41dfffff 	.word	0x41dfffff
 8009ae8:	94a03595 	.word	0x94a03595
 8009aec:	3fcfffff 	.word	0x3fcfffff

08009af0 <_strtod_r>:
 8009af0:	4b01      	ldr	r3, [pc, #4]	; (8009af8 <_strtod_r+0x8>)
 8009af2:	f7ff ba09 	b.w	8008f08 <_strtod_l>
 8009af6:	bf00      	nop
 8009af8:	20000094 	.word	0x20000094

08009afc <_strtol_l.isra.0>:
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b02:	4686      	mov	lr, r0
 8009b04:	d001      	beq.n	8009b0a <_strtol_l.isra.0+0xe>
 8009b06:	2b24      	cmp	r3, #36	; 0x24
 8009b08:	d906      	bls.n	8009b18 <_strtol_l.isra.0+0x1c>
 8009b0a:	f7fe fb13 	bl	8008134 <__errno>
 8009b0e:	2316      	movs	r3, #22
 8009b10:	6003      	str	r3, [r0, #0]
 8009b12:	2000      	movs	r0, #0
 8009b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b18:	468c      	mov	ip, r1
 8009b1a:	4e3a      	ldr	r6, [pc, #232]	; (8009c04 <_strtol_l.isra.0+0x108>)
 8009b1c:	4660      	mov	r0, ip
 8009b1e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009b22:	5da5      	ldrb	r5, [r4, r6]
 8009b24:	f015 0508 	ands.w	r5, r5, #8
 8009b28:	d1f8      	bne.n	8009b1c <_strtol_l.isra.0+0x20>
 8009b2a:	2c2d      	cmp	r4, #45	; 0x2d
 8009b2c:	d133      	bne.n	8009b96 <_strtol_l.isra.0+0x9a>
 8009b2e:	f04f 0801 	mov.w	r8, #1
 8009b32:	f89c 4000 	ldrb.w	r4, [ip]
 8009b36:	f100 0c02 	add.w	ip, r0, #2
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d05d      	beq.n	8009bfa <_strtol_l.isra.0+0xfe>
 8009b3e:	2b10      	cmp	r3, #16
 8009b40:	d10c      	bne.n	8009b5c <_strtol_l.isra.0+0x60>
 8009b42:	2c30      	cmp	r4, #48	; 0x30
 8009b44:	d10a      	bne.n	8009b5c <_strtol_l.isra.0+0x60>
 8009b46:	f89c 0000 	ldrb.w	r0, [ip]
 8009b4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009b4e:	2858      	cmp	r0, #88	; 0x58
 8009b50:	d14e      	bne.n	8009bf0 <_strtol_l.isra.0+0xf4>
 8009b52:	2310      	movs	r3, #16
 8009b54:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009b58:	f10c 0c02 	add.w	ip, ip, #2
 8009b5c:	2500      	movs	r5, #0
 8009b5e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8009b62:	3f01      	subs	r7, #1
 8009b64:	fbb7 f9f3 	udiv	r9, r7, r3
 8009b68:	4628      	mov	r0, r5
 8009b6a:	fb03 7a19 	mls	sl, r3, r9, r7
 8009b6e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009b72:	2e09      	cmp	r6, #9
 8009b74:	d818      	bhi.n	8009ba8 <_strtol_l.isra.0+0xac>
 8009b76:	4634      	mov	r4, r6
 8009b78:	42a3      	cmp	r3, r4
 8009b7a:	dd24      	ble.n	8009bc6 <_strtol_l.isra.0+0xca>
 8009b7c:	2d00      	cmp	r5, #0
 8009b7e:	db1f      	blt.n	8009bc0 <_strtol_l.isra.0+0xc4>
 8009b80:	4581      	cmp	r9, r0
 8009b82:	d31d      	bcc.n	8009bc0 <_strtol_l.isra.0+0xc4>
 8009b84:	d101      	bne.n	8009b8a <_strtol_l.isra.0+0x8e>
 8009b86:	45a2      	cmp	sl, r4
 8009b88:	db1a      	blt.n	8009bc0 <_strtol_l.isra.0+0xc4>
 8009b8a:	2501      	movs	r5, #1
 8009b8c:	fb00 4003 	mla	r0, r0, r3, r4
 8009b90:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009b94:	e7eb      	b.n	8009b6e <_strtol_l.isra.0+0x72>
 8009b96:	2c2b      	cmp	r4, #43	; 0x2b
 8009b98:	bf08      	it	eq
 8009b9a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009b9e:	46a8      	mov	r8, r5
 8009ba0:	bf08      	it	eq
 8009ba2:	f100 0c02 	addeq.w	ip, r0, #2
 8009ba6:	e7c8      	b.n	8009b3a <_strtol_l.isra.0+0x3e>
 8009ba8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009bac:	2e19      	cmp	r6, #25
 8009bae:	d801      	bhi.n	8009bb4 <_strtol_l.isra.0+0xb8>
 8009bb0:	3c37      	subs	r4, #55	; 0x37
 8009bb2:	e7e1      	b.n	8009b78 <_strtol_l.isra.0+0x7c>
 8009bb4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009bb8:	2e19      	cmp	r6, #25
 8009bba:	d804      	bhi.n	8009bc6 <_strtol_l.isra.0+0xca>
 8009bbc:	3c57      	subs	r4, #87	; 0x57
 8009bbe:	e7db      	b.n	8009b78 <_strtol_l.isra.0+0x7c>
 8009bc0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009bc4:	e7e4      	b.n	8009b90 <_strtol_l.isra.0+0x94>
 8009bc6:	2d00      	cmp	r5, #0
 8009bc8:	da08      	bge.n	8009bdc <_strtol_l.isra.0+0xe0>
 8009bca:	2322      	movs	r3, #34	; 0x22
 8009bcc:	4638      	mov	r0, r7
 8009bce:	f8ce 3000 	str.w	r3, [lr]
 8009bd2:	2a00      	cmp	r2, #0
 8009bd4:	d09e      	beq.n	8009b14 <_strtol_l.isra.0+0x18>
 8009bd6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8009bda:	e007      	b.n	8009bec <_strtol_l.isra.0+0xf0>
 8009bdc:	f1b8 0f00 	cmp.w	r8, #0
 8009be0:	d000      	beq.n	8009be4 <_strtol_l.isra.0+0xe8>
 8009be2:	4240      	negs	r0, r0
 8009be4:	2a00      	cmp	r2, #0
 8009be6:	d095      	beq.n	8009b14 <_strtol_l.isra.0+0x18>
 8009be8:	2d00      	cmp	r5, #0
 8009bea:	d1f4      	bne.n	8009bd6 <_strtol_l.isra.0+0xda>
 8009bec:	6011      	str	r1, [r2, #0]
 8009bee:	e791      	b.n	8009b14 <_strtol_l.isra.0+0x18>
 8009bf0:	2430      	movs	r4, #48	; 0x30
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1b2      	bne.n	8009b5c <_strtol_l.isra.0+0x60>
 8009bf6:	2308      	movs	r3, #8
 8009bf8:	e7b0      	b.n	8009b5c <_strtol_l.isra.0+0x60>
 8009bfa:	2c30      	cmp	r4, #48	; 0x30
 8009bfc:	d0a3      	beq.n	8009b46 <_strtol_l.isra.0+0x4a>
 8009bfe:	230a      	movs	r3, #10
 8009c00:	e7ac      	b.n	8009b5c <_strtol_l.isra.0+0x60>
 8009c02:	bf00      	nop
 8009c04:	0800e501 	.word	0x0800e501

08009c08 <_strtol_r>:
 8009c08:	f7ff bf78 	b.w	8009afc <_strtol_l.isra.0>

08009c0c <quorem>:
 8009c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c10:	6903      	ldr	r3, [r0, #16]
 8009c12:	690c      	ldr	r4, [r1, #16]
 8009c14:	4607      	mov	r7, r0
 8009c16:	42a3      	cmp	r3, r4
 8009c18:	f2c0 8083 	blt.w	8009d22 <quorem+0x116>
 8009c1c:	3c01      	subs	r4, #1
 8009c1e:	f100 0514 	add.w	r5, r0, #20
 8009c22:	f101 0814 	add.w	r8, r1, #20
 8009c26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c2a:	9301      	str	r3, [sp, #4]
 8009c2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c34:	3301      	adds	r3, #1
 8009c36:	429a      	cmp	r2, r3
 8009c38:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009c40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c44:	d332      	bcc.n	8009cac <quorem+0xa0>
 8009c46:	f04f 0e00 	mov.w	lr, #0
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	46ac      	mov	ip, r5
 8009c4e:	46f2      	mov	sl, lr
 8009c50:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c54:	b293      	uxth	r3, r2
 8009c56:	fb06 e303 	mla	r3, r6, r3, lr
 8009c5a:	0c12      	lsrs	r2, r2, #16
 8009c5c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009c60:	fb06 e202 	mla	r2, r6, r2, lr
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	ebaa 0303 	sub.w	r3, sl, r3
 8009c6a:	f8dc a000 	ldr.w	sl, [ip]
 8009c6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c72:	fa1f fa8a 	uxth.w	sl, sl
 8009c76:	4453      	add	r3, sl
 8009c78:	fa1f fa82 	uxth.w	sl, r2
 8009c7c:	f8dc 2000 	ldr.w	r2, [ip]
 8009c80:	4581      	cmp	r9, r0
 8009c82:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009c86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c90:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c94:	f84c 3b04 	str.w	r3, [ip], #4
 8009c98:	d2da      	bcs.n	8009c50 <quorem+0x44>
 8009c9a:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c9e:	b92b      	cbnz	r3, 8009cac <quorem+0xa0>
 8009ca0:	9b01      	ldr	r3, [sp, #4]
 8009ca2:	3b04      	subs	r3, #4
 8009ca4:	429d      	cmp	r5, r3
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	d32f      	bcc.n	8009d0a <quorem+0xfe>
 8009caa:	613c      	str	r4, [r7, #16]
 8009cac:	4638      	mov	r0, r7
 8009cae:	f001 fc8d 	bl	800b5cc <__mcmp>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	db25      	blt.n	8009d02 <quorem+0xf6>
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f04f 0c00 	mov.w	ip, #0
 8009cbc:	3601      	adds	r6, #1
 8009cbe:	f858 1b04 	ldr.w	r1, [r8], #4
 8009cc2:	f8d0 e000 	ldr.w	lr, [r0]
 8009cc6:	b28b      	uxth	r3, r1
 8009cc8:	ebac 0303 	sub.w	r3, ip, r3
 8009ccc:	fa1f f28e 	uxth.w	r2, lr
 8009cd0:	4413      	add	r3, r2
 8009cd2:	0c0a      	lsrs	r2, r1, #16
 8009cd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009cd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ce2:	45c1      	cmp	r9, r8
 8009ce4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ce8:	f840 3b04 	str.w	r3, [r0], #4
 8009cec:	d2e7      	bcs.n	8009cbe <quorem+0xb2>
 8009cee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cf6:	b922      	cbnz	r2, 8009d02 <quorem+0xf6>
 8009cf8:	3b04      	subs	r3, #4
 8009cfa:	429d      	cmp	r5, r3
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	d30a      	bcc.n	8009d16 <quorem+0x10a>
 8009d00:	613c      	str	r4, [r7, #16]
 8009d02:	4630      	mov	r0, r6
 8009d04:	b003      	add	sp, #12
 8009d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0a:	6812      	ldr	r2, [r2, #0]
 8009d0c:	3b04      	subs	r3, #4
 8009d0e:	2a00      	cmp	r2, #0
 8009d10:	d1cb      	bne.n	8009caa <quorem+0x9e>
 8009d12:	3c01      	subs	r4, #1
 8009d14:	e7c6      	b.n	8009ca4 <quorem+0x98>
 8009d16:	6812      	ldr	r2, [r2, #0]
 8009d18:	3b04      	subs	r3, #4
 8009d1a:	2a00      	cmp	r2, #0
 8009d1c:	d1f0      	bne.n	8009d00 <quorem+0xf4>
 8009d1e:	3c01      	subs	r4, #1
 8009d20:	e7eb      	b.n	8009cfa <quorem+0xee>
 8009d22:	2000      	movs	r0, #0
 8009d24:	e7ee      	b.n	8009d04 <quorem+0xf8>
	...

08009d28 <_dtoa_r>:
 8009d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	4616      	mov	r6, r2
 8009d2e:	461f      	mov	r7, r3
 8009d30:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009d32:	b099      	sub	sp, #100	; 0x64
 8009d34:	4605      	mov	r5, r0
 8009d36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009d3a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009d3e:	b974      	cbnz	r4, 8009d5e <_dtoa_r+0x36>
 8009d40:	2010      	movs	r0, #16
 8009d42:	f001 f949 	bl	800afd8 <malloc>
 8009d46:	4602      	mov	r2, r0
 8009d48:	6268      	str	r0, [r5, #36]	; 0x24
 8009d4a:	b920      	cbnz	r0, 8009d56 <_dtoa_r+0x2e>
 8009d4c:	21ea      	movs	r1, #234	; 0xea
 8009d4e:	4bae      	ldr	r3, [pc, #696]	; (800a008 <_dtoa_r+0x2e0>)
 8009d50:	48ae      	ldr	r0, [pc, #696]	; (800a00c <_dtoa_r+0x2e4>)
 8009d52:	f002 f875 	bl	800be40 <__assert_func>
 8009d56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d5a:	6004      	str	r4, [r0, #0]
 8009d5c:	60c4      	str	r4, [r0, #12]
 8009d5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d60:	6819      	ldr	r1, [r3, #0]
 8009d62:	b151      	cbz	r1, 8009d7a <_dtoa_r+0x52>
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	2301      	movs	r3, #1
 8009d68:	4093      	lsls	r3, r2
 8009d6a:	604a      	str	r2, [r1, #4]
 8009d6c:	608b      	str	r3, [r1, #8]
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f001 f9a8 	bl	800b0c4 <_Bfree>
 8009d74:	2200      	movs	r2, #0
 8009d76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d78:	601a      	str	r2, [r3, #0]
 8009d7a:	1e3b      	subs	r3, r7, #0
 8009d7c:	bfaf      	iteee	ge
 8009d7e:	2300      	movge	r3, #0
 8009d80:	2201      	movlt	r2, #1
 8009d82:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d86:	9305      	strlt	r3, [sp, #20]
 8009d88:	bfa8      	it	ge
 8009d8a:	f8c8 3000 	strge.w	r3, [r8]
 8009d8e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009d92:	4b9f      	ldr	r3, [pc, #636]	; (800a010 <_dtoa_r+0x2e8>)
 8009d94:	bfb8      	it	lt
 8009d96:	f8c8 2000 	strlt.w	r2, [r8]
 8009d9a:	ea33 0309 	bics.w	r3, r3, r9
 8009d9e:	d119      	bne.n	8009dd4 <_dtoa_r+0xac>
 8009da0:	f242 730f 	movw	r3, #9999	; 0x270f
 8009da4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009da6:	6013      	str	r3, [r2, #0]
 8009da8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009dac:	4333      	orrs	r3, r6
 8009dae:	f000 8580 	beq.w	800a8b2 <_dtoa_r+0xb8a>
 8009db2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009db4:	b953      	cbnz	r3, 8009dcc <_dtoa_r+0xa4>
 8009db6:	4b97      	ldr	r3, [pc, #604]	; (800a014 <_dtoa_r+0x2ec>)
 8009db8:	e022      	b.n	8009e00 <_dtoa_r+0xd8>
 8009dba:	4b97      	ldr	r3, [pc, #604]	; (800a018 <_dtoa_r+0x2f0>)
 8009dbc:	9308      	str	r3, [sp, #32]
 8009dbe:	3308      	adds	r3, #8
 8009dc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009dc2:	6013      	str	r3, [r2, #0]
 8009dc4:	9808      	ldr	r0, [sp, #32]
 8009dc6:	b019      	add	sp, #100	; 0x64
 8009dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dcc:	4b91      	ldr	r3, [pc, #580]	; (800a014 <_dtoa_r+0x2ec>)
 8009dce:	9308      	str	r3, [sp, #32]
 8009dd0:	3303      	adds	r3, #3
 8009dd2:	e7f5      	b.n	8009dc0 <_dtoa_r+0x98>
 8009dd4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009dd8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009ddc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009de0:	2200      	movs	r2, #0
 8009de2:	2300      	movs	r3, #0
 8009de4:	f7f6 fde0 	bl	80009a8 <__aeabi_dcmpeq>
 8009de8:	4680      	mov	r8, r0
 8009dea:	b158      	cbz	r0, 8009e04 <_dtoa_r+0xdc>
 8009dec:	2301      	movs	r3, #1
 8009dee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009df0:	6013      	str	r3, [r2, #0]
 8009df2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f000 8559 	beq.w	800a8ac <_dtoa_r+0xb84>
 8009dfa:	4888      	ldr	r0, [pc, #544]	; (800a01c <_dtoa_r+0x2f4>)
 8009dfc:	6018      	str	r0, [r3, #0]
 8009dfe:	1e43      	subs	r3, r0, #1
 8009e00:	9308      	str	r3, [sp, #32]
 8009e02:	e7df      	b.n	8009dc4 <_dtoa_r+0x9c>
 8009e04:	ab16      	add	r3, sp, #88	; 0x58
 8009e06:	9301      	str	r3, [sp, #4]
 8009e08:	ab17      	add	r3, sp, #92	; 0x5c
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009e12:	f001 fd01 	bl	800b818 <__d2b>
 8009e16:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009e1a:	4682      	mov	sl, r0
 8009e1c:	2c00      	cmp	r4, #0
 8009e1e:	d07e      	beq.n	8009f1e <_dtoa_r+0x1f6>
 8009e20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e26:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009e2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009e32:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009e36:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	4b78      	ldr	r3, [pc, #480]	; (800a020 <_dtoa_r+0x2f8>)
 8009e3e:	f7f6 f993 	bl	8000168 <__aeabi_dsub>
 8009e42:	a36b      	add	r3, pc, #428	; (adr r3, 8009ff0 <_dtoa_r+0x2c8>)
 8009e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e48:	f7f6 fb46 	bl	80004d8 <__aeabi_dmul>
 8009e4c:	a36a      	add	r3, pc, #424	; (adr r3, 8009ff8 <_dtoa_r+0x2d0>)
 8009e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e52:	f7f6 f98b 	bl	800016c <__adddf3>
 8009e56:	4606      	mov	r6, r0
 8009e58:	4620      	mov	r0, r4
 8009e5a:	460f      	mov	r7, r1
 8009e5c:	f7f6 fad2 	bl	8000404 <__aeabi_i2d>
 8009e60:	a367      	add	r3, pc, #412	; (adr r3, 800a000 <_dtoa_r+0x2d8>)
 8009e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e66:	f7f6 fb37 	bl	80004d8 <__aeabi_dmul>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	4630      	mov	r0, r6
 8009e70:	4639      	mov	r1, r7
 8009e72:	f7f6 f97b 	bl	800016c <__adddf3>
 8009e76:	4606      	mov	r6, r0
 8009e78:	460f      	mov	r7, r1
 8009e7a:	f7f6 fddd 	bl	8000a38 <__aeabi_d2iz>
 8009e7e:	2200      	movs	r2, #0
 8009e80:	4681      	mov	r9, r0
 8009e82:	2300      	movs	r3, #0
 8009e84:	4630      	mov	r0, r6
 8009e86:	4639      	mov	r1, r7
 8009e88:	f7f6 fd98 	bl	80009bc <__aeabi_dcmplt>
 8009e8c:	b148      	cbz	r0, 8009ea2 <_dtoa_r+0x17a>
 8009e8e:	4648      	mov	r0, r9
 8009e90:	f7f6 fab8 	bl	8000404 <__aeabi_i2d>
 8009e94:	4632      	mov	r2, r6
 8009e96:	463b      	mov	r3, r7
 8009e98:	f7f6 fd86 	bl	80009a8 <__aeabi_dcmpeq>
 8009e9c:	b908      	cbnz	r0, 8009ea2 <_dtoa_r+0x17a>
 8009e9e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009ea2:	f1b9 0f16 	cmp.w	r9, #22
 8009ea6:	d857      	bhi.n	8009f58 <_dtoa_r+0x230>
 8009ea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009eac:	4b5d      	ldr	r3, [pc, #372]	; (800a024 <_dtoa_r+0x2fc>)
 8009eae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f7f6 fd81 	bl	80009bc <__aeabi_dcmplt>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	d04e      	beq.n	8009f5c <_dtoa_r+0x234>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009ec4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ec6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009ec8:	1b1c      	subs	r4, r3, r4
 8009eca:	1e63      	subs	r3, r4, #1
 8009ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ece:	bf49      	itett	mi
 8009ed0:	f1c4 0301 	rsbmi	r3, r4, #1
 8009ed4:	2300      	movpl	r3, #0
 8009ed6:	9306      	strmi	r3, [sp, #24]
 8009ed8:	2300      	movmi	r3, #0
 8009eda:	bf54      	ite	pl
 8009edc:	9306      	strpl	r3, [sp, #24]
 8009ede:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009ee0:	f1b9 0f00 	cmp.w	r9, #0
 8009ee4:	db3c      	blt.n	8009f60 <_dtoa_r+0x238>
 8009ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009eec:	444b      	add	r3, r9
 8009eee:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8009ef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ef6:	2b09      	cmp	r3, #9
 8009ef8:	d86c      	bhi.n	8009fd4 <_dtoa_r+0x2ac>
 8009efa:	2b05      	cmp	r3, #5
 8009efc:	bfc4      	itt	gt
 8009efe:	3b04      	subgt	r3, #4
 8009f00:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009f02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f04:	bfc8      	it	gt
 8009f06:	2400      	movgt	r4, #0
 8009f08:	f1a3 0302 	sub.w	r3, r3, #2
 8009f0c:	bfd8      	it	le
 8009f0e:	2401      	movle	r4, #1
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	f200 808b 	bhi.w	800a02c <_dtoa_r+0x304>
 8009f16:	e8df f003 	tbb	[pc, r3]
 8009f1a:	4f2d      	.short	0x4f2d
 8009f1c:	5b4d      	.short	0x5b4d
 8009f1e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009f22:	441c      	add	r4, r3
 8009f24:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009f28:	2b20      	cmp	r3, #32
 8009f2a:	bfc3      	ittte	gt
 8009f2c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009f30:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009f34:	fa09 f303 	lslgt.w	r3, r9, r3
 8009f38:	f1c3 0320 	rsble	r3, r3, #32
 8009f3c:	bfc6      	itte	gt
 8009f3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009f42:	4318      	orrgt	r0, r3
 8009f44:	fa06 f003 	lslle.w	r0, r6, r3
 8009f48:	f7f6 fa4c 	bl	80003e4 <__aeabi_ui2d>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009f52:	3c01      	subs	r4, #1
 8009f54:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f56:	e770      	b.n	8009e3a <_dtoa_r+0x112>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e7b3      	b.n	8009ec4 <_dtoa_r+0x19c>
 8009f5c:	900f      	str	r0, [sp, #60]	; 0x3c
 8009f5e:	e7b2      	b.n	8009ec6 <_dtoa_r+0x19e>
 8009f60:	9b06      	ldr	r3, [sp, #24]
 8009f62:	eba3 0309 	sub.w	r3, r3, r9
 8009f66:	9306      	str	r3, [sp, #24]
 8009f68:	f1c9 0300 	rsb	r3, r9, #0
 8009f6c:	930a      	str	r3, [sp, #40]	; 0x28
 8009f6e:	2300      	movs	r3, #0
 8009f70:	930e      	str	r3, [sp, #56]	; 0x38
 8009f72:	e7bf      	b.n	8009ef4 <_dtoa_r+0x1cc>
 8009f74:	2300      	movs	r3, #0
 8009f76:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	dc59      	bgt.n	800a032 <_dtoa_r+0x30a>
 8009f7e:	f04f 0b01 	mov.w	fp, #1
 8009f82:	465b      	mov	r3, fp
 8009f84:	f8cd b008 	str.w	fp, [sp, #8]
 8009f88:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009f90:	6042      	str	r2, [r0, #4]
 8009f92:	2204      	movs	r2, #4
 8009f94:	f102 0614 	add.w	r6, r2, #20
 8009f98:	429e      	cmp	r6, r3
 8009f9a:	6841      	ldr	r1, [r0, #4]
 8009f9c:	d94f      	bls.n	800a03e <_dtoa_r+0x316>
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f001 f850 	bl	800b044 <_Balloc>
 8009fa4:	9008      	str	r0, [sp, #32]
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d14d      	bne.n	800a046 <_dtoa_r+0x31e>
 8009faa:	4602      	mov	r2, r0
 8009fac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009fb0:	4b1d      	ldr	r3, [pc, #116]	; (800a028 <_dtoa_r+0x300>)
 8009fb2:	e6cd      	b.n	8009d50 <_dtoa_r+0x28>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e7de      	b.n	8009f76 <_dtoa_r+0x24e>
 8009fb8:	2300      	movs	r3, #0
 8009fba:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009fbe:	eb09 0b03 	add.w	fp, r9, r3
 8009fc2:	f10b 0301 	add.w	r3, fp, #1
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	9302      	str	r3, [sp, #8]
 8009fca:	bfb8      	it	lt
 8009fcc:	2301      	movlt	r3, #1
 8009fce:	e7dd      	b.n	8009f8c <_dtoa_r+0x264>
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e7f2      	b.n	8009fba <_dtoa_r+0x292>
 8009fd4:	2401      	movs	r4, #1
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	940b      	str	r4, [sp, #44]	; 0x2c
 8009fda:	9322      	str	r3, [sp, #136]	; 0x88
 8009fdc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	2312      	movs	r3, #18
 8009fe4:	f8cd b008 	str.w	fp, [sp, #8]
 8009fe8:	9223      	str	r2, [sp, #140]	; 0x8c
 8009fea:	e7cf      	b.n	8009f8c <_dtoa_r+0x264>
 8009fec:	f3af 8000 	nop.w
 8009ff0:	636f4361 	.word	0x636f4361
 8009ff4:	3fd287a7 	.word	0x3fd287a7
 8009ff8:	8b60c8b3 	.word	0x8b60c8b3
 8009ffc:	3fc68a28 	.word	0x3fc68a28
 800a000:	509f79fb 	.word	0x509f79fb
 800a004:	3fd34413 	.word	0x3fd34413
 800a008:	0800e60e 	.word	0x0800e60e
 800a00c:	0800e625 	.word	0x0800e625
 800a010:	7ff00000 	.word	0x7ff00000
 800a014:	0800e60a 	.word	0x0800e60a
 800a018:	0800e601 	.word	0x0800e601
 800a01c:	0800e485 	.word	0x0800e485
 800a020:	3ff80000 	.word	0x3ff80000
 800a024:	0800e7a0 	.word	0x0800e7a0
 800a028:	0800e684 	.word	0x0800e684
 800a02c:	2301      	movs	r3, #1
 800a02e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a030:	e7d4      	b.n	8009fdc <_dtoa_r+0x2b4>
 800a032:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800a036:	465b      	mov	r3, fp
 800a038:	f8cd b008 	str.w	fp, [sp, #8]
 800a03c:	e7a6      	b.n	8009f8c <_dtoa_r+0x264>
 800a03e:	3101      	adds	r1, #1
 800a040:	6041      	str	r1, [r0, #4]
 800a042:	0052      	lsls	r2, r2, #1
 800a044:	e7a6      	b.n	8009f94 <_dtoa_r+0x26c>
 800a046:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a048:	9a08      	ldr	r2, [sp, #32]
 800a04a:	601a      	str	r2, [r3, #0]
 800a04c:	9b02      	ldr	r3, [sp, #8]
 800a04e:	2b0e      	cmp	r3, #14
 800a050:	f200 80a8 	bhi.w	800a1a4 <_dtoa_r+0x47c>
 800a054:	2c00      	cmp	r4, #0
 800a056:	f000 80a5 	beq.w	800a1a4 <_dtoa_r+0x47c>
 800a05a:	f1b9 0f00 	cmp.w	r9, #0
 800a05e:	dd34      	ble.n	800a0ca <_dtoa_r+0x3a2>
 800a060:	4a9a      	ldr	r2, [pc, #616]	; (800a2cc <_dtoa_r+0x5a4>)
 800a062:	f009 030f 	and.w	r3, r9, #15
 800a066:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a06a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a06e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a072:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a076:	ea4f 1429 	mov.w	r4, r9, asr #4
 800a07a:	d016      	beq.n	800a0aa <_dtoa_r+0x382>
 800a07c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a080:	4b93      	ldr	r3, [pc, #588]	; (800a2d0 <_dtoa_r+0x5a8>)
 800a082:	2703      	movs	r7, #3
 800a084:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a088:	f7f6 fb50 	bl	800072c <__aeabi_ddiv>
 800a08c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a090:	f004 040f 	and.w	r4, r4, #15
 800a094:	4e8e      	ldr	r6, [pc, #568]	; (800a2d0 <_dtoa_r+0x5a8>)
 800a096:	b954      	cbnz	r4, 800a0ae <_dtoa_r+0x386>
 800a098:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a09c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0a0:	f7f6 fb44 	bl	800072c <__aeabi_ddiv>
 800a0a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0a8:	e029      	b.n	800a0fe <_dtoa_r+0x3d6>
 800a0aa:	2702      	movs	r7, #2
 800a0ac:	e7f2      	b.n	800a094 <_dtoa_r+0x36c>
 800a0ae:	07e1      	lsls	r1, r4, #31
 800a0b0:	d508      	bpl.n	800a0c4 <_dtoa_r+0x39c>
 800a0b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a0ba:	f7f6 fa0d 	bl	80004d8 <__aeabi_dmul>
 800a0be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a0c2:	3701      	adds	r7, #1
 800a0c4:	1064      	asrs	r4, r4, #1
 800a0c6:	3608      	adds	r6, #8
 800a0c8:	e7e5      	b.n	800a096 <_dtoa_r+0x36e>
 800a0ca:	f000 80a5 	beq.w	800a218 <_dtoa_r+0x4f0>
 800a0ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0d2:	f1c9 0400 	rsb	r4, r9, #0
 800a0d6:	4b7d      	ldr	r3, [pc, #500]	; (800a2cc <_dtoa_r+0x5a4>)
 800a0d8:	f004 020f 	and.w	r2, r4, #15
 800a0dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	f7f6 f9f8 	bl	80004d8 <__aeabi_dmul>
 800a0e8:	2702      	movs	r7, #2
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0f0:	4e77      	ldr	r6, [pc, #476]	; (800a2d0 <_dtoa_r+0x5a8>)
 800a0f2:	1124      	asrs	r4, r4, #4
 800a0f4:	2c00      	cmp	r4, #0
 800a0f6:	f040 8084 	bne.w	800a202 <_dtoa_r+0x4da>
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1d2      	bne.n	800a0a4 <_dtoa_r+0x37c>
 800a0fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a100:	2b00      	cmp	r3, #0
 800a102:	f000 808b 	beq.w	800a21c <_dtoa_r+0x4f4>
 800a106:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a10a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a10e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a112:	2200      	movs	r2, #0
 800a114:	4b6f      	ldr	r3, [pc, #444]	; (800a2d4 <_dtoa_r+0x5ac>)
 800a116:	f7f6 fc51 	bl	80009bc <__aeabi_dcmplt>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	d07e      	beq.n	800a21c <_dtoa_r+0x4f4>
 800a11e:	9b02      	ldr	r3, [sp, #8]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d07b      	beq.n	800a21c <_dtoa_r+0x4f4>
 800a124:	f1bb 0f00 	cmp.w	fp, #0
 800a128:	dd38      	ble.n	800a19c <_dtoa_r+0x474>
 800a12a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a12e:	2200      	movs	r2, #0
 800a130:	4b69      	ldr	r3, [pc, #420]	; (800a2d8 <_dtoa_r+0x5b0>)
 800a132:	f7f6 f9d1 	bl	80004d8 <__aeabi_dmul>
 800a136:	465c      	mov	r4, fp
 800a138:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a13c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 800a140:	3701      	adds	r7, #1
 800a142:	4638      	mov	r0, r7
 800a144:	f7f6 f95e 	bl	8000404 <__aeabi_i2d>
 800a148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a14c:	f7f6 f9c4 	bl	80004d8 <__aeabi_dmul>
 800a150:	2200      	movs	r2, #0
 800a152:	4b62      	ldr	r3, [pc, #392]	; (800a2dc <_dtoa_r+0x5b4>)
 800a154:	f7f6 f80a 	bl	800016c <__adddf3>
 800a158:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a15c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a160:	9611      	str	r6, [sp, #68]	; 0x44
 800a162:	2c00      	cmp	r4, #0
 800a164:	d15d      	bne.n	800a222 <_dtoa_r+0x4fa>
 800a166:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a16a:	2200      	movs	r2, #0
 800a16c:	4b5c      	ldr	r3, [pc, #368]	; (800a2e0 <_dtoa_r+0x5b8>)
 800a16e:	f7f5 fffb 	bl	8000168 <__aeabi_dsub>
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a17a:	4633      	mov	r3, r6
 800a17c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a17e:	f7f6 fc3b 	bl	80009f8 <__aeabi_dcmpgt>
 800a182:	2800      	cmp	r0, #0
 800a184:	f040 829e 	bne.w	800a6c4 <_dtoa_r+0x99c>
 800a188:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a18c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a18e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a192:	f7f6 fc13 	bl	80009bc <__aeabi_dcmplt>
 800a196:	2800      	cmp	r0, #0
 800a198:	f040 8292 	bne.w	800a6c0 <_dtoa_r+0x998>
 800a19c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a1a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a1a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f2c0 8153 	blt.w	800a452 <_dtoa_r+0x72a>
 800a1ac:	f1b9 0f0e 	cmp.w	r9, #14
 800a1b0:	f300 814f 	bgt.w	800a452 <_dtoa_r+0x72a>
 800a1b4:	4b45      	ldr	r3, [pc, #276]	; (800a2cc <_dtoa_r+0x5a4>)
 800a1b6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a1ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a1c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f280 80db 	bge.w	800a380 <_dtoa_r+0x658>
 800a1ca:	9b02      	ldr	r3, [sp, #8]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f300 80d7 	bgt.w	800a380 <_dtoa_r+0x658>
 800a1d2:	f040 8274 	bne.w	800a6be <_dtoa_r+0x996>
 800a1d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	4b40      	ldr	r3, [pc, #256]	; (800a2e0 <_dtoa_r+0x5b8>)
 800a1de:	f7f6 f97b 	bl	80004d8 <__aeabi_dmul>
 800a1e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1e6:	f7f6 fbfd 	bl	80009e4 <__aeabi_dcmpge>
 800a1ea:	9c02      	ldr	r4, [sp, #8]
 800a1ec:	4626      	mov	r6, r4
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	f040 824a 	bne.w	800a688 <_dtoa_r+0x960>
 800a1f4:	2331      	movs	r3, #49	; 0x31
 800a1f6:	9f08      	ldr	r7, [sp, #32]
 800a1f8:	f109 0901 	add.w	r9, r9, #1
 800a1fc:	f807 3b01 	strb.w	r3, [r7], #1
 800a200:	e246      	b.n	800a690 <_dtoa_r+0x968>
 800a202:	07e2      	lsls	r2, r4, #31
 800a204:	d505      	bpl.n	800a212 <_dtoa_r+0x4ea>
 800a206:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a20a:	f7f6 f965 	bl	80004d8 <__aeabi_dmul>
 800a20e:	2301      	movs	r3, #1
 800a210:	3701      	adds	r7, #1
 800a212:	1064      	asrs	r4, r4, #1
 800a214:	3608      	adds	r6, #8
 800a216:	e76d      	b.n	800a0f4 <_dtoa_r+0x3cc>
 800a218:	2702      	movs	r7, #2
 800a21a:	e770      	b.n	800a0fe <_dtoa_r+0x3d6>
 800a21c:	46c8      	mov	r8, r9
 800a21e:	9c02      	ldr	r4, [sp, #8]
 800a220:	e78f      	b.n	800a142 <_dtoa_r+0x41a>
 800a222:	9908      	ldr	r1, [sp, #32]
 800a224:	4b29      	ldr	r3, [pc, #164]	; (800a2cc <_dtoa_r+0x5a4>)
 800a226:	4421      	add	r1, r4
 800a228:	9112      	str	r1, [sp, #72]	; 0x48
 800a22a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a22c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a230:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a234:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a238:	2900      	cmp	r1, #0
 800a23a:	d055      	beq.n	800a2e8 <_dtoa_r+0x5c0>
 800a23c:	2000      	movs	r0, #0
 800a23e:	4929      	ldr	r1, [pc, #164]	; (800a2e4 <_dtoa_r+0x5bc>)
 800a240:	f7f6 fa74 	bl	800072c <__aeabi_ddiv>
 800a244:	463b      	mov	r3, r7
 800a246:	4632      	mov	r2, r6
 800a248:	f7f5 ff8e 	bl	8000168 <__aeabi_dsub>
 800a24c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a250:	9f08      	ldr	r7, [sp, #32]
 800a252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a256:	f7f6 fbef 	bl	8000a38 <__aeabi_d2iz>
 800a25a:	4604      	mov	r4, r0
 800a25c:	f7f6 f8d2 	bl	8000404 <__aeabi_i2d>
 800a260:	4602      	mov	r2, r0
 800a262:	460b      	mov	r3, r1
 800a264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a268:	f7f5 ff7e 	bl	8000168 <__aeabi_dsub>
 800a26c:	4602      	mov	r2, r0
 800a26e:	460b      	mov	r3, r1
 800a270:	3430      	adds	r4, #48	; 0x30
 800a272:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a276:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a27a:	f807 4b01 	strb.w	r4, [r7], #1
 800a27e:	f7f6 fb9d 	bl	80009bc <__aeabi_dcmplt>
 800a282:	2800      	cmp	r0, #0
 800a284:	d174      	bne.n	800a370 <_dtoa_r+0x648>
 800a286:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a28a:	2000      	movs	r0, #0
 800a28c:	4911      	ldr	r1, [pc, #68]	; (800a2d4 <_dtoa_r+0x5ac>)
 800a28e:	f7f5 ff6b 	bl	8000168 <__aeabi_dsub>
 800a292:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a296:	f7f6 fb91 	bl	80009bc <__aeabi_dcmplt>
 800a29a:	2800      	cmp	r0, #0
 800a29c:	f040 80b6 	bne.w	800a40c <_dtoa_r+0x6e4>
 800a2a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2a2:	429f      	cmp	r7, r3
 800a2a4:	f43f af7a 	beq.w	800a19c <_dtoa_r+0x474>
 800a2a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	4b0a      	ldr	r3, [pc, #40]	; (800a2d8 <_dtoa_r+0x5b0>)
 800a2b0:	f7f6 f912 	bl	80004d8 <__aeabi_dmul>
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a2ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2be:	4b06      	ldr	r3, [pc, #24]	; (800a2d8 <_dtoa_r+0x5b0>)
 800a2c0:	f7f6 f90a 	bl	80004d8 <__aeabi_dmul>
 800a2c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2c8:	e7c3      	b.n	800a252 <_dtoa_r+0x52a>
 800a2ca:	bf00      	nop
 800a2cc:	0800e7a0 	.word	0x0800e7a0
 800a2d0:	0800e778 	.word	0x0800e778
 800a2d4:	3ff00000 	.word	0x3ff00000
 800a2d8:	40240000 	.word	0x40240000
 800a2dc:	401c0000 	.word	0x401c0000
 800a2e0:	40140000 	.word	0x40140000
 800a2e4:	3fe00000 	.word	0x3fe00000
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	4639      	mov	r1, r7
 800a2ec:	f7f6 f8f4 	bl	80004d8 <__aeabi_dmul>
 800a2f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a2f6:	9c08      	ldr	r4, [sp, #32]
 800a2f8:	9314      	str	r3, [sp, #80]	; 0x50
 800a2fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2fe:	f7f6 fb9b 	bl	8000a38 <__aeabi_d2iz>
 800a302:	9015      	str	r0, [sp, #84]	; 0x54
 800a304:	f7f6 f87e 	bl	8000404 <__aeabi_i2d>
 800a308:	4602      	mov	r2, r0
 800a30a:	460b      	mov	r3, r1
 800a30c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a310:	f7f5 ff2a 	bl	8000168 <__aeabi_dsub>
 800a314:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a316:	4606      	mov	r6, r0
 800a318:	3330      	adds	r3, #48	; 0x30
 800a31a:	f804 3b01 	strb.w	r3, [r4], #1
 800a31e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a320:	460f      	mov	r7, r1
 800a322:	429c      	cmp	r4, r3
 800a324:	f04f 0200 	mov.w	r2, #0
 800a328:	d124      	bne.n	800a374 <_dtoa_r+0x64c>
 800a32a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a32e:	4bb3      	ldr	r3, [pc, #716]	; (800a5fc <_dtoa_r+0x8d4>)
 800a330:	f7f5 ff1c 	bl	800016c <__adddf3>
 800a334:	4602      	mov	r2, r0
 800a336:	460b      	mov	r3, r1
 800a338:	4630      	mov	r0, r6
 800a33a:	4639      	mov	r1, r7
 800a33c:	f7f6 fb5c 	bl	80009f8 <__aeabi_dcmpgt>
 800a340:	2800      	cmp	r0, #0
 800a342:	d162      	bne.n	800a40a <_dtoa_r+0x6e2>
 800a344:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a348:	2000      	movs	r0, #0
 800a34a:	49ac      	ldr	r1, [pc, #688]	; (800a5fc <_dtoa_r+0x8d4>)
 800a34c:	f7f5 ff0c 	bl	8000168 <__aeabi_dsub>
 800a350:	4602      	mov	r2, r0
 800a352:	460b      	mov	r3, r1
 800a354:	4630      	mov	r0, r6
 800a356:	4639      	mov	r1, r7
 800a358:	f7f6 fb30 	bl	80009bc <__aeabi_dcmplt>
 800a35c:	2800      	cmp	r0, #0
 800a35e:	f43f af1d 	beq.w	800a19c <_dtoa_r+0x474>
 800a362:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a364:	1e7b      	subs	r3, r7, #1
 800a366:	9314      	str	r3, [sp, #80]	; 0x50
 800a368:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a36c:	2b30      	cmp	r3, #48	; 0x30
 800a36e:	d0f8      	beq.n	800a362 <_dtoa_r+0x63a>
 800a370:	46c1      	mov	r9, r8
 800a372:	e03a      	b.n	800a3ea <_dtoa_r+0x6c2>
 800a374:	4ba2      	ldr	r3, [pc, #648]	; (800a600 <_dtoa_r+0x8d8>)
 800a376:	f7f6 f8af 	bl	80004d8 <__aeabi_dmul>
 800a37a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a37e:	e7bc      	b.n	800a2fa <_dtoa_r+0x5d2>
 800a380:	9f08      	ldr	r7, [sp, #32]
 800a382:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a386:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a38a:	f7f6 f9cf 	bl	800072c <__aeabi_ddiv>
 800a38e:	f7f6 fb53 	bl	8000a38 <__aeabi_d2iz>
 800a392:	4604      	mov	r4, r0
 800a394:	f7f6 f836 	bl	8000404 <__aeabi_i2d>
 800a398:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a39c:	f7f6 f89c 	bl	80004d8 <__aeabi_dmul>
 800a3a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3ac:	f7f5 fedc 	bl	8000168 <__aeabi_dsub>
 800a3b0:	f807 6b01 	strb.w	r6, [r7], #1
 800a3b4:	9e08      	ldr	r6, [sp, #32]
 800a3b6:	9b02      	ldr	r3, [sp, #8]
 800a3b8:	1bbe      	subs	r6, r7, r6
 800a3ba:	42b3      	cmp	r3, r6
 800a3bc:	d13a      	bne.n	800a434 <_dtoa_r+0x70c>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	f7f5 fed3 	bl	800016c <__adddf3>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3d2:	f7f6 fb11 	bl	80009f8 <__aeabi_dcmpgt>
 800a3d6:	bb58      	cbnz	r0, 800a430 <_dtoa_r+0x708>
 800a3d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3e0:	f7f6 fae2 	bl	80009a8 <__aeabi_dcmpeq>
 800a3e4:	b108      	cbz	r0, 800a3ea <_dtoa_r+0x6c2>
 800a3e6:	07e1      	lsls	r1, r4, #31
 800a3e8:	d422      	bmi.n	800a430 <_dtoa_r+0x708>
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	4651      	mov	r1, sl
 800a3ee:	f000 fe69 	bl	800b0c4 <_Bfree>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	703b      	strb	r3, [r7, #0]
 800a3f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a3f8:	f109 0001 	add.w	r0, r9, #1
 800a3fc:	6018      	str	r0, [r3, #0]
 800a3fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a400:	2b00      	cmp	r3, #0
 800a402:	f43f acdf 	beq.w	8009dc4 <_dtoa_r+0x9c>
 800a406:	601f      	str	r7, [r3, #0]
 800a408:	e4dc      	b.n	8009dc4 <_dtoa_r+0x9c>
 800a40a:	4627      	mov	r7, r4
 800a40c:	463b      	mov	r3, r7
 800a40e:	461f      	mov	r7, r3
 800a410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a414:	2a39      	cmp	r2, #57	; 0x39
 800a416:	d107      	bne.n	800a428 <_dtoa_r+0x700>
 800a418:	9a08      	ldr	r2, [sp, #32]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d1f7      	bne.n	800a40e <_dtoa_r+0x6e6>
 800a41e:	2230      	movs	r2, #48	; 0x30
 800a420:	9908      	ldr	r1, [sp, #32]
 800a422:	f108 0801 	add.w	r8, r8, #1
 800a426:	700a      	strb	r2, [r1, #0]
 800a428:	781a      	ldrb	r2, [r3, #0]
 800a42a:	3201      	adds	r2, #1
 800a42c:	701a      	strb	r2, [r3, #0]
 800a42e:	e79f      	b.n	800a370 <_dtoa_r+0x648>
 800a430:	46c8      	mov	r8, r9
 800a432:	e7eb      	b.n	800a40c <_dtoa_r+0x6e4>
 800a434:	2200      	movs	r2, #0
 800a436:	4b72      	ldr	r3, [pc, #456]	; (800a600 <_dtoa_r+0x8d8>)
 800a438:	f7f6 f84e 	bl	80004d8 <__aeabi_dmul>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a444:	2200      	movs	r2, #0
 800a446:	2300      	movs	r3, #0
 800a448:	f7f6 faae 	bl	80009a8 <__aeabi_dcmpeq>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d098      	beq.n	800a382 <_dtoa_r+0x65a>
 800a450:	e7cb      	b.n	800a3ea <_dtoa_r+0x6c2>
 800a452:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a454:	2a00      	cmp	r2, #0
 800a456:	f000 80cd 	beq.w	800a5f4 <_dtoa_r+0x8cc>
 800a45a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a45c:	2a01      	cmp	r2, #1
 800a45e:	f300 80af 	bgt.w	800a5c0 <_dtoa_r+0x898>
 800a462:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a464:	2a00      	cmp	r2, #0
 800a466:	f000 80a7 	beq.w	800a5b8 <_dtoa_r+0x890>
 800a46a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a46e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a470:	9f06      	ldr	r7, [sp, #24]
 800a472:	9a06      	ldr	r2, [sp, #24]
 800a474:	2101      	movs	r1, #1
 800a476:	441a      	add	r2, r3
 800a478:	9206      	str	r2, [sp, #24]
 800a47a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a47c:	4628      	mov	r0, r5
 800a47e:	441a      	add	r2, r3
 800a480:	9209      	str	r2, [sp, #36]	; 0x24
 800a482:	f000 ff23 	bl	800b2cc <__i2b>
 800a486:	4606      	mov	r6, r0
 800a488:	2f00      	cmp	r7, #0
 800a48a:	dd0c      	ble.n	800a4a6 <_dtoa_r+0x77e>
 800a48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a48e:	2b00      	cmp	r3, #0
 800a490:	dd09      	ble.n	800a4a6 <_dtoa_r+0x77e>
 800a492:	42bb      	cmp	r3, r7
 800a494:	bfa8      	it	ge
 800a496:	463b      	movge	r3, r7
 800a498:	9a06      	ldr	r2, [sp, #24]
 800a49a:	1aff      	subs	r7, r7, r3
 800a49c:	1ad2      	subs	r2, r2, r3
 800a49e:	9206      	str	r2, [sp, #24]
 800a4a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4a2:	1ad3      	subs	r3, r2, r3
 800a4a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4a8:	b1f3      	cbz	r3, 800a4e8 <_dtoa_r+0x7c0>
 800a4aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f000 80a9 	beq.w	800a604 <_dtoa_r+0x8dc>
 800a4b2:	2c00      	cmp	r4, #0
 800a4b4:	dd10      	ble.n	800a4d8 <_dtoa_r+0x7b0>
 800a4b6:	4631      	mov	r1, r6
 800a4b8:	4622      	mov	r2, r4
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	f000 ffc0 	bl	800b440 <__pow5mult>
 800a4c0:	4652      	mov	r2, sl
 800a4c2:	4601      	mov	r1, r0
 800a4c4:	4606      	mov	r6, r0
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	f000 ff16 	bl	800b2f8 <__multiply>
 800a4cc:	4680      	mov	r8, r0
 800a4ce:	4651      	mov	r1, sl
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	f000 fdf7 	bl	800b0c4 <_Bfree>
 800a4d6:	46c2      	mov	sl, r8
 800a4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4da:	1b1a      	subs	r2, r3, r4
 800a4dc:	d004      	beq.n	800a4e8 <_dtoa_r+0x7c0>
 800a4de:	4651      	mov	r1, sl
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	f000 ffad 	bl	800b440 <__pow5mult>
 800a4e6:	4682      	mov	sl, r0
 800a4e8:	2101      	movs	r1, #1
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	f000 feee 	bl	800b2cc <__i2b>
 800a4f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f340 8087 	ble.w	800a608 <_dtoa_r+0x8e0>
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	4601      	mov	r1, r0
 800a4fe:	4628      	mov	r0, r5
 800a500:	f000 ff9e 	bl	800b440 <__pow5mult>
 800a504:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a506:	4604      	mov	r4, r0
 800a508:	2b01      	cmp	r3, #1
 800a50a:	f340 8080 	ble.w	800a60e <_dtoa_r+0x8e6>
 800a50e:	f04f 0800 	mov.w	r8, #0
 800a512:	6923      	ldr	r3, [r4, #16]
 800a514:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a518:	6918      	ldr	r0, [r3, #16]
 800a51a:	f000 fe89 	bl	800b230 <__hi0bits>
 800a51e:	f1c0 0020 	rsb	r0, r0, #32
 800a522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a524:	4418      	add	r0, r3
 800a526:	f010 001f 	ands.w	r0, r0, #31
 800a52a:	f000 8092 	beq.w	800a652 <_dtoa_r+0x92a>
 800a52e:	f1c0 0320 	rsb	r3, r0, #32
 800a532:	2b04      	cmp	r3, #4
 800a534:	f340 808a 	ble.w	800a64c <_dtoa_r+0x924>
 800a538:	f1c0 001c 	rsb	r0, r0, #28
 800a53c:	9b06      	ldr	r3, [sp, #24]
 800a53e:	4407      	add	r7, r0
 800a540:	4403      	add	r3, r0
 800a542:	9306      	str	r3, [sp, #24]
 800a544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a546:	4403      	add	r3, r0
 800a548:	9309      	str	r3, [sp, #36]	; 0x24
 800a54a:	9b06      	ldr	r3, [sp, #24]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	dd05      	ble.n	800a55c <_dtoa_r+0x834>
 800a550:	4651      	mov	r1, sl
 800a552:	461a      	mov	r2, r3
 800a554:	4628      	mov	r0, r5
 800a556:	f000 ffcd 	bl	800b4f4 <__lshift>
 800a55a:	4682      	mov	sl, r0
 800a55c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a55e:	2b00      	cmp	r3, #0
 800a560:	dd05      	ble.n	800a56e <_dtoa_r+0x846>
 800a562:	4621      	mov	r1, r4
 800a564:	461a      	mov	r2, r3
 800a566:	4628      	mov	r0, r5
 800a568:	f000 ffc4 	bl	800b4f4 <__lshift>
 800a56c:	4604      	mov	r4, r0
 800a56e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a570:	2b00      	cmp	r3, #0
 800a572:	d070      	beq.n	800a656 <_dtoa_r+0x92e>
 800a574:	4621      	mov	r1, r4
 800a576:	4650      	mov	r0, sl
 800a578:	f001 f828 	bl	800b5cc <__mcmp>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	da6a      	bge.n	800a656 <_dtoa_r+0x92e>
 800a580:	2300      	movs	r3, #0
 800a582:	4651      	mov	r1, sl
 800a584:	220a      	movs	r2, #10
 800a586:	4628      	mov	r0, r5
 800a588:	f000 fdbe 	bl	800b108 <__multadd>
 800a58c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a58e:	4682      	mov	sl, r0
 800a590:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a594:	2b00      	cmp	r3, #0
 800a596:	f000 8193 	beq.w	800a8c0 <_dtoa_r+0xb98>
 800a59a:	4631      	mov	r1, r6
 800a59c:	2300      	movs	r3, #0
 800a59e:	220a      	movs	r2, #10
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	f000 fdb1 	bl	800b108 <__multadd>
 800a5a6:	f1bb 0f00 	cmp.w	fp, #0
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	f300 8093 	bgt.w	800a6d6 <_dtoa_r+0x9ae>
 800a5b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	dc57      	bgt.n	800a666 <_dtoa_r+0x93e>
 800a5b6:	e08e      	b.n	800a6d6 <_dtoa_r+0x9ae>
 800a5b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a5ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a5be:	e756      	b.n	800a46e <_dtoa_r+0x746>
 800a5c0:	9b02      	ldr	r3, [sp, #8]
 800a5c2:	1e5c      	subs	r4, r3, #1
 800a5c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5c6:	42a3      	cmp	r3, r4
 800a5c8:	bfb7      	itett	lt
 800a5ca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a5cc:	1b1c      	subge	r4, r3, r4
 800a5ce:	1ae2      	sublt	r2, r4, r3
 800a5d0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a5d2:	bfbe      	ittt	lt
 800a5d4:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a5d6:	189b      	addlt	r3, r3, r2
 800a5d8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a5da:	9b02      	ldr	r3, [sp, #8]
 800a5dc:	bfb8      	it	lt
 800a5de:	2400      	movlt	r4, #0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	bfbb      	ittet	lt
 800a5e4:	9b06      	ldrlt	r3, [sp, #24]
 800a5e6:	9a02      	ldrlt	r2, [sp, #8]
 800a5e8:	9f06      	ldrge	r7, [sp, #24]
 800a5ea:	1a9f      	sublt	r7, r3, r2
 800a5ec:	bfac      	ite	ge
 800a5ee:	9b02      	ldrge	r3, [sp, #8]
 800a5f0:	2300      	movlt	r3, #0
 800a5f2:	e73e      	b.n	800a472 <_dtoa_r+0x74a>
 800a5f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a5f6:	9f06      	ldr	r7, [sp, #24]
 800a5f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a5fa:	e745      	b.n	800a488 <_dtoa_r+0x760>
 800a5fc:	3fe00000 	.word	0x3fe00000
 800a600:	40240000 	.word	0x40240000
 800a604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a606:	e76a      	b.n	800a4de <_dtoa_r+0x7b6>
 800a608:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	dc19      	bgt.n	800a642 <_dtoa_r+0x91a>
 800a60e:	9b04      	ldr	r3, [sp, #16]
 800a610:	b9bb      	cbnz	r3, 800a642 <_dtoa_r+0x91a>
 800a612:	9b05      	ldr	r3, [sp, #20]
 800a614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a618:	b99b      	cbnz	r3, 800a642 <_dtoa_r+0x91a>
 800a61a:	9b05      	ldr	r3, [sp, #20]
 800a61c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a620:	0d1b      	lsrs	r3, r3, #20
 800a622:	051b      	lsls	r3, r3, #20
 800a624:	b183      	cbz	r3, 800a648 <_dtoa_r+0x920>
 800a626:	f04f 0801 	mov.w	r8, #1
 800a62a:	9b06      	ldr	r3, [sp, #24]
 800a62c:	3301      	adds	r3, #1
 800a62e:	9306      	str	r3, [sp, #24]
 800a630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a632:	3301      	adds	r3, #1
 800a634:	9309      	str	r3, [sp, #36]	; 0x24
 800a636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f47f af6a 	bne.w	800a512 <_dtoa_r+0x7ea>
 800a63e:	2001      	movs	r0, #1
 800a640:	e76f      	b.n	800a522 <_dtoa_r+0x7fa>
 800a642:	f04f 0800 	mov.w	r8, #0
 800a646:	e7f6      	b.n	800a636 <_dtoa_r+0x90e>
 800a648:	4698      	mov	r8, r3
 800a64a:	e7f4      	b.n	800a636 <_dtoa_r+0x90e>
 800a64c:	f43f af7d 	beq.w	800a54a <_dtoa_r+0x822>
 800a650:	4618      	mov	r0, r3
 800a652:	301c      	adds	r0, #28
 800a654:	e772      	b.n	800a53c <_dtoa_r+0x814>
 800a656:	9b02      	ldr	r3, [sp, #8]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	dc36      	bgt.n	800a6ca <_dtoa_r+0x9a2>
 800a65c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a65e:	2b02      	cmp	r3, #2
 800a660:	dd33      	ble.n	800a6ca <_dtoa_r+0x9a2>
 800a662:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a666:	f1bb 0f00 	cmp.w	fp, #0
 800a66a:	d10d      	bne.n	800a688 <_dtoa_r+0x960>
 800a66c:	4621      	mov	r1, r4
 800a66e:	465b      	mov	r3, fp
 800a670:	2205      	movs	r2, #5
 800a672:	4628      	mov	r0, r5
 800a674:	f000 fd48 	bl	800b108 <__multadd>
 800a678:	4601      	mov	r1, r0
 800a67a:	4604      	mov	r4, r0
 800a67c:	4650      	mov	r0, sl
 800a67e:	f000 ffa5 	bl	800b5cc <__mcmp>
 800a682:	2800      	cmp	r0, #0
 800a684:	f73f adb6 	bgt.w	800a1f4 <_dtoa_r+0x4cc>
 800a688:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a68a:	9f08      	ldr	r7, [sp, #32]
 800a68c:	ea6f 0903 	mvn.w	r9, r3
 800a690:	f04f 0800 	mov.w	r8, #0
 800a694:	4621      	mov	r1, r4
 800a696:	4628      	mov	r0, r5
 800a698:	f000 fd14 	bl	800b0c4 <_Bfree>
 800a69c:	2e00      	cmp	r6, #0
 800a69e:	f43f aea4 	beq.w	800a3ea <_dtoa_r+0x6c2>
 800a6a2:	f1b8 0f00 	cmp.w	r8, #0
 800a6a6:	d005      	beq.n	800a6b4 <_dtoa_r+0x98c>
 800a6a8:	45b0      	cmp	r8, r6
 800a6aa:	d003      	beq.n	800a6b4 <_dtoa_r+0x98c>
 800a6ac:	4641      	mov	r1, r8
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f000 fd08 	bl	800b0c4 <_Bfree>
 800a6b4:	4631      	mov	r1, r6
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	f000 fd04 	bl	800b0c4 <_Bfree>
 800a6bc:	e695      	b.n	800a3ea <_dtoa_r+0x6c2>
 800a6be:	2400      	movs	r4, #0
 800a6c0:	4626      	mov	r6, r4
 800a6c2:	e7e1      	b.n	800a688 <_dtoa_r+0x960>
 800a6c4:	46c1      	mov	r9, r8
 800a6c6:	4626      	mov	r6, r4
 800a6c8:	e594      	b.n	800a1f4 <_dtoa_r+0x4cc>
 800a6ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6cc:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f000 80fc 	beq.w	800a8ce <_dtoa_r+0xba6>
 800a6d6:	2f00      	cmp	r7, #0
 800a6d8:	dd05      	ble.n	800a6e6 <_dtoa_r+0x9be>
 800a6da:	4631      	mov	r1, r6
 800a6dc:	463a      	mov	r2, r7
 800a6de:	4628      	mov	r0, r5
 800a6e0:	f000 ff08 	bl	800b4f4 <__lshift>
 800a6e4:	4606      	mov	r6, r0
 800a6e6:	f1b8 0f00 	cmp.w	r8, #0
 800a6ea:	d05c      	beq.n	800a7a6 <_dtoa_r+0xa7e>
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	6871      	ldr	r1, [r6, #4]
 800a6f0:	f000 fca8 	bl	800b044 <_Balloc>
 800a6f4:	4607      	mov	r7, r0
 800a6f6:	b928      	cbnz	r0, 800a704 <_dtoa_r+0x9dc>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a6fe:	4b7e      	ldr	r3, [pc, #504]	; (800a8f8 <_dtoa_r+0xbd0>)
 800a700:	f7ff bb26 	b.w	8009d50 <_dtoa_r+0x28>
 800a704:	6932      	ldr	r2, [r6, #16]
 800a706:	f106 010c 	add.w	r1, r6, #12
 800a70a:	3202      	adds	r2, #2
 800a70c:	0092      	lsls	r2, r2, #2
 800a70e:	300c      	adds	r0, #12
 800a710:	f000 fc8a 	bl	800b028 <memcpy>
 800a714:	2201      	movs	r2, #1
 800a716:	4639      	mov	r1, r7
 800a718:	4628      	mov	r0, r5
 800a71a:	f000 feeb 	bl	800b4f4 <__lshift>
 800a71e:	46b0      	mov	r8, r6
 800a720:	4606      	mov	r6, r0
 800a722:	9b08      	ldr	r3, [sp, #32]
 800a724:	3301      	adds	r3, #1
 800a726:	9302      	str	r3, [sp, #8]
 800a728:	9b08      	ldr	r3, [sp, #32]
 800a72a:	445b      	add	r3, fp
 800a72c:	930a      	str	r3, [sp, #40]	; 0x28
 800a72e:	9b04      	ldr	r3, [sp, #16]
 800a730:	f003 0301 	and.w	r3, r3, #1
 800a734:	9309      	str	r3, [sp, #36]	; 0x24
 800a736:	9b02      	ldr	r3, [sp, #8]
 800a738:	4621      	mov	r1, r4
 800a73a:	4650      	mov	r0, sl
 800a73c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800a740:	f7ff fa64 	bl	8009c0c <quorem>
 800a744:	4603      	mov	r3, r0
 800a746:	4641      	mov	r1, r8
 800a748:	3330      	adds	r3, #48	; 0x30
 800a74a:	9004      	str	r0, [sp, #16]
 800a74c:	4650      	mov	r0, sl
 800a74e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a750:	f000 ff3c 	bl	800b5cc <__mcmp>
 800a754:	4632      	mov	r2, r6
 800a756:	9006      	str	r0, [sp, #24]
 800a758:	4621      	mov	r1, r4
 800a75a:	4628      	mov	r0, r5
 800a75c:	f000 ff52 	bl	800b604 <__mdiff>
 800a760:	68c2      	ldr	r2, [r0, #12]
 800a762:	4607      	mov	r7, r0
 800a764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a766:	bb02      	cbnz	r2, 800a7aa <_dtoa_r+0xa82>
 800a768:	4601      	mov	r1, r0
 800a76a:	4650      	mov	r0, sl
 800a76c:	f000 ff2e 	bl	800b5cc <__mcmp>
 800a770:	4602      	mov	r2, r0
 800a772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a774:	4639      	mov	r1, r7
 800a776:	4628      	mov	r0, r5
 800a778:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a77c:	f000 fca2 	bl	800b0c4 <_Bfree>
 800a780:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a782:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a784:	9f02      	ldr	r7, [sp, #8]
 800a786:	ea43 0102 	orr.w	r1, r3, r2
 800a78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a78c:	430b      	orrs	r3, r1
 800a78e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a790:	d10d      	bne.n	800a7ae <_dtoa_r+0xa86>
 800a792:	2b39      	cmp	r3, #57	; 0x39
 800a794:	d027      	beq.n	800a7e6 <_dtoa_r+0xabe>
 800a796:	9a06      	ldr	r2, [sp, #24]
 800a798:	2a00      	cmp	r2, #0
 800a79a:	dd01      	ble.n	800a7a0 <_dtoa_r+0xa78>
 800a79c:	9b04      	ldr	r3, [sp, #16]
 800a79e:	3331      	adds	r3, #49	; 0x31
 800a7a0:	f88b 3000 	strb.w	r3, [fp]
 800a7a4:	e776      	b.n	800a694 <_dtoa_r+0x96c>
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	e7b9      	b.n	800a71e <_dtoa_r+0x9f6>
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	e7e2      	b.n	800a774 <_dtoa_r+0xa4c>
 800a7ae:	9906      	ldr	r1, [sp, #24]
 800a7b0:	2900      	cmp	r1, #0
 800a7b2:	db04      	blt.n	800a7be <_dtoa_r+0xa96>
 800a7b4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800a7b6:	4301      	orrs	r1, r0
 800a7b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7ba:	4301      	orrs	r1, r0
 800a7bc:	d120      	bne.n	800a800 <_dtoa_r+0xad8>
 800a7be:	2a00      	cmp	r2, #0
 800a7c0:	ddee      	ble.n	800a7a0 <_dtoa_r+0xa78>
 800a7c2:	4651      	mov	r1, sl
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	9302      	str	r3, [sp, #8]
 800a7ca:	f000 fe93 	bl	800b4f4 <__lshift>
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	4682      	mov	sl, r0
 800a7d2:	f000 fefb 	bl	800b5cc <__mcmp>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	9b02      	ldr	r3, [sp, #8]
 800a7da:	dc02      	bgt.n	800a7e2 <_dtoa_r+0xaba>
 800a7dc:	d1e0      	bne.n	800a7a0 <_dtoa_r+0xa78>
 800a7de:	07da      	lsls	r2, r3, #31
 800a7e0:	d5de      	bpl.n	800a7a0 <_dtoa_r+0xa78>
 800a7e2:	2b39      	cmp	r3, #57	; 0x39
 800a7e4:	d1da      	bne.n	800a79c <_dtoa_r+0xa74>
 800a7e6:	2339      	movs	r3, #57	; 0x39
 800a7e8:	f88b 3000 	strb.w	r3, [fp]
 800a7ec:	463b      	mov	r3, r7
 800a7ee:	461f      	mov	r7, r3
 800a7f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	2a39      	cmp	r2, #57	; 0x39
 800a7f8:	d050      	beq.n	800a89c <_dtoa_r+0xb74>
 800a7fa:	3201      	adds	r2, #1
 800a7fc:	701a      	strb	r2, [r3, #0]
 800a7fe:	e749      	b.n	800a694 <_dtoa_r+0x96c>
 800a800:	2a00      	cmp	r2, #0
 800a802:	dd03      	ble.n	800a80c <_dtoa_r+0xae4>
 800a804:	2b39      	cmp	r3, #57	; 0x39
 800a806:	d0ee      	beq.n	800a7e6 <_dtoa_r+0xabe>
 800a808:	3301      	adds	r3, #1
 800a80a:	e7c9      	b.n	800a7a0 <_dtoa_r+0xa78>
 800a80c:	9a02      	ldr	r2, [sp, #8]
 800a80e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a810:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a814:	428a      	cmp	r2, r1
 800a816:	d02a      	beq.n	800a86e <_dtoa_r+0xb46>
 800a818:	4651      	mov	r1, sl
 800a81a:	2300      	movs	r3, #0
 800a81c:	220a      	movs	r2, #10
 800a81e:	4628      	mov	r0, r5
 800a820:	f000 fc72 	bl	800b108 <__multadd>
 800a824:	45b0      	cmp	r8, r6
 800a826:	4682      	mov	sl, r0
 800a828:	f04f 0300 	mov.w	r3, #0
 800a82c:	f04f 020a 	mov.w	r2, #10
 800a830:	4641      	mov	r1, r8
 800a832:	4628      	mov	r0, r5
 800a834:	d107      	bne.n	800a846 <_dtoa_r+0xb1e>
 800a836:	f000 fc67 	bl	800b108 <__multadd>
 800a83a:	4680      	mov	r8, r0
 800a83c:	4606      	mov	r6, r0
 800a83e:	9b02      	ldr	r3, [sp, #8]
 800a840:	3301      	adds	r3, #1
 800a842:	9302      	str	r3, [sp, #8]
 800a844:	e777      	b.n	800a736 <_dtoa_r+0xa0e>
 800a846:	f000 fc5f 	bl	800b108 <__multadd>
 800a84a:	4631      	mov	r1, r6
 800a84c:	4680      	mov	r8, r0
 800a84e:	2300      	movs	r3, #0
 800a850:	220a      	movs	r2, #10
 800a852:	4628      	mov	r0, r5
 800a854:	f000 fc58 	bl	800b108 <__multadd>
 800a858:	4606      	mov	r6, r0
 800a85a:	e7f0      	b.n	800a83e <_dtoa_r+0xb16>
 800a85c:	f1bb 0f00 	cmp.w	fp, #0
 800a860:	bfcc      	ite	gt
 800a862:	465f      	movgt	r7, fp
 800a864:	2701      	movle	r7, #1
 800a866:	f04f 0800 	mov.w	r8, #0
 800a86a:	9a08      	ldr	r2, [sp, #32]
 800a86c:	4417      	add	r7, r2
 800a86e:	4651      	mov	r1, sl
 800a870:	2201      	movs	r2, #1
 800a872:	4628      	mov	r0, r5
 800a874:	9302      	str	r3, [sp, #8]
 800a876:	f000 fe3d 	bl	800b4f4 <__lshift>
 800a87a:	4621      	mov	r1, r4
 800a87c:	4682      	mov	sl, r0
 800a87e:	f000 fea5 	bl	800b5cc <__mcmp>
 800a882:	2800      	cmp	r0, #0
 800a884:	dcb2      	bgt.n	800a7ec <_dtoa_r+0xac4>
 800a886:	d102      	bne.n	800a88e <_dtoa_r+0xb66>
 800a888:	9b02      	ldr	r3, [sp, #8]
 800a88a:	07db      	lsls	r3, r3, #31
 800a88c:	d4ae      	bmi.n	800a7ec <_dtoa_r+0xac4>
 800a88e:	463b      	mov	r3, r7
 800a890:	461f      	mov	r7, r3
 800a892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a896:	2a30      	cmp	r2, #48	; 0x30
 800a898:	d0fa      	beq.n	800a890 <_dtoa_r+0xb68>
 800a89a:	e6fb      	b.n	800a694 <_dtoa_r+0x96c>
 800a89c:	9a08      	ldr	r2, [sp, #32]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d1a5      	bne.n	800a7ee <_dtoa_r+0xac6>
 800a8a2:	2331      	movs	r3, #49	; 0x31
 800a8a4:	f109 0901 	add.w	r9, r9, #1
 800a8a8:	7013      	strb	r3, [r2, #0]
 800a8aa:	e6f3      	b.n	800a694 <_dtoa_r+0x96c>
 800a8ac:	4b13      	ldr	r3, [pc, #76]	; (800a8fc <_dtoa_r+0xbd4>)
 800a8ae:	f7ff baa7 	b.w	8009e00 <_dtoa_r+0xd8>
 800a8b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f47f aa80 	bne.w	8009dba <_dtoa_r+0x92>
 800a8ba:	4b11      	ldr	r3, [pc, #68]	; (800a900 <_dtoa_r+0xbd8>)
 800a8bc:	f7ff baa0 	b.w	8009e00 <_dtoa_r+0xd8>
 800a8c0:	f1bb 0f00 	cmp.w	fp, #0
 800a8c4:	dc03      	bgt.n	800a8ce <_dtoa_r+0xba6>
 800a8c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	f73f aecc 	bgt.w	800a666 <_dtoa_r+0x93e>
 800a8ce:	9f08      	ldr	r7, [sp, #32]
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	4650      	mov	r0, sl
 800a8d4:	f7ff f99a 	bl	8009c0c <quorem>
 800a8d8:	9a08      	ldr	r2, [sp, #32]
 800a8da:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a8de:	f807 3b01 	strb.w	r3, [r7], #1
 800a8e2:	1aba      	subs	r2, r7, r2
 800a8e4:	4593      	cmp	fp, r2
 800a8e6:	ddb9      	ble.n	800a85c <_dtoa_r+0xb34>
 800a8e8:	4651      	mov	r1, sl
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	220a      	movs	r2, #10
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	f000 fc0a 	bl	800b108 <__multadd>
 800a8f4:	4682      	mov	sl, r0
 800a8f6:	e7eb      	b.n	800a8d0 <_dtoa_r+0xba8>
 800a8f8:	0800e684 	.word	0x0800e684
 800a8fc:	0800e484 	.word	0x0800e484
 800a900:	0800e601 	.word	0x0800e601

0800a904 <rshift>:
 800a904:	6903      	ldr	r3, [r0, #16]
 800a906:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a90a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a90e:	f100 0414 	add.w	r4, r0, #20
 800a912:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a916:	dd46      	ble.n	800a9a6 <rshift+0xa2>
 800a918:	f011 011f 	ands.w	r1, r1, #31
 800a91c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a920:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a924:	d10c      	bne.n	800a940 <rshift+0x3c>
 800a926:	4629      	mov	r1, r5
 800a928:	f100 0710 	add.w	r7, r0, #16
 800a92c:	42b1      	cmp	r1, r6
 800a92e:	d335      	bcc.n	800a99c <rshift+0x98>
 800a930:	1a9b      	subs	r3, r3, r2
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	1eea      	subs	r2, r5, #3
 800a936:	4296      	cmp	r6, r2
 800a938:	bf38      	it	cc
 800a93a:	2300      	movcc	r3, #0
 800a93c:	4423      	add	r3, r4
 800a93e:	e015      	b.n	800a96c <rshift+0x68>
 800a940:	46a1      	mov	r9, r4
 800a942:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a946:	f1c1 0820 	rsb	r8, r1, #32
 800a94a:	40cf      	lsrs	r7, r1
 800a94c:	f105 0e04 	add.w	lr, r5, #4
 800a950:	4576      	cmp	r6, lr
 800a952:	46f4      	mov	ip, lr
 800a954:	d816      	bhi.n	800a984 <rshift+0x80>
 800a956:	1a9b      	subs	r3, r3, r2
 800a958:	009a      	lsls	r2, r3, #2
 800a95a:	3a04      	subs	r2, #4
 800a95c:	3501      	adds	r5, #1
 800a95e:	42ae      	cmp	r6, r5
 800a960:	bf38      	it	cc
 800a962:	2200      	movcc	r2, #0
 800a964:	18a3      	adds	r3, r4, r2
 800a966:	50a7      	str	r7, [r4, r2]
 800a968:	b107      	cbz	r7, 800a96c <rshift+0x68>
 800a96a:	3304      	adds	r3, #4
 800a96c:	42a3      	cmp	r3, r4
 800a96e:	eba3 0204 	sub.w	r2, r3, r4
 800a972:	bf08      	it	eq
 800a974:	2300      	moveq	r3, #0
 800a976:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a97a:	6102      	str	r2, [r0, #16]
 800a97c:	bf08      	it	eq
 800a97e:	6143      	streq	r3, [r0, #20]
 800a980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a984:	f8dc c000 	ldr.w	ip, [ip]
 800a988:	fa0c fc08 	lsl.w	ip, ip, r8
 800a98c:	ea4c 0707 	orr.w	r7, ip, r7
 800a990:	f849 7b04 	str.w	r7, [r9], #4
 800a994:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a998:	40cf      	lsrs	r7, r1
 800a99a:	e7d9      	b.n	800a950 <rshift+0x4c>
 800a99c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a9a0:	f847 cf04 	str.w	ip, [r7, #4]!
 800a9a4:	e7c2      	b.n	800a92c <rshift+0x28>
 800a9a6:	4623      	mov	r3, r4
 800a9a8:	e7e0      	b.n	800a96c <rshift+0x68>

0800a9aa <__hexdig_fun>:
 800a9aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a9ae:	2b09      	cmp	r3, #9
 800a9b0:	d802      	bhi.n	800a9b8 <__hexdig_fun+0xe>
 800a9b2:	3820      	subs	r0, #32
 800a9b4:	b2c0      	uxtb	r0, r0
 800a9b6:	4770      	bx	lr
 800a9b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a9bc:	2b05      	cmp	r3, #5
 800a9be:	d801      	bhi.n	800a9c4 <__hexdig_fun+0x1a>
 800a9c0:	3847      	subs	r0, #71	; 0x47
 800a9c2:	e7f7      	b.n	800a9b4 <__hexdig_fun+0xa>
 800a9c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a9c8:	2b05      	cmp	r3, #5
 800a9ca:	d801      	bhi.n	800a9d0 <__hexdig_fun+0x26>
 800a9cc:	3827      	subs	r0, #39	; 0x27
 800a9ce:	e7f1      	b.n	800a9b4 <__hexdig_fun+0xa>
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	4770      	bx	lr

0800a9d4 <__gethex>:
 800a9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d8:	b08b      	sub	sp, #44	; 0x2c
 800a9da:	9306      	str	r3, [sp, #24]
 800a9dc:	4bb9      	ldr	r3, [pc, #740]	; (800acc4 <__gethex+0x2f0>)
 800a9de:	9002      	str	r0, [sp, #8]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	468b      	mov	fp, r1
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	4690      	mov	r8, r2
 800a9e8:	9303      	str	r3, [sp, #12]
 800a9ea:	f7f5 fbb1 	bl	8000150 <strlen>
 800a9ee:	4682      	mov	sl, r0
 800a9f0:	9b03      	ldr	r3, [sp, #12]
 800a9f2:	f8db 2000 	ldr.w	r2, [fp]
 800a9f6:	4403      	add	r3, r0
 800a9f8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a9fc:	9307      	str	r3, [sp, #28]
 800a9fe:	1c93      	adds	r3, r2, #2
 800aa00:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aa04:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aa08:	32fe      	adds	r2, #254	; 0xfe
 800aa0a:	18d1      	adds	r1, r2, r3
 800aa0c:	461f      	mov	r7, r3
 800aa0e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aa12:	9101      	str	r1, [sp, #4]
 800aa14:	2830      	cmp	r0, #48	; 0x30
 800aa16:	d0f8      	beq.n	800aa0a <__gethex+0x36>
 800aa18:	f7ff ffc7 	bl	800a9aa <__hexdig_fun>
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	d13a      	bne.n	800aa98 <__gethex+0xc4>
 800aa22:	4652      	mov	r2, sl
 800aa24:	4638      	mov	r0, r7
 800aa26:	9903      	ldr	r1, [sp, #12]
 800aa28:	f001 f9ea 	bl	800be00 <strncmp>
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d166      	bne.n	800ab00 <__gethex+0x12c>
 800aa32:	f817 000a 	ldrb.w	r0, [r7, sl]
 800aa36:	eb07 060a 	add.w	r6, r7, sl
 800aa3a:	f7ff ffb6 	bl	800a9aa <__hexdig_fun>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d060      	beq.n	800ab04 <__gethex+0x130>
 800aa42:	4633      	mov	r3, r6
 800aa44:	7818      	ldrb	r0, [r3, #0]
 800aa46:	461f      	mov	r7, r3
 800aa48:	2830      	cmp	r0, #48	; 0x30
 800aa4a:	f103 0301 	add.w	r3, r3, #1
 800aa4e:	d0f9      	beq.n	800aa44 <__gethex+0x70>
 800aa50:	f7ff ffab 	bl	800a9aa <__hexdig_fun>
 800aa54:	2301      	movs	r3, #1
 800aa56:	fab0 f480 	clz	r4, r0
 800aa5a:	4635      	mov	r5, r6
 800aa5c:	0964      	lsrs	r4, r4, #5
 800aa5e:	9301      	str	r3, [sp, #4]
 800aa60:	463a      	mov	r2, r7
 800aa62:	4616      	mov	r6, r2
 800aa64:	7830      	ldrb	r0, [r6, #0]
 800aa66:	3201      	adds	r2, #1
 800aa68:	f7ff ff9f 	bl	800a9aa <__hexdig_fun>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d1f8      	bne.n	800aa62 <__gethex+0x8e>
 800aa70:	4652      	mov	r2, sl
 800aa72:	4630      	mov	r0, r6
 800aa74:	9903      	ldr	r1, [sp, #12]
 800aa76:	f001 f9c3 	bl	800be00 <strncmp>
 800aa7a:	b980      	cbnz	r0, 800aa9e <__gethex+0xca>
 800aa7c:	b94d      	cbnz	r5, 800aa92 <__gethex+0xbe>
 800aa7e:	eb06 050a 	add.w	r5, r6, sl
 800aa82:	462a      	mov	r2, r5
 800aa84:	4616      	mov	r6, r2
 800aa86:	7830      	ldrb	r0, [r6, #0]
 800aa88:	3201      	adds	r2, #1
 800aa8a:	f7ff ff8e 	bl	800a9aa <__hexdig_fun>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	d1f8      	bne.n	800aa84 <__gethex+0xb0>
 800aa92:	1bad      	subs	r5, r5, r6
 800aa94:	00ad      	lsls	r5, r5, #2
 800aa96:	e004      	b.n	800aaa2 <__gethex+0xce>
 800aa98:	2400      	movs	r4, #0
 800aa9a:	4625      	mov	r5, r4
 800aa9c:	e7e0      	b.n	800aa60 <__gethex+0x8c>
 800aa9e:	2d00      	cmp	r5, #0
 800aaa0:	d1f7      	bne.n	800aa92 <__gethex+0xbe>
 800aaa2:	7833      	ldrb	r3, [r6, #0]
 800aaa4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aaa8:	2b50      	cmp	r3, #80	; 0x50
 800aaaa:	d139      	bne.n	800ab20 <__gethex+0x14c>
 800aaac:	7873      	ldrb	r3, [r6, #1]
 800aaae:	2b2b      	cmp	r3, #43	; 0x2b
 800aab0:	d02a      	beq.n	800ab08 <__gethex+0x134>
 800aab2:	2b2d      	cmp	r3, #45	; 0x2d
 800aab4:	d02c      	beq.n	800ab10 <__gethex+0x13c>
 800aab6:	f04f 0900 	mov.w	r9, #0
 800aaba:	1c71      	adds	r1, r6, #1
 800aabc:	7808      	ldrb	r0, [r1, #0]
 800aabe:	f7ff ff74 	bl	800a9aa <__hexdig_fun>
 800aac2:	1e43      	subs	r3, r0, #1
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b18      	cmp	r3, #24
 800aac8:	d82a      	bhi.n	800ab20 <__gethex+0x14c>
 800aaca:	f1a0 0210 	sub.w	r2, r0, #16
 800aace:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aad2:	f7ff ff6a 	bl	800a9aa <__hexdig_fun>
 800aad6:	1e43      	subs	r3, r0, #1
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	2b18      	cmp	r3, #24
 800aadc:	d91b      	bls.n	800ab16 <__gethex+0x142>
 800aade:	f1b9 0f00 	cmp.w	r9, #0
 800aae2:	d000      	beq.n	800aae6 <__gethex+0x112>
 800aae4:	4252      	negs	r2, r2
 800aae6:	4415      	add	r5, r2
 800aae8:	f8cb 1000 	str.w	r1, [fp]
 800aaec:	b1d4      	cbz	r4, 800ab24 <__gethex+0x150>
 800aaee:	9b01      	ldr	r3, [sp, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	bf14      	ite	ne
 800aaf4:	2700      	movne	r7, #0
 800aaf6:	2706      	moveq	r7, #6
 800aaf8:	4638      	mov	r0, r7
 800aafa:	b00b      	add	sp, #44	; 0x2c
 800aafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab00:	463e      	mov	r6, r7
 800ab02:	4625      	mov	r5, r4
 800ab04:	2401      	movs	r4, #1
 800ab06:	e7cc      	b.n	800aaa2 <__gethex+0xce>
 800ab08:	f04f 0900 	mov.w	r9, #0
 800ab0c:	1cb1      	adds	r1, r6, #2
 800ab0e:	e7d5      	b.n	800aabc <__gethex+0xe8>
 800ab10:	f04f 0901 	mov.w	r9, #1
 800ab14:	e7fa      	b.n	800ab0c <__gethex+0x138>
 800ab16:	230a      	movs	r3, #10
 800ab18:	fb03 0202 	mla	r2, r3, r2, r0
 800ab1c:	3a10      	subs	r2, #16
 800ab1e:	e7d6      	b.n	800aace <__gethex+0xfa>
 800ab20:	4631      	mov	r1, r6
 800ab22:	e7e1      	b.n	800aae8 <__gethex+0x114>
 800ab24:	4621      	mov	r1, r4
 800ab26:	1bf3      	subs	r3, r6, r7
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	2b07      	cmp	r3, #7
 800ab2c:	dc0a      	bgt.n	800ab44 <__gethex+0x170>
 800ab2e:	9802      	ldr	r0, [sp, #8]
 800ab30:	f000 fa88 	bl	800b044 <_Balloc>
 800ab34:	4604      	mov	r4, r0
 800ab36:	b940      	cbnz	r0, 800ab4a <__gethex+0x176>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	21de      	movs	r1, #222	; 0xde
 800ab3c:	4b62      	ldr	r3, [pc, #392]	; (800acc8 <__gethex+0x2f4>)
 800ab3e:	4863      	ldr	r0, [pc, #396]	; (800accc <__gethex+0x2f8>)
 800ab40:	f001 f97e 	bl	800be40 <__assert_func>
 800ab44:	3101      	adds	r1, #1
 800ab46:	105b      	asrs	r3, r3, #1
 800ab48:	e7ef      	b.n	800ab2a <__gethex+0x156>
 800ab4a:	f04f 0b00 	mov.w	fp, #0
 800ab4e:	f100 0914 	add.w	r9, r0, #20
 800ab52:	f1ca 0301 	rsb	r3, sl, #1
 800ab56:	f8cd 9010 	str.w	r9, [sp, #16]
 800ab5a:	f8cd b004 	str.w	fp, [sp, #4]
 800ab5e:	9308      	str	r3, [sp, #32]
 800ab60:	42b7      	cmp	r7, r6
 800ab62:	d33f      	bcc.n	800abe4 <__gethex+0x210>
 800ab64:	9f04      	ldr	r7, [sp, #16]
 800ab66:	9b01      	ldr	r3, [sp, #4]
 800ab68:	f847 3b04 	str.w	r3, [r7], #4
 800ab6c:	eba7 0709 	sub.w	r7, r7, r9
 800ab70:	10bf      	asrs	r7, r7, #2
 800ab72:	6127      	str	r7, [r4, #16]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f000 fb5b 	bl	800b230 <__hi0bits>
 800ab7a:	017f      	lsls	r7, r7, #5
 800ab7c:	f8d8 6000 	ldr.w	r6, [r8]
 800ab80:	1a3f      	subs	r7, r7, r0
 800ab82:	42b7      	cmp	r7, r6
 800ab84:	dd62      	ble.n	800ac4c <__gethex+0x278>
 800ab86:	1bbf      	subs	r7, r7, r6
 800ab88:	4639      	mov	r1, r7
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f000 fef1 	bl	800b972 <__any_on>
 800ab90:	4682      	mov	sl, r0
 800ab92:	b1a8      	cbz	r0, 800abc0 <__gethex+0x1ec>
 800ab94:	f04f 0a01 	mov.w	sl, #1
 800ab98:	1e7b      	subs	r3, r7, #1
 800ab9a:	1159      	asrs	r1, r3, #5
 800ab9c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aba0:	f003 021f 	and.w	r2, r3, #31
 800aba4:	fa0a f202 	lsl.w	r2, sl, r2
 800aba8:	420a      	tst	r2, r1
 800abaa:	d009      	beq.n	800abc0 <__gethex+0x1ec>
 800abac:	4553      	cmp	r3, sl
 800abae:	dd05      	ble.n	800abbc <__gethex+0x1e8>
 800abb0:	4620      	mov	r0, r4
 800abb2:	1eb9      	subs	r1, r7, #2
 800abb4:	f000 fedd 	bl	800b972 <__any_on>
 800abb8:	2800      	cmp	r0, #0
 800abba:	d144      	bne.n	800ac46 <__gethex+0x272>
 800abbc:	f04f 0a02 	mov.w	sl, #2
 800abc0:	4639      	mov	r1, r7
 800abc2:	4620      	mov	r0, r4
 800abc4:	f7ff fe9e 	bl	800a904 <rshift>
 800abc8:	443d      	add	r5, r7
 800abca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abce:	42ab      	cmp	r3, r5
 800abd0:	da4a      	bge.n	800ac68 <__gethex+0x294>
 800abd2:	4621      	mov	r1, r4
 800abd4:	9802      	ldr	r0, [sp, #8]
 800abd6:	f000 fa75 	bl	800b0c4 <_Bfree>
 800abda:	2300      	movs	r3, #0
 800abdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800abde:	27a3      	movs	r7, #163	; 0xa3
 800abe0:	6013      	str	r3, [r2, #0]
 800abe2:	e789      	b.n	800aaf8 <__gethex+0x124>
 800abe4:	1e73      	subs	r3, r6, #1
 800abe6:	9a07      	ldr	r2, [sp, #28]
 800abe8:	9305      	str	r3, [sp, #20]
 800abea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800abee:	4293      	cmp	r3, r2
 800abf0:	d019      	beq.n	800ac26 <__gethex+0x252>
 800abf2:	f1bb 0f20 	cmp.w	fp, #32
 800abf6:	d107      	bne.n	800ac08 <__gethex+0x234>
 800abf8:	9b04      	ldr	r3, [sp, #16]
 800abfa:	9a01      	ldr	r2, [sp, #4]
 800abfc:	f843 2b04 	str.w	r2, [r3], #4
 800ac00:	9304      	str	r3, [sp, #16]
 800ac02:	2300      	movs	r3, #0
 800ac04:	469b      	mov	fp, r3
 800ac06:	9301      	str	r3, [sp, #4]
 800ac08:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ac0c:	f7ff fecd 	bl	800a9aa <__hexdig_fun>
 800ac10:	9b01      	ldr	r3, [sp, #4]
 800ac12:	f000 000f 	and.w	r0, r0, #15
 800ac16:	fa00 f00b 	lsl.w	r0, r0, fp
 800ac1a:	4303      	orrs	r3, r0
 800ac1c:	9301      	str	r3, [sp, #4]
 800ac1e:	f10b 0b04 	add.w	fp, fp, #4
 800ac22:	9b05      	ldr	r3, [sp, #20]
 800ac24:	e00d      	b.n	800ac42 <__gethex+0x26e>
 800ac26:	9b05      	ldr	r3, [sp, #20]
 800ac28:	9a08      	ldr	r2, [sp, #32]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	42bb      	cmp	r3, r7
 800ac2e:	d3e0      	bcc.n	800abf2 <__gethex+0x21e>
 800ac30:	4618      	mov	r0, r3
 800ac32:	4652      	mov	r2, sl
 800ac34:	9903      	ldr	r1, [sp, #12]
 800ac36:	9309      	str	r3, [sp, #36]	; 0x24
 800ac38:	f001 f8e2 	bl	800be00 <strncmp>
 800ac3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	d1d7      	bne.n	800abf2 <__gethex+0x21e>
 800ac42:	461e      	mov	r6, r3
 800ac44:	e78c      	b.n	800ab60 <__gethex+0x18c>
 800ac46:	f04f 0a03 	mov.w	sl, #3
 800ac4a:	e7b9      	b.n	800abc0 <__gethex+0x1ec>
 800ac4c:	da09      	bge.n	800ac62 <__gethex+0x28e>
 800ac4e:	1bf7      	subs	r7, r6, r7
 800ac50:	4621      	mov	r1, r4
 800ac52:	463a      	mov	r2, r7
 800ac54:	9802      	ldr	r0, [sp, #8]
 800ac56:	f000 fc4d 	bl	800b4f4 <__lshift>
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	1bed      	subs	r5, r5, r7
 800ac5e:	f100 0914 	add.w	r9, r0, #20
 800ac62:	f04f 0a00 	mov.w	sl, #0
 800ac66:	e7b0      	b.n	800abca <__gethex+0x1f6>
 800ac68:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ac6c:	42a8      	cmp	r0, r5
 800ac6e:	dd71      	ble.n	800ad54 <__gethex+0x380>
 800ac70:	1b45      	subs	r5, r0, r5
 800ac72:	42ae      	cmp	r6, r5
 800ac74:	dc34      	bgt.n	800ace0 <__gethex+0x30c>
 800ac76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d028      	beq.n	800acd0 <__gethex+0x2fc>
 800ac7e:	2b03      	cmp	r3, #3
 800ac80:	d02a      	beq.n	800acd8 <__gethex+0x304>
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d115      	bne.n	800acb2 <__gethex+0x2de>
 800ac86:	42ae      	cmp	r6, r5
 800ac88:	d113      	bne.n	800acb2 <__gethex+0x2de>
 800ac8a:	2e01      	cmp	r6, #1
 800ac8c:	d10b      	bne.n	800aca6 <__gethex+0x2d2>
 800ac8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac92:	9a06      	ldr	r2, [sp, #24]
 800ac94:	2762      	movs	r7, #98	; 0x62
 800ac96:	6013      	str	r3, [r2, #0]
 800ac98:	2301      	movs	r3, #1
 800ac9a:	6123      	str	r3, [r4, #16]
 800ac9c:	f8c9 3000 	str.w	r3, [r9]
 800aca0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aca2:	601c      	str	r4, [r3, #0]
 800aca4:	e728      	b.n	800aaf8 <__gethex+0x124>
 800aca6:	4620      	mov	r0, r4
 800aca8:	1e71      	subs	r1, r6, #1
 800acaa:	f000 fe62 	bl	800b972 <__any_on>
 800acae:	2800      	cmp	r0, #0
 800acb0:	d1ed      	bne.n	800ac8e <__gethex+0x2ba>
 800acb2:	4621      	mov	r1, r4
 800acb4:	9802      	ldr	r0, [sp, #8]
 800acb6:	f000 fa05 	bl	800b0c4 <_Bfree>
 800acba:	2300      	movs	r3, #0
 800acbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800acbe:	2750      	movs	r7, #80	; 0x50
 800acc0:	6013      	str	r3, [r2, #0]
 800acc2:	e719      	b.n	800aaf8 <__gethex+0x124>
 800acc4:	0800e700 	.word	0x0800e700
 800acc8:	0800e684 	.word	0x0800e684
 800accc:	0800e695 	.word	0x0800e695
 800acd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1ed      	bne.n	800acb2 <__gethex+0x2de>
 800acd6:	e7da      	b.n	800ac8e <__gethex+0x2ba>
 800acd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d1d7      	bne.n	800ac8e <__gethex+0x2ba>
 800acde:	e7e8      	b.n	800acb2 <__gethex+0x2de>
 800ace0:	1e6f      	subs	r7, r5, #1
 800ace2:	f1ba 0f00 	cmp.w	sl, #0
 800ace6:	d132      	bne.n	800ad4e <__gethex+0x37a>
 800ace8:	b127      	cbz	r7, 800acf4 <__gethex+0x320>
 800acea:	4639      	mov	r1, r7
 800acec:	4620      	mov	r0, r4
 800acee:	f000 fe40 	bl	800b972 <__any_on>
 800acf2:	4682      	mov	sl, r0
 800acf4:	2101      	movs	r1, #1
 800acf6:	117b      	asrs	r3, r7, #5
 800acf8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800acfc:	f007 071f 	and.w	r7, r7, #31
 800ad00:	fa01 f707 	lsl.w	r7, r1, r7
 800ad04:	421f      	tst	r7, r3
 800ad06:	f04f 0702 	mov.w	r7, #2
 800ad0a:	4629      	mov	r1, r5
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	bf18      	it	ne
 800ad10:	f04a 0a02 	orrne.w	sl, sl, #2
 800ad14:	1b76      	subs	r6, r6, r5
 800ad16:	f7ff fdf5 	bl	800a904 <rshift>
 800ad1a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ad1e:	f1ba 0f00 	cmp.w	sl, #0
 800ad22:	d048      	beq.n	800adb6 <__gethex+0x3e2>
 800ad24:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad28:	2b02      	cmp	r3, #2
 800ad2a:	d015      	beq.n	800ad58 <__gethex+0x384>
 800ad2c:	2b03      	cmp	r3, #3
 800ad2e:	d017      	beq.n	800ad60 <__gethex+0x38c>
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d109      	bne.n	800ad48 <__gethex+0x374>
 800ad34:	f01a 0f02 	tst.w	sl, #2
 800ad38:	d006      	beq.n	800ad48 <__gethex+0x374>
 800ad3a:	f8d9 0000 	ldr.w	r0, [r9]
 800ad3e:	ea4a 0a00 	orr.w	sl, sl, r0
 800ad42:	f01a 0f01 	tst.w	sl, #1
 800ad46:	d10e      	bne.n	800ad66 <__gethex+0x392>
 800ad48:	f047 0710 	orr.w	r7, r7, #16
 800ad4c:	e033      	b.n	800adb6 <__gethex+0x3e2>
 800ad4e:	f04f 0a01 	mov.w	sl, #1
 800ad52:	e7cf      	b.n	800acf4 <__gethex+0x320>
 800ad54:	2701      	movs	r7, #1
 800ad56:	e7e2      	b.n	800ad1e <__gethex+0x34a>
 800ad58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad5a:	f1c3 0301 	rsb	r3, r3, #1
 800ad5e:	9315      	str	r3, [sp, #84]	; 0x54
 800ad60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d0f0      	beq.n	800ad48 <__gethex+0x374>
 800ad66:	f04f 0c00 	mov.w	ip, #0
 800ad6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ad6e:	f104 0314 	add.w	r3, r4, #20
 800ad72:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ad76:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad80:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800ad84:	d01c      	beq.n	800adc0 <__gethex+0x3ec>
 800ad86:	3201      	adds	r2, #1
 800ad88:	6002      	str	r2, [r0, #0]
 800ad8a:	2f02      	cmp	r7, #2
 800ad8c:	f104 0314 	add.w	r3, r4, #20
 800ad90:	d13d      	bne.n	800ae0e <__gethex+0x43a>
 800ad92:	f8d8 2000 	ldr.w	r2, [r8]
 800ad96:	3a01      	subs	r2, #1
 800ad98:	42b2      	cmp	r2, r6
 800ad9a:	d10a      	bne.n	800adb2 <__gethex+0x3de>
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	1171      	asrs	r1, r6, #5
 800ada0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ada4:	f006 061f 	and.w	r6, r6, #31
 800ada8:	fa02 f606 	lsl.w	r6, r2, r6
 800adac:	421e      	tst	r6, r3
 800adae:	bf18      	it	ne
 800adb0:	4617      	movne	r7, r2
 800adb2:	f047 0720 	orr.w	r7, r7, #32
 800adb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800adb8:	601c      	str	r4, [r3, #0]
 800adba:	9b06      	ldr	r3, [sp, #24]
 800adbc:	601d      	str	r5, [r3, #0]
 800adbe:	e69b      	b.n	800aaf8 <__gethex+0x124>
 800adc0:	4299      	cmp	r1, r3
 800adc2:	f843 cc04 	str.w	ip, [r3, #-4]
 800adc6:	d8d8      	bhi.n	800ad7a <__gethex+0x3a6>
 800adc8:	68a3      	ldr	r3, [r4, #8]
 800adca:	459b      	cmp	fp, r3
 800adcc:	db17      	blt.n	800adfe <__gethex+0x42a>
 800adce:	6861      	ldr	r1, [r4, #4]
 800add0:	9802      	ldr	r0, [sp, #8]
 800add2:	3101      	adds	r1, #1
 800add4:	f000 f936 	bl	800b044 <_Balloc>
 800add8:	4681      	mov	r9, r0
 800adda:	b918      	cbnz	r0, 800ade4 <__gethex+0x410>
 800addc:	4602      	mov	r2, r0
 800adde:	2184      	movs	r1, #132	; 0x84
 800ade0:	4b19      	ldr	r3, [pc, #100]	; (800ae48 <__gethex+0x474>)
 800ade2:	e6ac      	b.n	800ab3e <__gethex+0x16a>
 800ade4:	6922      	ldr	r2, [r4, #16]
 800ade6:	f104 010c 	add.w	r1, r4, #12
 800adea:	3202      	adds	r2, #2
 800adec:	0092      	lsls	r2, r2, #2
 800adee:	300c      	adds	r0, #12
 800adf0:	f000 f91a 	bl	800b028 <memcpy>
 800adf4:	4621      	mov	r1, r4
 800adf6:	9802      	ldr	r0, [sp, #8]
 800adf8:	f000 f964 	bl	800b0c4 <_Bfree>
 800adfc:	464c      	mov	r4, r9
 800adfe:	6923      	ldr	r3, [r4, #16]
 800ae00:	1c5a      	adds	r2, r3, #1
 800ae02:	6122      	str	r2, [r4, #16]
 800ae04:	2201      	movs	r2, #1
 800ae06:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae0a:	615a      	str	r2, [r3, #20]
 800ae0c:	e7bd      	b.n	800ad8a <__gethex+0x3b6>
 800ae0e:	6922      	ldr	r2, [r4, #16]
 800ae10:	455a      	cmp	r2, fp
 800ae12:	dd0b      	ble.n	800ae2c <__gethex+0x458>
 800ae14:	2101      	movs	r1, #1
 800ae16:	4620      	mov	r0, r4
 800ae18:	f7ff fd74 	bl	800a904 <rshift>
 800ae1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae20:	3501      	adds	r5, #1
 800ae22:	42ab      	cmp	r3, r5
 800ae24:	f6ff aed5 	blt.w	800abd2 <__gethex+0x1fe>
 800ae28:	2701      	movs	r7, #1
 800ae2a:	e7c2      	b.n	800adb2 <__gethex+0x3de>
 800ae2c:	f016 061f 	ands.w	r6, r6, #31
 800ae30:	d0fa      	beq.n	800ae28 <__gethex+0x454>
 800ae32:	449a      	add	sl, r3
 800ae34:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ae38:	f000 f9fa 	bl	800b230 <__hi0bits>
 800ae3c:	f1c6 0620 	rsb	r6, r6, #32
 800ae40:	42b0      	cmp	r0, r6
 800ae42:	dbe7      	blt.n	800ae14 <__gethex+0x440>
 800ae44:	e7f0      	b.n	800ae28 <__gethex+0x454>
 800ae46:	bf00      	nop
 800ae48:	0800e684 	.word	0x0800e684

0800ae4c <L_shift>:
 800ae4c:	f1c2 0208 	rsb	r2, r2, #8
 800ae50:	0092      	lsls	r2, r2, #2
 800ae52:	b570      	push	{r4, r5, r6, lr}
 800ae54:	f1c2 0620 	rsb	r6, r2, #32
 800ae58:	6843      	ldr	r3, [r0, #4]
 800ae5a:	6804      	ldr	r4, [r0, #0]
 800ae5c:	fa03 f506 	lsl.w	r5, r3, r6
 800ae60:	432c      	orrs	r4, r5
 800ae62:	40d3      	lsrs	r3, r2
 800ae64:	6004      	str	r4, [r0, #0]
 800ae66:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae6a:	4288      	cmp	r0, r1
 800ae6c:	d3f4      	bcc.n	800ae58 <L_shift+0xc>
 800ae6e:	bd70      	pop	{r4, r5, r6, pc}

0800ae70 <__match>:
 800ae70:	b530      	push	{r4, r5, lr}
 800ae72:	6803      	ldr	r3, [r0, #0]
 800ae74:	3301      	adds	r3, #1
 800ae76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae7a:	b914      	cbnz	r4, 800ae82 <__match+0x12>
 800ae7c:	6003      	str	r3, [r0, #0]
 800ae7e:	2001      	movs	r0, #1
 800ae80:	bd30      	pop	{r4, r5, pc}
 800ae82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ae8a:	2d19      	cmp	r5, #25
 800ae8c:	bf98      	it	ls
 800ae8e:	3220      	addls	r2, #32
 800ae90:	42a2      	cmp	r2, r4
 800ae92:	d0f0      	beq.n	800ae76 <__match+0x6>
 800ae94:	2000      	movs	r0, #0
 800ae96:	e7f3      	b.n	800ae80 <__match+0x10>

0800ae98 <__hexnan>:
 800ae98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae9c:	2500      	movs	r5, #0
 800ae9e:	680b      	ldr	r3, [r1, #0]
 800aea0:	4682      	mov	sl, r0
 800aea2:	115e      	asrs	r6, r3, #5
 800aea4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aea8:	f013 031f 	ands.w	r3, r3, #31
 800aeac:	bf18      	it	ne
 800aeae:	3604      	addne	r6, #4
 800aeb0:	1f37      	subs	r7, r6, #4
 800aeb2:	4690      	mov	r8, r2
 800aeb4:	46b9      	mov	r9, r7
 800aeb6:	463c      	mov	r4, r7
 800aeb8:	46ab      	mov	fp, r5
 800aeba:	b087      	sub	sp, #28
 800aebc:	6801      	ldr	r1, [r0, #0]
 800aebe:	9301      	str	r3, [sp, #4]
 800aec0:	f846 5c04 	str.w	r5, [r6, #-4]
 800aec4:	9502      	str	r5, [sp, #8]
 800aec6:	784a      	ldrb	r2, [r1, #1]
 800aec8:	1c4b      	adds	r3, r1, #1
 800aeca:	9303      	str	r3, [sp, #12]
 800aecc:	b342      	cbz	r2, 800af20 <__hexnan+0x88>
 800aece:	4610      	mov	r0, r2
 800aed0:	9105      	str	r1, [sp, #20]
 800aed2:	9204      	str	r2, [sp, #16]
 800aed4:	f7ff fd69 	bl	800a9aa <__hexdig_fun>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d14f      	bne.n	800af7c <__hexnan+0xe4>
 800aedc:	9a04      	ldr	r2, [sp, #16]
 800aede:	9905      	ldr	r1, [sp, #20]
 800aee0:	2a20      	cmp	r2, #32
 800aee2:	d818      	bhi.n	800af16 <__hexnan+0x7e>
 800aee4:	9b02      	ldr	r3, [sp, #8]
 800aee6:	459b      	cmp	fp, r3
 800aee8:	dd13      	ble.n	800af12 <__hexnan+0x7a>
 800aeea:	454c      	cmp	r4, r9
 800aeec:	d206      	bcs.n	800aefc <__hexnan+0x64>
 800aeee:	2d07      	cmp	r5, #7
 800aef0:	dc04      	bgt.n	800aefc <__hexnan+0x64>
 800aef2:	462a      	mov	r2, r5
 800aef4:	4649      	mov	r1, r9
 800aef6:	4620      	mov	r0, r4
 800aef8:	f7ff ffa8 	bl	800ae4c <L_shift>
 800aefc:	4544      	cmp	r4, r8
 800aefe:	d950      	bls.n	800afa2 <__hexnan+0x10a>
 800af00:	2300      	movs	r3, #0
 800af02:	f1a4 0904 	sub.w	r9, r4, #4
 800af06:	f844 3c04 	str.w	r3, [r4, #-4]
 800af0a:	461d      	mov	r5, r3
 800af0c:	464c      	mov	r4, r9
 800af0e:	f8cd b008 	str.w	fp, [sp, #8]
 800af12:	9903      	ldr	r1, [sp, #12]
 800af14:	e7d7      	b.n	800aec6 <__hexnan+0x2e>
 800af16:	2a29      	cmp	r2, #41	; 0x29
 800af18:	d156      	bne.n	800afc8 <__hexnan+0x130>
 800af1a:	3102      	adds	r1, #2
 800af1c:	f8ca 1000 	str.w	r1, [sl]
 800af20:	f1bb 0f00 	cmp.w	fp, #0
 800af24:	d050      	beq.n	800afc8 <__hexnan+0x130>
 800af26:	454c      	cmp	r4, r9
 800af28:	d206      	bcs.n	800af38 <__hexnan+0xa0>
 800af2a:	2d07      	cmp	r5, #7
 800af2c:	dc04      	bgt.n	800af38 <__hexnan+0xa0>
 800af2e:	462a      	mov	r2, r5
 800af30:	4649      	mov	r1, r9
 800af32:	4620      	mov	r0, r4
 800af34:	f7ff ff8a 	bl	800ae4c <L_shift>
 800af38:	4544      	cmp	r4, r8
 800af3a:	d934      	bls.n	800afa6 <__hexnan+0x10e>
 800af3c:	4623      	mov	r3, r4
 800af3e:	f1a8 0204 	sub.w	r2, r8, #4
 800af42:	f853 1b04 	ldr.w	r1, [r3], #4
 800af46:	429f      	cmp	r7, r3
 800af48:	f842 1f04 	str.w	r1, [r2, #4]!
 800af4c:	d2f9      	bcs.n	800af42 <__hexnan+0xaa>
 800af4e:	1b3b      	subs	r3, r7, r4
 800af50:	f023 0303 	bic.w	r3, r3, #3
 800af54:	3304      	adds	r3, #4
 800af56:	3401      	adds	r4, #1
 800af58:	3e03      	subs	r6, #3
 800af5a:	42b4      	cmp	r4, r6
 800af5c:	bf88      	it	hi
 800af5e:	2304      	movhi	r3, #4
 800af60:	2200      	movs	r2, #0
 800af62:	4443      	add	r3, r8
 800af64:	f843 2b04 	str.w	r2, [r3], #4
 800af68:	429f      	cmp	r7, r3
 800af6a:	d2fb      	bcs.n	800af64 <__hexnan+0xcc>
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	b91b      	cbnz	r3, 800af78 <__hexnan+0xe0>
 800af70:	4547      	cmp	r7, r8
 800af72:	d127      	bne.n	800afc4 <__hexnan+0x12c>
 800af74:	2301      	movs	r3, #1
 800af76:	603b      	str	r3, [r7, #0]
 800af78:	2005      	movs	r0, #5
 800af7a:	e026      	b.n	800afca <__hexnan+0x132>
 800af7c:	3501      	adds	r5, #1
 800af7e:	2d08      	cmp	r5, #8
 800af80:	f10b 0b01 	add.w	fp, fp, #1
 800af84:	dd06      	ble.n	800af94 <__hexnan+0xfc>
 800af86:	4544      	cmp	r4, r8
 800af88:	d9c3      	bls.n	800af12 <__hexnan+0x7a>
 800af8a:	2300      	movs	r3, #0
 800af8c:	2501      	movs	r5, #1
 800af8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800af92:	3c04      	subs	r4, #4
 800af94:	6822      	ldr	r2, [r4, #0]
 800af96:	f000 000f 	and.w	r0, r0, #15
 800af9a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800af9e:	6022      	str	r2, [r4, #0]
 800afa0:	e7b7      	b.n	800af12 <__hexnan+0x7a>
 800afa2:	2508      	movs	r5, #8
 800afa4:	e7b5      	b.n	800af12 <__hexnan+0x7a>
 800afa6:	9b01      	ldr	r3, [sp, #4]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d0df      	beq.n	800af6c <__hexnan+0xd4>
 800afac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afb0:	f1c3 0320 	rsb	r3, r3, #32
 800afb4:	fa22 f303 	lsr.w	r3, r2, r3
 800afb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800afbc:	401a      	ands	r2, r3
 800afbe:	f846 2c04 	str.w	r2, [r6, #-4]
 800afc2:	e7d3      	b.n	800af6c <__hexnan+0xd4>
 800afc4:	3f04      	subs	r7, #4
 800afc6:	e7d1      	b.n	800af6c <__hexnan+0xd4>
 800afc8:	2004      	movs	r0, #4
 800afca:	b007      	add	sp, #28
 800afcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800afd0 <_localeconv_r>:
 800afd0:	4800      	ldr	r0, [pc, #0]	; (800afd4 <_localeconv_r+0x4>)
 800afd2:	4770      	bx	lr
 800afd4:	20000184 	.word	0x20000184

0800afd8 <malloc>:
 800afd8:	4b02      	ldr	r3, [pc, #8]	; (800afe4 <malloc+0xc>)
 800afda:	4601      	mov	r1, r0
 800afdc:	6818      	ldr	r0, [r3, #0]
 800afde:	f000 bd43 	b.w	800ba68 <_malloc_r>
 800afe2:	bf00      	nop
 800afe4:	2000002c 	.word	0x2000002c

0800afe8 <__ascii_mbtowc>:
 800afe8:	b082      	sub	sp, #8
 800afea:	b901      	cbnz	r1, 800afee <__ascii_mbtowc+0x6>
 800afec:	a901      	add	r1, sp, #4
 800afee:	b142      	cbz	r2, 800b002 <__ascii_mbtowc+0x1a>
 800aff0:	b14b      	cbz	r3, 800b006 <__ascii_mbtowc+0x1e>
 800aff2:	7813      	ldrb	r3, [r2, #0]
 800aff4:	600b      	str	r3, [r1, #0]
 800aff6:	7812      	ldrb	r2, [r2, #0]
 800aff8:	1e10      	subs	r0, r2, #0
 800affa:	bf18      	it	ne
 800affc:	2001      	movne	r0, #1
 800affe:	b002      	add	sp, #8
 800b000:	4770      	bx	lr
 800b002:	4610      	mov	r0, r2
 800b004:	e7fb      	b.n	800affe <__ascii_mbtowc+0x16>
 800b006:	f06f 0001 	mvn.w	r0, #1
 800b00a:	e7f8      	b.n	800affe <__ascii_mbtowc+0x16>

0800b00c <memchr>:
 800b00c:	4603      	mov	r3, r0
 800b00e:	b510      	push	{r4, lr}
 800b010:	b2c9      	uxtb	r1, r1
 800b012:	4402      	add	r2, r0
 800b014:	4293      	cmp	r3, r2
 800b016:	4618      	mov	r0, r3
 800b018:	d101      	bne.n	800b01e <memchr+0x12>
 800b01a:	2000      	movs	r0, #0
 800b01c:	e003      	b.n	800b026 <memchr+0x1a>
 800b01e:	7804      	ldrb	r4, [r0, #0]
 800b020:	3301      	adds	r3, #1
 800b022:	428c      	cmp	r4, r1
 800b024:	d1f6      	bne.n	800b014 <memchr+0x8>
 800b026:	bd10      	pop	{r4, pc}

0800b028 <memcpy>:
 800b028:	440a      	add	r2, r1
 800b02a:	4291      	cmp	r1, r2
 800b02c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b030:	d100      	bne.n	800b034 <memcpy+0xc>
 800b032:	4770      	bx	lr
 800b034:	b510      	push	{r4, lr}
 800b036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b03a:	4291      	cmp	r1, r2
 800b03c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b040:	d1f9      	bne.n	800b036 <memcpy+0xe>
 800b042:	bd10      	pop	{r4, pc}

0800b044 <_Balloc>:
 800b044:	b570      	push	{r4, r5, r6, lr}
 800b046:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b048:	4604      	mov	r4, r0
 800b04a:	460d      	mov	r5, r1
 800b04c:	b976      	cbnz	r6, 800b06c <_Balloc+0x28>
 800b04e:	2010      	movs	r0, #16
 800b050:	f7ff ffc2 	bl	800afd8 <malloc>
 800b054:	4602      	mov	r2, r0
 800b056:	6260      	str	r0, [r4, #36]	; 0x24
 800b058:	b920      	cbnz	r0, 800b064 <_Balloc+0x20>
 800b05a:	2166      	movs	r1, #102	; 0x66
 800b05c:	4b17      	ldr	r3, [pc, #92]	; (800b0bc <_Balloc+0x78>)
 800b05e:	4818      	ldr	r0, [pc, #96]	; (800b0c0 <_Balloc+0x7c>)
 800b060:	f000 feee 	bl	800be40 <__assert_func>
 800b064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b068:	6006      	str	r6, [r0, #0]
 800b06a:	60c6      	str	r6, [r0, #12]
 800b06c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b06e:	68f3      	ldr	r3, [r6, #12]
 800b070:	b183      	cbz	r3, 800b094 <_Balloc+0x50>
 800b072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b07a:	b9b8      	cbnz	r0, 800b0ac <_Balloc+0x68>
 800b07c:	2101      	movs	r1, #1
 800b07e:	fa01 f605 	lsl.w	r6, r1, r5
 800b082:	1d72      	adds	r2, r6, #5
 800b084:	4620      	mov	r0, r4
 800b086:	0092      	lsls	r2, r2, #2
 800b088:	f000 fc94 	bl	800b9b4 <_calloc_r>
 800b08c:	b160      	cbz	r0, 800b0a8 <_Balloc+0x64>
 800b08e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b092:	e00e      	b.n	800b0b2 <_Balloc+0x6e>
 800b094:	2221      	movs	r2, #33	; 0x21
 800b096:	2104      	movs	r1, #4
 800b098:	4620      	mov	r0, r4
 800b09a:	f000 fc8b 	bl	800b9b4 <_calloc_r>
 800b09e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0a0:	60f0      	str	r0, [r6, #12]
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1e4      	bne.n	800b072 <_Balloc+0x2e>
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	bd70      	pop	{r4, r5, r6, pc}
 800b0ac:	6802      	ldr	r2, [r0, #0]
 800b0ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0b8:	e7f7      	b.n	800b0aa <_Balloc+0x66>
 800b0ba:	bf00      	nop
 800b0bc:	0800e60e 	.word	0x0800e60e
 800b0c0:	0800e714 	.word	0x0800e714

0800b0c4 <_Bfree>:
 800b0c4:	b570      	push	{r4, r5, r6, lr}
 800b0c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b0c8:	4605      	mov	r5, r0
 800b0ca:	460c      	mov	r4, r1
 800b0cc:	b976      	cbnz	r6, 800b0ec <_Bfree+0x28>
 800b0ce:	2010      	movs	r0, #16
 800b0d0:	f7ff ff82 	bl	800afd8 <malloc>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	6268      	str	r0, [r5, #36]	; 0x24
 800b0d8:	b920      	cbnz	r0, 800b0e4 <_Bfree+0x20>
 800b0da:	218a      	movs	r1, #138	; 0x8a
 800b0dc:	4b08      	ldr	r3, [pc, #32]	; (800b100 <_Bfree+0x3c>)
 800b0de:	4809      	ldr	r0, [pc, #36]	; (800b104 <_Bfree+0x40>)
 800b0e0:	f000 feae 	bl	800be40 <__assert_func>
 800b0e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0e8:	6006      	str	r6, [r0, #0]
 800b0ea:	60c6      	str	r6, [r0, #12]
 800b0ec:	b13c      	cbz	r4, 800b0fe <_Bfree+0x3a>
 800b0ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b0f0:	6862      	ldr	r2, [r4, #4]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0f8:	6021      	str	r1, [r4, #0]
 800b0fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0fe:	bd70      	pop	{r4, r5, r6, pc}
 800b100:	0800e60e 	.word	0x0800e60e
 800b104:	0800e714 	.word	0x0800e714

0800b108 <__multadd>:
 800b108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b10c:	4698      	mov	r8, r3
 800b10e:	460c      	mov	r4, r1
 800b110:	2300      	movs	r3, #0
 800b112:	690e      	ldr	r6, [r1, #16]
 800b114:	4607      	mov	r7, r0
 800b116:	f101 0014 	add.w	r0, r1, #20
 800b11a:	6805      	ldr	r5, [r0, #0]
 800b11c:	3301      	adds	r3, #1
 800b11e:	b2a9      	uxth	r1, r5
 800b120:	fb02 8101 	mla	r1, r2, r1, r8
 800b124:	0c2d      	lsrs	r5, r5, #16
 800b126:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b12a:	fb02 c505 	mla	r5, r2, r5, ip
 800b12e:	b289      	uxth	r1, r1
 800b130:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b134:	429e      	cmp	r6, r3
 800b136:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b13a:	f840 1b04 	str.w	r1, [r0], #4
 800b13e:	dcec      	bgt.n	800b11a <__multadd+0x12>
 800b140:	f1b8 0f00 	cmp.w	r8, #0
 800b144:	d022      	beq.n	800b18c <__multadd+0x84>
 800b146:	68a3      	ldr	r3, [r4, #8]
 800b148:	42b3      	cmp	r3, r6
 800b14a:	dc19      	bgt.n	800b180 <__multadd+0x78>
 800b14c:	6861      	ldr	r1, [r4, #4]
 800b14e:	4638      	mov	r0, r7
 800b150:	3101      	adds	r1, #1
 800b152:	f7ff ff77 	bl	800b044 <_Balloc>
 800b156:	4605      	mov	r5, r0
 800b158:	b928      	cbnz	r0, 800b166 <__multadd+0x5e>
 800b15a:	4602      	mov	r2, r0
 800b15c:	21b5      	movs	r1, #181	; 0xb5
 800b15e:	4b0d      	ldr	r3, [pc, #52]	; (800b194 <__multadd+0x8c>)
 800b160:	480d      	ldr	r0, [pc, #52]	; (800b198 <__multadd+0x90>)
 800b162:	f000 fe6d 	bl	800be40 <__assert_func>
 800b166:	6922      	ldr	r2, [r4, #16]
 800b168:	f104 010c 	add.w	r1, r4, #12
 800b16c:	3202      	adds	r2, #2
 800b16e:	0092      	lsls	r2, r2, #2
 800b170:	300c      	adds	r0, #12
 800b172:	f7ff ff59 	bl	800b028 <memcpy>
 800b176:	4621      	mov	r1, r4
 800b178:	4638      	mov	r0, r7
 800b17a:	f7ff ffa3 	bl	800b0c4 <_Bfree>
 800b17e:	462c      	mov	r4, r5
 800b180:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b184:	3601      	adds	r6, #1
 800b186:	f8c3 8014 	str.w	r8, [r3, #20]
 800b18a:	6126      	str	r6, [r4, #16]
 800b18c:	4620      	mov	r0, r4
 800b18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b192:	bf00      	nop
 800b194:	0800e684 	.word	0x0800e684
 800b198:	0800e714 	.word	0x0800e714

0800b19c <__s2b>:
 800b19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1a0:	4615      	mov	r5, r2
 800b1a2:	2209      	movs	r2, #9
 800b1a4:	461f      	mov	r7, r3
 800b1a6:	3308      	adds	r3, #8
 800b1a8:	460c      	mov	r4, r1
 800b1aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	db09      	blt.n	800b1cc <__s2b+0x30>
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	f7ff ff43 	bl	800b044 <_Balloc>
 800b1be:	b940      	cbnz	r0, 800b1d2 <__s2b+0x36>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	21ce      	movs	r1, #206	; 0xce
 800b1c4:	4b18      	ldr	r3, [pc, #96]	; (800b228 <__s2b+0x8c>)
 800b1c6:	4819      	ldr	r0, [pc, #100]	; (800b22c <__s2b+0x90>)
 800b1c8:	f000 fe3a 	bl	800be40 <__assert_func>
 800b1cc:	0052      	lsls	r2, r2, #1
 800b1ce:	3101      	adds	r1, #1
 800b1d0:	e7f0      	b.n	800b1b4 <__s2b+0x18>
 800b1d2:	9b08      	ldr	r3, [sp, #32]
 800b1d4:	2d09      	cmp	r5, #9
 800b1d6:	6143      	str	r3, [r0, #20]
 800b1d8:	f04f 0301 	mov.w	r3, #1
 800b1dc:	6103      	str	r3, [r0, #16]
 800b1de:	dd16      	ble.n	800b20e <__s2b+0x72>
 800b1e0:	f104 0909 	add.w	r9, r4, #9
 800b1e4:	46c8      	mov	r8, r9
 800b1e6:	442c      	add	r4, r5
 800b1e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b1ec:	4601      	mov	r1, r0
 800b1ee:	220a      	movs	r2, #10
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	3b30      	subs	r3, #48	; 0x30
 800b1f4:	f7ff ff88 	bl	800b108 <__multadd>
 800b1f8:	45a0      	cmp	r8, r4
 800b1fa:	d1f5      	bne.n	800b1e8 <__s2b+0x4c>
 800b1fc:	f1a5 0408 	sub.w	r4, r5, #8
 800b200:	444c      	add	r4, r9
 800b202:	1b2d      	subs	r5, r5, r4
 800b204:	1963      	adds	r3, r4, r5
 800b206:	42bb      	cmp	r3, r7
 800b208:	db04      	blt.n	800b214 <__s2b+0x78>
 800b20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b20e:	2509      	movs	r5, #9
 800b210:	340a      	adds	r4, #10
 800b212:	e7f6      	b.n	800b202 <__s2b+0x66>
 800b214:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b218:	4601      	mov	r1, r0
 800b21a:	220a      	movs	r2, #10
 800b21c:	4630      	mov	r0, r6
 800b21e:	3b30      	subs	r3, #48	; 0x30
 800b220:	f7ff ff72 	bl	800b108 <__multadd>
 800b224:	e7ee      	b.n	800b204 <__s2b+0x68>
 800b226:	bf00      	nop
 800b228:	0800e684 	.word	0x0800e684
 800b22c:	0800e714 	.word	0x0800e714

0800b230 <__hi0bits>:
 800b230:	0c02      	lsrs	r2, r0, #16
 800b232:	0412      	lsls	r2, r2, #16
 800b234:	4603      	mov	r3, r0
 800b236:	b9ca      	cbnz	r2, 800b26c <__hi0bits+0x3c>
 800b238:	0403      	lsls	r3, r0, #16
 800b23a:	2010      	movs	r0, #16
 800b23c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b240:	bf04      	itt	eq
 800b242:	021b      	lsleq	r3, r3, #8
 800b244:	3008      	addeq	r0, #8
 800b246:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b24a:	bf04      	itt	eq
 800b24c:	011b      	lsleq	r3, r3, #4
 800b24e:	3004      	addeq	r0, #4
 800b250:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b254:	bf04      	itt	eq
 800b256:	009b      	lsleq	r3, r3, #2
 800b258:	3002      	addeq	r0, #2
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	db05      	blt.n	800b26a <__hi0bits+0x3a>
 800b25e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b262:	f100 0001 	add.w	r0, r0, #1
 800b266:	bf08      	it	eq
 800b268:	2020      	moveq	r0, #32
 800b26a:	4770      	bx	lr
 800b26c:	2000      	movs	r0, #0
 800b26e:	e7e5      	b.n	800b23c <__hi0bits+0xc>

0800b270 <__lo0bits>:
 800b270:	6803      	ldr	r3, [r0, #0]
 800b272:	4602      	mov	r2, r0
 800b274:	f013 0007 	ands.w	r0, r3, #7
 800b278:	d00b      	beq.n	800b292 <__lo0bits+0x22>
 800b27a:	07d9      	lsls	r1, r3, #31
 800b27c:	d422      	bmi.n	800b2c4 <__lo0bits+0x54>
 800b27e:	0798      	lsls	r0, r3, #30
 800b280:	bf49      	itett	mi
 800b282:	085b      	lsrmi	r3, r3, #1
 800b284:	089b      	lsrpl	r3, r3, #2
 800b286:	2001      	movmi	r0, #1
 800b288:	6013      	strmi	r3, [r2, #0]
 800b28a:	bf5c      	itt	pl
 800b28c:	2002      	movpl	r0, #2
 800b28e:	6013      	strpl	r3, [r2, #0]
 800b290:	4770      	bx	lr
 800b292:	b299      	uxth	r1, r3
 800b294:	b909      	cbnz	r1, 800b29a <__lo0bits+0x2a>
 800b296:	2010      	movs	r0, #16
 800b298:	0c1b      	lsrs	r3, r3, #16
 800b29a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b29e:	bf04      	itt	eq
 800b2a0:	0a1b      	lsreq	r3, r3, #8
 800b2a2:	3008      	addeq	r0, #8
 800b2a4:	0719      	lsls	r1, r3, #28
 800b2a6:	bf04      	itt	eq
 800b2a8:	091b      	lsreq	r3, r3, #4
 800b2aa:	3004      	addeq	r0, #4
 800b2ac:	0799      	lsls	r1, r3, #30
 800b2ae:	bf04      	itt	eq
 800b2b0:	089b      	lsreq	r3, r3, #2
 800b2b2:	3002      	addeq	r0, #2
 800b2b4:	07d9      	lsls	r1, r3, #31
 800b2b6:	d403      	bmi.n	800b2c0 <__lo0bits+0x50>
 800b2b8:	085b      	lsrs	r3, r3, #1
 800b2ba:	f100 0001 	add.w	r0, r0, #1
 800b2be:	d003      	beq.n	800b2c8 <__lo0bits+0x58>
 800b2c0:	6013      	str	r3, [r2, #0]
 800b2c2:	4770      	bx	lr
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	4770      	bx	lr
 800b2c8:	2020      	movs	r0, #32
 800b2ca:	4770      	bx	lr

0800b2cc <__i2b>:
 800b2cc:	b510      	push	{r4, lr}
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	2101      	movs	r1, #1
 800b2d2:	f7ff feb7 	bl	800b044 <_Balloc>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	b928      	cbnz	r0, 800b2e6 <__i2b+0x1a>
 800b2da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b2de:	4b04      	ldr	r3, [pc, #16]	; (800b2f0 <__i2b+0x24>)
 800b2e0:	4804      	ldr	r0, [pc, #16]	; (800b2f4 <__i2b+0x28>)
 800b2e2:	f000 fdad 	bl	800be40 <__assert_func>
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	6144      	str	r4, [r0, #20]
 800b2ea:	6103      	str	r3, [r0, #16]
 800b2ec:	bd10      	pop	{r4, pc}
 800b2ee:	bf00      	nop
 800b2f0:	0800e684 	.word	0x0800e684
 800b2f4:	0800e714 	.word	0x0800e714

0800b2f8 <__multiply>:
 800b2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fc:	4614      	mov	r4, r2
 800b2fe:	690a      	ldr	r2, [r1, #16]
 800b300:	6923      	ldr	r3, [r4, #16]
 800b302:	460d      	mov	r5, r1
 800b304:	429a      	cmp	r2, r3
 800b306:	bfbe      	ittt	lt
 800b308:	460b      	movlt	r3, r1
 800b30a:	4625      	movlt	r5, r4
 800b30c:	461c      	movlt	r4, r3
 800b30e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b312:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b316:	68ab      	ldr	r3, [r5, #8]
 800b318:	6869      	ldr	r1, [r5, #4]
 800b31a:	eb0a 0709 	add.w	r7, sl, r9
 800b31e:	42bb      	cmp	r3, r7
 800b320:	b085      	sub	sp, #20
 800b322:	bfb8      	it	lt
 800b324:	3101      	addlt	r1, #1
 800b326:	f7ff fe8d 	bl	800b044 <_Balloc>
 800b32a:	b930      	cbnz	r0, 800b33a <__multiply+0x42>
 800b32c:	4602      	mov	r2, r0
 800b32e:	f240 115d 	movw	r1, #349	; 0x15d
 800b332:	4b41      	ldr	r3, [pc, #260]	; (800b438 <__multiply+0x140>)
 800b334:	4841      	ldr	r0, [pc, #260]	; (800b43c <__multiply+0x144>)
 800b336:	f000 fd83 	bl	800be40 <__assert_func>
 800b33a:	f100 0614 	add.w	r6, r0, #20
 800b33e:	4633      	mov	r3, r6
 800b340:	2200      	movs	r2, #0
 800b342:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b346:	4543      	cmp	r3, r8
 800b348:	d31e      	bcc.n	800b388 <__multiply+0x90>
 800b34a:	f105 0c14 	add.w	ip, r5, #20
 800b34e:	f104 0314 	add.w	r3, r4, #20
 800b352:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b356:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b35a:	9202      	str	r2, [sp, #8]
 800b35c:	ebac 0205 	sub.w	r2, ip, r5
 800b360:	3a15      	subs	r2, #21
 800b362:	f022 0203 	bic.w	r2, r2, #3
 800b366:	3204      	adds	r2, #4
 800b368:	f105 0115 	add.w	r1, r5, #21
 800b36c:	458c      	cmp	ip, r1
 800b36e:	bf38      	it	cc
 800b370:	2204      	movcc	r2, #4
 800b372:	9201      	str	r2, [sp, #4]
 800b374:	9a02      	ldr	r2, [sp, #8]
 800b376:	9303      	str	r3, [sp, #12]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d808      	bhi.n	800b38e <__multiply+0x96>
 800b37c:	2f00      	cmp	r7, #0
 800b37e:	dc55      	bgt.n	800b42c <__multiply+0x134>
 800b380:	6107      	str	r7, [r0, #16]
 800b382:	b005      	add	sp, #20
 800b384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b388:	f843 2b04 	str.w	r2, [r3], #4
 800b38c:	e7db      	b.n	800b346 <__multiply+0x4e>
 800b38e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b392:	f1ba 0f00 	cmp.w	sl, #0
 800b396:	d020      	beq.n	800b3da <__multiply+0xe2>
 800b398:	46b1      	mov	r9, r6
 800b39a:	2200      	movs	r2, #0
 800b39c:	f105 0e14 	add.w	lr, r5, #20
 800b3a0:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b3a4:	f8d9 b000 	ldr.w	fp, [r9]
 800b3a8:	b2a1      	uxth	r1, r4
 800b3aa:	fa1f fb8b 	uxth.w	fp, fp
 800b3ae:	fb0a b101 	mla	r1, sl, r1, fp
 800b3b2:	4411      	add	r1, r2
 800b3b4:	f8d9 2000 	ldr.w	r2, [r9]
 800b3b8:	0c24      	lsrs	r4, r4, #16
 800b3ba:	0c12      	lsrs	r2, r2, #16
 800b3bc:	fb0a 2404 	mla	r4, sl, r4, r2
 800b3c0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b3c4:	b289      	uxth	r1, r1
 800b3c6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b3ca:	45f4      	cmp	ip, lr
 800b3cc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b3d0:	f849 1b04 	str.w	r1, [r9], #4
 800b3d4:	d8e4      	bhi.n	800b3a0 <__multiply+0xa8>
 800b3d6:	9901      	ldr	r1, [sp, #4]
 800b3d8:	5072      	str	r2, [r6, r1]
 800b3da:	9a03      	ldr	r2, [sp, #12]
 800b3dc:	3304      	adds	r3, #4
 800b3de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b3e2:	f1b9 0f00 	cmp.w	r9, #0
 800b3e6:	d01f      	beq.n	800b428 <__multiply+0x130>
 800b3e8:	46b6      	mov	lr, r6
 800b3ea:	f04f 0a00 	mov.w	sl, #0
 800b3ee:	6834      	ldr	r4, [r6, #0]
 800b3f0:	f105 0114 	add.w	r1, r5, #20
 800b3f4:	880a      	ldrh	r2, [r1, #0]
 800b3f6:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b3fa:	b2a4      	uxth	r4, r4
 800b3fc:	fb09 b202 	mla	r2, r9, r2, fp
 800b400:	4492      	add	sl, r2
 800b402:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b406:	f84e 4b04 	str.w	r4, [lr], #4
 800b40a:	f851 4b04 	ldr.w	r4, [r1], #4
 800b40e:	f8be 2000 	ldrh.w	r2, [lr]
 800b412:	0c24      	lsrs	r4, r4, #16
 800b414:	fb09 2404 	mla	r4, r9, r4, r2
 800b418:	458c      	cmp	ip, r1
 800b41a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b41e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b422:	d8e7      	bhi.n	800b3f4 <__multiply+0xfc>
 800b424:	9a01      	ldr	r2, [sp, #4]
 800b426:	50b4      	str	r4, [r6, r2]
 800b428:	3604      	adds	r6, #4
 800b42a:	e7a3      	b.n	800b374 <__multiply+0x7c>
 800b42c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1a5      	bne.n	800b380 <__multiply+0x88>
 800b434:	3f01      	subs	r7, #1
 800b436:	e7a1      	b.n	800b37c <__multiply+0x84>
 800b438:	0800e684 	.word	0x0800e684
 800b43c:	0800e714 	.word	0x0800e714

0800b440 <__pow5mult>:
 800b440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b444:	4615      	mov	r5, r2
 800b446:	f012 0203 	ands.w	r2, r2, #3
 800b44a:	4606      	mov	r6, r0
 800b44c:	460f      	mov	r7, r1
 800b44e:	d007      	beq.n	800b460 <__pow5mult+0x20>
 800b450:	4c25      	ldr	r4, [pc, #148]	; (800b4e8 <__pow5mult+0xa8>)
 800b452:	3a01      	subs	r2, #1
 800b454:	2300      	movs	r3, #0
 800b456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b45a:	f7ff fe55 	bl	800b108 <__multadd>
 800b45e:	4607      	mov	r7, r0
 800b460:	10ad      	asrs	r5, r5, #2
 800b462:	d03d      	beq.n	800b4e0 <__pow5mult+0xa0>
 800b464:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b466:	b97c      	cbnz	r4, 800b488 <__pow5mult+0x48>
 800b468:	2010      	movs	r0, #16
 800b46a:	f7ff fdb5 	bl	800afd8 <malloc>
 800b46e:	4602      	mov	r2, r0
 800b470:	6270      	str	r0, [r6, #36]	; 0x24
 800b472:	b928      	cbnz	r0, 800b480 <__pow5mult+0x40>
 800b474:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b478:	4b1c      	ldr	r3, [pc, #112]	; (800b4ec <__pow5mult+0xac>)
 800b47a:	481d      	ldr	r0, [pc, #116]	; (800b4f0 <__pow5mult+0xb0>)
 800b47c:	f000 fce0 	bl	800be40 <__assert_func>
 800b480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b484:	6004      	str	r4, [r0, #0]
 800b486:	60c4      	str	r4, [r0, #12]
 800b488:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b48c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b490:	b94c      	cbnz	r4, 800b4a6 <__pow5mult+0x66>
 800b492:	f240 2171 	movw	r1, #625	; 0x271
 800b496:	4630      	mov	r0, r6
 800b498:	f7ff ff18 	bl	800b2cc <__i2b>
 800b49c:	2300      	movs	r3, #0
 800b49e:	4604      	mov	r4, r0
 800b4a0:	f8c8 0008 	str.w	r0, [r8, #8]
 800b4a4:	6003      	str	r3, [r0, #0]
 800b4a6:	f04f 0900 	mov.w	r9, #0
 800b4aa:	07eb      	lsls	r3, r5, #31
 800b4ac:	d50a      	bpl.n	800b4c4 <__pow5mult+0x84>
 800b4ae:	4639      	mov	r1, r7
 800b4b0:	4622      	mov	r2, r4
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	f7ff ff20 	bl	800b2f8 <__multiply>
 800b4b8:	4680      	mov	r8, r0
 800b4ba:	4639      	mov	r1, r7
 800b4bc:	4630      	mov	r0, r6
 800b4be:	f7ff fe01 	bl	800b0c4 <_Bfree>
 800b4c2:	4647      	mov	r7, r8
 800b4c4:	106d      	asrs	r5, r5, #1
 800b4c6:	d00b      	beq.n	800b4e0 <__pow5mult+0xa0>
 800b4c8:	6820      	ldr	r0, [r4, #0]
 800b4ca:	b938      	cbnz	r0, 800b4dc <__pow5mult+0x9c>
 800b4cc:	4622      	mov	r2, r4
 800b4ce:	4621      	mov	r1, r4
 800b4d0:	4630      	mov	r0, r6
 800b4d2:	f7ff ff11 	bl	800b2f8 <__multiply>
 800b4d6:	6020      	str	r0, [r4, #0]
 800b4d8:	f8c0 9000 	str.w	r9, [r0]
 800b4dc:	4604      	mov	r4, r0
 800b4de:	e7e4      	b.n	800b4aa <__pow5mult+0x6a>
 800b4e0:	4638      	mov	r0, r7
 800b4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4e6:	bf00      	nop
 800b4e8:	0800e868 	.word	0x0800e868
 800b4ec:	0800e60e 	.word	0x0800e60e
 800b4f0:	0800e714 	.word	0x0800e714

0800b4f4 <__lshift>:
 800b4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f8:	460c      	mov	r4, r1
 800b4fa:	4607      	mov	r7, r0
 800b4fc:	4691      	mov	r9, r2
 800b4fe:	6923      	ldr	r3, [r4, #16]
 800b500:	6849      	ldr	r1, [r1, #4]
 800b502:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b506:	68a3      	ldr	r3, [r4, #8]
 800b508:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b50c:	f108 0601 	add.w	r6, r8, #1
 800b510:	42b3      	cmp	r3, r6
 800b512:	db0b      	blt.n	800b52c <__lshift+0x38>
 800b514:	4638      	mov	r0, r7
 800b516:	f7ff fd95 	bl	800b044 <_Balloc>
 800b51a:	4605      	mov	r5, r0
 800b51c:	b948      	cbnz	r0, 800b532 <__lshift+0x3e>
 800b51e:	4602      	mov	r2, r0
 800b520:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b524:	4b27      	ldr	r3, [pc, #156]	; (800b5c4 <__lshift+0xd0>)
 800b526:	4828      	ldr	r0, [pc, #160]	; (800b5c8 <__lshift+0xd4>)
 800b528:	f000 fc8a 	bl	800be40 <__assert_func>
 800b52c:	3101      	adds	r1, #1
 800b52e:	005b      	lsls	r3, r3, #1
 800b530:	e7ee      	b.n	800b510 <__lshift+0x1c>
 800b532:	2300      	movs	r3, #0
 800b534:	f100 0114 	add.w	r1, r0, #20
 800b538:	f100 0210 	add.w	r2, r0, #16
 800b53c:	4618      	mov	r0, r3
 800b53e:	4553      	cmp	r3, sl
 800b540:	db33      	blt.n	800b5aa <__lshift+0xb6>
 800b542:	6920      	ldr	r0, [r4, #16]
 800b544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b548:	f104 0314 	add.w	r3, r4, #20
 800b54c:	f019 091f 	ands.w	r9, r9, #31
 800b550:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b554:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b558:	d02b      	beq.n	800b5b2 <__lshift+0xbe>
 800b55a:	468a      	mov	sl, r1
 800b55c:	2200      	movs	r2, #0
 800b55e:	f1c9 0e20 	rsb	lr, r9, #32
 800b562:	6818      	ldr	r0, [r3, #0]
 800b564:	fa00 f009 	lsl.w	r0, r0, r9
 800b568:	4302      	orrs	r2, r0
 800b56a:	f84a 2b04 	str.w	r2, [sl], #4
 800b56e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b572:	459c      	cmp	ip, r3
 800b574:	fa22 f20e 	lsr.w	r2, r2, lr
 800b578:	d8f3      	bhi.n	800b562 <__lshift+0x6e>
 800b57a:	ebac 0304 	sub.w	r3, ip, r4
 800b57e:	3b15      	subs	r3, #21
 800b580:	f023 0303 	bic.w	r3, r3, #3
 800b584:	3304      	adds	r3, #4
 800b586:	f104 0015 	add.w	r0, r4, #21
 800b58a:	4584      	cmp	ip, r0
 800b58c:	bf38      	it	cc
 800b58e:	2304      	movcc	r3, #4
 800b590:	50ca      	str	r2, [r1, r3]
 800b592:	b10a      	cbz	r2, 800b598 <__lshift+0xa4>
 800b594:	f108 0602 	add.w	r6, r8, #2
 800b598:	3e01      	subs	r6, #1
 800b59a:	4638      	mov	r0, r7
 800b59c:	4621      	mov	r1, r4
 800b59e:	612e      	str	r6, [r5, #16]
 800b5a0:	f7ff fd90 	bl	800b0c4 <_Bfree>
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	e7c5      	b.n	800b53e <__lshift+0x4a>
 800b5b2:	3904      	subs	r1, #4
 800b5b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5b8:	459c      	cmp	ip, r3
 800b5ba:	f841 2f04 	str.w	r2, [r1, #4]!
 800b5be:	d8f9      	bhi.n	800b5b4 <__lshift+0xc0>
 800b5c0:	e7ea      	b.n	800b598 <__lshift+0xa4>
 800b5c2:	bf00      	nop
 800b5c4:	0800e684 	.word	0x0800e684
 800b5c8:	0800e714 	.word	0x0800e714

0800b5cc <__mcmp>:
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	690a      	ldr	r2, [r1, #16]
 800b5d0:	6900      	ldr	r0, [r0, #16]
 800b5d2:	b530      	push	{r4, r5, lr}
 800b5d4:	1a80      	subs	r0, r0, r2
 800b5d6:	d10d      	bne.n	800b5f4 <__mcmp+0x28>
 800b5d8:	3314      	adds	r3, #20
 800b5da:	3114      	adds	r1, #20
 800b5dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b5e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b5e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b5e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b5ec:	4295      	cmp	r5, r2
 800b5ee:	d002      	beq.n	800b5f6 <__mcmp+0x2a>
 800b5f0:	d304      	bcc.n	800b5fc <__mcmp+0x30>
 800b5f2:	2001      	movs	r0, #1
 800b5f4:	bd30      	pop	{r4, r5, pc}
 800b5f6:	42a3      	cmp	r3, r4
 800b5f8:	d3f4      	bcc.n	800b5e4 <__mcmp+0x18>
 800b5fa:	e7fb      	b.n	800b5f4 <__mcmp+0x28>
 800b5fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b600:	e7f8      	b.n	800b5f4 <__mcmp+0x28>
	...

0800b604 <__mdiff>:
 800b604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b608:	460c      	mov	r4, r1
 800b60a:	4606      	mov	r6, r0
 800b60c:	4611      	mov	r1, r2
 800b60e:	4620      	mov	r0, r4
 800b610:	4692      	mov	sl, r2
 800b612:	f7ff ffdb 	bl	800b5cc <__mcmp>
 800b616:	1e05      	subs	r5, r0, #0
 800b618:	d111      	bne.n	800b63e <__mdiff+0x3a>
 800b61a:	4629      	mov	r1, r5
 800b61c:	4630      	mov	r0, r6
 800b61e:	f7ff fd11 	bl	800b044 <_Balloc>
 800b622:	4602      	mov	r2, r0
 800b624:	b928      	cbnz	r0, 800b632 <__mdiff+0x2e>
 800b626:	f240 2132 	movw	r1, #562	; 0x232
 800b62a:	4b3c      	ldr	r3, [pc, #240]	; (800b71c <__mdiff+0x118>)
 800b62c:	483c      	ldr	r0, [pc, #240]	; (800b720 <__mdiff+0x11c>)
 800b62e:	f000 fc07 	bl	800be40 <__assert_func>
 800b632:	2301      	movs	r3, #1
 800b634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b638:	4610      	mov	r0, r2
 800b63a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63e:	bfa4      	itt	ge
 800b640:	4653      	movge	r3, sl
 800b642:	46a2      	movge	sl, r4
 800b644:	4630      	mov	r0, r6
 800b646:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b64a:	bfa6      	itte	ge
 800b64c:	461c      	movge	r4, r3
 800b64e:	2500      	movge	r5, #0
 800b650:	2501      	movlt	r5, #1
 800b652:	f7ff fcf7 	bl	800b044 <_Balloc>
 800b656:	4602      	mov	r2, r0
 800b658:	b918      	cbnz	r0, 800b662 <__mdiff+0x5e>
 800b65a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b65e:	4b2f      	ldr	r3, [pc, #188]	; (800b71c <__mdiff+0x118>)
 800b660:	e7e4      	b.n	800b62c <__mdiff+0x28>
 800b662:	f100 0814 	add.w	r8, r0, #20
 800b666:	f8da 7010 	ldr.w	r7, [sl, #16]
 800b66a:	60c5      	str	r5, [r0, #12]
 800b66c:	f04f 0c00 	mov.w	ip, #0
 800b670:	f10a 0514 	add.w	r5, sl, #20
 800b674:	f10a 0010 	add.w	r0, sl, #16
 800b678:	46c2      	mov	sl, r8
 800b67a:	6926      	ldr	r6, [r4, #16]
 800b67c:	f104 0914 	add.w	r9, r4, #20
 800b680:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800b684:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b688:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800b68c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b690:	fa1f f18b 	uxth.w	r1, fp
 800b694:	4461      	add	r1, ip
 800b696:	fa1f fc83 	uxth.w	ip, r3
 800b69a:	0c1b      	lsrs	r3, r3, #16
 800b69c:	eba1 010c 	sub.w	r1, r1, ip
 800b6a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b6a4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b6a8:	b289      	uxth	r1, r1
 800b6aa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b6ae:	454e      	cmp	r6, r9
 800b6b0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b6b4:	f84a 3b04 	str.w	r3, [sl], #4
 800b6b8:	d8e6      	bhi.n	800b688 <__mdiff+0x84>
 800b6ba:	1b33      	subs	r3, r6, r4
 800b6bc:	3b15      	subs	r3, #21
 800b6be:	f023 0303 	bic.w	r3, r3, #3
 800b6c2:	3415      	adds	r4, #21
 800b6c4:	3304      	adds	r3, #4
 800b6c6:	42a6      	cmp	r6, r4
 800b6c8:	bf38      	it	cc
 800b6ca:	2304      	movcc	r3, #4
 800b6cc:	441d      	add	r5, r3
 800b6ce:	4443      	add	r3, r8
 800b6d0:	461e      	mov	r6, r3
 800b6d2:	462c      	mov	r4, r5
 800b6d4:	4574      	cmp	r4, lr
 800b6d6:	d30e      	bcc.n	800b6f6 <__mdiff+0xf2>
 800b6d8:	f10e 0103 	add.w	r1, lr, #3
 800b6dc:	1b49      	subs	r1, r1, r5
 800b6de:	f021 0103 	bic.w	r1, r1, #3
 800b6e2:	3d03      	subs	r5, #3
 800b6e4:	45ae      	cmp	lr, r5
 800b6e6:	bf38      	it	cc
 800b6e8:	2100      	movcc	r1, #0
 800b6ea:	4419      	add	r1, r3
 800b6ec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b6f0:	b18b      	cbz	r3, 800b716 <__mdiff+0x112>
 800b6f2:	6117      	str	r7, [r2, #16]
 800b6f4:	e7a0      	b.n	800b638 <__mdiff+0x34>
 800b6f6:	f854 8b04 	ldr.w	r8, [r4], #4
 800b6fa:	fa1f f188 	uxth.w	r1, r8
 800b6fe:	4461      	add	r1, ip
 800b700:	1408      	asrs	r0, r1, #16
 800b702:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800b706:	b289      	uxth	r1, r1
 800b708:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b70c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b710:	f846 1b04 	str.w	r1, [r6], #4
 800b714:	e7de      	b.n	800b6d4 <__mdiff+0xd0>
 800b716:	3f01      	subs	r7, #1
 800b718:	e7e8      	b.n	800b6ec <__mdiff+0xe8>
 800b71a:	bf00      	nop
 800b71c:	0800e684 	.word	0x0800e684
 800b720:	0800e714 	.word	0x0800e714

0800b724 <__ulp>:
 800b724:	4b11      	ldr	r3, [pc, #68]	; (800b76c <__ulp+0x48>)
 800b726:	400b      	ands	r3, r1
 800b728:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	dd02      	ble.n	800b736 <__ulp+0x12>
 800b730:	2000      	movs	r0, #0
 800b732:	4619      	mov	r1, r3
 800b734:	4770      	bx	lr
 800b736:	425b      	negs	r3, r3
 800b738:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b73c:	f04f 0000 	mov.w	r0, #0
 800b740:	f04f 0100 	mov.w	r1, #0
 800b744:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b748:	da04      	bge.n	800b754 <__ulp+0x30>
 800b74a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b74e:	fa43 f102 	asr.w	r1, r3, r2
 800b752:	4770      	bx	lr
 800b754:	f1a2 0314 	sub.w	r3, r2, #20
 800b758:	2b1e      	cmp	r3, #30
 800b75a:	bfd6      	itet	le
 800b75c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b760:	2301      	movgt	r3, #1
 800b762:	fa22 f303 	lsrle.w	r3, r2, r3
 800b766:	4618      	mov	r0, r3
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	7ff00000 	.word	0x7ff00000

0800b770 <__b2d>:
 800b770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b774:	6907      	ldr	r7, [r0, #16]
 800b776:	f100 0914 	add.w	r9, r0, #20
 800b77a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b77e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b782:	f1a7 0804 	sub.w	r8, r7, #4
 800b786:	4630      	mov	r0, r6
 800b788:	f7ff fd52 	bl	800b230 <__hi0bits>
 800b78c:	f1c0 0320 	rsb	r3, r0, #32
 800b790:	280a      	cmp	r0, #10
 800b792:	600b      	str	r3, [r1, #0]
 800b794:	491f      	ldr	r1, [pc, #124]	; (800b814 <__b2d+0xa4>)
 800b796:	dc17      	bgt.n	800b7c8 <__b2d+0x58>
 800b798:	45c1      	cmp	r9, r8
 800b79a:	bf28      	it	cs
 800b79c:	2200      	movcs	r2, #0
 800b79e:	f1c0 0c0b 	rsb	ip, r0, #11
 800b7a2:	fa26 f30c 	lsr.w	r3, r6, ip
 800b7a6:	bf38      	it	cc
 800b7a8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b7ac:	ea43 0501 	orr.w	r5, r3, r1
 800b7b0:	f100 0315 	add.w	r3, r0, #21
 800b7b4:	fa06 f303 	lsl.w	r3, r6, r3
 800b7b8:	fa22 f20c 	lsr.w	r2, r2, ip
 800b7bc:	ea43 0402 	orr.w	r4, r3, r2
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7c8:	45c1      	cmp	r9, r8
 800b7ca:	bf2e      	itee	cs
 800b7cc:	2200      	movcs	r2, #0
 800b7ce:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b7d2:	f1a7 0808 	subcc.w	r8, r7, #8
 800b7d6:	f1b0 030b 	subs.w	r3, r0, #11
 800b7da:	d016      	beq.n	800b80a <__b2d+0x9a>
 800b7dc:	f1c3 0720 	rsb	r7, r3, #32
 800b7e0:	fa22 f107 	lsr.w	r1, r2, r7
 800b7e4:	45c8      	cmp	r8, r9
 800b7e6:	fa06 f603 	lsl.w	r6, r6, r3
 800b7ea:	ea46 0601 	orr.w	r6, r6, r1
 800b7ee:	bf94      	ite	ls
 800b7f0:	2100      	movls	r1, #0
 800b7f2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b7f6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b7fa:	fa02 f003 	lsl.w	r0, r2, r3
 800b7fe:	40f9      	lsrs	r1, r7
 800b800:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b804:	ea40 0401 	orr.w	r4, r0, r1
 800b808:	e7da      	b.n	800b7c0 <__b2d+0x50>
 800b80a:	4614      	mov	r4, r2
 800b80c:	ea46 0501 	orr.w	r5, r6, r1
 800b810:	e7d6      	b.n	800b7c0 <__b2d+0x50>
 800b812:	bf00      	nop
 800b814:	3ff00000 	.word	0x3ff00000

0800b818 <__d2b>:
 800b818:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b81c:	2101      	movs	r1, #1
 800b81e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b822:	4690      	mov	r8, r2
 800b824:	461d      	mov	r5, r3
 800b826:	f7ff fc0d 	bl	800b044 <_Balloc>
 800b82a:	4604      	mov	r4, r0
 800b82c:	b930      	cbnz	r0, 800b83c <__d2b+0x24>
 800b82e:	4602      	mov	r2, r0
 800b830:	f240 310a 	movw	r1, #778	; 0x30a
 800b834:	4b24      	ldr	r3, [pc, #144]	; (800b8c8 <__d2b+0xb0>)
 800b836:	4825      	ldr	r0, [pc, #148]	; (800b8cc <__d2b+0xb4>)
 800b838:	f000 fb02 	bl	800be40 <__assert_func>
 800b83c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b840:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b844:	bb2d      	cbnz	r5, 800b892 <__d2b+0x7a>
 800b846:	9301      	str	r3, [sp, #4]
 800b848:	f1b8 0300 	subs.w	r3, r8, #0
 800b84c:	d026      	beq.n	800b89c <__d2b+0x84>
 800b84e:	4668      	mov	r0, sp
 800b850:	9300      	str	r3, [sp, #0]
 800b852:	f7ff fd0d 	bl	800b270 <__lo0bits>
 800b856:	9900      	ldr	r1, [sp, #0]
 800b858:	b1f0      	cbz	r0, 800b898 <__d2b+0x80>
 800b85a:	9a01      	ldr	r2, [sp, #4]
 800b85c:	f1c0 0320 	rsb	r3, r0, #32
 800b860:	fa02 f303 	lsl.w	r3, r2, r3
 800b864:	430b      	orrs	r3, r1
 800b866:	40c2      	lsrs	r2, r0
 800b868:	6163      	str	r3, [r4, #20]
 800b86a:	9201      	str	r2, [sp, #4]
 800b86c:	9b01      	ldr	r3, [sp, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	bf14      	ite	ne
 800b872:	2102      	movne	r1, #2
 800b874:	2101      	moveq	r1, #1
 800b876:	61a3      	str	r3, [r4, #24]
 800b878:	6121      	str	r1, [r4, #16]
 800b87a:	b1c5      	cbz	r5, 800b8ae <__d2b+0x96>
 800b87c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b880:	4405      	add	r5, r0
 800b882:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b886:	603d      	str	r5, [r7, #0]
 800b888:	6030      	str	r0, [r6, #0]
 800b88a:	4620      	mov	r0, r4
 800b88c:	b002      	add	sp, #8
 800b88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b896:	e7d6      	b.n	800b846 <__d2b+0x2e>
 800b898:	6161      	str	r1, [r4, #20]
 800b89a:	e7e7      	b.n	800b86c <__d2b+0x54>
 800b89c:	a801      	add	r0, sp, #4
 800b89e:	f7ff fce7 	bl	800b270 <__lo0bits>
 800b8a2:	2101      	movs	r1, #1
 800b8a4:	9b01      	ldr	r3, [sp, #4]
 800b8a6:	6121      	str	r1, [r4, #16]
 800b8a8:	6163      	str	r3, [r4, #20]
 800b8aa:	3020      	adds	r0, #32
 800b8ac:	e7e5      	b.n	800b87a <__d2b+0x62>
 800b8ae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b8b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b8b6:	6038      	str	r0, [r7, #0]
 800b8b8:	6918      	ldr	r0, [r3, #16]
 800b8ba:	f7ff fcb9 	bl	800b230 <__hi0bits>
 800b8be:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b8c2:	6031      	str	r1, [r6, #0]
 800b8c4:	e7e1      	b.n	800b88a <__d2b+0x72>
 800b8c6:	bf00      	nop
 800b8c8:	0800e684 	.word	0x0800e684
 800b8cc:	0800e714 	.word	0x0800e714

0800b8d0 <__ratio>:
 800b8d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d4:	4688      	mov	r8, r1
 800b8d6:	4669      	mov	r1, sp
 800b8d8:	4681      	mov	r9, r0
 800b8da:	f7ff ff49 	bl	800b770 <__b2d>
 800b8de:	460f      	mov	r7, r1
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	460d      	mov	r5, r1
 800b8e4:	4640      	mov	r0, r8
 800b8e6:	a901      	add	r1, sp, #4
 800b8e8:	f7ff ff42 	bl	800b770 <__b2d>
 800b8ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b8f0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b8f4:	468b      	mov	fp, r1
 800b8f6:	eba3 0c02 	sub.w	ip, r3, r2
 800b8fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b8fe:	1a9b      	subs	r3, r3, r2
 800b900:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b904:	2b00      	cmp	r3, #0
 800b906:	bfd5      	itete	le
 800b908:	460a      	movle	r2, r1
 800b90a:	462a      	movgt	r2, r5
 800b90c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b910:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b914:	bfd8      	it	le
 800b916:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b91a:	465b      	mov	r3, fp
 800b91c:	4602      	mov	r2, r0
 800b91e:	4639      	mov	r1, r7
 800b920:	4620      	mov	r0, r4
 800b922:	f7f4 ff03 	bl	800072c <__aeabi_ddiv>
 800b926:	b003      	add	sp, #12
 800b928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b92c <__copybits>:
 800b92c:	3901      	subs	r1, #1
 800b92e:	b570      	push	{r4, r5, r6, lr}
 800b930:	1149      	asrs	r1, r1, #5
 800b932:	6914      	ldr	r4, [r2, #16]
 800b934:	3101      	adds	r1, #1
 800b936:	f102 0314 	add.w	r3, r2, #20
 800b93a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b93e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b942:	1f05      	subs	r5, r0, #4
 800b944:	42a3      	cmp	r3, r4
 800b946:	d30c      	bcc.n	800b962 <__copybits+0x36>
 800b948:	1aa3      	subs	r3, r4, r2
 800b94a:	3b11      	subs	r3, #17
 800b94c:	f023 0303 	bic.w	r3, r3, #3
 800b950:	3211      	adds	r2, #17
 800b952:	42a2      	cmp	r2, r4
 800b954:	bf88      	it	hi
 800b956:	2300      	movhi	r3, #0
 800b958:	4418      	add	r0, r3
 800b95a:	2300      	movs	r3, #0
 800b95c:	4288      	cmp	r0, r1
 800b95e:	d305      	bcc.n	800b96c <__copybits+0x40>
 800b960:	bd70      	pop	{r4, r5, r6, pc}
 800b962:	f853 6b04 	ldr.w	r6, [r3], #4
 800b966:	f845 6f04 	str.w	r6, [r5, #4]!
 800b96a:	e7eb      	b.n	800b944 <__copybits+0x18>
 800b96c:	f840 3b04 	str.w	r3, [r0], #4
 800b970:	e7f4      	b.n	800b95c <__copybits+0x30>

0800b972 <__any_on>:
 800b972:	f100 0214 	add.w	r2, r0, #20
 800b976:	6900      	ldr	r0, [r0, #16]
 800b978:	114b      	asrs	r3, r1, #5
 800b97a:	4298      	cmp	r0, r3
 800b97c:	b510      	push	{r4, lr}
 800b97e:	db11      	blt.n	800b9a4 <__any_on+0x32>
 800b980:	dd0a      	ble.n	800b998 <__any_on+0x26>
 800b982:	f011 011f 	ands.w	r1, r1, #31
 800b986:	d007      	beq.n	800b998 <__any_on+0x26>
 800b988:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b98c:	fa24 f001 	lsr.w	r0, r4, r1
 800b990:	fa00 f101 	lsl.w	r1, r0, r1
 800b994:	428c      	cmp	r4, r1
 800b996:	d10b      	bne.n	800b9b0 <__any_on+0x3e>
 800b998:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d803      	bhi.n	800b9a8 <__any_on+0x36>
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	bd10      	pop	{r4, pc}
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	e7f7      	b.n	800b998 <__any_on+0x26>
 800b9a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b9ac:	2900      	cmp	r1, #0
 800b9ae:	d0f5      	beq.n	800b99c <__any_on+0x2a>
 800b9b0:	2001      	movs	r0, #1
 800b9b2:	e7f6      	b.n	800b9a2 <__any_on+0x30>

0800b9b4 <_calloc_r>:
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	fb02 f501 	mul.w	r5, r2, r1
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	f000 f854 	bl	800ba68 <_malloc_r>
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	b118      	cbz	r0, 800b9cc <_calloc_r+0x18>
 800b9c4:	462a      	mov	r2, r5
 800b9c6:	2100      	movs	r1, #0
 800b9c8:	f7fc fbde 	bl	8008188 <memset>
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	bd38      	pop	{r3, r4, r5, pc}

0800b9d0 <_free_r>:
 800b9d0:	b538      	push	{r3, r4, r5, lr}
 800b9d2:	4605      	mov	r5, r0
 800b9d4:	2900      	cmp	r1, #0
 800b9d6:	d043      	beq.n	800ba60 <_free_r+0x90>
 800b9d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9dc:	1f0c      	subs	r4, r1, #4
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	bfb8      	it	lt
 800b9e2:	18e4      	addlt	r4, r4, r3
 800b9e4:	f000 fa76 	bl	800bed4 <__malloc_lock>
 800b9e8:	4a1e      	ldr	r2, [pc, #120]	; (800ba64 <_free_r+0x94>)
 800b9ea:	6813      	ldr	r3, [r2, #0]
 800b9ec:	4610      	mov	r0, r2
 800b9ee:	b933      	cbnz	r3, 800b9fe <_free_r+0x2e>
 800b9f0:	6063      	str	r3, [r4, #4]
 800b9f2:	6014      	str	r4, [r2, #0]
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9fa:	f000 ba71 	b.w	800bee0 <__malloc_unlock>
 800b9fe:	42a3      	cmp	r3, r4
 800ba00:	d90a      	bls.n	800ba18 <_free_r+0x48>
 800ba02:	6821      	ldr	r1, [r4, #0]
 800ba04:	1862      	adds	r2, r4, r1
 800ba06:	4293      	cmp	r3, r2
 800ba08:	bf01      	itttt	eq
 800ba0a:	681a      	ldreq	r2, [r3, #0]
 800ba0c:	685b      	ldreq	r3, [r3, #4]
 800ba0e:	1852      	addeq	r2, r2, r1
 800ba10:	6022      	streq	r2, [r4, #0]
 800ba12:	6063      	str	r3, [r4, #4]
 800ba14:	6004      	str	r4, [r0, #0]
 800ba16:	e7ed      	b.n	800b9f4 <_free_r+0x24>
 800ba18:	461a      	mov	r2, r3
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	b10b      	cbz	r3, 800ba22 <_free_r+0x52>
 800ba1e:	42a3      	cmp	r3, r4
 800ba20:	d9fa      	bls.n	800ba18 <_free_r+0x48>
 800ba22:	6811      	ldr	r1, [r2, #0]
 800ba24:	1850      	adds	r0, r2, r1
 800ba26:	42a0      	cmp	r0, r4
 800ba28:	d10b      	bne.n	800ba42 <_free_r+0x72>
 800ba2a:	6820      	ldr	r0, [r4, #0]
 800ba2c:	4401      	add	r1, r0
 800ba2e:	1850      	adds	r0, r2, r1
 800ba30:	4283      	cmp	r3, r0
 800ba32:	6011      	str	r1, [r2, #0]
 800ba34:	d1de      	bne.n	800b9f4 <_free_r+0x24>
 800ba36:	6818      	ldr	r0, [r3, #0]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	4401      	add	r1, r0
 800ba3c:	6011      	str	r1, [r2, #0]
 800ba3e:	6053      	str	r3, [r2, #4]
 800ba40:	e7d8      	b.n	800b9f4 <_free_r+0x24>
 800ba42:	d902      	bls.n	800ba4a <_free_r+0x7a>
 800ba44:	230c      	movs	r3, #12
 800ba46:	602b      	str	r3, [r5, #0]
 800ba48:	e7d4      	b.n	800b9f4 <_free_r+0x24>
 800ba4a:	6820      	ldr	r0, [r4, #0]
 800ba4c:	1821      	adds	r1, r4, r0
 800ba4e:	428b      	cmp	r3, r1
 800ba50:	bf01      	itttt	eq
 800ba52:	6819      	ldreq	r1, [r3, #0]
 800ba54:	685b      	ldreq	r3, [r3, #4]
 800ba56:	1809      	addeq	r1, r1, r0
 800ba58:	6021      	streq	r1, [r4, #0]
 800ba5a:	6063      	str	r3, [r4, #4]
 800ba5c:	6054      	str	r4, [r2, #4]
 800ba5e:	e7c9      	b.n	800b9f4 <_free_r+0x24>
 800ba60:	bd38      	pop	{r3, r4, r5, pc}
 800ba62:	bf00      	nop
 800ba64:	20000260 	.word	0x20000260

0800ba68 <_malloc_r>:
 800ba68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6a:	1ccd      	adds	r5, r1, #3
 800ba6c:	f025 0503 	bic.w	r5, r5, #3
 800ba70:	3508      	adds	r5, #8
 800ba72:	2d0c      	cmp	r5, #12
 800ba74:	bf38      	it	cc
 800ba76:	250c      	movcc	r5, #12
 800ba78:	2d00      	cmp	r5, #0
 800ba7a:	4606      	mov	r6, r0
 800ba7c:	db01      	blt.n	800ba82 <_malloc_r+0x1a>
 800ba7e:	42a9      	cmp	r1, r5
 800ba80:	d903      	bls.n	800ba8a <_malloc_r+0x22>
 800ba82:	230c      	movs	r3, #12
 800ba84:	6033      	str	r3, [r6, #0]
 800ba86:	2000      	movs	r0, #0
 800ba88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba8a:	f000 fa23 	bl	800bed4 <__malloc_lock>
 800ba8e:	4921      	ldr	r1, [pc, #132]	; (800bb14 <_malloc_r+0xac>)
 800ba90:	680a      	ldr	r2, [r1, #0]
 800ba92:	4614      	mov	r4, r2
 800ba94:	b99c      	cbnz	r4, 800babe <_malloc_r+0x56>
 800ba96:	4f20      	ldr	r7, [pc, #128]	; (800bb18 <_malloc_r+0xb0>)
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	b923      	cbnz	r3, 800baa6 <_malloc_r+0x3e>
 800ba9c:	4621      	mov	r1, r4
 800ba9e:	4630      	mov	r0, r6
 800baa0:	f000 f99e 	bl	800bde0 <_sbrk_r>
 800baa4:	6038      	str	r0, [r7, #0]
 800baa6:	4629      	mov	r1, r5
 800baa8:	4630      	mov	r0, r6
 800baaa:	f000 f999 	bl	800bde0 <_sbrk_r>
 800baae:	1c43      	adds	r3, r0, #1
 800bab0:	d123      	bne.n	800bafa <_malloc_r+0x92>
 800bab2:	230c      	movs	r3, #12
 800bab4:	4630      	mov	r0, r6
 800bab6:	6033      	str	r3, [r6, #0]
 800bab8:	f000 fa12 	bl	800bee0 <__malloc_unlock>
 800babc:	e7e3      	b.n	800ba86 <_malloc_r+0x1e>
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	1b5b      	subs	r3, r3, r5
 800bac2:	d417      	bmi.n	800baf4 <_malloc_r+0x8c>
 800bac4:	2b0b      	cmp	r3, #11
 800bac6:	d903      	bls.n	800bad0 <_malloc_r+0x68>
 800bac8:	6023      	str	r3, [r4, #0]
 800baca:	441c      	add	r4, r3
 800bacc:	6025      	str	r5, [r4, #0]
 800bace:	e004      	b.n	800bada <_malloc_r+0x72>
 800bad0:	6863      	ldr	r3, [r4, #4]
 800bad2:	42a2      	cmp	r2, r4
 800bad4:	bf0c      	ite	eq
 800bad6:	600b      	streq	r3, [r1, #0]
 800bad8:	6053      	strne	r3, [r2, #4]
 800bada:	4630      	mov	r0, r6
 800badc:	f000 fa00 	bl	800bee0 <__malloc_unlock>
 800bae0:	f104 000b 	add.w	r0, r4, #11
 800bae4:	1d23      	adds	r3, r4, #4
 800bae6:	f020 0007 	bic.w	r0, r0, #7
 800baea:	1ac2      	subs	r2, r0, r3
 800baec:	d0cc      	beq.n	800ba88 <_malloc_r+0x20>
 800baee:	1a1b      	subs	r3, r3, r0
 800baf0:	50a3      	str	r3, [r4, r2]
 800baf2:	e7c9      	b.n	800ba88 <_malloc_r+0x20>
 800baf4:	4622      	mov	r2, r4
 800baf6:	6864      	ldr	r4, [r4, #4]
 800baf8:	e7cc      	b.n	800ba94 <_malloc_r+0x2c>
 800bafa:	1cc4      	adds	r4, r0, #3
 800bafc:	f024 0403 	bic.w	r4, r4, #3
 800bb00:	42a0      	cmp	r0, r4
 800bb02:	d0e3      	beq.n	800bacc <_malloc_r+0x64>
 800bb04:	1a21      	subs	r1, r4, r0
 800bb06:	4630      	mov	r0, r6
 800bb08:	f000 f96a 	bl	800bde0 <_sbrk_r>
 800bb0c:	3001      	adds	r0, #1
 800bb0e:	d1dd      	bne.n	800bacc <_malloc_r+0x64>
 800bb10:	e7cf      	b.n	800bab2 <_malloc_r+0x4a>
 800bb12:	bf00      	nop
 800bb14:	20000260 	.word	0x20000260
 800bb18:	20000264 	.word	0x20000264

0800bb1c <__ssputs_r>:
 800bb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb20:	688e      	ldr	r6, [r1, #8]
 800bb22:	4682      	mov	sl, r0
 800bb24:	429e      	cmp	r6, r3
 800bb26:	460c      	mov	r4, r1
 800bb28:	4690      	mov	r8, r2
 800bb2a:	461f      	mov	r7, r3
 800bb2c:	d838      	bhi.n	800bba0 <__ssputs_r+0x84>
 800bb2e:	898a      	ldrh	r2, [r1, #12]
 800bb30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb34:	d032      	beq.n	800bb9c <__ssputs_r+0x80>
 800bb36:	6825      	ldr	r5, [r4, #0]
 800bb38:	6909      	ldr	r1, [r1, #16]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	eba5 0901 	sub.w	r9, r5, r1
 800bb40:	6965      	ldr	r5, [r4, #20]
 800bb42:	444b      	add	r3, r9
 800bb44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb4c:	106d      	asrs	r5, r5, #1
 800bb4e:	429d      	cmp	r5, r3
 800bb50:	bf38      	it	cc
 800bb52:	461d      	movcc	r5, r3
 800bb54:	0553      	lsls	r3, r2, #21
 800bb56:	d531      	bpl.n	800bbbc <__ssputs_r+0xa0>
 800bb58:	4629      	mov	r1, r5
 800bb5a:	f7ff ff85 	bl	800ba68 <_malloc_r>
 800bb5e:	4606      	mov	r6, r0
 800bb60:	b950      	cbnz	r0, 800bb78 <__ssputs_r+0x5c>
 800bb62:	230c      	movs	r3, #12
 800bb64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb68:	f8ca 3000 	str.w	r3, [sl]
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb72:	81a3      	strh	r3, [r4, #12]
 800bb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb78:	464a      	mov	r2, r9
 800bb7a:	6921      	ldr	r1, [r4, #16]
 800bb7c:	f7ff fa54 	bl	800b028 <memcpy>
 800bb80:	89a3      	ldrh	r3, [r4, #12]
 800bb82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb8a:	81a3      	strh	r3, [r4, #12]
 800bb8c:	6126      	str	r6, [r4, #16]
 800bb8e:	444e      	add	r6, r9
 800bb90:	6026      	str	r6, [r4, #0]
 800bb92:	463e      	mov	r6, r7
 800bb94:	6165      	str	r5, [r4, #20]
 800bb96:	eba5 0509 	sub.w	r5, r5, r9
 800bb9a:	60a5      	str	r5, [r4, #8]
 800bb9c:	42be      	cmp	r6, r7
 800bb9e:	d900      	bls.n	800bba2 <__ssputs_r+0x86>
 800bba0:	463e      	mov	r6, r7
 800bba2:	4632      	mov	r2, r6
 800bba4:	4641      	mov	r1, r8
 800bba6:	6820      	ldr	r0, [r4, #0]
 800bba8:	f000 f97a 	bl	800bea0 <memmove>
 800bbac:	68a3      	ldr	r3, [r4, #8]
 800bbae:	6822      	ldr	r2, [r4, #0]
 800bbb0:	1b9b      	subs	r3, r3, r6
 800bbb2:	4432      	add	r2, r6
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	60a3      	str	r3, [r4, #8]
 800bbb8:	6022      	str	r2, [r4, #0]
 800bbba:	e7db      	b.n	800bb74 <__ssputs_r+0x58>
 800bbbc:	462a      	mov	r2, r5
 800bbbe:	f000 f995 	bl	800beec <_realloc_r>
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d1e1      	bne.n	800bb8c <__ssputs_r+0x70>
 800bbc8:	4650      	mov	r0, sl
 800bbca:	6921      	ldr	r1, [r4, #16]
 800bbcc:	f7ff ff00 	bl	800b9d0 <_free_r>
 800bbd0:	e7c7      	b.n	800bb62 <__ssputs_r+0x46>
	...

0800bbd4 <_svfiprintf_r>:
 800bbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd8:	4698      	mov	r8, r3
 800bbda:	898b      	ldrh	r3, [r1, #12]
 800bbdc:	4607      	mov	r7, r0
 800bbde:	061b      	lsls	r3, r3, #24
 800bbe0:	460d      	mov	r5, r1
 800bbe2:	4614      	mov	r4, r2
 800bbe4:	b09d      	sub	sp, #116	; 0x74
 800bbe6:	d50e      	bpl.n	800bc06 <_svfiprintf_r+0x32>
 800bbe8:	690b      	ldr	r3, [r1, #16]
 800bbea:	b963      	cbnz	r3, 800bc06 <_svfiprintf_r+0x32>
 800bbec:	2140      	movs	r1, #64	; 0x40
 800bbee:	f7ff ff3b 	bl	800ba68 <_malloc_r>
 800bbf2:	6028      	str	r0, [r5, #0]
 800bbf4:	6128      	str	r0, [r5, #16]
 800bbf6:	b920      	cbnz	r0, 800bc02 <_svfiprintf_r+0x2e>
 800bbf8:	230c      	movs	r3, #12
 800bbfa:	603b      	str	r3, [r7, #0]
 800bbfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc00:	e0d1      	b.n	800bda6 <_svfiprintf_r+0x1d2>
 800bc02:	2340      	movs	r3, #64	; 0x40
 800bc04:	616b      	str	r3, [r5, #20]
 800bc06:	2300      	movs	r3, #0
 800bc08:	9309      	str	r3, [sp, #36]	; 0x24
 800bc0a:	2320      	movs	r3, #32
 800bc0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc10:	2330      	movs	r3, #48	; 0x30
 800bc12:	f04f 0901 	mov.w	r9, #1
 800bc16:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bdc0 <_svfiprintf_r+0x1ec>
 800bc1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc22:	4623      	mov	r3, r4
 800bc24:	469a      	mov	sl, r3
 800bc26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc2a:	b10a      	cbz	r2, 800bc30 <_svfiprintf_r+0x5c>
 800bc2c:	2a25      	cmp	r2, #37	; 0x25
 800bc2e:	d1f9      	bne.n	800bc24 <_svfiprintf_r+0x50>
 800bc30:	ebba 0b04 	subs.w	fp, sl, r4
 800bc34:	d00b      	beq.n	800bc4e <_svfiprintf_r+0x7a>
 800bc36:	465b      	mov	r3, fp
 800bc38:	4622      	mov	r2, r4
 800bc3a:	4629      	mov	r1, r5
 800bc3c:	4638      	mov	r0, r7
 800bc3e:	f7ff ff6d 	bl	800bb1c <__ssputs_r>
 800bc42:	3001      	adds	r0, #1
 800bc44:	f000 80aa 	beq.w	800bd9c <_svfiprintf_r+0x1c8>
 800bc48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc4a:	445a      	add	r2, fp
 800bc4c:	9209      	str	r2, [sp, #36]	; 0x24
 800bc4e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f000 80a2 	beq.w	800bd9c <_svfiprintf_r+0x1c8>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc62:	f10a 0a01 	add.w	sl, sl, #1
 800bc66:	9304      	str	r3, [sp, #16]
 800bc68:	9307      	str	r3, [sp, #28]
 800bc6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc6e:	931a      	str	r3, [sp, #104]	; 0x68
 800bc70:	4654      	mov	r4, sl
 800bc72:	2205      	movs	r2, #5
 800bc74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc78:	4851      	ldr	r0, [pc, #324]	; (800bdc0 <_svfiprintf_r+0x1ec>)
 800bc7a:	f7ff f9c7 	bl	800b00c <memchr>
 800bc7e:	9a04      	ldr	r2, [sp, #16]
 800bc80:	b9d8      	cbnz	r0, 800bcba <_svfiprintf_r+0xe6>
 800bc82:	06d0      	lsls	r0, r2, #27
 800bc84:	bf44      	itt	mi
 800bc86:	2320      	movmi	r3, #32
 800bc88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc8c:	0711      	lsls	r1, r2, #28
 800bc8e:	bf44      	itt	mi
 800bc90:	232b      	movmi	r3, #43	; 0x2b
 800bc92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc96:	f89a 3000 	ldrb.w	r3, [sl]
 800bc9a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc9c:	d015      	beq.n	800bcca <_svfiprintf_r+0xf6>
 800bc9e:	4654      	mov	r4, sl
 800bca0:	2000      	movs	r0, #0
 800bca2:	f04f 0c0a 	mov.w	ip, #10
 800bca6:	9a07      	ldr	r2, [sp, #28]
 800bca8:	4621      	mov	r1, r4
 800bcaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcae:	3b30      	subs	r3, #48	; 0x30
 800bcb0:	2b09      	cmp	r3, #9
 800bcb2:	d94e      	bls.n	800bd52 <_svfiprintf_r+0x17e>
 800bcb4:	b1b0      	cbz	r0, 800bce4 <_svfiprintf_r+0x110>
 800bcb6:	9207      	str	r2, [sp, #28]
 800bcb8:	e014      	b.n	800bce4 <_svfiprintf_r+0x110>
 800bcba:	eba0 0308 	sub.w	r3, r0, r8
 800bcbe:	fa09 f303 	lsl.w	r3, r9, r3
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	46a2      	mov	sl, r4
 800bcc6:	9304      	str	r3, [sp, #16]
 800bcc8:	e7d2      	b.n	800bc70 <_svfiprintf_r+0x9c>
 800bcca:	9b03      	ldr	r3, [sp, #12]
 800bccc:	1d19      	adds	r1, r3, #4
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	9103      	str	r1, [sp, #12]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	bfbb      	ittet	lt
 800bcd6:	425b      	neglt	r3, r3
 800bcd8:	f042 0202 	orrlt.w	r2, r2, #2
 800bcdc:	9307      	strge	r3, [sp, #28]
 800bcde:	9307      	strlt	r3, [sp, #28]
 800bce0:	bfb8      	it	lt
 800bce2:	9204      	strlt	r2, [sp, #16]
 800bce4:	7823      	ldrb	r3, [r4, #0]
 800bce6:	2b2e      	cmp	r3, #46	; 0x2e
 800bce8:	d10c      	bne.n	800bd04 <_svfiprintf_r+0x130>
 800bcea:	7863      	ldrb	r3, [r4, #1]
 800bcec:	2b2a      	cmp	r3, #42	; 0x2a
 800bcee:	d135      	bne.n	800bd5c <_svfiprintf_r+0x188>
 800bcf0:	9b03      	ldr	r3, [sp, #12]
 800bcf2:	3402      	adds	r4, #2
 800bcf4:	1d1a      	adds	r2, r3, #4
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	9203      	str	r2, [sp, #12]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	bfb8      	it	lt
 800bcfe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bd02:	9305      	str	r3, [sp, #20]
 800bd04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bdd0 <_svfiprintf_r+0x1fc>
 800bd08:	2203      	movs	r2, #3
 800bd0a:	4650      	mov	r0, sl
 800bd0c:	7821      	ldrb	r1, [r4, #0]
 800bd0e:	f7ff f97d 	bl	800b00c <memchr>
 800bd12:	b140      	cbz	r0, 800bd26 <_svfiprintf_r+0x152>
 800bd14:	2340      	movs	r3, #64	; 0x40
 800bd16:	eba0 000a 	sub.w	r0, r0, sl
 800bd1a:	fa03 f000 	lsl.w	r0, r3, r0
 800bd1e:	9b04      	ldr	r3, [sp, #16]
 800bd20:	3401      	adds	r4, #1
 800bd22:	4303      	orrs	r3, r0
 800bd24:	9304      	str	r3, [sp, #16]
 800bd26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd2a:	2206      	movs	r2, #6
 800bd2c:	4825      	ldr	r0, [pc, #148]	; (800bdc4 <_svfiprintf_r+0x1f0>)
 800bd2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd32:	f7ff f96b 	bl	800b00c <memchr>
 800bd36:	2800      	cmp	r0, #0
 800bd38:	d038      	beq.n	800bdac <_svfiprintf_r+0x1d8>
 800bd3a:	4b23      	ldr	r3, [pc, #140]	; (800bdc8 <_svfiprintf_r+0x1f4>)
 800bd3c:	bb1b      	cbnz	r3, 800bd86 <_svfiprintf_r+0x1b2>
 800bd3e:	9b03      	ldr	r3, [sp, #12]
 800bd40:	3307      	adds	r3, #7
 800bd42:	f023 0307 	bic.w	r3, r3, #7
 800bd46:	3308      	adds	r3, #8
 800bd48:	9303      	str	r3, [sp, #12]
 800bd4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd4c:	4433      	add	r3, r6
 800bd4e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd50:	e767      	b.n	800bc22 <_svfiprintf_r+0x4e>
 800bd52:	460c      	mov	r4, r1
 800bd54:	2001      	movs	r0, #1
 800bd56:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd5a:	e7a5      	b.n	800bca8 <_svfiprintf_r+0xd4>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	f04f 0c0a 	mov.w	ip, #10
 800bd62:	4619      	mov	r1, r3
 800bd64:	3401      	adds	r4, #1
 800bd66:	9305      	str	r3, [sp, #20]
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd6e:	3a30      	subs	r2, #48	; 0x30
 800bd70:	2a09      	cmp	r2, #9
 800bd72:	d903      	bls.n	800bd7c <_svfiprintf_r+0x1a8>
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d0c5      	beq.n	800bd04 <_svfiprintf_r+0x130>
 800bd78:	9105      	str	r1, [sp, #20]
 800bd7a:	e7c3      	b.n	800bd04 <_svfiprintf_r+0x130>
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	2301      	movs	r3, #1
 800bd80:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd84:	e7f0      	b.n	800bd68 <_svfiprintf_r+0x194>
 800bd86:	ab03      	add	r3, sp, #12
 800bd88:	9300      	str	r3, [sp, #0]
 800bd8a:	462a      	mov	r2, r5
 800bd8c:	4638      	mov	r0, r7
 800bd8e:	4b0f      	ldr	r3, [pc, #60]	; (800bdcc <_svfiprintf_r+0x1f8>)
 800bd90:	a904      	add	r1, sp, #16
 800bd92:	f7fc fa9f 	bl	80082d4 <_printf_float>
 800bd96:	1c42      	adds	r2, r0, #1
 800bd98:	4606      	mov	r6, r0
 800bd9a:	d1d6      	bne.n	800bd4a <_svfiprintf_r+0x176>
 800bd9c:	89ab      	ldrh	r3, [r5, #12]
 800bd9e:	065b      	lsls	r3, r3, #25
 800bda0:	f53f af2c 	bmi.w	800bbfc <_svfiprintf_r+0x28>
 800bda4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bda6:	b01d      	add	sp, #116	; 0x74
 800bda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdac:	ab03      	add	r3, sp, #12
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	462a      	mov	r2, r5
 800bdb2:	4638      	mov	r0, r7
 800bdb4:	4b05      	ldr	r3, [pc, #20]	; (800bdcc <_svfiprintf_r+0x1f8>)
 800bdb6:	a904      	add	r1, sp, #16
 800bdb8:	f7fc fd28 	bl	800880c <_printf_i>
 800bdbc:	e7eb      	b.n	800bd96 <_svfiprintf_r+0x1c2>
 800bdbe:	bf00      	nop
 800bdc0:	0800e874 	.word	0x0800e874
 800bdc4:	0800e87e 	.word	0x0800e87e
 800bdc8:	080082d5 	.word	0x080082d5
 800bdcc:	0800bb1d 	.word	0x0800bb1d
 800bdd0:	0800e87a 	.word	0x0800e87a

0800bdd4 <nan>:
 800bdd4:	2000      	movs	r0, #0
 800bdd6:	4901      	ldr	r1, [pc, #4]	; (800bddc <nan+0x8>)
 800bdd8:	4770      	bx	lr
 800bdda:	bf00      	nop
 800bddc:	7ff80000 	.word	0x7ff80000

0800bde0 <_sbrk_r>:
 800bde0:	b538      	push	{r3, r4, r5, lr}
 800bde2:	2300      	movs	r3, #0
 800bde4:	4d05      	ldr	r5, [pc, #20]	; (800bdfc <_sbrk_r+0x1c>)
 800bde6:	4604      	mov	r4, r0
 800bde8:	4608      	mov	r0, r1
 800bdea:	602b      	str	r3, [r5, #0]
 800bdec:	f7f8 fa3a 	bl	8004264 <_sbrk>
 800bdf0:	1c43      	adds	r3, r0, #1
 800bdf2:	d102      	bne.n	800bdfa <_sbrk_r+0x1a>
 800bdf4:	682b      	ldr	r3, [r5, #0]
 800bdf6:	b103      	cbz	r3, 800bdfa <_sbrk_r+0x1a>
 800bdf8:	6023      	str	r3, [r4, #0]
 800bdfa:	bd38      	pop	{r3, r4, r5, pc}
 800bdfc:	2000068c 	.word	0x2000068c

0800be00 <strncmp>:
 800be00:	b510      	push	{r4, lr}
 800be02:	b16a      	cbz	r2, 800be20 <strncmp+0x20>
 800be04:	3901      	subs	r1, #1
 800be06:	1884      	adds	r4, r0, r2
 800be08:	f810 3b01 	ldrb.w	r3, [r0], #1
 800be0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800be10:	4293      	cmp	r3, r2
 800be12:	d103      	bne.n	800be1c <strncmp+0x1c>
 800be14:	42a0      	cmp	r0, r4
 800be16:	d001      	beq.n	800be1c <strncmp+0x1c>
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1f5      	bne.n	800be08 <strncmp+0x8>
 800be1c:	1a98      	subs	r0, r3, r2
 800be1e:	bd10      	pop	{r4, pc}
 800be20:	4610      	mov	r0, r2
 800be22:	e7fc      	b.n	800be1e <strncmp+0x1e>

0800be24 <__ascii_wctomb>:
 800be24:	4603      	mov	r3, r0
 800be26:	4608      	mov	r0, r1
 800be28:	b141      	cbz	r1, 800be3c <__ascii_wctomb+0x18>
 800be2a:	2aff      	cmp	r2, #255	; 0xff
 800be2c:	d904      	bls.n	800be38 <__ascii_wctomb+0x14>
 800be2e:	228a      	movs	r2, #138	; 0x8a
 800be30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be34:	601a      	str	r2, [r3, #0]
 800be36:	4770      	bx	lr
 800be38:	2001      	movs	r0, #1
 800be3a:	700a      	strb	r2, [r1, #0]
 800be3c:	4770      	bx	lr
	...

0800be40 <__assert_func>:
 800be40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be42:	4614      	mov	r4, r2
 800be44:	461a      	mov	r2, r3
 800be46:	4b09      	ldr	r3, [pc, #36]	; (800be6c <__assert_func+0x2c>)
 800be48:	4605      	mov	r5, r0
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	68d8      	ldr	r0, [r3, #12]
 800be4e:	b14c      	cbz	r4, 800be64 <__assert_func+0x24>
 800be50:	4b07      	ldr	r3, [pc, #28]	; (800be70 <__assert_func+0x30>)
 800be52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be56:	9100      	str	r1, [sp, #0]
 800be58:	462b      	mov	r3, r5
 800be5a:	4906      	ldr	r1, [pc, #24]	; (800be74 <__assert_func+0x34>)
 800be5c:	f000 f80e 	bl	800be7c <fiprintf>
 800be60:	f000 fa82 	bl	800c368 <abort>
 800be64:	4b04      	ldr	r3, [pc, #16]	; (800be78 <__assert_func+0x38>)
 800be66:	461c      	mov	r4, r3
 800be68:	e7f3      	b.n	800be52 <__assert_func+0x12>
 800be6a:	bf00      	nop
 800be6c:	2000002c 	.word	0x2000002c
 800be70:	0800e885 	.word	0x0800e885
 800be74:	0800e892 	.word	0x0800e892
 800be78:	0800e8c0 	.word	0x0800e8c0

0800be7c <fiprintf>:
 800be7c:	b40e      	push	{r1, r2, r3}
 800be7e:	b503      	push	{r0, r1, lr}
 800be80:	4601      	mov	r1, r0
 800be82:	ab03      	add	r3, sp, #12
 800be84:	4805      	ldr	r0, [pc, #20]	; (800be9c <fiprintf+0x20>)
 800be86:	f853 2b04 	ldr.w	r2, [r3], #4
 800be8a:	6800      	ldr	r0, [r0, #0]
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	f000 f87b 	bl	800bf88 <_vfiprintf_r>
 800be92:	b002      	add	sp, #8
 800be94:	f85d eb04 	ldr.w	lr, [sp], #4
 800be98:	b003      	add	sp, #12
 800be9a:	4770      	bx	lr
 800be9c:	2000002c 	.word	0x2000002c

0800bea0 <memmove>:
 800bea0:	4288      	cmp	r0, r1
 800bea2:	b510      	push	{r4, lr}
 800bea4:	eb01 0402 	add.w	r4, r1, r2
 800bea8:	d902      	bls.n	800beb0 <memmove+0x10>
 800beaa:	4284      	cmp	r4, r0
 800beac:	4623      	mov	r3, r4
 800beae:	d807      	bhi.n	800bec0 <memmove+0x20>
 800beb0:	1e43      	subs	r3, r0, #1
 800beb2:	42a1      	cmp	r1, r4
 800beb4:	d008      	beq.n	800bec8 <memmove+0x28>
 800beb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bebe:	e7f8      	b.n	800beb2 <memmove+0x12>
 800bec0:	4601      	mov	r1, r0
 800bec2:	4402      	add	r2, r0
 800bec4:	428a      	cmp	r2, r1
 800bec6:	d100      	bne.n	800beca <memmove+0x2a>
 800bec8:	bd10      	pop	{r4, pc}
 800beca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bece:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bed2:	e7f7      	b.n	800bec4 <memmove+0x24>

0800bed4 <__malloc_lock>:
 800bed4:	4801      	ldr	r0, [pc, #4]	; (800bedc <__malloc_lock+0x8>)
 800bed6:	f000 bc07 	b.w	800c6e8 <__retarget_lock_acquire_recursive>
 800beda:	bf00      	nop
 800bedc:	20000694 	.word	0x20000694

0800bee0 <__malloc_unlock>:
 800bee0:	4801      	ldr	r0, [pc, #4]	; (800bee8 <__malloc_unlock+0x8>)
 800bee2:	f000 bc02 	b.w	800c6ea <__retarget_lock_release_recursive>
 800bee6:	bf00      	nop
 800bee8:	20000694 	.word	0x20000694

0800beec <_realloc_r>:
 800beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beee:	4607      	mov	r7, r0
 800bef0:	4614      	mov	r4, r2
 800bef2:	460e      	mov	r6, r1
 800bef4:	b921      	cbnz	r1, 800bf00 <_realloc_r+0x14>
 800bef6:	4611      	mov	r1, r2
 800bef8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800befc:	f7ff bdb4 	b.w	800ba68 <_malloc_r>
 800bf00:	b922      	cbnz	r2, 800bf0c <_realloc_r+0x20>
 800bf02:	f7ff fd65 	bl	800b9d0 <_free_r>
 800bf06:	4625      	mov	r5, r4
 800bf08:	4628      	mov	r0, r5
 800bf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf0c:	f000 fc52 	bl	800c7b4 <_malloc_usable_size_r>
 800bf10:	42a0      	cmp	r0, r4
 800bf12:	d20f      	bcs.n	800bf34 <_realloc_r+0x48>
 800bf14:	4621      	mov	r1, r4
 800bf16:	4638      	mov	r0, r7
 800bf18:	f7ff fda6 	bl	800ba68 <_malloc_r>
 800bf1c:	4605      	mov	r5, r0
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d0f2      	beq.n	800bf08 <_realloc_r+0x1c>
 800bf22:	4631      	mov	r1, r6
 800bf24:	4622      	mov	r2, r4
 800bf26:	f7ff f87f 	bl	800b028 <memcpy>
 800bf2a:	4631      	mov	r1, r6
 800bf2c:	4638      	mov	r0, r7
 800bf2e:	f7ff fd4f 	bl	800b9d0 <_free_r>
 800bf32:	e7e9      	b.n	800bf08 <_realloc_r+0x1c>
 800bf34:	4635      	mov	r5, r6
 800bf36:	e7e7      	b.n	800bf08 <_realloc_r+0x1c>

0800bf38 <__sfputc_r>:
 800bf38:	6893      	ldr	r3, [r2, #8]
 800bf3a:	b410      	push	{r4}
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	6093      	str	r3, [r2, #8]
 800bf42:	da07      	bge.n	800bf54 <__sfputc_r+0x1c>
 800bf44:	6994      	ldr	r4, [r2, #24]
 800bf46:	42a3      	cmp	r3, r4
 800bf48:	db01      	blt.n	800bf4e <__sfputc_r+0x16>
 800bf4a:	290a      	cmp	r1, #10
 800bf4c:	d102      	bne.n	800bf54 <__sfputc_r+0x1c>
 800bf4e:	bc10      	pop	{r4}
 800bf50:	f000 b94a 	b.w	800c1e8 <__swbuf_r>
 800bf54:	6813      	ldr	r3, [r2, #0]
 800bf56:	1c58      	adds	r0, r3, #1
 800bf58:	6010      	str	r0, [r2, #0]
 800bf5a:	7019      	strb	r1, [r3, #0]
 800bf5c:	4608      	mov	r0, r1
 800bf5e:	bc10      	pop	{r4}
 800bf60:	4770      	bx	lr

0800bf62 <__sfputs_r>:
 800bf62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf64:	4606      	mov	r6, r0
 800bf66:	460f      	mov	r7, r1
 800bf68:	4614      	mov	r4, r2
 800bf6a:	18d5      	adds	r5, r2, r3
 800bf6c:	42ac      	cmp	r4, r5
 800bf6e:	d101      	bne.n	800bf74 <__sfputs_r+0x12>
 800bf70:	2000      	movs	r0, #0
 800bf72:	e007      	b.n	800bf84 <__sfputs_r+0x22>
 800bf74:	463a      	mov	r2, r7
 800bf76:	4630      	mov	r0, r6
 800bf78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf7c:	f7ff ffdc 	bl	800bf38 <__sfputc_r>
 800bf80:	1c43      	adds	r3, r0, #1
 800bf82:	d1f3      	bne.n	800bf6c <__sfputs_r+0xa>
 800bf84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf88 <_vfiprintf_r>:
 800bf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf8c:	460d      	mov	r5, r1
 800bf8e:	4614      	mov	r4, r2
 800bf90:	4698      	mov	r8, r3
 800bf92:	4606      	mov	r6, r0
 800bf94:	b09d      	sub	sp, #116	; 0x74
 800bf96:	b118      	cbz	r0, 800bfa0 <_vfiprintf_r+0x18>
 800bf98:	6983      	ldr	r3, [r0, #24]
 800bf9a:	b90b      	cbnz	r3, 800bfa0 <_vfiprintf_r+0x18>
 800bf9c:	f000 fb06 	bl	800c5ac <__sinit>
 800bfa0:	4b89      	ldr	r3, [pc, #548]	; (800c1c8 <_vfiprintf_r+0x240>)
 800bfa2:	429d      	cmp	r5, r3
 800bfa4:	d11b      	bne.n	800bfde <_vfiprintf_r+0x56>
 800bfa6:	6875      	ldr	r5, [r6, #4]
 800bfa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfaa:	07d9      	lsls	r1, r3, #31
 800bfac:	d405      	bmi.n	800bfba <_vfiprintf_r+0x32>
 800bfae:	89ab      	ldrh	r3, [r5, #12]
 800bfb0:	059a      	lsls	r2, r3, #22
 800bfb2:	d402      	bmi.n	800bfba <_vfiprintf_r+0x32>
 800bfb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfb6:	f000 fb97 	bl	800c6e8 <__retarget_lock_acquire_recursive>
 800bfba:	89ab      	ldrh	r3, [r5, #12]
 800bfbc:	071b      	lsls	r3, r3, #28
 800bfbe:	d501      	bpl.n	800bfc4 <_vfiprintf_r+0x3c>
 800bfc0:	692b      	ldr	r3, [r5, #16]
 800bfc2:	b9eb      	cbnz	r3, 800c000 <_vfiprintf_r+0x78>
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	f000 f960 	bl	800c28c <__swsetup_r>
 800bfcc:	b1c0      	cbz	r0, 800c000 <_vfiprintf_r+0x78>
 800bfce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfd0:	07dc      	lsls	r4, r3, #31
 800bfd2:	d50e      	bpl.n	800bff2 <_vfiprintf_r+0x6a>
 800bfd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfd8:	b01d      	add	sp, #116	; 0x74
 800bfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfde:	4b7b      	ldr	r3, [pc, #492]	; (800c1cc <_vfiprintf_r+0x244>)
 800bfe0:	429d      	cmp	r5, r3
 800bfe2:	d101      	bne.n	800bfe8 <_vfiprintf_r+0x60>
 800bfe4:	68b5      	ldr	r5, [r6, #8]
 800bfe6:	e7df      	b.n	800bfa8 <_vfiprintf_r+0x20>
 800bfe8:	4b79      	ldr	r3, [pc, #484]	; (800c1d0 <_vfiprintf_r+0x248>)
 800bfea:	429d      	cmp	r5, r3
 800bfec:	bf08      	it	eq
 800bfee:	68f5      	ldreq	r5, [r6, #12]
 800bff0:	e7da      	b.n	800bfa8 <_vfiprintf_r+0x20>
 800bff2:	89ab      	ldrh	r3, [r5, #12]
 800bff4:	0598      	lsls	r0, r3, #22
 800bff6:	d4ed      	bmi.n	800bfd4 <_vfiprintf_r+0x4c>
 800bff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bffa:	f000 fb76 	bl	800c6ea <__retarget_lock_release_recursive>
 800bffe:	e7e9      	b.n	800bfd4 <_vfiprintf_r+0x4c>
 800c000:	2300      	movs	r3, #0
 800c002:	9309      	str	r3, [sp, #36]	; 0x24
 800c004:	2320      	movs	r3, #32
 800c006:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c00a:	2330      	movs	r3, #48	; 0x30
 800c00c:	f04f 0901 	mov.w	r9, #1
 800c010:	f8cd 800c 	str.w	r8, [sp, #12]
 800c014:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c1d4 <_vfiprintf_r+0x24c>
 800c018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c01c:	4623      	mov	r3, r4
 800c01e:	469a      	mov	sl, r3
 800c020:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c024:	b10a      	cbz	r2, 800c02a <_vfiprintf_r+0xa2>
 800c026:	2a25      	cmp	r2, #37	; 0x25
 800c028:	d1f9      	bne.n	800c01e <_vfiprintf_r+0x96>
 800c02a:	ebba 0b04 	subs.w	fp, sl, r4
 800c02e:	d00b      	beq.n	800c048 <_vfiprintf_r+0xc0>
 800c030:	465b      	mov	r3, fp
 800c032:	4622      	mov	r2, r4
 800c034:	4629      	mov	r1, r5
 800c036:	4630      	mov	r0, r6
 800c038:	f7ff ff93 	bl	800bf62 <__sfputs_r>
 800c03c:	3001      	adds	r0, #1
 800c03e:	f000 80aa 	beq.w	800c196 <_vfiprintf_r+0x20e>
 800c042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c044:	445a      	add	r2, fp
 800c046:	9209      	str	r2, [sp, #36]	; 0x24
 800c048:	f89a 3000 	ldrb.w	r3, [sl]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f000 80a2 	beq.w	800c196 <_vfiprintf_r+0x20e>
 800c052:	2300      	movs	r3, #0
 800c054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c05c:	f10a 0a01 	add.w	sl, sl, #1
 800c060:	9304      	str	r3, [sp, #16]
 800c062:	9307      	str	r3, [sp, #28]
 800c064:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c068:	931a      	str	r3, [sp, #104]	; 0x68
 800c06a:	4654      	mov	r4, sl
 800c06c:	2205      	movs	r2, #5
 800c06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c072:	4858      	ldr	r0, [pc, #352]	; (800c1d4 <_vfiprintf_r+0x24c>)
 800c074:	f7fe ffca 	bl	800b00c <memchr>
 800c078:	9a04      	ldr	r2, [sp, #16]
 800c07a:	b9d8      	cbnz	r0, 800c0b4 <_vfiprintf_r+0x12c>
 800c07c:	06d1      	lsls	r1, r2, #27
 800c07e:	bf44      	itt	mi
 800c080:	2320      	movmi	r3, #32
 800c082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c086:	0713      	lsls	r3, r2, #28
 800c088:	bf44      	itt	mi
 800c08a:	232b      	movmi	r3, #43	; 0x2b
 800c08c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c090:	f89a 3000 	ldrb.w	r3, [sl]
 800c094:	2b2a      	cmp	r3, #42	; 0x2a
 800c096:	d015      	beq.n	800c0c4 <_vfiprintf_r+0x13c>
 800c098:	4654      	mov	r4, sl
 800c09a:	2000      	movs	r0, #0
 800c09c:	f04f 0c0a 	mov.w	ip, #10
 800c0a0:	9a07      	ldr	r2, [sp, #28]
 800c0a2:	4621      	mov	r1, r4
 800c0a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0a8:	3b30      	subs	r3, #48	; 0x30
 800c0aa:	2b09      	cmp	r3, #9
 800c0ac:	d94e      	bls.n	800c14c <_vfiprintf_r+0x1c4>
 800c0ae:	b1b0      	cbz	r0, 800c0de <_vfiprintf_r+0x156>
 800c0b0:	9207      	str	r2, [sp, #28]
 800c0b2:	e014      	b.n	800c0de <_vfiprintf_r+0x156>
 800c0b4:	eba0 0308 	sub.w	r3, r0, r8
 800c0b8:	fa09 f303 	lsl.w	r3, r9, r3
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	46a2      	mov	sl, r4
 800c0c0:	9304      	str	r3, [sp, #16]
 800c0c2:	e7d2      	b.n	800c06a <_vfiprintf_r+0xe2>
 800c0c4:	9b03      	ldr	r3, [sp, #12]
 800c0c6:	1d19      	adds	r1, r3, #4
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	9103      	str	r1, [sp, #12]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	bfbb      	ittet	lt
 800c0d0:	425b      	neglt	r3, r3
 800c0d2:	f042 0202 	orrlt.w	r2, r2, #2
 800c0d6:	9307      	strge	r3, [sp, #28]
 800c0d8:	9307      	strlt	r3, [sp, #28]
 800c0da:	bfb8      	it	lt
 800c0dc:	9204      	strlt	r2, [sp, #16]
 800c0de:	7823      	ldrb	r3, [r4, #0]
 800c0e0:	2b2e      	cmp	r3, #46	; 0x2e
 800c0e2:	d10c      	bne.n	800c0fe <_vfiprintf_r+0x176>
 800c0e4:	7863      	ldrb	r3, [r4, #1]
 800c0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c0e8:	d135      	bne.n	800c156 <_vfiprintf_r+0x1ce>
 800c0ea:	9b03      	ldr	r3, [sp, #12]
 800c0ec:	3402      	adds	r4, #2
 800c0ee:	1d1a      	adds	r2, r3, #4
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	9203      	str	r2, [sp, #12]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	bfb8      	it	lt
 800c0f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c0fc:	9305      	str	r3, [sp, #20]
 800c0fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c1e4 <_vfiprintf_r+0x25c>
 800c102:	2203      	movs	r2, #3
 800c104:	4650      	mov	r0, sl
 800c106:	7821      	ldrb	r1, [r4, #0]
 800c108:	f7fe ff80 	bl	800b00c <memchr>
 800c10c:	b140      	cbz	r0, 800c120 <_vfiprintf_r+0x198>
 800c10e:	2340      	movs	r3, #64	; 0x40
 800c110:	eba0 000a 	sub.w	r0, r0, sl
 800c114:	fa03 f000 	lsl.w	r0, r3, r0
 800c118:	9b04      	ldr	r3, [sp, #16]
 800c11a:	3401      	adds	r4, #1
 800c11c:	4303      	orrs	r3, r0
 800c11e:	9304      	str	r3, [sp, #16]
 800c120:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c124:	2206      	movs	r2, #6
 800c126:	482c      	ldr	r0, [pc, #176]	; (800c1d8 <_vfiprintf_r+0x250>)
 800c128:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c12c:	f7fe ff6e 	bl	800b00c <memchr>
 800c130:	2800      	cmp	r0, #0
 800c132:	d03f      	beq.n	800c1b4 <_vfiprintf_r+0x22c>
 800c134:	4b29      	ldr	r3, [pc, #164]	; (800c1dc <_vfiprintf_r+0x254>)
 800c136:	bb1b      	cbnz	r3, 800c180 <_vfiprintf_r+0x1f8>
 800c138:	9b03      	ldr	r3, [sp, #12]
 800c13a:	3307      	adds	r3, #7
 800c13c:	f023 0307 	bic.w	r3, r3, #7
 800c140:	3308      	adds	r3, #8
 800c142:	9303      	str	r3, [sp, #12]
 800c144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c146:	443b      	add	r3, r7
 800c148:	9309      	str	r3, [sp, #36]	; 0x24
 800c14a:	e767      	b.n	800c01c <_vfiprintf_r+0x94>
 800c14c:	460c      	mov	r4, r1
 800c14e:	2001      	movs	r0, #1
 800c150:	fb0c 3202 	mla	r2, ip, r2, r3
 800c154:	e7a5      	b.n	800c0a2 <_vfiprintf_r+0x11a>
 800c156:	2300      	movs	r3, #0
 800c158:	f04f 0c0a 	mov.w	ip, #10
 800c15c:	4619      	mov	r1, r3
 800c15e:	3401      	adds	r4, #1
 800c160:	9305      	str	r3, [sp, #20]
 800c162:	4620      	mov	r0, r4
 800c164:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c168:	3a30      	subs	r2, #48	; 0x30
 800c16a:	2a09      	cmp	r2, #9
 800c16c:	d903      	bls.n	800c176 <_vfiprintf_r+0x1ee>
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d0c5      	beq.n	800c0fe <_vfiprintf_r+0x176>
 800c172:	9105      	str	r1, [sp, #20]
 800c174:	e7c3      	b.n	800c0fe <_vfiprintf_r+0x176>
 800c176:	4604      	mov	r4, r0
 800c178:	2301      	movs	r3, #1
 800c17a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c17e:	e7f0      	b.n	800c162 <_vfiprintf_r+0x1da>
 800c180:	ab03      	add	r3, sp, #12
 800c182:	9300      	str	r3, [sp, #0]
 800c184:	462a      	mov	r2, r5
 800c186:	4630      	mov	r0, r6
 800c188:	4b15      	ldr	r3, [pc, #84]	; (800c1e0 <_vfiprintf_r+0x258>)
 800c18a:	a904      	add	r1, sp, #16
 800c18c:	f7fc f8a2 	bl	80082d4 <_printf_float>
 800c190:	4607      	mov	r7, r0
 800c192:	1c78      	adds	r0, r7, #1
 800c194:	d1d6      	bne.n	800c144 <_vfiprintf_r+0x1bc>
 800c196:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c198:	07d9      	lsls	r1, r3, #31
 800c19a:	d405      	bmi.n	800c1a8 <_vfiprintf_r+0x220>
 800c19c:	89ab      	ldrh	r3, [r5, #12]
 800c19e:	059a      	lsls	r2, r3, #22
 800c1a0:	d402      	bmi.n	800c1a8 <_vfiprintf_r+0x220>
 800c1a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1a4:	f000 faa1 	bl	800c6ea <__retarget_lock_release_recursive>
 800c1a8:	89ab      	ldrh	r3, [r5, #12]
 800c1aa:	065b      	lsls	r3, r3, #25
 800c1ac:	f53f af12 	bmi.w	800bfd4 <_vfiprintf_r+0x4c>
 800c1b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1b2:	e711      	b.n	800bfd8 <_vfiprintf_r+0x50>
 800c1b4:	ab03      	add	r3, sp, #12
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	462a      	mov	r2, r5
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	4b08      	ldr	r3, [pc, #32]	; (800c1e0 <_vfiprintf_r+0x258>)
 800c1be:	a904      	add	r1, sp, #16
 800c1c0:	f7fc fb24 	bl	800880c <_printf_i>
 800c1c4:	e7e4      	b.n	800c190 <_vfiprintf_r+0x208>
 800c1c6:	bf00      	nop
 800c1c8:	0800e8e4 	.word	0x0800e8e4
 800c1cc:	0800e904 	.word	0x0800e904
 800c1d0:	0800e8c4 	.word	0x0800e8c4
 800c1d4:	0800e874 	.word	0x0800e874
 800c1d8:	0800e87e 	.word	0x0800e87e
 800c1dc:	080082d5 	.word	0x080082d5
 800c1e0:	0800bf63 	.word	0x0800bf63
 800c1e4:	0800e87a 	.word	0x0800e87a

0800c1e8 <__swbuf_r>:
 800c1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ea:	460e      	mov	r6, r1
 800c1ec:	4614      	mov	r4, r2
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	b118      	cbz	r0, 800c1fa <__swbuf_r+0x12>
 800c1f2:	6983      	ldr	r3, [r0, #24]
 800c1f4:	b90b      	cbnz	r3, 800c1fa <__swbuf_r+0x12>
 800c1f6:	f000 f9d9 	bl	800c5ac <__sinit>
 800c1fa:	4b21      	ldr	r3, [pc, #132]	; (800c280 <__swbuf_r+0x98>)
 800c1fc:	429c      	cmp	r4, r3
 800c1fe:	d12b      	bne.n	800c258 <__swbuf_r+0x70>
 800c200:	686c      	ldr	r4, [r5, #4]
 800c202:	69a3      	ldr	r3, [r4, #24]
 800c204:	60a3      	str	r3, [r4, #8]
 800c206:	89a3      	ldrh	r3, [r4, #12]
 800c208:	071a      	lsls	r2, r3, #28
 800c20a:	d52f      	bpl.n	800c26c <__swbuf_r+0x84>
 800c20c:	6923      	ldr	r3, [r4, #16]
 800c20e:	b36b      	cbz	r3, 800c26c <__swbuf_r+0x84>
 800c210:	6923      	ldr	r3, [r4, #16]
 800c212:	6820      	ldr	r0, [r4, #0]
 800c214:	b2f6      	uxtb	r6, r6
 800c216:	1ac0      	subs	r0, r0, r3
 800c218:	6963      	ldr	r3, [r4, #20]
 800c21a:	4637      	mov	r7, r6
 800c21c:	4283      	cmp	r3, r0
 800c21e:	dc04      	bgt.n	800c22a <__swbuf_r+0x42>
 800c220:	4621      	mov	r1, r4
 800c222:	4628      	mov	r0, r5
 800c224:	f000 f92e 	bl	800c484 <_fflush_r>
 800c228:	bb30      	cbnz	r0, 800c278 <__swbuf_r+0x90>
 800c22a:	68a3      	ldr	r3, [r4, #8]
 800c22c:	3001      	adds	r0, #1
 800c22e:	3b01      	subs	r3, #1
 800c230:	60a3      	str	r3, [r4, #8]
 800c232:	6823      	ldr	r3, [r4, #0]
 800c234:	1c5a      	adds	r2, r3, #1
 800c236:	6022      	str	r2, [r4, #0]
 800c238:	701e      	strb	r6, [r3, #0]
 800c23a:	6963      	ldr	r3, [r4, #20]
 800c23c:	4283      	cmp	r3, r0
 800c23e:	d004      	beq.n	800c24a <__swbuf_r+0x62>
 800c240:	89a3      	ldrh	r3, [r4, #12]
 800c242:	07db      	lsls	r3, r3, #31
 800c244:	d506      	bpl.n	800c254 <__swbuf_r+0x6c>
 800c246:	2e0a      	cmp	r6, #10
 800c248:	d104      	bne.n	800c254 <__swbuf_r+0x6c>
 800c24a:	4621      	mov	r1, r4
 800c24c:	4628      	mov	r0, r5
 800c24e:	f000 f919 	bl	800c484 <_fflush_r>
 800c252:	b988      	cbnz	r0, 800c278 <__swbuf_r+0x90>
 800c254:	4638      	mov	r0, r7
 800c256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c258:	4b0a      	ldr	r3, [pc, #40]	; (800c284 <__swbuf_r+0x9c>)
 800c25a:	429c      	cmp	r4, r3
 800c25c:	d101      	bne.n	800c262 <__swbuf_r+0x7a>
 800c25e:	68ac      	ldr	r4, [r5, #8]
 800c260:	e7cf      	b.n	800c202 <__swbuf_r+0x1a>
 800c262:	4b09      	ldr	r3, [pc, #36]	; (800c288 <__swbuf_r+0xa0>)
 800c264:	429c      	cmp	r4, r3
 800c266:	bf08      	it	eq
 800c268:	68ec      	ldreq	r4, [r5, #12]
 800c26a:	e7ca      	b.n	800c202 <__swbuf_r+0x1a>
 800c26c:	4621      	mov	r1, r4
 800c26e:	4628      	mov	r0, r5
 800c270:	f000 f80c 	bl	800c28c <__swsetup_r>
 800c274:	2800      	cmp	r0, #0
 800c276:	d0cb      	beq.n	800c210 <__swbuf_r+0x28>
 800c278:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c27c:	e7ea      	b.n	800c254 <__swbuf_r+0x6c>
 800c27e:	bf00      	nop
 800c280:	0800e8e4 	.word	0x0800e8e4
 800c284:	0800e904 	.word	0x0800e904
 800c288:	0800e8c4 	.word	0x0800e8c4

0800c28c <__swsetup_r>:
 800c28c:	4b32      	ldr	r3, [pc, #200]	; (800c358 <__swsetup_r+0xcc>)
 800c28e:	b570      	push	{r4, r5, r6, lr}
 800c290:	681d      	ldr	r5, [r3, #0]
 800c292:	4606      	mov	r6, r0
 800c294:	460c      	mov	r4, r1
 800c296:	b125      	cbz	r5, 800c2a2 <__swsetup_r+0x16>
 800c298:	69ab      	ldr	r3, [r5, #24]
 800c29a:	b913      	cbnz	r3, 800c2a2 <__swsetup_r+0x16>
 800c29c:	4628      	mov	r0, r5
 800c29e:	f000 f985 	bl	800c5ac <__sinit>
 800c2a2:	4b2e      	ldr	r3, [pc, #184]	; (800c35c <__swsetup_r+0xd0>)
 800c2a4:	429c      	cmp	r4, r3
 800c2a6:	d10f      	bne.n	800c2c8 <__swsetup_r+0x3c>
 800c2a8:	686c      	ldr	r4, [r5, #4]
 800c2aa:	89a3      	ldrh	r3, [r4, #12]
 800c2ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2b0:	0719      	lsls	r1, r3, #28
 800c2b2:	d42c      	bmi.n	800c30e <__swsetup_r+0x82>
 800c2b4:	06dd      	lsls	r5, r3, #27
 800c2b6:	d411      	bmi.n	800c2dc <__swsetup_r+0x50>
 800c2b8:	2309      	movs	r3, #9
 800c2ba:	6033      	str	r3, [r6, #0]
 800c2bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2c4:	81a3      	strh	r3, [r4, #12]
 800c2c6:	e03e      	b.n	800c346 <__swsetup_r+0xba>
 800c2c8:	4b25      	ldr	r3, [pc, #148]	; (800c360 <__swsetup_r+0xd4>)
 800c2ca:	429c      	cmp	r4, r3
 800c2cc:	d101      	bne.n	800c2d2 <__swsetup_r+0x46>
 800c2ce:	68ac      	ldr	r4, [r5, #8]
 800c2d0:	e7eb      	b.n	800c2aa <__swsetup_r+0x1e>
 800c2d2:	4b24      	ldr	r3, [pc, #144]	; (800c364 <__swsetup_r+0xd8>)
 800c2d4:	429c      	cmp	r4, r3
 800c2d6:	bf08      	it	eq
 800c2d8:	68ec      	ldreq	r4, [r5, #12]
 800c2da:	e7e6      	b.n	800c2aa <__swsetup_r+0x1e>
 800c2dc:	0758      	lsls	r0, r3, #29
 800c2de:	d512      	bpl.n	800c306 <__swsetup_r+0x7a>
 800c2e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2e2:	b141      	cbz	r1, 800c2f6 <__swsetup_r+0x6a>
 800c2e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2e8:	4299      	cmp	r1, r3
 800c2ea:	d002      	beq.n	800c2f2 <__swsetup_r+0x66>
 800c2ec:	4630      	mov	r0, r6
 800c2ee:	f7ff fb6f 	bl	800b9d0 <_free_r>
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	6363      	str	r3, [r4, #52]	; 0x34
 800c2f6:	89a3      	ldrh	r3, [r4, #12]
 800c2f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2fc:	81a3      	strh	r3, [r4, #12]
 800c2fe:	2300      	movs	r3, #0
 800c300:	6063      	str	r3, [r4, #4]
 800c302:	6923      	ldr	r3, [r4, #16]
 800c304:	6023      	str	r3, [r4, #0]
 800c306:	89a3      	ldrh	r3, [r4, #12]
 800c308:	f043 0308 	orr.w	r3, r3, #8
 800c30c:	81a3      	strh	r3, [r4, #12]
 800c30e:	6923      	ldr	r3, [r4, #16]
 800c310:	b94b      	cbnz	r3, 800c326 <__swsetup_r+0x9a>
 800c312:	89a3      	ldrh	r3, [r4, #12]
 800c314:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c31c:	d003      	beq.n	800c326 <__swsetup_r+0x9a>
 800c31e:	4621      	mov	r1, r4
 800c320:	4630      	mov	r0, r6
 800c322:	f000 fa07 	bl	800c734 <__smakebuf_r>
 800c326:	89a0      	ldrh	r0, [r4, #12]
 800c328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c32c:	f010 0301 	ands.w	r3, r0, #1
 800c330:	d00a      	beq.n	800c348 <__swsetup_r+0xbc>
 800c332:	2300      	movs	r3, #0
 800c334:	60a3      	str	r3, [r4, #8]
 800c336:	6963      	ldr	r3, [r4, #20]
 800c338:	425b      	negs	r3, r3
 800c33a:	61a3      	str	r3, [r4, #24]
 800c33c:	6923      	ldr	r3, [r4, #16]
 800c33e:	b943      	cbnz	r3, 800c352 <__swsetup_r+0xc6>
 800c340:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c344:	d1ba      	bne.n	800c2bc <__swsetup_r+0x30>
 800c346:	bd70      	pop	{r4, r5, r6, pc}
 800c348:	0781      	lsls	r1, r0, #30
 800c34a:	bf58      	it	pl
 800c34c:	6963      	ldrpl	r3, [r4, #20]
 800c34e:	60a3      	str	r3, [r4, #8]
 800c350:	e7f4      	b.n	800c33c <__swsetup_r+0xb0>
 800c352:	2000      	movs	r0, #0
 800c354:	e7f7      	b.n	800c346 <__swsetup_r+0xba>
 800c356:	bf00      	nop
 800c358:	2000002c 	.word	0x2000002c
 800c35c:	0800e8e4 	.word	0x0800e8e4
 800c360:	0800e904 	.word	0x0800e904
 800c364:	0800e8c4 	.word	0x0800e8c4

0800c368 <abort>:
 800c368:	2006      	movs	r0, #6
 800c36a:	b508      	push	{r3, lr}
 800c36c:	f000 fa52 	bl	800c814 <raise>
 800c370:	2001      	movs	r0, #1
 800c372:	f7f7 ff20 	bl	80041b6 <_exit>
	...

0800c378 <__sflush_r>:
 800c378:	898a      	ldrh	r2, [r1, #12]
 800c37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c37e:	4605      	mov	r5, r0
 800c380:	0710      	lsls	r0, r2, #28
 800c382:	460c      	mov	r4, r1
 800c384:	d458      	bmi.n	800c438 <__sflush_r+0xc0>
 800c386:	684b      	ldr	r3, [r1, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	dc05      	bgt.n	800c398 <__sflush_r+0x20>
 800c38c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c38e:	2b00      	cmp	r3, #0
 800c390:	dc02      	bgt.n	800c398 <__sflush_r+0x20>
 800c392:	2000      	movs	r0, #0
 800c394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c39a:	2e00      	cmp	r6, #0
 800c39c:	d0f9      	beq.n	800c392 <__sflush_r+0x1a>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3a4:	682f      	ldr	r7, [r5, #0]
 800c3a6:	602b      	str	r3, [r5, #0]
 800c3a8:	d032      	beq.n	800c410 <__sflush_r+0x98>
 800c3aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3ac:	89a3      	ldrh	r3, [r4, #12]
 800c3ae:	075a      	lsls	r2, r3, #29
 800c3b0:	d505      	bpl.n	800c3be <__sflush_r+0x46>
 800c3b2:	6863      	ldr	r3, [r4, #4]
 800c3b4:	1ac0      	subs	r0, r0, r3
 800c3b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3b8:	b10b      	cbz	r3, 800c3be <__sflush_r+0x46>
 800c3ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3bc:	1ac0      	subs	r0, r0, r3
 800c3be:	2300      	movs	r3, #0
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	6a21      	ldr	r1, [r4, #32]
 800c3c8:	47b0      	blx	r6
 800c3ca:	1c43      	adds	r3, r0, #1
 800c3cc:	89a3      	ldrh	r3, [r4, #12]
 800c3ce:	d106      	bne.n	800c3de <__sflush_r+0x66>
 800c3d0:	6829      	ldr	r1, [r5, #0]
 800c3d2:	291d      	cmp	r1, #29
 800c3d4:	d82c      	bhi.n	800c430 <__sflush_r+0xb8>
 800c3d6:	4a2a      	ldr	r2, [pc, #168]	; (800c480 <__sflush_r+0x108>)
 800c3d8:	40ca      	lsrs	r2, r1
 800c3da:	07d6      	lsls	r6, r2, #31
 800c3dc:	d528      	bpl.n	800c430 <__sflush_r+0xb8>
 800c3de:	2200      	movs	r2, #0
 800c3e0:	6062      	str	r2, [r4, #4]
 800c3e2:	6922      	ldr	r2, [r4, #16]
 800c3e4:	04d9      	lsls	r1, r3, #19
 800c3e6:	6022      	str	r2, [r4, #0]
 800c3e8:	d504      	bpl.n	800c3f4 <__sflush_r+0x7c>
 800c3ea:	1c42      	adds	r2, r0, #1
 800c3ec:	d101      	bne.n	800c3f2 <__sflush_r+0x7a>
 800c3ee:	682b      	ldr	r3, [r5, #0]
 800c3f0:	b903      	cbnz	r3, 800c3f4 <__sflush_r+0x7c>
 800c3f2:	6560      	str	r0, [r4, #84]	; 0x54
 800c3f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3f6:	602f      	str	r7, [r5, #0]
 800c3f8:	2900      	cmp	r1, #0
 800c3fa:	d0ca      	beq.n	800c392 <__sflush_r+0x1a>
 800c3fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c400:	4299      	cmp	r1, r3
 800c402:	d002      	beq.n	800c40a <__sflush_r+0x92>
 800c404:	4628      	mov	r0, r5
 800c406:	f7ff fae3 	bl	800b9d0 <_free_r>
 800c40a:	2000      	movs	r0, #0
 800c40c:	6360      	str	r0, [r4, #52]	; 0x34
 800c40e:	e7c1      	b.n	800c394 <__sflush_r+0x1c>
 800c410:	6a21      	ldr	r1, [r4, #32]
 800c412:	2301      	movs	r3, #1
 800c414:	4628      	mov	r0, r5
 800c416:	47b0      	blx	r6
 800c418:	1c41      	adds	r1, r0, #1
 800c41a:	d1c7      	bne.n	800c3ac <__sflush_r+0x34>
 800c41c:	682b      	ldr	r3, [r5, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d0c4      	beq.n	800c3ac <__sflush_r+0x34>
 800c422:	2b1d      	cmp	r3, #29
 800c424:	d001      	beq.n	800c42a <__sflush_r+0xb2>
 800c426:	2b16      	cmp	r3, #22
 800c428:	d101      	bne.n	800c42e <__sflush_r+0xb6>
 800c42a:	602f      	str	r7, [r5, #0]
 800c42c:	e7b1      	b.n	800c392 <__sflush_r+0x1a>
 800c42e:	89a3      	ldrh	r3, [r4, #12]
 800c430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c434:	81a3      	strh	r3, [r4, #12]
 800c436:	e7ad      	b.n	800c394 <__sflush_r+0x1c>
 800c438:	690f      	ldr	r7, [r1, #16]
 800c43a:	2f00      	cmp	r7, #0
 800c43c:	d0a9      	beq.n	800c392 <__sflush_r+0x1a>
 800c43e:	0793      	lsls	r3, r2, #30
 800c440:	bf18      	it	ne
 800c442:	2300      	movne	r3, #0
 800c444:	680e      	ldr	r6, [r1, #0]
 800c446:	bf08      	it	eq
 800c448:	694b      	ldreq	r3, [r1, #20]
 800c44a:	eba6 0807 	sub.w	r8, r6, r7
 800c44e:	600f      	str	r7, [r1, #0]
 800c450:	608b      	str	r3, [r1, #8]
 800c452:	f1b8 0f00 	cmp.w	r8, #0
 800c456:	dd9c      	ble.n	800c392 <__sflush_r+0x1a>
 800c458:	4643      	mov	r3, r8
 800c45a:	463a      	mov	r2, r7
 800c45c:	4628      	mov	r0, r5
 800c45e:	6a21      	ldr	r1, [r4, #32]
 800c460:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c462:	47b0      	blx	r6
 800c464:	2800      	cmp	r0, #0
 800c466:	dc06      	bgt.n	800c476 <__sflush_r+0xfe>
 800c468:	89a3      	ldrh	r3, [r4, #12]
 800c46a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c472:	81a3      	strh	r3, [r4, #12]
 800c474:	e78e      	b.n	800c394 <__sflush_r+0x1c>
 800c476:	4407      	add	r7, r0
 800c478:	eba8 0800 	sub.w	r8, r8, r0
 800c47c:	e7e9      	b.n	800c452 <__sflush_r+0xda>
 800c47e:	bf00      	nop
 800c480:	20400001 	.word	0x20400001

0800c484 <_fflush_r>:
 800c484:	b538      	push	{r3, r4, r5, lr}
 800c486:	690b      	ldr	r3, [r1, #16]
 800c488:	4605      	mov	r5, r0
 800c48a:	460c      	mov	r4, r1
 800c48c:	b913      	cbnz	r3, 800c494 <_fflush_r+0x10>
 800c48e:	2500      	movs	r5, #0
 800c490:	4628      	mov	r0, r5
 800c492:	bd38      	pop	{r3, r4, r5, pc}
 800c494:	b118      	cbz	r0, 800c49e <_fflush_r+0x1a>
 800c496:	6983      	ldr	r3, [r0, #24]
 800c498:	b90b      	cbnz	r3, 800c49e <_fflush_r+0x1a>
 800c49a:	f000 f887 	bl	800c5ac <__sinit>
 800c49e:	4b14      	ldr	r3, [pc, #80]	; (800c4f0 <_fflush_r+0x6c>)
 800c4a0:	429c      	cmp	r4, r3
 800c4a2:	d11b      	bne.n	800c4dc <_fflush_r+0x58>
 800c4a4:	686c      	ldr	r4, [r5, #4]
 800c4a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d0ef      	beq.n	800c48e <_fflush_r+0xa>
 800c4ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4b0:	07d0      	lsls	r0, r2, #31
 800c4b2:	d404      	bmi.n	800c4be <_fflush_r+0x3a>
 800c4b4:	0599      	lsls	r1, r3, #22
 800c4b6:	d402      	bmi.n	800c4be <_fflush_r+0x3a>
 800c4b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4ba:	f000 f915 	bl	800c6e8 <__retarget_lock_acquire_recursive>
 800c4be:	4628      	mov	r0, r5
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	f7ff ff59 	bl	800c378 <__sflush_r>
 800c4c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4c8:	4605      	mov	r5, r0
 800c4ca:	07da      	lsls	r2, r3, #31
 800c4cc:	d4e0      	bmi.n	800c490 <_fflush_r+0xc>
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	059b      	lsls	r3, r3, #22
 800c4d2:	d4dd      	bmi.n	800c490 <_fflush_r+0xc>
 800c4d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4d6:	f000 f908 	bl	800c6ea <__retarget_lock_release_recursive>
 800c4da:	e7d9      	b.n	800c490 <_fflush_r+0xc>
 800c4dc:	4b05      	ldr	r3, [pc, #20]	; (800c4f4 <_fflush_r+0x70>)
 800c4de:	429c      	cmp	r4, r3
 800c4e0:	d101      	bne.n	800c4e6 <_fflush_r+0x62>
 800c4e2:	68ac      	ldr	r4, [r5, #8]
 800c4e4:	e7df      	b.n	800c4a6 <_fflush_r+0x22>
 800c4e6:	4b04      	ldr	r3, [pc, #16]	; (800c4f8 <_fflush_r+0x74>)
 800c4e8:	429c      	cmp	r4, r3
 800c4ea:	bf08      	it	eq
 800c4ec:	68ec      	ldreq	r4, [r5, #12]
 800c4ee:	e7da      	b.n	800c4a6 <_fflush_r+0x22>
 800c4f0:	0800e8e4 	.word	0x0800e8e4
 800c4f4:	0800e904 	.word	0x0800e904
 800c4f8:	0800e8c4 	.word	0x0800e8c4

0800c4fc <std>:
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	b510      	push	{r4, lr}
 800c500:	4604      	mov	r4, r0
 800c502:	e9c0 3300 	strd	r3, r3, [r0]
 800c506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c50a:	6083      	str	r3, [r0, #8]
 800c50c:	8181      	strh	r1, [r0, #12]
 800c50e:	6643      	str	r3, [r0, #100]	; 0x64
 800c510:	81c2      	strh	r2, [r0, #14]
 800c512:	6183      	str	r3, [r0, #24]
 800c514:	4619      	mov	r1, r3
 800c516:	2208      	movs	r2, #8
 800c518:	305c      	adds	r0, #92	; 0x5c
 800c51a:	f7fb fe35 	bl	8008188 <memset>
 800c51e:	4b05      	ldr	r3, [pc, #20]	; (800c534 <std+0x38>)
 800c520:	6224      	str	r4, [r4, #32]
 800c522:	6263      	str	r3, [r4, #36]	; 0x24
 800c524:	4b04      	ldr	r3, [pc, #16]	; (800c538 <std+0x3c>)
 800c526:	62a3      	str	r3, [r4, #40]	; 0x28
 800c528:	4b04      	ldr	r3, [pc, #16]	; (800c53c <std+0x40>)
 800c52a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c52c:	4b04      	ldr	r3, [pc, #16]	; (800c540 <std+0x44>)
 800c52e:	6323      	str	r3, [r4, #48]	; 0x30
 800c530:	bd10      	pop	{r4, pc}
 800c532:	bf00      	nop
 800c534:	0800c84d 	.word	0x0800c84d
 800c538:	0800c86f 	.word	0x0800c86f
 800c53c:	0800c8a7 	.word	0x0800c8a7
 800c540:	0800c8cb 	.word	0x0800c8cb

0800c544 <_cleanup_r>:
 800c544:	4901      	ldr	r1, [pc, #4]	; (800c54c <_cleanup_r+0x8>)
 800c546:	f000 b8af 	b.w	800c6a8 <_fwalk_reent>
 800c54a:	bf00      	nop
 800c54c:	0800c485 	.word	0x0800c485

0800c550 <__sfmoreglue>:
 800c550:	b570      	push	{r4, r5, r6, lr}
 800c552:	2568      	movs	r5, #104	; 0x68
 800c554:	1e4a      	subs	r2, r1, #1
 800c556:	4355      	muls	r5, r2
 800c558:	460e      	mov	r6, r1
 800c55a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c55e:	f7ff fa83 	bl	800ba68 <_malloc_r>
 800c562:	4604      	mov	r4, r0
 800c564:	b140      	cbz	r0, 800c578 <__sfmoreglue+0x28>
 800c566:	2100      	movs	r1, #0
 800c568:	e9c0 1600 	strd	r1, r6, [r0]
 800c56c:	300c      	adds	r0, #12
 800c56e:	60a0      	str	r0, [r4, #8]
 800c570:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c574:	f7fb fe08 	bl	8008188 <memset>
 800c578:	4620      	mov	r0, r4
 800c57a:	bd70      	pop	{r4, r5, r6, pc}

0800c57c <__sfp_lock_acquire>:
 800c57c:	4801      	ldr	r0, [pc, #4]	; (800c584 <__sfp_lock_acquire+0x8>)
 800c57e:	f000 b8b3 	b.w	800c6e8 <__retarget_lock_acquire_recursive>
 800c582:	bf00      	nop
 800c584:	20000698 	.word	0x20000698

0800c588 <__sfp_lock_release>:
 800c588:	4801      	ldr	r0, [pc, #4]	; (800c590 <__sfp_lock_release+0x8>)
 800c58a:	f000 b8ae 	b.w	800c6ea <__retarget_lock_release_recursive>
 800c58e:	bf00      	nop
 800c590:	20000698 	.word	0x20000698

0800c594 <__sinit_lock_acquire>:
 800c594:	4801      	ldr	r0, [pc, #4]	; (800c59c <__sinit_lock_acquire+0x8>)
 800c596:	f000 b8a7 	b.w	800c6e8 <__retarget_lock_acquire_recursive>
 800c59a:	bf00      	nop
 800c59c:	20000693 	.word	0x20000693

0800c5a0 <__sinit_lock_release>:
 800c5a0:	4801      	ldr	r0, [pc, #4]	; (800c5a8 <__sinit_lock_release+0x8>)
 800c5a2:	f000 b8a2 	b.w	800c6ea <__retarget_lock_release_recursive>
 800c5a6:	bf00      	nop
 800c5a8:	20000693 	.word	0x20000693

0800c5ac <__sinit>:
 800c5ac:	b510      	push	{r4, lr}
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	f7ff fff0 	bl	800c594 <__sinit_lock_acquire>
 800c5b4:	69a3      	ldr	r3, [r4, #24]
 800c5b6:	b11b      	cbz	r3, 800c5c0 <__sinit+0x14>
 800c5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5bc:	f7ff bff0 	b.w	800c5a0 <__sinit_lock_release>
 800c5c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c5c4:	6523      	str	r3, [r4, #80]	; 0x50
 800c5c6:	4b13      	ldr	r3, [pc, #76]	; (800c614 <__sinit+0x68>)
 800c5c8:	4a13      	ldr	r2, [pc, #76]	; (800c618 <__sinit+0x6c>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800c5ce:	42a3      	cmp	r3, r4
 800c5d0:	bf08      	it	eq
 800c5d2:	2301      	moveq	r3, #1
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	bf08      	it	eq
 800c5d8:	61a3      	streq	r3, [r4, #24]
 800c5da:	f000 f81f 	bl	800c61c <__sfp>
 800c5de:	6060      	str	r0, [r4, #4]
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f000 f81b 	bl	800c61c <__sfp>
 800c5e6:	60a0      	str	r0, [r4, #8]
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	f000 f817 	bl	800c61c <__sfp>
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	2104      	movs	r1, #4
 800c5f2:	60e0      	str	r0, [r4, #12]
 800c5f4:	6860      	ldr	r0, [r4, #4]
 800c5f6:	f7ff ff81 	bl	800c4fc <std>
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	2109      	movs	r1, #9
 800c5fe:	68a0      	ldr	r0, [r4, #8]
 800c600:	f7ff ff7c 	bl	800c4fc <std>
 800c604:	2202      	movs	r2, #2
 800c606:	2112      	movs	r1, #18
 800c608:	68e0      	ldr	r0, [r4, #12]
 800c60a:	f7ff ff77 	bl	800c4fc <std>
 800c60e:	2301      	movs	r3, #1
 800c610:	61a3      	str	r3, [r4, #24]
 800c612:	e7d1      	b.n	800c5b8 <__sinit+0xc>
 800c614:	0800e470 	.word	0x0800e470
 800c618:	0800c545 	.word	0x0800c545

0800c61c <__sfp>:
 800c61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c61e:	4607      	mov	r7, r0
 800c620:	f7ff ffac 	bl	800c57c <__sfp_lock_acquire>
 800c624:	4b1e      	ldr	r3, [pc, #120]	; (800c6a0 <__sfp+0x84>)
 800c626:	681e      	ldr	r6, [r3, #0]
 800c628:	69b3      	ldr	r3, [r6, #24]
 800c62a:	b913      	cbnz	r3, 800c632 <__sfp+0x16>
 800c62c:	4630      	mov	r0, r6
 800c62e:	f7ff ffbd 	bl	800c5ac <__sinit>
 800c632:	3648      	adds	r6, #72	; 0x48
 800c634:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c638:	3b01      	subs	r3, #1
 800c63a:	d503      	bpl.n	800c644 <__sfp+0x28>
 800c63c:	6833      	ldr	r3, [r6, #0]
 800c63e:	b30b      	cbz	r3, 800c684 <__sfp+0x68>
 800c640:	6836      	ldr	r6, [r6, #0]
 800c642:	e7f7      	b.n	800c634 <__sfp+0x18>
 800c644:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c648:	b9d5      	cbnz	r5, 800c680 <__sfp+0x64>
 800c64a:	4b16      	ldr	r3, [pc, #88]	; (800c6a4 <__sfp+0x88>)
 800c64c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c650:	60e3      	str	r3, [r4, #12]
 800c652:	6665      	str	r5, [r4, #100]	; 0x64
 800c654:	f000 f847 	bl	800c6e6 <__retarget_lock_init_recursive>
 800c658:	f7ff ff96 	bl	800c588 <__sfp_lock_release>
 800c65c:	2208      	movs	r2, #8
 800c65e:	4629      	mov	r1, r5
 800c660:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c664:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c668:	6025      	str	r5, [r4, #0]
 800c66a:	61a5      	str	r5, [r4, #24]
 800c66c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c670:	f7fb fd8a 	bl	8008188 <memset>
 800c674:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c678:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c67c:	4620      	mov	r0, r4
 800c67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c680:	3468      	adds	r4, #104	; 0x68
 800c682:	e7d9      	b.n	800c638 <__sfp+0x1c>
 800c684:	2104      	movs	r1, #4
 800c686:	4638      	mov	r0, r7
 800c688:	f7ff ff62 	bl	800c550 <__sfmoreglue>
 800c68c:	4604      	mov	r4, r0
 800c68e:	6030      	str	r0, [r6, #0]
 800c690:	2800      	cmp	r0, #0
 800c692:	d1d5      	bne.n	800c640 <__sfp+0x24>
 800c694:	f7ff ff78 	bl	800c588 <__sfp_lock_release>
 800c698:	230c      	movs	r3, #12
 800c69a:	603b      	str	r3, [r7, #0]
 800c69c:	e7ee      	b.n	800c67c <__sfp+0x60>
 800c69e:	bf00      	nop
 800c6a0:	0800e470 	.word	0x0800e470
 800c6a4:	ffff0001 	.word	0xffff0001

0800c6a8 <_fwalk_reent>:
 800c6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6ac:	4606      	mov	r6, r0
 800c6ae:	4688      	mov	r8, r1
 800c6b0:	2700      	movs	r7, #0
 800c6b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c6b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6ba:	f1b9 0901 	subs.w	r9, r9, #1
 800c6be:	d505      	bpl.n	800c6cc <_fwalk_reent+0x24>
 800c6c0:	6824      	ldr	r4, [r4, #0]
 800c6c2:	2c00      	cmp	r4, #0
 800c6c4:	d1f7      	bne.n	800c6b6 <_fwalk_reent+0xe>
 800c6c6:	4638      	mov	r0, r7
 800c6c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6cc:	89ab      	ldrh	r3, [r5, #12]
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d907      	bls.n	800c6e2 <_fwalk_reent+0x3a>
 800c6d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	d003      	beq.n	800c6e2 <_fwalk_reent+0x3a>
 800c6da:	4629      	mov	r1, r5
 800c6dc:	4630      	mov	r0, r6
 800c6de:	47c0      	blx	r8
 800c6e0:	4307      	orrs	r7, r0
 800c6e2:	3568      	adds	r5, #104	; 0x68
 800c6e4:	e7e9      	b.n	800c6ba <_fwalk_reent+0x12>

0800c6e6 <__retarget_lock_init_recursive>:
 800c6e6:	4770      	bx	lr

0800c6e8 <__retarget_lock_acquire_recursive>:
 800c6e8:	4770      	bx	lr

0800c6ea <__retarget_lock_release_recursive>:
 800c6ea:	4770      	bx	lr

0800c6ec <__swhatbuf_r>:
 800c6ec:	b570      	push	{r4, r5, r6, lr}
 800c6ee:	460e      	mov	r6, r1
 800c6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6f4:	4614      	mov	r4, r2
 800c6f6:	2900      	cmp	r1, #0
 800c6f8:	461d      	mov	r5, r3
 800c6fa:	b096      	sub	sp, #88	; 0x58
 800c6fc:	da07      	bge.n	800c70e <__swhatbuf_r+0x22>
 800c6fe:	2300      	movs	r3, #0
 800c700:	602b      	str	r3, [r5, #0]
 800c702:	89b3      	ldrh	r3, [r6, #12]
 800c704:	061a      	lsls	r2, r3, #24
 800c706:	d410      	bmi.n	800c72a <__swhatbuf_r+0x3e>
 800c708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c70c:	e00e      	b.n	800c72c <__swhatbuf_r+0x40>
 800c70e:	466a      	mov	r2, sp
 800c710:	f000 f902 	bl	800c918 <_fstat_r>
 800c714:	2800      	cmp	r0, #0
 800c716:	dbf2      	blt.n	800c6fe <__swhatbuf_r+0x12>
 800c718:	9a01      	ldr	r2, [sp, #4]
 800c71a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c71e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c722:	425a      	negs	r2, r3
 800c724:	415a      	adcs	r2, r3
 800c726:	602a      	str	r2, [r5, #0]
 800c728:	e7ee      	b.n	800c708 <__swhatbuf_r+0x1c>
 800c72a:	2340      	movs	r3, #64	; 0x40
 800c72c:	2000      	movs	r0, #0
 800c72e:	6023      	str	r3, [r4, #0]
 800c730:	b016      	add	sp, #88	; 0x58
 800c732:	bd70      	pop	{r4, r5, r6, pc}

0800c734 <__smakebuf_r>:
 800c734:	898b      	ldrh	r3, [r1, #12]
 800c736:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c738:	079d      	lsls	r5, r3, #30
 800c73a:	4606      	mov	r6, r0
 800c73c:	460c      	mov	r4, r1
 800c73e:	d507      	bpl.n	800c750 <__smakebuf_r+0x1c>
 800c740:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c744:	6023      	str	r3, [r4, #0]
 800c746:	6123      	str	r3, [r4, #16]
 800c748:	2301      	movs	r3, #1
 800c74a:	6163      	str	r3, [r4, #20]
 800c74c:	b002      	add	sp, #8
 800c74e:	bd70      	pop	{r4, r5, r6, pc}
 800c750:	466a      	mov	r2, sp
 800c752:	ab01      	add	r3, sp, #4
 800c754:	f7ff ffca 	bl	800c6ec <__swhatbuf_r>
 800c758:	9900      	ldr	r1, [sp, #0]
 800c75a:	4605      	mov	r5, r0
 800c75c:	4630      	mov	r0, r6
 800c75e:	f7ff f983 	bl	800ba68 <_malloc_r>
 800c762:	b948      	cbnz	r0, 800c778 <__smakebuf_r+0x44>
 800c764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c768:	059a      	lsls	r2, r3, #22
 800c76a:	d4ef      	bmi.n	800c74c <__smakebuf_r+0x18>
 800c76c:	f023 0303 	bic.w	r3, r3, #3
 800c770:	f043 0302 	orr.w	r3, r3, #2
 800c774:	81a3      	strh	r3, [r4, #12]
 800c776:	e7e3      	b.n	800c740 <__smakebuf_r+0xc>
 800c778:	4b0d      	ldr	r3, [pc, #52]	; (800c7b0 <__smakebuf_r+0x7c>)
 800c77a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c77c:	89a3      	ldrh	r3, [r4, #12]
 800c77e:	6020      	str	r0, [r4, #0]
 800c780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c784:	81a3      	strh	r3, [r4, #12]
 800c786:	9b00      	ldr	r3, [sp, #0]
 800c788:	6120      	str	r0, [r4, #16]
 800c78a:	6163      	str	r3, [r4, #20]
 800c78c:	9b01      	ldr	r3, [sp, #4]
 800c78e:	b15b      	cbz	r3, 800c7a8 <__smakebuf_r+0x74>
 800c790:	4630      	mov	r0, r6
 800c792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c796:	f000 f8d1 	bl	800c93c <_isatty_r>
 800c79a:	b128      	cbz	r0, 800c7a8 <__smakebuf_r+0x74>
 800c79c:	89a3      	ldrh	r3, [r4, #12]
 800c79e:	f023 0303 	bic.w	r3, r3, #3
 800c7a2:	f043 0301 	orr.w	r3, r3, #1
 800c7a6:	81a3      	strh	r3, [r4, #12]
 800c7a8:	89a0      	ldrh	r0, [r4, #12]
 800c7aa:	4305      	orrs	r5, r0
 800c7ac:	81a5      	strh	r5, [r4, #12]
 800c7ae:	e7cd      	b.n	800c74c <__smakebuf_r+0x18>
 800c7b0:	0800c545 	.word	0x0800c545

0800c7b4 <_malloc_usable_size_r>:
 800c7b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7b8:	1f18      	subs	r0, r3, #4
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	bfbc      	itt	lt
 800c7be:	580b      	ldrlt	r3, [r1, r0]
 800c7c0:	18c0      	addlt	r0, r0, r3
 800c7c2:	4770      	bx	lr

0800c7c4 <_raise_r>:
 800c7c4:	291f      	cmp	r1, #31
 800c7c6:	b538      	push	{r3, r4, r5, lr}
 800c7c8:	4604      	mov	r4, r0
 800c7ca:	460d      	mov	r5, r1
 800c7cc:	d904      	bls.n	800c7d8 <_raise_r+0x14>
 800c7ce:	2316      	movs	r3, #22
 800c7d0:	6003      	str	r3, [r0, #0]
 800c7d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7d6:	bd38      	pop	{r3, r4, r5, pc}
 800c7d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c7da:	b112      	cbz	r2, 800c7e2 <_raise_r+0x1e>
 800c7dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7e0:	b94b      	cbnz	r3, 800c7f6 <_raise_r+0x32>
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f000 f830 	bl	800c848 <_getpid_r>
 800c7e8:	462a      	mov	r2, r5
 800c7ea:	4601      	mov	r1, r0
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7f2:	f000 b817 	b.w	800c824 <_kill_r>
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d00a      	beq.n	800c810 <_raise_r+0x4c>
 800c7fa:	1c59      	adds	r1, r3, #1
 800c7fc:	d103      	bne.n	800c806 <_raise_r+0x42>
 800c7fe:	2316      	movs	r3, #22
 800c800:	6003      	str	r3, [r0, #0]
 800c802:	2001      	movs	r0, #1
 800c804:	e7e7      	b.n	800c7d6 <_raise_r+0x12>
 800c806:	2400      	movs	r4, #0
 800c808:	4628      	mov	r0, r5
 800c80a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c80e:	4798      	blx	r3
 800c810:	2000      	movs	r0, #0
 800c812:	e7e0      	b.n	800c7d6 <_raise_r+0x12>

0800c814 <raise>:
 800c814:	4b02      	ldr	r3, [pc, #8]	; (800c820 <raise+0xc>)
 800c816:	4601      	mov	r1, r0
 800c818:	6818      	ldr	r0, [r3, #0]
 800c81a:	f7ff bfd3 	b.w	800c7c4 <_raise_r>
 800c81e:	bf00      	nop
 800c820:	2000002c 	.word	0x2000002c

0800c824 <_kill_r>:
 800c824:	b538      	push	{r3, r4, r5, lr}
 800c826:	2300      	movs	r3, #0
 800c828:	4d06      	ldr	r5, [pc, #24]	; (800c844 <_kill_r+0x20>)
 800c82a:	4604      	mov	r4, r0
 800c82c:	4608      	mov	r0, r1
 800c82e:	4611      	mov	r1, r2
 800c830:	602b      	str	r3, [r5, #0]
 800c832:	f7f7 fcb0 	bl	8004196 <_kill>
 800c836:	1c43      	adds	r3, r0, #1
 800c838:	d102      	bne.n	800c840 <_kill_r+0x1c>
 800c83a:	682b      	ldr	r3, [r5, #0]
 800c83c:	b103      	cbz	r3, 800c840 <_kill_r+0x1c>
 800c83e:	6023      	str	r3, [r4, #0]
 800c840:	bd38      	pop	{r3, r4, r5, pc}
 800c842:	bf00      	nop
 800c844:	2000068c 	.word	0x2000068c

0800c848 <_getpid_r>:
 800c848:	f7f7 bc9e 	b.w	8004188 <_getpid>

0800c84c <__sread>:
 800c84c:	b510      	push	{r4, lr}
 800c84e:	460c      	mov	r4, r1
 800c850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c854:	f000 f894 	bl	800c980 <_read_r>
 800c858:	2800      	cmp	r0, #0
 800c85a:	bfab      	itete	ge
 800c85c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c85e:	89a3      	ldrhlt	r3, [r4, #12]
 800c860:	181b      	addge	r3, r3, r0
 800c862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c866:	bfac      	ite	ge
 800c868:	6563      	strge	r3, [r4, #84]	; 0x54
 800c86a:	81a3      	strhlt	r3, [r4, #12]
 800c86c:	bd10      	pop	{r4, pc}

0800c86e <__swrite>:
 800c86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c872:	461f      	mov	r7, r3
 800c874:	898b      	ldrh	r3, [r1, #12]
 800c876:	4605      	mov	r5, r0
 800c878:	05db      	lsls	r3, r3, #23
 800c87a:	460c      	mov	r4, r1
 800c87c:	4616      	mov	r6, r2
 800c87e:	d505      	bpl.n	800c88c <__swrite+0x1e>
 800c880:	2302      	movs	r3, #2
 800c882:	2200      	movs	r2, #0
 800c884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c888:	f000 f868 	bl	800c95c <_lseek_r>
 800c88c:	89a3      	ldrh	r3, [r4, #12]
 800c88e:	4632      	mov	r2, r6
 800c890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c894:	81a3      	strh	r3, [r4, #12]
 800c896:	4628      	mov	r0, r5
 800c898:	463b      	mov	r3, r7
 800c89a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c89e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8a2:	f000 b817 	b.w	800c8d4 <_write_r>

0800c8a6 <__sseek>:
 800c8a6:	b510      	push	{r4, lr}
 800c8a8:	460c      	mov	r4, r1
 800c8aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8ae:	f000 f855 	bl	800c95c <_lseek_r>
 800c8b2:	1c43      	adds	r3, r0, #1
 800c8b4:	89a3      	ldrh	r3, [r4, #12]
 800c8b6:	bf15      	itete	ne
 800c8b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c8ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c8be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c8c2:	81a3      	strheq	r3, [r4, #12]
 800c8c4:	bf18      	it	ne
 800c8c6:	81a3      	strhne	r3, [r4, #12]
 800c8c8:	bd10      	pop	{r4, pc}

0800c8ca <__sclose>:
 800c8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8ce:	f000 b813 	b.w	800c8f8 <_close_r>
	...

0800c8d4 <_write_r>:
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	4608      	mov	r0, r1
 800c8da:	4611      	mov	r1, r2
 800c8dc:	2200      	movs	r2, #0
 800c8de:	4d05      	ldr	r5, [pc, #20]	; (800c8f4 <_write_r+0x20>)
 800c8e0:	602a      	str	r2, [r5, #0]
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	f7f4 fcb8 	bl	8001258 <_write>
 800c8e8:	1c43      	adds	r3, r0, #1
 800c8ea:	d102      	bne.n	800c8f2 <_write_r+0x1e>
 800c8ec:	682b      	ldr	r3, [r5, #0]
 800c8ee:	b103      	cbz	r3, 800c8f2 <_write_r+0x1e>
 800c8f0:	6023      	str	r3, [r4, #0]
 800c8f2:	bd38      	pop	{r3, r4, r5, pc}
 800c8f4:	2000068c 	.word	0x2000068c

0800c8f8 <_close_r>:
 800c8f8:	b538      	push	{r3, r4, r5, lr}
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	4d05      	ldr	r5, [pc, #20]	; (800c914 <_close_r+0x1c>)
 800c8fe:	4604      	mov	r4, r0
 800c900:	4608      	mov	r0, r1
 800c902:	602b      	str	r3, [r5, #0]
 800c904:	f7f7 fc7e 	bl	8004204 <_close>
 800c908:	1c43      	adds	r3, r0, #1
 800c90a:	d102      	bne.n	800c912 <_close_r+0x1a>
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	b103      	cbz	r3, 800c912 <_close_r+0x1a>
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	bd38      	pop	{r3, r4, r5, pc}
 800c914:	2000068c 	.word	0x2000068c

0800c918 <_fstat_r>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	2300      	movs	r3, #0
 800c91c:	4d06      	ldr	r5, [pc, #24]	; (800c938 <_fstat_r+0x20>)
 800c91e:	4604      	mov	r4, r0
 800c920:	4608      	mov	r0, r1
 800c922:	4611      	mov	r1, r2
 800c924:	602b      	str	r3, [r5, #0]
 800c926:	f7f7 fc78 	bl	800421a <_fstat>
 800c92a:	1c43      	adds	r3, r0, #1
 800c92c:	d102      	bne.n	800c934 <_fstat_r+0x1c>
 800c92e:	682b      	ldr	r3, [r5, #0]
 800c930:	b103      	cbz	r3, 800c934 <_fstat_r+0x1c>
 800c932:	6023      	str	r3, [r4, #0]
 800c934:	bd38      	pop	{r3, r4, r5, pc}
 800c936:	bf00      	nop
 800c938:	2000068c 	.word	0x2000068c

0800c93c <_isatty_r>:
 800c93c:	b538      	push	{r3, r4, r5, lr}
 800c93e:	2300      	movs	r3, #0
 800c940:	4d05      	ldr	r5, [pc, #20]	; (800c958 <_isatty_r+0x1c>)
 800c942:	4604      	mov	r4, r0
 800c944:	4608      	mov	r0, r1
 800c946:	602b      	str	r3, [r5, #0]
 800c948:	f7f7 fc76 	bl	8004238 <_isatty>
 800c94c:	1c43      	adds	r3, r0, #1
 800c94e:	d102      	bne.n	800c956 <_isatty_r+0x1a>
 800c950:	682b      	ldr	r3, [r5, #0]
 800c952:	b103      	cbz	r3, 800c956 <_isatty_r+0x1a>
 800c954:	6023      	str	r3, [r4, #0]
 800c956:	bd38      	pop	{r3, r4, r5, pc}
 800c958:	2000068c 	.word	0x2000068c

0800c95c <_lseek_r>:
 800c95c:	b538      	push	{r3, r4, r5, lr}
 800c95e:	4604      	mov	r4, r0
 800c960:	4608      	mov	r0, r1
 800c962:	4611      	mov	r1, r2
 800c964:	2200      	movs	r2, #0
 800c966:	4d05      	ldr	r5, [pc, #20]	; (800c97c <_lseek_r+0x20>)
 800c968:	602a      	str	r2, [r5, #0]
 800c96a:	461a      	mov	r2, r3
 800c96c:	f7f7 fc6e 	bl	800424c <_lseek>
 800c970:	1c43      	adds	r3, r0, #1
 800c972:	d102      	bne.n	800c97a <_lseek_r+0x1e>
 800c974:	682b      	ldr	r3, [r5, #0]
 800c976:	b103      	cbz	r3, 800c97a <_lseek_r+0x1e>
 800c978:	6023      	str	r3, [r4, #0]
 800c97a:	bd38      	pop	{r3, r4, r5, pc}
 800c97c:	2000068c 	.word	0x2000068c

0800c980 <_read_r>:
 800c980:	b538      	push	{r3, r4, r5, lr}
 800c982:	4604      	mov	r4, r0
 800c984:	4608      	mov	r0, r1
 800c986:	4611      	mov	r1, r2
 800c988:	2200      	movs	r2, #0
 800c98a:	4d05      	ldr	r5, [pc, #20]	; (800c9a0 <_read_r+0x20>)
 800c98c:	602a      	str	r2, [r5, #0]
 800c98e:	461a      	mov	r2, r3
 800c990:	f7f7 fc1b 	bl	80041ca <_read>
 800c994:	1c43      	adds	r3, r0, #1
 800c996:	d102      	bne.n	800c99e <_read_r+0x1e>
 800c998:	682b      	ldr	r3, [r5, #0]
 800c99a:	b103      	cbz	r3, 800c99e <_read_r+0x1e>
 800c99c:	6023      	str	r3, [r4, #0]
 800c99e:	bd38      	pop	{r3, r4, r5, pc}
 800c9a0:	2000068c 	.word	0x2000068c
 800c9a4:	00000000 	.word	0x00000000

0800c9a8 <floor>:
 800c9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9ac:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c9b0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c9b4:	2e13      	cmp	r6, #19
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	4607      	mov	r7, r0
 800c9bc:	460c      	mov	r4, r1
 800c9be:	4605      	mov	r5, r0
 800c9c0:	dc34      	bgt.n	800ca2c <floor+0x84>
 800c9c2:	2e00      	cmp	r6, #0
 800c9c4:	da15      	bge.n	800c9f2 <floor+0x4a>
 800c9c6:	a334      	add	r3, pc, #208	; (adr r3, 800ca98 <floor+0xf0>)
 800c9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9cc:	f7f3 fbce 	bl	800016c <__adddf3>
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	f7f4 f810 	bl	80009f8 <__aeabi_dcmpgt>
 800c9d8:	b140      	cbz	r0, 800c9ec <floor+0x44>
 800c9da:	2c00      	cmp	r4, #0
 800c9dc:	da59      	bge.n	800ca92 <floor+0xea>
 800c9de:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c9e2:	ea57 0503 	orrs.w	r5, r7, r3
 800c9e6:	d001      	beq.n	800c9ec <floor+0x44>
 800c9e8:	2500      	movs	r5, #0
 800c9ea:	4c2d      	ldr	r4, [pc, #180]	; (800caa0 <floor+0xf8>)
 800c9ec:	4623      	mov	r3, r4
 800c9ee:	462f      	mov	r7, r5
 800c9f0:	e025      	b.n	800ca3e <floor+0x96>
 800c9f2:	4a2c      	ldr	r2, [pc, #176]	; (800caa4 <floor+0xfc>)
 800c9f4:	fa42 f806 	asr.w	r8, r2, r6
 800c9f8:	ea01 0208 	and.w	r2, r1, r8
 800c9fc:	4302      	orrs	r2, r0
 800c9fe:	d01e      	beq.n	800ca3e <floor+0x96>
 800ca00:	a325      	add	r3, pc, #148	; (adr r3, 800ca98 <floor+0xf0>)
 800ca02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca06:	f7f3 fbb1 	bl	800016c <__adddf3>
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	f7f3 fff3 	bl	80009f8 <__aeabi_dcmpgt>
 800ca12:	2800      	cmp	r0, #0
 800ca14:	d0ea      	beq.n	800c9ec <floor+0x44>
 800ca16:	2c00      	cmp	r4, #0
 800ca18:	bfbe      	ittt	lt
 800ca1a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ca1e:	fa43 f606 	asrlt.w	r6, r3, r6
 800ca22:	19a4      	addlt	r4, r4, r6
 800ca24:	2500      	movs	r5, #0
 800ca26:	ea24 0408 	bic.w	r4, r4, r8
 800ca2a:	e7df      	b.n	800c9ec <floor+0x44>
 800ca2c:	2e33      	cmp	r6, #51	; 0x33
 800ca2e:	dd0a      	ble.n	800ca46 <floor+0x9e>
 800ca30:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ca34:	d103      	bne.n	800ca3e <floor+0x96>
 800ca36:	f7f3 fb99 	bl	800016c <__adddf3>
 800ca3a:	4607      	mov	r7, r0
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	4638      	mov	r0, r7
 800ca40:	4619      	mov	r1, r3
 800ca42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca4a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800ca4e:	fa22 f808 	lsr.w	r8, r2, r8
 800ca52:	ea18 0f00 	tst.w	r8, r0
 800ca56:	d0f2      	beq.n	800ca3e <floor+0x96>
 800ca58:	a30f      	add	r3, pc, #60	; (adr r3, 800ca98 <floor+0xf0>)
 800ca5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5e:	f7f3 fb85 	bl	800016c <__adddf3>
 800ca62:	2200      	movs	r2, #0
 800ca64:	2300      	movs	r3, #0
 800ca66:	f7f3 ffc7 	bl	80009f8 <__aeabi_dcmpgt>
 800ca6a:	2800      	cmp	r0, #0
 800ca6c:	d0be      	beq.n	800c9ec <floor+0x44>
 800ca6e:	2c00      	cmp	r4, #0
 800ca70:	da02      	bge.n	800ca78 <floor+0xd0>
 800ca72:	2e14      	cmp	r6, #20
 800ca74:	d103      	bne.n	800ca7e <floor+0xd6>
 800ca76:	3401      	adds	r4, #1
 800ca78:	ea25 0508 	bic.w	r5, r5, r8
 800ca7c:	e7b6      	b.n	800c9ec <floor+0x44>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ca84:	fa03 f606 	lsl.w	r6, r3, r6
 800ca88:	4435      	add	r5, r6
 800ca8a:	42bd      	cmp	r5, r7
 800ca8c:	bf38      	it	cc
 800ca8e:	18e4      	addcc	r4, r4, r3
 800ca90:	e7f2      	b.n	800ca78 <floor+0xd0>
 800ca92:	2500      	movs	r5, #0
 800ca94:	462c      	mov	r4, r5
 800ca96:	e7a9      	b.n	800c9ec <floor+0x44>
 800ca98:	8800759c 	.word	0x8800759c
 800ca9c:	7e37e43c 	.word	0x7e37e43c
 800caa0:	bff00000 	.word	0xbff00000
 800caa4:	000fffff 	.word	0x000fffff

0800caa8 <atan2>:
 800caa8:	f000 b8e2 	b.w	800cc70 <__ieee754_atan2>

0800caac <fmod>:
 800caac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cab0:	461f      	mov	r7, r3
 800cab2:	4680      	mov	r8, r0
 800cab4:	4689      	mov	r9, r1
 800cab6:	4616      	mov	r6, r2
 800cab8:	f000 f9ac 	bl	800ce14 <__ieee754_fmod>
 800cabc:	4b15      	ldr	r3, [pc, #84]	; (800cb14 <fmod+0x68>)
 800cabe:	4604      	mov	r4, r0
 800cac0:	f993 3000 	ldrsb.w	r3, [r3]
 800cac4:	460d      	mov	r5, r1
 800cac6:	3301      	adds	r3, #1
 800cac8:	d020      	beq.n	800cb0c <fmod+0x60>
 800caca:	4632      	mov	r2, r6
 800cacc:	463b      	mov	r3, r7
 800cace:	4630      	mov	r0, r6
 800cad0:	4639      	mov	r1, r7
 800cad2:	f7f3 ff9b 	bl	8000a0c <__aeabi_dcmpun>
 800cad6:	b9c8      	cbnz	r0, 800cb0c <fmod+0x60>
 800cad8:	4642      	mov	r2, r8
 800cada:	464b      	mov	r3, r9
 800cadc:	4640      	mov	r0, r8
 800cade:	4649      	mov	r1, r9
 800cae0:	f7f3 ff94 	bl	8000a0c <__aeabi_dcmpun>
 800cae4:	b990      	cbnz	r0, 800cb0c <fmod+0x60>
 800cae6:	2200      	movs	r2, #0
 800cae8:	2300      	movs	r3, #0
 800caea:	4630      	mov	r0, r6
 800caec:	4639      	mov	r1, r7
 800caee:	f7f3 ff5b 	bl	80009a8 <__aeabi_dcmpeq>
 800caf2:	b158      	cbz	r0, 800cb0c <fmod+0x60>
 800caf4:	f7fb fb1e 	bl	8008134 <__errno>
 800caf8:	2321      	movs	r3, #33	; 0x21
 800cafa:	2200      	movs	r2, #0
 800cafc:	6003      	str	r3, [r0, #0]
 800cafe:	2300      	movs	r3, #0
 800cb00:	4610      	mov	r0, r2
 800cb02:	4619      	mov	r1, r3
 800cb04:	f7f3 fe12 	bl	800072c <__aeabi_ddiv>
 800cb08:	4604      	mov	r4, r0
 800cb0a:	460d      	mov	r5, r1
 800cb0c:	4620      	mov	r0, r4
 800cb0e:	4629      	mov	r1, r5
 800cb10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb14:	20000200 	.word	0x20000200

0800cb18 <pow>:
 800cb18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb1c:	461f      	mov	r7, r3
 800cb1e:	4680      	mov	r8, r0
 800cb20:	4689      	mov	r9, r1
 800cb22:	4616      	mov	r6, r2
 800cb24:	f000 fa88 	bl	800d038 <__ieee754_pow>
 800cb28:	4b4d      	ldr	r3, [pc, #308]	; (800cc60 <pow+0x148>)
 800cb2a:	4604      	mov	r4, r0
 800cb2c:	f993 3000 	ldrsb.w	r3, [r3]
 800cb30:	460d      	mov	r5, r1
 800cb32:	3301      	adds	r3, #1
 800cb34:	d015      	beq.n	800cb62 <pow+0x4a>
 800cb36:	4632      	mov	r2, r6
 800cb38:	463b      	mov	r3, r7
 800cb3a:	4630      	mov	r0, r6
 800cb3c:	4639      	mov	r1, r7
 800cb3e:	f7f3 ff65 	bl	8000a0c <__aeabi_dcmpun>
 800cb42:	b970      	cbnz	r0, 800cb62 <pow+0x4a>
 800cb44:	4642      	mov	r2, r8
 800cb46:	464b      	mov	r3, r9
 800cb48:	4640      	mov	r0, r8
 800cb4a:	4649      	mov	r1, r9
 800cb4c:	f7f3 ff5e 	bl	8000a0c <__aeabi_dcmpun>
 800cb50:	2200      	movs	r2, #0
 800cb52:	2300      	movs	r3, #0
 800cb54:	b148      	cbz	r0, 800cb6a <pow+0x52>
 800cb56:	4630      	mov	r0, r6
 800cb58:	4639      	mov	r1, r7
 800cb5a:	f7f3 ff25 	bl	80009a8 <__aeabi_dcmpeq>
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	d17b      	bne.n	800cc5a <pow+0x142>
 800cb62:	4620      	mov	r0, r4
 800cb64:	4629      	mov	r1, r5
 800cb66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb6a:	4640      	mov	r0, r8
 800cb6c:	4649      	mov	r1, r9
 800cb6e:	f7f3 ff1b 	bl	80009a8 <__aeabi_dcmpeq>
 800cb72:	b1e0      	cbz	r0, 800cbae <pow+0x96>
 800cb74:	2200      	movs	r2, #0
 800cb76:	2300      	movs	r3, #0
 800cb78:	4630      	mov	r0, r6
 800cb7a:	4639      	mov	r1, r7
 800cb7c:	f7f3 ff14 	bl	80009a8 <__aeabi_dcmpeq>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d16a      	bne.n	800cc5a <pow+0x142>
 800cb84:	4630      	mov	r0, r6
 800cb86:	4639      	mov	r1, r7
 800cb88:	f001 f9a7 	bl	800deda <finite>
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	d0e8      	beq.n	800cb62 <pow+0x4a>
 800cb90:	2200      	movs	r2, #0
 800cb92:	2300      	movs	r3, #0
 800cb94:	4630      	mov	r0, r6
 800cb96:	4639      	mov	r1, r7
 800cb98:	f7f3 ff10 	bl	80009bc <__aeabi_dcmplt>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	d0e0      	beq.n	800cb62 <pow+0x4a>
 800cba0:	f7fb fac8 	bl	8008134 <__errno>
 800cba4:	2321      	movs	r3, #33	; 0x21
 800cba6:	2400      	movs	r4, #0
 800cba8:	6003      	str	r3, [r0, #0]
 800cbaa:	4d2e      	ldr	r5, [pc, #184]	; (800cc64 <pow+0x14c>)
 800cbac:	e7d9      	b.n	800cb62 <pow+0x4a>
 800cbae:	4620      	mov	r0, r4
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	f001 f992 	bl	800deda <finite>
 800cbb6:	bba8      	cbnz	r0, 800cc24 <pow+0x10c>
 800cbb8:	4640      	mov	r0, r8
 800cbba:	4649      	mov	r1, r9
 800cbbc:	f001 f98d 	bl	800deda <finite>
 800cbc0:	b380      	cbz	r0, 800cc24 <pow+0x10c>
 800cbc2:	4630      	mov	r0, r6
 800cbc4:	4639      	mov	r1, r7
 800cbc6:	f001 f988 	bl	800deda <finite>
 800cbca:	b358      	cbz	r0, 800cc24 <pow+0x10c>
 800cbcc:	4622      	mov	r2, r4
 800cbce:	462b      	mov	r3, r5
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	f7f3 ff1a 	bl	8000a0c <__aeabi_dcmpun>
 800cbd8:	b160      	cbz	r0, 800cbf4 <pow+0xdc>
 800cbda:	f7fb faab 	bl	8008134 <__errno>
 800cbde:	2321      	movs	r3, #33	; 0x21
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	6003      	str	r3, [r0, #0]
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	4610      	mov	r0, r2
 800cbe8:	4619      	mov	r1, r3
 800cbea:	f7f3 fd9f 	bl	800072c <__aeabi_ddiv>
 800cbee:	4604      	mov	r4, r0
 800cbf0:	460d      	mov	r5, r1
 800cbf2:	e7b6      	b.n	800cb62 <pow+0x4a>
 800cbf4:	f7fb fa9e 	bl	8008134 <__errno>
 800cbf8:	2322      	movs	r3, #34	; 0x22
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	6003      	str	r3, [r0, #0]
 800cbfe:	4649      	mov	r1, r9
 800cc00:	2300      	movs	r3, #0
 800cc02:	4640      	mov	r0, r8
 800cc04:	f7f3 feda 	bl	80009bc <__aeabi_dcmplt>
 800cc08:	2400      	movs	r4, #0
 800cc0a:	b148      	cbz	r0, 800cc20 <pow+0x108>
 800cc0c:	4630      	mov	r0, r6
 800cc0e:	4639      	mov	r1, r7
 800cc10:	f001 f96a 	bl	800dee8 <rint>
 800cc14:	4632      	mov	r2, r6
 800cc16:	463b      	mov	r3, r7
 800cc18:	f7f3 fec6 	bl	80009a8 <__aeabi_dcmpeq>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	d0c4      	beq.n	800cbaa <pow+0x92>
 800cc20:	4d11      	ldr	r5, [pc, #68]	; (800cc68 <pow+0x150>)
 800cc22:	e79e      	b.n	800cb62 <pow+0x4a>
 800cc24:	2200      	movs	r2, #0
 800cc26:	2300      	movs	r3, #0
 800cc28:	4620      	mov	r0, r4
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	f7f3 febc 	bl	80009a8 <__aeabi_dcmpeq>
 800cc30:	2800      	cmp	r0, #0
 800cc32:	d096      	beq.n	800cb62 <pow+0x4a>
 800cc34:	4640      	mov	r0, r8
 800cc36:	4649      	mov	r1, r9
 800cc38:	f001 f94f 	bl	800deda <finite>
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d090      	beq.n	800cb62 <pow+0x4a>
 800cc40:	4630      	mov	r0, r6
 800cc42:	4639      	mov	r1, r7
 800cc44:	f001 f949 	bl	800deda <finite>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	d08a      	beq.n	800cb62 <pow+0x4a>
 800cc4c:	f7fb fa72 	bl	8008134 <__errno>
 800cc50:	2322      	movs	r3, #34	; 0x22
 800cc52:	2400      	movs	r4, #0
 800cc54:	2500      	movs	r5, #0
 800cc56:	6003      	str	r3, [r0, #0]
 800cc58:	e783      	b.n	800cb62 <pow+0x4a>
 800cc5a:	2400      	movs	r4, #0
 800cc5c:	4d03      	ldr	r5, [pc, #12]	; (800cc6c <pow+0x154>)
 800cc5e:	e780      	b.n	800cb62 <pow+0x4a>
 800cc60:	20000200 	.word	0x20000200
 800cc64:	fff00000 	.word	0xfff00000
 800cc68:	7ff00000 	.word	0x7ff00000
 800cc6c:	3ff00000 	.word	0x3ff00000

0800cc70 <__ieee754_atan2>:
 800cc70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc74:	4692      	mov	sl, r2
 800cc76:	4699      	mov	r9, r3
 800cc78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cc7c:	461f      	mov	r7, r3
 800cc7e:	f1ca 0300 	rsb	r3, sl, #0
 800cc82:	f8df e18c 	ldr.w	lr, [pc, #396]	; 800ce10 <__ieee754_atan2+0x1a0>
 800cc86:	ea43 030a 	orr.w	r3, r3, sl
 800cc8a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cc8e:	4573      	cmp	r3, lr
 800cc90:	4604      	mov	r4, r0
 800cc92:	460d      	mov	r5, r1
 800cc94:	d808      	bhi.n	800cca8 <__ieee754_atan2+0x38>
 800cc96:	4246      	negs	r6, r0
 800cc98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc9c:	4306      	orrs	r6, r0
 800cc9e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800cca2:	4576      	cmp	r6, lr
 800cca4:	468c      	mov	ip, r1
 800cca6:	d908      	bls.n	800ccba <__ieee754_atan2+0x4a>
 800cca8:	4652      	mov	r2, sl
 800ccaa:	464b      	mov	r3, r9
 800ccac:	4620      	mov	r0, r4
 800ccae:	4629      	mov	r1, r5
 800ccb0:	f7f3 fa5c 	bl	800016c <__adddf3>
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	460d      	mov	r5, r1
 800ccb8:	e019      	b.n	800ccee <__ieee754_atan2+0x7e>
 800ccba:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800ccbe:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800ccc2:	ea56 060a 	orrs.w	r6, r6, sl
 800ccc6:	d103      	bne.n	800ccd0 <__ieee754_atan2+0x60>
 800ccc8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cccc:	f000 bf78 	b.w	800dbc0 <atan>
 800ccd0:	17be      	asrs	r6, r7, #30
 800ccd2:	f006 0602 	and.w	r6, r6, #2
 800ccd6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800ccda:	ea53 0100 	orrs.w	r1, r3, r0
 800ccde:	d10a      	bne.n	800ccf6 <__ieee754_atan2+0x86>
 800cce0:	2e02      	cmp	r6, #2
 800cce2:	d067      	beq.n	800cdb4 <__ieee754_atan2+0x144>
 800cce4:	2e03      	cmp	r6, #3
 800cce6:	d102      	bne.n	800ccee <__ieee754_atan2+0x7e>
 800cce8:	a53b      	add	r5, pc, #236	; (adr r5, 800cdd8 <__ieee754_atan2+0x168>)
 800ccea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ccee:	4620      	mov	r0, r4
 800ccf0:	4629      	mov	r1, r5
 800ccf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf6:	ea52 010a 	orrs.w	r1, r2, sl
 800ccfa:	d106      	bne.n	800cd0a <__ieee754_atan2+0x9a>
 800ccfc:	f1bc 0f00 	cmp.w	ip, #0
 800cd00:	da63      	bge.n	800cdca <__ieee754_atan2+0x15a>
 800cd02:	a537      	add	r5, pc, #220	; (adr r5, 800cde0 <__ieee754_atan2+0x170>)
 800cd04:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cd08:	e7f1      	b.n	800ccee <__ieee754_atan2+0x7e>
 800cd0a:	4572      	cmp	r2, lr
 800cd0c:	d10f      	bne.n	800cd2e <__ieee754_atan2+0xbe>
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800cd14:	d107      	bne.n	800cd26 <__ieee754_atan2+0xb6>
 800cd16:	2e02      	cmp	r6, #2
 800cd18:	d850      	bhi.n	800cdbc <__ieee754_atan2+0x14c>
 800cd1a:	4b3b      	ldr	r3, [pc, #236]	; (800ce08 <__ieee754_atan2+0x198>)
 800cd1c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cd20:	e9d6 4500 	ldrd	r4, r5, [r6]
 800cd24:	e7e3      	b.n	800ccee <__ieee754_atan2+0x7e>
 800cd26:	2e02      	cmp	r6, #2
 800cd28:	d84c      	bhi.n	800cdc4 <__ieee754_atan2+0x154>
 800cd2a:	4b38      	ldr	r3, [pc, #224]	; (800ce0c <__ieee754_atan2+0x19c>)
 800cd2c:	e7f6      	b.n	800cd1c <__ieee754_atan2+0xac>
 800cd2e:	4573      	cmp	r3, lr
 800cd30:	d0e4      	beq.n	800ccfc <__ieee754_atan2+0x8c>
 800cd32:	1a9b      	subs	r3, r3, r2
 800cd34:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800cd38:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cd3c:	da20      	bge.n	800cd80 <__ieee754_atan2+0x110>
 800cd3e:	2f00      	cmp	r7, #0
 800cd40:	da01      	bge.n	800cd46 <__ieee754_atan2+0xd6>
 800cd42:	323c      	adds	r2, #60	; 0x3c
 800cd44:	db20      	blt.n	800cd88 <__ieee754_atan2+0x118>
 800cd46:	4652      	mov	r2, sl
 800cd48:	464b      	mov	r3, r9
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	f7f3 fced 	bl	800072c <__aeabi_ddiv>
 800cd52:	f001 f8bf 	bl	800ded4 <fabs>
 800cd56:	f000 ff33 	bl	800dbc0 <atan>
 800cd5a:	4604      	mov	r4, r0
 800cd5c:	460d      	mov	r5, r1
 800cd5e:	2e01      	cmp	r6, #1
 800cd60:	d015      	beq.n	800cd8e <__ieee754_atan2+0x11e>
 800cd62:	2e02      	cmp	r6, #2
 800cd64:	d017      	beq.n	800cd96 <__ieee754_atan2+0x126>
 800cd66:	2e00      	cmp	r6, #0
 800cd68:	d0c1      	beq.n	800ccee <__ieee754_atan2+0x7e>
 800cd6a:	a31f      	add	r3, pc, #124	; (adr r3, 800cde8 <__ieee754_atan2+0x178>)
 800cd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd70:	4620      	mov	r0, r4
 800cd72:	4629      	mov	r1, r5
 800cd74:	f7f3 f9f8 	bl	8000168 <__aeabi_dsub>
 800cd78:	a31d      	add	r3, pc, #116	; (adr r3, 800cdf0 <__ieee754_atan2+0x180>)
 800cd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7e:	e016      	b.n	800cdae <__ieee754_atan2+0x13e>
 800cd80:	a51d      	add	r5, pc, #116	; (adr r5, 800cdf8 <__ieee754_atan2+0x188>)
 800cd82:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cd86:	e7ea      	b.n	800cd5e <__ieee754_atan2+0xee>
 800cd88:	2400      	movs	r4, #0
 800cd8a:	2500      	movs	r5, #0
 800cd8c:	e7e7      	b.n	800cd5e <__ieee754_atan2+0xee>
 800cd8e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800cd92:	461d      	mov	r5, r3
 800cd94:	e7ab      	b.n	800ccee <__ieee754_atan2+0x7e>
 800cd96:	a314      	add	r3, pc, #80	; (adr r3, 800cde8 <__ieee754_atan2+0x178>)
 800cd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	4629      	mov	r1, r5
 800cda0:	f7f3 f9e2 	bl	8000168 <__aeabi_dsub>
 800cda4:	4602      	mov	r2, r0
 800cda6:	460b      	mov	r3, r1
 800cda8:	a111      	add	r1, pc, #68	; (adr r1, 800cdf0 <__ieee754_atan2+0x180>)
 800cdaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdae:	f7f3 f9db 	bl	8000168 <__aeabi_dsub>
 800cdb2:	e77f      	b.n	800ccb4 <__ieee754_atan2+0x44>
 800cdb4:	a50e      	add	r5, pc, #56	; (adr r5, 800cdf0 <__ieee754_atan2+0x180>)
 800cdb6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cdba:	e798      	b.n	800ccee <__ieee754_atan2+0x7e>
 800cdbc:	a510      	add	r5, pc, #64	; (adr r5, 800ce00 <__ieee754_atan2+0x190>)
 800cdbe:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cdc2:	e794      	b.n	800ccee <__ieee754_atan2+0x7e>
 800cdc4:	2400      	movs	r4, #0
 800cdc6:	2500      	movs	r5, #0
 800cdc8:	e791      	b.n	800ccee <__ieee754_atan2+0x7e>
 800cdca:	a50b      	add	r5, pc, #44	; (adr r5, 800cdf8 <__ieee754_atan2+0x188>)
 800cdcc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cdd0:	e78d      	b.n	800ccee <__ieee754_atan2+0x7e>
 800cdd2:	bf00      	nop
 800cdd4:	f3af 8000 	nop.w
 800cdd8:	54442d18 	.word	0x54442d18
 800cddc:	c00921fb 	.word	0xc00921fb
 800cde0:	54442d18 	.word	0x54442d18
 800cde4:	bff921fb 	.word	0xbff921fb
 800cde8:	33145c07 	.word	0x33145c07
 800cdec:	3ca1a626 	.word	0x3ca1a626
 800cdf0:	54442d18 	.word	0x54442d18
 800cdf4:	400921fb 	.word	0x400921fb
 800cdf8:	54442d18 	.word	0x54442d18
 800cdfc:	3ff921fb 	.word	0x3ff921fb
 800ce00:	54442d18 	.word	0x54442d18
 800ce04:	3fe921fb 	.word	0x3fe921fb
 800ce08:	0800e928 	.word	0x0800e928
 800ce0c:	0800e940 	.word	0x0800e940
 800ce10:	7ff00000 	.word	0x7ff00000

0800ce14 <__ieee754_fmod>:
 800ce14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce18:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 800ce1c:	4607      	mov	r7, r0
 800ce1e:	461d      	mov	r5, r3
 800ce20:	4618      	mov	r0, r3
 800ce22:	ea58 0302 	orrs.w	r3, r8, r2
 800ce26:	460e      	mov	r6, r1
 800ce28:	4614      	mov	r4, r2
 800ce2a:	4694      	mov	ip, r2
 800ce2c:	4696      	mov	lr, r2
 800ce2e:	d00d      	beq.n	800ce4c <__ieee754_fmod+0x38>
 800ce30:	4a7b      	ldr	r2, [pc, #492]	; (800d020 <__ieee754_fmod+0x20c>)
 800ce32:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce36:	4293      	cmp	r3, r2
 800ce38:	468a      	mov	sl, r1
 800ce3a:	dc07      	bgt.n	800ce4c <__ieee754_fmod+0x38>
 800ce3c:	4262      	negs	r2, r4
 800ce3e:	4979      	ldr	r1, [pc, #484]	; (800d024 <__ieee754_fmod+0x210>)
 800ce40:	4322      	orrs	r2, r4
 800ce42:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 800ce46:	428a      	cmp	r2, r1
 800ce48:	460a      	mov	r2, r1
 800ce4a:	d90c      	bls.n	800ce66 <__ieee754_fmod+0x52>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	4622      	mov	r2, r4
 800ce50:	4638      	mov	r0, r7
 800ce52:	4631      	mov	r1, r6
 800ce54:	f7f3 fb40 	bl	80004d8 <__aeabi_dmul>
 800ce58:	4602      	mov	r2, r0
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	f7f3 fc66 	bl	800072c <__aeabi_ddiv>
 800ce60:	4607      	mov	r7, r0
 800ce62:	460e      	mov	r6, r1
 800ce64:	e00f      	b.n	800ce86 <__ieee754_fmod+0x72>
 800ce66:	4543      	cmp	r3, r8
 800ce68:	46b9      	mov	r9, r7
 800ce6a:	4639      	mov	r1, r7
 800ce6c:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 800ce70:	dc0d      	bgt.n	800ce8e <__ieee754_fmod+0x7a>
 800ce72:	db08      	blt.n	800ce86 <__ieee754_fmod+0x72>
 800ce74:	4567      	cmp	r7, ip
 800ce76:	d306      	bcc.n	800ce86 <__ieee754_fmod+0x72>
 800ce78:	d109      	bne.n	800ce8e <__ieee754_fmod+0x7a>
 800ce7a:	4a6b      	ldr	r2, [pc, #428]	; (800d028 <__ieee754_fmod+0x214>)
 800ce7c:	0fe4      	lsrs	r4, r4, #31
 800ce7e:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 800ce82:	e9d4 7600 	ldrd	r7, r6, [r4]
 800ce86:	4638      	mov	r0, r7
 800ce88:	4631      	mov	r1, r6
 800ce8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce8e:	ea1a 0f02 	tst.w	sl, r2
 800ce92:	d14a      	bne.n	800cf2a <__ieee754_fmod+0x116>
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d141      	bne.n	800cf1c <__ieee754_fmod+0x108>
 800ce98:	464a      	mov	r2, r9
 800ce9a:	4864      	ldr	r0, [pc, #400]	; (800d02c <__ieee754_fmod+0x218>)
 800ce9c:	2a00      	cmp	r2, #0
 800ce9e:	dc3a      	bgt.n	800cf16 <__ieee754_fmod+0x102>
 800cea0:	4a60      	ldr	r2, [pc, #384]	; (800d024 <__ieee754_fmod+0x210>)
 800cea2:	402a      	ands	r2, r5
 800cea4:	2a00      	cmp	r2, #0
 800cea6:	d14f      	bne.n	800cf48 <__ieee754_fmod+0x134>
 800cea8:	f1b8 0f00 	cmp.w	r8, #0
 800ceac:	d144      	bne.n	800cf38 <__ieee754_fmod+0x124>
 800ceae:	4666      	mov	r6, ip
 800ceb0:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ceb4:	2e00      	cmp	r6, #0
 800ceb6:	dc3c      	bgt.n	800cf32 <__ieee754_fmod+0x11e>
 800ceb8:	4e5d      	ldr	r6, [pc, #372]	; (800d030 <__ieee754_fmod+0x21c>)
 800ceba:	42b0      	cmp	r0, r6
 800cebc:	db49      	blt.n	800cf52 <__ieee754_fmod+0x13e>
 800cebe:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800cec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cec6:	4e5a      	ldr	r6, [pc, #360]	; (800d030 <__ieee754_fmod+0x21c>)
 800cec8:	42b2      	cmp	r2, r6
 800ceca:	db54      	blt.n	800cf76 <__ieee754_fmod+0x162>
 800cecc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ced0:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 800ced4:	1a80      	subs	r0, r0, r2
 800ced6:	1b5e      	subs	r6, r3, r5
 800ced8:	eba1 070e 	sub.w	r7, r1, lr
 800cedc:	2800      	cmp	r0, #0
 800cede:	d161      	bne.n	800cfa4 <__ieee754_fmod+0x190>
 800cee0:	4571      	cmp	r1, lr
 800cee2:	bf38      	it	cc
 800cee4:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800cee8:	2e00      	cmp	r6, #0
 800ceea:	bfa4      	itt	ge
 800ceec:	4639      	movge	r1, r7
 800ceee:	4633      	movge	r3, r6
 800cef0:	ea53 0001 	orrs.w	r0, r3, r1
 800cef4:	d0c1      	beq.n	800ce7a <__ieee754_fmod+0x66>
 800cef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cefa:	db68      	blt.n	800cfce <__ieee754_fmod+0x1ba>
 800cefc:	484c      	ldr	r0, [pc, #304]	; (800d030 <__ieee754_fmod+0x21c>)
 800cefe:	4282      	cmp	r2, r0
 800cf00:	db6b      	blt.n	800cfda <__ieee754_fmod+0x1c6>
 800cf02:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cf06:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800cf0a:	431c      	orrs	r4, r3
 800cf0c:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 800cf10:	460f      	mov	r7, r1
 800cf12:	464e      	mov	r6, r9
 800cf14:	e7b7      	b.n	800ce86 <__ieee754_fmod+0x72>
 800cf16:	3801      	subs	r0, #1
 800cf18:	0052      	lsls	r2, r2, #1
 800cf1a:	e7bf      	b.n	800ce9c <__ieee754_fmod+0x88>
 800cf1c:	4844      	ldr	r0, [pc, #272]	; (800d030 <__ieee754_fmod+0x21c>)
 800cf1e:	02da      	lsls	r2, r3, #11
 800cf20:	2a00      	cmp	r2, #0
 800cf22:	ddbd      	ble.n	800cea0 <__ieee754_fmod+0x8c>
 800cf24:	3801      	subs	r0, #1
 800cf26:	0052      	lsls	r2, r2, #1
 800cf28:	e7fa      	b.n	800cf20 <__ieee754_fmod+0x10c>
 800cf2a:	1518      	asrs	r0, r3, #20
 800cf2c:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800cf30:	e7b6      	b.n	800cea0 <__ieee754_fmod+0x8c>
 800cf32:	3a01      	subs	r2, #1
 800cf34:	0076      	lsls	r6, r6, #1
 800cf36:	e7bd      	b.n	800ceb4 <__ieee754_fmod+0xa0>
 800cf38:	4a3d      	ldr	r2, [pc, #244]	; (800d030 <__ieee754_fmod+0x21c>)
 800cf3a:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 800cf3e:	2e00      	cmp	r6, #0
 800cf40:	ddba      	ble.n	800ceb8 <__ieee754_fmod+0xa4>
 800cf42:	3a01      	subs	r2, #1
 800cf44:	0076      	lsls	r6, r6, #1
 800cf46:	e7fa      	b.n	800cf3e <__ieee754_fmod+0x12a>
 800cf48:	ea4f 5228 	mov.w	r2, r8, asr #20
 800cf4c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cf50:	e7b2      	b.n	800ceb8 <__ieee754_fmod+0xa4>
 800cf52:	1a31      	subs	r1, r6, r0
 800cf54:	291f      	cmp	r1, #31
 800cf56:	dc08      	bgt.n	800cf6a <__ieee754_fmod+0x156>
 800cf58:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 800cf5c:	408b      	lsls	r3, r1
 800cf5e:	fa29 f606 	lsr.w	r6, r9, r6
 800cf62:	4333      	orrs	r3, r6
 800cf64:	fa09 f101 	lsl.w	r1, r9, r1
 800cf68:	e7ad      	b.n	800cec6 <__ieee754_fmod+0xb2>
 800cf6a:	4b32      	ldr	r3, [pc, #200]	; (800d034 <__ieee754_fmod+0x220>)
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	1a1b      	subs	r3, r3, r0
 800cf70:	fa09 f303 	lsl.w	r3, r9, r3
 800cf74:	e7a7      	b.n	800cec6 <__ieee754_fmod+0xb2>
 800cf76:	eba6 0e02 	sub.w	lr, r6, r2
 800cf7a:	f1be 0f1f 	cmp.w	lr, #31
 800cf7e:	dc0a      	bgt.n	800cf96 <__ieee754_fmod+0x182>
 800cf80:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 800cf84:	fa08 f80e 	lsl.w	r8, r8, lr
 800cf88:	fa2c f505 	lsr.w	r5, ip, r5
 800cf8c:	ea45 0508 	orr.w	r5, r5, r8
 800cf90:	fa0c fe0e 	lsl.w	lr, ip, lr
 800cf94:	e79e      	b.n	800ced4 <__ieee754_fmod+0xc0>
 800cf96:	4d27      	ldr	r5, [pc, #156]	; (800d034 <__ieee754_fmod+0x220>)
 800cf98:	f04f 0e00 	mov.w	lr, #0
 800cf9c:	1aad      	subs	r5, r5, r2
 800cf9e:	fa0c f505 	lsl.w	r5, ip, r5
 800cfa2:	e797      	b.n	800ced4 <__ieee754_fmod+0xc0>
 800cfa4:	4571      	cmp	r1, lr
 800cfa6:	bf38      	it	cc
 800cfa8:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800cfac:	2e00      	cmp	r6, #0
 800cfae:	da05      	bge.n	800cfbc <__ieee754_fmod+0x1a8>
 800cfb0:	0fce      	lsrs	r6, r1, #31
 800cfb2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800cfb6:	0049      	lsls	r1, r1, #1
 800cfb8:	3801      	subs	r0, #1
 800cfba:	e78c      	b.n	800ced6 <__ieee754_fmod+0xc2>
 800cfbc:	ea56 0307 	orrs.w	r3, r6, r7
 800cfc0:	f43f af5b 	beq.w	800ce7a <__ieee754_fmod+0x66>
 800cfc4:	0ffb      	lsrs	r3, r7, #31
 800cfc6:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800cfca:	0079      	lsls	r1, r7, #1
 800cfcc:	e7f4      	b.n	800cfb8 <__ieee754_fmod+0x1a4>
 800cfce:	0fc8      	lsrs	r0, r1, #31
 800cfd0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800cfd4:	0049      	lsls	r1, r1, #1
 800cfd6:	3a01      	subs	r2, #1
 800cfd8:	e78d      	b.n	800cef6 <__ieee754_fmod+0xe2>
 800cfda:	1a80      	subs	r0, r0, r2
 800cfdc:	2814      	cmp	r0, #20
 800cfde:	dc0a      	bgt.n	800cff6 <__ieee754_fmod+0x1e2>
 800cfe0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800cfe4:	fa03 f202 	lsl.w	r2, r3, r2
 800cfe8:	40c1      	lsrs	r1, r0
 800cfea:	430a      	orrs	r2, r1
 800cfec:	4103      	asrs	r3, r0
 800cfee:	4610      	mov	r0, r2
 800cff0:	ea43 0104 	orr.w	r1, r3, r4
 800cff4:	e734      	b.n	800ce60 <__ieee754_fmod+0x4c>
 800cff6:	281f      	cmp	r0, #31
 800cff8:	dc07      	bgt.n	800d00a <__ieee754_fmod+0x1f6>
 800cffa:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800cffe:	40c1      	lsrs	r1, r0
 800d000:	fa03 f202 	lsl.w	r2, r3, r2
 800d004:	430a      	orrs	r2, r1
 800d006:	4623      	mov	r3, r4
 800d008:	e7f1      	b.n	800cfee <__ieee754_fmod+0x1da>
 800d00a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800d00e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d012:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800d016:	32e2      	adds	r2, #226	; 0xe2
 800d018:	fa43 f202 	asr.w	r2, r3, r2
 800d01c:	e7f3      	b.n	800d006 <__ieee754_fmod+0x1f2>
 800d01e:	bf00      	nop
 800d020:	7fefffff 	.word	0x7fefffff
 800d024:	7ff00000 	.word	0x7ff00000
 800d028:	0800e958 	.word	0x0800e958
 800d02c:	fffffbed 	.word	0xfffffbed
 800d030:	fffffc02 	.word	0xfffffc02
 800d034:	fffffbe2 	.word	0xfffffbe2

0800d038 <__ieee754_pow>:
 800d038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d03c:	b093      	sub	sp, #76	; 0x4c
 800d03e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d042:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800d046:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800d04a:	ea55 0302 	orrs.w	r3, r5, r2
 800d04e:	4607      	mov	r7, r0
 800d050:	4688      	mov	r8, r1
 800d052:	f000 84bf 	beq.w	800d9d4 <__ieee754_pow+0x99c>
 800d056:	4b7e      	ldr	r3, [pc, #504]	; (800d250 <__ieee754_pow+0x218>)
 800d058:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800d05c:	429c      	cmp	r4, r3
 800d05e:	4689      	mov	r9, r1
 800d060:	4682      	mov	sl, r0
 800d062:	dc09      	bgt.n	800d078 <__ieee754_pow+0x40>
 800d064:	d103      	bne.n	800d06e <__ieee754_pow+0x36>
 800d066:	b978      	cbnz	r0, 800d088 <__ieee754_pow+0x50>
 800d068:	42a5      	cmp	r5, r4
 800d06a:	dd02      	ble.n	800d072 <__ieee754_pow+0x3a>
 800d06c:	e00c      	b.n	800d088 <__ieee754_pow+0x50>
 800d06e:	429d      	cmp	r5, r3
 800d070:	dc02      	bgt.n	800d078 <__ieee754_pow+0x40>
 800d072:	429d      	cmp	r5, r3
 800d074:	d10e      	bne.n	800d094 <__ieee754_pow+0x5c>
 800d076:	b16a      	cbz	r2, 800d094 <__ieee754_pow+0x5c>
 800d078:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d07c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d080:	ea54 030a 	orrs.w	r3, r4, sl
 800d084:	f000 84a6 	beq.w	800d9d4 <__ieee754_pow+0x99c>
 800d088:	4872      	ldr	r0, [pc, #456]	; (800d254 <__ieee754_pow+0x21c>)
 800d08a:	b013      	add	sp, #76	; 0x4c
 800d08c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d090:	f7fe bea0 	b.w	800bdd4 <nan>
 800d094:	f1b9 0f00 	cmp.w	r9, #0
 800d098:	da39      	bge.n	800d10e <__ieee754_pow+0xd6>
 800d09a:	4b6f      	ldr	r3, [pc, #444]	; (800d258 <__ieee754_pow+0x220>)
 800d09c:	429d      	cmp	r5, r3
 800d09e:	dc54      	bgt.n	800d14a <__ieee754_pow+0x112>
 800d0a0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d0a4:	429d      	cmp	r5, r3
 800d0a6:	f340 84a6 	ble.w	800d9f6 <__ieee754_pow+0x9be>
 800d0aa:	152b      	asrs	r3, r5, #20
 800d0ac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d0b0:	2b14      	cmp	r3, #20
 800d0b2:	dd0f      	ble.n	800d0d4 <__ieee754_pow+0x9c>
 800d0b4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d0b8:	fa22 f103 	lsr.w	r1, r2, r3
 800d0bc:	fa01 f303 	lsl.w	r3, r1, r3
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	f040 8498 	bne.w	800d9f6 <__ieee754_pow+0x9be>
 800d0c6:	f001 0101 	and.w	r1, r1, #1
 800d0ca:	f1c1 0302 	rsb	r3, r1, #2
 800d0ce:	9300      	str	r3, [sp, #0]
 800d0d0:	b182      	cbz	r2, 800d0f4 <__ieee754_pow+0xbc>
 800d0d2:	e05e      	b.n	800d192 <__ieee754_pow+0x15a>
 800d0d4:	2a00      	cmp	r2, #0
 800d0d6:	d15a      	bne.n	800d18e <__ieee754_pow+0x156>
 800d0d8:	f1c3 0314 	rsb	r3, r3, #20
 800d0dc:	fa45 f103 	asr.w	r1, r5, r3
 800d0e0:	fa01 f303 	lsl.w	r3, r1, r3
 800d0e4:	42ab      	cmp	r3, r5
 800d0e6:	f040 8483 	bne.w	800d9f0 <__ieee754_pow+0x9b8>
 800d0ea:	f001 0101 	and.w	r1, r1, #1
 800d0ee:	f1c1 0302 	rsb	r3, r1, #2
 800d0f2:	9300      	str	r3, [sp, #0]
 800d0f4:	4b59      	ldr	r3, [pc, #356]	; (800d25c <__ieee754_pow+0x224>)
 800d0f6:	429d      	cmp	r5, r3
 800d0f8:	d130      	bne.n	800d15c <__ieee754_pow+0x124>
 800d0fa:	2e00      	cmp	r6, #0
 800d0fc:	f280 8474 	bge.w	800d9e8 <__ieee754_pow+0x9b0>
 800d100:	463a      	mov	r2, r7
 800d102:	4643      	mov	r3, r8
 800d104:	2000      	movs	r0, #0
 800d106:	4955      	ldr	r1, [pc, #340]	; (800d25c <__ieee754_pow+0x224>)
 800d108:	f7f3 fb10 	bl	800072c <__aeabi_ddiv>
 800d10c:	e02f      	b.n	800d16e <__ieee754_pow+0x136>
 800d10e:	2300      	movs	r3, #0
 800d110:	9300      	str	r3, [sp, #0]
 800d112:	2a00      	cmp	r2, #0
 800d114:	d13d      	bne.n	800d192 <__ieee754_pow+0x15a>
 800d116:	4b4e      	ldr	r3, [pc, #312]	; (800d250 <__ieee754_pow+0x218>)
 800d118:	429d      	cmp	r5, r3
 800d11a:	d1eb      	bne.n	800d0f4 <__ieee754_pow+0xbc>
 800d11c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d120:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d124:	ea53 030a 	orrs.w	r3, r3, sl
 800d128:	f000 8454 	beq.w	800d9d4 <__ieee754_pow+0x99c>
 800d12c:	4b4c      	ldr	r3, [pc, #304]	; (800d260 <__ieee754_pow+0x228>)
 800d12e:	429c      	cmp	r4, r3
 800d130:	dd0d      	ble.n	800d14e <__ieee754_pow+0x116>
 800d132:	2e00      	cmp	r6, #0
 800d134:	f280 8454 	bge.w	800d9e0 <__ieee754_pow+0x9a8>
 800d138:	f04f 0b00 	mov.w	fp, #0
 800d13c:	f04f 0c00 	mov.w	ip, #0
 800d140:	4658      	mov	r0, fp
 800d142:	4661      	mov	r1, ip
 800d144:	b013      	add	sp, #76	; 0x4c
 800d146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d14a:	2302      	movs	r3, #2
 800d14c:	e7e0      	b.n	800d110 <__ieee754_pow+0xd8>
 800d14e:	2e00      	cmp	r6, #0
 800d150:	daf2      	bge.n	800d138 <__ieee754_pow+0x100>
 800d152:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800d156:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800d15a:	e7f1      	b.n	800d140 <__ieee754_pow+0x108>
 800d15c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800d160:	d108      	bne.n	800d174 <__ieee754_pow+0x13c>
 800d162:	463a      	mov	r2, r7
 800d164:	4643      	mov	r3, r8
 800d166:	4638      	mov	r0, r7
 800d168:	4641      	mov	r1, r8
 800d16a:	f7f3 f9b5 	bl	80004d8 <__aeabi_dmul>
 800d16e:	4683      	mov	fp, r0
 800d170:	468c      	mov	ip, r1
 800d172:	e7e5      	b.n	800d140 <__ieee754_pow+0x108>
 800d174:	4b3b      	ldr	r3, [pc, #236]	; (800d264 <__ieee754_pow+0x22c>)
 800d176:	429e      	cmp	r6, r3
 800d178:	d10b      	bne.n	800d192 <__ieee754_pow+0x15a>
 800d17a:	f1b9 0f00 	cmp.w	r9, #0
 800d17e:	db08      	blt.n	800d192 <__ieee754_pow+0x15a>
 800d180:	4638      	mov	r0, r7
 800d182:	4641      	mov	r1, r8
 800d184:	b013      	add	sp, #76	; 0x4c
 800d186:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d18a:	f000 bc6b 	b.w	800da64 <__ieee754_sqrt>
 800d18e:	2300      	movs	r3, #0
 800d190:	9300      	str	r3, [sp, #0]
 800d192:	4638      	mov	r0, r7
 800d194:	4641      	mov	r1, r8
 800d196:	f000 fe9d 	bl	800ded4 <fabs>
 800d19a:	4683      	mov	fp, r0
 800d19c:	468c      	mov	ip, r1
 800d19e:	f1ba 0f00 	cmp.w	sl, #0
 800d1a2:	d129      	bne.n	800d1f8 <__ieee754_pow+0x1c0>
 800d1a4:	b124      	cbz	r4, 800d1b0 <__ieee754_pow+0x178>
 800d1a6:	4b2d      	ldr	r3, [pc, #180]	; (800d25c <__ieee754_pow+0x224>)
 800d1a8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d123      	bne.n	800d1f8 <__ieee754_pow+0x1c0>
 800d1b0:	2e00      	cmp	r6, #0
 800d1b2:	da07      	bge.n	800d1c4 <__ieee754_pow+0x18c>
 800d1b4:	465a      	mov	r2, fp
 800d1b6:	4663      	mov	r3, ip
 800d1b8:	2000      	movs	r0, #0
 800d1ba:	4928      	ldr	r1, [pc, #160]	; (800d25c <__ieee754_pow+0x224>)
 800d1bc:	f7f3 fab6 	bl	800072c <__aeabi_ddiv>
 800d1c0:	4683      	mov	fp, r0
 800d1c2:	468c      	mov	ip, r1
 800d1c4:	f1b9 0f00 	cmp.w	r9, #0
 800d1c8:	daba      	bge.n	800d140 <__ieee754_pow+0x108>
 800d1ca:	9b00      	ldr	r3, [sp, #0]
 800d1cc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d1d0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d1d4:	4323      	orrs	r3, r4
 800d1d6:	d108      	bne.n	800d1ea <__ieee754_pow+0x1b2>
 800d1d8:	465a      	mov	r2, fp
 800d1da:	4663      	mov	r3, ip
 800d1dc:	4658      	mov	r0, fp
 800d1de:	4661      	mov	r1, ip
 800d1e0:	f7f2 ffc2 	bl	8000168 <__aeabi_dsub>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	e78e      	b.n	800d108 <__ieee754_pow+0xd0>
 800d1ea:	9b00      	ldr	r3, [sp, #0]
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d1a7      	bne.n	800d140 <__ieee754_pow+0x108>
 800d1f0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800d1f4:	469c      	mov	ip, r3
 800d1f6:	e7a3      	b.n	800d140 <__ieee754_pow+0x108>
 800d1f8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	930c      	str	r3, [sp, #48]	; 0x30
 800d200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d202:	9b00      	ldr	r3, [sp, #0]
 800d204:	4313      	orrs	r3, r2
 800d206:	d104      	bne.n	800d212 <__ieee754_pow+0x1da>
 800d208:	463a      	mov	r2, r7
 800d20a:	4643      	mov	r3, r8
 800d20c:	4638      	mov	r0, r7
 800d20e:	4641      	mov	r1, r8
 800d210:	e7e6      	b.n	800d1e0 <__ieee754_pow+0x1a8>
 800d212:	4b15      	ldr	r3, [pc, #84]	; (800d268 <__ieee754_pow+0x230>)
 800d214:	429d      	cmp	r5, r3
 800d216:	f340 80f9 	ble.w	800d40c <__ieee754_pow+0x3d4>
 800d21a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d21e:	429d      	cmp	r5, r3
 800d220:	4b0f      	ldr	r3, [pc, #60]	; (800d260 <__ieee754_pow+0x228>)
 800d222:	dd09      	ble.n	800d238 <__ieee754_pow+0x200>
 800d224:	429c      	cmp	r4, r3
 800d226:	dc0c      	bgt.n	800d242 <__ieee754_pow+0x20a>
 800d228:	2e00      	cmp	r6, #0
 800d22a:	da85      	bge.n	800d138 <__ieee754_pow+0x100>
 800d22c:	a306      	add	r3, pc, #24	; (adr r3, 800d248 <__ieee754_pow+0x210>)
 800d22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d232:	4610      	mov	r0, r2
 800d234:	4619      	mov	r1, r3
 800d236:	e798      	b.n	800d16a <__ieee754_pow+0x132>
 800d238:	429c      	cmp	r4, r3
 800d23a:	dbf5      	blt.n	800d228 <__ieee754_pow+0x1f0>
 800d23c:	4b07      	ldr	r3, [pc, #28]	; (800d25c <__ieee754_pow+0x224>)
 800d23e:	429c      	cmp	r4, r3
 800d240:	dd14      	ble.n	800d26c <__ieee754_pow+0x234>
 800d242:	2e00      	cmp	r6, #0
 800d244:	dcf2      	bgt.n	800d22c <__ieee754_pow+0x1f4>
 800d246:	e777      	b.n	800d138 <__ieee754_pow+0x100>
 800d248:	8800759c 	.word	0x8800759c
 800d24c:	7e37e43c 	.word	0x7e37e43c
 800d250:	7ff00000 	.word	0x7ff00000
 800d254:	0800e8c0 	.word	0x0800e8c0
 800d258:	433fffff 	.word	0x433fffff
 800d25c:	3ff00000 	.word	0x3ff00000
 800d260:	3fefffff 	.word	0x3fefffff
 800d264:	3fe00000 	.word	0x3fe00000
 800d268:	41e00000 	.word	0x41e00000
 800d26c:	4661      	mov	r1, ip
 800d26e:	2200      	movs	r2, #0
 800d270:	4658      	mov	r0, fp
 800d272:	4b61      	ldr	r3, [pc, #388]	; (800d3f8 <__ieee754_pow+0x3c0>)
 800d274:	f7f2 ff78 	bl	8000168 <__aeabi_dsub>
 800d278:	a355      	add	r3, pc, #340	; (adr r3, 800d3d0 <__ieee754_pow+0x398>)
 800d27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27e:	4604      	mov	r4, r0
 800d280:	460d      	mov	r5, r1
 800d282:	f7f3 f929 	bl	80004d8 <__aeabi_dmul>
 800d286:	a354      	add	r3, pc, #336	; (adr r3, 800d3d8 <__ieee754_pow+0x3a0>)
 800d288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28c:	4606      	mov	r6, r0
 800d28e:	460f      	mov	r7, r1
 800d290:	4620      	mov	r0, r4
 800d292:	4629      	mov	r1, r5
 800d294:	f7f3 f920 	bl	80004d8 <__aeabi_dmul>
 800d298:	2200      	movs	r2, #0
 800d29a:	4682      	mov	sl, r0
 800d29c:	468b      	mov	fp, r1
 800d29e:	4620      	mov	r0, r4
 800d2a0:	4629      	mov	r1, r5
 800d2a2:	4b56      	ldr	r3, [pc, #344]	; (800d3fc <__ieee754_pow+0x3c4>)
 800d2a4:	f7f3 f918 	bl	80004d8 <__aeabi_dmul>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	a14c      	add	r1, pc, #304	; (adr r1, 800d3e0 <__ieee754_pow+0x3a8>)
 800d2ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2b2:	f7f2 ff59 	bl	8000168 <__aeabi_dsub>
 800d2b6:	4622      	mov	r2, r4
 800d2b8:	462b      	mov	r3, r5
 800d2ba:	f7f3 f90d 	bl	80004d8 <__aeabi_dmul>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	2000      	movs	r0, #0
 800d2c4:	494e      	ldr	r1, [pc, #312]	; (800d400 <__ieee754_pow+0x3c8>)
 800d2c6:	f7f2 ff4f 	bl	8000168 <__aeabi_dsub>
 800d2ca:	4622      	mov	r2, r4
 800d2cc:	462b      	mov	r3, r5
 800d2ce:	4680      	mov	r8, r0
 800d2d0:	4689      	mov	r9, r1
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	4629      	mov	r1, r5
 800d2d6:	f7f3 f8ff 	bl	80004d8 <__aeabi_dmul>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	460b      	mov	r3, r1
 800d2de:	4640      	mov	r0, r8
 800d2e0:	4649      	mov	r1, r9
 800d2e2:	f7f3 f8f9 	bl	80004d8 <__aeabi_dmul>
 800d2e6:	a340      	add	r3, pc, #256	; (adr r3, 800d3e8 <__ieee754_pow+0x3b0>)
 800d2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ec:	f7f3 f8f4 	bl	80004d8 <__aeabi_dmul>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	4650      	mov	r0, sl
 800d2f6:	4659      	mov	r1, fp
 800d2f8:	f7f2 ff36 	bl	8000168 <__aeabi_dsub>
 800d2fc:	f04f 0a00 	mov.w	sl, #0
 800d300:	4602      	mov	r2, r0
 800d302:	460b      	mov	r3, r1
 800d304:	4604      	mov	r4, r0
 800d306:	460d      	mov	r5, r1
 800d308:	4630      	mov	r0, r6
 800d30a:	4639      	mov	r1, r7
 800d30c:	f7f2 ff2e 	bl	800016c <__adddf3>
 800d310:	4632      	mov	r2, r6
 800d312:	463b      	mov	r3, r7
 800d314:	4650      	mov	r0, sl
 800d316:	468b      	mov	fp, r1
 800d318:	f7f2 ff26 	bl	8000168 <__aeabi_dsub>
 800d31c:	4602      	mov	r2, r0
 800d31e:	460b      	mov	r3, r1
 800d320:	4620      	mov	r0, r4
 800d322:	4629      	mov	r1, r5
 800d324:	f7f2 ff20 	bl	8000168 <__aeabi_dsub>
 800d328:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d32c:	9b00      	ldr	r3, [sp, #0]
 800d32e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d330:	3b01      	subs	r3, #1
 800d332:	4313      	orrs	r3, r2
 800d334:	f04f 0600 	mov.w	r6, #0
 800d338:	f04f 0200 	mov.w	r2, #0
 800d33c:	bf0c      	ite	eq
 800d33e:	4b31      	ldreq	r3, [pc, #196]	; (800d404 <__ieee754_pow+0x3cc>)
 800d340:	4b2d      	ldrne	r3, [pc, #180]	; (800d3f8 <__ieee754_pow+0x3c0>)
 800d342:	4604      	mov	r4, r0
 800d344:	460d      	mov	r5, r1
 800d346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d34a:	e9cd 2300 	strd	r2, r3, [sp]
 800d34e:	4632      	mov	r2, r6
 800d350:	463b      	mov	r3, r7
 800d352:	f7f2 ff09 	bl	8000168 <__aeabi_dsub>
 800d356:	4652      	mov	r2, sl
 800d358:	465b      	mov	r3, fp
 800d35a:	f7f3 f8bd 	bl	80004d8 <__aeabi_dmul>
 800d35e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d362:	4680      	mov	r8, r0
 800d364:	4689      	mov	r9, r1
 800d366:	4620      	mov	r0, r4
 800d368:	4629      	mov	r1, r5
 800d36a:	f7f3 f8b5 	bl	80004d8 <__aeabi_dmul>
 800d36e:	4602      	mov	r2, r0
 800d370:	460b      	mov	r3, r1
 800d372:	4640      	mov	r0, r8
 800d374:	4649      	mov	r1, r9
 800d376:	f7f2 fef9 	bl	800016c <__adddf3>
 800d37a:	4632      	mov	r2, r6
 800d37c:	463b      	mov	r3, r7
 800d37e:	4680      	mov	r8, r0
 800d380:	4689      	mov	r9, r1
 800d382:	4650      	mov	r0, sl
 800d384:	4659      	mov	r1, fp
 800d386:	f7f3 f8a7 	bl	80004d8 <__aeabi_dmul>
 800d38a:	4604      	mov	r4, r0
 800d38c:	460d      	mov	r5, r1
 800d38e:	460b      	mov	r3, r1
 800d390:	4602      	mov	r2, r0
 800d392:	4649      	mov	r1, r9
 800d394:	4640      	mov	r0, r8
 800d396:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d39a:	f7f2 fee7 	bl	800016c <__adddf3>
 800d39e:	4b1a      	ldr	r3, [pc, #104]	; (800d408 <__ieee754_pow+0x3d0>)
 800d3a0:	4682      	mov	sl, r0
 800d3a2:	4299      	cmp	r1, r3
 800d3a4:	460f      	mov	r7, r1
 800d3a6:	460e      	mov	r6, r1
 800d3a8:	f340 82ed 	ble.w	800d986 <__ieee754_pow+0x94e>
 800d3ac:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d3b0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d3b4:	4303      	orrs	r3, r0
 800d3b6:	f000 81e7 	beq.w	800d788 <__ieee754_pow+0x750>
 800d3ba:	a30d      	add	r3, pc, #52	; (adr r3, 800d3f0 <__ieee754_pow+0x3b8>)
 800d3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3c4:	f7f3 f888 	bl	80004d8 <__aeabi_dmul>
 800d3c8:	a309      	add	r3, pc, #36	; (adr r3, 800d3f0 <__ieee754_pow+0x3b8>)
 800d3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ce:	e6cc      	b.n	800d16a <__ieee754_pow+0x132>
 800d3d0:	60000000 	.word	0x60000000
 800d3d4:	3ff71547 	.word	0x3ff71547
 800d3d8:	f85ddf44 	.word	0xf85ddf44
 800d3dc:	3e54ae0b 	.word	0x3e54ae0b
 800d3e0:	55555555 	.word	0x55555555
 800d3e4:	3fd55555 	.word	0x3fd55555
 800d3e8:	652b82fe 	.word	0x652b82fe
 800d3ec:	3ff71547 	.word	0x3ff71547
 800d3f0:	8800759c 	.word	0x8800759c
 800d3f4:	7e37e43c 	.word	0x7e37e43c
 800d3f8:	3ff00000 	.word	0x3ff00000
 800d3fc:	3fd00000 	.word	0x3fd00000
 800d400:	3fe00000 	.word	0x3fe00000
 800d404:	bff00000 	.word	0xbff00000
 800d408:	408fffff 	.word	0x408fffff
 800d40c:	4bd4      	ldr	r3, [pc, #848]	; (800d760 <__ieee754_pow+0x728>)
 800d40e:	2200      	movs	r2, #0
 800d410:	ea09 0303 	and.w	r3, r9, r3
 800d414:	b943      	cbnz	r3, 800d428 <__ieee754_pow+0x3f0>
 800d416:	4658      	mov	r0, fp
 800d418:	4661      	mov	r1, ip
 800d41a:	4bd2      	ldr	r3, [pc, #840]	; (800d764 <__ieee754_pow+0x72c>)
 800d41c:	f7f3 f85c 	bl	80004d8 <__aeabi_dmul>
 800d420:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d424:	4683      	mov	fp, r0
 800d426:	460c      	mov	r4, r1
 800d428:	1523      	asrs	r3, r4, #20
 800d42a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d42e:	4413      	add	r3, r2
 800d430:	930b      	str	r3, [sp, #44]	; 0x2c
 800d432:	4bcd      	ldr	r3, [pc, #820]	; (800d768 <__ieee754_pow+0x730>)
 800d434:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d438:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d43c:	429c      	cmp	r4, r3
 800d43e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d442:	dd08      	ble.n	800d456 <__ieee754_pow+0x41e>
 800d444:	4bc9      	ldr	r3, [pc, #804]	; (800d76c <__ieee754_pow+0x734>)
 800d446:	429c      	cmp	r4, r3
 800d448:	f340 819c 	ble.w	800d784 <__ieee754_pow+0x74c>
 800d44c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d44e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d452:	3301      	adds	r3, #1
 800d454:	930b      	str	r3, [sp, #44]	; 0x2c
 800d456:	2600      	movs	r6, #0
 800d458:	00f3      	lsls	r3, r6, #3
 800d45a:	930d      	str	r3, [sp, #52]	; 0x34
 800d45c:	4bc4      	ldr	r3, [pc, #784]	; (800d770 <__ieee754_pow+0x738>)
 800d45e:	4658      	mov	r0, fp
 800d460:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d464:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d468:	4629      	mov	r1, r5
 800d46a:	461a      	mov	r2, r3
 800d46c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800d470:	4623      	mov	r3, r4
 800d472:	f7f2 fe79 	bl	8000168 <__aeabi_dsub>
 800d476:	46da      	mov	sl, fp
 800d478:	462b      	mov	r3, r5
 800d47a:	4652      	mov	r2, sl
 800d47c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d480:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d484:	f7f2 fe72 	bl	800016c <__adddf3>
 800d488:	4602      	mov	r2, r0
 800d48a:	460b      	mov	r3, r1
 800d48c:	2000      	movs	r0, #0
 800d48e:	49b9      	ldr	r1, [pc, #740]	; (800d774 <__ieee754_pow+0x73c>)
 800d490:	f7f3 f94c 	bl	800072c <__aeabi_ddiv>
 800d494:	4602      	mov	r2, r0
 800d496:	460b      	mov	r3, r1
 800d498:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d49c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d4a0:	f7f3 f81a 	bl	80004d8 <__aeabi_dmul>
 800d4a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d4a8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d4ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	46ab      	mov	fp, r5
 800d4b6:	106d      	asrs	r5, r5, #1
 800d4b8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d4bc:	9304      	str	r3, [sp, #16]
 800d4be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d4c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d4c6:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800d4ca:	4640      	mov	r0, r8
 800d4cc:	4649      	mov	r1, r9
 800d4ce:	4614      	mov	r4, r2
 800d4d0:	461d      	mov	r5, r3
 800d4d2:	f7f3 f801 	bl	80004d8 <__aeabi_dmul>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	460b      	mov	r3, r1
 800d4da:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d4de:	f7f2 fe43 	bl	8000168 <__aeabi_dsub>
 800d4e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d4e6:	4606      	mov	r6, r0
 800d4e8:	460f      	mov	r7, r1
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	4629      	mov	r1, r5
 800d4ee:	f7f2 fe3b 	bl	8000168 <__aeabi_dsub>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	4650      	mov	r0, sl
 800d4f8:	4659      	mov	r1, fp
 800d4fa:	f7f2 fe35 	bl	8000168 <__aeabi_dsub>
 800d4fe:	4642      	mov	r2, r8
 800d500:	464b      	mov	r3, r9
 800d502:	f7f2 ffe9 	bl	80004d8 <__aeabi_dmul>
 800d506:	4602      	mov	r2, r0
 800d508:	460b      	mov	r3, r1
 800d50a:	4630      	mov	r0, r6
 800d50c:	4639      	mov	r1, r7
 800d50e:	f7f2 fe2b 	bl	8000168 <__aeabi_dsub>
 800d512:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d516:	f7f2 ffdf 	bl	80004d8 <__aeabi_dmul>
 800d51a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d51e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d522:	4610      	mov	r0, r2
 800d524:	4619      	mov	r1, r3
 800d526:	f7f2 ffd7 	bl	80004d8 <__aeabi_dmul>
 800d52a:	a37b      	add	r3, pc, #492	; (adr r3, 800d718 <__ieee754_pow+0x6e0>)
 800d52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d530:	4604      	mov	r4, r0
 800d532:	460d      	mov	r5, r1
 800d534:	f7f2 ffd0 	bl	80004d8 <__aeabi_dmul>
 800d538:	a379      	add	r3, pc, #484	; (adr r3, 800d720 <__ieee754_pow+0x6e8>)
 800d53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53e:	f7f2 fe15 	bl	800016c <__adddf3>
 800d542:	4622      	mov	r2, r4
 800d544:	462b      	mov	r3, r5
 800d546:	f7f2 ffc7 	bl	80004d8 <__aeabi_dmul>
 800d54a:	a377      	add	r3, pc, #476	; (adr r3, 800d728 <__ieee754_pow+0x6f0>)
 800d54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d550:	f7f2 fe0c 	bl	800016c <__adddf3>
 800d554:	4622      	mov	r2, r4
 800d556:	462b      	mov	r3, r5
 800d558:	f7f2 ffbe 	bl	80004d8 <__aeabi_dmul>
 800d55c:	a374      	add	r3, pc, #464	; (adr r3, 800d730 <__ieee754_pow+0x6f8>)
 800d55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d562:	f7f2 fe03 	bl	800016c <__adddf3>
 800d566:	4622      	mov	r2, r4
 800d568:	462b      	mov	r3, r5
 800d56a:	f7f2 ffb5 	bl	80004d8 <__aeabi_dmul>
 800d56e:	a372      	add	r3, pc, #456	; (adr r3, 800d738 <__ieee754_pow+0x700>)
 800d570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d574:	f7f2 fdfa 	bl	800016c <__adddf3>
 800d578:	4622      	mov	r2, r4
 800d57a:	462b      	mov	r3, r5
 800d57c:	f7f2 ffac 	bl	80004d8 <__aeabi_dmul>
 800d580:	a36f      	add	r3, pc, #444	; (adr r3, 800d740 <__ieee754_pow+0x708>)
 800d582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d586:	f7f2 fdf1 	bl	800016c <__adddf3>
 800d58a:	4622      	mov	r2, r4
 800d58c:	4606      	mov	r6, r0
 800d58e:	460f      	mov	r7, r1
 800d590:	462b      	mov	r3, r5
 800d592:	4620      	mov	r0, r4
 800d594:	4629      	mov	r1, r5
 800d596:	f7f2 ff9f 	bl	80004d8 <__aeabi_dmul>
 800d59a:	4602      	mov	r2, r0
 800d59c:	460b      	mov	r3, r1
 800d59e:	4630      	mov	r0, r6
 800d5a0:	4639      	mov	r1, r7
 800d5a2:	f7f2 ff99 	bl	80004d8 <__aeabi_dmul>
 800d5a6:	4604      	mov	r4, r0
 800d5a8:	460d      	mov	r5, r1
 800d5aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5ae:	4642      	mov	r2, r8
 800d5b0:	464b      	mov	r3, r9
 800d5b2:	f7f2 fddb 	bl	800016c <__adddf3>
 800d5b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d5ba:	f7f2 ff8d 	bl	80004d8 <__aeabi_dmul>
 800d5be:	4622      	mov	r2, r4
 800d5c0:	462b      	mov	r3, r5
 800d5c2:	f7f2 fdd3 	bl	800016c <__adddf3>
 800d5c6:	4642      	mov	r2, r8
 800d5c8:	4606      	mov	r6, r0
 800d5ca:	460f      	mov	r7, r1
 800d5cc:	464b      	mov	r3, r9
 800d5ce:	4640      	mov	r0, r8
 800d5d0:	4649      	mov	r1, r9
 800d5d2:	f7f2 ff81 	bl	80004d8 <__aeabi_dmul>
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	4b67      	ldr	r3, [pc, #412]	; (800d778 <__ieee754_pow+0x740>)
 800d5da:	4682      	mov	sl, r0
 800d5dc:	468b      	mov	fp, r1
 800d5de:	f7f2 fdc5 	bl	800016c <__adddf3>
 800d5e2:	4632      	mov	r2, r6
 800d5e4:	463b      	mov	r3, r7
 800d5e6:	f7f2 fdc1 	bl	800016c <__adddf3>
 800d5ea:	9c04      	ldr	r4, [sp, #16]
 800d5ec:	460d      	mov	r5, r1
 800d5ee:	4622      	mov	r2, r4
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	4640      	mov	r0, r8
 800d5f4:	4649      	mov	r1, r9
 800d5f6:	f7f2 ff6f 	bl	80004d8 <__aeabi_dmul>
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	4680      	mov	r8, r0
 800d5fe:	4689      	mov	r9, r1
 800d600:	4620      	mov	r0, r4
 800d602:	4629      	mov	r1, r5
 800d604:	4b5c      	ldr	r3, [pc, #368]	; (800d778 <__ieee754_pow+0x740>)
 800d606:	f7f2 fdaf 	bl	8000168 <__aeabi_dsub>
 800d60a:	4652      	mov	r2, sl
 800d60c:	465b      	mov	r3, fp
 800d60e:	f7f2 fdab 	bl	8000168 <__aeabi_dsub>
 800d612:	4602      	mov	r2, r0
 800d614:	460b      	mov	r3, r1
 800d616:	4630      	mov	r0, r6
 800d618:	4639      	mov	r1, r7
 800d61a:	f7f2 fda5 	bl	8000168 <__aeabi_dsub>
 800d61e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d622:	f7f2 ff59 	bl	80004d8 <__aeabi_dmul>
 800d626:	4622      	mov	r2, r4
 800d628:	4606      	mov	r6, r0
 800d62a:	460f      	mov	r7, r1
 800d62c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d630:	462b      	mov	r3, r5
 800d632:	f7f2 ff51 	bl	80004d8 <__aeabi_dmul>
 800d636:	4602      	mov	r2, r0
 800d638:	460b      	mov	r3, r1
 800d63a:	4630      	mov	r0, r6
 800d63c:	4639      	mov	r1, r7
 800d63e:	f7f2 fd95 	bl	800016c <__adddf3>
 800d642:	4606      	mov	r6, r0
 800d644:	460f      	mov	r7, r1
 800d646:	4602      	mov	r2, r0
 800d648:	460b      	mov	r3, r1
 800d64a:	4640      	mov	r0, r8
 800d64c:	4649      	mov	r1, r9
 800d64e:	f7f2 fd8d 	bl	800016c <__adddf3>
 800d652:	a33d      	add	r3, pc, #244	; (adr r3, 800d748 <__ieee754_pow+0x710>)
 800d654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d658:	9c04      	ldr	r4, [sp, #16]
 800d65a:	460d      	mov	r5, r1
 800d65c:	4620      	mov	r0, r4
 800d65e:	f7f2 ff3b 	bl	80004d8 <__aeabi_dmul>
 800d662:	4642      	mov	r2, r8
 800d664:	464b      	mov	r3, r9
 800d666:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d66a:	4620      	mov	r0, r4
 800d66c:	4629      	mov	r1, r5
 800d66e:	f7f2 fd7b 	bl	8000168 <__aeabi_dsub>
 800d672:	4602      	mov	r2, r0
 800d674:	460b      	mov	r3, r1
 800d676:	4630      	mov	r0, r6
 800d678:	4639      	mov	r1, r7
 800d67a:	f7f2 fd75 	bl	8000168 <__aeabi_dsub>
 800d67e:	a334      	add	r3, pc, #208	; (adr r3, 800d750 <__ieee754_pow+0x718>)
 800d680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d684:	f7f2 ff28 	bl	80004d8 <__aeabi_dmul>
 800d688:	a333      	add	r3, pc, #204	; (adr r3, 800d758 <__ieee754_pow+0x720>)
 800d68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68e:	4606      	mov	r6, r0
 800d690:	460f      	mov	r7, r1
 800d692:	4620      	mov	r0, r4
 800d694:	4629      	mov	r1, r5
 800d696:	f7f2 ff1f 	bl	80004d8 <__aeabi_dmul>
 800d69a:	4602      	mov	r2, r0
 800d69c:	460b      	mov	r3, r1
 800d69e:	4630      	mov	r0, r6
 800d6a0:	4639      	mov	r1, r7
 800d6a2:	f7f2 fd63 	bl	800016c <__adddf3>
 800d6a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6a8:	4b34      	ldr	r3, [pc, #208]	; (800d77c <__ieee754_pow+0x744>)
 800d6aa:	4413      	add	r3, r2
 800d6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b0:	f7f2 fd5c 	bl	800016c <__adddf3>
 800d6b4:	4680      	mov	r8, r0
 800d6b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d6b8:	4689      	mov	r9, r1
 800d6ba:	f7f2 fea3 	bl	8000404 <__aeabi_i2d>
 800d6be:	4604      	mov	r4, r0
 800d6c0:	460d      	mov	r5, r1
 800d6c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6c4:	4b2e      	ldr	r3, [pc, #184]	; (800d780 <__ieee754_pow+0x748>)
 800d6c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6ca:	4413      	add	r3, r2
 800d6cc:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d6d0:	4642      	mov	r2, r8
 800d6d2:	464b      	mov	r3, r9
 800d6d4:	f7f2 fd4a 	bl	800016c <__adddf3>
 800d6d8:	4632      	mov	r2, r6
 800d6da:	463b      	mov	r3, r7
 800d6dc:	f7f2 fd46 	bl	800016c <__adddf3>
 800d6e0:	4622      	mov	r2, r4
 800d6e2:	462b      	mov	r3, r5
 800d6e4:	f7f2 fd42 	bl	800016c <__adddf3>
 800d6e8:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d6ec:	4622      	mov	r2, r4
 800d6ee:	462b      	mov	r3, r5
 800d6f0:	4650      	mov	r0, sl
 800d6f2:	468b      	mov	fp, r1
 800d6f4:	f7f2 fd38 	bl	8000168 <__aeabi_dsub>
 800d6f8:	4632      	mov	r2, r6
 800d6fa:	463b      	mov	r3, r7
 800d6fc:	f7f2 fd34 	bl	8000168 <__aeabi_dsub>
 800d700:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d704:	f7f2 fd30 	bl	8000168 <__aeabi_dsub>
 800d708:	4602      	mov	r2, r0
 800d70a:	460b      	mov	r3, r1
 800d70c:	4640      	mov	r0, r8
 800d70e:	4649      	mov	r1, r9
 800d710:	e608      	b.n	800d324 <__ieee754_pow+0x2ec>
 800d712:	bf00      	nop
 800d714:	f3af 8000 	nop.w
 800d718:	4a454eef 	.word	0x4a454eef
 800d71c:	3fca7e28 	.word	0x3fca7e28
 800d720:	93c9db65 	.word	0x93c9db65
 800d724:	3fcd864a 	.word	0x3fcd864a
 800d728:	a91d4101 	.word	0xa91d4101
 800d72c:	3fd17460 	.word	0x3fd17460
 800d730:	518f264d 	.word	0x518f264d
 800d734:	3fd55555 	.word	0x3fd55555
 800d738:	db6fabff 	.word	0xdb6fabff
 800d73c:	3fdb6db6 	.word	0x3fdb6db6
 800d740:	33333303 	.word	0x33333303
 800d744:	3fe33333 	.word	0x3fe33333
 800d748:	e0000000 	.word	0xe0000000
 800d74c:	3feec709 	.word	0x3feec709
 800d750:	dc3a03fd 	.word	0xdc3a03fd
 800d754:	3feec709 	.word	0x3feec709
 800d758:	145b01f5 	.word	0x145b01f5
 800d75c:	be3e2fe0 	.word	0xbe3e2fe0
 800d760:	7ff00000 	.word	0x7ff00000
 800d764:	43400000 	.word	0x43400000
 800d768:	0003988e 	.word	0x0003988e
 800d76c:	000bb679 	.word	0x000bb679
 800d770:	0800e968 	.word	0x0800e968
 800d774:	3ff00000 	.word	0x3ff00000
 800d778:	40080000 	.word	0x40080000
 800d77c:	0800e988 	.word	0x0800e988
 800d780:	0800e978 	.word	0x0800e978
 800d784:	2601      	movs	r6, #1
 800d786:	e667      	b.n	800d458 <__ieee754_pow+0x420>
 800d788:	a39d      	add	r3, pc, #628	; (adr r3, 800da00 <__ieee754_pow+0x9c8>)
 800d78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78e:	4640      	mov	r0, r8
 800d790:	4649      	mov	r1, r9
 800d792:	f7f2 fceb 	bl	800016c <__adddf3>
 800d796:	4622      	mov	r2, r4
 800d798:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d79c:	462b      	mov	r3, r5
 800d79e:	4650      	mov	r0, sl
 800d7a0:	4639      	mov	r1, r7
 800d7a2:	f7f2 fce1 	bl	8000168 <__aeabi_dsub>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7ae:	f7f3 f923 	bl	80009f8 <__aeabi_dcmpgt>
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	f47f ae01 	bne.w	800d3ba <__ieee754_pow+0x382>
 800d7b8:	4aa5      	ldr	r2, [pc, #660]	; (800da50 <__ieee754_pow+0xa18>)
 800d7ba:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	f340 8103 	ble.w	800d9ca <__ieee754_pow+0x992>
 800d7c4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d7c8:	2000      	movs	r0, #0
 800d7ca:	151b      	asrs	r3, r3, #20
 800d7cc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d7d0:	fa4a f303 	asr.w	r3, sl, r3
 800d7d4:	4433      	add	r3, r6
 800d7d6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d7da:	4f9e      	ldr	r7, [pc, #632]	; (800da54 <__ieee754_pow+0xa1c>)
 800d7dc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d7e0:	4117      	asrs	r7, r2
 800d7e2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d7e6:	ea23 0107 	bic.w	r1, r3, r7
 800d7ea:	f1c2 0214 	rsb	r2, r2, #20
 800d7ee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d7f2:	460b      	mov	r3, r1
 800d7f4:	fa4a fa02 	asr.w	sl, sl, r2
 800d7f8:	2e00      	cmp	r6, #0
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	4629      	mov	r1, r5
 800d7fe:	4620      	mov	r0, r4
 800d800:	bfb8      	it	lt
 800d802:	f1ca 0a00 	rsblt	sl, sl, #0
 800d806:	f7f2 fcaf 	bl	8000168 <__aeabi_dsub>
 800d80a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d80e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d812:	2400      	movs	r4, #0
 800d814:	4642      	mov	r2, r8
 800d816:	464b      	mov	r3, r9
 800d818:	f7f2 fca8 	bl	800016c <__adddf3>
 800d81c:	a37a      	add	r3, pc, #488	; (adr r3, 800da08 <__ieee754_pow+0x9d0>)
 800d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d822:	4620      	mov	r0, r4
 800d824:	460d      	mov	r5, r1
 800d826:	f7f2 fe57 	bl	80004d8 <__aeabi_dmul>
 800d82a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d82e:	4606      	mov	r6, r0
 800d830:	460f      	mov	r7, r1
 800d832:	4620      	mov	r0, r4
 800d834:	4629      	mov	r1, r5
 800d836:	f7f2 fc97 	bl	8000168 <__aeabi_dsub>
 800d83a:	4602      	mov	r2, r0
 800d83c:	460b      	mov	r3, r1
 800d83e:	4640      	mov	r0, r8
 800d840:	4649      	mov	r1, r9
 800d842:	f7f2 fc91 	bl	8000168 <__aeabi_dsub>
 800d846:	a372      	add	r3, pc, #456	; (adr r3, 800da10 <__ieee754_pow+0x9d8>)
 800d848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84c:	f7f2 fe44 	bl	80004d8 <__aeabi_dmul>
 800d850:	a371      	add	r3, pc, #452	; (adr r3, 800da18 <__ieee754_pow+0x9e0>)
 800d852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d856:	4680      	mov	r8, r0
 800d858:	4689      	mov	r9, r1
 800d85a:	4620      	mov	r0, r4
 800d85c:	4629      	mov	r1, r5
 800d85e:	f7f2 fe3b 	bl	80004d8 <__aeabi_dmul>
 800d862:	4602      	mov	r2, r0
 800d864:	460b      	mov	r3, r1
 800d866:	4640      	mov	r0, r8
 800d868:	4649      	mov	r1, r9
 800d86a:	f7f2 fc7f 	bl	800016c <__adddf3>
 800d86e:	4604      	mov	r4, r0
 800d870:	460d      	mov	r5, r1
 800d872:	4602      	mov	r2, r0
 800d874:	460b      	mov	r3, r1
 800d876:	4630      	mov	r0, r6
 800d878:	4639      	mov	r1, r7
 800d87a:	f7f2 fc77 	bl	800016c <__adddf3>
 800d87e:	4632      	mov	r2, r6
 800d880:	463b      	mov	r3, r7
 800d882:	4680      	mov	r8, r0
 800d884:	4689      	mov	r9, r1
 800d886:	f7f2 fc6f 	bl	8000168 <__aeabi_dsub>
 800d88a:	4602      	mov	r2, r0
 800d88c:	460b      	mov	r3, r1
 800d88e:	4620      	mov	r0, r4
 800d890:	4629      	mov	r1, r5
 800d892:	f7f2 fc69 	bl	8000168 <__aeabi_dsub>
 800d896:	4642      	mov	r2, r8
 800d898:	4606      	mov	r6, r0
 800d89a:	460f      	mov	r7, r1
 800d89c:	464b      	mov	r3, r9
 800d89e:	4640      	mov	r0, r8
 800d8a0:	4649      	mov	r1, r9
 800d8a2:	f7f2 fe19 	bl	80004d8 <__aeabi_dmul>
 800d8a6:	a35e      	add	r3, pc, #376	; (adr r3, 800da20 <__ieee754_pow+0x9e8>)
 800d8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ac:	4604      	mov	r4, r0
 800d8ae:	460d      	mov	r5, r1
 800d8b0:	f7f2 fe12 	bl	80004d8 <__aeabi_dmul>
 800d8b4:	a35c      	add	r3, pc, #368	; (adr r3, 800da28 <__ieee754_pow+0x9f0>)
 800d8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ba:	f7f2 fc55 	bl	8000168 <__aeabi_dsub>
 800d8be:	4622      	mov	r2, r4
 800d8c0:	462b      	mov	r3, r5
 800d8c2:	f7f2 fe09 	bl	80004d8 <__aeabi_dmul>
 800d8c6:	a35a      	add	r3, pc, #360	; (adr r3, 800da30 <__ieee754_pow+0x9f8>)
 800d8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8cc:	f7f2 fc4e 	bl	800016c <__adddf3>
 800d8d0:	4622      	mov	r2, r4
 800d8d2:	462b      	mov	r3, r5
 800d8d4:	f7f2 fe00 	bl	80004d8 <__aeabi_dmul>
 800d8d8:	a357      	add	r3, pc, #348	; (adr r3, 800da38 <__ieee754_pow+0xa00>)
 800d8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8de:	f7f2 fc43 	bl	8000168 <__aeabi_dsub>
 800d8e2:	4622      	mov	r2, r4
 800d8e4:	462b      	mov	r3, r5
 800d8e6:	f7f2 fdf7 	bl	80004d8 <__aeabi_dmul>
 800d8ea:	a355      	add	r3, pc, #340	; (adr r3, 800da40 <__ieee754_pow+0xa08>)
 800d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f0:	f7f2 fc3c 	bl	800016c <__adddf3>
 800d8f4:	4622      	mov	r2, r4
 800d8f6:	462b      	mov	r3, r5
 800d8f8:	f7f2 fdee 	bl	80004d8 <__aeabi_dmul>
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	460b      	mov	r3, r1
 800d900:	4640      	mov	r0, r8
 800d902:	4649      	mov	r1, r9
 800d904:	f7f2 fc30 	bl	8000168 <__aeabi_dsub>
 800d908:	4604      	mov	r4, r0
 800d90a:	460d      	mov	r5, r1
 800d90c:	4602      	mov	r2, r0
 800d90e:	460b      	mov	r3, r1
 800d910:	4640      	mov	r0, r8
 800d912:	4649      	mov	r1, r9
 800d914:	f7f2 fde0 	bl	80004d8 <__aeabi_dmul>
 800d918:	2200      	movs	r2, #0
 800d91a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d91e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d922:	4620      	mov	r0, r4
 800d924:	4629      	mov	r1, r5
 800d926:	f7f2 fc1f 	bl	8000168 <__aeabi_dsub>
 800d92a:	4602      	mov	r2, r0
 800d92c:	460b      	mov	r3, r1
 800d92e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d932:	f7f2 fefb 	bl	800072c <__aeabi_ddiv>
 800d936:	4632      	mov	r2, r6
 800d938:	4604      	mov	r4, r0
 800d93a:	460d      	mov	r5, r1
 800d93c:	463b      	mov	r3, r7
 800d93e:	4640      	mov	r0, r8
 800d940:	4649      	mov	r1, r9
 800d942:	f7f2 fdc9 	bl	80004d8 <__aeabi_dmul>
 800d946:	4632      	mov	r2, r6
 800d948:	463b      	mov	r3, r7
 800d94a:	f7f2 fc0f 	bl	800016c <__adddf3>
 800d94e:	4602      	mov	r2, r0
 800d950:	460b      	mov	r3, r1
 800d952:	4620      	mov	r0, r4
 800d954:	4629      	mov	r1, r5
 800d956:	f7f2 fc07 	bl	8000168 <__aeabi_dsub>
 800d95a:	4642      	mov	r2, r8
 800d95c:	464b      	mov	r3, r9
 800d95e:	f7f2 fc03 	bl	8000168 <__aeabi_dsub>
 800d962:	4602      	mov	r2, r0
 800d964:	460b      	mov	r3, r1
 800d966:	2000      	movs	r0, #0
 800d968:	493b      	ldr	r1, [pc, #236]	; (800da58 <__ieee754_pow+0xa20>)
 800d96a:	f7f2 fbfd 	bl	8000168 <__aeabi_dsub>
 800d96e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d972:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d976:	da2b      	bge.n	800d9d0 <__ieee754_pow+0x998>
 800d978:	4652      	mov	r2, sl
 800d97a:	f000 fb41 	bl	800e000 <scalbn>
 800d97e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d982:	f7ff bbf2 	b.w	800d16a <__ieee754_pow+0x132>
 800d986:	4b35      	ldr	r3, [pc, #212]	; (800da5c <__ieee754_pow+0xa24>)
 800d988:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d98c:	429f      	cmp	r7, r3
 800d98e:	f77f af13 	ble.w	800d7b8 <__ieee754_pow+0x780>
 800d992:	4b33      	ldr	r3, [pc, #204]	; (800da60 <__ieee754_pow+0xa28>)
 800d994:	440b      	add	r3, r1
 800d996:	4303      	orrs	r3, r0
 800d998:	d00b      	beq.n	800d9b2 <__ieee754_pow+0x97a>
 800d99a:	a32b      	add	r3, pc, #172	; (adr r3, 800da48 <__ieee754_pow+0xa10>)
 800d99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9a4:	f7f2 fd98 	bl	80004d8 <__aeabi_dmul>
 800d9a8:	a327      	add	r3, pc, #156	; (adr r3, 800da48 <__ieee754_pow+0xa10>)
 800d9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ae:	f7ff bbdc 	b.w	800d16a <__ieee754_pow+0x132>
 800d9b2:	4622      	mov	r2, r4
 800d9b4:	462b      	mov	r3, r5
 800d9b6:	f7f2 fbd7 	bl	8000168 <__aeabi_dsub>
 800d9ba:	4642      	mov	r2, r8
 800d9bc:	464b      	mov	r3, r9
 800d9be:	f7f3 f811 	bl	80009e4 <__aeabi_dcmpge>
 800d9c2:	2800      	cmp	r0, #0
 800d9c4:	f43f aef8 	beq.w	800d7b8 <__ieee754_pow+0x780>
 800d9c8:	e7e7      	b.n	800d99a <__ieee754_pow+0x962>
 800d9ca:	f04f 0a00 	mov.w	sl, #0
 800d9ce:	e71e      	b.n	800d80e <__ieee754_pow+0x7d6>
 800d9d0:	4621      	mov	r1, r4
 800d9d2:	e7d4      	b.n	800d97e <__ieee754_pow+0x946>
 800d9d4:	f04f 0b00 	mov.w	fp, #0
 800d9d8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800da58 <__ieee754_pow+0xa20>
 800d9dc:	f7ff bbb0 	b.w	800d140 <__ieee754_pow+0x108>
 800d9e0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800d9e4:	f7ff bbac 	b.w	800d140 <__ieee754_pow+0x108>
 800d9e8:	4638      	mov	r0, r7
 800d9ea:	4641      	mov	r1, r8
 800d9ec:	f7ff bbbf 	b.w	800d16e <__ieee754_pow+0x136>
 800d9f0:	9200      	str	r2, [sp, #0]
 800d9f2:	f7ff bb7f 	b.w	800d0f4 <__ieee754_pow+0xbc>
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	f7ff bb69 	b.w	800d0ce <__ieee754_pow+0x96>
 800d9fc:	f3af 8000 	nop.w
 800da00:	652b82fe 	.word	0x652b82fe
 800da04:	3c971547 	.word	0x3c971547
 800da08:	00000000 	.word	0x00000000
 800da0c:	3fe62e43 	.word	0x3fe62e43
 800da10:	fefa39ef 	.word	0xfefa39ef
 800da14:	3fe62e42 	.word	0x3fe62e42
 800da18:	0ca86c39 	.word	0x0ca86c39
 800da1c:	be205c61 	.word	0xbe205c61
 800da20:	72bea4d0 	.word	0x72bea4d0
 800da24:	3e663769 	.word	0x3e663769
 800da28:	c5d26bf1 	.word	0xc5d26bf1
 800da2c:	3ebbbd41 	.word	0x3ebbbd41
 800da30:	af25de2c 	.word	0xaf25de2c
 800da34:	3f11566a 	.word	0x3f11566a
 800da38:	16bebd93 	.word	0x16bebd93
 800da3c:	3f66c16c 	.word	0x3f66c16c
 800da40:	5555553e 	.word	0x5555553e
 800da44:	3fc55555 	.word	0x3fc55555
 800da48:	c2f8f359 	.word	0xc2f8f359
 800da4c:	01a56e1f 	.word	0x01a56e1f
 800da50:	3fe00000 	.word	0x3fe00000
 800da54:	000fffff 	.word	0x000fffff
 800da58:	3ff00000 	.word	0x3ff00000
 800da5c:	4090cbff 	.word	0x4090cbff
 800da60:	3f6f3400 	.word	0x3f6f3400

0800da64 <__ieee754_sqrt>:
 800da64:	f8df c150 	ldr.w	ip, [pc, #336]	; 800dbb8 <__ieee754_sqrt+0x154>
 800da68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da6c:	ea3c 0c01 	bics.w	ip, ip, r1
 800da70:	460b      	mov	r3, r1
 800da72:	4606      	mov	r6, r0
 800da74:	460d      	mov	r5, r1
 800da76:	460a      	mov	r2, r1
 800da78:	4607      	mov	r7, r0
 800da7a:	4604      	mov	r4, r0
 800da7c:	d10e      	bne.n	800da9c <__ieee754_sqrt+0x38>
 800da7e:	4602      	mov	r2, r0
 800da80:	f7f2 fd2a 	bl	80004d8 <__aeabi_dmul>
 800da84:	4602      	mov	r2, r0
 800da86:	460b      	mov	r3, r1
 800da88:	4630      	mov	r0, r6
 800da8a:	4629      	mov	r1, r5
 800da8c:	f7f2 fb6e 	bl	800016c <__adddf3>
 800da90:	4606      	mov	r6, r0
 800da92:	460d      	mov	r5, r1
 800da94:	4630      	mov	r0, r6
 800da96:	4629      	mov	r1, r5
 800da98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da9c:	2900      	cmp	r1, #0
 800da9e:	dc0d      	bgt.n	800dabc <__ieee754_sqrt+0x58>
 800daa0:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800daa4:	ea5c 0707 	orrs.w	r7, ip, r7
 800daa8:	d0f4      	beq.n	800da94 <__ieee754_sqrt+0x30>
 800daaa:	b139      	cbz	r1, 800dabc <__ieee754_sqrt+0x58>
 800daac:	4602      	mov	r2, r0
 800daae:	f7f2 fb5b 	bl	8000168 <__aeabi_dsub>
 800dab2:	4602      	mov	r2, r0
 800dab4:	460b      	mov	r3, r1
 800dab6:	f7f2 fe39 	bl	800072c <__aeabi_ddiv>
 800daba:	e7e9      	b.n	800da90 <__ieee754_sqrt+0x2c>
 800dabc:	1512      	asrs	r2, r2, #20
 800dabe:	d074      	beq.n	800dbaa <__ieee754_sqrt+0x146>
 800dac0:	2000      	movs	r0, #0
 800dac2:	07d5      	lsls	r5, r2, #31
 800dac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dac8:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800dacc:	bf5e      	ittt	pl
 800dace:	0fe3      	lsrpl	r3, r4, #31
 800dad0:	0064      	lslpl	r4, r4, #1
 800dad2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800dad6:	0fe3      	lsrs	r3, r4, #31
 800dad8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800dadc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800dae0:	2516      	movs	r5, #22
 800dae2:	4601      	mov	r1, r0
 800dae4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dae8:	1076      	asrs	r6, r6, #1
 800daea:	0064      	lsls	r4, r4, #1
 800daec:	188f      	adds	r7, r1, r2
 800daee:	429f      	cmp	r7, r3
 800daf0:	bfde      	ittt	le
 800daf2:	1bdb      	suble	r3, r3, r7
 800daf4:	18b9      	addle	r1, r7, r2
 800daf6:	1880      	addle	r0, r0, r2
 800daf8:	005b      	lsls	r3, r3, #1
 800dafa:	3d01      	subs	r5, #1
 800dafc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800db00:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800db04:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800db08:	d1f0      	bne.n	800daec <__ieee754_sqrt+0x88>
 800db0a:	462a      	mov	r2, r5
 800db0c:	f04f 0e20 	mov.w	lr, #32
 800db10:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800db14:	428b      	cmp	r3, r1
 800db16:	eb07 0c05 	add.w	ip, r7, r5
 800db1a:	dc02      	bgt.n	800db22 <__ieee754_sqrt+0xbe>
 800db1c:	d113      	bne.n	800db46 <__ieee754_sqrt+0xe2>
 800db1e:	45a4      	cmp	ip, r4
 800db20:	d811      	bhi.n	800db46 <__ieee754_sqrt+0xe2>
 800db22:	f1bc 0f00 	cmp.w	ip, #0
 800db26:	eb0c 0507 	add.w	r5, ip, r7
 800db2a:	da43      	bge.n	800dbb4 <__ieee754_sqrt+0x150>
 800db2c:	2d00      	cmp	r5, #0
 800db2e:	db41      	blt.n	800dbb4 <__ieee754_sqrt+0x150>
 800db30:	f101 0801 	add.w	r8, r1, #1
 800db34:	1a5b      	subs	r3, r3, r1
 800db36:	4641      	mov	r1, r8
 800db38:	45a4      	cmp	ip, r4
 800db3a:	bf88      	it	hi
 800db3c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800db40:	eba4 040c 	sub.w	r4, r4, ip
 800db44:	443a      	add	r2, r7
 800db46:	005b      	lsls	r3, r3, #1
 800db48:	f1be 0e01 	subs.w	lr, lr, #1
 800db4c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800db50:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800db54:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800db58:	d1dc      	bne.n	800db14 <__ieee754_sqrt+0xb0>
 800db5a:	4323      	orrs	r3, r4
 800db5c:	d006      	beq.n	800db6c <__ieee754_sqrt+0x108>
 800db5e:	1c54      	adds	r4, r2, #1
 800db60:	bf0b      	itete	eq
 800db62:	4672      	moveq	r2, lr
 800db64:	3201      	addne	r2, #1
 800db66:	3001      	addeq	r0, #1
 800db68:	f022 0201 	bicne.w	r2, r2, #1
 800db6c:	1043      	asrs	r3, r0, #1
 800db6e:	07c1      	lsls	r1, r0, #31
 800db70:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800db74:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800db78:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800db7c:	bf48      	it	mi
 800db7e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800db82:	4610      	mov	r0, r2
 800db84:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800db88:	e782      	b.n	800da90 <__ieee754_sqrt+0x2c>
 800db8a:	0ae3      	lsrs	r3, r4, #11
 800db8c:	3915      	subs	r1, #21
 800db8e:	0564      	lsls	r4, r4, #21
 800db90:	2b00      	cmp	r3, #0
 800db92:	d0fa      	beq.n	800db8a <__ieee754_sqrt+0x126>
 800db94:	02de      	lsls	r6, r3, #11
 800db96:	d50a      	bpl.n	800dbae <__ieee754_sqrt+0x14a>
 800db98:	f1c2 0020 	rsb	r0, r2, #32
 800db9c:	fa24 f000 	lsr.w	r0, r4, r0
 800dba0:	1e55      	subs	r5, r2, #1
 800dba2:	4094      	lsls	r4, r2
 800dba4:	4303      	orrs	r3, r0
 800dba6:	1b4a      	subs	r2, r1, r5
 800dba8:	e78a      	b.n	800dac0 <__ieee754_sqrt+0x5c>
 800dbaa:	4611      	mov	r1, r2
 800dbac:	e7f0      	b.n	800db90 <__ieee754_sqrt+0x12c>
 800dbae:	005b      	lsls	r3, r3, #1
 800dbb0:	3201      	adds	r2, #1
 800dbb2:	e7ef      	b.n	800db94 <__ieee754_sqrt+0x130>
 800dbb4:	4688      	mov	r8, r1
 800dbb6:	e7bd      	b.n	800db34 <__ieee754_sqrt+0xd0>
 800dbb8:	7ff00000 	.word	0x7ff00000
 800dbbc:	00000000 	.word	0x00000000

0800dbc0 <atan>:
 800dbc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc4:	4bb6      	ldr	r3, [pc, #728]	; (800dea0 <atan+0x2e0>)
 800dbc6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dbca:	429e      	cmp	r6, r3
 800dbcc:	4604      	mov	r4, r0
 800dbce:	460d      	mov	r5, r1
 800dbd0:	468b      	mov	fp, r1
 800dbd2:	dd17      	ble.n	800dc04 <atan+0x44>
 800dbd4:	4bb3      	ldr	r3, [pc, #716]	; (800dea4 <atan+0x2e4>)
 800dbd6:	429e      	cmp	r6, r3
 800dbd8:	dc01      	bgt.n	800dbde <atan+0x1e>
 800dbda:	d109      	bne.n	800dbf0 <atan+0x30>
 800dbdc:	b140      	cbz	r0, 800dbf0 <atan+0x30>
 800dbde:	4622      	mov	r2, r4
 800dbe0:	462b      	mov	r3, r5
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	4629      	mov	r1, r5
 800dbe6:	f7f2 fac1 	bl	800016c <__adddf3>
 800dbea:	4604      	mov	r4, r0
 800dbec:	460d      	mov	r5, r1
 800dbee:	e005      	b.n	800dbfc <atan+0x3c>
 800dbf0:	f1bb 0f00 	cmp.w	fp, #0
 800dbf4:	4cac      	ldr	r4, [pc, #688]	; (800dea8 <atan+0x2e8>)
 800dbf6:	f300 8121 	bgt.w	800de3c <atan+0x27c>
 800dbfa:	4dac      	ldr	r5, [pc, #688]	; (800deac <atan+0x2ec>)
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	4629      	mov	r1, r5
 800dc00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc04:	4baa      	ldr	r3, [pc, #680]	; (800deb0 <atan+0x2f0>)
 800dc06:	429e      	cmp	r6, r3
 800dc08:	dc11      	bgt.n	800dc2e <atan+0x6e>
 800dc0a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800dc0e:	429e      	cmp	r6, r3
 800dc10:	dc0a      	bgt.n	800dc28 <atan+0x68>
 800dc12:	a38b      	add	r3, pc, #556	; (adr r3, 800de40 <atan+0x280>)
 800dc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc18:	f7f2 faa8 	bl	800016c <__adddf3>
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	4ba5      	ldr	r3, [pc, #660]	; (800deb4 <atan+0x2f4>)
 800dc20:	f7f2 feea 	bl	80009f8 <__aeabi_dcmpgt>
 800dc24:	2800      	cmp	r0, #0
 800dc26:	d1e9      	bne.n	800dbfc <atan+0x3c>
 800dc28:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800dc2c:	e027      	b.n	800dc7e <atan+0xbe>
 800dc2e:	f000 f951 	bl	800ded4 <fabs>
 800dc32:	4ba1      	ldr	r3, [pc, #644]	; (800deb8 <atan+0x2f8>)
 800dc34:	4604      	mov	r4, r0
 800dc36:	429e      	cmp	r6, r3
 800dc38:	460d      	mov	r5, r1
 800dc3a:	f300 80b8 	bgt.w	800ddae <atan+0x1ee>
 800dc3e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800dc42:	429e      	cmp	r6, r3
 800dc44:	f300 809c 	bgt.w	800dd80 <atan+0x1c0>
 800dc48:	4602      	mov	r2, r0
 800dc4a:	460b      	mov	r3, r1
 800dc4c:	f7f2 fa8e 	bl	800016c <__adddf3>
 800dc50:	2200      	movs	r2, #0
 800dc52:	4b98      	ldr	r3, [pc, #608]	; (800deb4 <atan+0x2f4>)
 800dc54:	f7f2 fa88 	bl	8000168 <__aeabi_dsub>
 800dc58:	2200      	movs	r2, #0
 800dc5a:	4606      	mov	r6, r0
 800dc5c:	460f      	mov	r7, r1
 800dc5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dc62:	4620      	mov	r0, r4
 800dc64:	4629      	mov	r1, r5
 800dc66:	f7f2 fa81 	bl	800016c <__adddf3>
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	4630      	mov	r0, r6
 800dc70:	4639      	mov	r1, r7
 800dc72:	f7f2 fd5b 	bl	800072c <__aeabi_ddiv>
 800dc76:	f04f 0a00 	mov.w	sl, #0
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	460d      	mov	r5, r1
 800dc7e:	4622      	mov	r2, r4
 800dc80:	462b      	mov	r3, r5
 800dc82:	4620      	mov	r0, r4
 800dc84:	4629      	mov	r1, r5
 800dc86:	f7f2 fc27 	bl	80004d8 <__aeabi_dmul>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	4680      	mov	r8, r0
 800dc90:	4689      	mov	r9, r1
 800dc92:	f7f2 fc21 	bl	80004d8 <__aeabi_dmul>
 800dc96:	a36c      	add	r3, pc, #432	; (adr r3, 800de48 <atan+0x288>)
 800dc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9c:	4606      	mov	r6, r0
 800dc9e:	460f      	mov	r7, r1
 800dca0:	f7f2 fc1a 	bl	80004d8 <__aeabi_dmul>
 800dca4:	a36a      	add	r3, pc, #424	; (adr r3, 800de50 <atan+0x290>)
 800dca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcaa:	f7f2 fa5f 	bl	800016c <__adddf3>
 800dcae:	4632      	mov	r2, r6
 800dcb0:	463b      	mov	r3, r7
 800dcb2:	f7f2 fc11 	bl	80004d8 <__aeabi_dmul>
 800dcb6:	a368      	add	r3, pc, #416	; (adr r3, 800de58 <atan+0x298>)
 800dcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcbc:	f7f2 fa56 	bl	800016c <__adddf3>
 800dcc0:	4632      	mov	r2, r6
 800dcc2:	463b      	mov	r3, r7
 800dcc4:	f7f2 fc08 	bl	80004d8 <__aeabi_dmul>
 800dcc8:	a365      	add	r3, pc, #404	; (adr r3, 800de60 <atan+0x2a0>)
 800dcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcce:	f7f2 fa4d 	bl	800016c <__adddf3>
 800dcd2:	4632      	mov	r2, r6
 800dcd4:	463b      	mov	r3, r7
 800dcd6:	f7f2 fbff 	bl	80004d8 <__aeabi_dmul>
 800dcda:	a363      	add	r3, pc, #396	; (adr r3, 800de68 <atan+0x2a8>)
 800dcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce0:	f7f2 fa44 	bl	800016c <__adddf3>
 800dce4:	4632      	mov	r2, r6
 800dce6:	463b      	mov	r3, r7
 800dce8:	f7f2 fbf6 	bl	80004d8 <__aeabi_dmul>
 800dcec:	a360      	add	r3, pc, #384	; (adr r3, 800de70 <atan+0x2b0>)
 800dcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf2:	f7f2 fa3b 	bl	800016c <__adddf3>
 800dcf6:	4642      	mov	r2, r8
 800dcf8:	464b      	mov	r3, r9
 800dcfa:	f7f2 fbed 	bl	80004d8 <__aeabi_dmul>
 800dcfe:	a35e      	add	r3, pc, #376	; (adr r3, 800de78 <atan+0x2b8>)
 800dd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd04:	4680      	mov	r8, r0
 800dd06:	4689      	mov	r9, r1
 800dd08:	4630      	mov	r0, r6
 800dd0a:	4639      	mov	r1, r7
 800dd0c:	f7f2 fbe4 	bl	80004d8 <__aeabi_dmul>
 800dd10:	a35b      	add	r3, pc, #364	; (adr r3, 800de80 <atan+0x2c0>)
 800dd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd16:	f7f2 fa27 	bl	8000168 <__aeabi_dsub>
 800dd1a:	4632      	mov	r2, r6
 800dd1c:	463b      	mov	r3, r7
 800dd1e:	f7f2 fbdb 	bl	80004d8 <__aeabi_dmul>
 800dd22:	a359      	add	r3, pc, #356	; (adr r3, 800de88 <atan+0x2c8>)
 800dd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd28:	f7f2 fa1e 	bl	8000168 <__aeabi_dsub>
 800dd2c:	4632      	mov	r2, r6
 800dd2e:	463b      	mov	r3, r7
 800dd30:	f7f2 fbd2 	bl	80004d8 <__aeabi_dmul>
 800dd34:	a356      	add	r3, pc, #344	; (adr r3, 800de90 <atan+0x2d0>)
 800dd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3a:	f7f2 fa15 	bl	8000168 <__aeabi_dsub>
 800dd3e:	4632      	mov	r2, r6
 800dd40:	463b      	mov	r3, r7
 800dd42:	f7f2 fbc9 	bl	80004d8 <__aeabi_dmul>
 800dd46:	a354      	add	r3, pc, #336	; (adr r3, 800de98 <atan+0x2d8>)
 800dd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4c:	f7f2 fa0c 	bl	8000168 <__aeabi_dsub>
 800dd50:	4632      	mov	r2, r6
 800dd52:	463b      	mov	r3, r7
 800dd54:	f7f2 fbc0 	bl	80004d8 <__aeabi_dmul>
 800dd58:	4602      	mov	r2, r0
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	4640      	mov	r0, r8
 800dd5e:	4649      	mov	r1, r9
 800dd60:	f7f2 fa04 	bl	800016c <__adddf3>
 800dd64:	4622      	mov	r2, r4
 800dd66:	462b      	mov	r3, r5
 800dd68:	f7f2 fbb6 	bl	80004d8 <__aeabi_dmul>
 800dd6c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800dd70:	4602      	mov	r2, r0
 800dd72:	460b      	mov	r3, r1
 800dd74:	d144      	bne.n	800de00 <atan+0x240>
 800dd76:	4620      	mov	r0, r4
 800dd78:	4629      	mov	r1, r5
 800dd7a:	f7f2 f9f5 	bl	8000168 <__aeabi_dsub>
 800dd7e:	e734      	b.n	800dbea <atan+0x2a>
 800dd80:	2200      	movs	r2, #0
 800dd82:	4b4c      	ldr	r3, [pc, #304]	; (800deb4 <atan+0x2f4>)
 800dd84:	f7f2 f9f0 	bl	8000168 <__aeabi_dsub>
 800dd88:	2200      	movs	r2, #0
 800dd8a:	4606      	mov	r6, r0
 800dd8c:	460f      	mov	r7, r1
 800dd8e:	4620      	mov	r0, r4
 800dd90:	4629      	mov	r1, r5
 800dd92:	4b48      	ldr	r3, [pc, #288]	; (800deb4 <atan+0x2f4>)
 800dd94:	f7f2 f9ea 	bl	800016c <__adddf3>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	4630      	mov	r0, r6
 800dd9e:	4639      	mov	r1, r7
 800dda0:	f7f2 fcc4 	bl	800072c <__aeabi_ddiv>
 800dda4:	f04f 0a01 	mov.w	sl, #1
 800dda8:	4604      	mov	r4, r0
 800ddaa:	460d      	mov	r5, r1
 800ddac:	e767      	b.n	800dc7e <atan+0xbe>
 800ddae:	4b43      	ldr	r3, [pc, #268]	; (800debc <atan+0x2fc>)
 800ddb0:	429e      	cmp	r6, r3
 800ddb2:	da1a      	bge.n	800ddea <atan+0x22a>
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	4b42      	ldr	r3, [pc, #264]	; (800dec0 <atan+0x300>)
 800ddb8:	f7f2 f9d6 	bl	8000168 <__aeabi_dsub>
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	4606      	mov	r6, r0
 800ddc0:	460f      	mov	r7, r1
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	4629      	mov	r1, r5
 800ddc6:	4b3e      	ldr	r3, [pc, #248]	; (800dec0 <atan+0x300>)
 800ddc8:	f7f2 fb86 	bl	80004d8 <__aeabi_dmul>
 800ddcc:	2200      	movs	r2, #0
 800ddce:	4b39      	ldr	r3, [pc, #228]	; (800deb4 <atan+0x2f4>)
 800ddd0:	f7f2 f9cc 	bl	800016c <__adddf3>
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	460b      	mov	r3, r1
 800ddd8:	4630      	mov	r0, r6
 800ddda:	4639      	mov	r1, r7
 800dddc:	f7f2 fca6 	bl	800072c <__aeabi_ddiv>
 800dde0:	f04f 0a02 	mov.w	sl, #2
 800dde4:	4604      	mov	r4, r0
 800dde6:	460d      	mov	r5, r1
 800dde8:	e749      	b.n	800dc7e <atan+0xbe>
 800ddea:	4602      	mov	r2, r0
 800ddec:	460b      	mov	r3, r1
 800ddee:	2000      	movs	r0, #0
 800ddf0:	4934      	ldr	r1, [pc, #208]	; (800dec4 <atan+0x304>)
 800ddf2:	f7f2 fc9b 	bl	800072c <__aeabi_ddiv>
 800ddf6:	f04f 0a03 	mov.w	sl, #3
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	460d      	mov	r5, r1
 800ddfe:	e73e      	b.n	800dc7e <atan+0xbe>
 800de00:	4b31      	ldr	r3, [pc, #196]	; (800dec8 <atan+0x308>)
 800de02:	4e32      	ldr	r6, [pc, #200]	; (800decc <atan+0x30c>)
 800de04:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800de08:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800de0c:	e9da 2300 	ldrd	r2, r3, [sl]
 800de10:	f7f2 f9aa 	bl	8000168 <__aeabi_dsub>
 800de14:	4622      	mov	r2, r4
 800de16:	462b      	mov	r3, r5
 800de18:	f7f2 f9a6 	bl	8000168 <__aeabi_dsub>
 800de1c:	4602      	mov	r2, r0
 800de1e:	460b      	mov	r3, r1
 800de20:	e9d6 0100 	ldrd	r0, r1, [r6]
 800de24:	f7f2 f9a0 	bl	8000168 <__aeabi_dsub>
 800de28:	f1bb 0f00 	cmp.w	fp, #0
 800de2c:	4604      	mov	r4, r0
 800de2e:	460d      	mov	r5, r1
 800de30:	f6bf aee4 	bge.w	800dbfc <atan+0x3c>
 800de34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de38:	461d      	mov	r5, r3
 800de3a:	e6df      	b.n	800dbfc <atan+0x3c>
 800de3c:	4d24      	ldr	r5, [pc, #144]	; (800ded0 <atan+0x310>)
 800de3e:	e6dd      	b.n	800dbfc <atan+0x3c>
 800de40:	8800759c 	.word	0x8800759c
 800de44:	7e37e43c 	.word	0x7e37e43c
 800de48:	e322da11 	.word	0xe322da11
 800de4c:	3f90ad3a 	.word	0x3f90ad3a
 800de50:	24760deb 	.word	0x24760deb
 800de54:	3fa97b4b 	.word	0x3fa97b4b
 800de58:	a0d03d51 	.word	0xa0d03d51
 800de5c:	3fb10d66 	.word	0x3fb10d66
 800de60:	c54c206e 	.word	0xc54c206e
 800de64:	3fb745cd 	.word	0x3fb745cd
 800de68:	920083ff 	.word	0x920083ff
 800de6c:	3fc24924 	.word	0x3fc24924
 800de70:	5555550d 	.word	0x5555550d
 800de74:	3fd55555 	.word	0x3fd55555
 800de78:	2c6a6c2f 	.word	0x2c6a6c2f
 800de7c:	bfa2b444 	.word	0xbfa2b444
 800de80:	52defd9a 	.word	0x52defd9a
 800de84:	3fadde2d 	.word	0x3fadde2d
 800de88:	af749a6d 	.word	0xaf749a6d
 800de8c:	3fb3b0f2 	.word	0x3fb3b0f2
 800de90:	fe231671 	.word	0xfe231671
 800de94:	3fbc71c6 	.word	0x3fbc71c6
 800de98:	9998ebc4 	.word	0x9998ebc4
 800de9c:	3fc99999 	.word	0x3fc99999
 800dea0:	440fffff 	.word	0x440fffff
 800dea4:	7ff00000 	.word	0x7ff00000
 800dea8:	54442d18 	.word	0x54442d18
 800deac:	bff921fb 	.word	0xbff921fb
 800deb0:	3fdbffff 	.word	0x3fdbffff
 800deb4:	3ff00000 	.word	0x3ff00000
 800deb8:	3ff2ffff 	.word	0x3ff2ffff
 800debc:	40038000 	.word	0x40038000
 800dec0:	3ff80000 	.word	0x3ff80000
 800dec4:	bff00000 	.word	0xbff00000
 800dec8:	0800e9b8 	.word	0x0800e9b8
 800decc:	0800e998 	.word	0x0800e998
 800ded0:	3ff921fb 	.word	0x3ff921fb

0800ded4 <fabs>:
 800ded4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ded8:	4770      	bx	lr

0800deda <finite>:
 800deda:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800dede:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800dee2:	0fc0      	lsrs	r0, r0, #31
 800dee4:	4770      	bx	lr
	...

0800dee8 <rint>:
 800dee8:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800deec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800deee:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800def2:	2f13      	cmp	r7, #19
 800def4:	4602      	mov	r2, r0
 800def6:	460b      	mov	r3, r1
 800def8:	460c      	mov	r4, r1
 800defa:	4605      	mov	r5, r0
 800defc:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800df00:	dc59      	bgt.n	800dfb6 <rint+0xce>
 800df02:	2f00      	cmp	r7, #0
 800df04:	da2a      	bge.n	800df5c <rint+0x74>
 800df06:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800df0a:	4301      	orrs	r1, r0
 800df0c:	d022      	beq.n	800df54 <rint+0x6c>
 800df0e:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800df12:	4301      	orrs	r1, r0
 800df14:	424d      	negs	r5, r1
 800df16:	430d      	orrs	r5, r1
 800df18:	4936      	ldr	r1, [pc, #216]	; (800dff4 <rint+0x10c>)
 800df1a:	0c5c      	lsrs	r4, r3, #17
 800df1c:	0b2d      	lsrs	r5, r5, #12
 800df1e:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800df22:	0464      	lsls	r4, r4, #17
 800df24:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800df28:	ea45 0304 	orr.w	r3, r5, r4
 800df2c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800df30:	4620      	mov	r0, r4
 800df32:	4629      	mov	r1, r5
 800df34:	f7f2 f91a 	bl	800016c <__adddf3>
 800df38:	e9cd 0100 	strd	r0, r1, [sp]
 800df3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df40:	462b      	mov	r3, r5
 800df42:	4622      	mov	r2, r4
 800df44:	f7f2 f910 	bl	8000168 <__aeabi_dsub>
 800df48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df4c:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800df50:	4602      	mov	r2, r0
 800df52:	460b      	mov	r3, r1
 800df54:	4610      	mov	r0, r2
 800df56:	4619      	mov	r1, r3
 800df58:	b003      	add	sp, #12
 800df5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df5c:	4926      	ldr	r1, [pc, #152]	; (800dff8 <rint+0x110>)
 800df5e:	4139      	asrs	r1, r7
 800df60:	ea03 0001 	and.w	r0, r3, r1
 800df64:	4310      	orrs	r0, r2
 800df66:	d0f5      	beq.n	800df54 <rint+0x6c>
 800df68:	084b      	lsrs	r3, r1, #1
 800df6a:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800df6e:	ea52 0501 	orrs.w	r5, r2, r1
 800df72:	d00c      	beq.n	800df8e <rint+0xa6>
 800df74:	ea24 0303 	bic.w	r3, r4, r3
 800df78:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800df7c:	2f13      	cmp	r7, #19
 800df7e:	bf0c      	ite	eq
 800df80:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800df84:	2500      	movne	r5, #0
 800df86:	fa44 f707 	asr.w	r7, r4, r7
 800df8a:	ea43 0407 	orr.w	r4, r3, r7
 800df8e:	4919      	ldr	r1, [pc, #100]	; (800dff4 <rint+0x10c>)
 800df90:	4623      	mov	r3, r4
 800df92:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800df96:	462a      	mov	r2, r5
 800df98:	e9d6 4500 	ldrd	r4, r5, [r6]
 800df9c:	4620      	mov	r0, r4
 800df9e:	4629      	mov	r1, r5
 800dfa0:	f7f2 f8e4 	bl	800016c <__adddf3>
 800dfa4:	e9cd 0100 	strd	r0, r1, [sp]
 800dfa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dfac:	4622      	mov	r2, r4
 800dfae:	462b      	mov	r3, r5
 800dfb0:	f7f2 f8da 	bl	8000168 <__aeabi_dsub>
 800dfb4:	e7cc      	b.n	800df50 <rint+0x68>
 800dfb6:	2f33      	cmp	r7, #51	; 0x33
 800dfb8:	dd05      	ble.n	800dfc6 <rint+0xde>
 800dfba:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800dfbe:	d1c9      	bne.n	800df54 <rint+0x6c>
 800dfc0:	f7f2 f8d4 	bl	800016c <__adddf3>
 800dfc4:	e7c4      	b.n	800df50 <rint+0x68>
 800dfc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800dfca:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800dfce:	fa21 f10c 	lsr.w	r1, r1, ip
 800dfd2:	4208      	tst	r0, r1
 800dfd4:	d0be      	beq.n	800df54 <rint+0x6c>
 800dfd6:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800dfda:	bf18      	it	ne
 800dfdc:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800dfe0:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800dfe4:	bf1e      	ittt	ne
 800dfe6:	ea20 0303 	bicne.w	r3, r0, r3
 800dfea:	fa45 fc0c 	asrne.w	ip, r5, ip
 800dfee:	ea43 050c 	orrne.w	r5, r3, ip
 800dff2:	e7cc      	b.n	800df8e <rint+0xa6>
 800dff4:	0800e9d8 	.word	0x0800e9d8
 800dff8:	000fffff 	.word	0x000fffff
 800dffc:	00000000 	.word	0x00000000

0800e000 <scalbn>:
 800e000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e002:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800e006:	4604      	mov	r4, r0
 800e008:	460d      	mov	r5, r1
 800e00a:	4617      	mov	r7, r2
 800e00c:	460b      	mov	r3, r1
 800e00e:	b996      	cbnz	r6, 800e036 <scalbn+0x36>
 800e010:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e014:	4303      	orrs	r3, r0
 800e016:	d039      	beq.n	800e08c <scalbn+0x8c>
 800e018:	4b35      	ldr	r3, [pc, #212]	; (800e0f0 <scalbn+0xf0>)
 800e01a:	2200      	movs	r2, #0
 800e01c:	f7f2 fa5c 	bl	80004d8 <__aeabi_dmul>
 800e020:	4b34      	ldr	r3, [pc, #208]	; (800e0f4 <scalbn+0xf4>)
 800e022:	4604      	mov	r4, r0
 800e024:	429f      	cmp	r7, r3
 800e026:	460d      	mov	r5, r1
 800e028:	da0f      	bge.n	800e04a <scalbn+0x4a>
 800e02a:	a32d      	add	r3, pc, #180	; (adr r3, 800e0e0 <scalbn+0xe0>)
 800e02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e030:	f7f2 fa52 	bl	80004d8 <__aeabi_dmul>
 800e034:	e006      	b.n	800e044 <scalbn+0x44>
 800e036:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e03a:	4296      	cmp	r6, r2
 800e03c:	d10a      	bne.n	800e054 <scalbn+0x54>
 800e03e:	4602      	mov	r2, r0
 800e040:	f7f2 f894 	bl	800016c <__adddf3>
 800e044:	4604      	mov	r4, r0
 800e046:	460d      	mov	r5, r1
 800e048:	e020      	b.n	800e08c <scalbn+0x8c>
 800e04a:	460b      	mov	r3, r1
 800e04c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e050:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800e054:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800e058:	19b9      	adds	r1, r7, r6
 800e05a:	4291      	cmp	r1, r2
 800e05c:	dd0e      	ble.n	800e07c <scalbn+0x7c>
 800e05e:	a322      	add	r3, pc, #136	; (adr r3, 800e0e8 <scalbn+0xe8>)
 800e060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e064:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800e068:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800e06c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800e070:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800e074:	4820      	ldr	r0, [pc, #128]	; (800e0f8 <scalbn+0xf8>)
 800e076:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800e07a:	e7d9      	b.n	800e030 <scalbn+0x30>
 800e07c:	2900      	cmp	r1, #0
 800e07e:	dd08      	ble.n	800e092 <scalbn+0x92>
 800e080:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e084:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e088:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e08c:	4620      	mov	r0, r4
 800e08e:	4629      	mov	r1, r5
 800e090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e092:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800e096:	da16      	bge.n	800e0c6 <scalbn+0xc6>
 800e098:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e09c:	429f      	cmp	r7, r3
 800e09e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800e0a2:	dd08      	ble.n	800e0b6 <scalbn+0xb6>
 800e0a4:	4c15      	ldr	r4, [pc, #84]	; (800e0fc <scalbn+0xfc>)
 800e0a6:	4814      	ldr	r0, [pc, #80]	; (800e0f8 <scalbn+0xf8>)
 800e0a8:	f363 74df 	bfi	r4, r3, #31, #1
 800e0ac:	a30e      	add	r3, pc, #56	; (adr r3, 800e0e8 <scalbn+0xe8>)
 800e0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b2:	4621      	mov	r1, r4
 800e0b4:	e7bc      	b.n	800e030 <scalbn+0x30>
 800e0b6:	4c12      	ldr	r4, [pc, #72]	; (800e100 <scalbn+0x100>)
 800e0b8:	4812      	ldr	r0, [pc, #72]	; (800e104 <scalbn+0x104>)
 800e0ba:	f363 74df 	bfi	r4, r3, #31, #1
 800e0be:	a308      	add	r3, pc, #32	; (adr r3, 800e0e0 <scalbn+0xe0>)
 800e0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c4:	e7f5      	b.n	800e0b2 <scalbn+0xb2>
 800e0c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e0ca:	3136      	adds	r1, #54	; 0x36
 800e0cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e0d0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	4629      	mov	r1, r5
 800e0d8:	2200      	movs	r2, #0
 800e0da:	4b0b      	ldr	r3, [pc, #44]	; (800e108 <scalbn+0x108>)
 800e0dc:	e7a8      	b.n	800e030 <scalbn+0x30>
 800e0de:	bf00      	nop
 800e0e0:	c2f8f359 	.word	0xc2f8f359
 800e0e4:	01a56e1f 	.word	0x01a56e1f
 800e0e8:	8800759c 	.word	0x8800759c
 800e0ec:	7e37e43c 	.word	0x7e37e43c
 800e0f0:	43500000 	.word	0x43500000
 800e0f4:	ffff3cb0 	.word	0xffff3cb0
 800e0f8:	8800759c 	.word	0x8800759c
 800e0fc:	7e37e43c 	.word	0x7e37e43c
 800e100:	01a56e1f 	.word	0x01a56e1f
 800e104:	c2f8f359 	.word	0xc2f8f359
 800e108:	3c900000 	.word	0x3c900000

0800e10c <_init>:
 800e10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e10e:	bf00      	nop
 800e110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e112:	bc08      	pop	{r3}
 800e114:	469e      	mov	lr, r3
 800e116:	4770      	bx	lr

0800e118 <_fini>:
 800e118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e11a:	bf00      	nop
 800e11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e11e:	bc08      	pop	{r3}
 800e120:	469e      	mov	lr, r3
 800e122:	4770      	bx	lr
