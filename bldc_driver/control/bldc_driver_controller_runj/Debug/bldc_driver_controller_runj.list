
bldc_driver_controller_runj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdb0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800bf88  0800bf88  0000cf88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0d8  0800c0d8  0000e130  2**0
                  CONTENTS
  4 .ARM          00000000  0800c0d8  0800c0d8  0000e130  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c0d8  0800c0d8  0000e130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800c0d8  0800c0d8  0000d0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800c0e4  0800c0e4  0000d0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  0800c0ec  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  20000130  0800c21c  0000e130  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000920  0800c21c  0000e920  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e130  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031d9c  00000000  00000000  0000e160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fc9  00000000  00000000  0003fefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  00045ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001682  00000000  00000000  00047c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bcc  00000000  00000000  000492ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000283f9  00000000  00000000  00072e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f120f  00000000  00000000  0009b27f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018c48e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008904  00000000  00000000  0018c4d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00194dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000130 	.word	0x20000130
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bf70 	.word	0x0800bf70

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000134 	.word	0x20000134
 8000214:	0800bf70 	.word	0x0800bf70

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b9e:	eef0 7ae7 	vabs.f32	s15, s15
 8000ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_ZN17AS5048A_interfaceC1Ev>:
	    .command_parity_bit = 15
};



AS5048A_interface::AS5048A_interface() {
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8000c74 <_ZN17AS5048A_interfaceC1Ev+0xc4>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f04f 0200 	mov.w	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	@ 0x24
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f04f 0200 	mov.w	r2, #0
 8000be0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f04f 0200 	mov.w	r2, #0
 8000c04:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a1b      	ldr	r2, [pc, #108]	@ (8000c78 <_ZN17AS5048A_interfaceC1Ev+0xc8>)
 8000c0a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c7c <_ZN17AS5048A_interfaceC1Ev+0xcc>)
 8000c10:	649a      	str	r2, [r3, #72]	@ 0x48
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	334c      	adds	r3, #76	@ 0x4c
 8000c16:	2201      	movs	r2, #1
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fd8e 	bl	800173c <_ZN3EKFC1Eii>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a17      	ldr	r2, [pc, #92]	@ (8000c80 <_ZN17AS5048A_interfaceC1Ev+0xd0>)
 8000c24:	3360      	adds	r3, #96	@ 0x60
 8000c26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a14      	ldr	r2, [pc, #80]	@ (8000c84 <_ZN17AS5048A_interfaceC1Ev+0xd4>)
 8000c32:	f103 0480 	add.w	r4, r3, #128	@ 0x80
 8000c36:	4613      	mov	r3, r2
 8000c38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a11      	ldr	r2, [pc, #68]	@ (8000c88 <_ZN17AS5048A_interfaceC1Ev+0xd8>)
 8000c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a10      	ldr	r2, [pc, #64]	@ (8000c8c <_ZN17AS5048A_interfaceC1Ev+0xdc>)
 8000c4a:	f103 0494 	add.w	r4, r3, #148	@ 0x94
 8000c4e:	4613      	mov	r3, r2
 8000c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000c5c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f04f 0200 	mov.w	r2, #0
 8000c66:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	// TODO Auto-generated constructor stub

}
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd90      	pop	{r4, r7, pc}
 8000c74:	0800c00c 	.word	0x0800c00c
 8000c78:	c640e400 	.word	0xc640e400
 8000c7c:	ffffcfc7 	.word	0xffffcfc7
 8000c80:	0800bf88 	.word	0x0800bf88
 8000c84:	0800bf90 	.word	0x0800bf90
 8000c88:	3089705f 	.word	0x3089705f
 8000c8c:	0800bfa0 	.word	0x0800bfa0

08000c90 <_ZN17AS5048A_interfaceD1Ev>:

AS5048A_interface::~AS5048A_interface() {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	4a06      	ldr	r2, [pc, #24]	@ (8000cb4 <_ZN17AS5048A_interfaceD1Ev+0x24>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	334c      	adds	r3, #76	@ 0x4c
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fd62 	bl	800176c <_ZN3EKFD1Ev>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	0800c00c 	.word	0x0800c00c

08000cb8 <_ZN17AS5048A_interfaceD0Ev>:
AS5048A_interface::~AS5048A_interface() {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
}
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ffe5 	bl	8000c90 <_ZN17AS5048A_interfaceD1Ev>
 8000cc6:	21ac      	movs	r1, #172	@ 0xac
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f009 fda7 	bl	800a81c <_ZdlPvj>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>:

/**
 * @brief Initialize SPI for Magnetic Sensor with AS5048A_SPI
*/
void AS5048A_interface::MagneticSensorSPI_init() 
{
 8000cd8:	b5b0      	push	{r4, r5, r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	struct MagneticSensorSPIConfig_s config = AS5048A_SPI;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x74>)
 8000ce2:	f107 040c 	add.w	r4, r7, #12
 8000ce6:	461d      	mov	r5, r3
 8000ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cec:	682b      	ldr	r3, [r5, #0]
 8000cee:	6023      	str	r3, [r4, #0]
	// angle read register of the magnetic sensor
	angle_register = config.angle_registers ? config.angle_registers : DEF_ANGLE_REGISTER;
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x22>
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	e001      	b.n	8000cfe <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x26>
 8000cfa:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6193      	str	r3, [r2, #24]
	// register maximum value (counts per revolution)
	cpr = pow(2, config.bit_resolution);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4619      	mov	r1, r3
 8000d06:	2002      	movs	r0, #2
 8000d08:	f000 fa76 	bl	80011f8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000d0c:	ec53 2b10 	vmov	r2, r3, d0
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff feec 	bl	8000af0 <__aeabi_d2f>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	605a      	str	r2, [r3, #4]
	bit_resolution = config.bit_resolution;
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	609a      	str	r2, [r3, #8]

	command_parity_bit = config.command_parity_bit; 	// for backwards compatibility
 8000d24:	69fa      	ldr	r2, [r7, #28]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60da      	str	r2, [r3, #12]
	command_rw_bit = config.command_rw_bit; 			// for backwards compatibility
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	611a      	str	r2, [r3, #16]
	data_start_bit = config.data_start_bit; 			// for backwards compatibility
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	615a      	str	r2, [r3, #20]

	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2110      	movs	r1, #16
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3e:	f006 fead 	bl	8007a9c <HAL_GPIO_WritePin>
}
 8000d42:	bf00      	nop
 8000d44:	3720      	adds	r7, #32
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bdb0      	pop	{r4, r5, r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000000 	.word	0x20000000

08000d50 <_ZN17AS5048A_interface11Sensor_initEv>:

/**
 * @brief Initialize the variable of encoder
*/
void AS5048A_interface::Sensor_init()
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	// initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
	getSensorAngle(); 
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f000 f8cb 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
	vel_angle_prev = getSensorAngle();
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 f8c8 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
 8000d64:	eef0 7a40 	vmov.f32	s15, s0
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	vel_angle_prev_ts = micros();
 8000d6e:	f000 f935 	bl	8000fdc <_ZN17AS5048A_interface6microsEv>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(1);		// Wait for collecting data
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f004 f92a 	bl	8004fd4 <HAL_Delay>
	getSensorAngle();
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 f8b7 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
	angle_prev = getSensorAngle(); 
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f8b4 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
 8000d8c:	eef0 7a40 	vmov.f32	s15, s0
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	edc3 7a07 	vstr	s15, [r3, #28]
	angle_prev_ts = micros();
 8000d96:	f000 f921 	bl	8000fdc <_ZN17AS5048A_interface6microsEv>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	621a      	str	r2, [r3, #32]


	ekf_encoder.ekf_initialize(&_ekf_s_encoder, Pdiag);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3360      	adds	r3, #96	@ 0x60
 8000db2:	461a      	mov	r2, r3
 8000db4:	f000 fcfa 	bl	80017ac <_ZN3EKF14ekf_initializeEP5ekf_tPKf>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_ZN17AS5048A_interface17spiCalcEvenParityEt>:

/**
 * @brief Utility function used to calculate even parity of word
 */
uint8_t AS5048A_interface::spiCalcEvenParity(uint16_t value) 
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	807b      	strh	r3, [r7, #2]
	uint8_t cnt = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73fb      	strb	r3, [r7, #15]
	uint8_t i;
	for (i = 0; i < 16; i++) 
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73bb      	strb	r3, [r7, #14]
 8000dd4:	e00d      	b.n	8000df2 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x32>
	{
		if (value & 0x1)
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x26>
			cnt++;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	3301      	adds	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
		value >>= 1;
 8000de6:	887b      	ldrh	r3, [r7, #2]
 8000de8:	085b      	lsrs	r3, r3, #1
 8000dea:	807b      	strh	r3, [r7, #2]
	for (i = 0; i < 16; i++) 
 8000dec:	7bbb      	ldrb	r3, [r7, #14]
 8000dee:	3301      	adds	r3, #1
 8000df0:	73bb      	strb	r3, [r7, #14]
 8000df2:	7bbb      	ldrb	r3, [r7, #14]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d9ee      	bls.n	8000dd6 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x16>
	}
	return cnt & 0x1;
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	b2db      	uxtb	r3, r3
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_ZN17AS5048A_interface4readEt>:
 * @brief Read a register from the SPI encoder sensor
 * 		  Takes the address of the register as a 16 bit word
 * @return the value of the register
 */
uint16_t AS5048A_interface::read(uint16_t angle_register) 
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]
	uint16_t register_value;
	uint16_t command = angle_register;
 8000e18:	887b      	ldrh	r3, [r7, #2]
 8000e1a:	817b      	strh	r3, [r7, #10]

	if (command_rw_bit > 0)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dd0b      	ble.n	8000e3c <_ZN17AS5048A_interface4readEt+0x30>
	{
		command = angle_register | (1 << command_rw_bit);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	817b      	strh	r3, [r7, #10]
	}
	if (command_parity_bit > 0)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	dd11      	ble.n	8000e68 <_ZN17AS5048A_interface4readEt+0x5c>
	{
		//Add a parity bit on the the MSB
		command |= ((uint16_t) spiCalcEvenParity(command) << command_parity_bit);
 8000e44:	897b      	ldrh	r3, [r7, #10]
 8000e46:	4619      	mov	r1, r3
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ffb9 	bl	8000dc0 <_ZN17AS5048A_interface17spiCalcEvenParityEt>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	b21a      	sxth	r2, r3
 8000e5c:	897b      	ldrh	r3, [r7, #10]
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	817b      	strh	r3, [r7, #10]
	}

	//>>>> SPI - begin transaction <<<<
	//Send the command
	//  spi->transfer16(command);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e70:	f006 fe14 	bl	8007a9c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &command, (uint8_t*) &register_value, sizeof(register_value) / sizeof(uint16_t), 100);
 8000e74:	f107 020c 	add.w	r2, r7, #12
 8000e78:	f107 010a 	add.w	r1, r7, #10
 8000e7c:	2364      	movs	r3, #100	@ 0x64
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2301      	movs	r3, #1
 8000e82:	4813      	ldr	r0, [pc, #76]	@ (8000ed0 <_ZN17AS5048A_interface4readEt+0xc4>)
 8000e84:	f007 feb3 	bl	8008bee <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e90:	f006 fe04 	bl	8007a9c <HAL_GPIO_WritePin>
//	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) & command, (uint8_t*) &register_value, sizeof(register_value) / sizeof(uint16_t), 100);
//	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);

	//>>>> SPI - end transaction <<<<

	register_value = register_value >> (1 + data_start_bit - bit_resolution); //this should shift data to the rightmost bits of the word
 8000e94:	89bb      	ldrh	r3, [r7, #12]
 8000e96:	4619      	mov	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	fa41 f303 	asr.w	r3, r1, r3
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	81bb      	strh	r3, [r7, #12]
	uint16_t data_mask = 0xFFFF >> (16 - bit_resolution);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f1c3 0310 	rsb	r3, r3, #16
 8000eb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eb8:	fa42 f303 	asr.w	r3, r2, r3
 8000ebc:	81fb      	strh	r3, [r7, #14]
	return register_value & data_mask; // Return the data, stripping the non data (e.g parity) bits
 8000ebe:	89ba      	ldrh	r2, [r7, #12]
 8000ec0:	89fb      	ldrh	r3, [r7, #14]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	b29b      	uxth	r3, r3
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200006c0 	.word	0x200006c0

08000ed4 <_ZN17AS5048A_interface11getRawCountEv>:
 * @brief Reading the raw counter of the magnetic sensor
 * 
 * @return raw data from SPI signal [16-bits word]
*/
int AS5048A_interface::getRawCount() 
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	return (int) read(angle_register);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff91 	bl	8000e0c <_ZN17AS5048A_interface4readEt>
 8000eea:	4603      	mov	r3, r0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>:
 * @brief Get absolute angular position from raw data of encoder
 *
 * @return absolute angular position [radians]
 */
float AS5048A_interface::getSensorAngle() 
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	return (getRawCount() / (float) cpr) * _2PI;
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ffe9 	bl	8000ed4 <_ZN17AS5048A_interface11getRawCountEv>
 8000f02:	ee07 0a90 	vmov	s15, r0
 8000f06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f14:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000f28 <_ZN17AS5048A_interface14getSensorAngleEv+0x34>
 8000f18:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40c90fdb 	.word	0x40c90fdb

08000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>:
 * 
 * @return absolute angular position with number of round [radians]
 * 
*/
float AS5048A_interface::get_full_rotation_angle() 
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	return (float) full_rotations * _2PI + angle_prev;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f38:	ee07 3a90 	vmov	s15, r3
 8000f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f40:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000f60 <_ZN17AS5048A_interface23get_full_rotation_angleEv+0x34>
 8000f44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000f52:	eeb0 0a67 	vmov.f32	s0, s15
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	40c90fdb 	.word	0x40c90fdb

08000f64 <_ZN17AS5048A_interface18getMechanicalAngleEv>:

/**
 * @brief Get absolute angular position from last call updateSensor function
*/
float AS5048A_interface::getMechanicalAngle() 
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	return angle_prev;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	ee07 3a90 	vmov	s15, r3
}
 8000f74:	eeb0 0a67 	vmov.f32	s0, s15
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <_ZN17AS5048A_interface15electricalAngleEv>:
 * @brief Calculate electrical angular position from absoulute angular position 
 * 
 * @return electrical angular position [radians]
*/
float AS5048A_interface::electricalAngle() 
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	ed2d 8b02 	vpush	{d8}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	return _normalizeAngle((float) (sensor_direction * pole_pairs) * getMechanicalAngle() - zero_electric_angle);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f94:	4a10      	ldr	r2, [pc, #64]	@ (8000fd8 <_ZN17AS5048A_interface15electricalAngleEv+0x54>)
 8000f96:	6812      	ldr	r2, [r2, #0]
 8000f98:	fb02 f303 	mul.w	r3, r2, r3
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ffdd 	bl	8000f64 <_ZN17AS5048A_interface18getMechanicalAngleEv>
 8000faa:	eef0 7a40 	vmov.f32	s15, s0
 8000fae:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc0:	f001 fc62 	bl	8002888 <_Z15_normalizeAnglef>
 8000fc4:	eef0 7a40 	vmov.f32	s15, s0
}
 8000fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	ecbd 8b02 	vpop	{d8}
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000a8 	.word	0x200000a8

08000fdc <_ZN17AS5048A_interface6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t AS5048A_interface::micros(void) 
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8000fe0:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <_ZN17AS5048A_interface6microsEv+0x24>)
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <_ZN17AS5048A_interface6microsEv+0x28>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4907      	ldr	r1, [pc, #28]	@ (8001008 <_ZN17AS5048A_interface6microsEv+0x2c>)
 8000fea:	fba1 1303 	umull	r1, r3, r1, r3
 8000fee:	0c9b      	lsrs	r3, r3, #18
 8000ff0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e0001000 	.word	0xe0001000
 8001004:	200000c0 	.word	0x200000c0
 8001008:	431bde83 	.word	0x431bde83

0800100c <_ZN17AS5048A_interface12updateSensorEv>:
/**
 * @brief Update parameter of encoder 
 * 	- should be used in the loop
*/
void AS5048A_interface::updateSensor() 
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	float angle_current = getSensorAngle();
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff6d 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
 800101a:	ed87 0a03 	vstr	s0, [r7, #12]
	angle_prev_ts = micros();
 800101e:	f7ff ffdd 	bl	8000fdc <_ZN17AS5048A_interface6microsEv>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	621a      	str	r2, [r3, #32]
	float d_angle = angle_current - angle_prev;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001030:	ed97 7a03 	vldr	s14, [r7, #12]
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	edc7 7a02 	vstr	s15, [r7, #8]
	// if overflow happened track it as full rotation
	if (abs(d_angle) > (0.8f * _2PI))
 800103c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001040:	f7ff fda6 	bl	8000b90 <_ZSt3absf>
 8001044:	eef0 7a40 	vmov.f32	s15, s0
 8001048:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001090 <_ZN17AS5048A_interface12updateSensorEv+0x84>
 800104c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001054:	bfcc      	ite	gt
 8001056:	2301      	movgt	r3, #1
 8001058:	2300      	movle	r3, #0
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00f      	beq.n	8001080 <_ZN17AS5048A_interface12updateSensorEv+0x74>
		full_rotations += (d_angle > 0) ? -1 : 1;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001064:	edd7 7a02 	vldr	s15, [r7, #8]
 8001068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	dd02      	ble.n	8001078 <_ZN17AS5048A_interface12updateSensorEv+0x6c>
 8001072:	f04f 32ff 	mov.w	r2, #4294967295
 8001076:	e000      	b.n	800107a <_ZN17AS5048A_interface12updateSensorEv+0x6e>
 8001078:	2201      	movs	r2, #1
 800107a:	441a      	add	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	639a      	str	r2, [r3, #56]	@ 0x38
	angle_prev = angle_current;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	61da      	str	r2, [r3, #28]

//	getShaftVelocity();
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40a0d97c 	.word	0x40a0d97c

08001094 <_ZN17AS5048A_interface14updateVelocityEv>:

void AS5048A_interface::updateVelocity()
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af02      	add	r7, sp, #8
 800109a:	6078      	str	r0, [r7, #4]
	// calculate sample time
	float Ts = 1e-3f;
 800109c:	4b3f      	ldr	r3, [pc, #252]	@ (800119c <_ZN17AS5048A_interface14updateVelocityEv+0x108>)
 800109e:	61fb      	str	r3, [r7, #28]

	// [2] EKF Velocity estimation
	_float_t angle_measurement = get_full_rotation_angle();
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff43 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 80010a6:	eef0 7a40 	vmov.f32	s15, s0
 80010aa:	edc7 7a06 	vstr	s15, [r7, #24]
	
    _float_t fx[EKF_N];
    fx[0] = _ekf_s_encoder.x[0] + _ekf_s_encoder.x[1] * Ts;   // Angle update
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b2:	ed93 7a00 	vldr	s14, [r3]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ba:	3304      	adds	r3, #4
 80010bc:	edd3 6a00 	vldr	s13, [r3]
 80010c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80010c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010cc:	edc7 7a04 	vstr	s15, [r7, #16]
    fx[1] = _ekf_s_encoder.x[1];                    // Velocity remains the same
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	617b      	str	r3, [r7, #20]
    ekf_encoder.ekf_predict(&_ekf_s_encoder, fx, F, Q);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f103 0494 	add.w	r4, r3, #148	@ 0x94
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3380      	adds	r3, #128	@ 0x80
 80010ee:	f107 0210 	add.w	r2, r7, #16
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	4623      	mov	r3, r4
 80010f6:	f000 fbc0 	bl	800187a <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_>

    _float_t hx[EKF_N];
    hx[0] = _ekf_s_encoder.x[0];  // Predicted measurement
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60bb      	str	r3, [r7, #8]
    ekf_encoder.ekf_update(&_ekf_s_encoder, &angle_measurement, hx, H, R);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	33a4      	adds	r3, #164	@ 0xa4
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	3290      	adds	r2, #144	@ 0x90
 8001116:	f107 0508 	add.w	r5, r7, #8
 800111a:	f107 0418 	add.w	r4, r7, #24
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	462b      	mov	r3, r5
 8001124:	4622      	mov	r2, r4
 8001126:	f000 fcb4 	bl	8001a92 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_>

    vel_prev_EKF = LPF_velocity(_ekf_s_encoder.x[1]);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112e:	3304      	adds	r3, #4
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	4819      	ldr	r0, [pc, #100]	@ (80011a0 <_ZN17AS5048A_interface14updateVelocityEv+0x10c>)
 800113a:	f001 fc13 	bl	8002964 <_ZN13LowPassFilterclEf>
 800113e:	eef0 7a40 	vmov.f32	s15, s0
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34



    // [1] Velocity calculation
    vel_prev = ((float)(full_rotations - vel_full_rotations) * _2PI + (angle_prev - vel_angle_prev)) / Ts;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80011a4 <_ZN17AS5048A_interface14updateVelocityEv+0x110>
 800115e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	edd3 6a07 	vldr	s13, [r3, #28]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800116e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001172:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001176:	ed97 7a07 	vldr	s14, [r7, #28]
 800117a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// save variables for next iteration
	vel_angle_prev = angle_prev;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69da      	ldr	r2, [r3, #28]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
	vel_full_rotations = full_rotations;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	63da      	str	r2, [r3, #60]	@ 0x3c
	// Low pass filter
//	vel_prev_LPF = sensor_direction * LPF_velocity(vel_prev);
}
 8001194:	bf00      	nop
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bdb0      	pop	{r4, r5, r7, pc}
 800119c:	3a83126f 	.word	0x3a83126f
 80011a0:	20000200 	.word	0x20000200
 80011a4:	40c90fdb 	.word	0x40c90fdb

080011a8 <_ZN17AS5048A_interface13getShaftAngleEv>:
 * Get filtered absolute angular position from encoder with sensor direction
 *
 * @return absolute angular position with sensor direction [radians]
*/
float AS5048A_interface::getShaftAngle() 
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	ed2d 8b02 	vpush	{d8}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	return sensor_direction * LPF_position(get_full_rotation_angle()) - sensor_offset;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011b8:	ee07 3a90 	vmov	s15, r3
 80011bc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff feb3 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 80011c6:	eef0 7a40 	vmov.f32	s15, s0
 80011ca:	eeb0 0a67 	vmov.f32	s0, s15
 80011ce:	4809      	ldr	r0, [pc, #36]	@ (80011f4 <_ZN17AS5048A_interface13getShaftAngleEv+0x4c>)
 80011d0:	f001 fbc8 	bl	8002964 <_ZN13LowPassFilterclEf>
 80011d4:	eef0 7a40 	vmov.f32	s15, s0
 80011d8:	ee28 7a27 	vmul.f32	s14, s16, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80011e2:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80011e6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	ecbd 8b02 	vpop	{d8}
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001f4 	.word	0x200001f4

080011f8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff f95a 	bl	80004bc <__aeabi_i2d>
 8001208:	4604      	mov	r4, r0
 800120a:	460d      	mov	r5, r1
 800120c:	6838      	ldr	r0, [r7, #0]
 800120e:	f7ff f955 	bl	80004bc <__aeabi_i2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	ec43 2b11 	vmov	d1, r2, r3
 800121a:	ec45 4b10 	vmov	d0, r4, r5
 800121e:	f009 fb1f 	bl	800a860 <pow>
 8001222:	eeb0 7a40 	vmov.f32	s14, s0
 8001226:	eef0 7a60 	vmov.f32	s15, s1
    }
 800122a:	eeb0 0a47 	vmov.f32	s0, s14
 800122e:	eef0 0a67 	vmov.f32	s1, s15
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bdb0      	pop	{r4, r5, r7, pc}

08001238 <_ZN12CurrentSenseC1Ev>:

#include <CurrentSense.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU


CurrentSense::CurrentSense() 
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	4a4d      	ldr	r2, [pc, #308]	@ (8001378 <_ZN12CurrentSenseC1Ev+0x140>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	334c      	adds	r3, #76	@ 0x4c
 800124a:	2201      	movs	r2, #1
 800124c:	2102      	movs	r1, #2
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fa74 	bl	800173c <_ZN3EKFC1Eii>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a49      	ldr	r2, [pc, #292]	@ (800137c <_ZN12CurrentSenseC1Ev+0x144>)
 8001258:	3360      	adds	r3, #96	@ 0x60
 800125a:	ca07      	ldmia	r2, {r0, r1, r2}
 800125c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a47      	ldr	r2, [pc, #284]	@ (8001380 <_ZN12CurrentSenseC1Ev+0x148>)
 8001264:	f103 049c 	add.w	r4, r3, #156	@ 0x9c
 8001268:	4615      	mov	r5, r2
 800126a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001272:	682b      	ldr	r3, [r5, #0]
 8001274:	6023      	str	r3, [r4, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a41      	ldr	r2, [pc, #260]	@ (8001380 <_ZN12CurrentSenseC1Ev+0x148>)
 800127a:	f103 04c0 	add.w	r4, r3, #192	@ 0xc0
 800127e:	4615      	mov	r5, r2
 8001280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001288:	682b      	ldr	r3, [r5, #0]
 800128a:	6023      	str	r3, [r4, #0]
 800128c:	4b3d      	ldr	r3, [pc, #244]	@ (8001384 <_ZN12CurrentSenseC1Ev+0x14c>)
 800128e:	ed93 7a00 	vldr	s14, [r3]
 8001292:	4b3d      	ldr	r3, [pc, #244]	@ (8001388 <_ZN12CurrentSenseC1Ev+0x150>)
 8001294:	edd3 7a00 	vldr	s15, [r3]
 8001298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129c:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800138c <_ZN12CurrentSenseC1Ev+0x154>
 80012a0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80012a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001390 <_ZN12CurrentSenseC1Ev+0x158>)
 80012a6:	ed93 7a00 	vldr	s14, [r3]
 80012aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80012da:	4b2a      	ldr	r3, [pc, #168]	@ (8001384 <_ZN12CurrentSenseC1Ev+0x14c>)
 80012dc:	ed93 7a00 	vldr	s14, [r3]
 80012e0:	4b29      	ldr	r3, [pc, #164]	@ (8001388 <_ZN12CurrentSenseC1Ev+0x150>)
 80012e2:	edd3 7a00 	vldr	s15, [r3]
 80012e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ea:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800138c <_ZN12CurrentSenseC1Ev+0x154>
 80012ee:	ee67 6a87 	vmul.f32	s13, s15, s14
 80012f2:	4b27      	ldr	r3, [pc, #156]	@ (8001390 <_ZN12CurrentSenseC1Ev+0x158>)
 80012f4:	ed93 7a00 	vldr	s14, [r3]
 80012f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8001328:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <_ZN12CurrentSenseC1Ev+0x14c>)
 800132a:	ed93 7a00 	vldr	s14, [r3]
 800132e:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <_ZN12CurrentSenseC1Ev+0x150>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001338:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800138c <_ZN12CurrentSenseC1Ev+0x154>
 800133c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001340:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <_ZN12CurrentSenseC1Ev+0x158>)
 8001342:	ed93 7a00 	vldr	s14, [r3]
 8001346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800134e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edc3 7a41 	vstr	s15, [r3, #260]	@ 0x104
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a0e      	ldr	r2, [pc, #56]	@ (8001394 <_ZN12CurrentSenseC1Ev+0x15c>)
 800135c:	f503 7484 	add.w	r4, r3, #264	@ 0x108
 8001360:	4615      	mov	r5, r2
 8001362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136a:	682b      	ldr	r3, [r5, #0]
 800136c:	6023      	str	r3, [r4, #0]
{
	
}
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	0800c01c 	.word	0x0800c01c
 800137c:	0800bfb0 	.word	0x0800bfb0
 8001380:	0800bfbc 	.word	0x0800bfbc
 8001384:	20000098 	.word	0x20000098
 8001388:	200000a0 	.word	0x200000a0
 800138c:	3a83126f 	.word	0x3a83126f
 8001390:	200000a4 	.word	0x200000a4
 8001394:	0800bfe0 	.word	0x0800bfe0

08001398 <_ZN12CurrentSenseD1Ev>:

CurrentSense::~CurrentSense() 
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	4a06      	ldr	r2, [pc, #24]	@ (80013bc <_ZN12CurrentSenseD1Ev+0x24>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	334c      	adds	r3, #76	@ 0x4c
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f9de 	bl	800176c <_ZN3EKFD1Ev>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	0800c01c 	.word	0x0800c01c

080013c0 <_ZN12CurrentSenseD0Ev>:
CurrentSense::~CurrentSense() 
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
}
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ffe5 	bl	8001398 <_ZN12CurrentSenseD1Ev>
 80013ce:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f009 fa22 	bl	800a81c <_ZdlPvj>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <_ZN12CurrentSense16initCurrentsenseEff>:
/**
 * @brief Initialize Direct Memory Access (DMA) for Analog to Digital Convertor (ADC)
 * 			, which use to read current sensor signals 
*/
void CurrentSense::initCurrentsense(float _shunt_resistor, float _gain) 
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80013f0:	edc7 0a01 	vstr	s1, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, adcResultDMA_a, 1);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3344      	adds	r3, #68	@ 0x44
 80013f8:	2201      	movs	r2, #1
 80013fa:	4619      	mov	r1, r3
 80013fc:	480c      	ldr	r0, [pc, #48]	@ (8001430 <_ZN12CurrentSense16initCurrentsenseEff+0x4c>)
 80013fe:	f004 f9d7 	bl	80057b0 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, adcResultDMA_c, 1);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3348      	adds	r3, #72	@ 0x48
 8001406:	2201      	movs	r2, #1
 8001408:	4619      	mov	r1, r3
 800140a:	480a      	ldr	r0, [pc, #40]	@ (8001434 <_ZN12CurrentSense16initCurrentsenseEff+0x50>)
 800140c:	f004 f9d0 	bl	80057b0 <HAL_ADC_Start_DMA>

	R_sense = _shunt_resistor;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	62da      	str	r2, [r3, #44]	@ 0x2c
	gain_a = _gain;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	621a      	str	r2, [r3, #32]
	gain_b = _gain;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	625a      	str	r2, [r3, #36]	@ 0x24
	gain_c = _gain;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000440 	.word	0x20000440
 8001434:	200004ac 	.word	0x200004ac

08001438 <_ZN12CurrentSense16calibrateOffsetsEv>:

/**
 * @brief Calibrate current offset in initial steady state (first 1000 iterations)
*/
void CurrentSense::calibrateOffsets() 
{
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	const int calibration_rounds = 1000;
 8001440:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001444:	60bb      	str	r3, [r7, #8]
	// find adc offset = zero current voltage
	offset_ia = 0;
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	e9c1 2302 	strd	r2, r3, [r1, #8]
	offset_ib = 0;
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	offset_ic = 0;
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	// read the adc voltage 1000 times ( arbitrary number )
	for (int i = 0; i < calibration_rounds; i++) 
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	e02b      	b.n	80014ce <_ZN12CurrentSense16calibrateOffsetsEv+0x96>
	{
		offset_ia += adcResultDMA_a[0];
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f80b 	bl	800049c <__aeabi_ui2d>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4620      	mov	r0, r4
 800148c:	4629      	mov	r1, r5
 800148e:	f7fe fec9 	bl	8000224 <__adddf3>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	e9c1 2302 	strd	r2, r3, [r1, #8]
//		offset_ib += adcResultDMA[0];
		offset_ic += adcResultDMA_c[0];
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7fe fff8 	bl	800049c <__aeabi_ui2d>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4620      	mov	r0, r4
 80014b2:	4629      	mov	r1, r5
 80014b4:	f7fe feb6 	bl	8000224 <__adddf3>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	e9c1 2306 	strd	r2, r3, [r1, #24]
		HAL_Delay(1);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f003 fd86 	bl	8004fd4 <HAL_Delay>
	for (int i = 0; i < calibration_rounds; i++) 
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3301      	adds	r3, #1
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014d4:	dbcf      	blt.n	8001476 <_ZN12CurrentSense16calibrateOffsetsEv+0x3e>
	}
	// calculate the mean offsets
	offset_ia = offset_ia / calibration_rounds;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <_ZN12CurrentSense16calibrateOffsetsEv+0xdc>)
 80014e2:	f7ff f97f 	bl	80007e4 <__aeabi_ddiv>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
//	offset_ib = offset_ib / calibration_rounds;
	offset_ic = offset_ic / calibration_rounds;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <_ZN12CurrentSense16calibrateOffsetsEv+0xdc>)
 80014fc:	f7ff f972 	bl	80007e4 <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bdb0      	pop	{r4, r5, r7, pc}
 8001512:	bf00      	nop
 8001514:	408f4000 	.word	0x408f4000

08001518 <_ZN12CurrentSense16getPhaseCurrentsEv>:
 * @note the value 3.05 to 0.25 is the range of ADC signal from DRV8323RH, please see Datasheet.
 * 
 * @return  Phase current in Struct PhaseCurrent_s (Amperes)
*/
struct PhaseCurrent_s CurrentSense::getPhaseCurrents() 
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b08a      	sub	sp, #40	@ 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6178      	str	r0, [r7, #20]
//	struct PhaseCurrent_s current;
	current.a = ((offset_ia - adcResultDMA_a[0]) * (3.3 / 4096.0)) / (R_sense * gain_a);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe ffb6 	bl	800049c <__aeabi_ui2d>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fe72 	bl	8000220 <__aeabi_dsub>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	a33a      	add	r3, pc, #232	@ (adr r3, 8001630 <_ZN12CurrentSense16getPhaseCurrentsEv+0x118>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f7ff f821 	bl	8000590 <__aeabi_dmul>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4614      	mov	r4, r2
 8001554:	461d      	mov	r5, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001566:	ee17 0a90 	vmov	r0, s15
 800156a:	f7fe ffb9 	bl	80004e0 <__aeabi_f2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4620      	mov	r0, r4
 8001574:	4629      	mov	r1, r5
 8001576:	f7ff f935 	bl	80007e4 <__aeabi_ddiv>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f7ff fab5 	bl	8000af0 <__aeabi_d2f>
 8001586:	4602      	mov	r2, r0
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	631a      	str	r2, [r3, #48]	@ 0x30
//	current.b = ((offset_ib - adcResultDMA_b[0]) * (3.3 / 4096.0)) / (R_sense * gain_b);
	current.c = ((offset_ic - adcResultDMA_c[0]) * (3.3 / 4096.0)) / (R_sense * gain_c);
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ff80 	bl	800049c <__aeabi_ui2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7fe fe3c 	bl	8000220 <__aeabi_dsub>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	a31f      	add	r3, pc, #124	@ (adr r3, 8001630 <_ZN12CurrentSense16getPhaseCurrentsEv+0x118>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7fe ffeb 	bl	8000590 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4614      	mov	r4, r2
 80015c0:	461d      	mov	r5, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80015ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d2:	ee17 0a90 	vmov	r0, s15
 80015d6:	f7fe ff83 	bl	80004e0 <__aeabi_f2d>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4620      	mov	r0, r4
 80015e0:	4629      	mov	r1, r5
 80015e2:	f7ff f8ff 	bl	80007e4 <__aeabi_ddiv>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff fa7f 	bl	8000af0 <__aeabi_d2f>
 80015f2:	4602      	mov	r2, r0
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	639a      	str	r2, [r3, #56]	@ 0x38
//    current.b = - current.a  - current.c; // --(1)
	return current;
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	3230      	adds	r2, #48	@ 0x30
 8001600:	ca07      	ldmia	r2, {r0, r1, r2}
 8001602:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001606:	69f9      	ldr	r1, [r7, #28]
 8001608:	6a3a      	ldr	r2, [r7, #32]
 800160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160c:	ee06 1a90 	vmov	s13, r1
 8001610:	ee07 2a10 	vmov	s14, r2
 8001614:	ee07 3a90 	vmov	s15, r3
}
 8001618:	eeb0 0a66 	vmov.f32	s0, s13
 800161c:	eef0 0a47 	vmov.f32	s1, s14
 8001620:	eeb0 1a67 	vmov.f32	s2, s15
 8001624:	3728      	adds	r7, #40	@ 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bdb0      	pop	{r4, r5, r7, pc}
 800162a:	bf00      	nop
 800162c:	f3af 8000 	nop.w
 8001630:	66666666 	.word	0x66666666
 8001634:	3f4a6666 	.word	0x3f4a6666

08001638 <_ZN12CurrentSense14getFOCCurrentsEf>:
 * @note function calculate by Clarke-Park transform of the phase currents
 * 
 * @return  DQ current in Struct DQCurrent_s (Amperes)
*/
struct DQCurrent_s CurrentSense::getFOCCurrents(float angle_el) 
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b08b      	sub	sp, #44	@ 0x2c
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	ed87 0a02 	vstr	s0, [r7, #8]
	// read current phase currents
//	struct PhaseCurrent_s current = getPhaseCurrents(); //Ia, Ib, Ic
	current = getPhaseCurrents(); //Ia,Ib,Ic
 8001644:	68fc      	ldr	r4, [r7, #12]
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f7ff ff66 	bl	8001518 <_ZN12CurrentSense16getPhaseCurrentsEv>
 800164c:	eef0 6a40 	vmov.f32	s13, s0
 8001650:	eeb0 7a60 	vmov.f32	s14, s1
 8001654:	eef0 7a41 	vmov.f32	s15, s2
 8001658:	edc4 6a0c 	vstr	s13, [r4, #48]	@ 0x30
 800165c:	ed84 7a0d 	vstr	s14, [r4, #52]	@ 0x34
 8001660:	edc4 7a0e 	vstr	s15, [r4, #56]	@ 0x38
//    float a = current.a - mid;
//    float b = current.b - mid;
//    i_alpha = a;
//    i_beta = _1_SQRT3 * a + _2_SQRT3 * b;

	i_alpha = current.a;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
	i_beta = (-(_1_SQRT3) * current.a) + (-(_2_SQRT3) * current.c);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001670:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001714 <_ZN12CurrentSense14getFOCCurrentsEf+0xdc>
 8001674:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800167e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001718 <_ZN12CurrentSense14getFOCCurrentsEf+0xe0>
 8001682:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168a:	edc7 7a08 	vstr	s15, [r7, #32]

	// calculate park transform
	float ct = _cos(angle_el);
 800168e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001692:	f001 f8c9 	bl	8002828 <_Z4_cosf>
 8001696:	ed87 0a07 	vstr	s0, [r7, #28]
	float st = _sin(angle_el);
 800169a:	ed97 0a02 	vldr	s0, [r7, #8]
 800169e:	f001 f84b 	bl	8002738 <_Z4_sinf>
 80016a2:	ed87 0a06 	vstr	s0, [r7, #24]

//	struct DQCurrent_s dq_current;		// Id, Iq

	dq_current.d = i_alpha * ct + i_beta  * st;
 80016a6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80016ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016b2:	edd7 6a08 	vldr	s13, [r7, #32]
 80016b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	dq_current.q = i_beta  * ct - i_alpha * st;
 80016c8:	ed97 7a08 	vldr	s14, [r7, #32]
 80016cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80016d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80016d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80016dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	return dq_current;
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	323c      	adds	r2, #60	@ 0x3c
 80016f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	ee07 2a10 	vmov	s14, r2
 8001702:	ee07 3a90 	vmov	s15, r3
}
 8001706:	eeb0 0a47 	vmov.f32	s0, s14
 800170a:	eef0 0a67 	vmov.f32	s1, s15
 800170e:	372c      	adds	r7, #44	@ 0x2c
 8001710:	46bd      	mov	sp, r7
 8001712:	bd90      	pop	{r4, r7, pc}
 8001714:	bf13cd3a 	.word	0xbf13cd3a
 8001718:	bf93cd3a 	.word	0xbf93cd3a

0800171c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	ed87 0a01 	vstr	s0, [r7, #4]
 8001726:	ed97 0a01 	vldr	s0, [r7, #4]
 800172a:	f009 f92b 	bl	800a984 <sqrtf>
 800172e:	eef0 7a40 	vmov.f32	s15, s0
 8001732:	eeb0 0a67 	vmov.f32	s0, s15
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_ZN3EKFC1Eii>:
#include "ekf.h"

// EKF ///////////////////////////////////////////////////////////////////////
EKF::EKF(int n, int m) : EKF_N(n), EKF_M(m){}
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	4a07      	ldr	r2, [pc, #28]	@ (8001768 <_ZN3EKFC1Eii+0x2c>)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	0800c02c 	.word	0x0800c02c

0800176c <_ZN3EKFD1Ev>:

EKF::~EKF(){}
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <_ZN3EKFD1Ev+0x1c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	0800c02c 	.word	0x0800c02c

0800178c <_ZN3EKFD0Ev>:
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ffe9 	bl	800176c <_ZN3EKFD1Ev>
 800179a:	210c      	movs	r1, #12
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f009 f83d 	bl	800a81c <_ZdlPvj>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_ZN3EKF14ekf_initializeEP5ekf_tPKf>:
 * @param ekf pointer to an ekf_t structure
 * @param pdiag a vector of length EKF_N containing the initial values for the
 * covariance matrix diagonal
 */
void EKF::ekf_initialize(ekf_t* ekf, const _float_t* pdiag) 
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
    ekf->x = new _float_t[EKF_N];
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d201      	bcs.n	80017c8 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x1c>
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	e001      	b.n	80017cc <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x20>
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
 80017cc:	4618      	mov	r0, r3
 80017ce:	f009 f829 	bl	800a824 <_Znaj>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	601a      	str	r2, [r3, #0]
    ekf->P = new _float_t[EKF_N * EKF_N];
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	6852      	ldr	r2, [r2, #4]
 80017e2:	fb02 f303 	mul.w	r3, r2, r3
 80017e6:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d201      	bcs.n	80017f2 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x46>
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	e001      	b.n	80017f6 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x4a>
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	4618      	mov	r0, r3
 80017f8:	f009 f814 	bl	800a824 <_Znaj>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < EKF_N; ++i) 
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e02d      	b.n	8001866 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0xba>
    {
        for (int j = 0; j < EKF_N; ++j) 
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	e01a      	b.n	8001846 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x9a>
        {
            ekf->P[i * EKF_N + j] = i == j ? pdiag[i] : 0;
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	429a      	cmp	r2, r3
 8001816:	d105      	bne.n	8001824 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x78>
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	e001      	b.n	8001828 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x7c>
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	6851      	ldr	r1, [r2, #4]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	6852      	ldr	r2, [r2, #4]
 8001830:	6978      	ldr	r0, [r7, #20]
 8001832:	fb02 f000 	mul.w	r0, r2, r0
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4402      	add	r2, r0
 800183a:	0092      	lsls	r2, r2, #2
 800183c:	440a      	add	r2, r1
 800183e:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < EKF_N; ++j) 
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	3301      	adds	r3, #1
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	dbdf      	blt.n	8001810 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x64>
        }
        ekf->x[i] = 0;
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < EKF_N; ++i) 
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3301      	adds	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	429a      	cmp	r2, r3
 800186e:	dbcc      	blt.n	800180a <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x5e>
    }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_>:
  * @param F Jacobian of state-transition function
  * @param Q process noise matrix
  *
  */
void EKF::ekf_predict(ekf_t* ekf, const _float_t* fx, const _float_t* F, const _float_t* Q) 
{
 800187a:	b590      	push	{r4, r7, lr}
 800187c:	b08d      	sub	sp, #52	@ 0x34
 800187e:	af04      	add	r7, sp, #16
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	603b      	str	r3, [r7, #0]
    // \hat{x}_k = f(\hat{x}_{k-1}, u_k)
    memcpy(ekf->x, fx, EKF_N * sizeof(_float_t));
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	6818      	ldr	r0, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	461a      	mov	r2, r3
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	f00a fb13 	bl	800bec0 <memcpy>

    // P_k = F_{k-1} P_{k-1} F^T_{k-1} + Q_{k-1}
    _float_t* FP = new _float_t[EKF_N * EKF_N]();
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	6852      	ldr	r2, [r2, #4]
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	461c      	mov	r4, r3
 80018a8:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80018ac:	429c      	cmp	r4, r3
 80018ae:	d201      	bcs.n	80018b4 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x3a>
 80018b0:	00a3      	lsls	r3, r4, #2
 80018b2:	e001      	b.n	80018b8 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x3e>
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
 80018b8:	4618      	mov	r0, r3
 80018ba:	f008 ffb3 	bl	800a824 <_Znaj>
 80018be:	4603      	mov	r3, r0
 80018c0:	4618      	mov	r0, r3
 80018c2:	4602      	mov	r2, r0
 80018c4:	1e63      	subs	r3, r4, #1
 80018c6:	e004      	b.n	80018d2 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x58>
 80018c8:	f04f 0100 	mov.w	r1, #0
 80018cc:	6011      	str	r1, [r2, #0]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	3204      	adds	r2, #4
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	daf8      	bge.n	80018c8 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x4e>
 80018d6:	61f8      	str	r0, [r7, #28]
    _mulmat(F, ekf->P, FP, EKF_N, EKF_N, EKF_N);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	6858      	ldr	r0, [r3, #4]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	6852      	ldr	r2, [r2, #4]
 80018e4:	68f9      	ldr	r1, [r7, #12]
 80018e6:	6849      	ldr	r1, [r1, #4]
 80018e8:	9102      	str	r1, [sp, #8]
 80018ea:	9201      	str	r2, [sp, #4]
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	4602      	mov	r2, r0
 80018f2:	6839      	ldr	r1, [r7, #0]
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 fa8d 	bl	8001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>

    _float_t* Ft = new _float_t[EKF_N * EKF_N]();
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	6852      	ldr	r2, [r2, #4]
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	461c      	mov	r4, r3
 8001908:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800190c:	429c      	cmp	r4, r3
 800190e:	d201      	bcs.n	8001914 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x9a>
 8001910:	00a3      	lsls	r3, r4, #2
 8001912:	e001      	b.n	8001918 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x9e>
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
 8001918:	4618      	mov	r0, r3
 800191a:	f008 ff83 	bl	800a824 <_Znaj>
 800191e:	4603      	mov	r3, r0
 8001920:	4618      	mov	r0, r3
 8001922:	4602      	mov	r2, r0
 8001924:	1e63      	subs	r3, r4, #1
 8001926:	e004      	b.n	8001932 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xb8>
 8001928:	f04f 0100 	mov.w	r1, #0
 800192c:	6011      	str	r1, [r2, #0]
 800192e:	3b01      	subs	r3, #1
 8001930:	3204      	adds	r2, #4
 8001932:	2b00      	cmp	r3, #0
 8001934:	daf8      	bge.n	8001928 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xae>
 8001936:	61b8      	str	r0, [r7, #24]
    _transpose(F, Ft, EKF_N, EKF_N);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	4613      	mov	r3, r2
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	6839      	ldr	r1, [r7, #0]
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 fb15 	bl	8001f78 <_ZN3EKF10_transposeEPKfPfii>

    _float_t* FPFt = new _float_t[EKF_N * EKF_N]();
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	6852      	ldr	r2, [r2, #4]
 8001956:	fb02 f303 	mul.w	r3, r2, r3
 800195a:	461c      	mov	r4, r3
 800195c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8001960:	429c      	cmp	r4, r3
 8001962:	d201      	bcs.n	8001968 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xee>
 8001964:	00a3      	lsls	r3, r4, #2
 8001966:	e001      	b.n	800196c <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xf2>
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
 800196c:	4618      	mov	r0, r3
 800196e:	f008 ff59 	bl	800a824 <_Znaj>
 8001972:	4603      	mov	r3, r0
 8001974:	4618      	mov	r0, r3
 8001976:	4602      	mov	r2, r0
 8001978:	1e63      	subs	r3, r4, #1
 800197a:	e004      	b.n	8001986 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x10c>
 800197c:	f04f 0100 	mov.w	r1, #0
 8001980:	6011      	str	r1, [r2, #0]
 8001982:	3b01      	subs	r3, #1
 8001984:	3204      	adds	r2, #4
 8001986:	2b00      	cmp	r3, #0
 8001988:	daf8      	bge.n	800197c <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x102>
 800198a:	6178      	str	r0, [r7, #20]
    _mulmat(FP, Ft, FPFt, EKF_N, EKF_N, EKF_N);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	6852      	ldr	r2, [r2, #4]
 8001994:	68f9      	ldr	r1, [r7, #12]
 8001996:	6849      	ldr	r1, [r1, #4]
 8001998:	9102      	str	r1, [sp, #8]
 800199a:	9201      	str	r2, [sp, #4]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	69f9      	ldr	r1, [r7, #28]
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 fa35 	bl	8001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>

    _addmat(FPFt, Q, ekf->P, EKF_N, EKF_N);
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	6859      	ldr	r1, [r3, #4]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	6852      	ldr	r2, [r2, #4]
 80019b6:	9201      	str	r2, [sp, #4]
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	460b      	mov	r3, r1
 80019bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019be:	6979      	ldr	r1, [r7, #20]
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f000 fb0f 	bl	8001fe4 <_ZN3EKF7_addmatEPKfS1_Pfii>

    delete[] FP;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x158>
 80019cc:	69f8      	ldr	r0, [r7, #28]
 80019ce:	f008 ff27 	bl	800a820 <_ZdaPv>
    delete[] Ft;
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d002      	beq.n	80019de <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x164>
 80019d8:	69b8      	ldr	r0, [r7, #24]
 80019da:	f008 ff21 	bl	800a820 <_ZdaPv>
    delete[] FPFt;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x170>
 80019e4:	6978      	ldr	r0, [r7, #20]
 80019e6:	f008 ff1b 	bl	800a820 <_ZdaPv>
}
 80019ea:	bf00      	nop
 80019ec:	3724      	adds	r7, #36	@ 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd90      	pop	{r4, r7, pc}

080019f2 <_ZN3EKF16ekf_update_step3EP5ekf_tPf>:



void EKF::ekf_update_step3(ekf_t* ekf, _float_t* GH) 
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b08a      	sub	sp, #40	@ 0x28
 80019f6:	af04      	add	r7, sp, #16
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
    _negate(GH, EKF_N, EKF_N);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 fb30 	bl	800206e <_ZN3EKF7_negateEPfii>
    _addeye(GH, EKF_N);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	461a      	mov	r2, r3
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 fb63 	bl	80020e2 <_ZN3EKF7_addeyeEPfi>
    _float_t* GHP = new _float_t[EKF_N * EKF_N];
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	6852      	ldr	r2, [r2, #4]
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d201      	bcs.n	8001a34 <_ZN3EKF16ekf_update_step3EP5ekf_tPf+0x42>
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	e001      	b.n	8001a38 <_ZN3EKF16ekf_update_step3EP5ekf_tPf+0x46>
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f008 fef3 	bl	800a824 <_Znaj>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	617b      	str	r3, [r7, #20]
    _mulmat(GH, ekf->P, GHP, EKF_N, EKF_N, EKF_N);
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	6858      	ldr	r0, [r3, #4]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	6852      	ldr	r2, [r2, #4]
 8001a4e:	68f9      	ldr	r1, [r7, #12]
 8001a50:	6849      	ldr	r1, [r1, #4]
 8001a52:	9102      	str	r1, [sp, #8]
 8001a54:	9201      	str	r2, [sp, #4]
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 f9d8 	bl	8001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    memcpy(ekf->P, GHP, EKF_N * EKF_N * sizeof(_float_t));
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	6858      	ldr	r0, [r3, #4]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	6852      	ldr	r2, [r2, #4]
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	461a      	mov	r2, r3
 8001a78:	6979      	ldr	r1, [r7, #20]
 8001a7a:	f00a fa21 	bl	800bec0 <memcpy>
    delete[] GHP;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <_ZN3EKF16ekf_update_step3EP5ekf_tPf+0x98>
 8001a84:	6978      	ldr	r0, [r7, #20]
 8001a86:	f008 fecb 	bl	800a820 <_ZdaPv>
}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_>:
  * @param H sensor-function Jacobian matrix
  * @param R measurement-noise matrix
  *
  */
bool EKF::ekf_update(ekf_t* ekf, const _float_t* z, const _float_t* hx, const _float_t* H, const _float_t* R) 
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b092      	sub	sp, #72	@ 0x48
 8001a96:	af04      	add	r7, sp, #16
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	603b      	str	r3, [r7, #0]
     // G_k = P_k H^T_k (H_k P_k H^T_k + R)^{-1}
    _float_t* G = new _float_t[EKF_N * EKF_M];
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	6892      	ldr	r2, [r2, #8]
 8001aa8:	fb02 f303 	mul.w	r3, r2, r3
 8001aac:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d201      	bcs.n	8001ab8 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x26>
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	e001      	b.n	8001abc <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x2a>
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8001abc:	4618      	mov	r0, r3
 8001abe:	f008 feb1 	bl	800a824 <_Znaj>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	637b      	str	r3, [r7, #52]	@ 0x34
    _float_t* Ht = new _float_t[EKF_N * EKF_M];
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	6892      	ldr	r2, [r2, #8]
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
 8001ad2:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d201      	bcs.n	8001ade <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x4c>
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	e001      	b.n	8001ae2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x50>
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f008 fe9e 	bl	800a824 <_Znaj>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	633b      	str	r3, [r7, #48]	@ 0x30
    _transpose(H, Ht, EKF_M, EKF_N);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	4613      	mov	r3, r2
 8001af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001afa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 fa3b 	bl	8001f78 <_ZN3EKF10_transposeEPKfPfii>
    _float_t* PHt = new _float_t[EKF_N * EKF_M];
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	6892      	ldr	r2, [r2, #8]
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d201      	bcs.n	8001b1a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x88>
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	e001      	b.n	8001b1e <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x8c>
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f008 fe80 	bl	800a824 <_Znaj>
 8001b24:	4603      	mov	r3, r0
 8001b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    _mulmat(ekf->P, Ht, PHt, EKF_N, EKF_N, EKF_M);
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	6858      	ldr	r0, [r3, #4]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	6852      	ldr	r2, [r2, #4]
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	6889      	ldr	r1, [r1, #8]
 8001b38:	9102      	str	r1, [sp, #8]
 8001b3a:	9201      	str	r2, [sp, #4]
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b42:	4601      	mov	r1, r0
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 f965 	bl	8001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t* HP = new _float_t[EKF_M * EKF_N];
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	6852      	ldr	r2, [r2, #4]
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
 8001b56:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d201      	bcs.n	8001b62 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0xd0>
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	e001      	b.n	8001b66 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0xd4>
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	4618      	mov	r0, r3
 8001b68:	f008 fe5c 	bl	800a824 <_Znaj>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    _mulmat(H, ekf->P, HP, EKF_M, EKF_N, EKF_N);
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	6858      	ldr	r0, [r3, #4]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	6852      	ldr	r2, [r2, #4]
 8001b7c:	68f9      	ldr	r1, [r7, #12]
 8001b7e:	6849      	ldr	r1, [r1, #4]
 8001b80:	9102      	str	r1, [sp, #8]
 8001b82:	9201      	str	r2, [sp, #4]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b88:	4602      	mov	r2, r0
 8001b8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 f941 	bl	8001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t* HpHt = new _float_t[EKF_M * EKF_M];
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	6892      	ldr	r2, [r2, #8]
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d201      	bcs.n	8001baa <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x118>
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	e001      	b.n	8001bae <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x11c>
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f008 fe38 	bl	800a824 <_Znaj>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    _mulmat(HP, Ht, HpHt, EKF_M, EKF_N, EKF_M);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	6852      	ldr	r2, [r2, #4]
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	6889      	ldr	r1, [r1, #8]
 8001bc4:	9102      	str	r1, [sp, #8]
 8001bc6:	9201      	str	r2, [sp, #4]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 f91f 	bl	8001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t* HpHtR = new _float_t[EKF_M * EKF_M];
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	6892      	ldr	r2, [r2, #8]
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d201      	bcs.n	8001bee <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x15c>
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	e001      	b.n	8001bf2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x160>
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f008 fe16 	bl	800a824 <_Znaj>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	623b      	str	r3, [r7, #32]
    _addmat(HpHt, R, HpHtR, EKF_M, EKF_M);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	6892      	ldr	r2, [r2, #8]
 8001c04:	9201      	str	r2, [sp, #4]
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f9e8 	bl	8001fe4 <_ZN3EKF7_addmatEPKfS1_Pfii>
    _float_t* HPHtRinv = new _float_t[EKF_M * EKF_M];
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	6892      	ldr	r2, [r2, #8]
 8001c1c:	fb02 f303 	mul.w	r3, r2, r3
 8001c20:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d201      	bcs.n	8001c2c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x19a>
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	e001      	b.n	8001c30 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x19e>
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c30:	4618      	mov	r0, r3
 8001c32:	f008 fdf7 	bl	800a824 <_Znaj>
 8001c36:	4603      	mov	r3, r0
 8001c38:	61fb      	str	r3, [r7, #28]
    if (!invert(HpHtR, HPHtRinv)) {
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	6a39      	ldr	r1, [r7, #32]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 fd1d 	bl	800267e <_ZN3EKF6invertEPKfPf>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f083 0301 	eor.w	r3, r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d02b      	beq.n	8001ca8 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x216>
        delete[] G;
 8001c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1ca>
 8001c56:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001c58:	f008 fde2 	bl	800a820 <_ZdaPv>
        delete[] Ht;
 8001c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1d6>
 8001c62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001c64:	f008 fddc 	bl	800a820 <_ZdaPv>
        delete[] PHt;
 8001c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1e2>
 8001c6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001c70:	f008 fdd6 	bl	800a820 <_ZdaPv>
        delete[] HP;
 8001c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1ee>
 8001c7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c7c:	f008 fdd0 	bl	800a820 <_ZdaPv>
        delete[] HpHt;
 8001c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1fa>
 8001c86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c88:	f008 fdca 	bl	800a820 <_ZdaPv>
        delete[] HpHtR;
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x206>
 8001c92:	6a38      	ldr	r0, [r7, #32]
 8001c94:	f008 fdc4 	bl	800a820 <_ZdaPv>
        delete[] HPHtRinv;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x212>
 8001c9e:	69f8      	ldr	r0, [r7, #28]
 8001ca0:	f008 fdbe 	bl	800a820 <_ZdaPv>
        return false;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e0b1      	b.n	8001e0c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x37a>
    }
    _mulmat(PHt, HPHtRinv, G, EKF_N, EKF_M, EKF_M);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	6892      	ldr	r2, [r2, #8]
 8001cb0:	68f9      	ldr	r1, [r7, #12]
 8001cb2:	6889      	ldr	r1, [r1, #8]
 8001cb4:	9102      	str	r1, [sp, #8]
 8001cb6:	9201      	str	r2, [sp, #4]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 f8a7 	bl	8001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>

    // \hat{x}_k = \hat{x_k} + G_k(z_k - h(\hat{x}_k))
    _float_t* z_hx = new _float_t[EKF_M];
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d201      	bcs.n	8001cd6 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x244>
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	e001      	b.n	8001cda <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x248>
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f008 fda2 	bl	800a824 <_Znaj>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	61bb      	str	r3, [r7, #24]
    _sub(z, hx, z_hx, EKF_M);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 fc98 	bl	8002626 <_ZN3EKF4_subEPKfS1_Pfi>
    _float_t* Gz_hx = new _float_t[EKF_N];
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d201      	bcs.n	8001d06 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x274>
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	e001      	b.n	8001d0a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x278>
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f008 fd8a 	bl	800a824 <_Znaj>
 8001d10:	4603      	mov	r3, r0
 8001d12:	617b      	str	r3, [r7, #20]
    _mulvec(G, z_hx, Gz_hx, EKF_N, EKF_M);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	6892      	ldr	r2, [r2, #8]
 8001d1c:	9201      	str	r2, [sp, #4]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f8dc 	bl	8001ee4 <_ZN3EKF7_mulvecEPKfS1_Pfii>
    _addvec(ekf->x, Gz_hx, ekf->x, EKF_N);
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	6819      	ldr	r1, [r3, #0]
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 fc45 	bl	80025ce <_ZN3EKF7_addvecEPKfS1_Pfi>

    // P_k = (I - G_k H_k) P_k
    _float_t* GH = new _float_t[EKF_N * EKF_N];
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	6852      	ldr	r2, [r2, #4]
 8001d4c:	fb02 f303 	mul.w	r3, r2, r3
 8001d50:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d201      	bcs.n	8001d5c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x2ca>
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	e001      	b.n	8001d60 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x2ce>
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d60:	4618      	mov	r0, r3
 8001d62:	f008 fd5f 	bl	800a824 <_Znaj>
 8001d66:	4603      	mov	r3, r0
 8001d68:	613b      	str	r3, [r7, #16]
    _mulmat(G, H, GH, EKF_N, EKF_M, EKF_N);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	6892      	ldr	r2, [r2, #8]
 8001d72:	68f9      	ldr	r1, [r7, #12]
 8001d74:	6849      	ldr	r1, [r1, #4]
 8001d76:	9102      	str	r1, [sp, #8]
 8001d78:	9201      	str	r2, [sp, #4]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d80:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 f846 	bl	8001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    ekf_update_step3(ekf, GH);
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	68b9      	ldr	r1, [r7, #8]
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7ff fe30 	bl	80019f2 <_ZN3EKF16ekf_update_step3EP5ekf_tPf>

    delete[] G;
 8001d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x30c>
 8001d98:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001d9a:	f008 fd41 	bl	800a820 <_ZdaPv>
    delete[] Ht;
 8001d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x318>
 8001da4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001da6:	f008 fd3b 	bl	800a820 <_ZdaPv>
    delete[] PHt;
 8001daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x324>
 8001db0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001db2:	f008 fd35 	bl	800a820 <_ZdaPv>
    delete[] HP;
 8001db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x330>
 8001dbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001dbe:	f008 fd2f 	bl	800a820 <_ZdaPv>
    delete[] HpHt;
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x33c>
 8001dc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001dca:	f008 fd29 	bl	800a820 <_ZdaPv>
    delete[] HpHtR;
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x348>
 8001dd4:	6a38      	ldr	r0, [r7, #32]
 8001dd6:	f008 fd23 	bl	800a820 <_ZdaPv>
    delete[] HPHtRinv;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x354>
 8001de0:	69f8      	ldr	r0, [r7, #28]
 8001de2:	f008 fd1d 	bl	800a820 <_ZdaPv>
    delete[] z_hx;
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x360>
 8001dec:	69b8      	ldr	r0, [r7, #24]
 8001dee:	f008 fd17 	bl	800a820 <_ZdaPv>
    delete[] Gz_hx;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x36c>
 8001df8:	6978      	ldr	r0, [r7, #20]
 8001dfa:	f008 fd11 	bl	800a820 <_ZdaPv>
    delete[] GH;
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x378>
 8001e04:	6938      	ldr	r0, [r7, #16]
 8001e06:	f008 fd0b 	bl	800a820 <_ZdaPv>

    // success
    return true;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3738      	adds	r7, #56	@ 0x38
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>:
        const _float_t * b,
        _float_t * c,
        const int arows,
        const int acols,
        const int bcols)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	@ 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	603b      	str	r3, [r7, #0]
    for (int i=0; i<arows; ++i) {
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	e052      	b.n	8001ece <_ZN3EKF7_mulmatEPKfS1_Pfiii+0xba>
        for (int j=0; j<bcols; ++j) {
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
 8001e2c:	e048      	b.n	8001ec0 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0xac>
            c[i*bcols+j] = 0;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e32:	fb03 f202 	mul.w	r2, r3, r2
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
            for (int k=0; k<acols; ++k) {
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e032      	b.n	8001eb2 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x9e>
                c[i*bcols+j] += a[i*acols+k] * b[k*bcols+j];
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e50:	fb03 f202 	mul.w	r2, r3, r2
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	ed93 7a00 	vldr	s14, [r3]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e66:	fb03 f202 	mul.w	r2, r3, r2
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	4413      	add	r3, r2
 8001e74:	edd3 6a00 	vldr	s13, [r3]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e7c:	fb03 f202 	mul.w	r2, r3, r2
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	edd3 7a00 	vldr	s15, [r3]
 8001e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e96:	fb03 f202 	mul.w	r2, r3, r2
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea8:	edc3 7a00 	vstr	s15, [r3]
            for (int k=0; k<acols; ++k) {
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbc8      	blt.n	8001e4c <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x38>
        for (int j=0; j<bcols; ++j) {
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dbb2      	blt.n	8001e2e <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x1a>
    for (int i=0; i<arows; ++i) {
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	dba8      	blt.n	8001e28 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x14>
            }
        }
    }
}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	3724      	adds	r7, #36	@ 0x24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_ZN3EKF7_mulvecEPKfS1_Pfii>:
        const _float_t * a,
        const _float_t * x,
        _float_t * y,
        const int m,
        const int n)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	e034      	b.n	8001f62 <_ZN3EKF7_mulvecEPKfS1_Pfii+0x7e>
        y[i] = 0;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
        for (int j=0; j<n; ++j)
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	e023      	b.n	8001f54 <_ZN3EKF7_mulvecEPKfS1_Pfii+0x70>
            y[i] += x[j] * a[i*n+j];
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	ed93 7a00 	vldr	s14, [r3]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	edd3 6a00 	vldr	s13, [r3]
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f28:	fb03 f202 	mul.w	r2, r3, r2
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	4413      	add	r3, r2
 8001f36:	edd3 7a00 	vldr	s15, [r3]
 8001f3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4a:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	3301      	adds	r3, #1
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dbd7      	blt.n	8001f0c <_ZN3EKF7_mulvecEPKfS1_Pfii+0x28>
    for (int i=0; i<m; ++i) {
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	dbc6      	blt.n	8001ef8 <_ZN3EKF7_mulvecEPKfS1_Pfii+0x14>
    }
}
 8001f6a:	bf00      	nop
 8001f6c:	bf00      	nop
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_ZN3EKF10_transposeEPKfPfii>:

/// @private
 void EKF::_transpose(
        const _float_t * a, _float_t * at, const int m, const int n)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i)
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	e020      	b.n	8001fce <_ZN3EKF10_transposeEPKfPfii+0x56>
        for (int j=0; j<n; ++j) {
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	e016      	b.n	8001fc0 <_ZN3EKF10_transposeEPKfPfii+0x48>
            at[j*m+i] = a[i*n+j];
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	6a3a      	ldr	r2, [r7, #32]
 8001f96:	fb03 f202 	mul.w	r2, r3, r2
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	441a      	add	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	6839      	ldr	r1, [r7, #0]
 8001fa8:	fb03 f101 	mul.w	r1, r3, r1
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	440b      	add	r3, r1
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	440b      	add	r3, r1
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	601a      	str	r2, [r3, #0]
        for (int j=0; j<n; ++j) {
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	dbe4      	blt.n	8001f92 <_ZN3EKF10_transposeEPKfPfii+0x1a>
    for (int i=0; i<m; ++i)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	dbda      	blt.n	8001f8c <_ZN3EKF10_transposeEPKfPfii+0x14>
        }
}
 8001fd6:	bf00      	nop
 8001fd8:	bf00      	nop
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_ZN3EKF7_addmatEPKfS1_Pfii>:

/// @private
 void EKF::_addmat(
        const _float_t * a, const _float_t * b, _float_t * c,
        const int m, const int n)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e02f      	b.n	8002058 <_ZN3EKF7_addmatEPKfS1_Pfii+0x74>
        for (int j=0; j<n; ++j) {
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	e025      	b.n	800204a <_ZN3EKF7_addmatEPKfS1_Pfii+0x66>
            c[i*n+j] = a[i*n+j] + b[i*n+j];
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002002:	fb03 f202 	mul.w	r2, r3, r2
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	4413      	add	r3, r2
 8002010:	ed93 7a00 	vldr	s14, [r3]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002018:	fb03 f202 	mul.w	r2, r3, r2
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800202e:	fb03 f202 	mul.w	r2, r3, r2
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	4413      	add	r3, r2
 800203c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002040:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j) {
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	3301      	adds	r3, #1
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	429a      	cmp	r2, r3
 8002050:	dbd5      	blt.n	8001ffe <_ZN3EKF7_addmatEPKfS1_Pfii+0x1a>
    for (int i=0; i<m; ++i) {
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	429a      	cmp	r2, r3
 800205e:	dbcb      	blt.n	8001ff8 <_ZN3EKF7_addmatEPKfS1_Pfii+0x14>
        }
    }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <_ZN3EKF7_negateEPfii>:

/// @private
 void EKF::_negate(_float_t * a, const int m, const int n)
{
 800206e:	b480      	push	{r7}
 8002070:	b087      	sub	sp, #28
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	e024      	b.n	80020cc <_ZN3EKF7_negateEPfii+0x5e>
        for (int j=0; j<n; ++j) {
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	e01a      	b.n	80020be <_ZN3EKF7_negateEPfii+0x50>
            a[i*n+j] = -a[i*n+j];
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	fb03 f202 	mul.w	r2, r3, r2
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	4413      	add	r3, r2
 800209a:	edd3 7a00 	vldr	s15, [r3]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	fb03 f202 	mul.w	r2, r3, r2
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	4413      	add	r3, r2
 80020b0:	eef1 7a67 	vneg.f32	s15, s15
 80020b4:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j) {
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	3301      	adds	r3, #1
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	dbe0      	blt.n	8002088 <_ZN3EKF7_negateEPfii+0x1a>
    for (int i=0; i<m; ++i) {
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	3301      	adds	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	dbd6      	blt.n	8002082 <_ZN3EKF7_negateEPfii+0x14>
        }
    }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	371c      	adds	r7, #28
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <_ZN3EKF7_addeyeEPfi>:

/// @private
 void EKF::_addeye(_float_t * a, const int n)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b087      	sub	sp, #28
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
    for (int i=0; i<n; ++i) {
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	e01c      	b.n	800212e <_ZN3EKF7_addeyeEPfi+0x4c>
        a[i*n+i] += 1;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	fb03 f202 	mul.w	r2, r3, r2
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	4413      	add	r3, r2
 8002106:	edd3 7a00 	vldr	s15, [r3]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	fb03 f202 	mul.w	r2, r3, r2
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	4413      	add	r3, r2
 800211c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002120:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002124:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0; i<n; ++i) {
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3301      	adds	r3, #1
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	429a      	cmp	r2, r3
 8002134:	dbde      	blt.n	80020f4 <_ZN3EKF7_addeyeEPfi+0x12>
    }
}
 8002136:	bf00      	nop
 8002138:	bf00      	nop
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <_ZN3EKF8_choldc1EPfS0_i>:
/* Cholesky-decomposition matrix-inversion code, adapated from
http://jean-pierre.moreau.pagesperso-orange.fr/Cplus/_choles_cpp.txt */

/// @private
 int EKF::_choldc1(_float_t * a, _float_t * p, const int n)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b089      	sub	sp, #36	@ 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < n; i++) {
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	e06e      	b.n	8002236 <_ZN3EKF8_choldc1EPfS0_i+0xf2>
        for (int j = i; j < n; j++) {
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	e064      	b.n	8002228 <_ZN3EKF8_choldc1EPfS0_i+0xe4>
            _float_t sum = a[i*n+j];
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	fb03 f202 	mul.w	r2, r3, r2
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	4413      	add	r3, r2
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	617b      	str	r3, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	3b01      	subs	r3, #1
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	e020      	b.n	80021be <_ZN3EKF8_choldc1EPfS0_i+0x7a>
                sum -= a[i*n+k] * a[j*n+k];
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	fb03 f202 	mul.w	r2, r3, r2
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	4413      	add	r3, r2
 800218e:	ed93 7a00 	vldr	s14, [r3]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	fb03 f202 	mul.w	r2, r3, r2
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	4413      	add	r3, r2
 80021a4:	edd3 7a00 	vldr	s15, [r3]
 80021a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80021b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021b4:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	dadb      	bge.n	800217c <_ZN3EKF8_choldc1EPfS0_i+0x38>
            }
            if (i == j) {
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d115      	bne.n	80021f8 <_ZN3EKF8_choldc1EPfS0_i+0xb4>
                if (sum <= 0) {
 80021cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80021d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d8:	d801      	bhi.n	80021de <_ZN3EKF8_choldc1EPfS0_i+0x9a>
                    return 1; /* error */
 80021da:	2301      	movs	r3, #1
 80021dc:	e030      	b.n	8002240 <_ZN3EKF8_choldc1EPfS0_i+0xfc>
                }
                p[i] = sqrt(sum);
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	18d4      	adds	r4, r2, r3
 80021e6:	ed97 0a05 	vldr	s0, [r7, #20]
 80021ea:	f7ff fa97 	bl	800171c <_ZSt4sqrtf>
 80021ee:	eef0 7a40 	vmov.f32	s15, s0
 80021f2:	edc4 7a00 	vstr	s15, [r4]
 80021f6:	e014      	b.n	8002222 <_ZN3EKF8_choldc1EPfS0_i+0xde>
            }
            else {
                a[j*n+i] = sum / p[i];
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	ed93 7a00 	vldr	s14, [r3]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	fb03 f202 	mul.w	r2, r3, r2
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	4413      	add	r3, r2
 8002216:	edd7 6a05 	vldr	s13, [r7, #20]
 800221a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800221e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i; j < n; j++) {
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	3301      	adds	r3, #1
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	db96      	blt.n	800215e <_ZN3EKF8_choldc1EPfS0_i+0x1a>
    for (int i = 0; i < n; i++) {
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	3301      	adds	r3, #1
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	db8c      	blt.n	8002158 <_ZN3EKF8_choldc1EPfS0_i+0x14>
            }
        }
    }

    return 0; // success:w
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3724      	adds	r7, #36	@ 0x24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd90      	pop	{r4, r7, pc}

08002248 <_ZN3EKF9_choldcslEPKfPfS2_i>:

/// @private
 int EKF::_choldcsl(const _float_t * A, _float_t * a, _float_t * p, const int n)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	@ 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < n; i++) {
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
 800225a:	e020      	b.n	800229e <_ZN3EKF9_choldcslEPKfPfS2_i+0x56>
        for (int j = 0; j < n; j++) {
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
 8002260:	e016      	b.n	8002290 <_ZN3EKF9_choldcslEPKfPfS2_i+0x48>
            a[i*n+j] = A[i*n+j];
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002266:	fb03 f202 	mul.w	r2, r3, r2
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	441a      	add	r2, r3
 8002274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002276:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002278:	fb03 f101 	mul.w	r1, r3, r1
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	440b      	add	r3, r1
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	440b      	add	r3, r1
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < n; j++) {
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	3301      	adds	r3, #1
 800228e:	623b      	str	r3, [r7, #32]
 8002290:	6a3a      	ldr	r2, [r7, #32]
 8002292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002294:	429a      	cmp	r2, r3
 8002296:	dbe4      	blt.n	8002262 <_ZN3EKF9_choldcslEPKfPfS2_i+0x1a>
    for (int i = 0; i < n; i++) {
 8002298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229a:	3301      	adds	r3, #1
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24
 800229e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a2:	429a      	cmp	r2, r3
 80022a4:	dbda      	blt.n	800225c <_ZN3EKF9_choldcslEPKfPfS2_i+0x14>
        }
    }
    if (_choldc1(a, p, n)) {
 80022a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f7ff ff49 	bl	8002144 <_ZN3EKF8_choldc1EPfS0_i>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <_ZN3EKF9_choldcslEPKfPfS2_i+0x7e>
        return 1;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e06a      	b.n	800239c <_ZN3EKF9_choldcslEPKfPfS2_i+0x154>
    }
    for (int i = 0; i < n; i++) {
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	e062      	b.n	8002392 <_ZN3EKF9_choldcslEPKfPfS2_i+0x14a>
        a[i*n+i] = 1 / p[i];
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	ed93 7a00 	vldr	s14, [r3]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022dc:	fb03 f202 	mul.w	r2, r3, r2
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f2:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3301      	adds	r3, #1
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	e042      	b.n	8002384 <_ZN3EKF9_choldcslEPKfPfS2_i+0x13c>
            _float_t sum = 0;
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
            for (int k = i; k < j; k++) {
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	e020      	b.n	800234c <_ZN3EKF9_choldcslEPKfPfS2_i+0x104>
                sum -= a[j*n+k] * a[k*n+i];
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800230e:	fb03 f202 	mul.w	r2, r3, r2
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	ed93 7a00 	vldr	s14, [r3]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002324:	fb03 f202 	mul.w	r2, r3, r2
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233a:	ed97 7a05 	vldr	s14, [r7, #20]
 800233e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002342:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i; k < j; k++) {
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	3301      	adds	r3, #1
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	429a      	cmp	r2, r3
 8002352:	dbda      	blt.n	800230a <_ZN3EKF9_choldcslEPKfPfS2_i+0xc2>
            }
            a[j*n+i] = sum / p[j];
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	4413      	add	r3, r2
 800235c:	ed93 7a00 	vldr	s14, [r3]
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002364:	fb03 f202 	mul.w	r2, r3, r2
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	edd7 6a05 	vldr	s13, [r7, #20]
 8002376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800237a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	3301      	adds	r3, #1
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002388:	429a      	cmp	r2, r3
 800238a:	dbb8      	blt.n	80022fe <_ZN3EKF9_choldcslEPKfPfS2_i+0xb6>
    for (int i = 0; i < n; i++) {
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	3301      	adds	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002396:	429a      	cmp	r2, r3
 8002398:	db98      	blt.n	80022cc <_ZN3EKF9_choldcslEPKfPfS2_i+0x84>
        }
    }

    return 0; // success
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3728      	adds	r7, #40	@ 0x28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_ZN3EKF7_cholslEPKfPfS2_i>:

/// @private
 int EKF::_cholsl(const _float_t * A, _float_t * a, _float_t * p, const int n)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08e      	sub	sp, #56	@ 0x38
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]
    if (_choldcsl(A,a,p,n)) {
 80023b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68b9      	ldr	r1, [r7, #8]
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f7ff ff43 	bl	8002248 <_ZN3EKF9_choldcslEPKfPfS2_i>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf14      	ite	ne
 80023c8:	2301      	movne	r3, #1
 80023ca:	2300      	moveq	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <_ZN3EKF7_cholslEPKfPfS2_i+0x32>
        return 1;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0f7      	b.n	80025c6 <_ZN3EKF7_cholslEPKfPfS2_i+0x222>
    }

    for (int i = 0; i < n; i++) {
 80023d6:	2300      	movs	r3, #0
 80023d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023da:	e019      	b.n	8002410 <_ZN3EKF7_cholslEPKfPfS2_i+0x6c>
        for (int j = i + 1; j < n; j++) {
 80023dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023de:	3301      	adds	r3, #1
 80023e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023e2:	e00e      	b.n	8002402 <_ZN3EKF7_cholslEPKfPfS2_i+0x5e>
            a[i*n+j] = 0.0;
 80023e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80023e8:	fb03 f202 	mul.w	r2, r3, r2
 80023ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
        for (int j = i + 1; j < n; j++) {
 80023fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fe:	3301      	adds	r3, #1
 8002400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002402:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002406:	429a      	cmp	r2, r3
 8002408:	dbec      	blt.n	80023e4 <_ZN3EKF7_cholslEPKfPfS2_i+0x40>
    for (int i = 0; i < n; i++) {
 800240a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800240c:	3301      	adds	r3, #1
 800240e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002414:	429a      	cmp	r2, r3
 8002416:	dbe1      	blt.n	80023dc <_ZN3EKF7_cholslEPKfPfS2_i+0x38>
        }
    }
    for (int i = 0; i < n; i++) {
 8002418:	2300      	movs	r3, #0
 800241a:	627b      	str	r3, [r7, #36]	@ 0x24
 800241c:	e0a5      	b.n	800256a <_ZN3EKF7_cholslEPKfPfS2_i+0x1c6>
        a[i*n+i] *= a[i*n+i];
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002422:	fb03 f202 	mul.w	r2, r3, r2
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	ed93 7a00 	vldr	s14, [r3]
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002438:	fb03 f202 	mul.w	r2, r3, r2
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	edd3 7a00 	vldr	s15, [r3]
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800244e:	fb03 f202 	mul.w	r2, r3, r2
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002460:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 8002464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002466:	3301      	adds	r3, #1
 8002468:	623b      	str	r3, [r7, #32]
 800246a:	e032      	b.n	80024d2 <_ZN3EKF7_cholslEPKfPfS2_i+0x12e>
            a[i*n+i] += a[k*n+i] * a[k*n+i];
 800246c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002470:	fb03 f202 	mul.w	r2, r3, r2
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	ed93 7a00 	vldr	s14, [r3]
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002486:	fb03 f202 	mul.w	r2, r3, r2
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	4413      	add	r3, r2
 8002494:	edd3 6a00 	vldr	s13, [r3]
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800249c:	fb03 f202 	mul.w	r2, r3, r2
 80024a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024b6:	fb03 f202 	mul.w	r2, r3, r2
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	4413      	add	r3, r2
 80024c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c8:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	3301      	adds	r3, #1
 80024d0:	623b      	str	r3, [r7, #32]
 80024d2:	6a3a      	ldr	r2, [r7, #32]
 80024d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d6:	429a      	cmp	r2, r3
 80024d8:	dbc8      	blt.n	800246c <_ZN3EKF7_cholslEPKfPfS2_i+0xc8>
        }
        for (int j = i + 1; j < n; j++) {
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	3301      	adds	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	e03c      	b.n	800255c <_ZN3EKF7_cholslEPKfPfS2_i+0x1b8>
            for (int k = j; k < n; k++) {
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	e032      	b.n	800254e <_ZN3EKF7_cholslEPKfPfS2_i+0x1aa>
                a[i*n+j] += a[k*n+i] * a[k*n+j];
 80024e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024ec:	fb03 f202 	mul.w	r2, r3, r2
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	ed93 7a00 	vldr	s14, [r3]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002502:	fb03 f202 	mul.w	r2, r3, r2
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	edd3 6a00 	vldr	s13, [r3]
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002518:	fb03 f202 	mul.w	r2, r3, r2
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002532:	fb03 f202 	mul.w	r2, r3, r2
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	4413      	add	r3, r2
 8002540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002544:	edc3 7a00 	vstr	s15, [r3]
            for (int k = j; k < n; k++) {
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	3301      	adds	r3, #1
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002552:	429a      	cmp	r2, r3
 8002554:	dbc8      	blt.n	80024e8 <_ZN3EKF7_cholslEPKfPfS2_i+0x144>
        for (int j = i + 1; j < n; j++) {
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3301      	adds	r3, #1
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002560:	429a      	cmp	r2, r3
 8002562:	dbbe      	blt.n	80024e2 <_ZN3EKF7_cholslEPKfPfS2_i+0x13e>
    for (int i = 0; i < n; i++) {
 8002564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002566:	3301      	adds	r3, #1
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
 800256a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800256c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800256e:	429a      	cmp	r2, r3
 8002570:	f6ff af55 	blt.w	800241e <_ZN3EKF7_cholslEPKfPfS2_i+0x7a>
            }
        }
    }
    for (int i = 0; i < n; i++) {
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	e020      	b.n	80025bc <_ZN3EKF7_cholslEPKfPfS2_i+0x218>
        for (int j = 0; j < i; j++) {
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	e016      	b.n	80025ae <_ZN3EKF7_cholslEPKfPfS2_i+0x20a>
            a[i*n+j] = a[j*n+i];
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002584:	fb03 f202 	mul.w	r2, r3, r2
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	441a      	add	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002596:	fb03 f101 	mul.w	r1, r3, r1
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	440b      	add	r3, r1
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	440b      	add	r3, r1
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < i; j++) {
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	3301      	adds	r3, #1
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	dbe4      	blt.n	8002580 <_ZN3EKF7_cholslEPKfPfS2_i+0x1dc>
    for (int i = 0; i < n; i++) {
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3301      	adds	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c0:	429a      	cmp	r2, r3
 80025c2:	dbda      	blt.n	800257a <_ZN3EKF7_cholslEPKfPfS2_i+0x1d6>
        }
    }

    return 0; // success
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3730      	adds	r7, #48	@ 0x30
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_ZN3EKF7_addvecEPKfS1_Pfi>:

/// @private
 void EKF::_addvec(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b087      	sub	sp, #28
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e016      	b.n	8002610 <_ZN3EKF7_addvecEPKfS1_Pfi+0x42>
        c[j] = a[j] + b[j];
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	4413      	add	r3, r2
 80025ea:	ed93 7a00 	vldr	s14, [r3]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	4413      	add	r3, r2
 8002602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002606:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	3301      	adds	r3, #1
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	429a      	cmp	r2, r3
 8002616:	dbe4      	blt.n	80025e2 <_ZN3EKF7_addvecEPKfS1_Pfi+0x14>
    }
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <_ZN3EKF4_subEPKfS1_Pfi>:

/// @private
 void EKF::_sub(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 8002626:	b480      	push	{r7}
 8002628:	b087      	sub	sp, #28
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e016      	b.n	8002668 <_ZN3EKF4_subEPKfS1_Pfi+0x42>
        c[j] = a[j] - b[j];
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	4413      	add	r3, r2
 8002642:	ed93 7a00 	vldr	s14, [r3]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	edd3 7a00 	vldr	s15, [r3]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	4413      	add	r3, r2
 800265a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800265e:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	3301      	adds	r3, #1
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	429a      	cmp	r2, r3
 800266e:	dbe4      	blt.n	800263a <_ZN3EKF4_subEPKfS1_Pfi+0x14>
    }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	371c      	adds	r7, #28
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <_ZN3EKF6invertEPKfPf>:

/// @private
 bool EKF::invert(const _float_t * a, _float_t * ainv)
{
 800267e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002682:	b089      	sub	sp, #36	@ 0x24
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
    _float_t tmp[EKF_M];

    return _cholsl(a, ainv, tmp, EKF_M) == 0;
}
 800268c:	466b      	mov	r3, sp
 800268e:	461e      	mov	r6, r3
    _float_t tmp[EKF_M];
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6899      	ldr	r1, [r3, #8]
 8002694:	1e4b      	subs	r3, r1, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	460a      	mov	r2, r1
 800269a:	2300      	movs	r3, #0
 800269c:	4690      	mov	r8, r2
 800269e:	4699      	mov	r9, r3
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80026ac:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80026b0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80026b4:	460a      	mov	r2, r1
 80026b6:	2300      	movs	r3, #0
 80026b8:	4614      	mov	r4, r2
 80026ba:	461d      	mov	r5, r3
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	016b      	lsls	r3, r5, #5
 80026c6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80026ca:	0162      	lsls	r2, r4, #5
 80026cc:	460b      	mov	r3, r1
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	3307      	adds	r3, #7
 80026d2:	08db      	lsrs	r3, r3, #3
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	ebad 0d03 	sub.w	sp, sp, r3
 80026da:	ab02      	add	r3, sp, #8
 80026dc:	3303      	adds	r3, #3
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	613b      	str	r3, [r7, #16]
    return _cholsl(a, ainv, tmp, EKF_M) == 0;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f7ff fe57 	bl	80023a4 <_ZN3EKF7_cholslEPKfPfS2_i>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf0c      	ite	eq
 80026fc:	2301      	moveq	r3, #1
 80026fe:	2300      	movne	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	46b5      	mov	sp, r6
}
 8002704:	4618      	mov	r0, r3
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800270e <_ZSt4fmodff>:
  { return __builtin_fmodf(__x, __y); }
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	ed87 0a01 	vstr	s0, [r7, #4]
 8002718:	edc7 0a00 	vstr	s1, [r7]
 800271c:	edd7 0a00 	vldr	s1, [r7]
 8002720:	ed97 0a01 	vldr	s0, [r7, #4]
 8002724:	f008 f90e 	bl	800a944 <fmodf>
 8002728:	eef0 7a40 	vmov.f32	s15, s0
 800272c:	eeb0 0a67 	vmov.f32	s0, s15
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <_Z4_sinf>:


// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a){
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0,804,1608,2411,3212,4011,4808,5602,6393,7180,7962,8740,9512,10279,11039,11793,12540,13279,14010,14733,15447,16151,16846,17531,18205,18868,19520,20160,20788,21403,22006,22595,23170,23732,24279,24812,25330,25833,26320,26791,27246,27684,28106,28511,28899,29269,29622,29957,30274,30572,30853,31114,31357,31581,31786,31972,32138,32286,32413,32522,32610,32679,32729,32758,32768};
  unsigned int i = (unsigned int)(a * (64*4*256.0f/_2PI));
 8002742:	edd7 7a01 	vldr	s15, [r7, #4]
 8002746:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800281c <_Z4_sinf+0xe4>
 800274a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800274e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002752:	ee17 3a90 	vmov	r3, s15
 8002756:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	b2db      	uxtb	r3, r3
 8002764:	60fb      	str	r3, [r7, #12]
  if (i < 64) {
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b3f      	cmp	r3, #63	@ 0x3f
 800276a:	d80b      	bhi.n	8002784 <_Z4_sinf+0x4c>
    t1 = sine_array[i]; t2 = sine_array[i+1];
 800276c:	4a2c      	ldr	r2, [pc, #176]	@ (8002820 <_Z4_sinf+0xe8>)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	3301      	adds	r3, #1
 800277a:	4a29      	ldr	r2, [pc, #164]	@ (8002820 <_Z4_sinf+0xe8>)
 800277c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	e033      	b.n	80027ec <_Z4_sinf+0xb4>
  }
  else if(i < 128) {
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b7f      	cmp	r3, #127	@ 0x7f
 8002788:	d80e      	bhi.n	80027a8 <_Z4_sinf+0x70>
    t1 = sine_array[128 - i]; t2 = sine_array[127 - i];
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002790:	4a23      	ldr	r2, [pc, #140]	@ (8002820 <_Z4_sinf+0xe8>)
 8002792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800279e:	4a20      	ldr	r2, [pc, #128]	@ (8002820 <_Z4_sinf+0xe8>)
 80027a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	e021      	b.n	80027ec <_Z4_sinf+0xb4>
  }
  else if(i < 192) {
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2bbf      	cmp	r3, #191	@ 0xbf
 80027ac:	d80e      	bhi.n	80027cc <_Z4_sinf+0x94>
    t1 = -sine_array[-128 + i]; t2 = -sine_array[-127 + i];
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3b80      	subs	r3, #128	@ 0x80
 80027b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002820 <_Z4_sinf+0xe8>)
 80027b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027b8:	425b      	negs	r3, r3
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3b7f      	subs	r3, #127	@ 0x7f
 80027c0:	4a17      	ldr	r2, [pc, #92]	@ (8002820 <_Z4_sinf+0xe8>)
 80027c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027c6:	425b      	negs	r3, r3
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	e00f      	b.n	80027ec <_Z4_sinf+0xb4>
  }
  else {
    t1 = -sine_array[256 - i]; t2 = -sine_array[255 - i];
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80027d2:	4a13      	ldr	r2, [pc, #76]	@ (8002820 <_Z4_sinf+0xe8>)
 80027d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027d8:	425b      	negs	r3, r3
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80027e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002820 <_Z4_sinf+0xe8>)
 80027e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027e8:	425b      	negs	r3, r3
 80027ea:	613b      	str	r3, [r7, #16]
  }
  return (1.0f/32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	fb02 f303 	mul.w	r3, r2, r3
 80027f8:	121a      	asrs	r2, r3, #8
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	4413      	add	r3, r2
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002806:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002824 <_Z4_sinf+0xec>
 800280a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800280e:	eeb0 0a67 	vmov.f32	s0, s15
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	4622f983 	.word	0x4622f983
 8002820:	20000014 	.word	0x20000014
 8002824:	38000000 	.word	0x38000000

08002828 <_Z4_cosf>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a){
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 8002832:	edd7 7a01 	vldr	s15, [r7, #4]
 8002836:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002880 <_Z4_cosf+0x58>
 800283a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800283e:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 8002842:	edd7 7a03 	vldr	s15, [r7, #12]
 8002846:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002884 <_Z4_cosf+0x5c>
 800284a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800284e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002852:	dd06      	ble.n	8002862 <_Z4_cosf+0x3a>
 8002854:	edd7 7a03 	vldr	s15, [r7, #12]
 8002858:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002884 <_Z4_cosf+0x5c>
 800285c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002860:	e001      	b.n	8002866 <_Z4_cosf+0x3e>
 8002862:	edd7 7a03 	vldr	s15, [r7, #12]
 8002866:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800286a:	ed97 0a03 	vldr	s0, [r7, #12]
 800286e:	f7ff ff63 	bl	8002738 <_Z4_sinf>
 8002872:	eef0 7a40 	vmov.f32	s15, s0
}
 8002876:	eeb0 0a67 	vmov.f32	s0, s15
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	3fc90fdb 	.word	0x3fc90fdb
 8002884:	40c90fdb 	.word	0x40c90fdb

08002888 <_Z15_normalizeAnglef>:
    return r;
  }


// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle){
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 8002892:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 80028cc <_Z15_normalizeAnglef+0x44>
 8002896:	ed97 0a01 	vldr	s0, [r7, #4]
 800289a:	f7ff ff38 	bl	800270e <_ZSt4fmodff>
 800289e:	ed87 0a03 	vstr	s0, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 80028a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80028a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ae:	db02      	blt.n	80028b6 <_Z15_normalizeAnglef+0x2e>
 80028b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80028b4:	e005      	b.n	80028c2 <_Z15_normalizeAnglef+0x3a>
 80028b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80028ba:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 80028cc <_Z15_normalizeAnglef+0x44>
 80028be:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80028c2:	eeb0 0a67 	vmov.f32	s0, s15
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40c90fdb 	.word	0x40c90fdb

080028d0 <_Z16_electricalAnglefi>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs) {
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80028da:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	ee07 3a90 	vmov	s15, r3
 80028e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80028ea:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80028ee:	eeb0 0a67 	vmov.f32	s0, s15
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <_Z11_sqrtApproxf>:

// square root approximation function using
// https://reprap.org/forum/read.php?147,219210
// https://en.wikipedia.org/wiki/Fast_inverse_square_root
__attribute__((weak)) float _sqrtApprox(float number) {//low in fat
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	ed87 0a01 	vstr	s0, [r7, #4]
  union {
    float    f;
    uint32_t i;
  } y = { .f = number };
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	60fb      	str	r3, [r7, #12]
  y.i = 0x5f375a86 - ( y.i >> 1 );
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	085a      	lsrs	r2, r3, #1
 800290e:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <_Z11_sqrtApproxf+0x34>)
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
  return number * y.f;
 8002914:	ed97 7a03 	vldr	s14, [r7, #12]
 8002918:	edd7 7a01 	vldr	s15, [r7, #4]
 800291c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002920:	eeb0 0a67 	vmov.f32	s0, s15
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	5f375a86 	.word	0x5f375a86

08002934 <_ZN13LowPassFilterC1Ef>:
 */

#include <lowpass_filter.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU

LowPassFilter::LowPassFilter(float time_constant)
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	ed87 0a00 	vstr	s0, [r7]
    : Tf(time_constant)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	601a      	str	r2, [r3, #0]
    , y_prev(0.0f)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
{
    timestamp_prev = micros();
 800294e:	f000 f873 	bl	8002a38 <_ZN13LowPassFilter6microsEv>
 8002952:	4602      	mov	r2, r0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	605a      	str	r2, [r3, #4]
}
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <_ZN13LowPassFilterclEf>:


float LowPassFilter::operator() (float x)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	ed87 0a00 	vstr	s0, [r7]
    unsigned long timestamp = micros();
 8002970:	f000 f862 	bl	8002a38 <_ZN13LowPassFilter6microsEv>
 8002974:	6138      	str	r0, [r7, #16]
    float dt = (timestamp - timestamp_prev)*1e-6f;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	ee07 3a90 	vmov	s15, r3
 8002982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002986:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002a2c <_ZN13LowPassFilterclEf+0xc8>
 800298a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800298e:	edc7 7a05 	vstr	s15, [r7, #20]

    if (dt < 0.0f ) dt = 1e-3f;
 8002992:	edd7 7a05 	vldr	s15, [r7, #20]
 8002996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800299a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299e:	d502      	bpl.n	80029a6 <_ZN13LowPassFilterclEf+0x42>
 80029a0:	4b23      	ldr	r3, [pc, #140]	@ (8002a30 <_ZN13LowPassFilterclEf+0xcc>)
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	e010      	b.n	80029c8 <_ZN13LowPassFilterclEf+0x64>
    else if(dt > 0.3f) {
 80029a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80029aa:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002a34 <_ZN13LowPassFilterclEf+0xd0>
 80029ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b6:	dd07      	ble.n	80029c8 <_ZN13LowPassFilterclEf+0x64>
        y_prev = x;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	609a      	str	r2, [r3, #8]
        timestamp_prev = timestamp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	605a      	str	r2, [r3, #4]
        return x;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	e029      	b.n	8002a1c <_ZN13LowPassFilterclEf+0xb8>
    }

    float alpha = Tf/(Tf + dt);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	edd3 6a00 	vldr	s13, [r3]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	ed93 7a00 	vldr	s14, [r3]
 80029d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80029d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029e0:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha*y_prev + (1.0f - alpha)*x;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80029ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80029ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80029fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029fe:	edd7 7a00 	vldr	s15, [r7]
 8002a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0a:	edc7 7a02 	vstr	s15, [r7, #8]
    y_prev = y;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	609a      	str	r2, [r3, #8]
    timestamp_prev = timestamp;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	605a      	str	r2, [r3, #4]
    return y;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
}
 8002a1c:	ee07 3a90 	vmov	s15, r3
 8002a20:	eeb0 0a67 	vmov.f32	s0, s15
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	358637bd 	.word	0x358637bd
 8002a30:	3a83126f 	.word	0x3a83126f
 8002a34:	3e99999a 	.word	0x3e99999a

08002a38 <_ZN13LowPassFilter6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t LowPassFilter::micros(void) 
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8002a3c:	4b07      	ldr	r3, [pc, #28]	@ (8002a5c <_ZN13LowPassFilter6microsEv+0x24>)
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	4b07      	ldr	r3, [pc, #28]	@ (8002a60 <_ZN13LowPassFilter6microsEv+0x28>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4907      	ldr	r1, [pc, #28]	@ (8002a64 <_ZN13LowPassFilter6microsEv+0x2c>)
 8002a46:	fba1 1303 	umull	r1, r3, r1, r3
 8002a4a:	0c9b      	lsrs	r3, r3, #18
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	e0001000 	.word	0xe0001000
 8002a60:	200000c0 	.word	0x200000c0
 8002a64:	431bde83 	.word	0x431bde83

08002a68 <_Z41__static_initialization_and_destruction_0ii>:
PIDController PID_position  {1.0, 0.0, 0.0, 0, velocity_limit};

LowPassFilter LPF_current_q	{0.1f}; // 1 is very slow
LowPassFilter LPF_current_d	{0.1f}; // 1 is very slow
LowPassFilter LPF_position	{0.01};
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d158      	bne.n	8002b2a <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d153      	bne.n	8002b2a <_Z41__static_initialization_and_destruction_0ii+0xc2>
PIDController PID_current_d {1.0, 0.0, 0.0, 1000.0, voltage_limit};
 8002a82:	4b2c      	ldr	r3, [pc, #176]	@ (8002b34 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002a84:	edd3 7a00 	vldr	s15, [r3]
 8002a88:	eeb0 2a67 	vmov.f32	s4, s15
 8002a8c:	eddf 1a2a 	vldr	s3, [pc, #168]	@ 8002b38 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8002a90:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8002b3c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002a94:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8002b3c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002a98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002a9c:	4828      	ldr	r0, [pc, #160]	@ (8002b40 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8002a9e:	f000 f86f 	bl	8002b80 <_ZN13PIDControllerC1Efffff>
PIDController PID_current_q {1.0, 0.0, 0.0, 1000.0, voltage_limit};
 8002aa2:	4b24      	ldr	r3, [pc, #144]	@ (8002b34 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002aa4:	edd3 7a00 	vldr	s15, [r3]
 8002aa8:	eeb0 2a67 	vmov.f32	s4, s15
 8002aac:	eddf 1a22 	vldr	s3, [pc, #136]	@ 8002b38 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8002ab0:	ed9f 1a22 	vldr	s2, [pc, #136]	@ 8002b3c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002ab4:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8002b3c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002ab8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002abc:	4821      	ldr	r0, [pc, #132]	@ (8002b44 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002abe:	f000 f85f 	bl	8002b80 <_ZN13PIDControllerC1Efffff>
PIDController PID_velocity  {5.0, 0.0, 0.0, 1000.0, current_limit};
 8002ac2:	4b21      	ldr	r3, [pc, #132]	@ (8002b48 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	eeb0 2a67 	vmov.f32	s4, s15
 8002acc:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8002b38 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8002ad0:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8002b3c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002ad4:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8002b3c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002ad8:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8002adc:	481b      	ldr	r0, [pc, #108]	@ (8002b4c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002ade:	f000 f84f 	bl	8002b80 <_ZN13PIDControllerC1Efffff>
PIDController PID_position  {1.0, 0.0, 0.0, 0, velocity_limit};
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002ae4:	edd3 7a00 	vldr	s15, [r3]
 8002ae8:	eeb0 2a67 	vmov.f32	s4, s15
 8002aec:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8002b3c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002af0:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 8002b3c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002af4:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8002b3c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002af8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002afc:	4815      	ldr	r0, [pc, #84]	@ (8002b54 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002afe:	f000 f83f 	bl	8002b80 <_ZN13PIDControllerC1Efffff>
LowPassFilter LPF_current_q	{0.1f}; // 1 is very slow
 8002b02:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8002b58 <_Z41__static_initialization_and_destruction_0ii+0xf0>
 8002b06:	4815      	ldr	r0, [pc, #84]	@ (8002b5c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8002b08:	f7ff ff14 	bl	8002934 <_ZN13LowPassFilterC1Ef>
LowPassFilter LPF_current_d	{0.1f}; // 1 is very slow
 8002b0c:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8002b58 <_Z41__static_initialization_and_destruction_0ii+0xf0>
 8002b10:	4813      	ldr	r0, [pc, #76]	@ (8002b60 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8002b12:	f7ff ff0f 	bl	8002934 <_ZN13LowPassFilterC1Ef>
LowPassFilter LPF_position	{0.01};
 8002b16:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8002b64 <_Z41__static_initialization_and_destruction_0ii+0xfc>
 8002b1a:	4813      	ldr	r0, [pc, #76]	@ (8002b68 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8002b1c:	f7ff ff0a 	bl	8002934 <_ZN13LowPassFilterC1Ef>
 8002b20:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8002b3c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002b24:	4811      	ldr	r0, [pc, #68]	@ (8002b6c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8002b26:	f7ff ff05 	bl	8002934 <_ZN13LowPassFilterC1Ef>
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200000b0 	.word	0x200000b0
 8002b38:	447a0000 	.word	0x447a0000
 8002b3c:	00000000 	.word	0x00000000
 8002b40:	2000014c 	.word	0x2000014c
 8002b44:	20000170 	.word	0x20000170
 8002b48:	200000b4 	.word	0x200000b4
 8002b4c:	20000194 	.word	0x20000194
 8002b50:	200000b8 	.word	0x200000b8
 8002b54:	200001b8 	.word	0x200001b8
 8002b58:	3dcccccd 	.word	0x3dcccccd
 8002b5c:	200001dc 	.word	0x200001dc
 8002b60:	200001e8 	.word	0x200001e8
 8002b64:	3c23d70a 	.word	0x3c23d70a
 8002b68:	200001f4 	.word	0x200001f4
 8002b6c:	20000200 	.word	0x20000200

08002b70 <_GLOBAL__sub_I_CurrentSense_resistance>:
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f7ff ff75 	bl	8002a68 <_Z41__static_initialization_and_destruction_0ii>
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <_ZN13PIDControllerC1Efffff>:
 */

#include <pid.h>
#include "stm32g4xx_hal.h" // Include the HAL header for your specific MCU

PIDController::PIDController(float P, float I, float D, float ramp, float limit)
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6178      	str	r0, [r7, #20]
 8002b88:	ed87 0a04 	vstr	s0, [r7, #16]
 8002b8c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002b90:	ed87 1a02 	vstr	s2, [r7, #8]
 8002b94:	edc7 1a01 	vstr	s3, [r7, #4]
 8002b98:	ed87 2a00 	vstr	s4, [r7]
    : P(P)
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	601a      	str	r2, [r3, #0]
    , I(I)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	605a      	str	r2, [r3, #4]
    , D(D)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	609a      	str	r2, [r3, #8]
    , output_ramp(ramp)    // output derivative limit [volts/second]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	60da      	str	r2, [r3, #12]
    , limit(limit)         // output supply limit     [volts]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	611a      	str	r2, [r3, #16]
    , error_prev(0.0f)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	615a      	str	r2, [r3, #20]
    , output_prev(0.0f)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	619a      	str	r2, [r3, #24]
    , integral_prev(0.0f)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	61da      	str	r2, [r3, #28]
{
    timestamp_prev = micros();
 8002bd2:	f000 f91d 	bl	8002e10 <_ZN13PIDController6microsEv>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	621a      	str	r2, [r3, #32]
}
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <_ZN13PIDControllerclEf>:

// PID controller "Functors" (see https://www.geeksforgeeks.org/functors-in-cpp/)
float PIDController::operator() (float error)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08a      	sub	sp, #40	@ 0x28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	ed87 0a00 	vstr	s0, [r7]
    // calculate the time from the last call
    unsigned long timestamp_now = micros();
 8002bf4:	f000 f90c 	bl	8002e10 <_ZN13PIDController6microsEv>
 8002bf8:	61f8      	str	r0, [r7, #28]
    float Ts = (timestamp_now - timestamp_prev) * 1e-6f;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	ee07 3a90 	vmov	s15, r3
 8002c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c0a:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8002e08 <_ZN13PIDControllerclEf+0x220>
 8002c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c12:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // quick fix for strange cases (micros overflow)
    if(Ts <= 0 || Ts > 0.5f) Ts = 1e-3f;
 8002c16:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c22:	d908      	bls.n	8002c36 <_ZN13PIDControllerclEf+0x4e>
 8002c24:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c28:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c34:	dd01      	ble.n	8002c3a <_ZN13PIDControllerclEf+0x52>
 8002c36:	4b75      	ldr	r3, [pc, #468]	@ (8002e0c <_ZN13PIDControllerclEf+0x224>)
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24

    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = P * error;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	edd3 7a00 	vldr	s15, [r3]
 8002c40:	ed97 7a00 	vldr	s14, [r7]
 8002c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c48:	edc7 7a06 	vstr	s15, [r7, #24]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float integral = integral_prev + I*Ts*0.5f*(error + error_prev);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c58:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c60:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002c64:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	ed93 6a05 	vldr	s12, [r3, #20]
 8002c6e:	edd7 7a00 	vldr	s15, [r7]
 8002c72:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c7e:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -limit, limit);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c88:	eef1 7a67 	vneg.f32	s15, s15
 8002c8c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c98:	d505      	bpl.n	8002ca6 <_ZN13PIDControllerclEf+0xbe>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ca0:	eef1 7a67 	vneg.f32	s15, s15
 8002ca4:	e00f      	b.n	8002cc6 <_ZN13PIDControllerclEf+0xde>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cac:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb8:	dd03      	ble.n	8002cc2 <_ZN13PIDControllerclEf+0xda>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cc0:	e001      	b.n	8002cc6 <_ZN13PIDControllerclEf+0xde>
 8002cc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cc6:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = D*(error - error_prev)/Ts;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cd6:	edd7 6a00 	vldr	s13, [r7]
 8002cda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002cde:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002ce2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cea:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 8002cee:	ed97 7a06 	vldr	s14, [r7, #24]
 8002cf2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfa:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d02:	edc7 7a08 	vstr	s15, [r7, #32]
    // antiwindup - limit the output variable
    output = _constrain(output, -limit, limit);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d0c:	eef1 7a67 	vneg.f32	s15, s15
 8002d10:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1c:	d505      	bpl.n	8002d2a <_ZN13PIDControllerclEf+0x142>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d24:	eef1 7a67 	vneg.f32	s15, s15
 8002d28:	e00f      	b.n	8002d4a <_ZN13PIDControllerclEf+0x162>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d30:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3c:	dd03      	ble.n	8002d46 <_ZN13PIDControllerclEf+0x15e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d44:	e001      	b.n	8002d4a <_ZN13PIDControllerclEf+0x162>
 8002d46:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d4a:	edc7 7a08 	vstr	s15, [r7, #32]

    // if output ramp defined
    if(output_ramp > 0)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5c:	dd3f      	ble.n	8002dde <_ZN13PIDControllerclEf+0x1f6>
	{
        // limit the acceleration by ramping the output
        float output_rate = (output - output_prev)/Ts;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d64:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d68:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002d6c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d74:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > output_ramp)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8a:	dd0e      	ble.n	8002daa <_ZN13PIDControllerclEf+0x1c2>
            output = output_prev + output_ramp*Ts;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	edd3 6a03 	vldr	s13, [r3, #12]
 8002d98:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da4:	edc7 7a08 	vstr	s15, [r7, #32]
 8002da8:	e019      	b.n	8002dde <_ZN13PIDControllerclEf+0x1f6>
        else if (output_rate < -output_ramp)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	edd3 7a03 	vldr	s15, [r3, #12]
 8002db0:	eef1 7a67 	vneg.f32	s15, s15
 8002db4:	ed97 7a03 	vldr	s14, [r7, #12]
 8002db8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc0:	d50d      	bpl.n	8002dde <_ZN13PIDControllerclEf+0x1f6>
            output = output_prev - output_ramp*Ts;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	ed93 7a06 	vldr	s14, [r3, #24]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	edd3 6a03 	vldr	s13, [r3, #12]
 8002dce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002dd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dda:	edc7 7a08 	vstr	s15, [r7, #32]
    }
    // saving for the next pass
    integral_prev = integral;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	61da      	str	r2, [r3, #28]
    output_prev = output;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a3a      	ldr	r2, [r7, #32]
 8002de8:	619a      	str	r2, [r3, #24]
    error_prev = error;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	615a      	str	r2, [r3, #20]
    timestamp_prev = timestamp_now;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	621a      	str	r2, [r3, #32]
    return output;
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	ee07 3a90 	vmov	s15, r3
}
 8002dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8002e00:	3728      	adds	r7, #40	@ 0x28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	358637bd 	.word	0x358637bd
 8002e0c:	3a83126f 	.word	0x3a83126f

08002e10 <_ZN13PIDController6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t PIDController::micros(void) 
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8002e14:	4b07      	ldr	r3, [pc, #28]	@ (8002e34 <_ZN13PIDController6microsEv+0x24>)
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4b07      	ldr	r3, [pc, #28]	@ (8002e38 <_ZN13PIDController6microsEv+0x28>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4907      	ldr	r1, [pc, #28]	@ (8002e3c <_ZN13PIDController6microsEv+0x2c>)
 8002e1e:	fba1 1303 	umull	r1, r3, r1, r3
 8002e22:	0c9b      	lsrs	r3, r3, #18
 8002e24:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e0001000 	.word	0xe0001000
 8002e38:	200000c0 	.word	0x200000c0
 8002e3c:	431bde83 	.word	0x431bde83

08002e40 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e4a:	edc7 0a00 	vstr	s1, [r7]
 8002e4e:	edd7 0a00 	vldr	s1, [r7]
 8002e52:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e56:	f007 fd73 	bl	800a940 <atan2f>
 8002e5a:	eef0 7a40 	vmov.f32	s15, s0
 8002e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e72:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e76:	f007 fe31 	bl	800aadc <floorf>
 8002e7a:	eef0 7a40 	vmov.f32	s15, s0
 8002e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <_ZN11pwm_driversC1Ev>:
 */

#include <pwm_drivers.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU
#include "motor_param.h"
pwm_drivers::pwm_drivers() {
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	4a04      	ldr	r2, [pc, #16]	@ (8002ea4 <_ZN11pwm_driversC1Ev+0x1c>)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	0800c03c 	.word	0x0800c03c

08002ea8 <_ZN11pwm_driversD1Ev>:

pwm_drivers::~pwm_drivers() {
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	4a04      	ldr	r2, [pc, #16]	@ (8002ec4 <_ZN11pwm_driversD1Ev+0x1c>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	0800c03c 	.word	0x0800c03c

08002ec8 <_ZN11pwm_driversD0Ev>:
pwm_drivers::~pwm_drivers() {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
}
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ffe9 	bl	8002ea8 <_ZN11pwm_driversD1Ev>
 8002ed6:	2110      	movs	r1, #16
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f007 fc9f 	bl	800a81c <_ZdlPvj>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff>:
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	//pinMode
}

//Write PWM fsw = 25kHzfloat Ts
void pwm_drivers::writeDutyCycle3PWM(float dc_a, float dc_b, float dc_c) 
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002ef4:	edc7 0a01 	vstr	s1, [r7, #4]
 8002ef8:	ed87 1a00 	vstr	s2, [r7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, fsw*dc_a);
 8002efc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f00:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002f58 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 8002f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f08:	4b14      	ldr	r3, [pc, #80]	@ (8002f5c <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f10:	ee17 2a90 	vmov	r2, s15
 8002f14:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, fsw*dc_b);
 8002f16:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f1a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002f58 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 8002f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f22:	4b0e      	ldr	r3, [pc, #56]	@ (8002f5c <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f2a:	ee17 2a90 	vmov	r2, s15
 8002f2e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, fsw*dc_c);
 8002f30:	edd7 7a00 	vldr	s15, [r7]
 8002f34:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002f58 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 8002f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f3c:	4b07      	ldr	r3, [pc, #28]	@ (8002f5c <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f44:	ee17 2a90 	vmov	r2, s15
 8002f48:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	45610000 	.word	0x45610000
 8002f5c:	20000724 	.word	0x20000724

08002f60 <_ZN11pwm_drivers15setPhaseVoltageEfff>:

// Method using FOC to set Uq and Ud to the motor at the optimal angle
// Function implementing Space Vector PWM and Sine PWM algorithms
void pwm_drivers::setPhaseVoltage(float Uq, float Ud, float angle_el) 
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b090      	sub	sp, #64	@ 0x40
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f6c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002f70:	ed87 1a00 	vstr	s2, [r7]
//		Uc = -0.5f * iv_alpha - _SQRT3_2 * iv_beta + center;

// ===========================================================================
	float Uout;
	// a bit of optitmisation
	if (Ud)
 8002f74:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f78:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f80:	d029      	beq.n	8002fd6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x76>
	{
		// only if Ud and Uq set
		// _sqrt is an approx of sqrt (3-4% error)
		Uout = _sqrtApprox(Ud*Ud + Uq*Uq) / voltage_limit;
 8002f82:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f86:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002f8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f96:	eeb0 0a67 	vmov.f32	s0, s15
 8002f9a:	f7ff fcaf 	bl	80028fc <_Z11_sqrtApproxf>
 8002f9e:	eef0 6a40 	vmov.f32	s13, s0
 8002fa2:	4be8      	ldr	r3, [pc, #928]	@ (8003344 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8002fa4:	ed93 7a00 	vldr	s14, [r3]
 8002fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fac:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		// angle normalisation in between 0 and 2pi
		// only necessary if using _sin and _cos - approximation functions
		angle_el = _normalizeAngle(angle_el + atan2(Uq, Ud));
 8002fb0:	edd7 0a01 	vldr	s1, [r7, #4]
 8002fb4:	ed97 0a02 	vldr	s0, [r7, #8]
 8002fb8:	f7ff ff42 	bl	8002e40 <_ZSt5atan2ff>
 8002fbc:	eeb0 7a40 	vmov.f32	s14, s0
 8002fc0:	edd7 7a00 	vldr	s15, [r7]
 8002fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fcc:	f7ff fc5c 	bl	8002888 <_Z15_normalizeAnglef>
 8002fd0:	ed87 0a00 	vstr	s0, [r7]
 8002fd4:	e014      	b.n	8003000 <_ZN11pwm_drivers15setPhaseVoltageEfff+0xa0>
	}
	else
	{
		// only Uq available - no need for atan2 and sqrt
		Uout = Uq / voltage_limit;
 8002fd6:	4bdb      	ldr	r3, [pc, #876]	@ (8003344 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8002fd8:	ed93 7a00 	vldr	s14, [r3]
 8002fdc:	edd7 6a02 	vldr	s13, [r7, #8]
 8002fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		// angle normalisation in between 0 and 2pi
		// only necessary if using _sin and _cos - approximation functions
		angle_el = _normalizeAngle(angle_el + _PI_2);
 8002fe8:	edd7 7a00 	vldr	s15, [r7]
 8002fec:	ed9f 7ad6 	vldr	s14, [pc, #856]	@ 8003348 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e8>
 8002ff0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ff8:	f7ff fc46 	bl	8002888 <_Z15_normalizeAnglef>
 8002ffc:	ed87 0a00 	vstr	s0, [r7]
	}
	// find the sector we are in currently
	int sector = floor(angle_el / _PI_3) + 1;
 8003000:	edd7 7a00 	vldr	s15, [r7]
 8003004:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 800334c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 8003008:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800300c:	eeb0 0a47 	vmov.f32	s0, s14
 8003010:	f7ff ff2a 	bl	8002e68 <_ZSt5floorf>
 8003014:	eef0 7a40 	vmov.f32	s15, s0
 8003018:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800301c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003024:	ee17 3a90 	vmov	r3, s15
 8003028:	62fb      	str	r3, [r7, #44]	@ 0x2c
	// calculate the duty cycles
	float T1 = _SQRT3 * _sin(sector * _PI_3 - angle_el) * Uout;
 800302a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302c:	ee07 3a90 	vmov	s15, r3
 8003030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003034:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 800334c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 8003038:	ee27 7a87 	vmul.f32	s14, s15, s14
 800303c:	edd7 7a00 	vldr	s15, [r7]
 8003040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003044:	eeb0 0a67 	vmov.f32	s0, s15
 8003048:	f7ff fb76 	bl	8002738 <_Z4_sinf>
 800304c:	eef0 7a40 	vmov.f32	s15, s0
 8003050:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 8003350 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f0>
 8003054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003058:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800305c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003060:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float T2 = _SQRT3 * _sin(angle_el - (sector - 1.0f) * _PI_3) * Uout;
 8003064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800306e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003072:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003076:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 800334c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 800307a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800307e:	ed97 7a00 	vldr	s14, [r7]
 8003082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003086:	eeb0 0a67 	vmov.f32	s0, s15
 800308a:	f7ff fb55 	bl	8002738 <_Z4_sinf>
 800308e:	eef0 7a40 	vmov.f32	s15, s0
 8003092:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 8003350 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f0>
 8003096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800309a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800309e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float T0 = 1 - T1 - T2; // modulation_centered around driver->voltage_limit/2
 80030a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80030aa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80030ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030b2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80030b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ba:	edc7 7a08 	vstr	s15, [r7, #32]
//	float T0 = 0; // pulled to 0 - better for low power supply voltage

	// calculate the duty cycles(times)
	float Ta, Tb, Tc;
	switch (sector) {
 80030be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c0:	3b01      	subs	r3, #1
 80030c2:	2b05      	cmp	r3, #5
 80030c4:	f200 80ee 	bhi.w	80032a4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x344>
 80030c8:	a201      	add	r2, pc, #4	@ (adr r2, 80030d0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x170>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	080030e9 	.word	0x080030e9
 80030d4:	08003133 	.word	0x08003133
 80030d8:	0800317d 	.word	0x0800317d
 80030dc:	080031c7 	.word	0x080031c7
 80030e0:	08003211 	.word	0x08003211
 80030e4:	0800325b 	.word	0x0800325b
	case 1:
		Ta = T1 + T2 + T0 / 2;
 80030e8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80030ec:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80030f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030f4:	edd7 6a08 	vldr	s13, [r7, #32]
 80030f8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80030fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003104:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T2 + T0 / 2;
 8003108:	ed97 7a08 	vldr	s14, [r7, #32]
 800310c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003110:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003114:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800311c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T0 / 2;
 8003120:	ed97 7a08 	vldr	s14, [r7, #32]
 8003124:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800312c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 8003130:	e0c1      	b.n	80032b6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 2:
		Ta = T1 + T0 / 2;
 8003132:	ed97 7a08 	vldr	s14, [r7, #32]
 8003136:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800313a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800313e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003146:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T2 + T0 / 2;
 800314a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800314e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003152:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003156:	edd7 6a08 	vldr	s13, [r7, #32]
 800315a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800315e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003166:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T0 / 2;
 800316a:	ed97 7a08 	vldr	s14, [r7, #32]
 800316e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003172:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003176:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 800317a:	e09c      	b.n	80032b6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 3:
		Ta = T0 / 2;
 800317c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003180:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003184:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003188:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T2 + T0 / 2;
 800318c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003190:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003194:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003198:	edd7 6a08 	vldr	s13, [r7, #32]
 800319c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80031a0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T2 + T0 / 2;
 80031ac:	ed97 7a08 	vldr	s14, [r7, #32]
 80031b0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80031b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031b8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80031bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 80031c4:	e077      	b.n	80032b6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 4:
		Ta = T0 / 2;
 80031c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80031ca:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80031ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031d2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T0 / 2;
 80031d6:	ed97 7a08 	vldr	s14, [r7, #32]
 80031da:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80031de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031e2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80031e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ea:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T2 + T0 / 2;
 80031ee:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80031f2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80031f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031fa:	edd7 6a08 	vldr	s13, [r7, #32]
 80031fe:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003202:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800320a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 800320e:	e052      	b.n	80032b6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 5:
		Ta = T2 + T0 / 2;
 8003210:	ed97 7a08 	vldr	s14, [r7, #32]
 8003214:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800321c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003224:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T0 / 2;
 8003228:	ed97 7a08 	vldr	s14, [r7, #32]
 800322c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003230:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003234:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T2 + T0 / 2;
 8003238:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800323c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003240:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003244:	edd7 6a08 	vldr	s13, [r7, #32]
 8003248:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800324c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003254:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 8003258:	e02d      	b.n	80032b6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 6:
		Ta = T1 + T2 + T0 / 2;
 800325a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800325e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003262:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003266:	edd7 6a08 	vldr	s13, [r7, #32]
 800326a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800326e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003276:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T0 / 2;
 800327a:	ed97 7a08 	vldr	s14, [r7, #32]
 800327e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003282:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003286:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T0 / 2;
 800328a:	ed97 7a08 	vldr	s14, [r7, #32]
 800328e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003292:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003296:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800329a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800329e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 80032a2:	e008      	b.n	80032b6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	default:
		// possible error state
		Ta = 0;
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = 0;
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = 0;
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	// calculate the phase voltages
	Ua = Ta * voltage_limit;
 80032b6:	4b23      	ldr	r3, [pc, #140]	@ (8003344 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 80032b8:	ed93 7a00 	vldr	s14, [r3]
 80032bc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80032c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	edc3 7a01 	vstr	s15, [r3, #4]
	Ub = Tb * voltage_limit;
 80032ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003344 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 80032cc:	ed93 7a00 	vldr	s14, [r3]
 80032d0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80032d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	edc3 7a02 	vstr	s15, [r3, #8]
	Uc = Tc * voltage_limit;
 80032de:	4b19      	ldr	r3, [pc, #100]	@ (8003344 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 80032e0:	ed93 7a00 	vldr	s14, [r3]
 80032e4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80032e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	edc3 7a03 	vstr	s15, [r3, #12]
// ===========================================================================

	// set the voltages in hardware
	// limit the voltage in driver
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80032f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003300:	d502      	bpl.n	8003308 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3a8>
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	e00f      	b.n	8003328 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c8>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	ed93 7a01 	vldr	s14, [r3, #4]
 800330e:	4b0d      	ldr	r3, [pc, #52]	@ (8003344 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331c:	dd02      	ble.n	8003324 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c4>
 800331e:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	e001      	b.n	8003328 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c8>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	6053      	str	r3, [r2, #4]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333a:	d50b      	bpl.n	8003354 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f4>
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e018      	b.n	8003374 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x414>
 8003342:	bf00      	nop
 8003344:	200000b0 	.word	0x200000b0
 8003348:	3fc90fdb 	.word	0x3fc90fdb
 800334c:	3f860a92 	.word	0x3f860a92
 8003350:	3fddb3d7 	.word	0x3fddb3d7
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	ed93 7a02 	vldr	s14, [r3, #8]
 800335a:	4b5e      	ldr	r3, [pc, #376]	@ (80034d4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 800335c:	edd3 7a00 	vldr	s15, [r3]
 8003360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003368:	dd02      	ble.n	8003370 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x410>
 800336a:	4b5a      	ldr	r3, [pc, #360]	@ (80034d4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	e001      	b.n	8003374 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x414>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	6093      	str	r3, [r2, #8]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	edd3 7a03 	vldr	s15, [r3, #12]
 800337e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003386:	d502      	bpl.n	800338e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x42e>
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e00f      	b.n	80033ae <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44e>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	ed93 7a03 	vldr	s14, [r3, #12]
 8003394:	4b4f      	ldr	r3, [pc, #316]	@ (80034d4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 8003396:	edd3 7a00 	vldr	s15, [r3]
 800339a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800339e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a2:	dd02      	ble.n	80033aa <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44a>
 80033a4:	4b4b      	ldr	r3, [pc, #300]	@ (80034d4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	e001      	b.n	80033ae <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44e>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	60d3      	str	r3, [r2, #12]
	// calculate duty cycle
	float dc_a;  //duty cycle phase A [0, 1]
	float dc_b;  //duty cycle phase B [0, 1]
	float dc_c;  //duty cycle phase C [0, 1]
	// limited in [0,1]
	dc_a = _constrain(Ua / voltage_power_supply, 0.0f, 0.94f);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80033b8:	4b47      	ldr	r3, [pc, #284]	@ (80034d8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80033ba:	ed93 7a00 	vldr	s14, [r3]
 80033be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ca:	d502      	bpl.n	80033d2 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x472>
 80033cc:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80034dc <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 80033d0:	e019      	b.n	8003406 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4a6>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80033d8:	4b3f      	ldr	r3, [pc, #252]	@ (80034d8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80033da:	ed93 7a00 	vldr	s14, [r3]
 80033de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033e2:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80034e0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 80033e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	dd02      	ble.n	80033f6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x496>
 80033f0:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80034e0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 80033f4:	e007      	b.n	8003406 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4a6>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80033fc:	4b36      	ldr	r3, [pc, #216]	@ (80034d8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80033fe:	ed93 7a00 	vldr	s14, [r3]
 8003402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003406:	edc7 7a07 	vstr	s15, [r7, #28]
	dc_b = _constrain(Ub / voltage_power_supply, 0.0f, 0.94f);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003410:	4b31      	ldr	r3, [pc, #196]	@ (80034d8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8003412:	ed93 7a00 	vldr	s14, [r3]
 8003416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800341a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003422:	d502      	bpl.n	800342a <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4ca>
 8003424:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80034dc <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 8003428:	e019      	b.n	800345e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4fe>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003430:	4b29      	ldr	r3, [pc, #164]	@ (80034d8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8003432:	ed93 7a00 	vldr	s14, [r3]
 8003436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800343a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80034e0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 800343e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003446:	dd02      	ble.n	800344e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4ee>
 8003448:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80034e0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 800344c:	e007      	b.n	800345e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4fe>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	edd3 6a02 	vldr	s13, [r3, #8]
 8003454:	4b20      	ldr	r3, [pc, #128]	@ (80034d8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8003456:	ed93 7a00 	vldr	s14, [r3]
 800345a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800345e:	edc7 7a06 	vstr	s15, [r7, #24]
	dc_c = _constrain(Uc / voltage_power_supply, 0.0f, 0.94f);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	edd3 6a03 	vldr	s13, [r3, #12]
 8003468:	4b1b      	ldr	r3, [pc, #108]	@ (80034d8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 800346a:	ed93 7a00 	vldr	s14, [r3]
 800346e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003472:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347a:	d502      	bpl.n	8003482 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x522>
 800347c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80034dc <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 8003480:	e019      	b.n	80034b6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x556>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	edd3 6a03 	vldr	s13, [r3, #12]
 8003488:	4b13      	ldr	r3, [pc, #76]	@ (80034d8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 800348a:	ed93 7a00 	vldr	s14, [r3]
 800348e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003492:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80034e0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 8003496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800349a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349e:	dd02      	ble.n	80034a6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x546>
 80034a0:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80034e0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 80034a4:	e007      	b.n	80034b6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x556>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	edd3 6a03 	vldr	s13, [r3, #12]
 80034ac:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80034ae:	ed93 7a00 	vldr	s14, [r3]
 80034b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034b6:	edc7 7a05 	vstr	s15, [r7, #20]
	writeDutyCycle3PWM(dc_a, dc_b, dc_c);
 80034ba:	ed97 1a05 	vldr	s2, [r7, #20]
 80034be:	edd7 0a06 	vldr	s1, [r7, #24]
 80034c2:	ed97 0a07 	vldr	s0, [r7, #28]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7ff fd0e 	bl	8002ee8 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff>
}
 80034cc:	bf00      	nop
 80034ce:	3740      	adds	r7, #64	@ 0x40
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	200000b0 	.word	0x200000b0
 80034d8:	200000ac 	.word	0x200000ac
 80034dc:	00000000 	.word	0x00000000
 80034e0:	3f70a3d7 	.word	0x3f70a3d7

080034e4 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80034ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80034f2:	eef0 7ae7 	vabs.f32	s15, s15
 80034f6:	eeb0 0a67 	vmov.f32	s0, s15
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <_ZN9simpleFOCC1Ev>:
#include <simpleFOC.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU



simpleFOC::simpleFOC() 
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	4a10      	ldr	r2, [pc, #64]	@ (8003550 <_ZN9simpleFOCC1Ev+0x4c>)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3308      	adds	r3, #8
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd fb4a 	bl	8000bb0 <_ZN17AS5048A_interfaceC1Ev>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	33b8      	adds	r3, #184	@ 0xb8
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd fe89 	bl	8001238 <_ZN12CurrentSenseC1Ev>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fcab 	bl	8002e88 <_ZN11pwm_driversC1Ev>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003538:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003542:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
{

}
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	0800c04c 	.word	0x0800c04c

08003554 <_ZN9simpleFOCD1Ev>:

simpleFOC::~simpleFOC() 
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	4a0b      	ldr	r2, [pc, #44]	@ (800358c <_ZN9simpleFOCD1Ev+0x38>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fc9d 	bl	8002ea8 <_ZN11pwm_driversD1Ev>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	33b8      	adds	r3, #184	@ 0xb8
 8003572:	4618      	mov	r0, r3
 8003574:	f7fd ff10 	bl	8001398 <_ZN12CurrentSenseD1Ev>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3308      	adds	r3, #8
 800357c:	4618      	mov	r0, r3
 800357e:	f7fd fb87 	bl	8000c90 <_ZN17AS5048A_interfaceD1Ev>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	0800c04c 	.word	0x0800c04c

08003590 <_ZN9simpleFOCD0Ev>:
simpleFOC::~simpleFOC() 
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
}
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff ffdb 	bl	8003554 <_ZN9simpleFOCD1Ev>
 800359e:	f44f 710c 	mov.w	r1, #560	@ 0x230
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f007 f93a 	bl	800a81c <_ZdlPvj>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <_ZN9simpleFOC11initSensorsEv>:

void simpleFOC::initSensors()
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
	Encoder.MagneticSensorSPI_init();
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3308      	adds	r3, #8
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fd fb89 	bl	8000cd8 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>
	Encoder.Sensor_init();
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3308      	adds	r3, #8
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fd fbc0 	bl	8000d50 <_ZN17AS5048A_interface11Sensor_initEv>
	CurrentSensor.initCurrentsense(CurrentSense_resistance, CurrentSense_gain);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	33b8      	adds	r3, #184	@ 0xb8
 80035d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003600 <_ZN9simpleFOC11initSensorsEv+0x4c>)
 80035d6:	edd2 7a00 	vldr	s15, [r2]
 80035da:	4a0a      	ldr	r2, [pc, #40]	@ (8003604 <_ZN9simpleFOC11initSensorsEv+0x50>)
 80035dc:	ed92 7a00 	vldr	s14, [r2]
 80035e0:	eef0 0a47 	vmov.f32	s1, s14
 80035e4:	eeb0 0a67 	vmov.f32	s0, s15
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd fefb 	bl	80013e4 <_ZN12CurrentSense16initCurrentsenseEff>
	CurrentSensor.calibrateOffsets();
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	33b8      	adds	r3, #184	@ 0xb8
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fd ff20 	bl	8001438 <_ZN12CurrentSense16calibrateOffsetsEv>
}
 80035f8:	bf00      	nop
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20000098 	.word	0x20000098
 8003604:	2000009c 	.word	0x2000009c

08003608 <_ZN9simpleFOC11needsSearchEv>:

// returns 0 if it does need search for absolute zero
// 0 - magnetic sensor (& encoder with index which is found)
// 1 - encoder with index (with index not found yet)
int simpleFOC::needsSearch() 
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
	return 0;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <_ZN9simpleFOC18absoluteZeroSearchEv>:

// Encoder alignment the absolute zero angle
// - to the index
int simpleFOC::absoluteZeroSearch() 
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
	// search the absolute zero with small velocity
	float limit_vel = velocity_limit;
 8003628:	4b29      	ldr	r3, [pc, #164]	@ (80036d0 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60fb      	str	r3, [r7, #12]
	float limit_volt = voltage_limit;
 800362e:	4b29      	ldr	r3, [pc, #164]	@ (80036d4 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60bb      	str	r3, [r7, #8]
	velocity_limit = velocity_index_search;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800363a:	4a25      	ldr	r2, [pc, #148]	@ (80036d0 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 800363c:	6013      	str	r3, [r2, #0]
	voltage_limit = voltage_sensor_align;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8003644:	4a23      	ldr	r2, [pc, #140]	@ (80036d4 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 8003646:	6013      	str	r3, [r2, #0]
	shaft_angle = 0;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	605a      	str	r2, [r3, #4]
	while (needsSearch() && shaft_angle < _2PI) 
 8003650:	e009      	b.n	8003666 <_ZN9simpleFOC18absoluteZeroSearchEv+0x46>
	{
		angleOpenloop(1.5 * _2PI);
 8003652:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 80036d8 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb8>
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 faaa 	bl	8003bb0 <_ZN9simpleFOC13angleOpenloopEf>
		// call important for some sensors not to loose count
		// not needed for the search
		Encoder.get_full_rotation_angle();
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3308      	adds	r3, #8
 8003660:	4618      	mov	r0, r3
 8003662:	f7fd fc63 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
	while (needsSearch() && shaft_angle < _2PI) 
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff ffce 	bl	8003608 <_ZN9simpleFOC11needsSearchEv>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00b      	beq.n	800368a <_ZN9simpleFOC18absoluteZeroSearchEv+0x6a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	edd3 7a01 	vldr	s15, [r3, #4]
 8003678:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80036dc <_ZN9simpleFOC18absoluteZeroSearchEv+0xbc>
 800367c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003684:	d501      	bpl.n	800368a <_ZN9simpleFOC18absoluteZeroSearchEv+0x6a>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <_ZN9simpleFOC18absoluteZeroSearchEv+0x6c>
 800368a:	2300      	movs	r3, #0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e0      	bne.n	8003652 <_ZN9simpleFOC18absoluteZeroSearchEv+0x32>
	}
	driver.setPhaseVoltage(0, 0, 0);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003696:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 80036e0 <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 800369a:	eddf 0a11 	vldr	s1, [pc, #68]	@ 80036e0 <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 800369e:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80036e0 <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fc5c 	bl	8002f60 <_ZN11pwm_drivers15setPhaseVoltageEfff>

	// re-init the limits
	velocity_limit = limit_vel;
 80036a8:	4a09      	ldr	r2, [pc, #36]	@ (80036d0 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6013      	str	r3, [r2, #0]
	voltage_limit = limit_volt;
 80036ae:	4a09      	ldr	r2, [pc, #36]	@ (80036d4 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	6013      	str	r3, [r2, #0]
	return !needsSearch();
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ffa7 	bl	8003608 <_ZN9simpleFOC11needsSearchEv>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	200000b8 	.word	0x200000b8
 80036d4:	200000b0 	.word	0x200000b0
 80036d8:	4116cbe4 	.word	0x4116cbe4
 80036dc:	40c90fdb 	.word	0x40c90fdb
	...

080036e8 <_ZN9simpleFOC11alignSensorEv>:

// Encoder alignment to electrical 0 angle
int simpleFOC::alignSensor() 
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	ed2d 8b02 	vpush	{d8}
 80036ee:	b08a      	sub	sp, #40	@ 0x28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
	int exit_flag = 1; //success
 80036f4:	2301      	movs	r3, #1
 80036f6:	627b      	str	r3, [r7, #36]	@ 0x24
	// if unknown natural direction
	if (!_isset(Encoder.sensor_direction)) //sensor_direction == -12345.0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036fc:	ee07 3a90 	vmov	s15, r3
 8003700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003704:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 80039e0 <_ZN9simpleFOC11alignSensorEv+0x2f8>
 8003708:	eef4 7a47 	vcmp.f32	s15, s14
 800370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003710:	f040 810a 	bne.w	8003928 <_ZN9simpleFOC11alignSensorEv+0x240>
	{
		// check if sensor needs zero search
		if (needsSearch()) //needSearch == 0 because use Magnetic sensor
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff ff77 	bl	8003608 <_ZN9simpleFOC11needsSearchEv>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	bf14      	ite	ne
 8003720:	2301      	movne	r3, #1
 8003722:	2300      	moveq	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <_ZN9simpleFOC11alignSensorEv+0x4a>
			exit_flag = absoluteZeroSearch(); // o
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff ff78 	bl	8003620 <_ZN9simpleFOC18absoluteZeroSearchEv>
 8003730:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!exit_flag)
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <_ZN9simpleFOC11alignSensorEv+0x54>
			return exit_flag;
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	e146      	b.n	80039ca <_ZN9simpleFOC11alignSensorEv+0x2e2>

		// find natural direction
		// move one electrical revolution forward
		for (int i = 0; i <= 500; i++) 
 800373c:	2300      	movs	r3, #0
 800373e:	623b      	str	r3, [r7, #32]
 8003740:	e037      	b.n	80037b2 <_ZN9simpleFOC11alignSensorEv+0xca>
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	ee07 3a90 	vmov	s15, r3
 8003748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800374c:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 80039e4 <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8003750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003754:	ee17 0a90 	vmov	r0, s15
 8003758:	f7fc fec2 	bl	80004e0 <__aeabi_f2d>
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	4ba1      	ldr	r3, [pc, #644]	@ (80039e8 <_ZN9simpleFOC11alignSensorEv+0x300>)
 8003762:	f7fd f83f 	bl	80007e4 <__aeabi_ddiv>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	a39a      	add	r3, pc, #616	@ (adr r3, 80039d8 <_ZN9simpleFOC11alignSensorEv+0x2f0>)
 8003770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003774:	f7fc fd56 	bl	8000224 <__adddf3>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4610      	mov	r0, r2
 800377e:	4619      	mov	r1, r3
 8003780:	f7fd f9b6 	bl	8000af0 <__aeabi_d2f>
 8003784:	4603      	mov	r3, r0
 8003786:	60bb      	str	r3, [r7, #8]
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	edd3 7a8a 	vldr	s15, [r3, #552]	@ 0x228
 8003794:	ed97 1a02 	vldr	s2, [r7, #8]
 8003798:	eddf 0a94 	vldr	s1, [pc, #592]	@ 80039ec <_ZN9simpleFOC11alignSensorEv+0x304>
 800379c:	eeb0 0a67 	vmov.f32	s0, s15
 80037a0:	4610      	mov	r0, r2
 80037a2:	f7ff fbdd 	bl	8002f60 <_ZN11pwm_drivers15setPhaseVoltageEfff>
			HAL_Delay(2);
 80037a6:	2002      	movs	r0, #2
 80037a8:	f001 fc14 	bl	8004fd4 <HAL_Delay>
		for (int i = 0; i <= 500; i++) 
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	3301      	adds	r3, #1
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80037b8:	ddc3      	ble.n	8003742 <_ZN9simpleFOC11alignSensorEv+0x5a>
		}
		Encoder.updateSensor();
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3308      	adds	r3, #8
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd fc24 	bl	800100c <_ZN17AS5048A_interface12updateSensorEv>
		// take and angle in the middle
		float mid_angle = Encoder.get_full_rotation_angle();
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3308      	adds	r3, #8
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fd fbaf 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 80037ce:	ed87 0a06 	vstr	s0, [r7, #24]
		// move one electrical revolution backwards
		for (int i = 500; i >= 0; i--) 
 80037d2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80037d6:	61fb      	str	r3, [r7, #28]
 80037d8:	e037      	b.n	800384a <_ZN9simpleFOC11alignSensorEv+0x162>
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	ee07 3a90 	vmov	s15, r3
 80037e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037e4:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80039e4 <_ZN9simpleFOC11alignSensorEv+0x2fc>
 80037e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ec:	ee17 0a90 	vmov	r0, s15
 80037f0:	f7fc fe76 	bl	80004e0 <__aeabi_f2d>
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	4b7b      	ldr	r3, [pc, #492]	@ (80039e8 <_ZN9simpleFOC11alignSensorEv+0x300>)
 80037fa:	f7fc fff3 	bl	80007e4 <__aeabi_ddiv>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4610      	mov	r0, r2
 8003804:	4619      	mov	r1, r3
 8003806:	a374      	add	r3, pc, #464	@ (adr r3, 80039d8 <_ZN9simpleFOC11alignSensorEv+0x2f0>)
 8003808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380c:	f7fc fd0a 	bl	8000224 <__adddf3>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4610      	mov	r0, r2
 8003816:	4619      	mov	r1, r3
 8003818:	f7fd f96a 	bl	8000af0 <__aeabi_d2f>
 800381c:	4603      	mov	r3, r0
 800381e:	60fb      	str	r3, [r7, #12]
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	edd3 7a8a 	vldr	s15, [r3, #552]	@ 0x228
 800382c:	ed97 1a03 	vldr	s2, [r7, #12]
 8003830:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 80039ec <_ZN9simpleFOC11alignSensorEv+0x304>
 8003834:	eeb0 0a67 	vmov.f32	s0, s15
 8003838:	4610      	mov	r0, r2
 800383a:	f7ff fb91 	bl	8002f60 <_ZN11pwm_drivers15setPhaseVoltageEfff>
			HAL_Delay(2);
 800383e:	2002      	movs	r0, #2
 8003840:	f001 fbc8 	bl	8004fd4 <HAL_Delay>
		for (int i = 500; i >= 0; i--) 
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	3b01      	subs	r3, #1
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	2b00      	cmp	r3, #0
 800384e:	dac4      	bge.n	80037da <_ZN9simpleFOC11alignSensorEv+0xf2>
		}
		Encoder.updateSensor();
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3308      	adds	r3, #8
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd fbd9 	bl	800100c <_ZN17AS5048A_interface12updateSensorEv>
		float end_angle = Encoder.get_full_rotation_angle();
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3308      	adds	r3, #8
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd fb64 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8003864:	ed87 0a05 	vstr	s0, [r7, #20]
		driver.setPhaseVoltage(0, 0, 0);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800386e:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 80039ec <_ZN9simpleFOC11alignSensorEv+0x304>
 8003872:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 80039ec <_ZN9simpleFOC11alignSensorEv+0x304>
 8003876:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 80039ec <_ZN9simpleFOC11alignSensorEv+0x304>
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fb70 	bl	8002f60 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(200);
 8003880:	20c8      	movs	r0, #200	@ 0xc8
 8003882:	f001 fba7 	bl	8004fd4 <HAL_Delay>
		// determine the direction the sensor moved
		if (mid_angle == end_angle) 
 8003886:	ed97 7a06 	vldr	s14, [r7, #24]
 800388a:	edd7 7a05 	vldr	s15, [r7, #20]
 800388e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003896:	d101      	bne.n	800389c <_ZN9simpleFOC11alignSensorEv+0x1b4>
		{
			return 0; // failed calibration
 8003898:	2300      	movs	r3, #0
 800389a:	e096      	b.n	80039ca <_ZN9simpleFOC11alignSensorEv+0x2e2>
		} else if (mid_angle < end_angle) 
 800389c:	ed97 7a06 	vldr	s14, [r7, #24]
 80038a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80038a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ac:	d504      	bpl.n	80038b8 <_ZN9simpleFOC11alignSensorEv+0x1d0>
		{
			Encoder.sensor_direction = CCW;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f04f 32ff 	mov.w	r2, #4294967295
 80038b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80038b6:	e002      	b.n	80038be <_ZN9simpleFOC11alignSensorEv+0x1d6>
		} else {
			Encoder.sensor_direction = CW;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	651a      	str	r2, [r3, #80]	@ 0x50
		}
		// check pole pair number

		float moved = fabs(mid_angle - end_angle);
 80038be:	ed97 7a06 	vldr	s14, [r7, #24]
 80038c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80038c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ca:	eeb0 0a67 	vmov.f32	s0, s15
 80038ce:	f7ff fe09 	bl	80034e4 <_ZSt4fabsf>
 80038d2:	ed87 0a04 	vstr	s0, [r7, #16]
		if (fabs(moved * pole_pairs - _2PI) > 0.5) 
 80038d6:	4b46      	ldr	r3, [pc, #280]	@ (80039f0 <_ZN9simpleFOC11alignSensorEv+0x308>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80038e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ea:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80039e4 <_ZN9simpleFOC11alignSensorEv+0x2fc>
 80038ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80038f2:	eeb0 0a67 	vmov.f32	s0, s15
 80038f6:	f7ff fdf5 	bl	80034e4 <_ZSt4fabsf>
 80038fa:	eef0 7a40 	vmov.f32	s15, s0
 80038fe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390a:	bfcc      	ite	gt
 800390c:	2301      	movgt	r3, #1
 800390e:	2300      	movle	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <_ZN9simpleFOC11alignSensorEv+0x240>
		{ // 0.5 is arbitrary number it can be lower or higher!
			pp_check = _2PI / moved;
 8003916:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80039e4 <_ZN9simpleFOC11alignSensorEv+0x2fc>
 800391a:	ed97 7a04 	vldr	s14, [r7, #16]
 800391e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	edc3 7a89 	vstr	s15, [r3, #548]	@ 0x224
		}
	}

	// zero electric angle not known
	if (!_isset(Encoder.zero_electric_angle))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800392e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80039e0 <_ZN9simpleFOC11alignSensorEv+0x2f8>
 8003932:	eef4 7a47 	vcmp.f32	s15, s14
 8003936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393a:	d145      	bne.n	80039c8 <_ZN9simpleFOC11alignSensorEv+0x2e0>
	{
		// align the electrical phases of the motor and sensor
		// set angle -90(270 = 3PI/2) degrees
		driver.setPhaseVoltage(voltage_sensor_align, 0, _3PI_2);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	edd3 7a8a 	vldr	s15, [r3, #552]	@ 0x228
 8003948:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 80039f4 <_ZN9simpleFOC11alignSensorEv+0x30c>
 800394c:	eddf 0a27 	vldr	s1, [pc, #156]	@ 80039ec <_ZN9simpleFOC11alignSensorEv+0x304>
 8003950:	eeb0 0a67 	vmov.f32	s0, s15
 8003954:	4610      	mov	r0, r2
 8003956:	f7ff fb03 	bl	8002f60 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(700);
 800395a:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800395e:	f001 fb39 	bl	8004fd4 <HAL_Delay>
		Encoder.zero_electric_angle = _normalizeAngle(_electricalAngle(Encoder.sensor_direction * Encoder.get_full_rotation_angle(), pole_pairs));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3308      	adds	r3, #8
 8003972:	4618      	mov	r0, r3
 8003974:	f7fd fada 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8003978:	eef0 7a40 	vmov.f32	s15, s0
 800397c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003980:	4b1b      	ldr	r3, [pc, #108]	@ (80039f0 <_ZN9simpleFOC11alignSensorEv+0x308>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	eeb0 0a67 	vmov.f32	s0, s15
 800398a:	f7fe ffa1 	bl	80028d0 <_Z16_electricalAnglefi>
 800398e:	eef0 7a40 	vmov.f32	s15, s0
 8003992:	eeb0 0a67 	vmov.f32	s0, s15
 8003996:	f7fe ff77 	bl	8002888 <_Z15_normalizeAnglef>
 800399a:	eef0 7a40 	vmov.f32	s15, s0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		HAL_Delay(20);
 80039a4:	2014      	movs	r0, #20
 80039a6:	f001 fb15 	bl	8004fd4 <HAL_Delay>
		// stop everything
		driver.setPhaseVoltage(0, 0, 0);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80039b0:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 80039ec <_ZN9simpleFOC11alignSensorEv+0x304>
 80039b4:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 80039ec <_ZN9simpleFOC11alignSensorEv+0x304>
 80039b8:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80039ec <_ZN9simpleFOC11alignSensorEv+0x304>
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff facf 	bl	8002f60 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(200);
 80039c2:	20c8      	movs	r0, #200	@ 0xc8
 80039c4:	f001 fb06 	bl	8004fd4 <HAL_Delay>
	}
	return exit_flag;
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3728      	adds	r7, #40	@ 0x28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	ecbd 8b02 	vpop	{d8}
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	80000000 	.word	0x80000000
 80039dc:	4012d97c 	.word	0x4012d97c
 80039e0:	c640e400 	.word	0xc640e400
 80039e4:	40c90fdb 	.word	0x40c90fdb
 80039e8:	407f4000 	.word	0x407f4000
 80039ec:	00000000 	.word	0x00000000
 80039f0:	200000a8 	.word	0x200000a8
 80039f4:	4096cbe4 	.word	0x4096cbe4

080039f8 <_ZN9simpleFOC7initFOCEf9Direction>:

// zero_electric_offset , _sensor_direction : from Run code "find_sensor_offset_and_direction"
// sensor : Encoder , Hall sensor , Magnetic encoder
int simpleFOC::initFOC(float zero_electric_offset, enum Direction _sensor_direction) 
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a04:	460b      	mov	r3, r1
 8003a06:	71fb      	strb	r3, [r7, #7]
	int exit_flag = 1;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	617b      	str	r3, [r7, #20]
	// align motor if necessary
	// alignment necessary for encoders.
	if (_isset(zero_electric_offset)) 
 8003a0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a10:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003a64 <_ZN9simpleFOC7initFOCEf9Direction+0x6c>
 8003a14:	eef4 7a47 	vcmp.f32	s15, s14
 8003a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1c:	d006      	beq.n	8003a2c <_ZN9simpleFOC7initFOCEf9Direction+0x34>
	{
		// absolute zero offset provided - no need to align
		Encoder.zero_electric_angle = zero_electric_offset;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	64da      	str	r2, [r3, #76]	@ 0x4c
		// set the sensor direction - default CW
		Encoder.sensor_direction = _sensor_direction;
 8003a24:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	// sensor and motor alignment - can be skipped
	// by setting motor.sensor_direction and motor.Encoder.zero_electric_angle
	exit_flag *= alignSensor();
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff fe5b 	bl	80036e8 <_ZN9simpleFOC11alignSensorEv>
 8003a32:	4602      	mov	r2, r0
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	617b      	str	r3, [r7, #20]
	// added the shaft_angle update
	shaft_angle = Encoder.get_full_rotation_angle();
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3308      	adds	r3, #8
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fd fa73 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8003a46:	eef0 7a40 	vmov.f32	s15, s0
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	edc3 7a01 	vstr	s15, [r3, #4]
	HAL_Delay(500);
 8003a50:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a54:	f001 fabe 	bl	8004fd4 <HAL_Delay>

	return exit_flag;
 8003a58:	697b      	ldr	r3, [r7, #20]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	c640e400 	.word	0xc640e400

08003a68 <_ZN9simpleFOC7loopFOCEv>:



void simpleFOC::loopFOC() 
{
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
	Encoder.updateSensor();
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3308      	adds	r3, #8
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fd fac9 	bl	800100c <_ZN17AS5048A_interface12updateSensorEv>
	// shaft angle/velocity need the update() to be called first
	// get shaft angle
	shaft_angle = Encoder.getShaftAngle();						// checked full rotation angle
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd fb92 	bl	80011a8 <_ZN17AS5048A_interface13getShaftAngleEv>
 8003a84:	eef0 7a40 	vmov.f32	s15, s0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	edc3 7a01 	vstr	s15, [r3, #4]
	// electrical angle - need shaftAngle to be called first
	electrical_angle = Encoder.electricalAngle();				//checked
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3308      	adds	r3, #8
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd fa76 	bl	8000f84 <_ZN17AS5048A_interface15electricalAngleEv>
 8003a98:	eef0 7a40 	vmov.f32	s15, s0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc


	// read dq currents
	current = CurrentSensor.getFOCCurrents(electrical_angle);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	edd3 7a7f 	vldr	s15, [r3, #508]	@ 0x1fc
 8003aae:	687c      	ldr	r4, [r7, #4]
 8003ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f7fd fdbf 	bl	8001638 <_ZN12CurrentSense14getFOCCurrentsEf>
 8003aba:	eeb0 7a40 	vmov.f32	s14, s0
 8003abe:	eef0 7a60 	vmov.f32	s15, s1
 8003ac2:	ed84 7a86 	vstr	s14, [r4, #536]	@ 0x218
 8003ac6:	edc4 7a87 	vstr	s15, [r4, #540]	@ 0x21c

	current.q = LPF_current_q(current.q);   // filter values
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	edd3 7a87 	vldr	s15, [r3, #540]	@ 0x21c
 8003ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad4:	4828      	ldr	r0, [pc, #160]	@ (8003b78 <_ZN9simpleFOC7loopFOCEv+0x110>)
 8003ad6:	f7fe ff45 	bl	8002964 <_ZN13LowPassFilterclEf>
 8003ada:	eef0 7a40 	vmov.f32	s15, s0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	edc3 7a87 	vstr	s15, [r3, #540]	@ 0x21c
	current.d = LPF_current_d(current.d);   // filter values
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	edd3 7a86 	vldr	s15, [r3, #536]	@ 0x218
 8003aea:	eeb0 0a67 	vmov.f32	s0, s15
 8003aee:	4823      	ldr	r0, [pc, #140]	@ (8003b7c <_ZN9simpleFOC7loopFOCEv+0x114>)
 8003af0:	f7fe ff38 	bl	8002964 <_ZN13LowPassFilterclEf>
 8003af4:	eef0 7a40 	vmov.f32	s15, s0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	edc3 7a86 	vstr	s15, [r3, #536]	@ 0x218

	// calculate the phase voltages
	voltage.q = PID_current_q(current_sp - current.q);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	ed93 7a81 	vldr	s14, [r3, #516]	@ 0x204
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	edd3 7a87 	vldr	s15, [r3, #540]	@ 0x21c
 8003b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b12:	481b      	ldr	r0, [pc, #108]	@ (8003b80 <_ZN9simpleFOC7loopFOCEv+0x118>)
 8003b14:	f7ff f868 	bl	8002be8 <_ZN13PIDControllerclEf>
 8003b18:	eef0 7a40 	vmov.f32	s15, s0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	edc3 7a85 	vstr	s15, [r3, #532]	@ 0x214
	voltage.d = PID_current_d(0 - current.d);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	edd3 7a86 	vldr	s15, [r3, #536]	@ 0x218
 8003b28:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003b84 <_ZN9simpleFOC7loopFOCEv+0x11c>
 8003b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b30:	eeb0 0a67 	vmov.f32	s0, s15
 8003b34:	4814      	ldr	r0, [pc, #80]	@ (8003b88 <_ZN9simpleFOC7loopFOCEv+0x120>)
 8003b36:	f7ff f857 	bl	8002be8 <_ZN13PIDControllerclEf>
 8003b3a:	eef0 7a40 	vmov.f32	s15, s0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	edc3 7a84 	vstr	s15, [r3, #528]	@ 0x210

	// set the phase voltage - FOC heart function :)
	driver.setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	edd3 7a85 	vldr	s15, [r3, #532]	@ 0x214
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	ed93 7a84 	vldr	s14, [r3, #528]	@ 0x210
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	edd3 6a7f 	vldr	s13, [r3, #508]	@ 0x1fc
 8003b5c:	eeb0 1a66 	vmov.f32	s2, s13
 8003b60:	eef0 0a47 	vmov.f32	s1, s14
 8003b64:	eeb0 0a67 	vmov.f32	s0, s15
 8003b68:	4610      	mov	r0, r2
 8003b6a:	f7ff f9f9 	bl	8002f60 <_ZN11pwm_drivers15setPhaseVoltageEfff>
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd90      	pop	{r4, r7, pc}
 8003b76:	bf00      	nop
 8003b78:	200001dc 	.word	0x200001dc
 8003b7c:	200001e8 	.word	0x200001e8
 8003b80:	20000170 	.word	0x20000170
 8003b84:	00000000 	.word	0x00000000
 8003b88:	2000014c 	.word	0x2000014c

08003b8c <_ZN9simpleFOC11move_torqueEf>:


void simpleFOC::move_torque(float new_target)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	ed87 0a00 	vstr	s0, [r7]
	current_sp = new_target; // if current/foc_current torque control
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	0000      	movs	r0, r0
	...

08003bb0 <_ZN9simpleFOC13angleOpenloopEf>:

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float simpleFOC::angleOpenloop(float target_angle) 
{
 8003bb0:	b590      	push	{r4, r7, lr}
 8003bb2:	ed2d 8b02 	vpush	{d8}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	ed87 0a00 	vstr	s0, [r7]
	unsigned long now_us = micros();
 8003bc0:	f000 f8e6 	bl	8003d90 <_ZN9simpleFOC6microsEv>
 8003bc4:	60f8      	str	r0, [r7, #12]
	// calculate the sample time from last call
	float Ts = (now_us - open_loop_timestamp) * 1e-6;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8003bcc:	461a      	mov	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fc fc62 	bl	800049c <__aeabi_ui2d>
 8003bd8:	a36b      	add	r3, pc, #428	@ (adr r3, 8003d88 <_ZN9simpleFOC13angleOpenloopEf+0x1d8>)
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	f7fc fcd7 	bl	8000590 <__aeabi_dmul>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4610      	mov	r0, r2
 8003be8:	4619      	mov	r1, r3
 8003bea:	f7fc ff81 	bl	8000af0 <__aeabi_d2f>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	617b      	str	r3, [r7, #20]
	// quick fix for strange cases (micros overflow + timestamp not defined)
	if (Ts <= 0 || Ts > 0.5)
 8003bf2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfe:	d908      	bls.n	8003c12 <_ZN9simpleFOC13angleOpenloopEf+0x62>
 8003c00:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c04:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c10:	dd01      	ble.n	8003c16 <_ZN9simpleFOC13angleOpenloopEf+0x66>
		Ts = 1e-3;
 8003c12:	4b55      	ldr	r3, [pc, #340]	@ (8003d68 <_ZN9simpleFOC13angleOpenloopEf+0x1b8>)
 8003c14:	617b      	str	r3, [r7, #20]

	// calculate the necessary angle to move from current position towards target angle
	// with maximal velocity (velocity_limit)
	if (abs(target_angle - shaft_angle) > abs(velocity_limit * Ts))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c1c:	ed97 7a00 	vldr	s14, [r7]
 8003c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c24:	eeb0 0a67 	vmov.f32	s0, s15
 8003c28:	f7fc ffb2 	bl	8000b90 <_ZSt3absf>
 8003c2c:	eeb0 8a40 	vmov.f32	s16, s0
 8003c30:	4b4e      	ldr	r3, [pc, #312]	@ (8003d6c <_ZN9simpleFOC13angleOpenloopEf+0x1bc>)
 8003c32:	ed93 7a00 	vldr	s14, [r3]
 8003c36:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c42:	f7fc ffa5 	bl	8000b90 <_ZSt3absf>
 8003c46:	eef0 7a40 	vmov.f32	s15, s0
 8003c4a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c52:	bfcc      	ite	gt
 8003c54:	2301      	movgt	r3, #1
 8003c56:	2300      	movle	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d03c      	beq.n	8003cd8 <_ZN9simpleFOC13angleOpenloopEf+0x128>
	{
		shaft_angle += _sign(target_angle - shaft_angle) * abs(velocity_limit) * Ts;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c64:	ed97 7a00 	vldr	s14, [r7]
 8003c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c74:	d502      	bpl.n	8003c7c <_ZN9simpleFOC13angleOpenloopEf+0xcc>
 8003c76:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8003c7a:	e010      	b.n	8003c9e <_ZN9simpleFOC13angleOpenloopEf+0xee>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c82:	ed97 7a00 	vldr	s14, [r7]
 8003c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c92:	dd02      	ble.n	8003c9a <_ZN9simpleFOC13angleOpenloopEf+0xea>
 8003c94:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8003c98:	e001      	b.n	8003c9e <_ZN9simpleFOC13angleOpenloopEf+0xee>
 8003c9a:	ed9f 8a35 	vldr	s16, [pc, #212]	@ 8003d70 <_ZN9simpleFOC13angleOpenloopEf+0x1c0>
 8003c9e:	4b33      	ldr	r3, [pc, #204]	@ (8003d6c <_ZN9simpleFOC13angleOpenloopEf+0x1bc>)
 8003ca0:	edd3 7a00 	vldr	s15, [r3]
 8003ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca8:	f7fc ff72 	bl	8000b90 <_ZSt3absf>
 8003cac:	eef0 7a40 	vmov.f32	s15, s0
 8003cb0:	ee28 7a27 	vmul.f32	s14, s16, s15
 8003cb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	edc3 7a01 	vstr	s15, [r3, #4]
		shaft_velocity = velocity_limit;
 8003ccc:	4b27      	ldr	r3, [pc, #156]	@ (8003d6c <_ZN9simpleFOC13angleOpenloopEf+0x1bc>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8003cd6:	e007      	b.n	8003ce8 <_ZN9simpleFOC13angleOpenloopEf+0x138>
	}
	else
	{
		shaft_angle = target_angle;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
		shaft_velocity = 0;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	}

	// use voltage limit or current limit
	float Uq = voltage_limit;
 8003ce8:	4b22      	ldr	r3, [pc, #136]	@ (8003d74 <_ZN9simpleFOC13angleOpenloopEf+0x1c4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	613b      	str	r3, [r7, #16]
	if(_isset(phase_resistance))
 8003cee:	4b22      	ldr	r3, [pc, #136]	@ (8003d78 <_ZN9simpleFOC13angleOpenloopEf+0x1c8>)
 8003cf0:	edd3 7a00 	vldr	s15, [r3]
 8003cf4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003d7c <_ZN9simpleFOC13angleOpenloopEf+0x1cc>
 8003cf8:	eef4 7a47 	vcmp.f32	s15, s14
 8003cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d00:	d009      	beq.n	8003d16 <_ZN9simpleFOC13angleOpenloopEf+0x166>
		Uq =  current_limit*phase_resistance;
 8003d02:	4b1f      	ldr	r3, [pc, #124]	@ (8003d80 <_ZN9simpleFOC13angleOpenloopEf+0x1d0>)
 8003d04:	ed93 7a00 	vldr	s14, [r3]
 8003d08:	4b1b      	ldr	r3, [pc, #108]	@ (8003d78 <_ZN9simpleFOC13angleOpenloopEf+0x1c8>)
 8003d0a:	edd3 7a00 	vldr	s15, [r3]
 8003d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d12:	edc7 7a04 	vstr	s15, [r7, #16]

	// set the maximal allowed voltage (voltage_limit) with the necessary angle
	driver.setPhaseVoltage(Uq, 0, _electricalAngle(shaft_angle, pole_pairs));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f503 74f4 	add.w	r4, r3, #488	@ 0x1e8
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d22:	4b18      	ldr	r3, [pc, #96]	@ (8003d84 <_ZN9simpleFOC13angleOpenloopEf+0x1d4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	eeb0 0a67 	vmov.f32	s0, s15
 8003d2c:	f7fe fdd0 	bl	80028d0 <_Z16_electricalAnglefi>
 8003d30:	eef0 7a40 	vmov.f32	s15, s0
 8003d34:	eeb0 1a67 	vmov.f32	s2, s15
 8003d38:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8003d70 <_ZN9simpleFOC13angleOpenloopEf+0x1c0>
 8003d3c:	ed97 0a04 	vldr	s0, [r7, #16]
 8003d40:	4620      	mov	r0, r4
 8003d42:	f7ff f90d 	bl	8002f60 <_ZN11pwm_drivers15setPhaseVoltageEfff>

	open_loop_timestamp = now_us;
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	return Uq;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	ee07 3a90 	vmov	s15, r3
}
 8003d54:	eeb0 0a67 	vmov.f32	s0, s15
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	ecbd 8b02 	vpop	{d8}
 8003d60:	bd90      	pop	{r4, r7, pc}
 8003d62:	bf00      	nop
 8003d64:	f3af 8000 	nop.w
 8003d68:	3a83126f 	.word	0x3a83126f
 8003d6c:	200000b8 	.word	0x200000b8
 8003d70:	00000000 	.word	0x00000000
 8003d74:	200000b0 	.word	0x200000b0
 8003d78:	200000a0 	.word	0x200000a0
 8003d7c:	c640e400 	.word	0xc640e400
 8003d80:	200000b4 	.word	0x200000b4
 8003d84:	200000a8 	.word	0x200000a8
 8003d88:	a0b5ed8d 	.word	0xa0b5ed8d
 8003d8c:	3eb0c6f7 	.word	0x3eb0c6f7

08003d90 <_ZN9simpleFOC6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t simpleFOC::micros(void) 
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8003d94:	4b07      	ldr	r3, [pc, #28]	@ (8003db4 <_ZN9simpleFOC6microsEv+0x24>)
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	4b07      	ldr	r3, [pc, #28]	@ (8003db8 <_ZN9simpleFOC6microsEv+0x28>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4907      	ldr	r1, [pc, #28]	@ (8003dbc <_ZN9simpleFOC6microsEv+0x2c>)
 8003d9e:	fba1 1303 	umull	r1, r3, r1, r3
 8003da2:	0c9b      	lsrs	r3, r3, #18
 8003da4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	e0001000 	.word	0xe0001000
 8003db8:	200000c0 	.word	0x200000c0
 8003dbc:	431bde83 	.word	0x431bde83

08003dc0 <MX_CORDIC_Init>:

extern CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8003dc4:	4b06      	ldr	r3, [pc, #24]	@ (8003de0 <MX_CORDIC_Init+0x20>)
 8003dc6:	4a07      	ldr	r2, [pc, #28]	@ (8003de4 <MX_CORDIC_Init+0x24>)
 8003dc8:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8003dca:	4805      	ldr	r0, [pc, #20]	@ (8003de0 <MX_CORDIC_Init+0x20>)
 8003dcc:	f002 fc3c 	bl	8006648 <HAL_CORDIC_Init>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8003dd6:	f000 fcbb 	bl	8004750 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	200005d8 	.word	0x200005d8
 8003de4:	40020c00 	.word	0x40020c00

08003de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003dec:	f001 f881 	bl	8004ef2 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003df0:	f000 f874 	bl	8003edc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003df4:	f000 fc0a 	bl	800460c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003df8:	f000 fbd6 	bl	80045a8 <_ZL11MX_DMA_Initv>
  MX_SPI1_Init();
 8003dfc:	f000 fa46 	bl	800428c <_ZL12MX_SPI1_Initv>
  MX_ADC1_Init();
 8003e00:	f000 f8c2 	bl	8003f88 <_ZL12MX_ADC1_Initv>
  MX_FDCAN1_Init();
 8003e04:	f000 f9de 	bl	80041c4 <_ZL14MX_FDCAN1_Initv>
  MX_TIM1_Init();
 8003e08:	f000 fa82 	bl	8004310 <_ZL12MX_TIM1_Initv>
  MX_ADC2_Init();
 8003e0c:	f000 f942 	bl	8004094 <_ZL12MX_ADC2_Initv>
  MX_CORDIC_Init();
 8003e10:	f7ff ffd6 	bl	8003dc0 <MX_CORDIC_Init>
  MX_CRC_Init();
 8003e14:	f000 f9ae 	bl	8004174 <_ZL11MX_CRC_Initv>
  MX_FMAC_Init();
 8003e18:	f000 fa20 	bl	800425c <_ZL12MX_FMAC_Initv>
  MX_TIM2_Init();
 8003e1c:	f000 fb68 	bl	80044f0 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  	  //  Delay SETUP
	DWT_Init();
 8003e20:	f000 fc54 	bl	80046cc <_ZL8DWT_Initv>
	//  Timer Interrupt tim2,tim4
  	HAL_TIM_Base_Start_IT(&htim2);
 8003e24:	4824      	ldr	r0, [pc, #144]	@ (8003eb8 <main+0xd0>)
 8003e26:	f005 fac1 	bl	80093ac <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);  // Enable
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	4823      	ldr	r0, [pc, #140]	@ (8003ebc <main+0xd4>)
 8003e30:	f003 fe34 	bl	8007a9c <HAL_GPIO_WritePin>
	//PWM SETUP
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   //pinMode
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	//pinMode
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	//pinMode
	//SPI SETUP
	simpleFOC.initSensors();
 8003e34:	4822      	ldr	r0, [pc, #136]	@ (8003ec0 <main+0xd8>)
 8003e36:	f7ff fbbd 	bl	80035b4 <_ZN9simpleFOC11initSensorsEv>
	//FOC SETUP
  	simpleFOC.initFOC(0.564893246, CW); 				// Do not search!! checked
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8003ec4 <main+0xdc>
 8003e40:	481f      	ldr	r0, [pc, #124]	@ (8003ec0 <main+0xd8>)
 8003e42:	f7ff fdd9 	bl	80039f8 <_ZN9simpleFOC7initFOCEf9Direction>
//	  simpleFOC.move_velocity_openloop(setpoint_cmd); // Test move velocity open loop [/] : Should set phase resistance
//	  simpleFOC.angleOpenloop(0.0f);		  // Test move angle open loop [/] : Should set phase resistance


	  /** Test Closed Loop Control **/
	  simpleFOC.move_torque(setpoint_cmd);			// 14 us
 8003e46:	4b20      	ldr	r3, [pc, #128]	@ (8003ec8 <main+0xe0>)
 8003e48:	edd3 7a00 	vldr	s15, [r3]
 8003e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e50:	481b      	ldr	r0, [pc, #108]	@ (8003ec0 <main+0xd8>)
 8003e52:	f7ff fe9b 	bl	8003b8c <_ZN9simpleFOC11move_torqueEf>
//	  simpleFOC.move_velocity(setpoint_cmd);		// 21 us
//	  simpleFOC.move_angle(setpoint_cmd);			// 26 us

	  /** Always run loopFOC (except open loop control)**/
	  simpleFOC.loopFOC();							// 115 us
 8003e56:	481a      	ldr	r0, [pc, #104]	@ (8003ec0 <main+0xd8>)
 8003e58:	f7ff fe06 	bl	8003a68 <_ZN9simpleFOC7loopFOCEv>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  t5 = micros() - t4;
 8003e5c:	f000 fc4e 	bl	80046fc <_ZL6microsv>
 8003e60:	4602      	mov	r2, r0
 8003e62:	4b1a      	ldr	r3, [pc, #104]	@ (8003ecc <main+0xe4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	4a19      	ldr	r2, [pc, #100]	@ (8003ed0 <main+0xe8>)
 8003e6a:	6013      	str	r3, [r2, #0]
	  t4 = micros();
 8003e6c:	f000 fc46 	bl	80046fc <_ZL6microsv>
 8003e70:	4603      	mov	r3, r0
 8003e72:	4a16      	ldr	r2, [pc, #88]	@ (8003ecc <main+0xe4>)
 8003e74:	6013      	str	r3, [r2, #0]
	  loop_freq = 1.0 / (t5 * 1e-6);
 8003e76:	4b16      	ldr	r3, [pc, #88]	@ (8003ed0 <main+0xe8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fc fb0e 	bl	800049c <__aeabi_ui2d>
 8003e80:	a30b      	add	r3, pc, #44	@ (adr r3, 8003eb0 <main+0xc8>)
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f7fc fb83 	bl	8000590 <__aeabi_dmul>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	f04f 0000 	mov.w	r0, #0
 8003e92:	4910      	ldr	r1, [pc, #64]	@ (8003ed4 <main+0xec>)
 8003e94:	f7fc fca6 	bl	80007e4 <__aeabi_ddiv>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	f7fc fe26 	bl	8000af0 <__aeabi_d2f>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ed8 <main+0xf0>)
 8003ea8:	6013      	str	r3, [r2, #0]
	  simpleFOC.move_torque(setpoint_cmd);			// 14 us
 8003eaa:	bf00      	nop
 8003eac:	e7cb      	b.n	8003e46 <main+0x5e>
 8003eae:	bf00      	nop
 8003eb0:	a0b5ed8d 	.word	0xa0b5ed8d
 8003eb4:	3eb0c6f7 	.word	0x3eb0c6f7
 8003eb8:	20000770 	.word	0x20000770
 8003ebc:	48000400 	.word	0x48000400
 8003ec0:	20000210 	.word	0x20000210
 8003ec4:	3f109cd8 	.word	0x3f109cd8
 8003ec8:	200000bc 	.word	0x200000bc
 8003ecc:	200007bc 	.word	0x200007bc
 8003ed0:	200007c0 	.word	0x200007c0
 8003ed4:	3ff00000 	.word	0x3ff00000
 8003ed8:	200007c4 	.word	0x200007c4

08003edc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b094      	sub	sp, #80	@ 0x50
 8003ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ee2:	f107 0318 	add.w	r3, r7, #24
 8003ee6:	2238      	movs	r2, #56	@ 0x38
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f007 ff60 	bl	800bdb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ef0:	1d3b      	adds	r3, r7, #4
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	605a      	str	r2, [r3, #4]
 8003ef8:	609a      	str	r2, [r3, #8]
 8003efa:	60da      	str	r2, [r3, #12]
 8003efc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003efe:	2000      	movs	r0, #0
 8003f00:	f003 fde4 	bl	8007acc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f04:	2302      	movs	r3, #2
 8003f06:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f0e:	2340      	movs	r3, #64	@ 0x40
 8003f10:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f12:	2302      	movs	r3, #2
 8003f14:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f16:	2302      	movs	r3, #2
 8003f18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003f1a:	2304      	movs	r3, #4
 8003f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003f1e:	2355      	movs	r3, #85	@ 0x55
 8003f20:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f22:	2302      	movs	r3, #2
 8003f24:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003f26:	2302      	movs	r3, #2
 8003f28:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f2e:	f107 0318 	add.w	r3, r7, #24
 8003f32:	4618      	mov	r0, r3
 8003f34:	f003 fe7e 	bl	8007c34 <HAL_RCC_OscConfig>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	bf14      	ite	ne
 8003f3e:	2301      	movne	r3, #1
 8003f40:	2300      	moveq	r3, #0
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8003f48:	f000 fc02 	bl	8004750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f4c:	230f      	movs	r3, #15
 8003f4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f50:	2303      	movs	r3, #3
 8003f52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003f60:	1d3b      	adds	r3, r7, #4
 8003f62:	2104      	movs	r1, #4
 8003f64:	4618      	mov	r0, r3
 8003f66:	f004 f977 	bl	8008258 <HAL_RCC_ClockConfig>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	bf14      	ite	ne
 8003f70:	2301      	movne	r3, #1
 8003f72:	2300      	moveq	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8003f7a:	f000 fbe9 	bl	8004750 <Error_Handler>
  }
}
 8003f7e:	bf00      	nop
 8003f80:	3750      	adds	r7, #80	@ 0x50
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08c      	sub	sp, #48	@ 0x30
 8003f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	605a      	str	r2, [r3, #4]
 8003f98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003f9a:	1d3b      	adds	r3, r7, #4
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f007 ff05 	bl	800bdb0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003fa6:	4b39      	ldr	r3, [pc, #228]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 8003fa8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003fac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003fae:	4b37      	ldr	r3, [pc, #220]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 8003fb0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003fb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003fb6:	4b35      	ldr	r3, [pc, #212]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003fbc:	4b33      	ldr	r3, [pc, #204]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003fc2:	4b32      	ldr	r3, [pc, #200]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003fc8:	4b30      	ldr	r3, [pc, #192]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003fce:	4b2f      	ldr	r3, [pc, #188]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003fda:	4b2c      	ldr	r3, [pc, #176]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8003fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003fe6:	4b29      	ldr	r3, [pc, #164]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003fee:	4b27      	ldr	r3, [pc, #156]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ff4:	4b25      	ldr	r3, [pc, #148]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003ffa:	4b24      	ldr	r3, [pc, #144]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004002:	4b22      	ldr	r3, [pc, #136]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 8004004:	2200      	movs	r2, #0
 8004006:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004008:	4b20      	ldr	r3, [pc, #128]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004010:	481e      	ldr	r0, [pc, #120]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 8004012:	f001 fa1f 	bl	8005454 <HAL_ADC_Init>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf14      	ite	ne
 800401c:	2301      	movne	r3, #1
 800401e:	2300      	moveq	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8004026:	f000 fb93 	bl	8004750 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800402a:	2300      	movs	r3, #0
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800402e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004032:	4619      	mov	r1, r3
 8004034:	4815      	ldr	r0, [pc, #84]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 8004036:	f002 fa1f 	bl	8006478 <HAL_ADCEx_MultiModeConfigChannel>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf14      	ite	ne
 8004040:	2301      	movne	r3, #1
 8004042:	2300      	moveq	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 800404a:	f000 fb81 	bl	8004750 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800404e:	4b10      	ldr	r3, [pc, #64]	@ (8004090 <_ZL12MX_ADC1_Initv+0x108>)
 8004050:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004052:	2306      	movs	r3, #6
 8004054:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004056:	2307      	movs	r3, #7
 8004058:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800405a:	237f      	movs	r3, #127	@ 0x7f
 800405c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800405e:	2304      	movs	r3, #4
 8004060:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004066:	1d3b      	adds	r3, r7, #4
 8004068:	4619      	mov	r1, r3
 800406a:	4808      	ldr	r0, [pc, #32]	@ (800408c <_ZL12MX_ADC1_Initv+0x104>)
 800406c:	f001 fc88 	bl	8005980 <HAL_ADC_ConfigChannel>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	bf14      	ite	ne
 8004076:	2301      	movne	r3, #1
 8004078:	2300      	moveq	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 8004080:	f000 fb66 	bl	8004750 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004084:	bf00      	nop
 8004086:	3730      	adds	r7, #48	@ 0x30
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20000440 	.word	0x20000440
 8004090:	04300002 	.word	0x04300002

08004094 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800409a:	463b      	mov	r3, r7
 800409c:	2220      	movs	r2, #32
 800409e:	2100      	movs	r1, #0
 80040a0:	4618      	mov	r0, r3
 80040a2:	f007 fe85 	bl	800bdb0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80040a6:	4b30      	ldr	r3, [pc, #192]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 80040a8:	4a30      	ldr	r2, [pc, #192]	@ (800416c <_ZL12MX_ADC2_Initv+0xd8>)
 80040aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80040ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 80040ae:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80040b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80040b4:	4b2c      	ldr	r3, [pc, #176]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 80040bc:	2200      	movs	r2, #0
 80040be:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80040c0:	4b29      	ldr	r3, [pc, #164]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80040c6:	4b28      	ldr	r3, [pc, #160]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040cc:	4b26      	ldr	r3, [pc, #152]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 80040ce:	2204      	movs	r2, #4
 80040d0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80040d2:	4b25      	ldr	r3, [pc, #148]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80040d8:	4b23      	ldr	r3, [pc, #140]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 80040da:	2201      	movs	r2, #1
 80040dc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80040de:	4b22      	ldr	r3, [pc, #136]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80040e4:	4b20      	ldr	r3, [pc, #128]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80040ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80040f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80040f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004100:	4b19      	ldr	r3, [pc, #100]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 8004102:	2200      	movs	r2, #0
 8004104:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8004106:	4b18      	ldr	r3, [pc, #96]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800410e:	4816      	ldr	r0, [pc, #88]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 8004110:	f001 f9a0 	bl	8005454 <HAL_ADC_Init>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	bf14      	ite	ne
 800411a:	2301      	movne	r3, #1
 800411c:	2300      	moveq	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 8004124:	f000 fb14 	bl	8004750 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004128:	4b11      	ldr	r3, [pc, #68]	@ (8004170 <_ZL12MX_ADC2_Initv+0xdc>)
 800412a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800412c:	2306      	movs	r3, #6
 800412e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004130:	2307      	movs	r3, #7
 8004132:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004134:	237f      	movs	r3, #127	@ 0x7f
 8004136:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004138:	2304      	movs	r3, #4
 800413a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004140:	463b      	mov	r3, r7
 8004142:	4619      	mov	r1, r3
 8004144:	4808      	ldr	r0, [pc, #32]	@ (8004168 <_ZL12MX_ADC2_Initv+0xd4>)
 8004146:	f001 fc1b 	bl	8005980 <HAL_ADC_ConfigChannel>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	bf14      	ite	ne
 8004150:	2301      	movne	r3, #1
 8004152:	2300      	moveq	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 800415a:	f000 faf9 	bl	8004750 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800415e:	bf00      	nop
 8004160:	3720      	adds	r7, #32
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	200004ac 	.word	0x200004ac
 800416c:	50000100 	.word	0x50000100
 8004170:	08600004 	.word	0x08600004

08004174 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004178:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <_ZL11MX_CRC_Initv+0x48>)
 800417a:	4a11      	ldr	r2, [pc, #68]	@ (80041c0 <_ZL11MX_CRC_Initv+0x4c>)
 800417c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800417e:	4b0f      	ldr	r3, [pc, #60]	@ (80041bc <_ZL11MX_CRC_Initv+0x48>)
 8004180:	2200      	movs	r2, #0
 8004182:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8004184:	4b0d      	ldr	r3, [pc, #52]	@ (80041bc <_ZL11MX_CRC_Initv+0x48>)
 8004186:	2200      	movs	r2, #0
 8004188:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800418a:	4b0c      	ldr	r3, [pc, #48]	@ (80041bc <_ZL11MX_CRC_Initv+0x48>)
 800418c:	2200      	movs	r2, #0
 800418e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004190:	4b0a      	ldr	r3, [pc, #40]	@ (80041bc <_ZL11MX_CRC_Initv+0x48>)
 8004192:	2200      	movs	r2, #0
 8004194:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004196:	4b09      	ldr	r3, [pc, #36]	@ (80041bc <_ZL11MX_CRC_Initv+0x48>)
 8004198:	2201      	movs	r2, #1
 800419a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800419c:	4807      	ldr	r0, [pc, #28]	@ (80041bc <_ZL11MX_CRC_Initv+0x48>)
 800419e:	f002 fb95 	bl	80068cc <HAL_CRC_Init>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf14      	ite	ne
 80041a8:	2301      	movne	r3, #1
 80041aa:	2300      	moveq	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 80041b2:	f000 facd 	bl	8004750 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000600 	.word	0x20000600
 80041c0:	40023000 	.word	0x40023000

080041c4 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80041c8:	4b22      	ldr	r3, [pc, #136]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 80041ca:	4a23      	ldr	r2, [pc, #140]	@ (8004258 <_ZL14MX_FDCAN1_Initv+0x94>)
 80041cc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80041ce:	4b21      	ldr	r3, [pc, #132]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80041d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80041da:	4b1e      	ldr	r3, [pc, #120]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 80041dc:	2200      	movs	r2, #0
 80041de:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80041e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80041e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80041ec:	4b19      	ldr	r3, [pc, #100]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = NomPS;
 80041f2:	4b18      	ldr	r3, [pc, #96]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 80041f4:	2202      	movs	r2, #2
 80041f6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 80041f8:	4b16      	ldr	r3, [pc, #88]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 80041fa:	220b      	movs	r2, #11
 80041fc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 73;
 80041fe:	4b15      	ldr	r3, [pc, #84]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 8004200:	2249      	movs	r2, #73	@ 0x49
 8004202:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 8004204:	4b13      	ldr	r3, [pc, #76]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 8004206:	220b      	movs	r2, #11
 8004208:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = DataPS;
 800420a:	4b12      	ldr	r3, [pc, #72]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 800420c:	2205      	movs	r2, #5
 800420e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 15;
 8004210:	4b10      	ldr	r3, [pc, #64]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 8004212:	220f      	movs	r2, #15
 8004214:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 18;
 8004216:	4b0f      	ldr	r3, [pc, #60]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 8004218:	2212      	movs	r2, #18
 800421a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 15;
 800421c:	4b0d      	ldr	r3, [pc, #52]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 800421e:	220f      	movs	r2, #15
 8004220:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 10;
 8004222:	4b0c      	ldr	r3, [pc, #48]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 8004224:	220a      	movs	r2, #10
 8004226:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8004228:	4b0a      	ldr	r3, [pc, #40]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 800422a:	2200      	movs	r2, #0
 800422c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800422e:	4b09      	ldr	r3, [pc, #36]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 8004230:	2200      	movs	r2, #0
 8004232:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8004234:	4807      	ldr	r0, [pc, #28]	@ (8004254 <_ZL14MX_FDCAN1_Initv+0x90>)
 8004236:	f002 fead 	bl	8006f94 <HAL_FDCAN_Init>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	bf14      	ite	ne
 8004240:	2301      	movne	r3, #1
 8004242:	2300      	moveq	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 800424a:	f000 fa81 	bl	8004750 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000624 	.word	0x20000624
 8004258:	40006400 	.word	0x40006400

0800425c <_ZL12MX_FMAC_Initv>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8004260:	4b08      	ldr	r3, [pc, #32]	@ (8004284 <_ZL12MX_FMAC_Initv+0x28>)
 8004262:	4a09      	ldr	r2, [pc, #36]	@ (8004288 <_ZL12MX_FMAC_Initv+0x2c>)
 8004264:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8004266:	4807      	ldr	r0, [pc, #28]	@ (8004284 <_ZL12MX_FMAC_Initv+0x28>)
 8004268:	f003 f9ea 	bl	8007640 <HAL_FMAC_Init>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf14      	ite	ne
 8004272:	2301      	movne	r3, #1
 8004274:	2300      	moveq	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <_ZL12MX_FMAC_Initv+0x24>
  {
    Error_Handler();
 800427c:	f000 fa68 	bl	8004750 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8004280:	bf00      	nop
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000688 	.word	0x20000688
 8004288:	40021400 	.word	0x40021400

0800428c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004290:	4b1d      	ldr	r3, [pc, #116]	@ (8004308 <_ZL12MX_SPI1_Initv+0x7c>)
 8004292:	4a1e      	ldr	r2, [pc, #120]	@ (800430c <_ZL12MX_SPI1_Initv+0x80>)
 8004294:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004296:	4b1c      	ldr	r3, [pc, #112]	@ (8004308 <_ZL12MX_SPI1_Initv+0x7c>)
 8004298:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800429c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800429e:	4b1a      	ldr	r3, [pc, #104]	@ (8004308 <_ZL12MX_SPI1_Initv+0x7c>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80042a4:	4b18      	ldr	r3, [pc, #96]	@ (8004308 <_ZL12MX_SPI1_Initv+0x7c>)
 80042a6:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80042aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042ac:	4b16      	ldr	r3, [pc, #88]	@ (8004308 <_ZL12MX_SPI1_Initv+0x7c>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80042b2:	4b15      	ldr	r3, [pc, #84]	@ (8004308 <_ZL12MX_SPI1_Initv+0x7c>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80042b8:	4b13      	ldr	r3, [pc, #76]	@ (8004308 <_ZL12MX_SPI1_Initv+0x7c>)
 80042ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80042c0:	4b11      	ldr	r3, [pc, #68]	@ (8004308 <_ZL12MX_SPI1_Initv+0x7c>)
 80042c2:	2218      	movs	r2, #24
 80042c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042c6:	4b10      	ldr	r3, [pc, #64]	@ (8004308 <_ZL12MX_SPI1_Initv+0x7c>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80042cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004308 <_ZL12MX_SPI1_Initv+0x7c>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004308 <_ZL12MX_SPI1_Initv+0x7c>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80042d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <_ZL12MX_SPI1_Initv+0x7c>)
 80042da:	2207      	movs	r2, #7
 80042dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80042de:	4b0a      	ldr	r3, [pc, #40]	@ (8004308 <_ZL12MX_SPI1_Initv+0x7c>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80042e4:	4b08      	ldr	r3, [pc, #32]	@ (8004308 <_ZL12MX_SPI1_Initv+0x7c>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80042ea:	4807      	ldr	r0, [pc, #28]	@ (8004308 <_ZL12MX_SPI1_Initv+0x7c>)
 80042ec:	f004 fbd4 	bl	8008a98 <HAL_SPI_Init>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	bf14      	ite	ne
 80042f6:	2301      	movne	r3, #1
 80042f8:	2300      	moveq	r3, #0
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8004300:	f000 fa26 	bl	8004750 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004304:	bf00      	nop
 8004306:	bd80      	pop	{r7, pc}
 8004308:	200006c0 	.word	0x200006c0
 800430c:	40013000 	.word	0x40013000

08004310 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b09c      	sub	sp, #112	@ 0x70
 8004314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004316:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	605a      	str	r2, [r3, #4]
 8004320:	609a      	str	r2, [r3, #8]
 8004322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004324:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004330:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	609a      	str	r2, [r3, #8]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	611a      	str	r2, [r3, #16]
 8004340:	615a      	str	r2, [r3, #20]
 8004342:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004344:	1d3b      	adds	r3, r7, #4
 8004346:	2234      	movs	r2, #52	@ 0x34
 8004348:	2100      	movs	r1, #0
 800434a:	4618      	mov	r0, r3
 800434c:	f007 fd30 	bl	800bdb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004350:	4b65      	ldr	r3, [pc, #404]	@ (80044e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 8004352:	4a66      	ldr	r2, [pc, #408]	@ (80044ec <_ZL12MX_TIM1_Initv+0x1dc>)
 8004354:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004356:	4b64      	ldr	r3, [pc, #400]	@ (80044e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 8004358:	2200      	movs	r2, #0
 800435a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800435c:	4b62      	ldr	r3, [pc, #392]	@ (80044e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 800435e:	2220      	movs	r2, #32
 8004360:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 8004362:	4b61      	ldr	r3, [pc, #388]	@ (80044e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 8004364:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8004368:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800436a:	4b5f      	ldr	r3, [pc, #380]	@ (80044e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 800436c:	2200      	movs	r2, #0
 800436e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8004370:	4b5d      	ldr	r3, [pc, #372]	@ (80044e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 8004372:	2201      	movs	r2, #1
 8004374:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004376:	4b5c      	ldr	r3, [pc, #368]	@ (80044e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 8004378:	2280      	movs	r2, #128	@ 0x80
 800437a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800437c:	485a      	ldr	r0, [pc, #360]	@ (80044e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 800437e:	f004 ffbd 	bl	80092fc <HAL_TIM_Base_Init>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	bf14      	ite	ne
 8004388:	2301      	movne	r3, #1
 800438a:	2300      	moveq	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 8004392:	f000 f9dd 	bl	8004750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800439a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800439c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80043a0:	4619      	mov	r1, r3
 80043a2:	4851      	ldr	r0, [pc, #324]	@ (80044e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 80043a4:	f005 fb36 	bl	8009a14 <HAL_TIM_ConfigClockSource>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bf14      	ite	ne
 80043ae:	2301      	movne	r3, #1
 80043b0:	2300      	moveq	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 80043b8:	f000 f9ca 	bl	8004750 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80043bc:	484a      	ldr	r0, [pc, #296]	@ (80044e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 80043be:	f005 f865 	bl	800948c <HAL_TIM_PWM_Init>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	bf14      	ite	ne
 80043c8:	2301      	movne	r3, #1
 80043ca:	2300      	moveq	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 80043d2:	f000 f9bd 	bl	8004750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043d6:	2300      	movs	r3, #0
 80043d8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80043da:	2300      	movs	r3, #0
 80043dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043de:	2300      	movs	r3, #0
 80043e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80043e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80043e6:	4619      	mov	r1, r3
 80043e8:	483f      	ldr	r0, [pc, #252]	@ (80044e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 80043ea:	f006 f8af 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf14      	ite	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	2300      	moveq	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 80043fe:	f000 f9a7 	bl	8004750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004402:	2360      	movs	r3, #96	@ 0x60
 8004404:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800440a:	2302      	movs	r3, #2
 800440c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800440e:	2300      	movs	r3, #0
 8004410:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004412:	2304      	movs	r3, #4
 8004414:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004416:	2300      	movs	r3, #0
 8004418:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800441a:	2300      	movs	r3, #0
 800441c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800441e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004422:	2200      	movs	r2, #0
 8004424:	4619      	mov	r1, r3
 8004426:	4830      	ldr	r0, [pc, #192]	@ (80044e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 8004428:	f005 f9e0 	bl	80097ec <HAL_TIM_PWM_ConfigChannel>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	bf14      	ite	ne
 8004432:	2301      	movne	r3, #1
 8004434:	2300      	moveq	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <_ZL12MX_TIM1_Initv+0x130>
  {
    Error_Handler();
 800443c:	f000 f988 	bl	8004750 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004440:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004444:	2204      	movs	r2, #4
 8004446:	4619      	mov	r1, r3
 8004448:	4827      	ldr	r0, [pc, #156]	@ (80044e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 800444a:	f005 f9cf 	bl	80097ec <HAL_TIM_PWM_ConfigChannel>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	bf14      	ite	ne
 8004454:	2301      	movne	r3, #1
 8004456:	2300      	moveq	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 800445e:	f000 f977 	bl	8004750 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004462:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004466:	2208      	movs	r2, #8
 8004468:	4619      	mov	r1, r3
 800446a:	481f      	ldr	r0, [pc, #124]	@ (80044e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 800446c:	f005 f9be 	bl	80097ec <HAL_TIM_PWM_ConfigChannel>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	bf14      	ite	ne
 8004476:	2301      	movne	r3, #1
 8004478:	2300      	moveq	r3, #0
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <_ZL12MX_TIM1_Initv+0x174>
  {
    Error_Handler();
 8004480:	f000 f966 	bl	8004750 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004484:	2300      	movs	r3, #0
 8004486:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004488:	2300      	movs	r3, #0
 800448a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004498:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800449c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80044a2:	2300      	movs	r3, #0
 80044a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80044a6:	2300      	movs	r3, #0
 80044a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80044aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80044b4:	2300      	movs	r3, #0
 80044b6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80044b8:	2300      	movs	r3, #0
 80044ba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80044bc:	1d3b      	adds	r3, r7, #4
 80044be:	4619      	mov	r1, r3
 80044c0:	4809      	ldr	r0, [pc, #36]	@ (80044e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 80044c2:	f006 f8d1 	bl	800a668 <HAL_TIMEx_ConfigBreakDeadTime>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	bf14      	ite	ne
 80044cc:	2301      	movne	r3, #1
 80044ce:	2300      	moveq	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <_ZL12MX_TIM1_Initv+0x1ca>
  {
    Error_Handler();
 80044d6:	f000 f93b 	bl	8004750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80044da:	4803      	ldr	r0, [pc, #12]	@ (80044e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 80044dc:	f000 fbda 	bl	8004c94 <HAL_TIM_MspPostInit>

}
 80044e0:	bf00      	nop
 80044e2:	3770      	adds	r7, #112	@ 0x70
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20000724 	.word	0x20000724
 80044ec:	40012c00 	.word	0x40012c00

080044f0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044f6:	f107 0310 	add.w	r3, r7, #16
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	605a      	str	r2, [r3, #4]
 8004500:	609a      	str	r2, [r3, #8]
 8004502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004504:	1d3b      	adds	r3, r7, #4
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	605a      	str	r2, [r3, #4]
 800450c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800450e:	4b25      	ldr	r3, [pc, #148]	@ (80045a4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004510:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004514:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1700-1;
 8004516:	4b23      	ldr	r3, [pc, #140]	@ (80045a4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004518:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800451c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800451e:	4b21      	ldr	r3, [pc, #132]	@ (80045a4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004520:	2200      	movs	r2, #0
 8004522:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8004524:	4b1f      	ldr	r3, [pc, #124]	@ (80045a4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004526:	2263      	movs	r2, #99	@ 0x63
 8004528:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800452a:	4b1e      	ldr	r3, [pc, #120]	@ (80045a4 <_ZL12MX_TIM2_Initv+0xb4>)
 800452c:	2200      	movs	r2, #0
 800452e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004530:	4b1c      	ldr	r3, [pc, #112]	@ (80045a4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004532:	2200      	movs	r2, #0
 8004534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004536:	481b      	ldr	r0, [pc, #108]	@ (80045a4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004538:	f004 fee0 	bl	80092fc <HAL_TIM_Base_Init>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	bf14      	ite	ne
 8004542:	2301      	movne	r3, #1
 8004544:	2300      	moveq	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 800454c:	f000 f900 	bl	8004750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004554:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004556:	f107 0310 	add.w	r3, r7, #16
 800455a:	4619      	mov	r1, r3
 800455c:	4811      	ldr	r0, [pc, #68]	@ (80045a4 <_ZL12MX_TIM2_Initv+0xb4>)
 800455e:	f005 fa59 	bl	8009a14 <HAL_TIM_ConfigClockSource>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	bf14      	ite	ne
 8004568:	2301      	movne	r3, #1
 800456a:	2300      	moveq	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8004572:	f000 f8ed 	bl	8004750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004576:	2300      	movs	r3, #0
 8004578:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800457e:	1d3b      	adds	r3, r7, #4
 8004580:	4619      	mov	r1, r3
 8004582:	4808      	ldr	r0, [pc, #32]	@ (80045a4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004584:	f005 ffe2 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	bf14      	ite	ne
 800458e:	2301      	movne	r3, #1
 8004590:	2300      	moveq	r3, #0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8004598:	f000 f8da 	bl	8004750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800459c:	bf00      	nop
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	20000770 	.word	0x20000770

080045a8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80045ae:	4b16      	ldr	r3, [pc, #88]	@ (8004608 <_ZL11MX_DMA_Initv+0x60>)
 80045b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045b2:	4a15      	ldr	r2, [pc, #84]	@ (8004608 <_ZL11MX_DMA_Initv+0x60>)
 80045b4:	f043 0304 	orr.w	r3, r3, #4
 80045b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80045ba:	4b13      	ldr	r3, [pc, #76]	@ (8004608 <_ZL11MX_DMA_Initv+0x60>)
 80045bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80045c6:	4b10      	ldr	r3, [pc, #64]	@ (8004608 <_ZL11MX_DMA_Initv+0x60>)
 80045c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004608 <_ZL11MX_DMA_Initv+0x60>)
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80045d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004608 <_ZL11MX_DMA_Initv+0x60>)
 80045d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80045de:	2200      	movs	r2, #0
 80045e0:	2100      	movs	r1, #0
 80045e2:	200b      	movs	r0, #11
 80045e4:	f002 f93d 	bl	8006862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80045e8:	200b      	movs	r0, #11
 80045ea:	f002 f954 	bl	8006896 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80045ee:	2200      	movs	r2, #0
 80045f0:	2100      	movs	r1, #0
 80045f2:	200c      	movs	r0, #12
 80045f4:	f002 f935 	bl	8006862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80045f8:	200c      	movs	r0, #12
 80045fa:	f002 f94c 	bl	8006896 <HAL_NVIC_EnableIRQ>

}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40021000 	.word	0x40021000

0800460c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004612:	f107 030c 	add.w	r3, r7, #12
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	609a      	str	r2, [r3, #8]
 800461e:	60da      	str	r2, [r3, #12]
 8004620:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004622:	4b28      	ldr	r3, [pc, #160]	@ (80046c4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004626:	4a27      	ldr	r2, [pc, #156]	@ (80046c4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004628:	f043 0320 	orr.w	r3, r3, #32
 800462c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800462e:	4b25      	ldr	r3, [pc, #148]	@ (80046c4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800463a:	4b22      	ldr	r3, [pc, #136]	@ (80046c4 <_ZL12MX_GPIO_Initv+0xb8>)
 800463c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800463e:	4a21      	ldr	r2, [pc, #132]	@ (80046c4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004646:	4b1f      	ldr	r3, [pc, #124]	@ (80046c4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	607b      	str	r3, [r7, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004652:	4b1c      	ldr	r3, [pc, #112]	@ (80046c4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004656:	4a1b      	ldr	r2, [pc, #108]	@ (80046c4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004658:	f043 0302 	orr.w	r3, r3, #2
 800465c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800465e:	4b19      	ldr	r3, [pc, #100]	@ (80046c4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 800466a:	2200      	movs	r2, #0
 800466c:	2110      	movs	r1, #16
 800466e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004672:	f003 fa13 	bl	8007a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8004676:	2200      	movs	r2, #0
 8004678:	2101      	movs	r1, #1
 800467a:	4813      	ldr	r0, [pc, #76]	@ (80046c8 <_ZL12MX_GPIO_Initv+0xbc>)
 800467c:	f003 fa0e 	bl	8007a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8004680:	2310      	movs	r3, #16
 8004682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004684:	2301      	movs	r3, #1
 8004686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800468c:	2300      	movs	r3, #0
 800468e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8004690:	f107 030c 	add.w	r3, r7, #12
 8004694:	4619      	mov	r1, r3
 8004696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800469a:	f003 f87d 	bl	8007798 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800469e:	2301      	movs	r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046a2:	2301      	movs	r3, #1
 80046a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80046ae:	f107 030c 	add.w	r3, r7, #12
 80046b2:	4619      	mov	r1, r3
 80046b4:	4804      	ldr	r0, [pc, #16]	@ (80046c8 <_ZL12MX_GPIO_Initv+0xbc>)
 80046b6:	f003 f86f 	bl	8007798 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80046ba:	bf00      	nop
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000
 80046c8:	48000400 	.word	0x48000400

080046cc <_ZL8DWT_Initv>:

/* USER CODE BEGIN 4 */
//Delay function
__STATIC_INLINE void DWT_Init(void) {
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80046d0:	4b08      	ldr	r3, [pc, #32]	@ (80046f4 <_ZL8DWT_Initv+0x28>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4a07      	ldr	r2, [pc, #28]	@ (80046f4 <_ZL8DWT_Initv+0x28>)
 80046d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046da:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Data watchpoint trigger(DWT)
 80046dc:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <_ZL8DWT_Initv+0x2c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a05      	ldr	r2, [pc, #20]	@ (80046f8 <_ZL8DWT_Initv+0x2c>)
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	6013      	str	r3, [r2, #0]
}
 80046e8:	bf00      	nop
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	e000edf0 	.word	0xe000edf0
 80046f8:	e0001000 	.word	0xe0001000

080046fc <_ZL6microsv>:
__STATIC_INLINE uint32_t micros(void) {
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
	return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8004700:	4b07      	ldr	r3, [pc, #28]	@ (8004720 <_ZL6microsv+0x24>)
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	4b07      	ldr	r3, [pc, #28]	@ (8004724 <_ZL6microsv+0x28>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4907      	ldr	r1, [pc, #28]	@ (8004728 <_ZL6microsv+0x2c>)
 800470a:	fba1 1303 	umull	r1, r3, r1, r3
 800470e:	0c9b      	lsrs	r3, r3, #18
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004714:	4618      	mov	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	e0001000 	.word	0xe0001000
 8004724:	200000c0 	.word	0x200000c0
 8004728:	431bde83 	.word	0x431bde83

0800472c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2) // 1000 Hz timer interrupt event
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800473c:	d102      	bne.n	8004744 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	  simpleFOC.Encoder.updateVelocity();
 800473e:	4803      	ldr	r0, [pc, #12]	@ (800474c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004740:	f7fc fca8 	bl	8001094 <_ZN17AS5048A_interface14updateVelocityEv>
  }
}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000218 	.word	0x20000218

08004750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004754:	b672      	cpsid	i
}
 8004756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004758:	bf00      	nop
 800475a:	e7fd      	b.n	8004758 <Error_Handler+0x8>

0800475c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d107      	bne.n	800477c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004772:	4293      	cmp	r3, r2
 8004774:	d102      	bne.n	800477c <_Z41__static_initialization_and_destruction_0ii+0x20>
simpleFOC simpleFOC;
 8004776:	4809      	ldr	r0, [pc, #36]	@ (800479c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004778:	f7fe fec4 	bl	8003504 <_ZN9simpleFOCC1Ev>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d107      	bne.n	8004792 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004788:	4293      	cmp	r3, r2
 800478a:	d102      	bne.n	8004792 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800478c:	4803      	ldr	r0, [pc, #12]	@ (800479c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800478e:	f7fe fee1 	bl	8003554 <_ZN9simpleFOCD1Ev>
}
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	20000210 	.word	0x20000210

080047a0 <_GLOBAL__sub_I_simpleFOC>:
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80047a8:	2001      	movs	r0, #1
 80047aa:	f7ff ffd7 	bl	800475c <_Z41__static_initialization_and_destruction_0ii>
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <_GLOBAL__sub_D_simpleFOC>:
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80047b8:	2000      	movs	r0, #0
 80047ba:	f7ff ffcf 	bl	800475c <_Z41__static_initialization_and_destruction_0ii>
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004804 <HAL_MspInit+0x44>)
 80047c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004804 <HAL_MspInit+0x44>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80047d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004804 <HAL_MspInit+0x44>)
 80047d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047de:	4b09      	ldr	r3, [pc, #36]	@ (8004804 <HAL_MspInit+0x44>)
 80047e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e2:	4a08      	ldr	r2, [pc, #32]	@ (8004804 <HAL_MspInit+0x44>)
 80047e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80047ea:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <HAL_MspInit+0x44>)
 80047ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80047f6:	f003 fa0d 	bl	8007c14 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000

08004808 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b0a0      	sub	sp, #128	@ 0x80
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004810:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	60da      	str	r2, [r3, #12]
 800481e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004820:	f107 031c 	add.w	r3, r7, #28
 8004824:	2250      	movs	r2, #80	@ 0x50
 8004826:	2100      	movs	r1, #0
 8004828:	4618      	mov	r0, r3
 800482a:	f007 fac1 	bl	800bdb0 <memset>
  if(hadc->Instance==ADC1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004836:	d169      	bne.n	800490c <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004838:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800483c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800483e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004842:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004844:	f107 031c 	add.w	r3, r7, #28
 8004848:	4618      	mov	r0, r3
 800484a:	f003 fee9 	bl	8008620 <HAL_RCCEx_PeriphCLKConfig>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004854:	f7ff ff7c 	bl	8004750 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004858:	4b65      	ldr	r3, [pc, #404]	@ (80049f0 <HAL_ADC_MspInit+0x1e8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3301      	adds	r3, #1
 800485e:	4a64      	ldr	r2, [pc, #400]	@ (80049f0 <HAL_ADC_MspInit+0x1e8>)
 8004860:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004862:	4b63      	ldr	r3, [pc, #396]	@ (80049f0 <HAL_ADC_MspInit+0x1e8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d10b      	bne.n	8004882 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800486a:	4b62      	ldr	r3, [pc, #392]	@ (80049f4 <HAL_ADC_MspInit+0x1ec>)
 800486c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800486e:	4a61      	ldr	r2, [pc, #388]	@ (80049f4 <HAL_ADC_MspInit+0x1ec>)
 8004870:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004876:	4b5f      	ldr	r3, [pc, #380]	@ (80049f4 <HAL_ADC_MspInit+0x1ec>)
 8004878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800487a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800487e:	61bb      	str	r3, [r7, #24]
 8004880:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004882:	4b5c      	ldr	r3, [pc, #368]	@ (80049f4 <HAL_ADC_MspInit+0x1ec>)
 8004884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004886:	4a5b      	ldr	r2, [pc, #364]	@ (80049f4 <HAL_ADC_MspInit+0x1ec>)
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800488e:	4b59      	ldr	r3, [pc, #356]	@ (80049f4 <HAL_ADC_MspInit+0x1ec>)
 8004890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CSOA_Pin;
 800489a:	2301      	movs	r3, #1
 800489c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800489e:	2303      	movs	r3, #3
 80048a0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOA_GPIO_Port, &GPIO_InitStruct);
 80048a6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80048aa:	4619      	mov	r1, r3
 80048ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048b0:	f002 ff72 	bl	8007798 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80048b4:	4b50      	ldr	r3, [pc, #320]	@ (80049f8 <HAL_ADC_MspInit+0x1f0>)
 80048b6:	4a51      	ldr	r2, [pc, #324]	@ (80049fc <HAL_ADC_MspInit+0x1f4>)
 80048b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80048ba:	4b4f      	ldr	r3, [pc, #316]	@ (80049f8 <HAL_ADC_MspInit+0x1f0>)
 80048bc:	2205      	movs	r2, #5
 80048be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048c0:	4b4d      	ldr	r3, [pc, #308]	@ (80049f8 <HAL_ADC_MspInit+0x1f0>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80048c6:	4b4c      	ldr	r3, [pc, #304]	@ (80049f8 <HAL_ADC_MspInit+0x1f0>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80048cc:	4b4a      	ldr	r3, [pc, #296]	@ (80049f8 <HAL_ADC_MspInit+0x1f0>)
 80048ce:	2280      	movs	r2, #128	@ 0x80
 80048d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80048d2:	4b49      	ldr	r3, [pc, #292]	@ (80049f8 <HAL_ADC_MspInit+0x1f0>)
 80048d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80048da:	4b47      	ldr	r3, [pc, #284]	@ (80049f8 <HAL_ADC_MspInit+0x1f0>)
 80048dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80048e2:	4b45      	ldr	r3, [pc, #276]	@ (80049f8 <HAL_ADC_MspInit+0x1f0>)
 80048e4:	2220      	movs	r2, #32
 80048e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80048e8:	4b43      	ldr	r3, [pc, #268]	@ (80049f8 <HAL_ADC_MspInit+0x1f0>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80048ee:	4842      	ldr	r0, [pc, #264]	@ (80049f8 <HAL_ADC_MspInit+0x1f0>)
 80048f0:	f002 f8de 	bl	8006ab0 <HAL_DMA_Init>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80048fa:	f7ff ff29 	bl	8004750 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a3d      	ldr	r2, [pc, #244]	@ (80049f8 <HAL_ADC_MspInit+0x1f0>)
 8004902:	655a      	str	r2, [r3, #84]	@ 0x54
 8004904:	4a3c      	ldr	r2, [pc, #240]	@ (80049f8 <HAL_ADC_MspInit+0x1f0>)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800490a:	e06d      	b.n	80049e8 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a3b      	ldr	r2, [pc, #236]	@ (8004a00 <HAL_ADC_MspInit+0x1f8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d168      	bne.n	80049e8 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004916:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800491a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800491c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004920:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004922:	f107 031c 	add.w	r3, r7, #28
 8004926:	4618      	mov	r0, r3
 8004928:	f003 fe7a 	bl	8008620 <HAL_RCCEx_PeriphCLKConfig>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8004932:	f7ff ff0d 	bl	8004750 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004936:	4b2e      	ldr	r3, [pc, #184]	@ (80049f0 <HAL_ADC_MspInit+0x1e8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3301      	adds	r3, #1
 800493c:	4a2c      	ldr	r2, [pc, #176]	@ (80049f0 <HAL_ADC_MspInit+0x1e8>)
 800493e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004940:	4b2b      	ldr	r3, [pc, #172]	@ (80049f0 <HAL_ADC_MspInit+0x1e8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d10b      	bne.n	8004960 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004948:	4b2a      	ldr	r3, [pc, #168]	@ (80049f4 <HAL_ADC_MspInit+0x1ec>)
 800494a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494c:	4a29      	ldr	r2, [pc, #164]	@ (80049f4 <HAL_ADC_MspInit+0x1ec>)
 800494e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004952:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004954:	4b27      	ldr	r3, [pc, #156]	@ (80049f4 <HAL_ADC_MspInit+0x1ec>)
 8004956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004958:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004960:	4b24      	ldr	r3, [pc, #144]	@ (80049f4 <HAL_ADC_MspInit+0x1ec>)
 8004962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004964:	4a23      	ldr	r2, [pc, #140]	@ (80049f4 <HAL_ADC_MspInit+0x1ec>)
 8004966:	f043 0301 	orr.w	r3, r3, #1
 800496a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800496c:	4b21      	ldr	r3, [pc, #132]	@ (80049f4 <HAL_ADC_MspInit+0x1ec>)
 800496e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CSOB_Pin;
 8004978:	2302      	movs	r3, #2
 800497a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800497c:	2303      	movs	r3, #3
 800497e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004980:	2300      	movs	r3, #0
 8004982:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOB_GPIO_Port, &GPIO_InitStruct);
 8004984:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004988:	4619      	mov	r1, r3
 800498a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800498e:	f002 ff03 	bl	8007798 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8004992:	4b1c      	ldr	r3, [pc, #112]	@ (8004a04 <HAL_ADC_MspInit+0x1fc>)
 8004994:	4a1c      	ldr	r2, [pc, #112]	@ (8004a08 <HAL_ADC_MspInit+0x200>)
 8004996:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004998:	4b1a      	ldr	r3, [pc, #104]	@ (8004a04 <HAL_ADC_MspInit+0x1fc>)
 800499a:	2224      	movs	r2, #36	@ 0x24
 800499c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800499e:	4b19      	ldr	r3, [pc, #100]	@ (8004a04 <HAL_ADC_MspInit+0x1fc>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80049a4:	4b17      	ldr	r3, [pc, #92]	@ (8004a04 <HAL_ADC_MspInit+0x1fc>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80049aa:	4b16      	ldr	r3, [pc, #88]	@ (8004a04 <HAL_ADC_MspInit+0x1fc>)
 80049ac:	2280      	movs	r2, #128	@ 0x80
 80049ae:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049b0:	4b14      	ldr	r3, [pc, #80]	@ (8004a04 <HAL_ADC_MspInit+0x1fc>)
 80049b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049b6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049b8:	4b12      	ldr	r3, [pc, #72]	@ (8004a04 <HAL_ADC_MspInit+0x1fc>)
 80049ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049be:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80049c0:	4b10      	ldr	r3, [pc, #64]	@ (8004a04 <HAL_ADC_MspInit+0x1fc>)
 80049c2:	2220      	movs	r2, #32
 80049c4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80049c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004a04 <HAL_ADC_MspInit+0x1fc>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80049cc:	480d      	ldr	r0, [pc, #52]	@ (8004a04 <HAL_ADC_MspInit+0x1fc>)
 80049ce:	f002 f86f 	bl	8006ab0 <HAL_DMA_Init>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 80049d8:	f7ff feba 	bl	8004750 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a09      	ldr	r2, [pc, #36]	@ (8004a04 <HAL_ADC_MspInit+0x1fc>)
 80049e0:	655a      	str	r2, [r3, #84]	@ 0x54
 80049e2:	4a08      	ldr	r2, [pc, #32]	@ (8004a04 <HAL_ADC_MspInit+0x1fc>)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80049e8:	bf00      	nop
 80049ea:	3780      	adds	r7, #128	@ 0x80
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	200007c8 	.word	0x200007c8
 80049f4:	40021000 	.word	0x40021000
 80049f8:	20000518 	.word	0x20000518
 80049fc:	40020008 	.word	0x40020008
 8004a00:	50000100 	.word	0x50000100
 8004a04:	20000578 	.word	0x20000578
 8004a08:	4002001c 	.word	0x4002001c

08004a0c <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a0a      	ldr	r2, [pc, #40]	@ (8004a44 <HAL_CORDIC_MspInit+0x38>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d10b      	bne.n	8004a36 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a48 <HAL_CORDIC_MspInit+0x3c>)
 8004a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a22:	4a09      	ldr	r2, [pc, #36]	@ (8004a48 <HAL_CORDIC_MspInit+0x3c>)
 8004a24:	f043 0308 	orr.w	r3, r3, #8
 8004a28:	6493      	str	r3, [r2, #72]	@ 0x48
 8004a2a:	4b07      	ldr	r3, [pc, #28]	@ (8004a48 <HAL_CORDIC_MspInit+0x3c>)
 8004a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40020c00 	.word	0x40020c00
 8004a48:	40021000 	.word	0x40021000

08004a4c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a0a      	ldr	r2, [pc, #40]	@ (8004a84 <HAL_CRC_MspInit+0x38>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d10b      	bne.n	8004a76 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a88 <HAL_CRC_MspInit+0x3c>)
 8004a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a62:	4a09      	ldr	r2, [pc, #36]	@ (8004a88 <HAL_CRC_MspInit+0x3c>)
 8004a64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a68:	6493      	str	r3, [r2, #72]	@ 0x48
 8004a6a:	4b07      	ldr	r3, [pc, #28]	@ (8004a88 <HAL_CRC_MspInit+0x3c>)
 8004a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004a76:	bf00      	nop
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40023000 	.word	0x40023000
 8004a88:	40021000 	.word	0x40021000

08004a8c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b09e      	sub	sp, #120	@ 0x78
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a94:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	605a      	str	r2, [r3, #4]
 8004a9e:	609a      	str	r2, [r3, #8]
 8004aa0:	60da      	str	r2, [r3, #12]
 8004aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004aa4:	f107 0314 	add.w	r3, r7, #20
 8004aa8:	2250      	movs	r2, #80	@ 0x50
 8004aaa:	2100      	movs	r1, #0
 8004aac:	4618      	mov	r0, r3
 8004aae:	f007 f97f 	bl	800bdb0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a24      	ldr	r2, [pc, #144]	@ (8004b48 <HAL_FDCAN_MspInit+0xbc>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d141      	bne.n	8004b40 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004abc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ac0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004ac2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ac8:	f107 0314 	add.w	r3, r7, #20
 8004acc:	4618      	mov	r0, r3
 8004ace:	f003 fda7 	bl	8008620 <HAL_RCCEx_PeriphCLKConfig>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004ad8:	f7ff fe3a 	bl	8004750 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004adc:	4b1b      	ldr	r3, [pc, #108]	@ (8004b4c <HAL_FDCAN_MspInit+0xc0>)
 8004ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8004b4c <HAL_FDCAN_MspInit+0xc0>)
 8004ae2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ae6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ae8:	4b18      	ldr	r3, [pc, #96]	@ (8004b4c <HAL_FDCAN_MspInit+0xc0>)
 8004aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004af4:	4b15      	ldr	r3, [pc, #84]	@ (8004b4c <HAL_FDCAN_MspInit+0xc0>)
 8004af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af8:	4a14      	ldr	r2, [pc, #80]	@ (8004b4c <HAL_FDCAN_MspInit+0xc0>)
 8004afa:	f043 0301 	orr.w	r3, r3, #1
 8004afe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b00:	4b12      	ldr	r3, [pc, #72]	@ (8004b4c <HAL_FDCAN_MspInit+0xc0>)
 8004b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004b0c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004b10:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b12:	2302      	movs	r3, #2
 8004b14:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004b1e:	2309      	movs	r3, #9
 8004b20:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b22:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004b26:	4619      	mov	r1, r3
 8004b28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b2c:	f002 fe34 	bl	8007798 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004b30:	2200      	movs	r2, #0
 8004b32:	2100      	movs	r1, #0
 8004b34:	2015      	movs	r0, #21
 8004b36:	f001 fe94 	bl	8006862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004b3a:	2015      	movs	r0, #21
 8004b3c:	f001 feab 	bl	8006896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8004b40:	bf00      	nop
 8004b42:	3778      	adds	r7, #120	@ 0x78
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40006400 	.word	0x40006400
 8004b4c:	40021000 	.word	0x40021000

08004b50 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004b88 <HAL_FMAC_MspInit+0x38>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d10b      	bne.n	8004b7a <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8004b62:	4b0a      	ldr	r3, [pc, #40]	@ (8004b8c <HAL_FMAC_MspInit+0x3c>)
 8004b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b66:	4a09      	ldr	r2, [pc, #36]	@ (8004b8c <HAL_FMAC_MspInit+0x3c>)
 8004b68:	f043 0310 	orr.w	r3, r3, #16
 8004b6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8004b6e:	4b07      	ldr	r3, [pc, #28]	@ (8004b8c <HAL_FMAC_MspInit+0x3c>)
 8004b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40021400 	.word	0x40021400
 8004b8c:	40021000 	.word	0x40021000

08004b90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	@ 0x28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b98:	f107 0314 	add.w	r3, r7, #20
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	605a      	str	r2, [r3, #4]
 8004ba2:	609a      	str	r2, [r3, #8]
 8004ba4:	60da      	str	r2, [r3, #12]
 8004ba6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a17      	ldr	r2, [pc, #92]	@ (8004c0c <HAL_SPI_MspInit+0x7c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d128      	bne.n	8004c04 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004bb2:	4b17      	ldr	r3, [pc, #92]	@ (8004c10 <HAL_SPI_MspInit+0x80>)
 8004bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bb6:	4a16      	ldr	r2, [pc, #88]	@ (8004c10 <HAL_SPI_MspInit+0x80>)
 8004bb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004bbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8004bbe:	4b14      	ldr	r3, [pc, #80]	@ (8004c10 <HAL_SPI_MspInit+0x80>)
 8004bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bca:	4b11      	ldr	r3, [pc, #68]	@ (8004c10 <HAL_SPI_MspInit+0x80>)
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bce:	4a10      	ldr	r2, [pc, #64]	@ (8004c10 <HAL_SPI_MspInit+0x80>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8004c10 <HAL_SPI_MspInit+0x80>)
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004be2:	23e0      	movs	r3, #224	@ 0xe0
 8004be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be6:	2302      	movs	r3, #2
 8004be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bee:	2302      	movs	r3, #2
 8004bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004bf2:	2305      	movs	r3, #5
 8004bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf6:	f107 0314 	add.w	r3, r7, #20
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c00:	f002 fdca 	bl	8007798 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004c04:	bf00      	nop
 8004c06:	3728      	adds	r7, #40	@ 0x28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40013000 	.word	0x40013000
 8004c10:	40021000 	.word	0x40021000

08004c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1a      	ldr	r2, [pc, #104]	@ (8004c8c <HAL_TIM_Base_MspInit+0x78>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d114      	bne.n	8004c50 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c26:	4b1a      	ldr	r3, [pc, #104]	@ (8004c90 <HAL_TIM_Base_MspInit+0x7c>)
 8004c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c2a:	4a19      	ldr	r2, [pc, #100]	@ (8004c90 <HAL_TIM_Base_MspInit+0x7c>)
 8004c2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004c30:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c32:	4b17      	ldr	r3, [pc, #92]	@ (8004c90 <HAL_TIM_Base_MspInit+0x7c>)
 8004c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2100      	movs	r1, #0
 8004c42:	2019      	movs	r0, #25
 8004c44:	f001 fe0d 	bl	8006862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004c48:	2019      	movs	r0, #25
 8004c4a:	f001 fe24 	bl	8006896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004c4e:	e018      	b.n	8004c82 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c58:	d113      	bne.n	8004c82 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c90 <HAL_TIM_Base_MspInit+0x7c>)
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8004c90 <HAL_TIM_Base_MspInit+0x7c>)
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c66:	4b0a      	ldr	r3, [pc, #40]	@ (8004c90 <HAL_TIM_Base_MspInit+0x7c>)
 8004c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	60bb      	str	r3, [r7, #8]
 8004c70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004c72:	2200      	movs	r2, #0
 8004c74:	2100      	movs	r1, #0
 8004c76:	201c      	movs	r0, #28
 8004c78:	f001 fdf3 	bl	8006862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004c7c:	201c      	movs	r0, #28
 8004c7e:	f001 fe0a 	bl	8006896 <HAL_NVIC_EnableIRQ>
}
 8004c82:	bf00      	nop
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40021000 	.word	0x40021000

08004c94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b088      	sub	sp, #32
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c9c:	f107 030c 	add.w	r3, r7, #12
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	605a      	str	r2, [r3, #4]
 8004ca6:	609a      	str	r2, [r3, #8]
 8004ca8:	60da      	str	r2, [r3, #12]
 8004caa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a12      	ldr	r2, [pc, #72]	@ (8004cfc <HAL_TIM_MspPostInit+0x68>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d11d      	bne.n	8004cf2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cb6:	4b12      	ldr	r3, [pc, #72]	@ (8004d00 <HAL_TIM_MspPostInit+0x6c>)
 8004cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cba:	4a11      	ldr	r2, [pc, #68]	@ (8004d00 <HAL_TIM_MspPostInit+0x6c>)
 8004cbc:	f043 0301 	orr.w	r3, r3, #1
 8004cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8004d00 <HAL_TIM_MspPostInit+0x6c>)
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	60bb      	str	r3, [r7, #8]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWMC_Pin|PWMB_Pin|PWMA_Pin;
 8004cce:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8004cd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004ce0:	2306      	movs	r3, #6
 8004ce2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ce4:	f107 030c 	add.w	r3, r7, #12
 8004ce8:	4619      	mov	r1, r3
 8004cea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004cee:	f002 fd53 	bl	8007798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004cf2:	bf00      	nop
 8004cf4:	3720      	adds	r7, #32
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40012c00 	.word	0x40012c00
 8004d00:	40021000 	.word	0x40021000

08004d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d08:	bf00      	nop
 8004d0a:	e7fd      	b.n	8004d08 <NMI_Handler+0x4>

08004d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d10:	bf00      	nop
 8004d12:	e7fd      	b.n	8004d10 <HardFault_Handler+0x4>

08004d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d18:	bf00      	nop
 8004d1a:	e7fd      	b.n	8004d18 <MemManage_Handler+0x4>

08004d1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d20:	bf00      	nop
 8004d22:	e7fd      	b.n	8004d20 <BusFault_Handler+0x4>

08004d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d28:	bf00      	nop
 8004d2a:	e7fd      	b.n	8004d28 <UsageFault_Handler+0x4>

08004d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d3e:	bf00      	nop
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d4c:	bf00      	nop
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d5a:	f000 f91d 	bl	8004f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d5e:	bf00      	nop
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004d68:	4802      	ldr	r0, [pc, #8]	@ (8004d74 <DMA1_Channel1_IRQHandler+0x10>)
 8004d6a:	f001 ffc4 	bl	8006cf6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004d6e:	bf00      	nop
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20000518 	.word	0x20000518

08004d78 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004d7c:	4802      	ldr	r0, [pc, #8]	@ (8004d88 <DMA1_Channel2_IRQHandler+0x10>)
 8004d7e:	f001 ffba 	bl	8006cf6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004d82:	bf00      	nop
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20000578 	.word	0x20000578

08004d8c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004d90:	4802      	ldr	r0, [pc, #8]	@ (8004d9c <FDCAN1_IT0_IRQHandler+0x10>)
 8004d92:	f002 fa59 	bl	8007248 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004d96:	bf00      	nop
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20000624 	.word	0x20000624

08004da0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004da4:	4802      	ldr	r0, [pc, #8]	@ (8004db0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004da6:	f004 fbd2 	bl	800954e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004daa:	bf00      	nop
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000724 	.word	0x20000724

08004db4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004db8:	4802      	ldr	r0, [pc, #8]	@ (8004dc4 <TIM2_IRQHandler+0x10>)
 8004dba:	f004 fbc8 	bl	800954e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004dbe:	bf00      	nop
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000770 	.word	0x20000770

08004dc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  return 1;
 8004dcc:	2301      	movs	r3, #1
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <_kill>:

int _kill(int pid, int sig)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004de2:	f007 f841 	bl	800be68 <__errno>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2216      	movs	r2, #22
 8004dea:	601a      	str	r2, [r3, #0]
  return -1;
 8004dec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <_exit>:

void _exit (int status)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e00:	f04f 31ff 	mov.w	r1, #4294967295
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7ff ffe7 	bl	8004dd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e0a:	bf00      	nop
 8004e0c:	e7fd      	b.n	8004e0a <_exit+0x12>
	...

08004e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e18:	4a14      	ldr	r2, [pc, #80]	@ (8004e6c <_sbrk+0x5c>)
 8004e1a:	4b15      	ldr	r3, [pc, #84]	@ (8004e70 <_sbrk+0x60>)
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e24:	4b13      	ldr	r3, [pc, #76]	@ (8004e74 <_sbrk+0x64>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d102      	bne.n	8004e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e2c:	4b11      	ldr	r3, [pc, #68]	@ (8004e74 <_sbrk+0x64>)
 8004e2e:	4a12      	ldr	r2, [pc, #72]	@ (8004e78 <_sbrk+0x68>)
 8004e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e32:	4b10      	ldr	r3, [pc, #64]	@ (8004e74 <_sbrk+0x64>)
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4413      	add	r3, r2
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d207      	bcs.n	8004e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e40:	f007 f812 	bl	800be68 <__errno>
 8004e44:	4603      	mov	r3, r0
 8004e46:	220c      	movs	r2, #12
 8004e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4e:	e009      	b.n	8004e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e50:	4b08      	ldr	r3, [pc, #32]	@ (8004e74 <_sbrk+0x64>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e56:	4b07      	ldr	r3, [pc, #28]	@ (8004e74 <_sbrk+0x64>)
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	4a05      	ldr	r2, [pc, #20]	@ (8004e74 <_sbrk+0x64>)
 8004e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e62:	68fb      	ldr	r3, [r7, #12]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	2001c000 	.word	0x2001c000
 8004e70:	00000400 	.word	0x00000400
 8004e74:	200007cc 	.word	0x200007cc
 8004e78:	20000920 	.word	0x20000920

08004e7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004e80:	4b06      	ldr	r3, [pc, #24]	@ (8004e9c <SystemInit+0x20>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e86:	4a05      	ldr	r2, [pc, #20]	@ (8004e9c <SystemInit+0x20>)
 8004e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e90:	bf00      	nop
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	e000ed00 	.word	0xe000ed00

08004ea0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004ea0:	480d      	ldr	r0, [pc, #52]	@ (8004ed8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004ea2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004ea4:	f7ff ffea 	bl	8004e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ea8:	480c      	ldr	r0, [pc, #48]	@ (8004edc <LoopForever+0x6>)
  ldr r1, =_edata
 8004eaa:	490d      	ldr	r1, [pc, #52]	@ (8004ee0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004eac:	4a0d      	ldr	r2, [pc, #52]	@ (8004ee4 <LoopForever+0xe>)
  movs r3, #0
 8004eae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004eb0:	e002      	b.n	8004eb8 <LoopCopyDataInit>

08004eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004eb6:	3304      	adds	r3, #4

08004eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ebc:	d3f9      	bcc.n	8004eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ec0:	4c0a      	ldr	r4, [pc, #40]	@ (8004eec <LoopForever+0x16>)
  movs r3, #0
 8004ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ec4:	e001      	b.n	8004eca <LoopFillZerobss>

08004ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ec8:	3204      	adds	r2, #4

08004eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ecc:	d3fb      	bcc.n	8004ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ece:	f006 ffd1 	bl	800be74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ed2:	f7fe ff89 	bl	8003de8 <main>

08004ed6 <LoopForever>:

LoopForever:
    b LoopForever
 8004ed6:	e7fe      	b.n	8004ed6 <LoopForever>
  ldr   r0, =_estack
 8004ed8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8004edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ee0:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8004ee4:	0800c0ec 	.word	0x0800c0ec
  ldr r2, =_sbss
 8004ee8:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8004eec:	20000920 	.word	0x20000920

08004ef0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004ef0:	e7fe      	b.n	8004ef0 <ADC1_2_IRQHandler>

08004ef2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004efc:	2003      	movs	r0, #3
 8004efe:	f001 fca5 	bl	800684c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f02:	200f      	movs	r0, #15
 8004f04:	f000 f80e 	bl	8004f24 <HAL_InitTick>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	71fb      	strb	r3, [r7, #7]
 8004f12:	e001      	b.n	8004f18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004f14:	f7ff fc54 	bl	80047c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f18:	79fb      	ldrb	r3, [r7, #7]

}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004f30:	4b16      	ldr	r3, [pc, #88]	@ (8004f8c <HAL_InitTick+0x68>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d022      	beq.n	8004f7e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004f38:	4b15      	ldr	r3, [pc, #84]	@ (8004f90 <HAL_InitTick+0x6c>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b13      	ldr	r3, [pc, #76]	@ (8004f8c <HAL_InitTick+0x68>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004f44:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f001 fcb0 	bl	80068b2 <HAL_SYSTICK_Config>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10f      	bne.n	8004f78 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b0f      	cmp	r3, #15
 8004f5c:	d809      	bhi.n	8004f72 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f5e:	2200      	movs	r2, #0
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	f04f 30ff 	mov.w	r0, #4294967295
 8004f66:	f001 fc7c 	bl	8006862 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f94 <HAL_InitTick+0x70>)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6013      	str	r3, [r2, #0]
 8004f70:	e007      	b.n	8004f82 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	73fb      	strb	r3, [r7, #15]
 8004f76:	e004      	b.n	8004f82 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	73fb      	strb	r3, [r7, #15]
 8004f7c:	e001      	b.n	8004f82 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	200000c8 	.word	0x200000c8
 8004f90:	200000c0 	.word	0x200000c0
 8004f94:	200000c4 	.word	0x200000c4

08004f98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f9c:	4b05      	ldr	r3, [pc, #20]	@ (8004fb4 <HAL_IncTick+0x1c>)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	4b05      	ldr	r3, [pc, #20]	@ (8004fb8 <HAL_IncTick+0x20>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	4a03      	ldr	r2, [pc, #12]	@ (8004fb4 <HAL_IncTick+0x1c>)
 8004fa8:	6013      	str	r3, [r2, #0]
}
 8004faa:	bf00      	nop
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	200007d0 	.word	0x200007d0
 8004fb8:	200000c8 	.word	0x200000c8

08004fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8004fc0:	4b03      	ldr	r3, [pc, #12]	@ (8004fd0 <HAL_GetTick+0x14>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	200007d0 	.word	0x200007d0

08004fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fdc:	f7ff ffee 	bl	8004fbc <HAL_GetTick>
 8004fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fec:	d004      	beq.n	8004ff8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fee:	4b09      	ldr	r3, [pc, #36]	@ (8005014 <HAL_Delay+0x40>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004ff8:	bf00      	nop
 8004ffa:	f7ff ffdf 	bl	8004fbc <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	429a      	cmp	r2, r3
 8005008:	d8f7      	bhi.n	8004ffa <HAL_Delay+0x26>
  {
  }
}
 800500a:	bf00      	nop
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	200000c8 	.word	0x200000c8

08005018 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	609a      	str	r2, [r3, #8]
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	609a      	str	r2, [r3, #8]
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005074:	4618      	mov	r0, r3
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3360      	adds	r3, #96	@ 0x60
 8005092:	461a      	mov	r2, r3
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4b08      	ldr	r3, [pc, #32]	@ (80050c4 <LL_ADC_SetOffset+0x44>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80050b8:	bf00      	nop
 80050ba:	371c      	adds	r7, #28
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	03fff000 	.word	0x03fff000

080050c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3360      	adds	r3, #96	@ 0x60
 80050d6:	461a      	mov	r2, r3
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3360      	adds	r3, #96	@ 0x60
 8005104:	461a      	mov	r2, r3
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	431a      	orrs	r2, r3
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800511e:	bf00      	nop
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800512a:	b480      	push	{r7}
 800512c:	b087      	sub	sp, #28
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	3360      	adds	r3, #96	@ 0x60
 800513a:	461a      	mov	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	431a      	orrs	r2, r3
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005154:	bf00      	nop
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3360      	adds	r3, #96	@ 0x60
 8005170:	461a      	mov	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	431a      	orrs	r2, r3
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	615a      	str	r2, [r3, #20]
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80051d0:	2301      	movs	r3, #1
 80051d2:	e000      	b.n	80051d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b087      	sub	sp, #28
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3330      	adds	r3, #48	@ 0x30
 80051f2:	461a      	mov	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	0a1b      	lsrs	r3, r3, #8
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	f003 030c 	and.w	r3, r3, #12
 80051fe:	4413      	add	r3, r2
 8005200:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	211f      	movs	r1, #31
 800520e:	fa01 f303 	lsl.w	r3, r1, r3
 8005212:	43db      	mvns	r3, r3
 8005214:	401a      	ands	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	0e9b      	lsrs	r3, r3, #26
 800521a:	f003 011f 	and.w	r1, r3, #31
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	fa01 f303 	lsl.w	r3, r1, r3
 8005228:	431a      	orrs	r2, r3
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800523a:	b480      	push	{r7}
 800523c:	b087      	sub	sp, #28
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3314      	adds	r3, #20
 800524a:	461a      	mov	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	0e5b      	lsrs	r3, r3, #25
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	4413      	add	r3, r2
 8005258:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	0d1b      	lsrs	r3, r3, #20
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	2107      	movs	r1, #7
 8005268:	fa01 f303 	lsl.w	r3, r1, r3
 800526c:	43db      	mvns	r3, r3
 800526e:	401a      	ands	r2, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	0d1b      	lsrs	r3, r3, #20
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	fa01 f303 	lsl.w	r3, r1, r3
 800527e:	431a      	orrs	r2, r3
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005284:	bf00      	nop
 8005286:	371c      	adds	r7, #28
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a8:	43db      	mvns	r3, r3
 80052aa:	401a      	ands	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f003 0318 	and.w	r3, r3, #24
 80052b2:	4908      	ldr	r1, [pc, #32]	@ (80052d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80052b4:	40d9      	lsrs	r1, r3
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	400b      	ands	r3, r1
 80052ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052be:	431a      	orrs	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	0007ffff 	.word	0x0007ffff

080052d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 031f 	and.w	r3, r3, #31
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005304:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6093      	str	r3, [r2, #8]
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005328:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800532c:	d101      	bne.n	8005332 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005350:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005354:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005378:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800537c:	d101      	bne.n	8005382 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80053a4:	f043 0201 	orr.w	r2, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <LL_ADC_IsEnabled+0x18>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <LL_ADC_IsEnabled+0x1a>
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80053f2:	f043 0204 	orr.w	r2, r3, #4
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b04      	cmp	r3, #4
 8005418:	d101      	bne.n	800541e <LL_ADC_REG_IsConversionOngoing+0x18>
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 0308 	and.w	r3, r3, #8
 800543c:	2b08      	cmp	r3, #8
 800543e:	d101      	bne.n	8005444 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005440:	2301      	movs	r3, #1
 8005442:	e000      	b.n	8005446 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
	...

08005454 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b089      	sub	sp, #36	@ 0x24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e19b      	b.n	80057a6 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005478:	2b00      	cmp	r3, #0
 800547a:	d109      	bne.n	8005490 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff f9c3 	bl	8004808 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff ff3f 	bl	8005318 <LL_ADC_IsDeepPowerDownEnabled>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d004      	beq.n	80054aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff ff25 	bl	80052f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff ff5a 	bl	8005368 <LL_ADC_IsInternalRegulatorEnabled>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d115      	bne.n	80054e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff ff3e 	bl	8005340 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054c4:	4b97      	ldr	r3, [pc, #604]	@ (8005724 <HAL_ADC_Init+0x2d0>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	099b      	lsrs	r3, r3, #6
 80054ca:	4a97      	ldr	r2, [pc, #604]	@ (8005728 <HAL_ADC_Init+0x2d4>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	099b      	lsrs	r3, r3, #6
 80054d2:	3301      	adds	r3, #1
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80054d8:	e002      	b.n	80054e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	3b01      	subs	r3, #1
 80054de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f9      	bne.n	80054da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff ff3c 	bl	8005368 <LL_ADC_IsInternalRegulatorEnabled>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10d      	bne.n	8005512 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054fa:	f043 0210 	orr.w	r2, r3, #16
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005506:	f043 0201 	orr.w	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff ff75 	bl	8005406 <LL_ADC_REG_IsConversionOngoing>
 800551c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b00      	cmp	r3, #0
 8005528:	f040 8134 	bne.w	8005794 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f040 8130 	bne.w	8005794 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005538:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800553c:	f043 0202 	orr.w	r2, r3, #2
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff ff35 	bl	80053b8 <LL_ADC_IsEnabled>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d137      	bne.n	80055c4 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800555c:	d004      	beq.n	8005568 <HAL_ADC_Init+0x114>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a72      	ldr	r2, [pc, #456]	@ (800572c <HAL_ADC_Init+0x2d8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d10f      	bne.n	8005588 <HAL_ADC_Init+0x134>
 8005568:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800556c:	f7ff ff24 	bl	80053b8 <LL_ADC_IsEnabled>
 8005570:	4604      	mov	r4, r0
 8005572:	486e      	ldr	r0, [pc, #440]	@ (800572c <HAL_ADC_Init+0x2d8>)
 8005574:	f7ff ff20 	bl	80053b8 <LL_ADC_IsEnabled>
 8005578:	4603      	mov	r3, r0
 800557a:	4323      	orrs	r3, r4
 800557c:	2b00      	cmp	r3, #0
 800557e:	bf0c      	ite	eq
 8005580:	2301      	moveq	r3, #1
 8005582:	2300      	movne	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	e008      	b.n	800559a <HAL_ADC_Init+0x146>
 8005588:	4869      	ldr	r0, [pc, #420]	@ (8005730 <HAL_ADC_Init+0x2dc>)
 800558a:	f7ff ff15 	bl	80053b8 <LL_ADC_IsEnabled>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	bf0c      	ite	eq
 8005594:	2301      	moveq	r3, #1
 8005596:	2300      	movne	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d012      	beq.n	80055c4 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055a6:	d004      	beq.n	80055b2 <HAL_ADC_Init+0x15e>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a5f      	ldr	r2, [pc, #380]	@ (800572c <HAL_ADC_Init+0x2d8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d101      	bne.n	80055b6 <HAL_ADC_Init+0x162>
 80055b2:	4a60      	ldr	r2, [pc, #384]	@ (8005734 <HAL_ADC_Init+0x2e0>)
 80055b4:	e000      	b.n	80055b8 <HAL_ADC_Init+0x164>
 80055b6:	4a60      	ldr	r2, [pc, #384]	@ (8005738 <HAL_ADC_Init+0x2e4>)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	4619      	mov	r1, r3
 80055be:	4610      	mov	r0, r2
 80055c0:	f7ff fd2a 	bl	8005018 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	7f5b      	ldrb	r3, [r3, #29]
 80055c8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80055ce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80055d4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80055da:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80055e2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80055e4:	4313      	orrs	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d106      	bne.n	8005600 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f6:	3b01      	subs	r3, #1
 80055f8:	045b      	lsls	r3, r3, #17
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005604:	2b00      	cmp	r3, #0
 8005606:	d009      	beq.n	800561c <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005614:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	4313      	orrs	r3, r2
 800561a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	4b46      	ldr	r3, [pc, #280]	@ (800573c <HAL_ADC_Init+0x2e8>)
 8005624:	4013      	ands	r3, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6812      	ldr	r2, [r2, #0]
 800562a:	69b9      	ldr	r1, [r7, #24]
 800562c:	430b      	orrs	r3, r1
 800562e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff feee 	bl	800542c <LL_ADC_INJ_IsConversionOngoing>
 8005650:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d17b      	bne.n	8005750 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d178      	bne.n	8005750 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005662:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800566a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800566c:	4313      	orrs	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800567a:	f023 0302 	bic.w	r3, r3, #2
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	69b9      	ldr	r1, [r7, #24]
 8005684:	430b      	orrs	r3, r1
 8005686:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d017      	beq.n	80056c0 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691a      	ldr	r2, [r3, #16]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800569e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80056a8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80056ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6911      	ldr	r1, [r2, #16]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	430b      	orrs	r3, r1
 80056ba:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80056be:	e013      	b.n	80056e8 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80056ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80056e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80056e4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d126      	bne.n	8005740 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80056fc:	f023 0304 	bic.w	r3, r3, #4
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005708:	4311      	orrs	r1, r2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800570e:	4311      	orrs	r1, r2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005714:	430a      	orrs	r2, r1
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0201 	orr.w	r2, r2, #1
 8005720:	611a      	str	r2, [r3, #16]
 8005722:	e015      	b.n	8005750 <HAL_ADC_Init+0x2fc>
 8005724:	200000c0 	.word	0x200000c0
 8005728:	053e2d63 	.word	0x053e2d63
 800572c:	50000100 	.word	0x50000100
 8005730:	50000400 	.word	0x50000400
 8005734:	50000300 	.word	0x50000300
 8005738:	50000700 	.word	0x50000700
 800573c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691a      	ldr	r2, [r3, #16]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0201 	bic.w	r2, r2, #1
 800574e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d10c      	bne.n	8005772 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575e:	f023 010f 	bic.w	r1, r3, #15
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	1e5a      	subs	r2, r3, #1
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005770:	e007      	b.n	8005782 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 020f 	bic.w	r2, r2, #15
 8005780:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005786:	f023 0303 	bic.w	r3, r3, #3
 800578a:	f043 0201 	orr.w	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005792:	e007      	b.n	80057a4 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005798:	f043 0210 	orr.w	r2, r3, #16
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80057a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3724      	adds	r7, #36	@ 0x24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd90      	pop	{r4, r7, pc}
 80057ae:	bf00      	nop

080057b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057c4:	d004      	beq.n	80057d0 <HAL_ADC_Start_DMA+0x20>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a57      	ldr	r2, [pc, #348]	@ (8005928 <HAL_ADC_Start_DMA+0x178>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d101      	bne.n	80057d4 <HAL_ADC_Start_DMA+0x24>
 80057d0:	4b56      	ldr	r3, [pc, #344]	@ (800592c <HAL_ADC_Start_DMA+0x17c>)
 80057d2:	e000      	b.n	80057d6 <HAL_ADC_Start_DMA+0x26>
 80057d4:	4b56      	ldr	r3, [pc, #344]	@ (8005930 <HAL_ADC_Start_DMA+0x180>)
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff fd7e 	bl	80052d8 <LL_ADC_GetMultimode>
 80057dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fe0f 	bl	8005406 <LL_ADC_REG_IsConversionOngoing>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f040 8094 	bne.w	8005918 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d101      	bne.n	80057fe <HAL_ADC_Start_DMA+0x4e>
 80057fa:	2302      	movs	r3, #2
 80057fc:	e08f      	b.n	800591e <HAL_ADC_Start_DMA+0x16e>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a4a      	ldr	r2, [pc, #296]	@ (8005934 <HAL_ADC_Start_DMA+0x184>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d008      	beq.n	8005822 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d005      	beq.n	8005822 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2b05      	cmp	r3, #5
 800581a:	d002      	beq.n	8005822 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2b09      	cmp	r3, #9
 8005820:	d173      	bne.n	800590a <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 fcd8 	bl	80061d8 <ADC_Enable>
 8005828:	4603      	mov	r3, r0
 800582a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800582c:	7dfb      	ldrb	r3, [r7, #23]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d166      	bne.n	8005900 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005836:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800583a:	f023 0301 	bic.w	r3, r3, #1
 800583e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a37      	ldr	r2, [pc, #220]	@ (8005928 <HAL_ADC_Start_DMA+0x178>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d002      	beq.n	8005856 <HAL_ADC_Start_DMA+0xa6>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	e001      	b.n	800585a <HAL_ADC_Start_DMA+0xaa>
 8005856:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	4293      	cmp	r3, r2
 8005860:	d002      	beq.n	8005868 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d105      	bne.n	8005874 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800586c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005878:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d006      	beq.n	800588e <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005884:	f023 0206 	bic.w	r2, r3, #6
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	661a      	str	r2, [r3, #96]	@ 0x60
 800588c:	e002      	b.n	8005894 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005898:	4a27      	ldr	r2, [pc, #156]	@ (8005938 <HAL_ADC_Start_DMA+0x188>)
 800589a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a0:	4a26      	ldr	r2, [pc, #152]	@ (800593c <HAL_ADC_Start_DMA+0x18c>)
 80058a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a8:	4a25      	ldr	r2, [pc, #148]	@ (8005940 <HAL_ADC_Start_DMA+0x190>)
 80058aa:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	221c      	movs	r2, #28
 80058b2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0210 	orr.w	r2, r2, #16
 80058ca:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3340      	adds	r3, #64	@ 0x40
 80058e6:	4619      	mov	r1, r3
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f001 f988 	bl	8006c00 <HAL_DMA_Start_IT>
 80058f0:	4603      	mov	r3, r0
 80058f2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff fd70 	bl	80053de <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80058fe:	e00d      	b.n	800591c <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005908:	e008      	b.n	800591c <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005916:	e001      	b.n	800591c <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005918:	2302      	movs	r3, #2
 800591a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800591c:	7dfb      	ldrb	r3, [r7, #23]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	50000100 	.word	0x50000100
 800592c:	50000300 	.word	0x50000300
 8005930:	50000700 	.word	0x50000700
 8005934:	50000400 	.word	0x50000400
 8005938:	08006305 	.word	0x08006305
 800593c:	080063dd 	.word	0x080063dd
 8005940:	080063f9 	.word	0x080063f9

08005944 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b0b6      	sub	sp, #216	@ 0xd8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800599a:	2b01      	cmp	r3, #1
 800599c:	d102      	bne.n	80059a4 <HAL_ADC_ConfigChannel+0x24>
 800599e:	2302      	movs	r3, #2
 80059a0:	f000 bc04 	b.w	80061ac <HAL_ADC_ConfigChannel+0x82c>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fd28 	bl	8005406 <LL_ADC_REG_IsConversionOngoing>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f040 83e8 	bne.w	800618e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	6859      	ldr	r1, [r3, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	f7ff fc09 	bl	80051e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff fd16 	bl	8005406 <LL_ADC_REG_IsConversionOngoing>
 80059da:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff fd22 	bl	800542c <LL_ADC_INJ_IsConversionOngoing>
 80059e8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80059ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f040 81d9 	bne.w	8005da8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80059f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f040 81d4 	bne.w	8005da8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a08:	d10f      	bne.n	8005a2a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2200      	movs	r2, #0
 8005a14:	4619      	mov	r1, r3
 8005a16:	f7ff fc10 	bl	800523a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff fbb7 	bl	8005196 <LL_ADC_SetSamplingTimeCommonConfig>
 8005a28:	e00e      	b.n	8005a48 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6819      	ldr	r1, [r3, #0]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	461a      	mov	r2, r3
 8005a38:	f7ff fbff 	bl	800523a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2100      	movs	r1, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff fba7 	bl	8005196 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	08db      	lsrs	r3, r3, #3
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d022      	beq.n	8005ab0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6919      	ldr	r1, [r3, #16]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a7a:	f7ff fb01 	bl	8005080 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6919      	ldr	r1, [r3, #16]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f7ff fb4d 	bl	800512a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6818      	ldr	r0, [r3, #0]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d102      	bne.n	8005aa6 <HAL_ADC_ConfigChannel+0x126>
 8005aa0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005aa4:	e000      	b.n	8005aa8 <HAL_ADC_ConfigChannel+0x128>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	f7ff fb59 	bl	8005160 <LL_ADC_SetOffsetSaturation>
 8005aae:	e17b      	b.n	8005da8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff fb06 	bl	80050c8 <LL_ADC_GetOffsetChannel>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10a      	bne.n	8005adc <HAL_ADC_ConfigChannel+0x15c>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2100      	movs	r1, #0
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fafb 	bl	80050c8 <LL_ADC_GetOffsetChannel>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	0e9b      	lsrs	r3, r3, #26
 8005ad6:	f003 021f 	and.w	r2, r3, #31
 8005ada:	e01e      	b.n	8005b1a <HAL_ADC_ConfigChannel+0x19a>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff faf0 	bl	80050c8 <LL_ADC_GetOffsetChannel>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005af2:	fa93 f3a3 	rbit	r3, r3
 8005af6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005afa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005afe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005b02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005b0a:	2320      	movs	r3, #32
 8005b0c:	e004      	b.n	8005b18 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005b0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b12:	fab3 f383 	clz	r3, r3
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d105      	bne.n	8005b32 <HAL_ADC_ConfigChannel+0x1b2>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	0e9b      	lsrs	r3, r3, #26
 8005b2c:	f003 031f 	and.w	r3, r3, #31
 8005b30:	e018      	b.n	8005b64 <HAL_ADC_ConfigChannel+0x1e4>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005b3e:	fa93 f3a3 	rbit	r3, r3
 8005b42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005b46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005b4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005b56:	2320      	movs	r3, #32
 8005b58:	e004      	b.n	8005b64 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005b5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b5e:	fab3 f383 	clz	r3, r3
 8005b62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d106      	bne.n	8005b76 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2100      	movs	r1, #0
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7ff fabf 	bl	80050f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff faa3 	bl	80050c8 <LL_ADC_GetOffsetChannel>
 8005b82:	4603      	mov	r3, r0
 8005b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <HAL_ADC_ConfigChannel+0x222>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2101      	movs	r1, #1
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff fa98 	bl	80050c8 <LL_ADC_GetOffsetChannel>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	0e9b      	lsrs	r3, r3, #26
 8005b9c:	f003 021f 	and.w	r2, r3, #31
 8005ba0:	e01e      	b.n	8005be0 <HAL_ADC_ConfigChannel+0x260>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fa8d 	bl	80050c8 <LL_ADC_GetOffsetChannel>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005bb8:	fa93 f3a3 	rbit	r3, r3
 8005bbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005bc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005bc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005bd0:	2320      	movs	r3, #32
 8005bd2:	e004      	b.n	8005bde <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005bd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bd8:	fab3 f383 	clz	r3, r3
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d105      	bne.n	8005bf8 <HAL_ADC_ConfigChannel+0x278>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	0e9b      	lsrs	r3, r3, #26
 8005bf2:	f003 031f 	and.w	r3, r3, #31
 8005bf6:	e018      	b.n	8005c2a <HAL_ADC_ConfigChannel+0x2aa>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c04:	fa93 f3a3 	rbit	r3, r3
 8005c08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005c0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005c14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005c1c:	2320      	movs	r3, #32
 8005c1e:	e004      	b.n	8005c2a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c24:	fab3 f383 	clz	r3, r3
 8005c28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d106      	bne.n	8005c3c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2200      	movs	r2, #0
 8005c34:	2101      	movs	r1, #1
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff fa5c 	bl	80050f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2102      	movs	r1, #2
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff fa40 	bl	80050c8 <LL_ADC_GetOffsetChannel>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10a      	bne.n	8005c68 <HAL_ADC_ConfigChannel+0x2e8>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2102      	movs	r1, #2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff fa35 	bl	80050c8 <LL_ADC_GetOffsetChannel>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	0e9b      	lsrs	r3, r3, #26
 8005c62:	f003 021f 	and.w	r2, r3, #31
 8005c66:	e01e      	b.n	8005ca6 <HAL_ADC_ConfigChannel+0x326>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2102      	movs	r1, #2
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff fa2a 	bl	80050c8 <LL_ADC_GetOffsetChannel>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c7e:	fa93 f3a3 	rbit	r3, r3
 8005c82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005c86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005c8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005c96:	2320      	movs	r3, #32
 8005c98:	e004      	b.n	8005ca4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005c9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c9e:	fab3 f383 	clz	r3, r3
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d105      	bne.n	8005cbe <HAL_ADC_ConfigChannel+0x33e>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	0e9b      	lsrs	r3, r3, #26
 8005cb8:	f003 031f 	and.w	r3, r3, #31
 8005cbc:	e016      	b.n	8005cec <HAL_ADC_ConfigChannel+0x36c>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005cca:	fa93 f3a3 	rbit	r3, r3
 8005cce:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005cd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005cd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005cd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005cde:	2320      	movs	r3, #32
 8005ce0:	e004      	b.n	8005cec <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005ce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ce6:	fab3 f383 	clz	r3, r3
 8005cea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d106      	bne.n	8005cfe <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2102      	movs	r1, #2
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff f9fb 	bl	80050f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2103      	movs	r1, #3
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff f9df 	bl	80050c8 <LL_ADC_GetOffsetChannel>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <HAL_ADC_ConfigChannel+0x3aa>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2103      	movs	r1, #3
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff f9d4 	bl	80050c8 <LL_ADC_GetOffsetChannel>
 8005d20:	4603      	mov	r3, r0
 8005d22:	0e9b      	lsrs	r3, r3, #26
 8005d24:	f003 021f 	and.w	r2, r3, #31
 8005d28:	e017      	b.n	8005d5a <HAL_ADC_ConfigChannel+0x3da>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2103      	movs	r1, #3
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff f9c9 	bl	80050c8 <LL_ADC_GetOffsetChannel>
 8005d36:	4603      	mov	r3, r0
 8005d38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d3c:	fa93 f3a3 	rbit	r3, r3
 8005d40:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005d42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d44:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005d46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005d4c:	2320      	movs	r3, #32
 8005d4e:	e003      	b.n	8005d58 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005d50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d52:	fab3 f383 	clz	r3, r3
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d105      	bne.n	8005d72 <HAL_ADC_ConfigChannel+0x3f2>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	0e9b      	lsrs	r3, r3, #26
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	e011      	b.n	8005d96 <HAL_ADC_ConfigChannel+0x416>
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d7a:	fa93 f3a3 	rbit	r3, r3
 8005d7e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005d80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d82:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005d84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005d8a:	2320      	movs	r3, #32
 8005d8c:	e003      	b.n	8005d96 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d90:	fab3 f383 	clz	r3, r3
 8005d94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d106      	bne.n	8005da8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2103      	movs	r1, #3
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff f9a6 	bl	80050f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff fb03 	bl	80053b8 <LL_ADC_IsEnabled>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f040 813d 	bne.w	8006034 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6819      	ldr	r1, [r3, #0]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f7ff fa62 	bl	8005290 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	4aa2      	ldr	r2, [pc, #648]	@ (800605c <HAL_ADC_ConfigChannel+0x6dc>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	f040 812e 	bne.w	8006034 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10b      	bne.n	8005e00 <HAL_ADC_ConfigChannel+0x480>
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	0e9b      	lsrs	r3, r3, #26
 8005dee:	3301      	adds	r3, #1
 8005df0:	f003 031f 	and.w	r3, r3, #31
 8005df4:	2b09      	cmp	r3, #9
 8005df6:	bf94      	ite	ls
 8005df8:	2301      	movls	r3, #1
 8005dfa:	2300      	movhi	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	e019      	b.n	8005e34 <HAL_ADC_ConfigChannel+0x4b4>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e08:	fa93 f3a3 	rbit	r3, r3
 8005e0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005e0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e10:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005e12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005e18:	2320      	movs	r3, #32
 8005e1a:	e003      	b.n	8005e24 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005e1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e1e:	fab3 f383 	clz	r3, r3
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	3301      	adds	r3, #1
 8005e26:	f003 031f 	and.w	r3, r3, #31
 8005e2a:	2b09      	cmp	r3, #9
 8005e2c:	bf94      	ite	ls
 8005e2e:	2301      	movls	r3, #1
 8005e30:	2300      	movhi	r3, #0
 8005e32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d079      	beq.n	8005f2c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d107      	bne.n	8005e54 <HAL_ADC_ConfigChannel+0x4d4>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	0e9b      	lsrs	r3, r3, #26
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	069b      	lsls	r3, r3, #26
 8005e4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e52:	e015      	b.n	8005e80 <HAL_ADC_ConfigChannel+0x500>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e5c:	fa93 f3a3 	rbit	r3, r3
 8005e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e64:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005e6c:	2320      	movs	r3, #32
 8005e6e:	e003      	b.n	8005e78 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e72:	fab3 f383 	clz	r3, r3
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	3301      	adds	r3, #1
 8005e7a:	069b      	lsls	r3, r3, #26
 8005e7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d109      	bne.n	8005ea0 <HAL_ADC_ConfigChannel+0x520>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	0e9b      	lsrs	r3, r3, #26
 8005e92:	3301      	adds	r3, #1
 8005e94:	f003 031f 	and.w	r3, r3, #31
 8005e98:	2101      	movs	r1, #1
 8005e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9e:	e017      	b.n	8005ed0 <HAL_ADC_ConfigChannel+0x550>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ea8:	fa93 f3a3 	rbit	r3, r3
 8005eac:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005eb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005eb8:	2320      	movs	r3, #32
 8005eba:	e003      	b.n	8005ec4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005ebc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ebe:	fab3 f383 	clz	r3, r3
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	f003 031f 	and.w	r3, r3, #31
 8005eca:	2101      	movs	r1, #1
 8005ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed0:	ea42 0103 	orr.w	r1, r2, r3
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10a      	bne.n	8005ef6 <HAL_ADC_ConfigChannel+0x576>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	0e9b      	lsrs	r3, r3, #26
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	f003 021f 	and.w	r2, r3, #31
 8005eec:	4613      	mov	r3, r2
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	4413      	add	r3, r2
 8005ef2:	051b      	lsls	r3, r3, #20
 8005ef4:	e018      	b.n	8005f28 <HAL_ADC_ConfigChannel+0x5a8>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efe:	fa93 f3a3 	rbit	r3, r3
 8005f02:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005f0e:	2320      	movs	r3, #32
 8005f10:	e003      	b.n	8005f1a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f14:	fab3 f383 	clz	r3, r3
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	f003 021f 	and.w	r2, r3, #31
 8005f20:	4613      	mov	r3, r2
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	4413      	add	r3, r2
 8005f26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	e07e      	b.n	800602a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d107      	bne.n	8005f48 <HAL_ADC_ConfigChannel+0x5c8>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	0e9b      	lsrs	r3, r3, #26
 8005f3e:	3301      	adds	r3, #1
 8005f40:	069b      	lsls	r3, r3, #26
 8005f42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005f46:	e015      	b.n	8005f74 <HAL_ADC_ConfigChannel+0x5f4>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f50:	fa93 f3a3 	rbit	r3, r3
 8005f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f58:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005f60:	2320      	movs	r3, #32
 8005f62:	e003      	b.n	8005f6c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f66:	fab3 f383 	clz	r3, r3
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	069b      	lsls	r3, r3, #26
 8005f70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d109      	bne.n	8005f94 <HAL_ADC_ConfigChannel+0x614>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	0e9b      	lsrs	r3, r3, #26
 8005f86:	3301      	adds	r3, #1
 8005f88:	f003 031f 	and.w	r3, r3, #31
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f92:	e017      	b.n	8005fc4 <HAL_ADC_ConfigChannel+0x644>
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	fa93 f3a3 	rbit	r3, r3
 8005fa0:	61fb      	str	r3, [r7, #28]
  return result;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005fac:	2320      	movs	r3, #32
 8005fae:	e003      	b.n	8005fb8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	fab3 f383 	clz	r3, r3
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	3301      	adds	r3, #1
 8005fba:	f003 031f 	and.w	r3, r3, #31
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc4:	ea42 0103 	orr.w	r1, r2, r3
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10d      	bne.n	8005ff0 <HAL_ADC_ConfigChannel+0x670>
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	0e9b      	lsrs	r3, r3, #26
 8005fda:	3301      	adds	r3, #1
 8005fdc:	f003 021f 	and.w	r2, r3, #31
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	005b      	lsls	r3, r3, #1
 8005fe4:	4413      	add	r3, r2
 8005fe6:	3b1e      	subs	r3, #30
 8005fe8:	051b      	lsls	r3, r3, #20
 8005fea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005fee:	e01b      	b.n	8006028 <HAL_ADC_ConfigChannel+0x6a8>
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	fa93 f3a3 	rbit	r3, r3
 8005ffc:	613b      	str	r3, [r7, #16]
  return result;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006008:	2320      	movs	r3, #32
 800600a:	e003      	b.n	8006014 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	fab3 f383 	clz	r3, r3
 8006012:	b2db      	uxtb	r3, r3
 8006014:	3301      	adds	r3, #1
 8006016:	f003 021f 	and.w	r2, r3, #31
 800601a:	4613      	mov	r3, r2
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	4413      	add	r3, r2
 8006020:	3b1e      	subs	r3, #30
 8006022:	051b      	lsls	r3, r3, #20
 8006024:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006028:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800602e:	4619      	mov	r1, r3
 8006030:	f7ff f903 	bl	800523a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	4b09      	ldr	r3, [pc, #36]	@ (8006060 <HAL_ADC_ConfigChannel+0x6e0>)
 800603a:	4013      	ands	r3, r2
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 80af 	beq.w	80061a0 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800604a:	d004      	beq.n	8006056 <HAL_ADC_ConfigChannel+0x6d6>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a04      	ldr	r2, [pc, #16]	@ (8006064 <HAL_ADC_ConfigChannel+0x6e4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d10a      	bne.n	800606c <HAL_ADC_ConfigChannel+0x6ec>
 8006056:	4b04      	ldr	r3, [pc, #16]	@ (8006068 <HAL_ADC_ConfigChannel+0x6e8>)
 8006058:	e009      	b.n	800606e <HAL_ADC_ConfigChannel+0x6ee>
 800605a:	bf00      	nop
 800605c:	407f0000 	.word	0x407f0000
 8006060:	80080000 	.word	0x80080000
 8006064:	50000100 	.word	0x50000100
 8006068:	50000300 	.word	0x50000300
 800606c:	4b51      	ldr	r3, [pc, #324]	@ (80061b4 <HAL_ADC_ConfigChannel+0x834>)
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe fff8 	bl	8005064 <LL_ADC_GetCommonPathInternalCh>
 8006074:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a4e      	ldr	r2, [pc, #312]	@ (80061b8 <HAL_ADC_ConfigChannel+0x838>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_ADC_ConfigChannel+0x70c>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a4d      	ldr	r2, [pc, #308]	@ (80061bc <HAL_ADC_ConfigChannel+0x83c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d134      	bne.n	80060f6 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800608c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006090:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d12e      	bne.n	80060f6 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060a0:	d17e      	bne.n	80061a0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060aa:	d004      	beq.n	80060b6 <HAL_ADC_ConfigChannel+0x736>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a43      	ldr	r2, [pc, #268]	@ (80061c0 <HAL_ADC_ConfigChannel+0x840>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d101      	bne.n	80060ba <HAL_ADC_ConfigChannel+0x73a>
 80060b6:	4a43      	ldr	r2, [pc, #268]	@ (80061c4 <HAL_ADC_ConfigChannel+0x844>)
 80060b8:	e000      	b.n	80060bc <HAL_ADC_ConfigChannel+0x73c>
 80060ba:	4a3e      	ldr	r2, [pc, #248]	@ (80061b4 <HAL_ADC_ConfigChannel+0x834>)
 80060bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80060c4:	4619      	mov	r1, r3
 80060c6:	4610      	mov	r0, r2
 80060c8:	f7fe ffb9 	bl	800503e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80060cc:	4b3e      	ldr	r3, [pc, #248]	@ (80061c8 <HAL_ADC_ConfigChannel+0x848>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	099b      	lsrs	r3, r3, #6
 80060d2:	4a3e      	ldr	r2, [pc, #248]	@ (80061cc <HAL_ADC_ConfigChannel+0x84c>)
 80060d4:	fba2 2303 	umull	r2, r3, r2, r3
 80060d8:	099b      	lsrs	r3, r3, #6
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	4613      	mov	r3, r2
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	4413      	add	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80060e6:	e002      	b.n	80060ee <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1f9      	bne.n	80060e8 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80060f4:	e054      	b.n	80061a0 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a35      	ldr	r2, [pc, #212]	@ (80061d0 <HAL_ADC_ConfigChannel+0x850>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d120      	bne.n	8006142 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006104:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d11a      	bne.n	8006142 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006114:	d144      	bne.n	80061a0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800611e:	d004      	beq.n	800612a <HAL_ADC_ConfigChannel+0x7aa>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a26      	ldr	r2, [pc, #152]	@ (80061c0 <HAL_ADC_ConfigChannel+0x840>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d101      	bne.n	800612e <HAL_ADC_ConfigChannel+0x7ae>
 800612a:	4a26      	ldr	r2, [pc, #152]	@ (80061c4 <HAL_ADC_ConfigChannel+0x844>)
 800612c:	e000      	b.n	8006130 <HAL_ADC_ConfigChannel+0x7b0>
 800612e:	4a21      	ldr	r2, [pc, #132]	@ (80061b4 <HAL_ADC_ConfigChannel+0x834>)
 8006130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006134:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006138:	4619      	mov	r1, r3
 800613a:	4610      	mov	r0, r2
 800613c:	f7fe ff7f 	bl	800503e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006140:	e02e      	b.n	80061a0 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a23      	ldr	r2, [pc, #140]	@ (80061d4 <HAL_ADC_ConfigChannel+0x854>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d129      	bne.n	80061a0 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800614c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006150:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d123      	bne.n	80061a0 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a18      	ldr	r2, [pc, #96]	@ (80061c0 <HAL_ADC_ConfigChannel+0x840>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d01e      	beq.n	80061a0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800616a:	d004      	beq.n	8006176 <HAL_ADC_ConfigChannel+0x7f6>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a13      	ldr	r2, [pc, #76]	@ (80061c0 <HAL_ADC_ConfigChannel+0x840>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d101      	bne.n	800617a <HAL_ADC_ConfigChannel+0x7fa>
 8006176:	4a13      	ldr	r2, [pc, #76]	@ (80061c4 <HAL_ADC_ConfigChannel+0x844>)
 8006178:	e000      	b.n	800617c <HAL_ADC_ConfigChannel+0x7fc>
 800617a:	4a0e      	ldr	r2, [pc, #56]	@ (80061b4 <HAL_ADC_ConfigChannel+0x834>)
 800617c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006180:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f7fe ff59 	bl	800503e <LL_ADC_SetCommonPathInternalCh>
 800618c:	e008      	b.n	80061a0 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006192:	f043 0220 	orr.w	r2, r3, #32
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80061a8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	37d8      	adds	r7, #216	@ 0xd8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	50000700 	.word	0x50000700
 80061b8:	c3210000 	.word	0xc3210000
 80061bc:	90c00010 	.word	0x90c00010
 80061c0:	50000100 	.word	0x50000100
 80061c4:	50000300 	.word	0x50000300
 80061c8:	200000c0 	.word	0x200000c0
 80061cc:	053e2d63 	.word	0x053e2d63
 80061d0:	c7520000 	.word	0xc7520000
 80061d4:	cb840000 	.word	0xcb840000

080061d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80061e0:	2300      	movs	r3, #0
 80061e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7ff f8e5 	bl	80053b8 <LL_ADC_IsEnabled>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d176      	bne.n	80062e2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	4b3c      	ldr	r3, [pc, #240]	@ (80062ec <ADC_Enable+0x114>)
 80061fc:	4013      	ands	r3, r2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00d      	beq.n	800621e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006206:	f043 0210 	orr.w	r2, r3, #16
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006212:	f043 0201 	orr.w	r2, r3, #1
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e062      	b.n	80062e4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff f8b4 	bl	8005390 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006230:	d004      	beq.n	800623c <ADC_Enable+0x64>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a2e      	ldr	r2, [pc, #184]	@ (80062f0 <ADC_Enable+0x118>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d101      	bne.n	8006240 <ADC_Enable+0x68>
 800623c:	4b2d      	ldr	r3, [pc, #180]	@ (80062f4 <ADC_Enable+0x11c>)
 800623e:	e000      	b.n	8006242 <ADC_Enable+0x6a>
 8006240:	4b2d      	ldr	r3, [pc, #180]	@ (80062f8 <ADC_Enable+0x120>)
 8006242:	4618      	mov	r0, r3
 8006244:	f7fe ff0e 	bl	8005064 <LL_ADC_GetCommonPathInternalCh>
 8006248:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800624a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800624e:	2b00      	cmp	r3, #0
 8006250:	d013      	beq.n	800627a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006252:	4b2a      	ldr	r3, [pc, #168]	@ (80062fc <ADC_Enable+0x124>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	099b      	lsrs	r3, r3, #6
 8006258:	4a29      	ldr	r2, [pc, #164]	@ (8006300 <ADC_Enable+0x128>)
 800625a:	fba2 2303 	umull	r2, r3, r2, r3
 800625e:	099b      	lsrs	r3, r3, #6
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	4613      	mov	r3, r2
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	4413      	add	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800626c:	e002      	b.n	8006274 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	3b01      	subs	r3, #1
 8006272:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f9      	bne.n	800626e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800627a:	f7fe fe9f 	bl	8004fbc <HAL_GetTick>
 800627e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006280:	e028      	b.n	80062d4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff f896 	bl	80053b8 <LL_ADC_IsEnabled>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d104      	bne.n	800629c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff f87a 	bl	8005390 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800629c:	f7fe fe8e 	bl	8004fbc <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d914      	bls.n	80062d4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d00d      	beq.n	80062d4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062bc:	f043 0210 	orr.w	r2, r3, #16
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c8:	f043 0201 	orr.w	r2, r3, #1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e007      	b.n	80062e4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d1cf      	bne.n	8006282 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	8000003f 	.word	0x8000003f
 80062f0:	50000100 	.word	0x50000100
 80062f4:	50000300 	.word	0x50000300
 80062f8:	50000700 	.word	0x50000700
 80062fc:	200000c0 	.word	0x200000c0
 8006300:	053e2d63 	.word	0x053e2d63

08006304 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006310:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006316:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800631a:	2b00      	cmp	r3, #0
 800631c:	d14b      	bne.n	80063b6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006322:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b00      	cmp	r3, #0
 8006336:	d021      	beq.n	800637c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4618      	mov	r0, r3
 800633e:	f7fe ff3d 	bl	80051bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d032      	beq.n	80063ae <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d12b      	bne.n	80063ae <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800635a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006366:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d11f      	bne.n	80063ae <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006372:	f043 0201 	orr.w	r2, r3, #1
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	65da      	str	r2, [r3, #92]	@ 0x5c
 800637a:	e018      	b.n	80063ae <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d111      	bne.n	80063ae <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800638e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800639a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d105      	bne.n	80063ae <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063a6:	f043 0201 	orr.w	r2, r3, #1
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f7ff fac8 	bl	8005944 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80063b4:	e00e      	b.n	80063d4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ba:	f003 0310 	and.w	r3, r3, #16
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f7ff fad2 	bl	800596c <HAL_ADC_ErrorCallback>
}
 80063c8:	e004      	b.n	80063d4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	4798      	blx	r3
}
 80063d4:	bf00      	nop
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f7ff fab4 	bl	8005958 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80063f0:	bf00      	nop
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006404:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800640a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006416:	f043 0204 	orr.w	r2, r3, #4
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f7ff faa4 	bl	800596c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <LL_ADC_IsEnabled>:
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <LL_ADC_IsEnabled+0x18>
 8006440:	2301      	movs	r3, #1
 8006442:	e000      	b.n	8006446 <LL_ADC_IsEnabled+0x1a>
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <LL_ADC_REG_IsConversionOngoing>:
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 0304 	and.w	r3, r3, #4
 8006462:	2b04      	cmp	r3, #4
 8006464:	d101      	bne.n	800646a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006466:	2301      	movs	r3, #1
 8006468:	e000      	b.n	800646c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006478:	b590      	push	{r4, r7, lr}
 800647a:	b0a1      	sub	sp, #132	@ 0x84
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800648e:	2b01      	cmp	r3, #1
 8006490:	d101      	bne.n	8006496 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006492:	2302      	movs	r3, #2
 8006494:	e0cb      	b.n	800662e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800649e:	2300      	movs	r3, #0
 80064a0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80064a2:	2300      	movs	r3, #0
 80064a4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064ae:	d102      	bne.n	80064b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80064b0:	4b61      	ldr	r3, [pc, #388]	@ (8006638 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80064b2:	60bb      	str	r3, [r7, #8]
 80064b4:	e001      	b.n	80064ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80064b6:	2300      	movs	r3, #0
 80064b8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10b      	bne.n	80064d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c4:	f043 0220 	orr.w	r2, r3, #32
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0aa      	b.n	800662e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff ffb9 	bl	8006452 <LL_ADC_REG_IsConversionOngoing>
 80064e0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff ffb3 	bl	8006452 <LL_ADC_REG_IsConversionOngoing>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f040 808c 	bne.w	800660c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80064f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f040 8088 	bne.w	800660c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006504:	d004      	beq.n	8006510 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a4b      	ldr	r2, [pc, #300]	@ (8006638 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d101      	bne.n	8006514 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8006510:	4b4a      	ldr	r3, [pc, #296]	@ (800663c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8006512:	e000      	b.n	8006516 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006514:	4b4a      	ldr	r3, [pc, #296]	@ (8006640 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8006516:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d041      	beq.n	80065a4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006520:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	6859      	ldr	r1, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006532:	035b      	lsls	r3, r3, #13
 8006534:	430b      	orrs	r3, r1
 8006536:	431a      	orrs	r2, r3
 8006538:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800653a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006544:	d004      	beq.n	8006550 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a3b      	ldr	r2, [pc, #236]	@ (8006638 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d10f      	bne.n	8006570 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8006550:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006554:	f7ff ff6a 	bl	800642c <LL_ADC_IsEnabled>
 8006558:	4604      	mov	r4, r0
 800655a:	4837      	ldr	r0, [pc, #220]	@ (8006638 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800655c:	f7ff ff66 	bl	800642c <LL_ADC_IsEnabled>
 8006560:	4603      	mov	r3, r0
 8006562:	4323      	orrs	r3, r4
 8006564:	2b00      	cmp	r3, #0
 8006566:	bf0c      	ite	eq
 8006568:	2301      	moveq	r3, #1
 800656a:	2300      	movne	r3, #0
 800656c:	b2db      	uxtb	r3, r3
 800656e:	e008      	b.n	8006582 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8006570:	4834      	ldr	r0, [pc, #208]	@ (8006644 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8006572:	f7ff ff5b 	bl	800642c <LL_ADC_IsEnabled>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	bf0c      	ite	eq
 800657c:	2301      	moveq	r3, #1
 800657e:	2300      	movne	r3, #0
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d04c      	beq.n	8006620 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006586:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800658e:	f023 030f 	bic.w	r3, r3, #15
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	6811      	ldr	r1, [r2, #0]
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	6892      	ldr	r2, [r2, #8]
 800659a:	430a      	orrs	r2, r1
 800659c:	431a      	orrs	r2, r3
 800659e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065a0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80065a2:	e03d      	b.n	8006620 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80065a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80065ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065b8:	d004      	beq.n	80065c4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1e      	ldr	r2, [pc, #120]	@ (8006638 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d10f      	bne.n	80065e4 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80065c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80065c8:	f7ff ff30 	bl	800642c <LL_ADC_IsEnabled>
 80065cc:	4604      	mov	r4, r0
 80065ce:	481a      	ldr	r0, [pc, #104]	@ (8006638 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80065d0:	f7ff ff2c 	bl	800642c <LL_ADC_IsEnabled>
 80065d4:	4603      	mov	r3, r0
 80065d6:	4323      	orrs	r3, r4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bf0c      	ite	eq
 80065dc:	2301      	moveq	r3, #1
 80065de:	2300      	movne	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	e008      	b.n	80065f6 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 80065e4:	4817      	ldr	r0, [pc, #92]	@ (8006644 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80065e6:	f7ff ff21 	bl	800642c <LL_ADC_IsEnabled>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	bf0c      	ite	eq
 80065f0:	2301      	moveq	r3, #1
 80065f2:	2300      	movne	r3, #0
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d012      	beq.n	8006620 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80065fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006602:	f023 030f 	bic.w	r3, r3, #15
 8006606:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006608:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800660a:	e009      	b.n	8006620 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006610:	f043 0220 	orr.w	r2, r3, #32
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800661e:	e000      	b.n	8006622 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006620:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800662a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800662e:	4618      	mov	r0, r3
 8006630:	3784      	adds	r7, #132	@ 0x84
 8006632:	46bd      	mov	sp, r7
 8006634:	bd90      	pop	{r4, r7, pc}
 8006636:	bf00      	nop
 8006638:	50000100 	.word	0x50000100
 800663c:	50000300 	.word	0x50000300
 8006640:	50000700 	.word	0x50000700
 8006644:	50000400 	.word	0x50000400

08006648 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e023      	b.n	80066a2 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fe f9cc 	bl	8004a0c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066bc:	4b0c      	ldr	r3, [pc, #48]	@ (80066f0 <__NVIC_SetPriorityGrouping+0x44>)
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80066c8:	4013      	ands	r3, r2
 80066ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80066d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066de:	4a04      	ldr	r2, [pc, #16]	@ (80066f0 <__NVIC_SetPriorityGrouping+0x44>)
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	60d3      	str	r3, [r2, #12]
}
 80066e4:	bf00      	nop
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	e000ed00 	.word	0xe000ed00

080066f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80066f4:	b480      	push	{r7}
 80066f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066f8:	4b04      	ldr	r3, [pc, #16]	@ (800670c <__NVIC_GetPriorityGrouping+0x18>)
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	0a1b      	lsrs	r3, r3, #8
 80066fe:	f003 0307 	and.w	r3, r3, #7
}
 8006702:	4618      	mov	r0, r3
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	e000ed00 	.word	0xe000ed00

08006710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	4603      	mov	r3, r0
 8006718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800671a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800671e:	2b00      	cmp	r3, #0
 8006720:	db0b      	blt.n	800673a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	f003 021f 	and.w	r2, r3, #31
 8006728:	4907      	ldr	r1, [pc, #28]	@ (8006748 <__NVIC_EnableIRQ+0x38>)
 800672a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	2001      	movs	r0, #1
 8006732:	fa00 f202 	lsl.w	r2, r0, r2
 8006736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800673a:	bf00      	nop
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	e000e100 	.word	0xe000e100

0800674c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	6039      	str	r1, [r7, #0]
 8006756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800675c:	2b00      	cmp	r3, #0
 800675e:	db0a      	blt.n	8006776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	b2da      	uxtb	r2, r3
 8006764:	490c      	ldr	r1, [pc, #48]	@ (8006798 <__NVIC_SetPriority+0x4c>)
 8006766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800676a:	0112      	lsls	r2, r2, #4
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	440b      	add	r3, r1
 8006770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006774:	e00a      	b.n	800678c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	b2da      	uxtb	r2, r3
 800677a:	4908      	ldr	r1, [pc, #32]	@ (800679c <__NVIC_SetPriority+0x50>)
 800677c:	79fb      	ldrb	r3, [r7, #7]
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	3b04      	subs	r3, #4
 8006784:	0112      	lsls	r2, r2, #4
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	440b      	add	r3, r1
 800678a:	761a      	strb	r2, [r3, #24]
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	e000e100 	.word	0xe000e100
 800679c:	e000ed00 	.word	0xe000ed00

080067a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b089      	sub	sp, #36	@ 0x24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f003 0307 	and.w	r3, r3, #7
 80067b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	f1c3 0307 	rsb	r3, r3, #7
 80067ba:	2b04      	cmp	r3, #4
 80067bc:	bf28      	it	cs
 80067be:	2304      	movcs	r3, #4
 80067c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	3304      	adds	r3, #4
 80067c6:	2b06      	cmp	r3, #6
 80067c8:	d902      	bls.n	80067d0 <NVIC_EncodePriority+0x30>
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	3b03      	subs	r3, #3
 80067ce:	e000      	b.n	80067d2 <NVIC_EncodePriority+0x32>
 80067d0:	2300      	movs	r3, #0
 80067d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067d4:	f04f 32ff 	mov.w	r2, #4294967295
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	fa02 f303 	lsl.w	r3, r2, r3
 80067de:	43da      	mvns	r2, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	401a      	ands	r2, r3
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067e8:	f04f 31ff 	mov.w	r1, #4294967295
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	fa01 f303 	lsl.w	r3, r1, r3
 80067f2:	43d9      	mvns	r1, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067f8:	4313      	orrs	r3, r2
         );
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3724      	adds	r7, #36	@ 0x24
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
	...

08006808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3b01      	subs	r3, #1
 8006814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006818:	d301      	bcc.n	800681e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800681a:	2301      	movs	r3, #1
 800681c:	e00f      	b.n	800683e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800681e:	4a0a      	ldr	r2, [pc, #40]	@ (8006848 <SysTick_Config+0x40>)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3b01      	subs	r3, #1
 8006824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006826:	210f      	movs	r1, #15
 8006828:	f04f 30ff 	mov.w	r0, #4294967295
 800682c:	f7ff ff8e 	bl	800674c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006830:	4b05      	ldr	r3, [pc, #20]	@ (8006848 <SysTick_Config+0x40>)
 8006832:	2200      	movs	r2, #0
 8006834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006836:	4b04      	ldr	r3, [pc, #16]	@ (8006848 <SysTick_Config+0x40>)
 8006838:	2207      	movs	r2, #7
 800683a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	e000e010 	.word	0xe000e010

0800684c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff ff29 	bl	80066ac <__NVIC_SetPriorityGrouping>
}
 800685a:	bf00      	nop
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b086      	sub	sp, #24
 8006866:	af00      	add	r7, sp, #0
 8006868:	4603      	mov	r3, r0
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	607a      	str	r2, [r7, #4]
 800686e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006870:	f7ff ff40 	bl	80066f4 <__NVIC_GetPriorityGrouping>
 8006874:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	6978      	ldr	r0, [r7, #20]
 800687c:	f7ff ff90 	bl	80067a0 <NVIC_EncodePriority>
 8006880:	4602      	mov	r2, r0
 8006882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006886:	4611      	mov	r1, r2
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff ff5f 	bl	800674c <__NVIC_SetPriority>
}
 800688e:	bf00      	nop
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	4603      	mov	r3, r0
 800689e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7ff ff33 	bl	8006710 <__NVIC_EnableIRQ>
}
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff ffa4 	bl	8006808 <SysTick_Config>
 80068c0:	4603      	mov	r3, r0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e054      	b.n	8006988 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	7f5b      	ldrb	r3, [r3, #29]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d105      	bne.n	80068f4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fe f8ac 	bl	8004a4c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	791b      	ldrb	r3, [r3, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10c      	bne.n	800691c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a22      	ldr	r2, [pc, #136]	@ (8006990 <HAL_CRC_Init+0xc4>)
 8006908:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0218 	bic.w	r2, r2, #24
 8006918:	609a      	str	r2, [r3, #8]
 800691a:	e00c      	b.n	8006936 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6899      	ldr	r1, [r3, #8]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	461a      	mov	r2, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f834 	bl	8006994 <HAL_CRCEx_Polynomial_Set>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e028      	b.n	8006988 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	795b      	ldrb	r3, [r3, #5]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d105      	bne.n	800694a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f04f 32ff 	mov.w	r2, #4294967295
 8006946:	611a      	str	r2, [r3, #16]
 8006948:	e004      	b.n	8006954 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6912      	ldr	r2, [r2, #16]
 8006952:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	695a      	ldr	r2, [r3, #20]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699a      	ldr	r2, [r3, #24]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	04c11db7 	.word	0x04c11db7

08006994 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069a0:	2300      	movs	r3, #0
 80069a2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80069a4:	231f      	movs	r3, #31
 80069a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d102      	bne.n	80069b8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	75fb      	strb	r3, [r7, #23]
 80069b6:	e063      	b.n	8006a80 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80069b8:	bf00      	nop
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1e5a      	subs	r2, r3, #1
 80069be:	613a      	str	r2, [r7, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d009      	beq.n	80069d8 <HAL_CRCEx_Polynomial_Set+0x44>
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f003 031f 	and.w	r3, r3, #31
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	fa22 f303 	lsr.w	r3, r2, r3
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0f0      	beq.n	80069ba <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b18      	cmp	r3, #24
 80069dc:	d846      	bhi.n	8006a6c <HAL_CRCEx_Polynomial_Set+0xd8>
 80069de:	a201      	add	r2, pc, #4	@ (adr r2, 80069e4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	08006a73 	.word	0x08006a73
 80069e8:	08006a6d 	.word	0x08006a6d
 80069ec:	08006a6d 	.word	0x08006a6d
 80069f0:	08006a6d 	.word	0x08006a6d
 80069f4:	08006a6d 	.word	0x08006a6d
 80069f8:	08006a6d 	.word	0x08006a6d
 80069fc:	08006a6d 	.word	0x08006a6d
 8006a00:	08006a6d 	.word	0x08006a6d
 8006a04:	08006a61 	.word	0x08006a61
 8006a08:	08006a6d 	.word	0x08006a6d
 8006a0c:	08006a6d 	.word	0x08006a6d
 8006a10:	08006a6d 	.word	0x08006a6d
 8006a14:	08006a6d 	.word	0x08006a6d
 8006a18:	08006a6d 	.word	0x08006a6d
 8006a1c:	08006a6d 	.word	0x08006a6d
 8006a20:	08006a6d 	.word	0x08006a6d
 8006a24:	08006a55 	.word	0x08006a55
 8006a28:	08006a6d 	.word	0x08006a6d
 8006a2c:	08006a6d 	.word	0x08006a6d
 8006a30:	08006a6d 	.word	0x08006a6d
 8006a34:	08006a6d 	.word	0x08006a6d
 8006a38:	08006a6d 	.word	0x08006a6d
 8006a3c:	08006a6d 	.word	0x08006a6d
 8006a40:	08006a6d 	.word	0x08006a6d
 8006a44:	08006a49 	.word	0x08006a49
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	2b06      	cmp	r3, #6
 8006a4c:	d913      	bls.n	8006a76 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006a52:	e010      	b.n	8006a76 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2b07      	cmp	r3, #7
 8006a58:	d90f      	bls.n	8006a7a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006a5e:	e00c      	b.n	8006a7a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	2b0f      	cmp	r3, #15
 8006a64:	d90b      	bls.n	8006a7e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006a6a:	e008      	b.n	8006a7e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	75fb      	strb	r3, [r7, #23]
        break;
 8006a70:	e006      	b.n	8006a80 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006a72:	bf00      	nop
 8006a74:	e004      	b.n	8006a80 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006a76:	bf00      	nop
 8006a78:	e002      	b.n	8006a80 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006a7a:	bf00      	nop
 8006a7c:	e000      	b.n	8006a80 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006a7e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10d      	bne.n	8006aa2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f023 0118 	bic.w	r1, r3, #24
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	371c      	adds	r7, #28
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e08d      	b.n	8006bde <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	4b47      	ldr	r3, [pc, #284]	@ (8006be8 <HAL_DMA_Init+0x138>)
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d80f      	bhi.n	8006aee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	4b45      	ldr	r3, [pc, #276]	@ (8006bec <HAL_DMA_Init+0x13c>)
 8006ad6:	4413      	add	r3, r2
 8006ad8:	4a45      	ldr	r2, [pc, #276]	@ (8006bf0 <HAL_DMA_Init+0x140>)
 8006ada:	fba2 2303 	umull	r2, r3, r2, r3
 8006ade:	091b      	lsrs	r3, r3, #4
 8006ae0:	009a      	lsls	r2, r3, #2
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a42      	ldr	r2, [pc, #264]	@ (8006bf4 <HAL_DMA_Init+0x144>)
 8006aea:	641a      	str	r2, [r3, #64]	@ 0x40
 8006aec:	e00e      	b.n	8006b0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	4b40      	ldr	r3, [pc, #256]	@ (8006bf8 <HAL_DMA_Init+0x148>)
 8006af6:	4413      	add	r3, r2
 8006af8:	4a3d      	ldr	r2, [pc, #244]	@ (8006bf0 <HAL_DMA_Init+0x140>)
 8006afa:	fba2 2303 	umull	r2, r3, r2, r3
 8006afe:	091b      	lsrs	r3, r3, #4
 8006b00:	009a      	lsls	r2, r3, #2
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a3c      	ldr	r2, [pc, #240]	@ (8006bfc <HAL_DMA_Init+0x14c>)
 8006b0a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f9b6 	bl	8006ed0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b6c:	d102      	bne.n	8006b74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b7c:	b2d2      	uxtb	r2, r2
 8006b7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b88:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d010      	beq.n	8006bb4 <HAL_DMA_Init+0x104>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d80c      	bhi.n	8006bb4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f9d6 	bl	8006f4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006bb0:	605a      	str	r2, [r3, #4]
 8006bb2:	e008      	b.n	8006bc6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	40020407 	.word	0x40020407
 8006bec:	bffdfff8 	.word	0xbffdfff8
 8006bf0:	cccccccd 	.word	0xcccccccd
 8006bf4:	40020000 	.word	0x40020000
 8006bf8:	bffdfbf8 	.word	0xbffdfbf8
 8006bfc:	40020400 	.word	0x40020400

08006c00 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
 8006c0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d101      	bne.n	8006c20 <HAL_DMA_Start_IT+0x20>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e066      	b.n	8006cee <HAL_DMA_Start_IT+0xee>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d155      	bne.n	8006ce0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0201 	bic.w	r2, r2, #1
 8006c50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 f8fb 	bl	8006e54 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d008      	beq.n	8006c78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f042 020e 	orr.w	r2, r2, #14
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	e00f      	b.n	8006c98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0204 	bic.w	r2, r2, #4
 8006c86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f042 020a 	orr.w	r2, r2, #10
 8006c96:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d007      	beq.n	8006cb6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006cb4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d007      	beq.n	8006cce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ccc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f042 0201 	orr.w	r2, r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	e005      	b.n	8006cec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006ce8:	2302      	movs	r3, #2
 8006cea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d12:	f003 031f 	and.w	r3, r3, #31
 8006d16:	2204      	movs	r2, #4
 8006d18:	409a      	lsls	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d026      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x7a>
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d021      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d107      	bne.n	8006d4a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0204 	bic.w	r2, r2, #4
 8006d48:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d4e:	f003 021f 	and.w	r2, r3, #31
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d56:	2104      	movs	r1, #4
 8006d58:	fa01 f202 	lsl.w	r2, r1, r2
 8006d5c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d071      	beq.n	8006e4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006d6e:	e06c      	b.n	8006e4a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d74:	f003 031f 	and.w	r3, r3, #31
 8006d78:	2202      	movs	r2, #2
 8006d7a:	409a      	lsls	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d02e      	beq.n	8006de2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d029      	beq.n	8006de2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0320 	and.w	r3, r3, #32
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10b      	bne.n	8006db4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 020a 	bic.w	r2, r2, #10
 8006daa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006db8:	f003 021f 	and.w	r2, r3, #31
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc0:	2102      	movs	r1, #2
 8006dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8006dc6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d038      	beq.n	8006e4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006de0:	e033      	b.n	8006e4a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de6:	f003 031f 	and.w	r3, r3, #31
 8006dea:	2208      	movs	r2, #8
 8006dec:	409a      	lsls	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4013      	ands	r3, r2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d02a      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f003 0308 	and.w	r3, r3, #8
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d025      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 020e 	bic.w	r2, r2, #14
 8006e0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e14:	f003 021f 	and.w	r2, r3, #31
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8006e22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d004      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006e4a:	bf00      	nop
 8006e4c:	bf00      	nop
}
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
 8006e60:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006e6a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d004      	beq.n	8006e7e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006e7c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e82:	f003 021f 	and.w	r2, r3, #31
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8006e90:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	2b10      	cmp	r3, #16
 8006ea0:	d108      	bne.n	8006eb4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006eb2:	e007      	b.n	8006ec4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	60da      	str	r2, [r3, #12]
}
 8006ec4:	bf00      	nop
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	461a      	mov	r2, r3
 8006ede:	4b16      	ldr	r3, [pc, #88]	@ (8006f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d802      	bhi.n	8006eea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006ee4:	4b15      	ldr	r3, [pc, #84]	@ (8006f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006ee6:	617b      	str	r3, [r7, #20]
 8006ee8:	e001      	b.n	8006eee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006eea:	4b15      	ldr	r3, [pc, #84]	@ (8006f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006eec:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	3b08      	subs	r3, #8
 8006efa:	4a12      	ldr	r2, [pc, #72]	@ (8006f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006efc:	fba2 2303 	umull	r2, r3, r2, r3
 8006f00:	091b      	lsrs	r3, r3, #4
 8006f02:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f08:	089b      	lsrs	r3, r3, #2
 8006f0a:	009a      	lsls	r2, r3, #2
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	4413      	add	r3, r2
 8006f10:	461a      	mov	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a0b      	ldr	r2, [pc, #44]	@ (8006f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006f1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f003 031f 	and.w	r3, r3, #31
 8006f22:	2201      	movs	r2, #1
 8006f24:	409a      	lsls	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006f2a:	bf00      	nop
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	40020407 	.word	0x40020407
 8006f3c:	40020800 	.word	0x40020800
 8006f40:	40020820 	.word	0x40020820
 8006f44:	cccccccd 	.word	0xcccccccd
 8006f48:	40020880 	.word	0x40020880

08006f4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	461a      	mov	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a08      	ldr	r2, [pc, #32]	@ (8006f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006f6e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	f003 031f 	and.w	r3, r3, #31
 8006f78:	2201      	movs	r2, #1
 8006f7a:	409a      	lsls	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006f80:	bf00      	nop
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	1000823f 	.word	0x1000823f
 8006f90:	40020940 	.word	0x40020940

08006f94 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e147      	b.n	8007236 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7fd fd66 	bl	8004a8c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	699a      	ldr	r2, [r3, #24]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0210 	bic.w	r2, r2, #16
 8006fce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fd0:	f7fd fff4 	bl	8004fbc <HAL_GetTick>
 8006fd4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006fd6:	e012      	b.n	8006ffe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006fd8:	f7fd fff0 	bl	8004fbc <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	2b0a      	cmp	r3, #10
 8006fe4:	d90b      	bls.n	8006ffe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fea:	f043 0201 	orr.w	r2, r3, #1
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2203      	movs	r2, #3
 8006ff6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e11b      	b.n	8007236 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	f003 0308 	and.w	r3, r3, #8
 8007008:	2b08      	cmp	r3, #8
 800700a:	d0e5      	beq.n	8006fd8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699a      	ldr	r2, [r3, #24]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0201 	orr.w	r2, r2, #1
 800701a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800701c:	f7fd ffce 	bl	8004fbc <HAL_GetTick>
 8007020:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007022:	e012      	b.n	800704a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007024:	f7fd ffca 	bl	8004fbc <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b0a      	cmp	r3, #10
 8007030:	d90b      	bls.n	800704a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007036:	f043 0201 	orr.w	r2, r3, #1
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2203      	movs	r2, #3
 8007042:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e0f5      	b.n	8007236 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b00      	cmp	r3, #0
 8007056:	d0e5      	beq.n	8007024 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699a      	ldr	r2, [r3, #24]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0202 	orr.w	r2, r2, #2
 8007066:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a74      	ldr	r2, [pc, #464]	@ (8007240 <HAL_FDCAN_Init+0x2ac>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d103      	bne.n	800707a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007072:	4a74      	ldr	r2, [pc, #464]	@ (8007244 <HAL_FDCAN_Init+0x2b0>)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	7c1b      	ldrb	r3, [r3, #16]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d108      	bne.n	8007094 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	699a      	ldr	r2, [r3, #24]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007090:	619a      	str	r2, [r3, #24]
 8007092:	e007      	b.n	80070a4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	699a      	ldr	r2, [r3, #24]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070a2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	7c5b      	ldrb	r3, [r3, #17]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d108      	bne.n	80070be <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	699a      	ldr	r2, [r3, #24]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070ba:	619a      	str	r2, [r3, #24]
 80070bc:	e007      	b.n	80070ce <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	699a      	ldr	r2, [r3, #24]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80070cc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	7c9b      	ldrb	r3, [r3, #18]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d108      	bne.n	80070e8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	699a      	ldr	r2, [r3, #24]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80070e4:	619a      	str	r2, [r3, #24]
 80070e6:	e007      	b.n	80070f8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070f6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	699a      	ldr	r2, [r3, #24]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800711c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	691a      	ldr	r2, [r3, #16]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 0210 	bic.w	r2, r2, #16
 800712c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d108      	bne.n	8007148 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	699a      	ldr	r2, [r3, #24]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f042 0204 	orr.w	r2, r2, #4
 8007144:	619a      	str	r2, [r3, #24]
 8007146:	e02c      	b.n	80071a2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d028      	beq.n	80071a2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	2b02      	cmp	r3, #2
 8007156:	d01c      	beq.n	8007192 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	699a      	ldr	r2, [r3, #24]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007166:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691a      	ldr	r2, [r3, #16]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0210 	orr.w	r2, r2, #16
 8007176:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	2b03      	cmp	r3, #3
 800717e:	d110      	bne.n	80071a2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699a      	ldr	r2, [r3, #24]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f042 0220 	orr.w	r2, r2, #32
 800718e:	619a      	str	r2, [r3, #24]
 8007190:	e007      	b.n	80071a2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	699a      	ldr	r2, [r3, #24]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f042 0220 	orr.w	r2, r2, #32
 80071a0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80071b2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80071ba:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80071ca:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80071cc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071d6:	d115      	bne.n	8007204 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071dc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e2:	3b01      	subs	r3, #1
 80071e4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80071e6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ec:	3b01      	subs	r3, #1
 80071ee:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80071f0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f8:	3b01      	subs	r3, #1
 80071fa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007200:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007202:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f9ae 	bl	800757c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	40006400 	.word	0x40006400
 8007244:	40006500 	.word	0x40006500

08007248 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08c      	sub	sp, #48	@ 0x30
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007256:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800725a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007264:	4013      	ands	r3, r2
 8007266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800727a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800727c:	4013      	ands	r3, r2
 800727e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007286:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800728a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007294:	4013      	ands	r3, r2
 8007296:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800729e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80072a2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072aa:	6a3a      	ldr	r2, [r7, #32]
 80072ac:	4013      	ands	r3, r2
 80072ae:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80072ba:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072c2:	69fa      	ldr	r2, [r7, #28]
 80072c4:	4013      	ands	r3, r2
 80072c6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ce:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072d6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00b      	beq.n	80072fa <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d006      	beq.n	80072fa <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2240      	movs	r2, #64	@ 0x40
 80072f2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f921 	bl	800753c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007300:	2b00      	cmp	r3, #0
 8007302:	d019      	beq.n	8007338 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800730a:	2b00      	cmp	r3, #0
 800730c:	d014      	beq.n	8007338 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007316:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	4013      	ands	r3, r2
 8007324:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800732e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007330:	6939      	ldr	r1, [r7, #16]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f8e3 	bl	80074fe <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d007      	beq.n	800734e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007344:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007346:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f8a2 	bl	8007492 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800734e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007350:	2b00      	cmp	r3, #0
 8007352:	d007      	beq.n	8007364 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800735a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800735c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f8a2 	bl	80074a8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007366:	2b00      	cmp	r3, #0
 8007368:	d007      	beq.n	800737a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007370:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007372:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f8a2 	bl	80074be <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00c      	beq.n	800739e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800738a:	2b00      	cmp	r3, #0
 800738c:	d007      	beq.n	800739e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007396:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f89b 	bl	80074d4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d018      	beq.n	80073da <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d013      	beq.n	80073da <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80073ba:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4013      	ands	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2280      	movs	r2, #128	@ 0x80
 80073d0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80073d2:	68f9      	ldr	r1, [r7, #12]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f887 	bl	80074e8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00c      	beq.n	80073fe <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d007      	beq.n	80073fe <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80073f6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f88b 	bl	8007514 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00c      	beq.n	8007422 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d007      	beq.n	8007422 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800741a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f883 	bl	8007528 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00f      	beq.n	800744c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800743e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007444:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d007      	beq.n	8007462 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69fa      	ldr	r2, [r7, #28]
 8007458:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800745a:	69f9      	ldr	r1, [r7, #28]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f881 	bl	8007564 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d009      	beq.n	800747c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6a3a      	ldr	r2, [r7, #32]
 800746e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	431a      	orrs	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f863 	bl	8007550 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800748a:	bf00      	nop
 800748c:	3730      	adds	r7, #48	@ 0x30
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800756e:	bf00      	nop
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
	...

0800757c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007584:	4b2c      	ldr	r3, [pc, #176]	@ (8007638 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8007586:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a2b      	ldr	r2, [pc, #172]	@ (800763c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d103      	bne.n	800759a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007598:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075a8:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075b0:	041a      	lsls	r2, r3, #16
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ce:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d6:	061a      	lsls	r2, r3, #24
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	e005      	b.n	800761c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	3304      	adds	r3, #4
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	429a      	cmp	r2, r3
 8007626:	d3f3      	bcc.n	8007610 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8007628:	bf00      	nop
 800762a:	bf00      	nop
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	4000a400 	.word	0x4000a400
 800763c:	40006800 	.word	0x40006800

08007640 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e033      	b.n	80076ba <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d106      	bne.n	800766c <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7fd fa72 	bl	8004b50 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f854 	bl	8007720 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f822 	bl	80076c2 <FMAC_Reset>
 800767e:	4603      	mov	r3, r0
 8007680:	2b01      	cmp	r3, #1
 8007682:	d10c      	bne.n	800769e <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007688:	f043 0210 	orr.w	r2, r3, #16
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	22a0      	movs	r2, #160	@ 0xa0
 8007694:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	73fb      	strb	r3, [r7, #15]
 800769c:	e008      	b.n	80076b0 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076ca:	f7fd fc77 	bl	8004fbc <HAL_GetTick>
 80076ce:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	691a      	ldr	r2, [r3, #16]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80076de:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80076e0:	e00f      	b.n	8007702 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80076e2:	f7fd fc6b 	bl	8004fbc <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80076f0:	d907      	bls.n	8007702 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e00a      	b.n	8007718 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e8      	bne.n	80076e2 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f807 	bl	800773c <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f81b 	bl	800776a <FMAC_ResetOutputStateAndDataPointers>
}
 8007734:	bf00      	nop
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2220      	movs	r2, #32
 800775a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 800775e:	bf00      	nop
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2220      	movs	r2, #32
 8007788:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80077a6:	e15a      	b.n	8007a5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	2101      	movs	r1, #1
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	fa01 f303 	lsl.w	r3, r1, r3
 80077b4:	4013      	ands	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 814c 	beq.w	8007a58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f003 0303 	and.w	r3, r3, #3
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d005      	beq.n	80077d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d130      	bne.n	800783a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	2203      	movs	r2, #3
 80077e4:	fa02 f303 	lsl.w	r3, r2, r3
 80077e8:	43db      	mvns	r3, r3
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	4013      	ands	r3, r2
 80077ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	68da      	ldr	r2, [r3, #12]
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	fa02 f303 	lsl.w	r3, r2, r3
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	4313      	orrs	r3, r2
 8007800:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800780e:	2201      	movs	r2, #1
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	fa02 f303 	lsl.w	r3, r2, r3
 8007816:	43db      	mvns	r3, r3
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	4013      	ands	r3, r2
 800781c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	091b      	lsrs	r3, r3, #4
 8007824:	f003 0201 	and.w	r2, r3, #1
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	fa02 f303 	lsl.w	r3, r2, r3
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	4313      	orrs	r3, r2
 8007832:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	2b03      	cmp	r3, #3
 8007844:	d017      	beq.n	8007876 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	2203      	movs	r2, #3
 8007852:	fa02 f303 	lsl.w	r3, r2, r3
 8007856:	43db      	mvns	r3, r3
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	4013      	ands	r3, r2
 800785c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	fa02 f303 	lsl.w	r3, r2, r3
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	4313      	orrs	r3, r2
 800786e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f003 0303 	and.w	r3, r3, #3
 800787e:	2b02      	cmp	r3, #2
 8007880:	d123      	bne.n	80078ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	08da      	lsrs	r2, r3, #3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	3208      	adds	r2, #8
 800788a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	220f      	movs	r2, #15
 800789a:	fa02 f303 	lsl.w	r3, r2, r3
 800789e:	43db      	mvns	r3, r3
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	4013      	ands	r3, r2
 80078a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	691a      	ldr	r2, [r3, #16]
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f003 0307 	and.w	r3, r3, #7
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	fa02 f303 	lsl.w	r3, r2, r3
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	08da      	lsrs	r2, r3, #3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3208      	adds	r2, #8
 80078c4:	6939      	ldr	r1, [r7, #16]
 80078c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	2203      	movs	r2, #3
 80078d6:	fa02 f303 	lsl.w	r3, r2, r3
 80078da:	43db      	mvns	r3, r3
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	4013      	ands	r3, r2
 80078e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f003 0203 	and.w	r2, r3, #3
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	fa02 f303 	lsl.w	r3, r2, r3
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 80a6 	beq.w	8007a58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800790c:	4b5b      	ldr	r3, [pc, #364]	@ (8007a7c <HAL_GPIO_Init+0x2e4>)
 800790e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007910:	4a5a      	ldr	r2, [pc, #360]	@ (8007a7c <HAL_GPIO_Init+0x2e4>)
 8007912:	f043 0301 	orr.w	r3, r3, #1
 8007916:	6613      	str	r3, [r2, #96]	@ 0x60
 8007918:	4b58      	ldr	r3, [pc, #352]	@ (8007a7c <HAL_GPIO_Init+0x2e4>)
 800791a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	60bb      	str	r3, [r7, #8]
 8007922:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007924:	4a56      	ldr	r2, [pc, #344]	@ (8007a80 <HAL_GPIO_Init+0x2e8>)
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	089b      	lsrs	r3, r3, #2
 800792a:	3302      	adds	r3, #2
 800792c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007930:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f003 0303 	and.w	r3, r3, #3
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	220f      	movs	r2, #15
 800793c:	fa02 f303 	lsl.w	r3, r2, r3
 8007940:	43db      	mvns	r3, r3
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	4013      	ands	r3, r2
 8007946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800794e:	d01f      	beq.n	8007990 <HAL_GPIO_Init+0x1f8>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a4c      	ldr	r2, [pc, #304]	@ (8007a84 <HAL_GPIO_Init+0x2ec>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d019      	beq.n	800798c <HAL_GPIO_Init+0x1f4>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a4b      	ldr	r2, [pc, #300]	@ (8007a88 <HAL_GPIO_Init+0x2f0>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d013      	beq.n	8007988 <HAL_GPIO_Init+0x1f0>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a4a      	ldr	r2, [pc, #296]	@ (8007a8c <HAL_GPIO_Init+0x2f4>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d00d      	beq.n	8007984 <HAL_GPIO_Init+0x1ec>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a49      	ldr	r2, [pc, #292]	@ (8007a90 <HAL_GPIO_Init+0x2f8>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d007      	beq.n	8007980 <HAL_GPIO_Init+0x1e8>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a48      	ldr	r2, [pc, #288]	@ (8007a94 <HAL_GPIO_Init+0x2fc>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d101      	bne.n	800797c <HAL_GPIO_Init+0x1e4>
 8007978:	2305      	movs	r3, #5
 800797a:	e00a      	b.n	8007992 <HAL_GPIO_Init+0x1fa>
 800797c:	2306      	movs	r3, #6
 800797e:	e008      	b.n	8007992 <HAL_GPIO_Init+0x1fa>
 8007980:	2304      	movs	r3, #4
 8007982:	e006      	b.n	8007992 <HAL_GPIO_Init+0x1fa>
 8007984:	2303      	movs	r3, #3
 8007986:	e004      	b.n	8007992 <HAL_GPIO_Init+0x1fa>
 8007988:	2302      	movs	r3, #2
 800798a:	e002      	b.n	8007992 <HAL_GPIO_Init+0x1fa>
 800798c:	2301      	movs	r3, #1
 800798e:	e000      	b.n	8007992 <HAL_GPIO_Init+0x1fa>
 8007990:	2300      	movs	r3, #0
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	f002 0203 	and.w	r2, r2, #3
 8007998:	0092      	lsls	r2, r2, #2
 800799a:	4093      	lsls	r3, r2
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	4313      	orrs	r3, r2
 80079a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079a2:	4937      	ldr	r1, [pc, #220]	@ (8007a80 <HAL_GPIO_Init+0x2e8>)
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	089b      	lsrs	r3, r3, #2
 80079a8:	3302      	adds	r3, #2
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80079b0:	4b39      	ldr	r3, [pc, #228]	@ (8007a98 <HAL_GPIO_Init+0x300>)
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	43db      	mvns	r3, r3
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	4013      	ands	r3, r2
 80079be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d003      	beq.n	80079d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80079d4:	4a30      	ldr	r2, [pc, #192]	@ (8007a98 <HAL_GPIO_Init+0x300>)
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80079da:	4b2f      	ldr	r3, [pc, #188]	@ (8007a98 <HAL_GPIO_Init+0x300>)
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	43db      	mvns	r3, r3
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	4013      	ands	r3, r2
 80079e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80079fe:	4a26      	ldr	r2, [pc, #152]	@ (8007a98 <HAL_GPIO_Init+0x300>)
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007a04:	4b24      	ldr	r3, [pc, #144]	@ (8007a98 <HAL_GPIO_Init+0x300>)
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	43db      	mvns	r3, r3
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	4013      	ands	r3, r2
 8007a12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007a28:	4a1b      	ldr	r2, [pc, #108]	@ (8007a98 <HAL_GPIO_Init+0x300>)
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8007a98 <HAL_GPIO_Init+0x300>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	43db      	mvns	r3, r3
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007a52:	4a11      	ldr	r2, [pc, #68]	@ (8007a98 <HAL_GPIO_Init+0x300>)
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	fa22 f303 	lsr.w	r3, r2, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f47f ae9d 	bne.w	80077a8 <HAL_GPIO_Init+0x10>
  }
}
 8007a6e:	bf00      	nop
 8007a70:	bf00      	nop
 8007a72:	371c      	adds	r7, #28
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	40021000 	.word	0x40021000
 8007a80:	40010000 	.word	0x40010000
 8007a84:	48000400 	.word	0x48000400
 8007a88:	48000800 	.word	0x48000800
 8007a8c:	48000c00 	.word	0x48000c00
 8007a90:	48001000 	.word	0x48001000
 8007a94:	48001400 	.word	0x48001400
 8007a98:	40010400 	.word	0x40010400

08007a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	807b      	strh	r3, [r7, #2]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007aac:	787b      	ldrb	r3, [r7, #1]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007ab2:	887a      	ldrh	r2, [r7, #2]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007ab8:	e002      	b.n	8007ac0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007aba:	887a      	ldrh	r2, [r7, #2]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d141      	bne.n	8007b5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ada:	4b4b      	ldr	r3, [pc, #300]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ae6:	d131      	bne.n	8007b4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ae8:	4b47      	ldr	r3, [pc, #284]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aee:	4a46      	ldr	r2, [pc, #280]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007af4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007af8:	4b43      	ldr	r3, [pc, #268]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007b00:	4a41      	ldr	r2, [pc, #260]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007b08:	4b40      	ldr	r3, [pc, #256]	@ (8007c0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2232      	movs	r2, #50	@ 0x32
 8007b0e:	fb02 f303 	mul.w	r3, r2, r3
 8007b12:	4a3f      	ldr	r2, [pc, #252]	@ (8007c10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007b14:	fba2 2303 	umull	r2, r3, r2, r3
 8007b18:	0c9b      	lsrs	r3, r3, #18
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b1e:	e002      	b.n	8007b26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b26:	4b38      	ldr	r3, [pc, #224]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b32:	d102      	bne.n	8007b3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1f2      	bne.n	8007b20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b3a:	4b33      	ldr	r3, [pc, #204]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b46:	d158      	bne.n	8007bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e057      	b.n	8007bfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b52:	4a2d      	ldr	r2, [pc, #180]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007b5c:	e04d      	b.n	8007bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b64:	d141      	bne.n	8007bea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007b66:	4b28      	ldr	r3, [pc, #160]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b72:	d131      	bne.n	8007bd8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b74:	4b24      	ldr	r3, [pc, #144]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b7a:	4a23      	ldr	r2, [pc, #140]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b84:	4b20      	ldr	r3, [pc, #128]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007b8c:	4a1e      	ldr	r2, [pc, #120]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007b94:	4b1d      	ldr	r3, [pc, #116]	@ (8007c0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2232      	movs	r2, #50	@ 0x32
 8007b9a:	fb02 f303 	mul.w	r3, r2, r3
 8007b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8007c10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba4:	0c9b      	lsrs	r3, r3, #18
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007baa:	e002      	b.n	8007bb2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007bb2:	4b15      	ldr	r3, [pc, #84]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bbe:	d102      	bne.n	8007bc6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1f2      	bne.n	8007bac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007bc6:	4b10      	ldr	r3, [pc, #64]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bd2:	d112      	bne.n	8007bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e011      	b.n	8007bfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bde:	4a0a      	ldr	r2, [pc, #40]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007be4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007be8:	e007      	b.n	8007bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007bea:	4b07      	ldr	r3, [pc, #28]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007bf2:	4a05      	ldr	r2, [pc, #20]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bf4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007bf8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	40007000 	.word	0x40007000
 8007c0c:	200000c0 	.word	0x200000c0
 8007c10:	431bde83 	.word	0x431bde83

08007c14 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007c14:	b480      	push	{r7}
 8007c16:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007c18:	4b05      	ldr	r3, [pc, #20]	@ (8007c30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	4a04      	ldr	r2, [pc, #16]	@ (8007c30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007c1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c22:	6093      	str	r3, [r2, #8]
}
 8007c24:	bf00      	nop
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	40007000 	.word	0x40007000

08007c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b088      	sub	sp, #32
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e2fe      	b.n	8008244 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d075      	beq.n	8007d3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c52:	4b97      	ldr	r3, [pc, #604]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f003 030c 	and.w	r3, r3, #12
 8007c5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c5c:	4b94      	ldr	r3, [pc, #592]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	f003 0303 	and.w	r3, r3, #3
 8007c64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	2b0c      	cmp	r3, #12
 8007c6a:	d102      	bne.n	8007c72 <HAL_RCC_OscConfig+0x3e>
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d002      	beq.n	8007c78 <HAL_RCC_OscConfig+0x44>
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	2b08      	cmp	r3, #8
 8007c76:	d10b      	bne.n	8007c90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c78:	4b8d      	ldr	r3, [pc, #564]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d05b      	beq.n	8007d3c <HAL_RCC_OscConfig+0x108>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d157      	bne.n	8007d3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e2d9      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c98:	d106      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x74>
 8007c9a:	4b85      	ldr	r3, [pc, #532]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a84      	ldr	r2, [pc, #528]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ca4:	6013      	str	r3, [r2, #0]
 8007ca6:	e01d      	b.n	8007ce4 <HAL_RCC_OscConfig+0xb0>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007cb0:	d10c      	bne.n	8007ccc <HAL_RCC_OscConfig+0x98>
 8007cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a7e      	ldr	r2, [pc, #504]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	4b7c      	ldr	r3, [pc, #496]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a7b      	ldr	r2, [pc, #492]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	e00b      	b.n	8007ce4 <HAL_RCC_OscConfig+0xb0>
 8007ccc:	4b78      	ldr	r3, [pc, #480]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a77      	ldr	r2, [pc, #476]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	4b75      	ldr	r3, [pc, #468]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a74      	ldr	r2, [pc, #464]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007cde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d013      	beq.n	8007d14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cec:	f7fd f966 	bl	8004fbc <HAL_GetTick>
 8007cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007cf2:	e008      	b.n	8007d06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cf4:	f7fd f962 	bl	8004fbc <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	2b64      	cmp	r3, #100	@ 0x64
 8007d00:	d901      	bls.n	8007d06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e29e      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d06:	4b6a      	ldr	r3, [pc, #424]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0f0      	beq.n	8007cf4 <HAL_RCC_OscConfig+0xc0>
 8007d12:	e014      	b.n	8007d3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d14:	f7fd f952 	bl	8004fbc <HAL_GetTick>
 8007d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d1a:	e008      	b.n	8007d2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d1c:	f7fd f94e 	bl	8004fbc <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	2b64      	cmp	r3, #100	@ 0x64
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e28a      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d2e:	4b60      	ldr	r3, [pc, #384]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1f0      	bne.n	8007d1c <HAL_RCC_OscConfig+0xe8>
 8007d3a:	e000      	b.n	8007d3e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d075      	beq.n	8007e36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d4a:	4b59      	ldr	r3, [pc, #356]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f003 030c 	and.w	r3, r3, #12
 8007d52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d54:	4b56      	ldr	r3, [pc, #344]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f003 0303 	and.w	r3, r3, #3
 8007d5c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	2b0c      	cmp	r3, #12
 8007d62:	d102      	bne.n	8007d6a <HAL_RCC_OscConfig+0x136>
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d002      	beq.n	8007d70 <HAL_RCC_OscConfig+0x13c>
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	2b04      	cmp	r3, #4
 8007d6e:	d11f      	bne.n	8007db0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d70:	4b4f      	ldr	r3, [pc, #316]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_RCC_OscConfig+0x154>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e25d      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d88:	4b49      	ldr	r3, [pc, #292]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	061b      	lsls	r3, r3, #24
 8007d96:	4946      	ldr	r1, [pc, #280]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007d9c:	4b45      	ldr	r3, [pc, #276]	@ (8007eb4 <HAL_RCC_OscConfig+0x280>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fd f8bf 	bl	8004f24 <HAL_InitTick>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d043      	beq.n	8007e34 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e249      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d023      	beq.n	8007e00 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007db8:	4b3d      	ldr	r3, [pc, #244]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a3c      	ldr	r2, [pc, #240]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc4:	f7fd f8fa 	bl	8004fbc <HAL_GetTick>
 8007dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007dca:	e008      	b.n	8007dde <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dcc:	f7fd f8f6 	bl	8004fbc <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d901      	bls.n	8007dde <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e232      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007dde:	4b34      	ldr	r3, [pc, #208]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0f0      	beq.n	8007dcc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dea:	4b31      	ldr	r3, [pc, #196]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	061b      	lsls	r3, r3, #24
 8007df8:	492d      	ldr	r1, [pc, #180]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	604b      	str	r3, [r1, #4]
 8007dfe:	e01a      	b.n	8007e36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e00:	4b2b      	ldr	r3, [pc, #172]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a2a      	ldr	r2, [pc, #168]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007e06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e0c:	f7fd f8d6 	bl	8004fbc <HAL_GetTick>
 8007e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e12:	e008      	b.n	8007e26 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e14:	f7fd f8d2 	bl	8004fbc <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d901      	bls.n	8007e26 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e20e      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e26:	4b22      	ldr	r3, [pc, #136]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1f0      	bne.n	8007e14 <HAL_RCC_OscConfig+0x1e0>
 8007e32:	e000      	b.n	8007e36 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0308 	and.w	r3, r3, #8
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d041      	beq.n	8007ec6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d01c      	beq.n	8007e84 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e4a:	4b19      	ldr	r3, [pc, #100]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e50:	4a17      	ldr	r2, [pc, #92]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007e52:	f043 0301 	orr.w	r3, r3, #1
 8007e56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e5a:	f7fd f8af 	bl	8004fbc <HAL_GetTick>
 8007e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007e60:	e008      	b.n	8007e74 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e62:	f7fd f8ab 	bl	8004fbc <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d901      	bls.n	8007e74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e1e7      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007e74:	4b0e      	ldr	r3, [pc, #56]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d0ef      	beq.n	8007e62 <HAL_RCC_OscConfig+0x22e>
 8007e82:	e020      	b.n	8007ec6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e84:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e8a:	4a09      	ldr	r2, [pc, #36]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007e8c:	f023 0301 	bic.w	r3, r3, #1
 8007e90:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e94:	f7fd f892 	bl	8004fbc <HAL_GetTick>
 8007e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e9a:	e00d      	b.n	8007eb8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e9c:	f7fd f88e 	bl	8004fbc <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d906      	bls.n	8007eb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e1ca      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
 8007eae:	bf00      	nop
 8007eb0:	40021000 	.word	0x40021000
 8007eb4:	200000c4 	.word	0x200000c4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007eb8:	4b8c      	ldr	r3, [pc, #560]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8007eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ebe:	f003 0302 	and.w	r3, r3, #2
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1ea      	bne.n	8007e9c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0304 	and.w	r3, r3, #4
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 80a6 	beq.w	8008020 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007ed8:	4b84      	ldr	r3, [pc, #528]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8007eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x2b4>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e000      	b.n	8007eea <HAL_RCC_OscConfig+0x2b6>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00d      	beq.n	8007f0a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007eee:	4b7f      	ldr	r3, [pc, #508]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8007ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ef2:	4a7e      	ldr	r2, [pc, #504]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8007ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ef8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007efa:	4b7c      	ldr	r3, [pc, #496]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8007efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007f06:	2301      	movs	r3, #1
 8007f08:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f0a:	4b79      	ldr	r3, [pc, #484]	@ (80080f0 <HAL_RCC_OscConfig+0x4bc>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d118      	bne.n	8007f48 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f16:	4b76      	ldr	r3, [pc, #472]	@ (80080f0 <HAL_RCC_OscConfig+0x4bc>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a75      	ldr	r2, [pc, #468]	@ (80080f0 <HAL_RCC_OscConfig+0x4bc>)
 8007f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f22:	f7fd f84b 	bl	8004fbc <HAL_GetTick>
 8007f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f28:	e008      	b.n	8007f3c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f2a:	f7fd f847 	bl	8004fbc <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d901      	bls.n	8007f3c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e183      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f3c:	4b6c      	ldr	r3, [pc, #432]	@ (80080f0 <HAL_RCC_OscConfig+0x4bc>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d0f0      	beq.n	8007f2a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d108      	bne.n	8007f62 <HAL_RCC_OscConfig+0x32e>
 8007f50:	4b66      	ldr	r3, [pc, #408]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8007f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f56:	4a65      	ldr	r2, [pc, #404]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8007f58:	f043 0301 	orr.w	r3, r3, #1
 8007f5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007f60:	e024      	b.n	8007fac <HAL_RCC_OscConfig+0x378>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	2b05      	cmp	r3, #5
 8007f68:	d110      	bne.n	8007f8c <HAL_RCC_OscConfig+0x358>
 8007f6a:	4b60      	ldr	r3, [pc, #384]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8007f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f70:	4a5e      	ldr	r2, [pc, #376]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8007f72:	f043 0304 	orr.w	r3, r3, #4
 8007f76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8007f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f80:	4a5a      	ldr	r2, [pc, #360]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8007f82:	f043 0301 	orr.w	r3, r3, #1
 8007f86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007f8a:	e00f      	b.n	8007fac <HAL_RCC_OscConfig+0x378>
 8007f8c:	4b57      	ldr	r3, [pc, #348]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8007f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f92:	4a56      	ldr	r2, [pc, #344]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8007f94:	f023 0301 	bic.w	r3, r3, #1
 8007f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007f9c:	4b53      	ldr	r3, [pc, #332]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8007f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fa2:	4a52      	ldr	r2, [pc, #328]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8007fa4:	f023 0304 	bic.w	r3, r3, #4
 8007fa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d016      	beq.n	8007fe2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fb4:	f7fd f802 	bl	8004fbc <HAL_GetTick>
 8007fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fba:	e00a      	b.n	8007fd2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fbc:	f7fc fffe 	bl	8004fbc <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d901      	bls.n	8007fd2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e138      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fd2:	4b46      	ldr	r3, [pc, #280]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8007fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0ed      	beq.n	8007fbc <HAL_RCC_OscConfig+0x388>
 8007fe0:	e015      	b.n	800800e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fe2:	f7fc ffeb 	bl	8004fbc <HAL_GetTick>
 8007fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007fe8:	e00a      	b.n	8008000 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fea:	f7fc ffe7 	bl	8004fbc <HAL_GetTick>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d901      	bls.n	8008000 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e121      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008000:	4b3a      	ldr	r3, [pc, #232]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8008002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008006:	f003 0302 	and.w	r3, r3, #2
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1ed      	bne.n	8007fea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800800e:	7ffb      	ldrb	r3, [r7, #31]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d105      	bne.n	8008020 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008014:	4b35      	ldr	r3, [pc, #212]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8008016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008018:	4a34      	ldr	r2, [pc, #208]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 800801a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800801e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b00      	cmp	r3, #0
 800802a:	d03c      	beq.n	80080a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d01c      	beq.n	800806e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008034:	4b2d      	ldr	r3, [pc, #180]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8008036:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800803a:	4a2c      	ldr	r2, [pc, #176]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 800803c:	f043 0301 	orr.w	r3, r3, #1
 8008040:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008044:	f7fc ffba 	bl	8004fbc <HAL_GetTick>
 8008048:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800804a:	e008      	b.n	800805e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800804c:	f7fc ffb6 	bl	8004fbc <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	2b02      	cmp	r3, #2
 8008058:	d901      	bls.n	800805e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e0f2      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800805e:	4b23      	ldr	r3, [pc, #140]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8008060:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008064:	f003 0302 	and.w	r3, r3, #2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d0ef      	beq.n	800804c <HAL_RCC_OscConfig+0x418>
 800806c:	e01b      	b.n	80080a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800806e:	4b1f      	ldr	r3, [pc, #124]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8008070:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008074:	4a1d      	ldr	r2, [pc, #116]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 8008076:	f023 0301 	bic.w	r3, r3, #1
 800807a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800807e:	f7fc ff9d 	bl	8004fbc <HAL_GetTick>
 8008082:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008084:	e008      	b.n	8008098 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008086:	f7fc ff99 	bl	8004fbc <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	2b02      	cmp	r3, #2
 8008092:	d901      	bls.n	8008098 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e0d5      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008098:	4b14      	ldr	r3, [pc, #80]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 800809a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1ef      	bne.n	8008086 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 80c9 	beq.w	8008242 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080b0:	4b0e      	ldr	r3, [pc, #56]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f003 030c 	and.w	r3, r3, #12
 80080b8:	2b0c      	cmp	r3, #12
 80080ba:	f000 8083 	beq.w	80081c4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d15e      	bne.n	8008184 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080c6:	4b09      	ldr	r3, [pc, #36]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a08      	ldr	r2, [pc, #32]	@ (80080ec <HAL_RCC_OscConfig+0x4b8>)
 80080cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d2:	f7fc ff73 	bl	8004fbc <HAL_GetTick>
 80080d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080d8:	e00c      	b.n	80080f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080da:	f7fc ff6f 	bl	8004fbc <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d905      	bls.n	80080f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e0ab      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
 80080ec:	40021000 	.word	0x40021000
 80080f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080f4:	4b55      	ldr	r3, [pc, #340]	@ (800824c <HAL_RCC_OscConfig+0x618>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1ec      	bne.n	80080da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008100:	4b52      	ldr	r3, [pc, #328]	@ (800824c <HAL_RCC_OscConfig+0x618>)
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	4b52      	ldr	r3, [pc, #328]	@ (8008250 <HAL_RCC_OscConfig+0x61c>)
 8008106:	4013      	ands	r3, r2
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	6a11      	ldr	r1, [r2, #32]
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008110:	3a01      	subs	r2, #1
 8008112:	0112      	lsls	r2, r2, #4
 8008114:	4311      	orrs	r1, r2
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800811a:	0212      	lsls	r2, r2, #8
 800811c:	4311      	orrs	r1, r2
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008122:	0852      	lsrs	r2, r2, #1
 8008124:	3a01      	subs	r2, #1
 8008126:	0552      	lsls	r2, r2, #21
 8008128:	4311      	orrs	r1, r2
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800812e:	0852      	lsrs	r2, r2, #1
 8008130:	3a01      	subs	r2, #1
 8008132:	0652      	lsls	r2, r2, #25
 8008134:	4311      	orrs	r1, r2
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800813a:	06d2      	lsls	r2, r2, #27
 800813c:	430a      	orrs	r2, r1
 800813e:	4943      	ldr	r1, [pc, #268]	@ (800824c <HAL_RCC_OscConfig+0x618>)
 8008140:	4313      	orrs	r3, r2
 8008142:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008144:	4b41      	ldr	r3, [pc, #260]	@ (800824c <HAL_RCC_OscConfig+0x618>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a40      	ldr	r2, [pc, #256]	@ (800824c <HAL_RCC_OscConfig+0x618>)
 800814a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800814e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008150:	4b3e      	ldr	r3, [pc, #248]	@ (800824c <HAL_RCC_OscConfig+0x618>)
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	4a3d      	ldr	r2, [pc, #244]	@ (800824c <HAL_RCC_OscConfig+0x618>)
 8008156:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800815a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800815c:	f7fc ff2e 	bl	8004fbc <HAL_GetTick>
 8008160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008162:	e008      	b.n	8008176 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008164:	f7fc ff2a 	bl	8004fbc <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d901      	bls.n	8008176 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e066      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008176:	4b35      	ldr	r3, [pc, #212]	@ (800824c <HAL_RCC_OscConfig+0x618>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d0f0      	beq.n	8008164 <HAL_RCC_OscConfig+0x530>
 8008182:	e05e      	b.n	8008242 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008184:	4b31      	ldr	r3, [pc, #196]	@ (800824c <HAL_RCC_OscConfig+0x618>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a30      	ldr	r2, [pc, #192]	@ (800824c <HAL_RCC_OscConfig+0x618>)
 800818a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800818e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008190:	f7fc ff14 	bl	8004fbc <HAL_GetTick>
 8008194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008196:	e008      	b.n	80081aa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008198:	f7fc ff10 	bl	8004fbc <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d901      	bls.n	80081aa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e04c      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081aa:	4b28      	ldr	r3, [pc, #160]	@ (800824c <HAL_RCC_OscConfig+0x618>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1f0      	bne.n	8008198 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80081b6:	4b25      	ldr	r3, [pc, #148]	@ (800824c <HAL_RCC_OscConfig+0x618>)
 80081b8:	68da      	ldr	r2, [r3, #12]
 80081ba:	4924      	ldr	r1, [pc, #144]	@ (800824c <HAL_RCC_OscConfig+0x618>)
 80081bc:	4b25      	ldr	r3, [pc, #148]	@ (8008254 <HAL_RCC_OscConfig+0x620>)
 80081be:	4013      	ands	r3, r2
 80081c0:	60cb      	str	r3, [r1, #12]
 80081c2:	e03e      	b.n	8008242 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d101      	bne.n	80081d0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e039      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80081d0:	4b1e      	ldr	r3, [pc, #120]	@ (800824c <HAL_RCC_OscConfig+0x618>)
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f003 0203 	and.w	r2, r3, #3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d12c      	bne.n	800823e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ee:	3b01      	subs	r3, #1
 80081f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d123      	bne.n	800823e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008200:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008202:	429a      	cmp	r2, r3
 8008204:	d11b      	bne.n	800823e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008210:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008212:	429a      	cmp	r2, r3
 8008214:	d113      	bne.n	800823e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008220:	085b      	lsrs	r3, r3, #1
 8008222:	3b01      	subs	r3, #1
 8008224:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008226:	429a      	cmp	r2, r3
 8008228:	d109      	bne.n	800823e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008234:	085b      	lsrs	r3, r3, #1
 8008236:	3b01      	subs	r3, #1
 8008238:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800823a:	429a      	cmp	r2, r3
 800823c:	d001      	beq.n	8008242 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e000      	b.n	8008244 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3720      	adds	r7, #32
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	40021000 	.word	0x40021000
 8008250:	019f800c 	.word	0x019f800c
 8008254:	feeefffc 	.word	0xfeeefffc

08008258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008262:	2300      	movs	r3, #0
 8008264:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	e11e      	b.n	80084ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008270:	4b91      	ldr	r3, [pc, #580]	@ (80084b8 <HAL_RCC_ClockConfig+0x260>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 030f 	and.w	r3, r3, #15
 8008278:	683a      	ldr	r2, [r7, #0]
 800827a:	429a      	cmp	r2, r3
 800827c:	d910      	bls.n	80082a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800827e:	4b8e      	ldr	r3, [pc, #568]	@ (80084b8 <HAL_RCC_ClockConfig+0x260>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f023 020f 	bic.w	r2, r3, #15
 8008286:	498c      	ldr	r1, [pc, #560]	@ (80084b8 <HAL_RCC_ClockConfig+0x260>)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	4313      	orrs	r3, r2
 800828c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800828e:	4b8a      	ldr	r3, [pc, #552]	@ (80084b8 <HAL_RCC_ClockConfig+0x260>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 030f 	and.w	r3, r3, #15
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	429a      	cmp	r2, r3
 800829a:	d001      	beq.n	80082a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	e106      	b.n	80084ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d073      	beq.n	8008394 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d129      	bne.n	8008308 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082b4:	4b81      	ldr	r3, [pc, #516]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d101      	bne.n	80082c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e0f4      	b.n	80084ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80082c4:	f000 f966 	bl	8008594 <RCC_GetSysClockFreqFromPLLSource>
 80082c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	4a7c      	ldr	r2, [pc, #496]	@ (80084c0 <HAL_RCC_ClockConfig+0x268>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d93f      	bls.n	8008352 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80082d2:	4b7a      	ldr	r3, [pc, #488]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d009      	beq.n	80082f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d033      	beq.n	8008352 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d12f      	bne.n	8008352 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80082f2:	4b72      	ldr	r3, [pc, #456]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80082fa:	4a70      	ldr	r2, [pc, #448]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 80082fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008300:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008302:	2380      	movs	r3, #128	@ 0x80
 8008304:	617b      	str	r3, [r7, #20]
 8008306:	e024      	b.n	8008352 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	2b02      	cmp	r3, #2
 800830e:	d107      	bne.n	8008320 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008310:	4b6a      	ldr	r3, [pc, #424]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008318:	2b00      	cmp	r3, #0
 800831a:	d109      	bne.n	8008330 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e0c6      	b.n	80084ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008320:	4b66      	ldr	r3, [pc, #408]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008328:	2b00      	cmp	r3, #0
 800832a:	d101      	bne.n	8008330 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e0be      	b.n	80084ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008330:	f000 f8ce 	bl	80084d0 <HAL_RCC_GetSysClockFreq>
 8008334:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	4a61      	ldr	r2, [pc, #388]	@ (80084c0 <HAL_RCC_ClockConfig+0x268>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d909      	bls.n	8008352 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800833e:	4b5f      	ldr	r3, [pc, #380]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008346:	4a5d      	ldr	r2, [pc, #372]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 8008348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800834c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800834e:	2380      	movs	r3, #128	@ 0x80
 8008350:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008352:	4b5a      	ldr	r3, [pc, #360]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f023 0203 	bic.w	r2, r3, #3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	4957      	ldr	r1, [pc, #348]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 8008360:	4313      	orrs	r3, r2
 8008362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008364:	f7fc fe2a 	bl	8004fbc <HAL_GetTick>
 8008368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800836a:	e00a      	b.n	8008382 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800836c:	f7fc fe26 	bl	8004fbc <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800837a:	4293      	cmp	r3, r2
 800837c:	d901      	bls.n	8008382 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e095      	b.n	80084ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008382:	4b4e      	ldr	r3, [pc, #312]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f003 020c 	and.w	r2, r3, #12
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	429a      	cmp	r2, r3
 8008392:	d1eb      	bne.n	800836c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0302 	and.w	r3, r3, #2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d023      	beq.n	80083e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d005      	beq.n	80083b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083ac:	4b43      	ldr	r3, [pc, #268]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	4a42      	ldr	r2, [pc, #264]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 80083b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80083b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0308 	and.w	r3, r3, #8
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d007      	beq.n	80083d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80083c4:	4b3d      	ldr	r3, [pc, #244]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80083cc:	4a3b      	ldr	r2, [pc, #236]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 80083ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80083d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083d4:	4b39      	ldr	r3, [pc, #228]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	4936      	ldr	r1, [pc, #216]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	608b      	str	r3, [r1, #8]
 80083e6:	e008      	b.n	80083fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	2b80      	cmp	r3, #128	@ 0x80
 80083ec:	d105      	bne.n	80083fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80083ee:	4b33      	ldr	r3, [pc, #204]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	4a32      	ldr	r2, [pc, #200]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 80083f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083fa:	4b2f      	ldr	r3, [pc, #188]	@ (80084b8 <HAL_RCC_ClockConfig+0x260>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 030f 	and.w	r3, r3, #15
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	429a      	cmp	r2, r3
 8008406:	d21d      	bcs.n	8008444 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008408:	4b2b      	ldr	r3, [pc, #172]	@ (80084b8 <HAL_RCC_ClockConfig+0x260>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f023 020f 	bic.w	r2, r3, #15
 8008410:	4929      	ldr	r1, [pc, #164]	@ (80084b8 <HAL_RCC_ClockConfig+0x260>)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	4313      	orrs	r3, r2
 8008416:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008418:	f7fc fdd0 	bl	8004fbc <HAL_GetTick>
 800841c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800841e:	e00a      	b.n	8008436 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008420:	f7fc fdcc 	bl	8004fbc <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800842e:	4293      	cmp	r3, r2
 8008430:	d901      	bls.n	8008436 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e03b      	b.n	80084ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008436:	4b20      	ldr	r3, [pc, #128]	@ (80084b8 <HAL_RCC_ClockConfig+0x260>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 030f 	and.w	r3, r3, #15
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	429a      	cmp	r2, r3
 8008442:	d1ed      	bne.n	8008420 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0304 	and.w	r3, r3, #4
 800844c:	2b00      	cmp	r3, #0
 800844e:	d008      	beq.n	8008462 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008450:	4b1a      	ldr	r3, [pc, #104]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	4917      	ldr	r1, [pc, #92]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 800845e:	4313      	orrs	r3, r2
 8008460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0308 	and.w	r3, r3, #8
 800846a:	2b00      	cmp	r3, #0
 800846c:	d009      	beq.n	8008482 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800846e:	4b13      	ldr	r3, [pc, #76]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	00db      	lsls	r3, r3, #3
 800847c:	490f      	ldr	r1, [pc, #60]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 800847e:	4313      	orrs	r3, r2
 8008480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008482:	f000 f825 	bl	80084d0 <HAL_RCC_GetSysClockFreq>
 8008486:	4602      	mov	r2, r0
 8008488:	4b0c      	ldr	r3, [pc, #48]	@ (80084bc <HAL_RCC_ClockConfig+0x264>)
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	091b      	lsrs	r3, r3, #4
 800848e:	f003 030f 	and.w	r3, r3, #15
 8008492:	490c      	ldr	r1, [pc, #48]	@ (80084c4 <HAL_RCC_ClockConfig+0x26c>)
 8008494:	5ccb      	ldrb	r3, [r1, r3]
 8008496:	f003 031f 	and.w	r3, r3, #31
 800849a:	fa22 f303 	lsr.w	r3, r2, r3
 800849e:	4a0a      	ldr	r2, [pc, #40]	@ (80084c8 <HAL_RCC_ClockConfig+0x270>)
 80084a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80084a2:	4b0a      	ldr	r3, [pc, #40]	@ (80084cc <HAL_RCC_ClockConfig+0x274>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fc fd3c 	bl	8004f24 <HAL_InitTick>
 80084ac:	4603      	mov	r3, r0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	40022000 	.word	0x40022000
 80084bc:	40021000 	.word	0x40021000
 80084c0:	04c4b400 	.word	0x04c4b400
 80084c4:	0800c054 	.word	0x0800c054
 80084c8:	200000c0 	.word	0x200000c0
 80084cc:	200000c4 	.word	0x200000c4

080084d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b087      	sub	sp, #28
 80084d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80084d6:	4b2c      	ldr	r3, [pc, #176]	@ (8008588 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f003 030c 	and.w	r3, r3, #12
 80084de:	2b04      	cmp	r3, #4
 80084e0:	d102      	bne.n	80084e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80084e2:	4b2a      	ldr	r3, [pc, #168]	@ (800858c <HAL_RCC_GetSysClockFreq+0xbc>)
 80084e4:	613b      	str	r3, [r7, #16]
 80084e6:	e047      	b.n	8008578 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80084e8:	4b27      	ldr	r3, [pc, #156]	@ (8008588 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f003 030c 	and.w	r3, r3, #12
 80084f0:	2b08      	cmp	r3, #8
 80084f2:	d102      	bne.n	80084fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80084f4:	4b26      	ldr	r3, [pc, #152]	@ (8008590 <HAL_RCC_GetSysClockFreq+0xc0>)
 80084f6:	613b      	str	r3, [r7, #16]
 80084f8:	e03e      	b.n	8008578 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80084fa:	4b23      	ldr	r3, [pc, #140]	@ (8008588 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f003 030c 	and.w	r3, r3, #12
 8008502:	2b0c      	cmp	r3, #12
 8008504:	d136      	bne.n	8008574 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008506:	4b20      	ldr	r3, [pc, #128]	@ (8008588 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f003 0303 	and.w	r3, r3, #3
 800850e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008510:	4b1d      	ldr	r3, [pc, #116]	@ (8008588 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	091b      	lsrs	r3, r3, #4
 8008516:	f003 030f 	and.w	r3, r3, #15
 800851a:	3301      	adds	r3, #1
 800851c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b03      	cmp	r3, #3
 8008522:	d10c      	bne.n	800853e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008524:	4a1a      	ldr	r2, [pc, #104]	@ (8008590 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	fbb2 f3f3 	udiv	r3, r2, r3
 800852c:	4a16      	ldr	r2, [pc, #88]	@ (8008588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800852e:	68d2      	ldr	r2, [r2, #12]
 8008530:	0a12      	lsrs	r2, r2, #8
 8008532:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008536:	fb02 f303 	mul.w	r3, r2, r3
 800853a:	617b      	str	r3, [r7, #20]
      break;
 800853c:	e00c      	b.n	8008558 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800853e:	4a13      	ldr	r2, [pc, #76]	@ (800858c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	fbb2 f3f3 	udiv	r3, r2, r3
 8008546:	4a10      	ldr	r2, [pc, #64]	@ (8008588 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008548:	68d2      	ldr	r2, [r2, #12]
 800854a:	0a12      	lsrs	r2, r2, #8
 800854c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008550:	fb02 f303 	mul.w	r3, r2, r3
 8008554:	617b      	str	r3, [r7, #20]
      break;
 8008556:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008558:	4b0b      	ldr	r3, [pc, #44]	@ (8008588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	0e5b      	lsrs	r3, r3, #25
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	3301      	adds	r3, #1
 8008564:	005b      	lsls	r3, r3, #1
 8008566:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008570:	613b      	str	r3, [r7, #16]
 8008572:	e001      	b.n	8008578 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008574:	2300      	movs	r3, #0
 8008576:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008578:	693b      	ldr	r3, [r7, #16]
}
 800857a:	4618      	mov	r0, r3
 800857c:	371c      	adds	r7, #28
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	40021000 	.word	0x40021000
 800858c:	00f42400 	.word	0x00f42400
 8008590:	007a1200 	.word	0x007a1200

08008594 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008594:	b480      	push	{r7}
 8008596:	b087      	sub	sp, #28
 8008598:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800859a:	4b1e      	ldr	r3, [pc, #120]	@ (8008614 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	f003 0303 	and.w	r3, r3, #3
 80085a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80085a4:	4b1b      	ldr	r3, [pc, #108]	@ (8008614 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	091b      	lsrs	r3, r3, #4
 80085aa:	f003 030f 	and.w	r3, r3, #15
 80085ae:	3301      	adds	r3, #1
 80085b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d10c      	bne.n	80085d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085b8:	4a17      	ldr	r2, [pc, #92]	@ (8008618 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c0:	4a14      	ldr	r2, [pc, #80]	@ (8008614 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085c2:	68d2      	ldr	r2, [r2, #12]
 80085c4:	0a12      	lsrs	r2, r2, #8
 80085c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80085ca:	fb02 f303 	mul.w	r3, r2, r3
 80085ce:	617b      	str	r3, [r7, #20]
    break;
 80085d0:	e00c      	b.n	80085ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085d2:	4a12      	ldr	r2, [pc, #72]	@ (800861c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085da:	4a0e      	ldr	r2, [pc, #56]	@ (8008614 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085dc:	68d2      	ldr	r2, [r2, #12]
 80085de:	0a12      	lsrs	r2, r2, #8
 80085e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80085e4:	fb02 f303 	mul.w	r3, r2, r3
 80085e8:	617b      	str	r3, [r7, #20]
    break;
 80085ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80085ec:	4b09      	ldr	r3, [pc, #36]	@ (8008614 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	0e5b      	lsrs	r3, r3, #25
 80085f2:	f003 0303 	and.w	r3, r3, #3
 80085f6:	3301      	adds	r3, #1
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	fbb2 f3f3 	udiv	r3, r2, r3
 8008604:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008606:	687b      	ldr	r3, [r7, #4]
}
 8008608:	4618      	mov	r0, r3
 800860a:	371c      	adds	r7, #28
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr
 8008614:	40021000 	.word	0x40021000
 8008618:	007a1200 	.word	0x007a1200
 800861c:	00f42400 	.word	0x00f42400

08008620 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008628:	2300      	movs	r3, #0
 800862a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800862c:	2300      	movs	r3, #0
 800862e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 8098 	beq.w	800876e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800863e:	2300      	movs	r3, #0
 8008640:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008642:	4b43      	ldr	r3, [pc, #268]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10d      	bne.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800864e:	4b40      	ldr	r3, [pc, #256]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008652:	4a3f      	ldr	r2, [pc, #252]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008658:	6593      	str	r3, [r2, #88]	@ 0x58
 800865a:	4b3d      	ldr	r3, [pc, #244]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800865c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800865e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008662:	60bb      	str	r3, [r7, #8]
 8008664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008666:	2301      	movs	r3, #1
 8008668:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800866a:	4b3a      	ldr	r3, [pc, #232]	@ (8008754 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a39      	ldr	r2, [pc, #228]	@ (8008754 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008674:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008676:	f7fc fca1 	bl	8004fbc <HAL_GetTick>
 800867a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800867c:	e009      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800867e:	f7fc fc9d 	bl	8004fbc <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	2b02      	cmp	r3, #2
 800868a:	d902      	bls.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	74fb      	strb	r3, [r7, #19]
        break;
 8008690:	e005      	b.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008692:	4b30      	ldr	r3, [pc, #192]	@ (8008754 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800869a:	2b00      	cmp	r3, #0
 800869c:	d0ef      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800869e:	7cfb      	ldrb	r3, [r7, #19]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d159      	bne.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80086a4:	4b2a      	ldr	r3, [pc, #168]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d01e      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086ba:	697a      	ldr	r2, [r7, #20]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d019      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80086c0:	4b23      	ldr	r3, [pc, #140]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086cc:	4b20      	ldr	r3, [pc, #128]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086d2:	4a1f      	ldr	r2, [pc, #124]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80086ec:	4a18      	ldr	r2, [pc, #96]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d016      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086fe:	f7fc fc5d 	bl	8004fbc <HAL_GetTick>
 8008702:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008704:	e00b      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008706:	f7fc fc59 	bl	8004fbc <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008714:	4293      	cmp	r3, r2
 8008716:	d902      	bls.n	800871e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	74fb      	strb	r3, [r7, #19]
            break;
 800871c:	e006      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800871e:	4b0c      	ldr	r3, [pc, #48]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	2b00      	cmp	r3, #0
 800872a:	d0ec      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800872c:	7cfb      	ldrb	r3, [r7, #19]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10b      	bne.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008732:	4b07      	ldr	r3, [pc, #28]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008738:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008740:	4903      	ldr	r1, [pc, #12]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008742:	4313      	orrs	r3, r2
 8008744:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008748:	e008      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800874a:	7cfb      	ldrb	r3, [r7, #19]
 800874c:	74bb      	strb	r3, [r7, #18]
 800874e:	e005      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008750:	40021000 	.word	0x40021000
 8008754:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008758:	7cfb      	ldrb	r3, [r7, #19]
 800875a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800875c:	7c7b      	ldrb	r3, [r7, #17]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d105      	bne.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008762:	4ba7      	ldr	r3, [pc, #668]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008766:	4aa6      	ldr	r2, [pc, #664]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008768:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800876c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00a      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800877a:	4ba1      	ldr	r3, [pc, #644]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800877c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008780:	f023 0203 	bic.w	r2, r3, #3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	499d      	ldr	r1, [pc, #628]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800878a:	4313      	orrs	r3, r2
 800878c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00a      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800879c:	4b98      	ldr	r3, [pc, #608]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800879e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087a2:	f023 020c 	bic.w	r2, r3, #12
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	4995      	ldr	r1, [pc, #596]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0304 	and.w	r3, r3, #4
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00a      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80087be:	4b90      	ldr	r3, [pc, #576]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	498c      	ldr	r1, [pc, #560]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0308 	and.w	r3, r3, #8
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00a      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80087e0:	4b87      	ldr	r3, [pc, #540]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	4984      	ldr	r1, [pc, #528]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0310 	and.w	r3, r3, #16
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00a      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008802:	4b7f      	ldr	r3, [pc, #508]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008808:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	497b      	ldr	r1, [pc, #492]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008812:	4313      	orrs	r3, r2
 8008814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0320 	and.w	r3, r3, #32
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00a      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008824:	4b76      	ldr	r3, [pc, #472]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800882a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	4973      	ldr	r1, [pc, #460]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008834:	4313      	orrs	r3, r2
 8008836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00a      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008846:	4b6e      	ldr	r3, [pc, #440]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800884c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	496a      	ldr	r1, [pc, #424]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008856:	4313      	orrs	r3, r2
 8008858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00a      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008868:	4b65      	ldr	r3, [pc, #404]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800886a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800886e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	4962      	ldr	r1, [pc, #392]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008878:	4313      	orrs	r3, r2
 800887a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00a      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800888a:	4b5d      	ldr	r3, [pc, #372]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800888c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008890:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008898:	4959      	ldr	r1, [pc, #356]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800889a:	4313      	orrs	r3, r2
 800889c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00a      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088ac:	4b54      	ldr	r3, [pc, #336]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088b2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ba:	4951      	ldr	r1, [pc, #324]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d015      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088ce:	4b4c      	ldr	r3, [pc, #304]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088d4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088dc:	4948      	ldr	r1, [pc, #288]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088ec:	d105      	bne.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088ee:	4b44      	ldr	r3, [pc, #272]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	4a43      	ldr	r2, [pc, #268]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088f8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008902:	2b00      	cmp	r3, #0
 8008904:	d015      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008906:	4b3e      	ldr	r3, [pc, #248]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800890c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008914:	493a      	ldr	r1, [pc, #232]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008916:	4313      	orrs	r3, r2
 8008918:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008920:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008924:	d105      	bne.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008926:	4b36      	ldr	r3, [pc, #216]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	4a35      	ldr	r2, [pc, #212]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800892c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008930:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d015      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800893e:	4b30      	ldr	r3, [pc, #192]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008944:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800894c:	492c      	ldr	r1, [pc, #176]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800894e:	4313      	orrs	r3, r2
 8008950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008958:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800895c:	d105      	bne.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800895e:	4b28      	ldr	r3, [pc, #160]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	4a27      	ldr	r2, [pc, #156]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008964:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008968:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d015      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008976:	4b22      	ldr	r3, [pc, #136]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800897c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008984:	491e      	ldr	r1, [pc, #120]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008986:	4313      	orrs	r3, r2
 8008988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008990:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008994:	d105      	bne.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008996:	4b1a      	ldr	r3, [pc, #104]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	4a19      	ldr	r2, [pc, #100]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800899c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089a0:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d015      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089ae:	4b14      	ldr	r3, [pc, #80]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089bc:	4910      	ldr	r1, [pc, #64]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089cc:	d105      	bne.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	4a0b      	ldr	r2, [pc, #44]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089d8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d018      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80089e6:	4b06      	ldr	r3, [pc, #24]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089ec:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f4:	4902      	ldr	r1, [pc, #8]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089f6:	4313      	orrs	r3, r2
 80089f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	e001      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008a00:	40021000 	.word	0x40021000
 8008a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a0a:	d105      	bne.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008a0c:	4b21      	ldr	r3, [pc, #132]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	4a20      	ldr	r2, [pc, #128]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008a12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a16:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d015      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008a24:	4b1b      	ldr	r3, [pc, #108]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a2a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a32:	4918      	ldr	r1, [pc, #96]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a42:	d105      	bne.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008a44:	4b13      	ldr	r3, [pc, #76]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	4a12      	ldr	r2, [pc, #72]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008a4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a4e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d015      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a6a:	490a      	ldr	r1, [pc, #40]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a7a:	d105      	bne.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a7c:	4b05      	ldr	r3, [pc, #20]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	4a04      	ldr	r2, [pc, #16]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008a82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008a88:	7cbb      	ldrb	r3, [r7, #18]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	40021000 	.word	0x40021000

08008a98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d101      	bne.n	8008aaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e09d      	b.n	8008be6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d108      	bne.n	8008ac4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008aba:	d009      	beq.n	8008ad0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	61da      	str	r2, [r3, #28]
 8008ac2:	e005      	b.n	8008ad0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d106      	bne.n	8008af0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7fc f850 	bl	8004b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2202      	movs	r2, #2
 8008af4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b10:	d902      	bls.n	8008b18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008b12:	2300      	movs	r3, #0
 8008b14:	60fb      	str	r3, [r7, #12]
 8008b16:	e002      	b.n	8008b1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008b26:	d007      	beq.n	8008b38 <HAL_SPI_Init+0xa0>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b30:	d002      	beq.n	8008b38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008b48:	431a      	orrs	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	431a      	orrs	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	431a      	orrs	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b66:	431a      	orrs	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b70:	431a      	orrs	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b7a:	ea42 0103 	orr.w	r1, r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b82:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	0c1b      	lsrs	r3, r3, #16
 8008b94:	f003 0204 	and.w	r2, r3, #4
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b9c:	f003 0310 	and.w	r3, r3, #16
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ba6:	f003 0308 	and.w	r3, r3, #8
 8008baa:	431a      	orrs	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008bb4:	ea42 0103 	orr.w	r1, r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	69da      	ldr	r2, [r3, #28]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008bd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b08a      	sub	sp, #40	@ 0x28
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	60b9      	str	r1, [r7, #8]
 8008bf8:	607a      	str	r2, [r7, #4]
 8008bfa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d101      	bne.n	8008c14 <HAL_SPI_TransmitReceive+0x26>
 8008c10:	2302      	movs	r3, #2
 8008c12:	e20a      	b.n	800902a <HAL_SPI_TransmitReceive+0x43c>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c1c:	f7fc f9ce 	bl	8004fbc <HAL_GetTick>
 8008c20:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c28:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008c30:	887b      	ldrh	r3, [r7, #2]
 8008c32:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008c34:	887b      	ldrh	r3, [r7, #2]
 8008c36:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c38:	7efb      	ldrb	r3, [r7, #27]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d00e      	beq.n	8008c5c <HAL_SPI_TransmitReceive+0x6e>
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c44:	d106      	bne.n	8008c54 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d102      	bne.n	8008c54 <HAL_SPI_TransmitReceive+0x66>
 8008c4e:	7efb      	ldrb	r3, [r7, #27]
 8008c50:	2b04      	cmp	r3, #4
 8008c52:	d003      	beq.n	8008c5c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008c54:	2302      	movs	r3, #2
 8008c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008c5a:	e1e0      	b.n	800901e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d005      	beq.n	8008c6e <HAL_SPI_TransmitReceive+0x80>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <HAL_SPI_TransmitReceive+0x80>
 8008c68:	887b      	ldrh	r3, [r7, #2]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d103      	bne.n	8008c76 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008c74:	e1d3      	b.n	800901e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b04      	cmp	r3, #4
 8008c80:	d003      	beq.n	8008c8a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2205      	movs	r2, #5
 8008c86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	887a      	ldrh	r2, [r7, #2]
 8008c9a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	887a      	ldrh	r2, [r7, #2]
 8008ca2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	887a      	ldrh	r2, [r7, #2]
 8008cb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	887a      	ldrh	r2, [r7, #2]
 8008cb6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ccc:	d802      	bhi.n	8008cd4 <HAL_SPI_TransmitReceive+0xe6>
 8008cce:	8a3b      	ldrh	r3, [r7, #16]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d908      	bls.n	8008ce6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685a      	ldr	r2, [r3, #4]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008ce2:	605a      	str	r2, [r3, #4]
 8008ce4:	e007      	b.n	8008cf6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008cf4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d00:	2b40      	cmp	r3, #64	@ 0x40
 8008d02:	d007      	beq.n	8008d14 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008d1c:	f240 8081 	bls.w	8008e22 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d002      	beq.n	8008d2e <HAL_SPI_TransmitReceive+0x140>
 8008d28:	8a7b      	ldrh	r3, [r7, #18]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d16d      	bne.n	8008e0a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d32:	881a      	ldrh	r2, [r3, #0]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d3e:	1c9a      	adds	r2, r3, #2
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d52:	e05a      	b.n	8008e0a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f003 0302 	and.w	r3, r3, #2
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d11b      	bne.n	8008d9a <HAL_SPI_TransmitReceive+0x1ac>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d016      	beq.n	8008d9a <HAL_SPI_TransmitReceive+0x1ac>
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d113      	bne.n	8008d9a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d76:	881a      	ldrh	r2, [r3, #0]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d82:	1c9a      	adds	r2, r3, #2
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f003 0301 	and.w	r3, r3, #1
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d11c      	bne.n	8008de2 <HAL_SPI_TransmitReceive+0x1f4>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d016      	beq.n	8008de2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68da      	ldr	r2, [r3, #12]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dbe:	b292      	uxth	r2, r2
 8008dc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc6:	1c9a      	adds	r2, r3, #2
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008dde:	2301      	movs	r3, #1
 8008de0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008de2:	f7fc f8eb 	bl	8004fbc <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d80b      	bhi.n	8008e0a <HAL_SPI_TransmitReceive+0x21c>
 8008df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df8:	d007      	beq.n	8008e0a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008e08:	e109      	b.n	800901e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d19f      	bne.n	8008d54 <HAL_SPI_TransmitReceive+0x166>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d199      	bne.n	8008d54 <HAL_SPI_TransmitReceive+0x166>
 8008e20:	e0e3      	b.n	8008fea <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <HAL_SPI_TransmitReceive+0x244>
 8008e2a:	8a7b      	ldrh	r3, [r7, #18]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	f040 80cf 	bne.w	8008fd0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d912      	bls.n	8008e62 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e40:	881a      	ldrh	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4c:	1c9a      	adds	r2, r3, #2
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	3b02      	subs	r3, #2
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008e60:	e0b6      	b.n	8008fd0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	330c      	adds	r3, #12
 8008e6c:	7812      	ldrb	r2, [r2, #0]
 8008e6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	3b01      	subs	r3, #1
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e88:	e0a2      	b.n	8008fd0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f003 0302 	and.w	r3, r3, #2
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d134      	bne.n	8008f02 <HAL_SPI_TransmitReceive+0x314>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d02f      	beq.n	8008f02 <HAL_SPI_TransmitReceive+0x314>
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d12c      	bne.n	8008f02 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d912      	bls.n	8008ed8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb6:	881a      	ldrh	r2, [r3, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec2:	1c9a      	adds	r2, r3, #2
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	3b02      	subs	r3, #2
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ed6:	e012      	b.n	8008efe <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	330c      	adds	r3, #12
 8008ee2:	7812      	ldrb	r2, [r2, #0]
 8008ee4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eea:	1c5a      	adds	r2, r3, #1
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	f003 0301 	and.w	r3, r3, #1
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d148      	bne.n	8008fa2 <HAL_SPI_TransmitReceive+0x3b4>
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d042      	beq.n	8008fa2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d923      	bls.n	8008f70 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68da      	ldr	r2, [r3, #12]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f32:	b292      	uxth	r2, r2
 8008f34:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f3a:	1c9a      	adds	r2, r3, #2
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	3b02      	subs	r3, #2
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d81f      	bhi.n	8008f9e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	685a      	ldr	r2, [r3, #4]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008f6c:	605a      	str	r2, [r3, #4]
 8008f6e:	e016      	b.n	8008f9e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f103 020c 	add.w	r2, r3, #12
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f7c:	7812      	ldrb	r2, [r2, #0]
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	3b01      	subs	r3, #1
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008fa2:	f7fc f80b 	bl	8004fbc <HAL_GetTick>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d803      	bhi.n	8008fba <HAL_SPI_TransmitReceive+0x3cc>
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb8:	d102      	bne.n	8008fc0 <HAL_SPI_TransmitReceive+0x3d2>
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d107      	bne.n	8008fd0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008fce:	e026      	b.n	800901e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f47f af57 	bne.w	8008e8a <HAL_SPI_TransmitReceive+0x29c>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f47f af50 	bne.w	8008e8a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fea:	69fa      	ldr	r2, [r7, #28]
 8008fec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 f93e 	bl	8009270 <SPI_EndRxTxTransaction>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d005      	beq.n	8009006 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2220      	movs	r2, #32
 8009004:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800900a:	2b00      	cmp	r3, #0
 800900c:	d003      	beq.n	8009016 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009014:	e003      	b.n	800901e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009026:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800902a:	4618      	mov	r0, r3
 800902c:	3728      	adds	r7, #40	@ 0x28
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
	...

08009034 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b088      	sub	sp, #32
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	603b      	str	r3, [r7, #0]
 8009040:	4613      	mov	r3, r2
 8009042:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009044:	f7fb ffba 	bl	8004fbc <HAL_GetTick>
 8009048:	4602      	mov	r2, r0
 800904a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800904c:	1a9b      	subs	r3, r3, r2
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	4413      	add	r3, r2
 8009052:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009054:	f7fb ffb2 	bl	8004fbc <HAL_GetTick>
 8009058:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800905a:	4b39      	ldr	r3, [pc, #228]	@ (8009140 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	015b      	lsls	r3, r3, #5
 8009060:	0d1b      	lsrs	r3, r3, #20
 8009062:	69fa      	ldr	r2, [r7, #28]
 8009064:	fb02 f303 	mul.w	r3, r2, r3
 8009068:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800906a:	e054      	b.n	8009116 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009072:	d050      	beq.n	8009116 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009074:	f7fb ffa2 	bl	8004fbc <HAL_GetTick>
 8009078:	4602      	mov	r2, r0
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	69fa      	ldr	r2, [r7, #28]
 8009080:	429a      	cmp	r2, r3
 8009082:	d902      	bls.n	800908a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d13d      	bne.n	8009106 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009098:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090a2:	d111      	bne.n	80090c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090ac:	d004      	beq.n	80090b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090b6:	d107      	bne.n	80090c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090d0:	d10f      	bne.n	80090f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80090e0:	601a      	str	r2, [r3, #0]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80090f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009102:	2303      	movs	r3, #3
 8009104:	e017      	b.n	8009136 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d101      	bne.n	8009110 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800910c:	2300      	movs	r3, #0
 800910e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	3b01      	subs	r3, #1
 8009114:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689a      	ldr	r2, [r3, #8]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	4013      	ands	r3, r2
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	429a      	cmp	r2, r3
 8009124:	bf0c      	ite	eq
 8009126:	2301      	moveq	r3, #1
 8009128:	2300      	movne	r3, #0
 800912a:	b2db      	uxtb	r3, r3
 800912c:	461a      	mov	r2, r3
 800912e:	79fb      	ldrb	r3, [r7, #7]
 8009130:	429a      	cmp	r2, r3
 8009132:	d19b      	bne.n	800906c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3720      	adds	r7, #32
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	200000c0 	.word	0x200000c0

08009144 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b08a      	sub	sp, #40	@ 0x28
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
 8009150:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009152:	2300      	movs	r3, #0
 8009154:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009156:	f7fb ff31 	bl	8004fbc <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915e:	1a9b      	subs	r3, r3, r2
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	4413      	add	r3, r2
 8009164:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009166:	f7fb ff29 	bl	8004fbc <HAL_GetTick>
 800916a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	330c      	adds	r3, #12
 8009172:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009174:	4b3d      	ldr	r3, [pc, #244]	@ (800926c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	4613      	mov	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	00da      	lsls	r2, r3, #3
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	0d1b      	lsrs	r3, r3, #20
 8009184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009186:	fb02 f303 	mul.w	r3, r2, r3
 800918a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800918c:	e060      	b.n	8009250 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009194:	d107      	bne.n	80091a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d104      	bne.n	80091a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ac:	d050      	beq.n	8009250 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091ae:	f7fb ff05 	bl	8004fbc <HAL_GetTick>
 80091b2:	4602      	mov	r2, r0
 80091b4:	6a3b      	ldr	r3, [r7, #32]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d902      	bls.n	80091c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80091be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d13d      	bne.n	8009240 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80091d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091dc:	d111      	bne.n	8009202 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091e6:	d004      	beq.n	80091f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091f0:	d107      	bne.n	8009202 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009200:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800920a:	d10f      	bne.n	800922c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800922a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e010      	b.n	8009262 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d101      	bne.n	800924a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009246:	2300      	movs	r3, #0
 8009248:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	3b01      	subs	r3, #1
 800924e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	689a      	ldr	r2, [r3, #8]
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	4013      	ands	r3, r2
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	429a      	cmp	r2, r3
 800925e:	d196      	bne.n	800918e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3728      	adds	r7, #40	@ 0x28
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	200000c0 	.word	0x200000c0

08009270 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b086      	sub	sp, #24
 8009274:	af02      	add	r7, sp, #8
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	2200      	movs	r2, #0
 8009284:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f7ff ff5b 	bl	8009144 <SPI_WaitFifoStateUntilTimeout>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d007      	beq.n	80092a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009298:	f043 0220 	orr.w	r2, r3, #32
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e027      	b.n	80092f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2200      	movs	r2, #0
 80092ac:	2180      	movs	r1, #128	@ 0x80
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f7ff fec0 	bl	8009034 <SPI_WaitFlagStateUntilTimeout>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d007      	beq.n	80092ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092be:	f043 0220 	orr.w	r2, r3, #32
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e014      	b.n	80092f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f7ff ff34 	bl	8009144 <SPI_WaitFifoStateUntilTimeout>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d007      	beq.n	80092f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092e6:	f043 0220 	orr.w	r2, r3, #32
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	e000      	b.n	80092f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e049      	b.n	80093a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	d106      	bne.n	8009328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7fb fc76 	bl	8004c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2202      	movs	r2, #2
 800932c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3304      	adds	r3, #4
 8009338:	4619      	mov	r1, r3
 800933a:	4610      	mov	r0, r2
 800933c:	f000 fc96 	bl	8009c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
	...

080093ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d001      	beq.n	80093c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e04f      	b.n	8009464 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2202      	movs	r2, #2
 80093c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68da      	ldr	r2, [r3, #12]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0201 	orr.w	r2, r2, #1
 80093da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a23      	ldr	r2, [pc, #140]	@ (8009470 <HAL_TIM_Base_Start_IT+0xc4>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d01d      	beq.n	8009422 <HAL_TIM_Base_Start_IT+0x76>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ee:	d018      	beq.n	8009422 <HAL_TIM_Base_Start_IT+0x76>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a1f      	ldr	r2, [pc, #124]	@ (8009474 <HAL_TIM_Base_Start_IT+0xc8>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d013      	beq.n	8009422 <HAL_TIM_Base_Start_IT+0x76>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009478 <HAL_TIM_Base_Start_IT+0xcc>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d00e      	beq.n	8009422 <HAL_TIM_Base_Start_IT+0x76>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a1c      	ldr	r2, [pc, #112]	@ (800947c <HAL_TIM_Base_Start_IT+0xd0>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d009      	beq.n	8009422 <HAL_TIM_Base_Start_IT+0x76>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a1b      	ldr	r2, [pc, #108]	@ (8009480 <HAL_TIM_Base_Start_IT+0xd4>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d004      	beq.n	8009422 <HAL_TIM_Base_Start_IT+0x76>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a19      	ldr	r2, [pc, #100]	@ (8009484 <HAL_TIM_Base_Start_IT+0xd8>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d115      	bne.n	800944e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	4b17      	ldr	r3, [pc, #92]	@ (8009488 <HAL_TIM_Base_Start_IT+0xdc>)
 800942a:	4013      	ands	r3, r2
 800942c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2b06      	cmp	r3, #6
 8009432:	d015      	beq.n	8009460 <HAL_TIM_Base_Start_IT+0xb4>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800943a:	d011      	beq.n	8009460 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f042 0201 	orr.w	r2, r2, #1
 800944a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800944c:	e008      	b.n	8009460 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f042 0201 	orr.w	r2, r2, #1
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	e000      	b.n	8009462 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009460:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	40012c00 	.word	0x40012c00
 8009474:	40000400 	.word	0x40000400
 8009478:	40000800 	.word	0x40000800
 800947c:	40013400 	.word	0x40013400
 8009480:	40014000 	.word	0x40014000
 8009484:	40015000 	.word	0x40015000
 8009488:	00010007 	.word	0x00010007

0800948c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e049      	b.n	8009532 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d106      	bne.n	80094b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f841 	bl	800953a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	3304      	adds	r3, #4
 80094c8:	4619      	mov	r1, r3
 80094ca:	4610      	mov	r0, r2
 80094cc:	f000 fbce 	bl	8009c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800953a:	b480      	push	{r7}
 800953c:	b083      	sub	sp, #12
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009542:	bf00      	nop
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b084      	sub	sp, #16
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d020      	beq.n	80095b2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f003 0302 	and.w	r3, r3, #2
 8009576:	2b00      	cmp	r3, #0
 8009578:	d01b      	beq.n	80095b2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f06f 0202 	mvn.w	r2, #2
 8009582:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	f003 0303 	and.w	r3, r3, #3
 8009594:	2b00      	cmp	r3, #0
 8009596:	d003      	beq.n	80095a0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fb49 	bl	8009c30 <HAL_TIM_IC_CaptureCallback>
 800959e:	e005      	b.n	80095ac <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fb3b 	bl	8009c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fb4c 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	f003 0304 	and.w	r3, r3, #4
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d020      	beq.n	80095fe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f003 0304 	and.w	r3, r3, #4
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d01b      	beq.n	80095fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f06f 0204 	mvn.w	r2, #4
 80095ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2202      	movs	r2, #2
 80095d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d003      	beq.n	80095ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fb23 	bl	8009c30 <HAL_TIM_IC_CaptureCallback>
 80095ea:	e005      	b.n	80095f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 fb15 	bl	8009c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fb26 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	f003 0308 	and.w	r3, r3, #8
 8009604:	2b00      	cmp	r3, #0
 8009606:	d020      	beq.n	800964a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f003 0308 	and.w	r3, r3, #8
 800960e:	2b00      	cmp	r3, #0
 8009610:	d01b      	beq.n	800964a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f06f 0208 	mvn.w	r2, #8
 800961a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2204      	movs	r2, #4
 8009620:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	69db      	ldr	r3, [r3, #28]
 8009628:	f003 0303 	and.w	r3, r3, #3
 800962c:	2b00      	cmp	r3, #0
 800962e:	d003      	beq.n	8009638 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fafd 	bl	8009c30 <HAL_TIM_IC_CaptureCallback>
 8009636:	e005      	b.n	8009644 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 faef 	bl	8009c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fb00 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f003 0310 	and.w	r3, r3, #16
 8009650:	2b00      	cmp	r3, #0
 8009652:	d020      	beq.n	8009696 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f003 0310 	and.w	r3, r3, #16
 800965a:	2b00      	cmp	r3, #0
 800965c:	d01b      	beq.n	8009696 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f06f 0210 	mvn.w	r2, #16
 8009666:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2208      	movs	r2, #8
 800966c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	69db      	ldr	r3, [r3, #28]
 8009674:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009678:	2b00      	cmp	r3, #0
 800967a:	d003      	beq.n	8009684 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fad7 	bl	8009c30 <HAL_TIM_IC_CaptureCallback>
 8009682:	e005      	b.n	8009690 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fac9 	bl	8009c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fada 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00c      	beq.n	80096ba <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d007      	beq.n	80096ba <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f06f 0201 	mvn.w	r2, #1
 80096b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f7fb f839 	bl	800472c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d104      	bne.n	80096ce <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00c      	beq.n	80096e8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d007      	beq.n	80096e8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80096e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f001 f85e 	bl	800a7a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00c      	beq.n	800970c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d007      	beq.n	800970c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f001 f856 	bl	800a7b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00c      	beq.n	8009730 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800971c:	2b00      	cmp	r3, #0
 800971e:	d007      	beq.n	8009730 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fa94 	bl	8009c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	f003 0320 	and.w	r3, r3, #32
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00c      	beq.n	8009754 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f003 0320 	and.w	r3, r3, #32
 8009740:	2b00      	cmp	r3, #0
 8009742:	d007      	beq.n	8009754 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f06f 0220 	mvn.w	r2, #32
 800974c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f001 f81e 	bl	800a790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00c      	beq.n	8009778 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d007      	beq.n	8009778 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f001 f82a 	bl	800a7cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00c      	beq.n	800979c <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d007      	beq.n	800979c <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f001 f822 	bl	800a7e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00c      	beq.n	80097c0 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d007      	beq.n	80097c0 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80097b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f001 f81a 	bl	800a7f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00c      	beq.n	80097e4 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d007      	beq.n	80097e4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80097dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f001 f812 	bl	800a808 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80097e4:	bf00      	nop
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009802:	2b01      	cmp	r3, #1
 8009804:	d101      	bne.n	800980a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009806:	2302      	movs	r3, #2
 8009808:	e0ff      	b.n	8009a0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2201      	movs	r2, #1
 800980e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2b14      	cmp	r3, #20
 8009816:	f200 80f0 	bhi.w	80099fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800981a:	a201      	add	r2, pc, #4	@ (adr r2, 8009820 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800981c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009820:	08009875 	.word	0x08009875
 8009824:	080099fb 	.word	0x080099fb
 8009828:	080099fb 	.word	0x080099fb
 800982c:	080099fb 	.word	0x080099fb
 8009830:	080098b5 	.word	0x080098b5
 8009834:	080099fb 	.word	0x080099fb
 8009838:	080099fb 	.word	0x080099fb
 800983c:	080099fb 	.word	0x080099fb
 8009840:	080098f7 	.word	0x080098f7
 8009844:	080099fb 	.word	0x080099fb
 8009848:	080099fb 	.word	0x080099fb
 800984c:	080099fb 	.word	0x080099fb
 8009850:	08009937 	.word	0x08009937
 8009854:	080099fb 	.word	0x080099fb
 8009858:	080099fb 	.word	0x080099fb
 800985c:	080099fb 	.word	0x080099fb
 8009860:	08009979 	.word	0x08009979
 8009864:	080099fb 	.word	0x080099fb
 8009868:	080099fb 	.word	0x080099fb
 800986c:	080099fb 	.word	0x080099fb
 8009870:	080099b9 	.word	0x080099b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68b9      	ldr	r1, [r7, #8]
 800987a:	4618      	mov	r0, r3
 800987c:	f000 faa0 	bl	8009dc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	699a      	ldr	r2, [r3, #24]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f042 0208 	orr.w	r2, r2, #8
 800988e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	699a      	ldr	r2, [r3, #24]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f022 0204 	bic.w	r2, r2, #4
 800989e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6999      	ldr	r1, [r3, #24]
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	691a      	ldr	r2, [r3, #16]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	619a      	str	r2, [r3, #24]
      break;
 80098b2:	e0a5      	b.n	8009a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68b9      	ldr	r1, [r7, #8]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 fb1a 	bl	8009ef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	699a      	ldr	r2, [r3, #24]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	699a      	ldr	r2, [r3, #24]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6999      	ldr	r1, [r3, #24]
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	021a      	lsls	r2, r3, #8
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	430a      	orrs	r2, r1
 80098f2:	619a      	str	r2, [r3, #24]
      break;
 80098f4:	e084      	b.n	8009a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68b9      	ldr	r1, [r7, #8]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 fb8d 	bl	800a01c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	69da      	ldr	r2, [r3, #28]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f042 0208 	orr.w	r2, r2, #8
 8009910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	69da      	ldr	r2, [r3, #28]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f022 0204 	bic.w	r2, r2, #4
 8009920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	69d9      	ldr	r1, [r3, #28]
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	691a      	ldr	r2, [r3, #16]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	430a      	orrs	r2, r1
 8009932:	61da      	str	r2, [r3, #28]
      break;
 8009934:	e064      	b.n	8009a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68b9      	ldr	r1, [r7, #8]
 800993c:	4618      	mov	r0, r3
 800993e:	f000 fbff 	bl	800a140 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	69da      	ldr	r2, [r3, #28]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	69da      	ldr	r2, [r3, #28]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	69d9      	ldr	r1, [r3, #28]
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	021a      	lsls	r2, r3, #8
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	430a      	orrs	r2, r1
 8009974:	61da      	str	r2, [r3, #28]
      break;
 8009976:	e043      	b.n	8009a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68b9      	ldr	r1, [r7, #8]
 800997e:	4618      	mov	r0, r3
 8009980:	f000 fc72 	bl	800a268 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f042 0208 	orr.w	r2, r2, #8
 8009992:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f022 0204 	bic.w	r2, r2, #4
 80099a2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	691a      	ldr	r2, [r3, #16]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	430a      	orrs	r2, r1
 80099b4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80099b6:	e023      	b.n	8009a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68b9      	ldr	r1, [r7, #8]
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 fcbc 	bl	800a33c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099e2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	021a      	lsls	r2, r3, #8
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	430a      	orrs	r2, r1
 80099f6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80099f8:	e002      	b.n	8009a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	75fb      	strb	r3, [r7, #23]
      break;
 80099fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3718      	adds	r7, #24
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop

08009a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d101      	bne.n	8009a30 <HAL_TIM_ConfigClockSource+0x1c>
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	e0e6      	b.n	8009bfe <HAL_TIM_ConfigClockSource+0x1ea>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2202      	movs	r2, #2
 8009a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009a4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a67      	ldr	r2, [pc, #412]	@ (8009c08 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	f000 80b1 	beq.w	8009bd2 <HAL_TIM_ConfigClockSource+0x1be>
 8009a70:	4a65      	ldr	r2, [pc, #404]	@ (8009c08 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	f200 80b6 	bhi.w	8009be4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009a78:	4a64      	ldr	r2, [pc, #400]	@ (8009c0c <HAL_TIM_ConfigClockSource+0x1f8>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	f000 80a9 	beq.w	8009bd2 <HAL_TIM_ConfigClockSource+0x1be>
 8009a80:	4a62      	ldr	r2, [pc, #392]	@ (8009c0c <HAL_TIM_ConfigClockSource+0x1f8>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	f200 80ae 	bhi.w	8009be4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009a88:	4a61      	ldr	r2, [pc, #388]	@ (8009c10 <HAL_TIM_ConfigClockSource+0x1fc>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	f000 80a1 	beq.w	8009bd2 <HAL_TIM_ConfigClockSource+0x1be>
 8009a90:	4a5f      	ldr	r2, [pc, #380]	@ (8009c10 <HAL_TIM_ConfigClockSource+0x1fc>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	f200 80a6 	bhi.w	8009be4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009a98:	4a5e      	ldr	r2, [pc, #376]	@ (8009c14 <HAL_TIM_ConfigClockSource+0x200>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	f000 8099 	beq.w	8009bd2 <HAL_TIM_ConfigClockSource+0x1be>
 8009aa0:	4a5c      	ldr	r2, [pc, #368]	@ (8009c14 <HAL_TIM_ConfigClockSource+0x200>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	f200 809e 	bhi.w	8009be4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009aa8:	4a5b      	ldr	r2, [pc, #364]	@ (8009c18 <HAL_TIM_ConfigClockSource+0x204>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	f000 8091 	beq.w	8009bd2 <HAL_TIM_ConfigClockSource+0x1be>
 8009ab0:	4a59      	ldr	r2, [pc, #356]	@ (8009c18 <HAL_TIM_ConfigClockSource+0x204>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	f200 8096 	bhi.w	8009be4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009ab8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009abc:	f000 8089 	beq.w	8009bd2 <HAL_TIM_ConfigClockSource+0x1be>
 8009ac0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009ac4:	f200 808e 	bhi.w	8009be4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009acc:	d03e      	beq.n	8009b4c <HAL_TIM_ConfigClockSource+0x138>
 8009ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ad2:	f200 8087 	bhi.w	8009be4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ada:	f000 8086 	beq.w	8009bea <HAL_TIM_ConfigClockSource+0x1d6>
 8009ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ae2:	d87f      	bhi.n	8009be4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009ae4:	2b70      	cmp	r3, #112	@ 0x70
 8009ae6:	d01a      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x10a>
 8009ae8:	2b70      	cmp	r3, #112	@ 0x70
 8009aea:	d87b      	bhi.n	8009be4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009aec:	2b60      	cmp	r3, #96	@ 0x60
 8009aee:	d050      	beq.n	8009b92 <HAL_TIM_ConfigClockSource+0x17e>
 8009af0:	2b60      	cmp	r3, #96	@ 0x60
 8009af2:	d877      	bhi.n	8009be4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009af4:	2b50      	cmp	r3, #80	@ 0x50
 8009af6:	d03c      	beq.n	8009b72 <HAL_TIM_ConfigClockSource+0x15e>
 8009af8:	2b50      	cmp	r3, #80	@ 0x50
 8009afa:	d873      	bhi.n	8009be4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009afc:	2b40      	cmp	r3, #64	@ 0x40
 8009afe:	d058      	beq.n	8009bb2 <HAL_TIM_ConfigClockSource+0x19e>
 8009b00:	2b40      	cmp	r3, #64	@ 0x40
 8009b02:	d86f      	bhi.n	8009be4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009b04:	2b30      	cmp	r3, #48	@ 0x30
 8009b06:	d064      	beq.n	8009bd2 <HAL_TIM_ConfigClockSource+0x1be>
 8009b08:	2b30      	cmp	r3, #48	@ 0x30
 8009b0a:	d86b      	bhi.n	8009be4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009b0c:	2b20      	cmp	r3, #32
 8009b0e:	d060      	beq.n	8009bd2 <HAL_TIM_ConfigClockSource+0x1be>
 8009b10:	2b20      	cmp	r3, #32
 8009b12:	d867      	bhi.n	8009be4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d05c      	beq.n	8009bd2 <HAL_TIM_ConfigClockSource+0x1be>
 8009b18:	2b10      	cmp	r3, #16
 8009b1a:	d05a      	beq.n	8009bd2 <HAL_TIM_ConfigClockSource+0x1be>
 8009b1c:	e062      	b.n	8009be4 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b2e:	f000 fced 	bl	800a50c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009b40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68ba      	ldr	r2, [r7, #8]
 8009b48:	609a      	str	r2, [r3, #8]
      break;
 8009b4a:	e04f      	b.n	8009bec <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b5c:	f000 fcd6 	bl	800a50c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	689a      	ldr	r2, [r3, #8]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b6e:	609a      	str	r2, [r3, #8]
      break;
 8009b70:	e03c      	b.n	8009bec <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f000 fc48 	bl	800a414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2150      	movs	r1, #80	@ 0x50
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 fca1 	bl	800a4d2 <TIM_ITRx_SetConfig>
      break;
 8009b90:	e02c      	b.n	8009bec <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f000 fc67 	bl	800a472 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2160      	movs	r1, #96	@ 0x60
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 fc91 	bl	800a4d2 <TIM_ITRx_SetConfig>
      break;
 8009bb0:	e01c      	b.n	8009bec <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	f000 fc28 	bl	800a414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2140      	movs	r1, #64	@ 0x40
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 fc81 	bl	800a4d2 <TIM_ITRx_SetConfig>
      break;
 8009bd0:	e00c      	b.n	8009bec <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4610      	mov	r0, r2
 8009bde:	f000 fc78 	bl	800a4d2 <TIM_ITRx_SetConfig>
      break;
 8009be2:	e003      	b.n	8009bec <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	73fb      	strb	r3, [r7, #15]
      break;
 8009be8:	e000      	b.n	8009bec <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8009bea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	00100070 	.word	0x00100070
 8009c0c:	00100050 	.word	0x00100050
 8009c10:	00100040 	.word	0x00100040
 8009c14:	00100030 	.word	0x00100030
 8009c18:	00100020 	.word	0x00100020

08009c1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a48      	ldr	r2, [pc, #288]	@ (8009da0 <TIM_Base_SetConfig+0x134>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d013      	beq.n	8009cac <TIM_Base_SetConfig+0x40>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c8a:	d00f      	beq.n	8009cac <TIM_Base_SetConfig+0x40>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a45      	ldr	r2, [pc, #276]	@ (8009da4 <TIM_Base_SetConfig+0x138>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d00b      	beq.n	8009cac <TIM_Base_SetConfig+0x40>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a44      	ldr	r2, [pc, #272]	@ (8009da8 <TIM_Base_SetConfig+0x13c>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d007      	beq.n	8009cac <TIM_Base_SetConfig+0x40>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a43      	ldr	r2, [pc, #268]	@ (8009dac <TIM_Base_SetConfig+0x140>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d003      	beq.n	8009cac <TIM_Base_SetConfig+0x40>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a42      	ldr	r2, [pc, #264]	@ (8009db0 <TIM_Base_SetConfig+0x144>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d108      	bne.n	8009cbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a37      	ldr	r2, [pc, #220]	@ (8009da0 <TIM_Base_SetConfig+0x134>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d01f      	beq.n	8009d06 <TIM_Base_SetConfig+0x9a>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ccc:	d01b      	beq.n	8009d06 <TIM_Base_SetConfig+0x9a>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a34      	ldr	r2, [pc, #208]	@ (8009da4 <TIM_Base_SetConfig+0x138>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d017      	beq.n	8009d06 <TIM_Base_SetConfig+0x9a>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a33      	ldr	r2, [pc, #204]	@ (8009da8 <TIM_Base_SetConfig+0x13c>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d013      	beq.n	8009d06 <TIM_Base_SetConfig+0x9a>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a32      	ldr	r2, [pc, #200]	@ (8009dac <TIM_Base_SetConfig+0x140>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d00f      	beq.n	8009d06 <TIM_Base_SetConfig+0x9a>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a32      	ldr	r2, [pc, #200]	@ (8009db4 <TIM_Base_SetConfig+0x148>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d00b      	beq.n	8009d06 <TIM_Base_SetConfig+0x9a>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a31      	ldr	r2, [pc, #196]	@ (8009db8 <TIM_Base_SetConfig+0x14c>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d007      	beq.n	8009d06 <TIM_Base_SetConfig+0x9a>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a30      	ldr	r2, [pc, #192]	@ (8009dbc <TIM_Base_SetConfig+0x150>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d003      	beq.n	8009d06 <TIM_Base_SetConfig+0x9a>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a2b      	ldr	r2, [pc, #172]	@ (8009db0 <TIM_Base_SetConfig+0x144>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d108      	bne.n	8009d18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	689a      	ldr	r2, [r3, #8]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a18      	ldr	r2, [pc, #96]	@ (8009da0 <TIM_Base_SetConfig+0x134>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d013      	beq.n	8009d6c <TIM_Base_SetConfig+0x100>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a19      	ldr	r2, [pc, #100]	@ (8009dac <TIM_Base_SetConfig+0x140>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d00f      	beq.n	8009d6c <TIM_Base_SetConfig+0x100>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a19      	ldr	r2, [pc, #100]	@ (8009db4 <TIM_Base_SetConfig+0x148>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d00b      	beq.n	8009d6c <TIM_Base_SetConfig+0x100>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a18      	ldr	r2, [pc, #96]	@ (8009db8 <TIM_Base_SetConfig+0x14c>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d007      	beq.n	8009d6c <TIM_Base_SetConfig+0x100>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a17      	ldr	r2, [pc, #92]	@ (8009dbc <TIM_Base_SetConfig+0x150>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d003      	beq.n	8009d6c <TIM_Base_SetConfig+0x100>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a12      	ldr	r2, [pc, #72]	@ (8009db0 <TIM_Base_SetConfig+0x144>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d103      	bne.n	8009d74 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	691a      	ldr	r2, [r3, #16]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d105      	bne.n	8009d92 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	f023 0201 	bic.w	r2, r3, #1
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	611a      	str	r2, [r3, #16]
  }
}
 8009d92:	bf00      	nop
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	40012c00 	.word	0x40012c00
 8009da4:	40000400 	.word	0x40000400
 8009da8:	40000800 	.word	0x40000800
 8009dac:	40013400 	.word	0x40013400
 8009db0:	40015000 	.word	0x40015000
 8009db4:	40014000 	.word	0x40014000
 8009db8:	40014400 	.word	0x40014400
 8009dbc:	40014800 	.word	0x40014800

08009dc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a1b      	ldr	r3, [r3, #32]
 8009dd4:	f023 0201 	bic.w	r2, r3, #1
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	699b      	ldr	r3, [r3, #24]
 8009de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f023 0303 	bic.w	r3, r3, #3
 8009dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	f023 0302 	bic.w	r3, r3, #2
 8009e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	697a      	ldr	r2, [r7, #20]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a30      	ldr	r2, [pc, #192]	@ (8009edc <TIM_OC1_SetConfig+0x11c>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d013      	beq.n	8009e48 <TIM_OC1_SetConfig+0x88>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a2f      	ldr	r2, [pc, #188]	@ (8009ee0 <TIM_OC1_SetConfig+0x120>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d00f      	beq.n	8009e48 <TIM_OC1_SetConfig+0x88>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a2e      	ldr	r2, [pc, #184]	@ (8009ee4 <TIM_OC1_SetConfig+0x124>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d00b      	beq.n	8009e48 <TIM_OC1_SetConfig+0x88>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a2d      	ldr	r2, [pc, #180]	@ (8009ee8 <TIM_OC1_SetConfig+0x128>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d007      	beq.n	8009e48 <TIM_OC1_SetConfig+0x88>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a2c      	ldr	r2, [pc, #176]	@ (8009eec <TIM_OC1_SetConfig+0x12c>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d003      	beq.n	8009e48 <TIM_OC1_SetConfig+0x88>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a2b      	ldr	r2, [pc, #172]	@ (8009ef0 <TIM_OC1_SetConfig+0x130>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d10c      	bne.n	8009e62 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	f023 0308 	bic.w	r3, r3, #8
 8009e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	697a      	ldr	r2, [r7, #20]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f023 0304 	bic.w	r3, r3, #4
 8009e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a1d      	ldr	r2, [pc, #116]	@ (8009edc <TIM_OC1_SetConfig+0x11c>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d013      	beq.n	8009e92 <TIM_OC1_SetConfig+0xd2>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8009ee0 <TIM_OC1_SetConfig+0x120>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d00f      	beq.n	8009e92 <TIM_OC1_SetConfig+0xd2>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a1b      	ldr	r2, [pc, #108]	@ (8009ee4 <TIM_OC1_SetConfig+0x124>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d00b      	beq.n	8009e92 <TIM_OC1_SetConfig+0xd2>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8009ee8 <TIM_OC1_SetConfig+0x128>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d007      	beq.n	8009e92 <TIM_OC1_SetConfig+0xd2>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a19      	ldr	r2, [pc, #100]	@ (8009eec <TIM_OC1_SetConfig+0x12c>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d003      	beq.n	8009e92 <TIM_OC1_SetConfig+0xd2>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a18      	ldr	r2, [pc, #96]	@ (8009ef0 <TIM_OC1_SetConfig+0x130>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d111      	bne.n	8009eb6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	693a      	ldr	r2, [r7, #16]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	699b      	ldr	r3, [r3, #24]
 8009eb0:	693a      	ldr	r2, [r7, #16]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	621a      	str	r2, [r3, #32]
}
 8009ed0:	bf00      	nop
 8009ed2:	371c      	adds	r7, #28
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	40012c00 	.word	0x40012c00
 8009ee0:	40013400 	.word	0x40013400
 8009ee4:	40014000 	.word	0x40014000
 8009ee8:	40014400 	.word	0x40014400
 8009eec:	40014800 	.word	0x40014800
 8009ef0:	40015000 	.word	0x40015000

08009ef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b087      	sub	sp, #28
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a1b      	ldr	r3, [r3, #32]
 8009f08:	f023 0210 	bic.w	r2, r3, #16
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	021b      	lsls	r3, r3, #8
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	f023 0320 	bic.w	r3, r3, #32
 8009f42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	011b      	lsls	r3, r3, #4
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a2c      	ldr	r2, [pc, #176]	@ (800a004 <TIM_OC2_SetConfig+0x110>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d007      	beq.n	8009f68 <TIM_OC2_SetConfig+0x74>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a2b      	ldr	r2, [pc, #172]	@ (800a008 <TIM_OC2_SetConfig+0x114>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d003      	beq.n	8009f68 <TIM_OC2_SetConfig+0x74>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a2a      	ldr	r2, [pc, #168]	@ (800a00c <TIM_OC2_SetConfig+0x118>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d10d      	bne.n	8009f84 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	011b      	lsls	r3, r3, #4
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a1f      	ldr	r2, [pc, #124]	@ (800a004 <TIM_OC2_SetConfig+0x110>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d013      	beq.n	8009fb4 <TIM_OC2_SetConfig+0xc0>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a1e      	ldr	r2, [pc, #120]	@ (800a008 <TIM_OC2_SetConfig+0x114>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d00f      	beq.n	8009fb4 <TIM_OC2_SetConfig+0xc0>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a1e      	ldr	r2, [pc, #120]	@ (800a010 <TIM_OC2_SetConfig+0x11c>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d00b      	beq.n	8009fb4 <TIM_OC2_SetConfig+0xc0>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a1d      	ldr	r2, [pc, #116]	@ (800a014 <TIM_OC2_SetConfig+0x120>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d007      	beq.n	8009fb4 <TIM_OC2_SetConfig+0xc0>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a1c      	ldr	r2, [pc, #112]	@ (800a018 <TIM_OC2_SetConfig+0x124>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d003      	beq.n	8009fb4 <TIM_OC2_SetConfig+0xc0>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a17      	ldr	r2, [pc, #92]	@ (800a00c <TIM_OC2_SetConfig+0x118>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d113      	bne.n	8009fdc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	693a      	ldr	r2, [r7, #16]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	697a      	ldr	r2, [r7, #20]
 8009ff4:	621a      	str	r2, [r3, #32]
}
 8009ff6:	bf00      	nop
 8009ff8:	371c      	adds	r7, #28
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	40012c00 	.word	0x40012c00
 800a008:	40013400 	.word	0x40013400
 800a00c:	40015000 	.word	0x40015000
 800a010:	40014000 	.word	0x40014000
 800a014:	40014400 	.word	0x40014400
 800a018:	40014800 	.word	0x40014800

0800a01c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b087      	sub	sp, #28
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a1b      	ldr	r3, [r3, #32]
 800a030:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	69db      	ldr	r3, [r3, #28]
 800a042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a04a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a04e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f023 0303 	bic.w	r3, r3, #3
 800a056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	4313      	orrs	r3, r2
 800a060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	021b      	lsls	r3, r3, #8
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	4313      	orrs	r3, r2
 800a074:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a2b      	ldr	r2, [pc, #172]	@ (800a128 <TIM_OC3_SetConfig+0x10c>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d007      	beq.n	800a08e <TIM_OC3_SetConfig+0x72>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a2a      	ldr	r2, [pc, #168]	@ (800a12c <TIM_OC3_SetConfig+0x110>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d003      	beq.n	800a08e <TIM_OC3_SetConfig+0x72>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a29      	ldr	r2, [pc, #164]	@ (800a130 <TIM_OC3_SetConfig+0x114>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d10d      	bne.n	800a0aa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	021b      	lsls	r3, r3, #8
 800a09c:	697a      	ldr	r2, [r7, #20]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a0a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a1e      	ldr	r2, [pc, #120]	@ (800a128 <TIM_OC3_SetConfig+0x10c>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d013      	beq.n	800a0da <TIM_OC3_SetConfig+0xbe>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a1d      	ldr	r2, [pc, #116]	@ (800a12c <TIM_OC3_SetConfig+0x110>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d00f      	beq.n	800a0da <TIM_OC3_SetConfig+0xbe>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a1d      	ldr	r2, [pc, #116]	@ (800a134 <TIM_OC3_SetConfig+0x118>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d00b      	beq.n	800a0da <TIM_OC3_SetConfig+0xbe>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a138 <TIM_OC3_SetConfig+0x11c>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d007      	beq.n	800a0da <TIM_OC3_SetConfig+0xbe>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a1b      	ldr	r2, [pc, #108]	@ (800a13c <TIM_OC3_SetConfig+0x120>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d003      	beq.n	800a0da <TIM_OC3_SetConfig+0xbe>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a16      	ldr	r2, [pc, #88]	@ (800a130 <TIM_OC3_SetConfig+0x114>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d113      	bne.n	800a102 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a0e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a0e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	695b      	ldr	r3, [r3, #20]
 800a0ee:	011b      	lsls	r3, r3, #4
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	011b      	lsls	r3, r3, #4
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	685a      	ldr	r2, [r3, #4]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	697a      	ldr	r2, [r7, #20]
 800a11a:	621a      	str	r2, [r3, #32]
}
 800a11c:	bf00      	nop
 800a11e:	371c      	adds	r7, #28
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr
 800a128:	40012c00 	.word	0x40012c00
 800a12c:	40013400 	.word	0x40013400
 800a130:	40015000 	.word	0x40015000
 800a134:	40014000 	.word	0x40014000
 800a138:	40014400 	.word	0x40014400
 800a13c:	40014800 	.word	0x40014800

0800a140 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a1b      	ldr	r3, [r3, #32]
 800a154:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	69db      	ldr	r3, [r3, #28]
 800a166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a16e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a17a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	021b      	lsls	r3, r3, #8
 800a182:	68fa      	ldr	r2, [r7, #12]
 800a184:	4313      	orrs	r3, r2
 800a186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a18e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	031b      	lsls	r3, r3, #12
 800a196:	697a      	ldr	r2, [r7, #20]
 800a198:	4313      	orrs	r3, r2
 800a19a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a2c      	ldr	r2, [pc, #176]	@ (800a250 <TIM_OC4_SetConfig+0x110>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d007      	beq.n	800a1b4 <TIM_OC4_SetConfig+0x74>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a2b      	ldr	r2, [pc, #172]	@ (800a254 <TIM_OC4_SetConfig+0x114>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d003      	beq.n	800a1b4 <TIM_OC4_SetConfig+0x74>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a2a      	ldr	r2, [pc, #168]	@ (800a258 <TIM_OC4_SetConfig+0x118>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d10d      	bne.n	800a1d0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a1ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	031b      	lsls	r3, r3, #12
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a1ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a1f      	ldr	r2, [pc, #124]	@ (800a250 <TIM_OC4_SetConfig+0x110>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d013      	beq.n	800a200 <TIM_OC4_SetConfig+0xc0>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a1e      	ldr	r2, [pc, #120]	@ (800a254 <TIM_OC4_SetConfig+0x114>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d00f      	beq.n	800a200 <TIM_OC4_SetConfig+0xc0>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a1e      	ldr	r2, [pc, #120]	@ (800a25c <TIM_OC4_SetConfig+0x11c>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d00b      	beq.n	800a200 <TIM_OC4_SetConfig+0xc0>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a1d      	ldr	r2, [pc, #116]	@ (800a260 <TIM_OC4_SetConfig+0x120>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d007      	beq.n	800a200 <TIM_OC4_SetConfig+0xc0>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a1c      	ldr	r2, [pc, #112]	@ (800a264 <TIM_OC4_SetConfig+0x124>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d003      	beq.n	800a200 <TIM_OC4_SetConfig+0xc0>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a17      	ldr	r2, [pc, #92]	@ (800a258 <TIM_OC4_SetConfig+0x118>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d113      	bne.n	800a228 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a206:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a20e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	019b      	lsls	r3, r3, #6
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	4313      	orrs	r3, r2
 800a21a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	019b      	lsls	r3, r3, #6
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	4313      	orrs	r3, r2
 800a226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	621a      	str	r2, [r3, #32]
}
 800a242:	bf00      	nop
 800a244:	371c      	adds	r7, #28
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	40012c00 	.word	0x40012c00
 800a254:	40013400 	.word	0x40013400
 800a258:	40015000 	.word	0x40015000
 800a25c:	40014000 	.word	0x40014000
 800a260:	40014400 	.word	0x40014400
 800a264:	40014800 	.word	0x40014800

0800a268 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a268:	b480      	push	{r7}
 800a26a:	b087      	sub	sp, #28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a1b      	ldr	r3, [r3, #32]
 800a27c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a29a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a2ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	041b      	lsls	r3, r3, #16
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4a19      	ldr	r2, [pc, #100]	@ (800a324 <TIM_OC5_SetConfig+0xbc>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d013      	beq.n	800a2ea <TIM_OC5_SetConfig+0x82>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4a18      	ldr	r2, [pc, #96]	@ (800a328 <TIM_OC5_SetConfig+0xc0>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d00f      	beq.n	800a2ea <TIM_OC5_SetConfig+0x82>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a17      	ldr	r2, [pc, #92]	@ (800a32c <TIM_OC5_SetConfig+0xc4>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d00b      	beq.n	800a2ea <TIM_OC5_SetConfig+0x82>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a16      	ldr	r2, [pc, #88]	@ (800a330 <TIM_OC5_SetConfig+0xc8>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d007      	beq.n	800a2ea <TIM_OC5_SetConfig+0x82>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a15      	ldr	r2, [pc, #84]	@ (800a334 <TIM_OC5_SetConfig+0xcc>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d003      	beq.n	800a2ea <TIM_OC5_SetConfig+0x82>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a14      	ldr	r2, [pc, #80]	@ (800a338 <TIM_OC5_SetConfig+0xd0>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d109      	bne.n	800a2fe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a2f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	021b      	lsls	r3, r3, #8
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	697a      	ldr	r2, [r7, #20]
 800a302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	693a      	ldr	r2, [r7, #16]
 800a316:	621a      	str	r2, [r3, #32]
}
 800a318:	bf00      	nop
 800a31a:	371c      	adds	r7, #28
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	40012c00 	.word	0x40012c00
 800a328:	40013400 	.word	0x40013400
 800a32c:	40014000 	.word	0x40014000
 800a330:	40014400 	.word	0x40014400
 800a334:	40014800 	.word	0x40014800
 800a338:	40015000 	.word	0x40015000

0800a33c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b087      	sub	sp, #28
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a1b      	ldr	r3, [r3, #32]
 800a34a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a1b      	ldr	r3, [r3, #32]
 800a350:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a36a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a36e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	021b      	lsls	r3, r3, #8
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	4313      	orrs	r3, r2
 800a37a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	051b      	lsls	r3, r3, #20
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a1a      	ldr	r2, [pc, #104]	@ (800a3fc <TIM_OC6_SetConfig+0xc0>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d013      	beq.n	800a3c0 <TIM_OC6_SetConfig+0x84>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a19      	ldr	r2, [pc, #100]	@ (800a400 <TIM_OC6_SetConfig+0xc4>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d00f      	beq.n	800a3c0 <TIM_OC6_SetConfig+0x84>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a18      	ldr	r2, [pc, #96]	@ (800a404 <TIM_OC6_SetConfig+0xc8>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d00b      	beq.n	800a3c0 <TIM_OC6_SetConfig+0x84>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a17      	ldr	r2, [pc, #92]	@ (800a408 <TIM_OC6_SetConfig+0xcc>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d007      	beq.n	800a3c0 <TIM_OC6_SetConfig+0x84>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a16      	ldr	r2, [pc, #88]	@ (800a40c <TIM_OC6_SetConfig+0xd0>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d003      	beq.n	800a3c0 <TIM_OC6_SetConfig+0x84>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a15      	ldr	r2, [pc, #84]	@ (800a410 <TIM_OC6_SetConfig+0xd4>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d109      	bne.n	800a3d4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a3c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	029b      	lsls	r3, r3, #10
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	685a      	ldr	r2, [r3, #4]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	621a      	str	r2, [r3, #32]
}
 800a3ee:	bf00      	nop
 800a3f0:	371c      	adds	r7, #28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	40012c00 	.word	0x40012c00
 800a400:	40013400 	.word	0x40013400
 800a404:	40014000 	.word	0x40014000
 800a408:	40014400 	.word	0x40014400
 800a40c:	40014800 	.word	0x40014800
 800a410:	40015000 	.word	0x40015000

0800a414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a414:	b480      	push	{r7}
 800a416:	b087      	sub	sp, #28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6a1b      	ldr	r3, [r3, #32]
 800a424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6a1b      	ldr	r3, [r3, #32]
 800a42a:	f023 0201 	bic.w	r2, r3, #1
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	699b      	ldr	r3, [r3, #24]
 800a436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a43e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	011b      	lsls	r3, r3, #4
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	4313      	orrs	r3, r2
 800a448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f023 030a 	bic.w	r3, r3, #10
 800a450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a452:	697a      	ldr	r2, [r7, #20]
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	4313      	orrs	r3, r2
 800a458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	621a      	str	r2, [r3, #32]
}
 800a466:	bf00      	nop
 800a468:	371c      	adds	r7, #28
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr

0800a472 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a472:	b480      	push	{r7}
 800a474:	b087      	sub	sp, #28
 800a476:	af00      	add	r7, sp, #0
 800a478:	60f8      	str	r0, [r7, #12]
 800a47a:	60b9      	str	r1, [r7, #8]
 800a47c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6a1b      	ldr	r3, [r3, #32]
 800a482:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6a1b      	ldr	r3, [r3, #32]
 800a488:	f023 0210 	bic.w	r2, r3, #16
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a49c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	031b      	lsls	r3, r3, #12
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a4ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	011b      	lsls	r3, r3, #4
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	621a      	str	r2, [r3, #32]
}
 800a4c6:	bf00      	nop
 800a4c8:	371c      	adds	r7, #28
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	b085      	sub	sp, #20
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a4e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	f043 0307 	orr.w	r3, r3, #7
 800a4f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	609a      	str	r2, [r3, #8]
}
 800a500:	bf00      	nop
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b087      	sub	sp, #28
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
 800a518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	021a      	lsls	r2, r3, #8
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	431a      	orrs	r2, r3
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	4313      	orrs	r3, r2
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	4313      	orrs	r3, r2
 800a538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	697a      	ldr	r2, [r7, #20]
 800a53e:	609a      	str	r2, [r3, #8]
}
 800a540:	bf00      	nop
 800a542:	371c      	adds	r7, #28
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d101      	bne.n	800a564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a560:	2302      	movs	r3, #2
 800a562:	e06f      	b.n	800a644 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2202      	movs	r2, #2
 800a570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a31      	ldr	r2, [pc, #196]	@ (800a650 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d009      	beq.n	800a5a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a30      	ldr	r2, [pc, #192]	@ (800a654 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d004      	beq.n	800a5a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a2e      	ldr	r2, [pc, #184]	@ (800a658 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d108      	bne.n	800a5b4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a5a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a5ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a1e      	ldr	r2, [pc, #120]	@ (800a650 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d01d      	beq.n	800a618 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5e4:	d018      	beq.n	800a618 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a1c      	ldr	r2, [pc, #112]	@ (800a65c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d013      	beq.n	800a618 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a1a      	ldr	r2, [pc, #104]	@ (800a660 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d00e      	beq.n	800a618 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a15      	ldr	r2, [pc, #84]	@ (800a654 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d009      	beq.n	800a618 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a16      	ldr	r2, [pc, #88]	@ (800a664 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d004      	beq.n	800a618 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a11      	ldr	r2, [pc, #68]	@ (800a658 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d10c      	bne.n	800a632 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a61e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	68ba      	ldr	r2, [r7, #8]
 800a626:	4313      	orrs	r3, r2
 800a628:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	40012c00 	.word	0x40012c00
 800a654:	40013400 	.word	0x40013400
 800a658:	40015000 	.word	0x40015000
 800a65c:	40000400 	.word	0x40000400
 800a660:	40000800 	.word	0x40000800
 800a664:	40014000 	.word	0x40014000

0800a668 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a672:	2300      	movs	r3, #0
 800a674:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d101      	bne.n	800a684 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a680:	2302      	movs	r3, #2
 800a682:	e078      	b.n	800a776 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	4313      	orrs	r3, r2
 800a698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	041b      	lsls	r3, r3, #16
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	69db      	ldr	r3, [r3, #28]
 800a708:	4313      	orrs	r3, r2
 800a70a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a1c      	ldr	r2, [pc, #112]	@ (800a784 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d009      	beq.n	800a72a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a1b      	ldr	r2, [pc, #108]	@ (800a788 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d004      	beq.n	800a72a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a19      	ldr	r2, [pc, #100]	@ (800a78c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d11c      	bne.n	800a764 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a734:	051b      	lsls	r3, r3, #20
 800a736:	4313      	orrs	r3, r2
 800a738:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	6a1b      	ldr	r3, [r3, #32]
 800a744:	4313      	orrs	r3, r2
 800a746:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a752:	4313      	orrs	r3, r2
 800a754:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a760:	4313      	orrs	r3, r2
 800a762:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3714      	adds	r7, #20
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	40012c00 	.word	0x40012c00
 800a788:	40013400 	.word	0x40013400
 800a78c:	40015000 	.word	0x40015000

0800a790 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a798:	bf00      	nop
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <_ZdlPvj>:
 800a81c:	f000 b804 	b.w	800a828 <_ZdlPv>

0800a820 <_ZdaPv>:
 800a820:	f000 b802 	b.w	800a828 <_ZdlPv>

0800a824 <_Znaj>:
 800a824:	f000 b802 	b.w	800a82c <_Znwj>

0800a828 <_ZdlPv>:
 800a828:	f001 ba0c 	b.w	800bc44 <free>

0800a82c <_Znwj>:
 800a82c:	2801      	cmp	r0, #1
 800a82e:	bf38      	it	cc
 800a830:	2001      	movcc	r0, #1
 800a832:	b510      	push	{r4, lr}
 800a834:	4604      	mov	r4, r0
 800a836:	4620      	mov	r0, r4
 800a838:	f001 f9fc 	bl	800bc34 <malloc>
 800a83c:	b100      	cbz	r0, 800a840 <_Znwj+0x14>
 800a83e:	bd10      	pop	{r4, pc}
 800a840:	f000 f806 	bl	800a850 <_ZSt15get_new_handlerv>
 800a844:	b908      	cbnz	r0, 800a84a <_Znwj+0x1e>
 800a846:	f001 f9ed 	bl	800bc24 <abort>
 800a84a:	4780      	blx	r0
 800a84c:	e7f3      	b.n	800a836 <_Znwj+0xa>
	...

0800a850 <_ZSt15get_new_handlerv>:
 800a850:	4b02      	ldr	r3, [pc, #8]	@ (800a85c <_ZSt15get_new_handlerv+0xc>)
 800a852:	6818      	ldr	r0, [r3, #0]
 800a854:	f3bf 8f5b 	dmb	ish
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	200007d4 	.word	0x200007d4

0800a860 <pow>:
 800a860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a862:	ed2d 8b02 	vpush	{d8}
 800a866:	eeb0 8a40 	vmov.f32	s16, s0
 800a86a:	eef0 8a60 	vmov.f32	s17, s1
 800a86e:	ec55 4b11 	vmov	r4, r5, d1
 800a872:	f000 f979 	bl	800ab68 <__ieee754_pow>
 800a876:	4622      	mov	r2, r4
 800a878:	462b      	mov	r3, r5
 800a87a:	4620      	mov	r0, r4
 800a87c:	4629      	mov	r1, r5
 800a87e:	ec57 6b10 	vmov	r6, r7, d0
 800a882:	f7f6 f91f 	bl	8000ac4 <__aeabi_dcmpun>
 800a886:	2800      	cmp	r0, #0
 800a888:	d13b      	bne.n	800a902 <pow+0xa2>
 800a88a:	ec51 0b18 	vmov	r0, r1, d8
 800a88e:	2200      	movs	r2, #0
 800a890:	2300      	movs	r3, #0
 800a892:	f7f6 f8e5 	bl	8000a60 <__aeabi_dcmpeq>
 800a896:	b1b8      	cbz	r0, 800a8c8 <pow+0x68>
 800a898:	2200      	movs	r2, #0
 800a89a:	2300      	movs	r3, #0
 800a89c:	4620      	mov	r0, r4
 800a89e:	4629      	mov	r1, r5
 800a8a0:	f7f6 f8de 	bl	8000a60 <__aeabi_dcmpeq>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d146      	bne.n	800a936 <pow+0xd6>
 800a8a8:	ec45 4b10 	vmov	d0, r4, r5
 800a8ac:	f000 f888 	bl	800a9c0 <finite>
 800a8b0:	b338      	cbz	r0, 800a902 <pow+0xa2>
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	f7f6 f8db 	bl	8000a74 <__aeabi_dcmplt>
 800a8be:	b300      	cbz	r0, 800a902 <pow+0xa2>
 800a8c0:	f001 fad2 	bl	800be68 <__errno>
 800a8c4:	2322      	movs	r3, #34	@ 0x22
 800a8c6:	e01b      	b.n	800a900 <pow+0xa0>
 800a8c8:	ec47 6b10 	vmov	d0, r6, r7
 800a8cc:	f000 f878 	bl	800a9c0 <finite>
 800a8d0:	b9e0      	cbnz	r0, 800a90c <pow+0xac>
 800a8d2:	eeb0 0a48 	vmov.f32	s0, s16
 800a8d6:	eef0 0a68 	vmov.f32	s1, s17
 800a8da:	f000 f871 	bl	800a9c0 <finite>
 800a8de:	b1a8      	cbz	r0, 800a90c <pow+0xac>
 800a8e0:	ec45 4b10 	vmov	d0, r4, r5
 800a8e4:	f000 f86c 	bl	800a9c0 <finite>
 800a8e8:	b180      	cbz	r0, 800a90c <pow+0xac>
 800a8ea:	4632      	mov	r2, r6
 800a8ec:	463b      	mov	r3, r7
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	4639      	mov	r1, r7
 800a8f2:	f7f6 f8e7 	bl	8000ac4 <__aeabi_dcmpun>
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	d0e2      	beq.n	800a8c0 <pow+0x60>
 800a8fa:	f001 fab5 	bl	800be68 <__errno>
 800a8fe:	2321      	movs	r3, #33	@ 0x21
 800a900:	6003      	str	r3, [r0, #0]
 800a902:	ecbd 8b02 	vpop	{d8}
 800a906:	ec47 6b10 	vmov	d0, r6, r7
 800a90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a90c:	2200      	movs	r2, #0
 800a90e:	2300      	movs	r3, #0
 800a910:	4630      	mov	r0, r6
 800a912:	4639      	mov	r1, r7
 800a914:	f7f6 f8a4 	bl	8000a60 <__aeabi_dcmpeq>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d0f2      	beq.n	800a902 <pow+0xa2>
 800a91c:	eeb0 0a48 	vmov.f32	s0, s16
 800a920:	eef0 0a68 	vmov.f32	s1, s17
 800a924:	f000 f84c 	bl	800a9c0 <finite>
 800a928:	2800      	cmp	r0, #0
 800a92a:	d0ea      	beq.n	800a902 <pow+0xa2>
 800a92c:	ec45 4b10 	vmov	d0, r4, r5
 800a930:	f000 f846 	bl	800a9c0 <finite>
 800a934:	e7c3      	b.n	800a8be <pow+0x5e>
 800a936:	4f01      	ldr	r7, [pc, #4]	@ (800a93c <pow+0xdc>)
 800a938:	2600      	movs	r6, #0
 800a93a:	e7e2      	b.n	800a902 <pow+0xa2>
 800a93c:	3ff00000 	.word	0x3ff00000

0800a940 <atan2f>:
 800a940:	f000 be5e 	b.w	800b600 <__ieee754_atan2f>

0800a944 <fmodf>:
 800a944:	b508      	push	{r3, lr}
 800a946:	ed2d 8b02 	vpush	{d8}
 800a94a:	eef0 8a40 	vmov.f32	s17, s0
 800a94e:	eeb0 8a60 	vmov.f32	s16, s1
 800a952:	f000 fef5 	bl	800b740 <__ieee754_fmodf>
 800a956:	eef4 8a48 	vcmp.f32	s17, s16
 800a95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a95e:	d60c      	bvs.n	800a97a <fmodf+0x36>
 800a960:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a980 <fmodf+0x3c>
 800a964:	eeb4 8a68 	vcmp.f32	s16, s17
 800a968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a96c:	d105      	bne.n	800a97a <fmodf+0x36>
 800a96e:	f001 fa7b 	bl	800be68 <__errno>
 800a972:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a976:	2321      	movs	r3, #33	@ 0x21
 800a978:	6003      	str	r3, [r0, #0]
 800a97a:	ecbd 8b02 	vpop	{d8}
 800a97e:	bd08      	pop	{r3, pc}
 800a980:	00000000 	.word	0x00000000

0800a984 <sqrtf>:
 800a984:	b508      	push	{r3, lr}
 800a986:	ed2d 8b02 	vpush	{d8}
 800a98a:	eeb0 8a40 	vmov.f32	s16, s0
 800a98e:	f000 f8a1 	bl	800aad4 <__ieee754_sqrtf>
 800a992:	eeb4 8a48 	vcmp.f32	s16, s16
 800a996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a99a:	d60c      	bvs.n	800a9b6 <sqrtf+0x32>
 800a99c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a9bc <sqrtf+0x38>
 800a9a0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9a8:	d505      	bpl.n	800a9b6 <sqrtf+0x32>
 800a9aa:	f001 fa5d 	bl	800be68 <__errno>
 800a9ae:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a9b2:	2321      	movs	r3, #33	@ 0x21
 800a9b4:	6003      	str	r3, [r0, #0]
 800a9b6:	ecbd 8b02 	vpop	{d8}
 800a9ba:	bd08      	pop	{r3, pc}
 800a9bc:	00000000 	.word	0x00000000

0800a9c0 <finite>:
 800a9c0:	b082      	sub	sp, #8
 800a9c2:	ed8d 0b00 	vstr	d0, [sp]
 800a9c6:	9801      	ldr	r0, [sp, #4]
 800a9c8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a9cc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a9d0:	0fc0      	lsrs	r0, r0, #31
 800a9d2:	b002      	add	sp, #8
 800a9d4:	4770      	bx	lr
	...

0800a9d8 <scalbn>:
 800a9d8:	b570      	push	{r4, r5, r6, lr}
 800a9da:	ec55 4b10 	vmov	r4, r5, d0
 800a9de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a9e2:	4606      	mov	r6, r0
 800a9e4:	462b      	mov	r3, r5
 800a9e6:	b991      	cbnz	r1, 800aa0e <scalbn+0x36>
 800a9e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a9ec:	4323      	orrs	r3, r4
 800a9ee:	d03d      	beq.n	800aa6c <scalbn+0x94>
 800a9f0:	4b35      	ldr	r3, [pc, #212]	@ (800aac8 <scalbn+0xf0>)
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f7f5 fdca 	bl	8000590 <__aeabi_dmul>
 800a9fc:	4b33      	ldr	r3, [pc, #204]	@ (800aacc <scalbn+0xf4>)
 800a9fe:	429e      	cmp	r6, r3
 800aa00:	4604      	mov	r4, r0
 800aa02:	460d      	mov	r5, r1
 800aa04:	da0f      	bge.n	800aa26 <scalbn+0x4e>
 800aa06:	a328      	add	r3, pc, #160	@ (adr r3, 800aaa8 <scalbn+0xd0>)
 800aa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0c:	e01e      	b.n	800aa4c <scalbn+0x74>
 800aa0e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800aa12:	4291      	cmp	r1, r2
 800aa14:	d10b      	bne.n	800aa2e <scalbn+0x56>
 800aa16:	4622      	mov	r2, r4
 800aa18:	4620      	mov	r0, r4
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	f7f5 fc02 	bl	8000224 <__adddf3>
 800aa20:	4604      	mov	r4, r0
 800aa22:	460d      	mov	r5, r1
 800aa24:	e022      	b.n	800aa6c <scalbn+0x94>
 800aa26:	460b      	mov	r3, r1
 800aa28:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800aa2c:	3936      	subs	r1, #54	@ 0x36
 800aa2e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800aa32:	4296      	cmp	r6, r2
 800aa34:	dd0d      	ble.n	800aa52 <scalbn+0x7a>
 800aa36:	2d00      	cmp	r5, #0
 800aa38:	a11d      	add	r1, pc, #116	@ (adr r1, 800aab0 <scalbn+0xd8>)
 800aa3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa3e:	da02      	bge.n	800aa46 <scalbn+0x6e>
 800aa40:	a11d      	add	r1, pc, #116	@ (adr r1, 800aab8 <scalbn+0xe0>)
 800aa42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa46:	a31a      	add	r3, pc, #104	@ (adr r3, 800aab0 <scalbn+0xd8>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f7f5 fda0 	bl	8000590 <__aeabi_dmul>
 800aa50:	e7e6      	b.n	800aa20 <scalbn+0x48>
 800aa52:	1872      	adds	r2, r6, r1
 800aa54:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800aa58:	428a      	cmp	r2, r1
 800aa5a:	dcec      	bgt.n	800aa36 <scalbn+0x5e>
 800aa5c:	2a00      	cmp	r2, #0
 800aa5e:	dd08      	ble.n	800aa72 <scalbn+0x9a>
 800aa60:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800aa64:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800aa68:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa6c:	ec45 4b10 	vmov	d0, r4, r5
 800aa70:	bd70      	pop	{r4, r5, r6, pc}
 800aa72:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800aa76:	da08      	bge.n	800aa8a <scalbn+0xb2>
 800aa78:	2d00      	cmp	r5, #0
 800aa7a:	a10b      	add	r1, pc, #44	@ (adr r1, 800aaa8 <scalbn+0xd0>)
 800aa7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa80:	dac1      	bge.n	800aa06 <scalbn+0x2e>
 800aa82:	a10f      	add	r1, pc, #60	@ (adr r1, 800aac0 <scalbn+0xe8>)
 800aa84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa88:	e7bd      	b.n	800aa06 <scalbn+0x2e>
 800aa8a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800aa8e:	3236      	adds	r2, #54	@ 0x36
 800aa90:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800aa94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa98:	4620      	mov	r0, r4
 800aa9a:	4b0d      	ldr	r3, [pc, #52]	@ (800aad0 <scalbn+0xf8>)
 800aa9c:	4629      	mov	r1, r5
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	e7d4      	b.n	800aa4c <scalbn+0x74>
 800aaa2:	bf00      	nop
 800aaa4:	f3af 8000 	nop.w
 800aaa8:	c2f8f359 	.word	0xc2f8f359
 800aaac:	01a56e1f 	.word	0x01a56e1f
 800aab0:	8800759c 	.word	0x8800759c
 800aab4:	7e37e43c 	.word	0x7e37e43c
 800aab8:	8800759c 	.word	0x8800759c
 800aabc:	fe37e43c 	.word	0xfe37e43c
 800aac0:	c2f8f359 	.word	0xc2f8f359
 800aac4:	81a56e1f 	.word	0x81a56e1f
 800aac8:	43500000 	.word	0x43500000
 800aacc:	ffff3cb0 	.word	0xffff3cb0
 800aad0:	3c900000 	.word	0x3c900000

0800aad4 <__ieee754_sqrtf>:
 800aad4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800aad8:	4770      	bx	lr
	...

0800aadc <floorf>:
 800aadc:	ee10 3a10 	vmov	r3, s0
 800aae0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800aae4:	3a7f      	subs	r2, #127	@ 0x7f
 800aae6:	2a16      	cmp	r2, #22
 800aae8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800aaec:	dc2b      	bgt.n	800ab46 <floorf+0x6a>
 800aaee:	2a00      	cmp	r2, #0
 800aaf0:	da12      	bge.n	800ab18 <floorf+0x3c>
 800aaf2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ab58 <floorf+0x7c>
 800aaf6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aafa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab02:	dd06      	ble.n	800ab12 <floorf+0x36>
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	da24      	bge.n	800ab52 <floorf+0x76>
 800ab08:	2900      	cmp	r1, #0
 800ab0a:	4b14      	ldr	r3, [pc, #80]	@ (800ab5c <floorf+0x80>)
 800ab0c:	bf08      	it	eq
 800ab0e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800ab12:	ee00 3a10 	vmov	s0, r3
 800ab16:	4770      	bx	lr
 800ab18:	4911      	ldr	r1, [pc, #68]	@ (800ab60 <floorf+0x84>)
 800ab1a:	4111      	asrs	r1, r2
 800ab1c:	420b      	tst	r3, r1
 800ab1e:	d0fa      	beq.n	800ab16 <floorf+0x3a>
 800ab20:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800ab58 <floorf+0x7c>
 800ab24:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ab28:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ab2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab30:	ddef      	ble.n	800ab12 <floorf+0x36>
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	bfbe      	ittt	lt
 800ab36:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800ab3a:	fa40 f202 	asrlt.w	r2, r0, r2
 800ab3e:	189b      	addlt	r3, r3, r2
 800ab40:	ea23 0301 	bic.w	r3, r3, r1
 800ab44:	e7e5      	b.n	800ab12 <floorf+0x36>
 800ab46:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ab4a:	d3e4      	bcc.n	800ab16 <floorf+0x3a>
 800ab4c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ab50:	4770      	bx	lr
 800ab52:	2300      	movs	r3, #0
 800ab54:	e7dd      	b.n	800ab12 <floorf+0x36>
 800ab56:	bf00      	nop
 800ab58:	7149f2ca 	.word	0x7149f2ca
 800ab5c:	bf800000 	.word	0xbf800000
 800ab60:	007fffff 	.word	0x007fffff
 800ab64:	00000000 	.word	0x00000000

0800ab68 <__ieee754_pow>:
 800ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	b091      	sub	sp, #68	@ 0x44
 800ab6e:	ed8d 1b00 	vstr	d1, [sp]
 800ab72:	e9dd 1900 	ldrd	r1, r9, [sp]
 800ab76:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800ab7a:	ea5a 0001 	orrs.w	r0, sl, r1
 800ab7e:	ec57 6b10 	vmov	r6, r7, d0
 800ab82:	d113      	bne.n	800abac <__ieee754_pow+0x44>
 800ab84:	19b3      	adds	r3, r6, r6
 800ab86:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800ab8a:	4152      	adcs	r2, r2
 800ab8c:	4298      	cmp	r0, r3
 800ab8e:	4b98      	ldr	r3, [pc, #608]	@ (800adf0 <__ieee754_pow+0x288>)
 800ab90:	4193      	sbcs	r3, r2
 800ab92:	f080 84ea 	bcs.w	800b56a <__ieee754_pow+0xa02>
 800ab96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	4639      	mov	r1, r7
 800ab9e:	f7f5 fb41 	bl	8000224 <__adddf3>
 800aba2:	ec41 0b10 	vmov	d0, r0, r1
 800aba6:	b011      	add	sp, #68	@ 0x44
 800aba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abac:	4a91      	ldr	r2, [pc, #580]	@ (800adf4 <__ieee754_pow+0x28c>)
 800abae:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800abb2:	4590      	cmp	r8, r2
 800abb4:	463d      	mov	r5, r7
 800abb6:	4633      	mov	r3, r6
 800abb8:	d806      	bhi.n	800abc8 <__ieee754_pow+0x60>
 800abba:	d101      	bne.n	800abc0 <__ieee754_pow+0x58>
 800abbc:	2e00      	cmp	r6, #0
 800abbe:	d1ea      	bne.n	800ab96 <__ieee754_pow+0x2e>
 800abc0:	4592      	cmp	sl, r2
 800abc2:	d801      	bhi.n	800abc8 <__ieee754_pow+0x60>
 800abc4:	d10e      	bne.n	800abe4 <__ieee754_pow+0x7c>
 800abc6:	b169      	cbz	r1, 800abe4 <__ieee754_pow+0x7c>
 800abc8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800abcc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800abd0:	431d      	orrs	r5, r3
 800abd2:	d1e0      	bne.n	800ab96 <__ieee754_pow+0x2e>
 800abd4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800abd8:	18db      	adds	r3, r3, r3
 800abda:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800abde:	4152      	adcs	r2, r2
 800abe0:	429d      	cmp	r5, r3
 800abe2:	e7d4      	b.n	800ab8e <__ieee754_pow+0x26>
 800abe4:	2d00      	cmp	r5, #0
 800abe6:	46c3      	mov	fp, r8
 800abe8:	da3a      	bge.n	800ac60 <__ieee754_pow+0xf8>
 800abea:	4a83      	ldr	r2, [pc, #524]	@ (800adf8 <__ieee754_pow+0x290>)
 800abec:	4592      	cmp	sl, r2
 800abee:	d84d      	bhi.n	800ac8c <__ieee754_pow+0x124>
 800abf0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800abf4:	4592      	cmp	sl, r2
 800abf6:	f240 84c7 	bls.w	800b588 <__ieee754_pow+0xa20>
 800abfa:	ea4f 522a 	mov.w	r2, sl, asr #20
 800abfe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ac02:	2a14      	cmp	r2, #20
 800ac04:	dd0f      	ble.n	800ac26 <__ieee754_pow+0xbe>
 800ac06:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800ac0a:	fa21 f402 	lsr.w	r4, r1, r2
 800ac0e:	fa04 f202 	lsl.w	r2, r4, r2
 800ac12:	428a      	cmp	r2, r1
 800ac14:	f040 84b8 	bne.w	800b588 <__ieee754_pow+0xa20>
 800ac18:	f004 0401 	and.w	r4, r4, #1
 800ac1c:	f1c4 0402 	rsb	r4, r4, #2
 800ac20:	2900      	cmp	r1, #0
 800ac22:	d158      	bne.n	800acd6 <__ieee754_pow+0x16e>
 800ac24:	e00e      	b.n	800ac44 <__ieee754_pow+0xdc>
 800ac26:	2900      	cmp	r1, #0
 800ac28:	d154      	bne.n	800acd4 <__ieee754_pow+0x16c>
 800ac2a:	f1c2 0214 	rsb	r2, r2, #20
 800ac2e:	fa4a f402 	asr.w	r4, sl, r2
 800ac32:	fa04 f202 	lsl.w	r2, r4, r2
 800ac36:	4552      	cmp	r2, sl
 800ac38:	f040 84a3 	bne.w	800b582 <__ieee754_pow+0xa1a>
 800ac3c:	f004 0401 	and.w	r4, r4, #1
 800ac40:	f1c4 0402 	rsb	r4, r4, #2
 800ac44:	4a6d      	ldr	r2, [pc, #436]	@ (800adfc <__ieee754_pow+0x294>)
 800ac46:	4592      	cmp	sl, r2
 800ac48:	d12e      	bne.n	800aca8 <__ieee754_pow+0x140>
 800ac4a:	f1b9 0f00 	cmp.w	r9, #0
 800ac4e:	f280 8494 	bge.w	800b57a <__ieee754_pow+0xa12>
 800ac52:	496a      	ldr	r1, [pc, #424]	@ (800adfc <__ieee754_pow+0x294>)
 800ac54:	4632      	mov	r2, r6
 800ac56:	463b      	mov	r3, r7
 800ac58:	2000      	movs	r0, #0
 800ac5a:	f7f5 fdc3 	bl	80007e4 <__aeabi_ddiv>
 800ac5e:	e7a0      	b.n	800aba2 <__ieee754_pow+0x3a>
 800ac60:	2400      	movs	r4, #0
 800ac62:	bbc1      	cbnz	r1, 800acd6 <__ieee754_pow+0x16e>
 800ac64:	4a63      	ldr	r2, [pc, #396]	@ (800adf4 <__ieee754_pow+0x28c>)
 800ac66:	4592      	cmp	sl, r2
 800ac68:	d1ec      	bne.n	800ac44 <__ieee754_pow+0xdc>
 800ac6a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800ac6e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800ac72:	431a      	orrs	r2, r3
 800ac74:	f000 8479 	beq.w	800b56a <__ieee754_pow+0xa02>
 800ac78:	4b61      	ldr	r3, [pc, #388]	@ (800ae00 <__ieee754_pow+0x298>)
 800ac7a:	4598      	cmp	r8, r3
 800ac7c:	d908      	bls.n	800ac90 <__ieee754_pow+0x128>
 800ac7e:	f1b9 0f00 	cmp.w	r9, #0
 800ac82:	f2c0 8476 	blt.w	800b572 <__ieee754_pow+0xa0a>
 800ac86:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac8a:	e78a      	b.n	800aba2 <__ieee754_pow+0x3a>
 800ac8c:	2402      	movs	r4, #2
 800ac8e:	e7e8      	b.n	800ac62 <__ieee754_pow+0xfa>
 800ac90:	f1b9 0f00 	cmp.w	r9, #0
 800ac94:	f04f 0000 	mov.w	r0, #0
 800ac98:	f04f 0100 	mov.w	r1, #0
 800ac9c:	da81      	bge.n	800aba2 <__ieee754_pow+0x3a>
 800ac9e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800aca2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800aca6:	e77c      	b.n	800aba2 <__ieee754_pow+0x3a>
 800aca8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800acac:	d106      	bne.n	800acbc <__ieee754_pow+0x154>
 800acae:	4632      	mov	r2, r6
 800acb0:	463b      	mov	r3, r7
 800acb2:	4630      	mov	r0, r6
 800acb4:	4639      	mov	r1, r7
 800acb6:	f7f5 fc6b 	bl	8000590 <__aeabi_dmul>
 800acba:	e772      	b.n	800aba2 <__ieee754_pow+0x3a>
 800acbc:	4a51      	ldr	r2, [pc, #324]	@ (800ae04 <__ieee754_pow+0x29c>)
 800acbe:	4591      	cmp	r9, r2
 800acc0:	d109      	bne.n	800acd6 <__ieee754_pow+0x16e>
 800acc2:	2d00      	cmp	r5, #0
 800acc4:	db07      	blt.n	800acd6 <__ieee754_pow+0x16e>
 800acc6:	ec47 6b10 	vmov	d0, r6, r7
 800acca:	b011      	add	sp, #68	@ 0x44
 800accc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd0:	f000 bece 	b.w	800ba70 <__ieee754_sqrt>
 800acd4:	2400      	movs	r4, #0
 800acd6:	ec47 6b10 	vmov	d0, r6, r7
 800acda:	9302      	str	r3, [sp, #8]
 800acdc:	f000 fc88 	bl	800b5f0 <fabs>
 800ace0:	9b02      	ldr	r3, [sp, #8]
 800ace2:	ec51 0b10 	vmov	r0, r1, d0
 800ace6:	bb53      	cbnz	r3, 800ad3e <__ieee754_pow+0x1d6>
 800ace8:	4b44      	ldr	r3, [pc, #272]	@ (800adfc <__ieee754_pow+0x294>)
 800acea:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800acee:	429a      	cmp	r2, r3
 800acf0:	d002      	beq.n	800acf8 <__ieee754_pow+0x190>
 800acf2:	f1b8 0f00 	cmp.w	r8, #0
 800acf6:	d122      	bne.n	800ad3e <__ieee754_pow+0x1d6>
 800acf8:	f1b9 0f00 	cmp.w	r9, #0
 800acfc:	da05      	bge.n	800ad0a <__ieee754_pow+0x1a2>
 800acfe:	4602      	mov	r2, r0
 800ad00:	460b      	mov	r3, r1
 800ad02:	2000      	movs	r0, #0
 800ad04:	493d      	ldr	r1, [pc, #244]	@ (800adfc <__ieee754_pow+0x294>)
 800ad06:	f7f5 fd6d 	bl	80007e4 <__aeabi_ddiv>
 800ad0a:	2d00      	cmp	r5, #0
 800ad0c:	f6bf af49 	bge.w	800aba2 <__ieee754_pow+0x3a>
 800ad10:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800ad14:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800ad18:	ea58 0804 	orrs.w	r8, r8, r4
 800ad1c:	d108      	bne.n	800ad30 <__ieee754_pow+0x1c8>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	4610      	mov	r0, r2
 800ad24:	4619      	mov	r1, r3
 800ad26:	f7f5 fa7b 	bl	8000220 <__aeabi_dsub>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	e794      	b.n	800ac5a <__ieee754_pow+0xf2>
 800ad30:	2c01      	cmp	r4, #1
 800ad32:	f47f af36 	bne.w	800aba2 <__ieee754_pow+0x3a>
 800ad36:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	e731      	b.n	800aba2 <__ieee754_pow+0x3a>
 800ad3e:	0feb      	lsrs	r3, r5, #31
 800ad40:	3b01      	subs	r3, #1
 800ad42:	ea53 0204 	orrs.w	r2, r3, r4
 800ad46:	d102      	bne.n	800ad4e <__ieee754_pow+0x1e6>
 800ad48:	4632      	mov	r2, r6
 800ad4a:	463b      	mov	r3, r7
 800ad4c:	e7e9      	b.n	800ad22 <__ieee754_pow+0x1ba>
 800ad4e:	3c01      	subs	r4, #1
 800ad50:	431c      	orrs	r4, r3
 800ad52:	d016      	beq.n	800ad82 <__ieee754_pow+0x21a>
 800ad54:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800ade0 <__ieee754_pow+0x278>
 800ad58:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ad5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad60:	f240 8112 	bls.w	800af88 <__ieee754_pow+0x420>
 800ad64:	4b28      	ldr	r3, [pc, #160]	@ (800ae08 <__ieee754_pow+0x2a0>)
 800ad66:	459a      	cmp	sl, r3
 800ad68:	4b25      	ldr	r3, [pc, #148]	@ (800ae00 <__ieee754_pow+0x298>)
 800ad6a:	d916      	bls.n	800ad9a <__ieee754_pow+0x232>
 800ad6c:	4598      	cmp	r8, r3
 800ad6e:	d80b      	bhi.n	800ad88 <__ieee754_pow+0x220>
 800ad70:	f1b9 0f00 	cmp.w	r9, #0
 800ad74:	da0b      	bge.n	800ad8e <__ieee754_pow+0x226>
 800ad76:	2000      	movs	r0, #0
 800ad78:	b011      	add	sp, #68	@ 0x44
 800ad7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7e:	f000 be6f 	b.w	800ba60 <__math_oflow>
 800ad82:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800ade8 <__ieee754_pow+0x280>
 800ad86:	e7e7      	b.n	800ad58 <__ieee754_pow+0x1f0>
 800ad88:	f1b9 0f00 	cmp.w	r9, #0
 800ad8c:	dcf3      	bgt.n	800ad76 <__ieee754_pow+0x20e>
 800ad8e:	2000      	movs	r0, #0
 800ad90:	b011      	add	sp, #68	@ 0x44
 800ad92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad96:	f000 be5b 	b.w	800ba50 <__math_uflow>
 800ad9a:	4598      	cmp	r8, r3
 800ad9c:	d20c      	bcs.n	800adb8 <__ieee754_pow+0x250>
 800ad9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ada2:	2200      	movs	r2, #0
 800ada4:	2300      	movs	r3, #0
 800ada6:	f7f5 fe65 	bl	8000a74 <__aeabi_dcmplt>
 800adaa:	3800      	subs	r0, #0
 800adac:	bf18      	it	ne
 800adae:	2001      	movne	r0, #1
 800adb0:	f1b9 0f00 	cmp.w	r9, #0
 800adb4:	daec      	bge.n	800ad90 <__ieee754_pow+0x228>
 800adb6:	e7df      	b.n	800ad78 <__ieee754_pow+0x210>
 800adb8:	4b10      	ldr	r3, [pc, #64]	@ (800adfc <__ieee754_pow+0x294>)
 800adba:	4598      	cmp	r8, r3
 800adbc:	f04f 0200 	mov.w	r2, #0
 800adc0:	d924      	bls.n	800ae0c <__ieee754_pow+0x2a4>
 800adc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adc6:	2300      	movs	r3, #0
 800adc8:	f7f5 fe54 	bl	8000a74 <__aeabi_dcmplt>
 800adcc:	3800      	subs	r0, #0
 800adce:	bf18      	it	ne
 800add0:	2001      	movne	r0, #1
 800add2:	f1b9 0f00 	cmp.w	r9, #0
 800add6:	dccf      	bgt.n	800ad78 <__ieee754_pow+0x210>
 800add8:	e7da      	b.n	800ad90 <__ieee754_pow+0x228>
 800adda:	bf00      	nop
 800addc:	f3af 8000 	nop.w
 800ade0:	00000000 	.word	0x00000000
 800ade4:	3ff00000 	.word	0x3ff00000
 800ade8:	00000000 	.word	0x00000000
 800adec:	bff00000 	.word	0xbff00000
 800adf0:	fff00000 	.word	0xfff00000
 800adf4:	7ff00000 	.word	0x7ff00000
 800adf8:	433fffff 	.word	0x433fffff
 800adfc:	3ff00000 	.word	0x3ff00000
 800ae00:	3fefffff 	.word	0x3fefffff
 800ae04:	3fe00000 	.word	0x3fe00000
 800ae08:	43f00000 	.word	0x43f00000
 800ae0c:	4b5a      	ldr	r3, [pc, #360]	@ (800af78 <__ieee754_pow+0x410>)
 800ae0e:	f7f5 fa07 	bl	8000220 <__aeabi_dsub>
 800ae12:	a351      	add	r3, pc, #324	@ (adr r3, 800af58 <__ieee754_pow+0x3f0>)
 800ae14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae18:	4604      	mov	r4, r0
 800ae1a:	460d      	mov	r5, r1
 800ae1c:	f7f5 fbb8 	bl	8000590 <__aeabi_dmul>
 800ae20:	a34f      	add	r3, pc, #316	@ (adr r3, 800af60 <__ieee754_pow+0x3f8>)
 800ae22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae26:	4606      	mov	r6, r0
 800ae28:	460f      	mov	r7, r1
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	4629      	mov	r1, r5
 800ae2e:	f7f5 fbaf 	bl	8000590 <__aeabi_dmul>
 800ae32:	4b52      	ldr	r3, [pc, #328]	@ (800af7c <__ieee754_pow+0x414>)
 800ae34:	4682      	mov	sl, r0
 800ae36:	468b      	mov	fp, r1
 800ae38:	2200      	movs	r2, #0
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	f7f5 fba7 	bl	8000590 <__aeabi_dmul>
 800ae42:	4602      	mov	r2, r0
 800ae44:	460b      	mov	r3, r1
 800ae46:	a148      	add	r1, pc, #288	@ (adr r1, 800af68 <__ieee754_pow+0x400>)
 800ae48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae4c:	f7f5 f9e8 	bl	8000220 <__aeabi_dsub>
 800ae50:	4622      	mov	r2, r4
 800ae52:	462b      	mov	r3, r5
 800ae54:	f7f5 fb9c 	bl	8000590 <__aeabi_dmul>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	4948      	ldr	r1, [pc, #288]	@ (800af80 <__ieee754_pow+0x418>)
 800ae60:	f7f5 f9de 	bl	8000220 <__aeabi_dsub>
 800ae64:	4622      	mov	r2, r4
 800ae66:	4680      	mov	r8, r0
 800ae68:	4689      	mov	r9, r1
 800ae6a:	462b      	mov	r3, r5
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	4629      	mov	r1, r5
 800ae70:	f7f5 fb8e 	bl	8000590 <__aeabi_dmul>
 800ae74:	4602      	mov	r2, r0
 800ae76:	460b      	mov	r3, r1
 800ae78:	4640      	mov	r0, r8
 800ae7a:	4649      	mov	r1, r9
 800ae7c:	f7f5 fb88 	bl	8000590 <__aeabi_dmul>
 800ae80:	a33b      	add	r3, pc, #236	@ (adr r3, 800af70 <__ieee754_pow+0x408>)
 800ae82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae86:	f7f5 fb83 	bl	8000590 <__aeabi_dmul>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	4650      	mov	r0, sl
 800ae90:	4659      	mov	r1, fp
 800ae92:	f7f5 f9c5 	bl	8000220 <__aeabi_dsub>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	4680      	mov	r8, r0
 800ae9c:	4689      	mov	r9, r1
 800ae9e:	4630      	mov	r0, r6
 800aea0:	4639      	mov	r1, r7
 800aea2:	f7f5 f9bf 	bl	8000224 <__adddf3>
 800aea6:	2400      	movs	r4, #0
 800aea8:	4632      	mov	r2, r6
 800aeaa:	463b      	mov	r3, r7
 800aeac:	4620      	mov	r0, r4
 800aeae:	460d      	mov	r5, r1
 800aeb0:	f7f5 f9b6 	bl	8000220 <__aeabi_dsub>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4640      	mov	r0, r8
 800aeba:	4649      	mov	r1, r9
 800aebc:	f7f5 f9b0 	bl	8000220 <__aeabi_dsub>
 800aec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aec4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aec8:	2300      	movs	r3, #0
 800aeca:	9304      	str	r3, [sp, #16]
 800aecc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800aed0:	4606      	mov	r6, r0
 800aed2:	460f      	mov	r7, r1
 800aed4:	4652      	mov	r2, sl
 800aed6:	465b      	mov	r3, fp
 800aed8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aedc:	f7f5 f9a0 	bl	8000220 <__aeabi_dsub>
 800aee0:	4622      	mov	r2, r4
 800aee2:	462b      	mov	r3, r5
 800aee4:	f7f5 fb54 	bl	8000590 <__aeabi_dmul>
 800aee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aeec:	4680      	mov	r8, r0
 800aeee:	4689      	mov	r9, r1
 800aef0:	4630      	mov	r0, r6
 800aef2:	4639      	mov	r1, r7
 800aef4:	f7f5 fb4c 	bl	8000590 <__aeabi_dmul>
 800aef8:	4602      	mov	r2, r0
 800aefa:	460b      	mov	r3, r1
 800aefc:	4640      	mov	r0, r8
 800aefe:	4649      	mov	r1, r9
 800af00:	f7f5 f990 	bl	8000224 <__adddf3>
 800af04:	4652      	mov	r2, sl
 800af06:	465b      	mov	r3, fp
 800af08:	4606      	mov	r6, r0
 800af0a:	460f      	mov	r7, r1
 800af0c:	4620      	mov	r0, r4
 800af0e:	4629      	mov	r1, r5
 800af10:	f7f5 fb3e 	bl	8000590 <__aeabi_dmul>
 800af14:	460b      	mov	r3, r1
 800af16:	4602      	mov	r2, r0
 800af18:	4680      	mov	r8, r0
 800af1a:	4689      	mov	r9, r1
 800af1c:	4630      	mov	r0, r6
 800af1e:	4639      	mov	r1, r7
 800af20:	f7f5 f980 	bl	8000224 <__adddf3>
 800af24:	4b17      	ldr	r3, [pc, #92]	@ (800af84 <__ieee754_pow+0x41c>)
 800af26:	4299      	cmp	r1, r3
 800af28:	4604      	mov	r4, r0
 800af2a:	460d      	mov	r5, r1
 800af2c:	468a      	mov	sl, r1
 800af2e:	468b      	mov	fp, r1
 800af30:	f340 82ef 	ble.w	800b512 <__ieee754_pow+0x9aa>
 800af34:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800af38:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800af3c:	4303      	orrs	r3, r0
 800af3e:	f000 81e8 	beq.w	800b312 <__ieee754_pow+0x7aa>
 800af42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af46:	2200      	movs	r2, #0
 800af48:	2300      	movs	r3, #0
 800af4a:	f7f5 fd93 	bl	8000a74 <__aeabi_dcmplt>
 800af4e:	3800      	subs	r0, #0
 800af50:	bf18      	it	ne
 800af52:	2001      	movne	r0, #1
 800af54:	e710      	b.n	800ad78 <__ieee754_pow+0x210>
 800af56:	bf00      	nop
 800af58:	60000000 	.word	0x60000000
 800af5c:	3ff71547 	.word	0x3ff71547
 800af60:	f85ddf44 	.word	0xf85ddf44
 800af64:	3e54ae0b 	.word	0x3e54ae0b
 800af68:	55555555 	.word	0x55555555
 800af6c:	3fd55555 	.word	0x3fd55555
 800af70:	652b82fe 	.word	0x652b82fe
 800af74:	3ff71547 	.word	0x3ff71547
 800af78:	3ff00000 	.word	0x3ff00000
 800af7c:	3fd00000 	.word	0x3fd00000
 800af80:	3fe00000 	.word	0x3fe00000
 800af84:	408fffff 	.word	0x408fffff
 800af88:	4bd5      	ldr	r3, [pc, #852]	@ (800b2e0 <__ieee754_pow+0x778>)
 800af8a:	402b      	ands	r3, r5
 800af8c:	2200      	movs	r2, #0
 800af8e:	b92b      	cbnz	r3, 800af9c <__ieee754_pow+0x434>
 800af90:	4bd4      	ldr	r3, [pc, #848]	@ (800b2e4 <__ieee754_pow+0x77c>)
 800af92:	f7f5 fafd 	bl	8000590 <__aeabi_dmul>
 800af96:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800af9a:	468b      	mov	fp, r1
 800af9c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800afa0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800afa4:	4413      	add	r3, r2
 800afa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800afa8:	4bcf      	ldr	r3, [pc, #828]	@ (800b2e8 <__ieee754_pow+0x780>)
 800afaa:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800afae:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800afb2:	459b      	cmp	fp, r3
 800afb4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800afb8:	dd08      	ble.n	800afcc <__ieee754_pow+0x464>
 800afba:	4bcc      	ldr	r3, [pc, #816]	@ (800b2ec <__ieee754_pow+0x784>)
 800afbc:	459b      	cmp	fp, r3
 800afbe:	f340 81a5 	ble.w	800b30c <__ieee754_pow+0x7a4>
 800afc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afc4:	3301      	adds	r3, #1
 800afc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800afc8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800afcc:	f04f 0a00 	mov.w	sl, #0
 800afd0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800afd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afd6:	4bc6      	ldr	r3, [pc, #792]	@ (800b2f0 <__ieee754_pow+0x788>)
 800afd8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800afdc:	ed93 7b00 	vldr	d7, [r3]
 800afe0:	4629      	mov	r1, r5
 800afe2:	ec53 2b17 	vmov	r2, r3, d7
 800afe6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800afea:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800afee:	f7f5 f917 	bl	8000220 <__aeabi_dsub>
 800aff2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aff6:	4606      	mov	r6, r0
 800aff8:	460f      	mov	r7, r1
 800affa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800affe:	f7f5 f911 	bl	8000224 <__adddf3>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	2000      	movs	r0, #0
 800b008:	49ba      	ldr	r1, [pc, #744]	@ (800b2f4 <__ieee754_pow+0x78c>)
 800b00a:	f7f5 fbeb 	bl	80007e4 <__aeabi_ddiv>
 800b00e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b012:	4602      	mov	r2, r0
 800b014:	460b      	mov	r3, r1
 800b016:	4630      	mov	r0, r6
 800b018:	4639      	mov	r1, r7
 800b01a:	f7f5 fab9 	bl	8000590 <__aeabi_dmul>
 800b01e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b022:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800b026:	106d      	asrs	r5, r5, #1
 800b028:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b02c:	f04f 0b00 	mov.w	fp, #0
 800b030:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b034:	4661      	mov	r1, ip
 800b036:	2200      	movs	r2, #0
 800b038:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b03c:	4658      	mov	r0, fp
 800b03e:	46e1      	mov	r9, ip
 800b040:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800b044:	4614      	mov	r4, r2
 800b046:	461d      	mov	r5, r3
 800b048:	f7f5 faa2 	bl	8000590 <__aeabi_dmul>
 800b04c:	4602      	mov	r2, r0
 800b04e:	460b      	mov	r3, r1
 800b050:	4630      	mov	r0, r6
 800b052:	4639      	mov	r1, r7
 800b054:	f7f5 f8e4 	bl	8000220 <__aeabi_dsub>
 800b058:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b05c:	4606      	mov	r6, r0
 800b05e:	460f      	mov	r7, r1
 800b060:	4620      	mov	r0, r4
 800b062:	4629      	mov	r1, r5
 800b064:	f7f5 f8dc 	bl	8000220 <__aeabi_dsub>
 800b068:	4602      	mov	r2, r0
 800b06a:	460b      	mov	r3, r1
 800b06c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b070:	f7f5 f8d6 	bl	8000220 <__aeabi_dsub>
 800b074:	465a      	mov	r2, fp
 800b076:	464b      	mov	r3, r9
 800b078:	f7f5 fa8a 	bl	8000590 <__aeabi_dmul>
 800b07c:	4602      	mov	r2, r0
 800b07e:	460b      	mov	r3, r1
 800b080:	4630      	mov	r0, r6
 800b082:	4639      	mov	r1, r7
 800b084:	f7f5 f8cc 	bl	8000220 <__aeabi_dsub>
 800b088:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b08c:	f7f5 fa80 	bl	8000590 <__aeabi_dmul>
 800b090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b094:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b098:	4610      	mov	r0, r2
 800b09a:	4619      	mov	r1, r3
 800b09c:	f7f5 fa78 	bl	8000590 <__aeabi_dmul>
 800b0a0:	a37d      	add	r3, pc, #500	@ (adr r3, 800b298 <__ieee754_pow+0x730>)
 800b0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	460d      	mov	r5, r1
 800b0aa:	f7f5 fa71 	bl	8000590 <__aeabi_dmul>
 800b0ae:	a37c      	add	r3, pc, #496	@ (adr r3, 800b2a0 <__ieee754_pow+0x738>)
 800b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b4:	f7f5 f8b6 	bl	8000224 <__adddf3>
 800b0b8:	4622      	mov	r2, r4
 800b0ba:	462b      	mov	r3, r5
 800b0bc:	f7f5 fa68 	bl	8000590 <__aeabi_dmul>
 800b0c0:	a379      	add	r3, pc, #484	@ (adr r3, 800b2a8 <__ieee754_pow+0x740>)
 800b0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c6:	f7f5 f8ad 	bl	8000224 <__adddf3>
 800b0ca:	4622      	mov	r2, r4
 800b0cc:	462b      	mov	r3, r5
 800b0ce:	f7f5 fa5f 	bl	8000590 <__aeabi_dmul>
 800b0d2:	a377      	add	r3, pc, #476	@ (adr r3, 800b2b0 <__ieee754_pow+0x748>)
 800b0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d8:	f7f5 f8a4 	bl	8000224 <__adddf3>
 800b0dc:	4622      	mov	r2, r4
 800b0de:	462b      	mov	r3, r5
 800b0e0:	f7f5 fa56 	bl	8000590 <__aeabi_dmul>
 800b0e4:	a374      	add	r3, pc, #464	@ (adr r3, 800b2b8 <__ieee754_pow+0x750>)
 800b0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ea:	f7f5 f89b 	bl	8000224 <__adddf3>
 800b0ee:	4622      	mov	r2, r4
 800b0f0:	462b      	mov	r3, r5
 800b0f2:	f7f5 fa4d 	bl	8000590 <__aeabi_dmul>
 800b0f6:	a372      	add	r3, pc, #456	@ (adr r3, 800b2c0 <__ieee754_pow+0x758>)
 800b0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fc:	f7f5 f892 	bl	8000224 <__adddf3>
 800b100:	4622      	mov	r2, r4
 800b102:	4606      	mov	r6, r0
 800b104:	460f      	mov	r7, r1
 800b106:	462b      	mov	r3, r5
 800b108:	4620      	mov	r0, r4
 800b10a:	4629      	mov	r1, r5
 800b10c:	f7f5 fa40 	bl	8000590 <__aeabi_dmul>
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	4630      	mov	r0, r6
 800b116:	4639      	mov	r1, r7
 800b118:	f7f5 fa3a 	bl	8000590 <__aeabi_dmul>
 800b11c:	465a      	mov	r2, fp
 800b11e:	4604      	mov	r4, r0
 800b120:	460d      	mov	r5, r1
 800b122:	464b      	mov	r3, r9
 800b124:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b128:	f7f5 f87c 	bl	8000224 <__adddf3>
 800b12c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b130:	f7f5 fa2e 	bl	8000590 <__aeabi_dmul>
 800b134:	4622      	mov	r2, r4
 800b136:	462b      	mov	r3, r5
 800b138:	f7f5 f874 	bl	8000224 <__adddf3>
 800b13c:	465a      	mov	r2, fp
 800b13e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b142:	464b      	mov	r3, r9
 800b144:	4658      	mov	r0, fp
 800b146:	4649      	mov	r1, r9
 800b148:	f7f5 fa22 	bl	8000590 <__aeabi_dmul>
 800b14c:	4b6a      	ldr	r3, [pc, #424]	@ (800b2f8 <__ieee754_pow+0x790>)
 800b14e:	2200      	movs	r2, #0
 800b150:	4606      	mov	r6, r0
 800b152:	460f      	mov	r7, r1
 800b154:	f7f5 f866 	bl	8000224 <__adddf3>
 800b158:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b15c:	f7f5 f862 	bl	8000224 <__adddf3>
 800b160:	46d8      	mov	r8, fp
 800b162:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800b166:	460d      	mov	r5, r1
 800b168:	465a      	mov	r2, fp
 800b16a:	460b      	mov	r3, r1
 800b16c:	4640      	mov	r0, r8
 800b16e:	4649      	mov	r1, r9
 800b170:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800b174:	f7f5 fa0c 	bl	8000590 <__aeabi_dmul>
 800b178:	465c      	mov	r4, fp
 800b17a:	4680      	mov	r8, r0
 800b17c:	4689      	mov	r9, r1
 800b17e:	4b5e      	ldr	r3, [pc, #376]	@ (800b2f8 <__ieee754_pow+0x790>)
 800b180:	2200      	movs	r2, #0
 800b182:	4620      	mov	r0, r4
 800b184:	4629      	mov	r1, r5
 800b186:	f7f5 f84b 	bl	8000220 <__aeabi_dsub>
 800b18a:	4632      	mov	r2, r6
 800b18c:	463b      	mov	r3, r7
 800b18e:	f7f5 f847 	bl	8000220 <__aeabi_dsub>
 800b192:	4602      	mov	r2, r0
 800b194:	460b      	mov	r3, r1
 800b196:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b19a:	f7f5 f841 	bl	8000220 <__aeabi_dsub>
 800b19e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1a2:	f7f5 f9f5 	bl	8000590 <__aeabi_dmul>
 800b1a6:	4622      	mov	r2, r4
 800b1a8:	4606      	mov	r6, r0
 800b1aa:	460f      	mov	r7, r1
 800b1ac:	462b      	mov	r3, r5
 800b1ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1b2:	f7f5 f9ed 	bl	8000590 <__aeabi_dmul>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	4639      	mov	r1, r7
 800b1be:	f7f5 f831 	bl	8000224 <__adddf3>
 800b1c2:	4606      	mov	r6, r0
 800b1c4:	460f      	mov	r7, r1
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	4640      	mov	r0, r8
 800b1cc:	4649      	mov	r1, r9
 800b1ce:	f7f5 f829 	bl	8000224 <__adddf3>
 800b1d2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800b1d6:	a33c      	add	r3, pc, #240	@ (adr r3, 800b2c8 <__ieee754_pow+0x760>)
 800b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1dc:	4658      	mov	r0, fp
 800b1de:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800b1e2:	460d      	mov	r5, r1
 800b1e4:	f7f5 f9d4 	bl	8000590 <__aeabi_dmul>
 800b1e8:	465c      	mov	r4, fp
 800b1ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1ee:	4642      	mov	r2, r8
 800b1f0:	464b      	mov	r3, r9
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	f7f5 f813 	bl	8000220 <__aeabi_dsub>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	4630      	mov	r0, r6
 800b200:	4639      	mov	r1, r7
 800b202:	f7f5 f80d 	bl	8000220 <__aeabi_dsub>
 800b206:	a332      	add	r3, pc, #200	@ (adr r3, 800b2d0 <__ieee754_pow+0x768>)
 800b208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20c:	f7f5 f9c0 	bl	8000590 <__aeabi_dmul>
 800b210:	a331      	add	r3, pc, #196	@ (adr r3, 800b2d8 <__ieee754_pow+0x770>)
 800b212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b216:	4606      	mov	r6, r0
 800b218:	460f      	mov	r7, r1
 800b21a:	4620      	mov	r0, r4
 800b21c:	4629      	mov	r1, r5
 800b21e:	f7f5 f9b7 	bl	8000590 <__aeabi_dmul>
 800b222:	4602      	mov	r2, r0
 800b224:	460b      	mov	r3, r1
 800b226:	4630      	mov	r0, r6
 800b228:	4639      	mov	r1, r7
 800b22a:	f7f4 fffb 	bl	8000224 <__adddf3>
 800b22e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b230:	4b32      	ldr	r3, [pc, #200]	@ (800b2fc <__ieee754_pow+0x794>)
 800b232:	4413      	add	r3, r2
 800b234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b238:	f7f4 fff4 	bl	8000224 <__adddf3>
 800b23c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b240:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b242:	f7f5 f93b 	bl	80004bc <__aeabi_i2d>
 800b246:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b248:	4b2d      	ldr	r3, [pc, #180]	@ (800b300 <__ieee754_pow+0x798>)
 800b24a:	4413      	add	r3, r2
 800b24c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b250:	4606      	mov	r6, r0
 800b252:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b256:	460f      	mov	r7, r1
 800b258:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b25c:	f7f4 ffe2 	bl	8000224 <__adddf3>
 800b260:	4642      	mov	r2, r8
 800b262:	464b      	mov	r3, r9
 800b264:	f7f4 ffde 	bl	8000224 <__adddf3>
 800b268:	4632      	mov	r2, r6
 800b26a:	463b      	mov	r3, r7
 800b26c:	f7f4 ffda 	bl	8000224 <__adddf3>
 800b270:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800b274:	4632      	mov	r2, r6
 800b276:	463b      	mov	r3, r7
 800b278:	4658      	mov	r0, fp
 800b27a:	460d      	mov	r5, r1
 800b27c:	f7f4 ffd0 	bl	8000220 <__aeabi_dsub>
 800b280:	4642      	mov	r2, r8
 800b282:	464b      	mov	r3, r9
 800b284:	f7f4 ffcc 	bl	8000220 <__aeabi_dsub>
 800b288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b28c:	f7f4 ffc8 	bl	8000220 <__aeabi_dsub>
 800b290:	465c      	mov	r4, fp
 800b292:	4602      	mov	r2, r0
 800b294:	e036      	b.n	800b304 <__ieee754_pow+0x79c>
 800b296:	bf00      	nop
 800b298:	4a454eef 	.word	0x4a454eef
 800b29c:	3fca7e28 	.word	0x3fca7e28
 800b2a0:	93c9db65 	.word	0x93c9db65
 800b2a4:	3fcd864a 	.word	0x3fcd864a
 800b2a8:	a91d4101 	.word	0xa91d4101
 800b2ac:	3fd17460 	.word	0x3fd17460
 800b2b0:	518f264d 	.word	0x518f264d
 800b2b4:	3fd55555 	.word	0x3fd55555
 800b2b8:	db6fabff 	.word	0xdb6fabff
 800b2bc:	3fdb6db6 	.word	0x3fdb6db6
 800b2c0:	33333303 	.word	0x33333303
 800b2c4:	3fe33333 	.word	0x3fe33333
 800b2c8:	e0000000 	.word	0xe0000000
 800b2cc:	3feec709 	.word	0x3feec709
 800b2d0:	dc3a03fd 	.word	0xdc3a03fd
 800b2d4:	3feec709 	.word	0x3feec709
 800b2d8:	145b01f5 	.word	0x145b01f5
 800b2dc:	be3e2fe0 	.word	0xbe3e2fe0
 800b2e0:	7ff00000 	.word	0x7ff00000
 800b2e4:	43400000 	.word	0x43400000
 800b2e8:	0003988e 	.word	0x0003988e
 800b2ec:	000bb679 	.word	0x000bb679
 800b2f0:	0800c088 	.word	0x0800c088
 800b2f4:	3ff00000 	.word	0x3ff00000
 800b2f8:	40080000 	.word	0x40080000
 800b2fc:	0800c068 	.word	0x0800c068
 800b300:	0800c078 	.word	0x0800c078
 800b304:	460b      	mov	r3, r1
 800b306:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b30a:	e5d7      	b.n	800aebc <__ieee754_pow+0x354>
 800b30c:	f04f 0a01 	mov.w	sl, #1
 800b310:	e65e      	b.n	800afd0 <__ieee754_pow+0x468>
 800b312:	a3b4      	add	r3, pc, #720	@ (adr r3, 800b5e4 <__ieee754_pow+0xa7c>)
 800b314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b318:	4630      	mov	r0, r6
 800b31a:	4639      	mov	r1, r7
 800b31c:	f7f4 ff82 	bl	8000224 <__adddf3>
 800b320:	4642      	mov	r2, r8
 800b322:	e9cd 0100 	strd	r0, r1, [sp]
 800b326:	464b      	mov	r3, r9
 800b328:	4620      	mov	r0, r4
 800b32a:	4629      	mov	r1, r5
 800b32c:	f7f4 ff78 	bl	8000220 <__aeabi_dsub>
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b338:	f7f5 fbba 	bl	8000ab0 <__aeabi_dcmpgt>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	f47f ae00 	bne.w	800af42 <__ieee754_pow+0x3da>
 800b342:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b346:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b34a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b34e:	fa43 fa0a 	asr.w	sl, r3, sl
 800b352:	44da      	add	sl, fp
 800b354:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b358:	489d      	ldr	r0, [pc, #628]	@ (800b5d0 <__ieee754_pow+0xa68>)
 800b35a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b35e:	4108      	asrs	r0, r1
 800b360:	ea00 030a 	and.w	r3, r0, sl
 800b364:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b368:	f1c1 0114 	rsb	r1, r1, #20
 800b36c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b370:	fa4a fa01 	asr.w	sl, sl, r1
 800b374:	f1bb 0f00 	cmp.w	fp, #0
 800b378:	4640      	mov	r0, r8
 800b37a:	4649      	mov	r1, r9
 800b37c:	f04f 0200 	mov.w	r2, #0
 800b380:	bfb8      	it	lt
 800b382:	f1ca 0a00 	rsblt	sl, sl, #0
 800b386:	f7f4 ff4b 	bl	8000220 <__aeabi_dsub>
 800b38a:	4680      	mov	r8, r0
 800b38c:	4689      	mov	r9, r1
 800b38e:	4632      	mov	r2, r6
 800b390:	463b      	mov	r3, r7
 800b392:	4640      	mov	r0, r8
 800b394:	4649      	mov	r1, r9
 800b396:	f7f4 ff45 	bl	8000224 <__adddf3>
 800b39a:	2400      	movs	r4, #0
 800b39c:	a37c      	add	r3, pc, #496	@ (adr r3, 800b590 <__ieee754_pow+0xa28>)
 800b39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	460d      	mov	r5, r1
 800b3a6:	f7f5 f8f3 	bl	8000590 <__aeabi_dmul>
 800b3aa:	4642      	mov	r2, r8
 800b3ac:	e9cd 0100 	strd	r0, r1, [sp]
 800b3b0:	464b      	mov	r3, r9
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	f7f4 ff33 	bl	8000220 <__aeabi_dsub>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	460b      	mov	r3, r1
 800b3be:	4630      	mov	r0, r6
 800b3c0:	4639      	mov	r1, r7
 800b3c2:	f7f4 ff2d 	bl	8000220 <__aeabi_dsub>
 800b3c6:	a374      	add	r3, pc, #464	@ (adr r3, 800b598 <__ieee754_pow+0xa30>)
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	f7f5 f8e0 	bl	8000590 <__aeabi_dmul>
 800b3d0:	a373      	add	r3, pc, #460	@ (adr r3, 800b5a0 <__ieee754_pow+0xa38>)
 800b3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d6:	4680      	mov	r8, r0
 800b3d8:	4689      	mov	r9, r1
 800b3da:	4620      	mov	r0, r4
 800b3dc:	4629      	mov	r1, r5
 800b3de:	f7f5 f8d7 	bl	8000590 <__aeabi_dmul>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	4649      	mov	r1, r9
 800b3ea:	f7f4 ff1b 	bl	8000224 <__adddf3>
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	460d      	mov	r5, r1
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3fa:	f7f4 ff13 	bl	8000224 <__adddf3>
 800b3fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b402:	4680      	mov	r8, r0
 800b404:	4689      	mov	r9, r1
 800b406:	f7f4 ff0b 	bl	8000220 <__aeabi_dsub>
 800b40a:	4602      	mov	r2, r0
 800b40c:	460b      	mov	r3, r1
 800b40e:	4620      	mov	r0, r4
 800b410:	4629      	mov	r1, r5
 800b412:	f7f4 ff05 	bl	8000220 <__aeabi_dsub>
 800b416:	4642      	mov	r2, r8
 800b418:	4606      	mov	r6, r0
 800b41a:	460f      	mov	r7, r1
 800b41c:	464b      	mov	r3, r9
 800b41e:	4640      	mov	r0, r8
 800b420:	4649      	mov	r1, r9
 800b422:	f7f5 f8b5 	bl	8000590 <__aeabi_dmul>
 800b426:	a360      	add	r3, pc, #384	@ (adr r3, 800b5a8 <__ieee754_pow+0xa40>)
 800b428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42c:	4604      	mov	r4, r0
 800b42e:	460d      	mov	r5, r1
 800b430:	f7f5 f8ae 	bl	8000590 <__aeabi_dmul>
 800b434:	a35e      	add	r3, pc, #376	@ (adr r3, 800b5b0 <__ieee754_pow+0xa48>)
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	f7f4 fef1 	bl	8000220 <__aeabi_dsub>
 800b43e:	4622      	mov	r2, r4
 800b440:	462b      	mov	r3, r5
 800b442:	f7f5 f8a5 	bl	8000590 <__aeabi_dmul>
 800b446:	a35c      	add	r3, pc, #368	@ (adr r3, 800b5b8 <__ieee754_pow+0xa50>)
 800b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44c:	f7f4 feea 	bl	8000224 <__adddf3>
 800b450:	4622      	mov	r2, r4
 800b452:	462b      	mov	r3, r5
 800b454:	f7f5 f89c 	bl	8000590 <__aeabi_dmul>
 800b458:	a359      	add	r3, pc, #356	@ (adr r3, 800b5c0 <__ieee754_pow+0xa58>)
 800b45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45e:	f7f4 fedf 	bl	8000220 <__aeabi_dsub>
 800b462:	4622      	mov	r2, r4
 800b464:	462b      	mov	r3, r5
 800b466:	f7f5 f893 	bl	8000590 <__aeabi_dmul>
 800b46a:	a357      	add	r3, pc, #348	@ (adr r3, 800b5c8 <__ieee754_pow+0xa60>)
 800b46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b470:	f7f4 fed8 	bl	8000224 <__adddf3>
 800b474:	4622      	mov	r2, r4
 800b476:	462b      	mov	r3, r5
 800b478:	f7f5 f88a 	bl	8000590 <__aeabi_dmul>
 800b47c:	4602      	mov	r2, r0
 800b47e:	460b      	mov	r3, r1
 800b480:	4640      	mov	r0, r8
 800b482:	4649      	mov	r1, r9
 800b484:	f7f4 fecc 	bl	8000220 <__aeabi_dsub>
 800b488:	4604      	mov	r4, r0
 800b48a:	460d      	mov	r5, r1
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	4640      	mov	r0, r8
 800b492:	4649      	mov	r1, r9
 800b494:	f7f5 f87c 	bl	8000590 <__aeabi_dmul>
 800b498:	2200      	movs	r2, #0
 800b49a:	e9cd 0100 	strd	r0, r1, [sp]
 800b49e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	4629      	mov	r1, r5
 800b4a6:	f7f4 febb 	bl	8000220 <__aeabi_dsub>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4b2:	f7f5 f997 	bl	80007e4 <__aeabi_ddiv>
 800b4b6:	4632      	mov	r2, r6
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	460d      	mov	r5, r1
 800b4bc:	463b      	mov	r3, r7
 800b4be:	4640      	mov	r0, r8
 800b4c0:	4649      	mov	r1, r9
 800b4c2:	f7f5 f865 	bl	8000590 <__aeabi_dmul>
 800b4c6:	4632      	mov	r2, r6
 800b4c8:	463b      	mov	r3, r7
 800b4ca:	f7f4 feab 	bl	8000224 <__adddf3>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	f7f4 fea3 	bl	8000220 <__aeabi_dsub>
 800b4da:	4642      	mov	r2, r8
 800b4dc:	464b      	mov	r3, r9
 800b4de:	f7f4 fe9f 	bl	8000220 <__aeabi_dsub>
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	493b      	ldr	r1, [pc, #236]	@ (800b5d4 <__ieee754_pow+0xa6c>)
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	f7f4 fe99 	bl	8000220 <__aeabi_dsub>
 800b4ee:	ec41 0b10 	vmov	d0, r0, r1
 800b4f2:	ee10 3a90 	vmov	r3, s1
 800b4f6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b4fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4fe:	da30      	bge.n	800b562 <__ieee754_pow+0x9fa>
 800b500:	4650      	mov	r0, sl
 800b502:	f7ff fa69 	bl	800a9d8 <scalbn>
 800b506:	ec51 0b10 	vmov	r0, r1, d0
 800b50a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b50e:	f7ff bbd2 	b.w	800acb6 <__ieee754_pow+0x14e>
 800b512:	4c31      	ldr	r4, [pc, #196]	@ (800b5d8 <__ieee754_pow+0xa70>)
 800b514:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b518:	42a3      	cmp	r3, r4
 800b51a:	d91a      	bls.n	800b552 <__ieee754_pow+0x9ea>
 800b51c:	4b2f      	ldr	r3, [pc, #188]	@ (800b5dc <__ieee754_pow+0xa74>)
 800b51e:	440b      	add	r3, r1
 800b520:	4303      	orrs	r3, r0
 800b522:	d009      	beq.n	800b538 <__ieee754_pow+0x9d0>
 800b524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b528:	2200      	movs	r2, #0
 800b52a:	2300      	movs	r3, #0
 800b52c:	f7f5 faa2 	bl	8000a74 <__aeabi_dcmplt>
 800b530:	3800      	subs	r0, #0
 800b532:	bf18      	it	ne
 800b534:	2001      	movne	r0, #1
 800b536:	e42b      	b.n	800ad90 <__ieee754_pow+0x228>
 800b538:	4642      	mov	r2, r8
 800b53a:	464b      	mov	r3, r9
 800b53c:	f7f4 fe70 	bl	8000220 <__aeabi_dsub>
 800b540:	4632      	mov	r2, r6
 800b542:	463b      	mov	r3, r7
 800b544:	f7f5 faaa 	bl	8000a9c <__aeabi_dcmpge>
 800b548:	2800      	cmp	r0, #0
 800b54a:	d1eb      	bne.n	800b524 <__ieee754_pow+0x9bc>
 800b54c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800b5ec <__ieee754_pow+0xa84>
 800b550:	e6f7      	b.n	800b342 <__ieee754_pow+0x7da>
 800b552:	469a      	mov	sl, r3
 800b554:	4b22      	ldr	r3, [pc, #136]	@ (800b5e0 <__ieee754_pow+0xa78>)
 800b556:	459a      	cmp	sl, r3
 800b558:	f63f aef3 	bhi.w	800b342 <__ieee754_pow+0x7da>
 800b55c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b560:	e715      	b.n	800b38e <__ieee754_pow+0x826>
 800b562:	ec51 0b10 	vmov	r0, r1, d0
 800b566:	4619      	mov	r1, r3
 800b568:	e7cf      	b.n	800b50a <__ieee754_pow+0x9a2>
 800b56a:	491a      	ldr	r1, [pc, #104]	@ (800b5d4 <__ieee754_pow+0xa6c>)
 800b56c:	2000      	movs	r0, #0
 800b56e:	f7ff bb18 	b.w	800aba2 <__ieee754_pow+0x3a>
 800b572:	2000      	movs	r0, #0
 800b574:	2100      	movs	r1, #0
 800b576:	f7ff bb14 	b.w	800aba2 <__ieee754_pow+0x3a>
 800b57a:	4630      	mov	r0, r6
 800b57c:	4639      	mov	r1, r7
 800b57e:	f7ff bb10 	b.w	800aba2 <__ieee754_pow+0x3a>
 800b582:	460c      	mov	r4, r1
 800b584:	f7ff bb5e 	b.w	800ac44 <__ieee754_pow+0xdc>
 800b588:	2400      	movs	r4, #0
 800b58a:	f7ff bb49 	b.w	800ac20 <__ieee754_pow+0xb8>
 800b58e:	bf00      	nop
 800b590:	00000000 	.word	0x00000000
 800b594:	3fe62e43 	.word	0x3fe62e43
 800b598:	fefa39ef 	.word	0xfefa39ef
 800b59c:	3fe62e42 	.word	0x3fe62e42
 800b5a0:	0ca86c39 	.word	0x0ca86c39
 800b5a4:	be205c61 	.word	0xbe205c61
 800b5a8:	72bea4d0 	.word	0x72bea4d0
 800b5ac:	3e663769 	.word	0x3e663769
 800b5b0:	c5d26bf1 	.word	0xc5d26bf1
 800b5b4:	3ebbbd41 	.word	0x3ebbbd41
 800b5b8:	af25de2c 	.word	0xaf25de2c
 800b5bc:	3f11566a 	.word	0x3f11566a
 800b5c0:	16bebd93 	.word	0x16bebd93
 800b5c4:	3f66c16c 	.word	0x3f66c16c
 800b5c8:	5555553e 	.word	0x5555553e
 800b5cc:	3fc55555 	.word	0x3fc55555
 800b5d0:	fff00000 	.word	0xfff00000
 800b5d4:	3ff00000 	.word	0x3ff00000
 800b5d8:	4090cbff 	.word	0x4090cbff
 800b5dc:	3f6f3400 	.word	0x3f6f3400
 800b5e0:	3fe00000 	.word	0x3fe00000
 800b5e4:	652b82fe 	.word	0x652b82fe
 800b5e8:	3c971547 	.word	0x3c971547
 800b5ec:	4090cc00 	.word	0x4090cc00

0800b5f0 <fabs>:
 800b5f0:	ec51 0b10 	vmov	r0, r1, d0
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b5fa:	ec43 2b10 	vmov	d0, r2, r3
 800b5fe:	4770      	bx	lr

0800b600 <__ieee754_atan2f>:
 800b600:	ee10 2a90 	vmov	r2, s1
 800b604:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800b608:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b60c:	b510      	push	{r4, lr}
 800b60e:	eef0 7a40 	vmov.f32	s15, s0
 800b612:	d806      	bhi.n	800b622 <__ieee754_atan2f+0x22>
 800b614:	ee10 0a10 	vmov	r0, s0
 800b618:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800b61c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b620:	d904      	bls.n	800b62c <__ieee754_atan2f+0x2c>
 800b622:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b626:	eeb0 0a67 	vmov.f32	s0, s15
 800b62a:	bd10      	pop	{r4, pc}
 800b62c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800b630:	d103      	bne.n	800b63a <__ieee754_atan2f+0x3a>
 800b632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b636:	f000 b905 	b.w	800b844 <atanf>
 800b63a:	1794      	asrs	r4, r2, #30
 800b63c:	f004 0402 	and.w	r4, r4, #2
 800b640:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b644:	b943      	cbnz	r3, 800b658 <__ieee754_atan2f+0x58>
 800b646:	2c02      	cmp	r4, #2
 800b648:	d05e      	beq.n	800b708 <__ieee754_atan2f+0x108>
 800b64a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800b71c <__ieee754_atan2f+0x11c>
 800b64e:	2c03      	cmp	r4, #3
 800b650:	bf08      	it	eq
 800b652:	eef0 7a47 	vmoveq.f32	s15, s14
 800b656:	e7e6      	b.n	800b626 <__ieee754_atan2f+0x26>
 800b658:	b941      	cbnz	r1, 800b66c <__ieee754_atan2f+0x6c>
 800b65a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800b720 <__ieee754_atan2f+0x120>
 800b65e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800b724 <__ieee754_atan2f+0x124>
 800b662:	2800      	cmp	r0, #0
 800b664:	bfb8      	it	lt
 800b666:	eef0 7a47 	vmovlt.f32	s15, s14
 800b66a:	e7dc      	b.n	800b626 <__ieee754_atan2f+0x26>
 800b66c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b670:	d110      	bne.n	800b694 <__ieee754_atan2f+0x94>
 800b672:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b676:	f104 34ff 	add.w	r4, r4, #4294967295
 800b67a:	d107      	bne.n	800b68c <__ieee754_atan2f+0x8c>
 800b67c:	2c02      	cmp	r4, #2
 800b67e:	d846      	bhi.n	800b70e <__ieee754_atan2f+0x10e>
 800b680:	4b29      	ldr	r3, [pc, #164]	@ (800b728 <__ieee754_atan2f+0x128>)
 800b682:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b686:	edd3 7a00 	vldr	s15, [r3]
 800b68a:	e7cc      	b.n	800b626 <__ieee754_atan2f+0x26>
 800b68c:	2c02      	cmp	r4, #2
 800b68e:	d841      	bhi.n	800b714 <__ieee754_atan2f+0x114>
 800b690:	4b26      	ldr	r3, [pc, #152]	@ (800b72c <__ieee754_atan2f+0x12c>)
 800b692:	e7f6      	b.n	800b682 <__ieee754_atan2f+0x82>
 800b694:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b698:	d0df      	beq.n	800b65a <__ieee754_atan2f+0x5a>
 800b69a:	1a5b      	subs	r3, r3, r1
 800b69c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800b6a0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800b6a4:	da1a      	bge.n	800b6dc <__ieee754_atan2f+0xdc>
 800b6a6:	2a00      	cmp	r2, #0
 800b6a8:	da01      	bge.n	800b6ae <__ieee754_atan2f+0xae>
 800b6aa:	313c      	adds	r1, #60	@ 0x3c
 800b6ac:	db19      	blt.n	800b6e2 <__ieee754_atan2f+0xe2>
 800b6ae:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800b6b2:	f000 f99b 	bl	800b9ec <fabsf>
 800b6b6:	f000 f8c5 	bl	800b844 <atanf>
 800b6ba:	eef0 7a40 	vmov.f32	s15, s0
 800b6be:	2c01      	cmp	r4, #1
 800b6c0:	d012      	beq.n	800b6e8 <__ieee754_atan2f+0xe8>
 800b6c2:	2c02      	cmp	r4, #2
 800b6c4:	d017      	beq.n	800b6f6 <__ieee754_atan2f+0xf6>
 800b6c6:	2c00      	cmp	r4, #0
 800b6c8:	d0ad      	beq.n	800b626 <__ieee754_atan2f+0x26>
 800b6ca:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800b730 <__ieee754_atan2f+0x130>
 800b6ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6d2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800b734 <__ieee754_atan2f+0x134>
 800b6d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b6da:	e7a4      	b.n	800b626 <__ieee754_atan2f+0x26>
 800b6dc:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800b720 <__ieee754_atan2f+0x120>
 800b6e0:	e7ed      	b.n	800b6be <__ieee754_atan2f+0xbe>
 800b6e2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b738 <__ieee754_atan2f+0x138>
 800b6e6:	e7ea      	b.n	800b6be <__ieee754_atan2f+0xbe>
 800b6e8:	ee17 3a90 	vmov	r3, s15
 800b6ec:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b6f0:	ee07 3a90 	vmov	s15, r3
 800b6f4:	e797      	b.n	800b626 <__ieee754_atan2f+0x26>
 800b6f6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800b730 <__ieee754_atan2f+0x130>
 800b6fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6fe:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800b734 <__ieee754_atan2f+0x134>
 800b702:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b706:	e78e      	b.n	800b626 <__ieee754_atan2f+0x26>
 800b708:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800b734 <__ieee754_atan2f+0x134>
 800b70c:	e78b      	b.n	800b626 <__ieee754_atan2f+0x26>
 800b70e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800b73c <__ieee754_atan2f+0x13c>
 800b712:	e788      	b.n	800b626 <__ieee754_atan2f+0x26>
 800b714:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800b738 <__ieee754_atan2f+0x138>
 800b718:	e785      	b.n	800b626 <__ieee754_atan2f+0x26>
 800b71a:	bf00      	nop
 800b71c:	c0490fdb 	.word	0xc0490fdb
 800b720:	3fc90fdb 	.word	0x3fc90fdb
 800b724:	bfc90fdb 	.word	0xbfc90fdb
 800b728:	0800c0a4 	.word	0x0800c0a4
 800b72c:	0800c098 	.word	0x0800c098
 800b730:	33bbbd2e 	.word	0x33bbbd2e
 800b734:	40490fdb 	.word	0x40490fdb
 800b738:	00000000 	.word	0x00000000
 800b73c:	3f490fdb 	.word	0x3f490fdb

0800b740 <__ieee754_fmodf>:
 800b740:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b742:	ee10 5a90 	vmov	r5, s1
 800b746:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 800b74a:	1e43      	subs	r3, r0, #1
 800b74c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b750:	d206      	bcs.n	800b760 <__ieee754_fmodf+0x20>
 800b752:	ee10 3a10 	vmov	r3, s0
 800b756:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800b75a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800b75e:	d304      	bcc.n	800b76a <__ieee754_fmodf+0x2a>
 800b760:	ee60 0a20 	vmul.f32	s1, s0, s1
 800b764:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800b768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b76a:	4286      	cmp	r6, r0
 800b76c:	dbfc      	blt.n	800b768 <__ieee754_fmodf+0x28>
 800b76e:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 800b772:	d105      	bne.n	800b780 <__ieee754_fmodf+0x40>
 800b774:	4b32      	ldr	r3, [pc, #200]	@ (800b840 <__ieee754_fmodf+0x100>)
 800b776:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800b77a:	ed93 0a00 	vldr	s0, [r3]
 800b77e:	e7f3      	b.n	800b768 <__ieee754_fmodf+0x28>
 800b780:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b784:	d140      	bne.n	800b808 <__ieee754_fmodf+0xc8>
 800b786:	0232      	lsls	r2, r6, #8
 800b788:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800b78c:	2a00      	cmp	r2, #0
 800b78e:	dc38      	bgt.n	800b802 <__ieee754_fmodf+0xc2>
 800b790:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 800b794:	d13e      	bne.n	800b814 <__ieee754_fmodf+0xd4>
 800b796:	0207      	lsls	r7, r0, #8
 800b798:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800b79c:	2f00      	cmp	r7, #0
 800b79e:	da36      	bge.n	800b80e <__ieee754_fmodf+0xce>
 800b7a0:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 800b7a4:	bfb9      	ittee	lt
 800b7a6:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800b7aa:	1a5b      	sublt	r3, r3, r1
 800b7ac:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800b7b0:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 800b7b4:	bfb8      	it	lt
 800b7b6:	fa06 f303 	lsllt.w	r3, r6, r3
 800b7ba:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800b7be:	bfb5      	itete	lt
 800b7c0:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 800b7c4:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 800b7c8:	1aad      	sublt	r5, r5, r2
 800b7ca:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800b7ce:	bfb8      	it	lt
 800b7d0:	40a8      	lsllt	r0, r5
 800b7d2:	1a89      	subs	r1, r1, r2
 800b7d4:	1a1d      	subs	r5, r3, r0
 800b7d6:	bb01      	cbnz	r1, 800b81a <__ieee754_fmodf+0xda>
 800b7d8:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800b7dc:	bf38      	it	cc
 800b7de:	462b      	movcc	r3, r5
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d0c7      	beq.n	800b774 <__ieee754_fmodf+0x34>
 800b7e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b7e8:	db1f      	blt.n	800b82a <__ieee754_fmodf+0xea>
 800b7ea:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800b7ee:	db1f      	blt.n	800b830 <__ieee754_fmodf+0xf0>
 800b7f0:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800b7f4:	327f      	adds	r2, #127	@ 0x7f
 800b7f6:	4323      	orrs	r3, r4
 800b7f8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b7fc:	ee00 3a10 	vmov	s0, r3
 800b800:	e7b2      	b.n	800b768 <__ieee754_fmodf+0x28>
 800b802:	3901      	subs	r1, #1
 800b804:	0052      	lsls	r2, r2, #1
 800b806:	e7c1      	b.n	800b78c <__ieee754_fmodf+0x4c>
 800b808:	15f1      	asrs	r1, r6, #23
 800b80a:	397f      	subs	r1, #127	@ 0x7f
 800b80c:	e7c0      	b.n	800b790 <__ieee754_fmodf+0x50>
 800b80e:	3a01      	subs	r2, #1
 800b810:	007f      	lsls	r7, r7, #1
 800b812:	e7c3      	b.n	800b79c <__ieee754_fmodf+0x5c>
 800b814:	15c2      	asrs	r2, r0, #23
 800b816:	3a7f      	subs	r2, #127	@ 0x7f
 800b818:	e7c2      	b.n	800b7a0 <__ieee754_fmodf+0x60>
 800b81a:	2d00      	cmp	r5, #0
 800b81c:	da02      	bge.n	800b824 <__ieee754_fmodf+0xe4>
 800b81e:	005b      	lsls	r3, r3, #1
 800b820:	3901      	subs	r1, #1
 800b822:	e7d7      	b.n	800b7d4 <__ieee754_fmodf+0x94>
 800b824:	d0a6      	beq.n	800b774 <__ieee754_fmodf+0x34>
 800b826:	006b      	lsls	r3, r5, #1
 800b828:	e7fa      	b.n	800b820 <__ieee754_fmodf+0xe0>
 800b82a:	005b      	lsls	r3, r3, #1
 800b82c:	3a01      	subs	r2, #1
 800b82e:	e7d9      	b.n	800b7e4 <__ieee754_fmodf+0xa4>
 800b830:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800b834:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800b838:	3282      	adds	r2, #130	@ 0x82
 800b83a:	4113      	asrs	r3, r2
 800b83c:	4323      	orrs	r3, r4
 800b83e:	e7dd      	b.n	800b7fc <__ieee754_fmodf+0xbc>
 800b840:	0800c0b0 	.word	0x0800c0b0

0800b844 <atanf>:
 800b844:	b538      	push	{r3, r4, r5, lr}
 800b846:	ee10 5a10 	vmov	r5, s0
 800b84a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800b84e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800b852:	eef0 7a40 	vmov.f32	s15, s0
 800b856:	d310      	bcc.n	800b87a <atanf+0x36>
 800b858:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800b85c:	d904      	bls.n	800b868 <atanf+0x24>
 800b85e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800b862:	eeb0 0a67 	vmov.f32	s0, s15
 800b866:	bd38      	pop	{r3, r4, r5, pc}
 800b868:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800b9a0 <atanf+0x15c>
 800b86c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800b9a4 <atanf+0x160>
 800b870:	2d00      	cmp	r5, #0
 800b872:	bfc8      	it	gt
 800b874:	eef0 7a47 	vmovgt.f32	s15, s14
 800b878:	e7f3      	b.n	800b862 <atanf+0x1e>
 800b87a:	4b4b      	ldr	r3, [pc, #300]	@ (800b9a8 <atanf+0x164>)
 800b87c:	429c      	cmp	r4, r3
 800b87e:	d810      	bhi.n	800b8a2 <atanf+0x5e>
 800b880:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800b884:	d20a      	bcs.n	800b89c <atanf+0x58>
 800b886:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800b9ac <atanf+0x168>
 800b88a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800b88e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b892:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800b896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b89a:	dce2      	bgt.n	800b862 <atanf+0x1e>
 800b89c:	f04f 33ff 	mov.w	r3, #4294967295
 800b8a0:	e013      	b.n	800b8ca <atanf+0x86>
 800b8a2:	f000 f8a3 	bl	800b9ec <fabsf>
 800b8a6:	4b42      	ldr	r3, [pc, #264]	@ (800b9b0 <atanf+0x16c>)
 800b8a8:	429c      	cmp	r4, r3
 800b8aa:	d84f      	bhi.n	800b94c <atanf+0x108>
 800b8ac:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800b8b0:	429c      	cmp	r4, r3
 800b8b2:	d841      	bhi.n	800b938 <atanf+0xf4>
 800b8b4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800b8b8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800b8bc:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b8c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b8ca:	1c5a      	adds	r2, r3, #1
 800b8cc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b8d0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800b9b4 <atanf+0x170>
 800b8d4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800b9b8 <atanf+0x174>
 800b8d8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800b9bc <atanf+0x178>
 800b8dc:	ee66 6a06 	vmul.f32	s13, s12, s12
 800b8e0:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b8e4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800b9c0 <atanf+0x17c>
 800b8e8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b8ec:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800b9c4 <atanf+0x180>
 800b8f0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b8f4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800b9c8 <atanf+0x184>
 800b8f8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b8fc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b9cc <atanf+0x188>
 800b900:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b904:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800b9d0 <atanf+0x18c>
 800b908:	eea6 5a87 	vfma.f32	s10, s13, s14
 800b90c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800b9d4 <atanf+0x190>
 800b910:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b914:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800b9d8 <atanf+0x194>
 800b918:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b91c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800b9dc <atanf+0x198>
 800b920:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b924:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b928:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b92c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b930:	d121      	bne.n	800b976 <atanf+0x132>
 800b932:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b936:	e794      	b.n	800b862 <atanf+0x1e>
 800b938:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b93c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b940:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b944:	2301      	movs	r3, #1
 800b946:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b94a:	e7be      	b.n	800b8ca <atanf+0x86>
 800b94c:	4b24      	ldr	r3, [pc, #144]	@ (800b9e0 <atanf+0x19c>)
 800b94e:	429c      	cmp	r4, r3
 800b950:	d80b      	bhi.n	800b96a <atanf+0x126>
 800b952:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800b956:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b95a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b95e:	2302      	movs	r3, #2
 800b960:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b968:	e7af      	b.n	800b8ca <atanf+0x86>
 800b96a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800b96e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b972:	2303      	movs	r3, #3
 800b974:	e7a9      	b.n	800b8ca <atanf+0x86>
 800b976:	4a1b      	ldr	r2, [pc, #108]	@ (800b9e4 <atanf+0x1a0>)
 800b978:	491b      	ldr	r1, [pc, #108]	@ (800b9e8 <atanf+0x1a4>)
 800b97a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b97e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b982:	edd3 6a00 	vldr	s13, [r3]
 800b986:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b98a:	2d00      	cmp	r5, #0
 800b98c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b990:	edd2 7a00 	vldr	s15, [r2]
 800b994:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b998:	bfb8      	it	lt
 800b99a:	eef1 7a67 	vneglt.f32	s15, s15
 800b99e:	e760      	b.n	800b862 <atanf+0x1e>
 800b9a0:	bfc90fdb 	.word	0xbfc90fdb
 800b9a4:	3fc90fdb 	.word	0x3fc90fdb
 800b9a8:	3edfffff 	.word	0x3edfffff
 800b9ac:	7149f2ca 	.word	0x7149f2ca
 800b9b0:	3f97ffff 	.word	0x3f97ffff
 800b9b4:	3c8569d7 	.word	0x3c8569d7
 800b9b8:	3d4bda59 	.word	0x3d4bda59
 800b9bc:	bd6ef16b 	.word	0xbd6ef16b
 800b9c0:	3d886b35 	.word	0x3d886b35
 800b9c4:	3dba2e6e 	.word	0x3dba2e6e
 800b9c8:	3e124925 	.word	0x3e124925
 800b9cc:	3eaaaaab 	.word	0x3eaaaaab
 800b9d0:	bd15a221 	.word	0xbd15a221
 800b9d4:	bd9d8795 	.word	0xbd9d8795
 800b9d8:	bde38e38 	.word	0xbde38e38
 800b9dc:	be4ccccd 	.word	0xbe4ccccd
 800b9e0:	401bffff 	.word	0x401bffff
 800b9e4:	0800c0c8 	.word	0x0800c0c8
 800b9e8:	0800c0b8 	.word	0x0800c0b8

0800b9ec <fabsf>:
 800b9ec:	ee10 3a10 	vmov	r3, s0
 800b9f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b9f4:	ee00 3a10 	vmov	s0, r3
 800b9f8:	4770      	bx	lr

0800b9fa <with_errno>:
 800b9fa:	b510      	push	{r4, lr}
 800b9fc:	ed2d 8b02 	vpush	{d8}
 800ba00:	eeb0 8a40 	vmov.f32	s16, s0
 800ba04:	eef0 8a60 	vmov.f32	s17, s1
 800ba08:	4604      	mov	r4, r0
 800ba0a:	f000 fa2d 	bl	800be68 <__errno>
 800ba0e:	eeb0 0a48 	vmov.f32	s0, s16
 800ba12:	eef0 0a68 	vmov.f32	s1, s17
 800ba16:	ecbd 8b02 	vpop	{d8}
 800ba1a:	6004      	str	r4, [r0, #0]
 800ba1c:	bd10      	pop	{r4, pc}

0800ba1e <xflow>:
 800ba1e:	4603      	mov	r3, r0
 800ba20:	b507      	push	{r0, r1, r2, lr}
 800ba22:	ec51 0b10 	vmov	r0, r1, d0
 800ba26:	b183      	cbz	r3, 800ba4a <xflow+0x2c>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ba2e:	e9cd 2300 	strd	r2, r3, [sp]
 800ba32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba36:	f7f4 fdab 	bl	8000590 <__aeabi_dmul>
 800ba3a:	ec41 0b10 	vmov	d0, r0, r1
 800ba3e:	2022      	movs	r0, #34	@ 0x22
 800ba40:	b003      	add	sp, #12
 800ba42:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba46:	f7ff bfd8 	b.w	800b9fa <with_errno>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	e7ee      	b.n	800ba2e <xflow+0x10>

0800ba50 <__math_uflow>:
 800ba50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ba58 <__math_uflow+0x8>
 800ba54:	f7ff bfe3 	b.w	800ba1e <xflow>
 800ba58:	00000000 	.word	0x00000000
 800ba5c:	10000000 	.word	0x10000000

0800ba60 <__math_oflow>:
 800ba60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ba68 <__math_oflow+0x8>
 800ba64:	f7ff bfdb 	b.w	800ba1e <xflow>
 800ba68:	00000000 	.word	0x00000000
 800ba6c:	70000000 	.word	0x70000000

0800ba70 <__ieee754_sqrt>:
 800ba70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba74:	4a68      	ldr	r2, [pc, #416]	@ (800bc18 <__ieee754_sqrt+0x1a8>)
 800ba76:	ec55 4b10 	vmov	r4, r5, d0
 800ba7a:	43aa      	bics	r2, r5
 800ba7c:	462b      	mov	r3, r5
 800ba7e:	4621      	mov	r1, r4
 800ba80:	d110      	bne.n	800baa4 <__ieee754_sqrt+0x34>
 800ba82:	4622      	mov	r2, r4
 800ba84:	4620      	mov	r0, r4
 800ba86:	4629      	mov	r1, r5
 800ba88:	f7f4 fd82 	bl	8000590 <__aeabi_dmul>
 800ba8c:	4602      	mov	r2, r0
 800ba8e:	460b      	mov	r3, r1
 800ba90:	4620      	mov	r0, r4
 800ba92:	4629      	mov	r1, r5
 800ba94:	f7f4 fbc6 	bl	8000224 <__adddf3>
 800ba98:	4604      	mov	r4, r0
 800ba9a:	460d      	mov	r5, r1
 800ba9c:	ec45 4b10 	vmov	d0, r4, r5
 800baa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa4:	2d00      	cmp	r5, #0
 800baa6:	dc0e      	bgt.n	800bac6 <__ieee754_sqrt+0x56>
 800baa8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800baac:	4322      	orrs	r2, r4
 800baae:	d0f5      	beq.n	800ba9c <__ieee754_sqrt+0x2c>
 800bab0:	b19d      	cbz	r5, 800bada <__ieee754_sqrt+0x6a>
 800bab2:	4622      	mov	r2, r4
 800bab4:	4620      	mov	r0, r4
 800bab6:	4629      	mov	r1, r5
 800bab8:	f7f4 fbb2 	bl	8000220 <__aeabi_dsub>
 800babc:	4602      	mov	r2, r0
 800babe:	460b      	mov	r3, r1
 800bac0:	f7f4 fe90 	bl	80007e4 <__aeabi_ddiv>
 800bac4:	e7e8      	b.n	800ba98 <__ieee754_sqrt+0x28>
 800bac6:	152a      	asrs	r2, r5, #20
 800bac8:	d115      	bne.n	800baf6 <__ieee754_sqrt+0x86>
 800baca:	2000      	movs	r0, #0
 800bacc:	e009      	b.n	800bae2 <__ieee754_sqrt+0x72>
 800bace:	0acb      	lsrs	r3, r1, #11
 800bad0:	3a15      	subs	r2, #21
 800bad2:	0549      	lsls	r1, r1, #21
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d0fa      	beq.n	800bace <__ieee754_sqrt+0x5e>
 800bad8:	e7f7      	b.n	800baca <__ieee754_sqrt+0x5a>
 800bada:	462a      	mov	r2, r5
 800badc:	e7fa      	b.n	800bad4 <__ieee754_sqrt+0x64>
 800bade:	005b      	lsls	r3, r3, #1
 800bae0:	3001      	adds	r0, #1
 800bae2:	02dc      	lsls	r4, r3, #11
 800bae4:	d5fb      	bpl.n	800bade <__ieee754_sqrt+0x6e>
 800bae6:	1e44      	subs	r4, r0, #1
 800bae8:	1b12      	subs	r2, r2, r4
 800baea:	f1c0 0420 	rsb	r4, r0, #32
 800baee:	fa21 f404 	lsr.w	r4, r1, r4
 800baf2:	4323      	orrs	r3, r4
 800baf4:	4081      	lsls	r1, r0
 800baf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bafa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800bafe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb02:	07d2      	lsls	r2, r2, #31
 800bb04:	bf5c      	itt	pl
 800bb06:	005b      	lslpl	r3, r3, #1
 800bb08:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bb0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bb10:	bf58      	it	pl
 800bb12:	0049      	lslpl	r1, r1, #1
 800bb14:	2600      	movs	r6, #0
 800bb16:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bb1a:	106d      	asrs	r5, r5, #1
 800bb1c:	0049      	lsls	r1, r1, #1
 800bb1e:	2016      	movs	r0, #22
 800bb20:	4632      	mov	r2, r6
 800bb22:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bb26:	1917      	adds	r7, r2, r4
 800bb28:	429f      	cmp	r7, r3
 800bb2a:	bfde      	ittt	le
 800bb2c:	193a      	addle	r2, r7, r4
 800bb2e:	1bdb      	suble	r3, r3, r7
 800bb30:	1936      	addle	r6, r6, r4
 800bb32:	0fcf      	lsrs	r7, r1, #31
 800bb34:	3801      	subs	r0, #1
 800bb36:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800bb3a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bb3e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bb42:	d1f0      	bne.n	800bb26 <__ieee754_sqrt+0xb6>
 800bb44:	4604      	mov	r4, r0
 800bb46:	2720      	movs	r7, #32
 800bb48:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	eb00 0e0c 	add.w	lr, r0, ip
 800bb52:	db02      	blt.n	800bb5a <__ieee754_sqrt+0xea>
 800bb54:	d113      	bne.n	800bb7e <__ieee754_sqrt+0x10e>
 800bb56:	458e      	cmp	lr, r1
 800bb58:	d811      	bhi.n	800bb7e <__ieee754_sqrt+0x10e>
 800bb5a:	f1be 0f00 	cmp.w	lr, #0
 800bb5e:	eb0e 000c 	add.w	r0, lr, ip
 800bb62:	da42      	bge.n	800bbea <__ieee754_sqrt+0x17a>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	db40      	blt.n	800bbea <__ieee754_sqrt+0x17a>
 800bb68:	f102 0801 	add.w	r8, r2, #1
 800bb6c:	1a9b      	subs	r3, r3, r2
 800bb6e:	458e      	cmp	lr, r1
 800bb70:	bf88      	it	hi
 800bb72:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bb76:	eba1 010e 	sub.w	r1, r1, lr
 800bb7a:	4464      	add	r4, ip
 800bb7c:	4642      	mov	r2, r8
 800bb7e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bb82:	3f01      	subs	r7, #1
 800bb84:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bb88:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bb8c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bb90:	d1dc      	bne.n	800bb4c <__ieee754_sqrt+0xdc>
 800bb92:	4319      	orrs	r1, r3
 800bb94:	d01b      	beq.n	800bbce <__ieee754_sqrt+0x15e>
 800bb96:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800bc1c <__ieee754_sqrt+0x1ac>
 800bb9a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800bc20 <__ieee754_sqrt+0x1b0>
 800bb9e:	e9da 0100 	ldrd	r0, r1, [sl]
 800bba2:	e9db 2300 	ldrd	r2, r3, [fp]
 800bba6:	f7f4 fb3b 	bl	8000220 <__aeabi_dsub>
 800bbaa:	e9da 8900 	ldrd	r8, r9, [sl]
 800bbae:	4602      	mov	r2, r0
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	4640      	mov	r0, r8
 800bbb4:	4649      	mov	r1, r9
 800bbb6:	f7f4 ff67 	bl	8000a88 <__aeabi_dcmple>
 800bbba:	b140      	cbz	r0, 800bbce <__ieee754_sqrt+0x15e>
 800bbbc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bbc0:	e9da 0100 	ldrd	r0, r1, [sl]
 800bbc4:	e9db 2300 	ldrd	r2, r3, [fp]
 800bbc8:	d111      	bne.n	800bbee <__ieee754_sqrt+0x17e>
 800bbca:	3601      	adds	r6, #1
 800bbcc:	463c      	mov	r4, r7
 800bbce:	1072      	asrs	r2, r6, #1
 800bbd0:	0863      	lsrs	r3, r4, #1
 800bbd2:	07f1      	lsls	r1, r6, #31
 800bbd4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800bbd8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800bbdc:	bf48      	it	mi
 800bbde:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800bbe2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	e756      	b.n	800ba98 <__ieee754_sqrt+0x28>
 800bbea:	4690      	mov	r8, r2
 800bbec:	e7be      	b.n	800bb6c <__ieee754_sqrt+0xfc>
 800bbee:	f7f4 fb19 	bl	8000224 <__adddf3>
 800bbf2:	e9da 8900 	ldrd	r8, r9, [sl]
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	4640      	mov	r0, r8
 800bbfc:	4649      	mov	r1, r9
 800bbfe:	f7f4 ff39 	bl	8000a74 <__aeabi_dcmplt>
 800bc02:	b120      	cbz	r0, 800bc0e <__ieee754_sqrt+0x19e>
 800bc04:	1ca0      	adds	r0, r4, #2
 800bc06:	bf08      	it	eq
 800bc08:	3601      	addeq	r6, #1
 800bc0a:	3402      	adds	r4, #2
 800bc0c:	e7df      	b.n	800bbce <__ieee754_sqrt+0x15e>
 800bc0e:	1c63      	adds	r3, r4, #1
 800bc10:	f023 0401 	bic.w	r4, r3, #1
 800bc14:	e7db      	b.n	800bbce <__ieee754_sqrt+0x15e>
 800bc16:	bf00      	nop
 800bc18:	7ff00000 	.word	0x7ff00000
 800bc1c:	200000d8 	.word	0x200000d8
 800bc20:	200000d0 	.word	0x200000d0

0800bc24 <abort>:
 800bc24:	b508      	push	{r3, lr}
 800bc26:	2006      	movs	r0, #6
 800bc28:	f000 f8f2 	bl	800be10 <raise>
 800bc2c:	2001      	movs	r0, #1
 800bc2e:	f7f9 f8e3 	bl	8004df8 <_exit>
	...

0800bc34 <malloc>:
 800bc34:	4b02      	ldr	r3, [pc, #8]	@ (800bc40 <malloc+0xc>)
 800bc36:	4601      	mov	r1, r0
 800bc38:	6818      	ldr	r0, [r3, #0]
 800bc3a:	f000 b82d 	b.w	800bc98 <_malloc_r>
 800bc3e:	bf00      	nop
 800bc40:	200000e0 	.word	0x200000e0

0800bc44 <free>:
 800bc44:	4b02      	ldr	r3, [pc, #8]	@ (800bc50 <free+0xc>)
 800bc46:	4601      	mov	r1, r0
 800bc48:	6818      	ldr	r0, [r3, #0]
 800bc4a:	f000 b947 	b.w	800bedc <_free_r>
 800bc4e:	bf00      	nop
 800bc50:	200000e0 	.word	0x200000e0

0800bc54 <sbrk_aligned>:
 800bc54:	b570      	push	{r4, r5, r6, lr}
 800bc56:	4e0f      	ldr	r6, [pc, #60]	@ (800bc94 <sbrk_aligned+0x40>)
 800bc58:	460c      	mov	r4, r1
 800bc5a:	6831      	ldr	r1, [r6, #0]
 800bc5c:	4605      	mov	r5, r0
 800bc5e:	b911      	cbnz	r1, 800bc66 <sbrk_aligned+0x12>
 800bc60:	f000 f8f2 	bl	800be48 <_sbrk_r>
 800bc64:	6030      	str	r0, [r6, #0]
 800bc66:	4621      	mov	r1, r4
 800bc68:	4628      	mov	r0, r5
 800bc6a:	f000 f8ed 	bl	800be48 <_sbrk_r>
 800bc6e:	1c43      	adds	r3, r0, #1
 800bc70:	d103      	bne.n	800bc7a <sbrk_aligned+0x26>
 800bc72:	f04f 34ff 	mov.w	r4, #4294967295
 800bc76:	4620      	mov	r0, r4
 800bc78:	bd70      	pop	{r4, r5, r6, pc}
 800bc7a:	1cc4      	adds	r4, r0, #3
 800bc7c:	f024 0403 	bic.w	r4, r4, #3
 800bc80:	42a0      	cmp	r0, r4
 800bc82:	d0f8      	beq.n	800bc76 <sbrk_aligned+0x22>
 800bc84:	1a21      	subs	r1, r4, r0
 800bc86:	4628      	mov	r0, r5
 800bc88:	f000 f8de 	bl	800be48 <_sbrk_r>
 800bc8c:	3001      	adds	r0, #1
 800bc8e:	d1f2      	bne.n	800bc76 <sbrk_aligned+0x22>
 800bc90:	e7ef      	b.n	800bc72 <sbrk_aligned+0x1e>
 800bc92:	bf00      	nop
 800bc94:	200007d8 	.word	0x200007d8

0800bc98 <_malloc_r>:
 800bc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc9c:	1ccd      	adds	r5, r1, #3
 800bc9e:	f025 0503 	bic.w	r5, r5, #3
 800bca2:	3508      	adds	r5, #8
 800bca4:	2d0c      	cmp	r5, #12
 800bca6:	bf38      	it	cc
 800bca8:	250c      	movcc	r5, #12
 800bcaa:	2d00      	cmp	r5, #0
 800bcac:	4606      	mov	r6, r0
 800bcae:	db01      	blt.n	800bcb4 <_malloc_r+0x1c>
 800bcb0:	42a9      	cmp	r1, r5
 800bcb2:	d904      	bls.n	800bcbe <_malloc_r+0x26>
 800bcb4:	230c      	movs	r3, #12
 800bcb6:	6033      	str	r3, [r6, #0]
 800bcb8:	2000      	movs	r0, #0
 800bcba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bd94 <_malloc_r+0xfc>
 800bcc2:	f000 f869 	bl	800bd98 <__malloc_lock>
 800bcc6:	f8d8 3000 	ldr.w	r3, [r8]
 800bcca:	461c      	mov	r4, r3
 800bccc:	bb44      	cbnz	r4, 800bd20 <_malloc_r+0x88>
 800bcce:	4629      	mov	r1, r5
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	f7ff ffbf 	bl	800bc54 <sbrk_aligned>
 800bcd6:	1c43      	adds	r3, r0, #1
 800bcd8:	4604      	mov	r4, r0
 800bcda:	d158      	bne.n	800bd8e <_malloc_r+0xf6>
 800bcdc:	f8d8 4000 	ldr.w	r4, [r8]
 800bce0:	4627      	mov	r7, r4
 800bce2:	2f00      	cmp	r7, #0
 800bce4:	d143      	bne.n	800bd6e <_malloc_r+0xd6>
 800bce6:	2c00      	cmp	r4, #0
 800bce8:	d04b      	beq.n	800bd82 <_malloc_r+0xea>
 800bcea:	6823      	ldr	r3, [r4, #0]
 800bcec:	4639      	mov	r1, r7
 800bcee:	4630      	mov	r0, r6
 800bcf0:	eb04 0903 	add.w	r9, r4, r3
 800bcf4:	f000 f8a8 	bl	800be48 <_sbrk_r>
 800bcf8:	4581      	cmp	r9, r0
 800bcfa:	d142      	bne.n	800bd82 <_malloc_r+0xea>
 800bcfc:	6821      	ldr	r1, [r4, #0]
 800bcfe:	1a6d      	subs	r5, r5, r1
 800bd00:	4629      	mov	r1, r5
 800bd02:	4630      	mov	r0, r6
 800bd04:	f7ff ffa6 	bl	800bc54 <sbrk_aligned>
 800bd08:	3001      	adds	r0, #1
 800bd0a:	d03a      	beq.n	800bd82 <_malloc_r+0xea>
 800bd0c:	6823      	ldr	r3, [r4, #0]
 800bd0e:	442b      	add	r3, r5
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	f8d8 3000 	ldr.w	r3, [r8]
 800bd16:	685a      	ldr	r2, [r3, #4]
 800bd18:	bb62      	cbnz	r2, 800bd74 <_malloc_r+0xdc>
 800bd1a:	f8c8 7000 	str.w	r7, [r8]
 800bd1e:	e00f      	b.n	800bd40 <_malloc_r+0xa8>
 800bd20:	6822      	ldr	r2, [r4, #0]
 800bd22:	1b52      	subs	r2, r2, r5
 800bd24:	d420      	bmi.n	800bd68 <_malloc_r+0xd0>
 800bd26:	2a0b      	cmp	r2, #11
 800bd28:	d917      	bls.n	800bd5a <_malloc_r+0xc2>
 800bd2a:	1961      	adds	r1, r4, r5
 800bd2c:	42a3      	cmp	r3, r4
 800bd2e:	6025      	str	r5, [r4, #0]
 800bd30:	bf18      	it	ne
 800bd32:	6059      	strne	r1, [r3, #4]
 800bd34:	6863      	ldr	r3, [r4, #4]
 800bd36:	bf08      	it	eq
 800bd38:	f8c8 1000 	streq.w	r1, [r8]
 800bd3c:	5162      	str	r2, [r4, r5]
 800bd3e:	604b      	str	r3, [r1, #4]
 800bd40:	4630      	mov	r0, r6
 800bd42:	f000 f82f 	bl	800bda4 <__malloc_unlock>
 800bd46:	f104 000b 	add.w	r0, r4, #11
 800bd4a:	1d23      	adds	r3, r4, #4
 800bd4c:	f020 0007 	bic.w	r0, r0, #7
 800bd50:	1ac2      	subs	r2, r0, r3
 800bd52:	bf1c      	itt	ne
 800bd54:	1a1b      	subne	r3, r3, r0
 800bd56:	50a3      	strne	r3, [r4, r2]
 800bd58:	e7af      	b.n	800bcba <_malloc_r+0x22>
 800bd5a:	6862      	ldr	r2, [r4, #4]
 800bd5c:	42a3      	cmp	r3, r4
 800bd5e:	bf0c      	ite	eq
 800bd60:	f8c8 2000 	streq.w	r2, [r8]
 800bd64:	605a      	strne	r2, [r3, #4]
 800bd66:	e7eb      	b.n	800bd40 <_malloc_r+0xa8>
 800bd68:	4623      	mov	r3, r4
 800bd6a:	6864      	ldr	r4, [r4, #4]
 800bd6c:	e7ae      	b.n	800bccc <_malloc_r+0x34>
 800bd6e:	463c      	mov	r4, r7
 800bd70:	687f      	ldr	r7, [r7, #4]
 800bd72:	e7b6      	b.n	800bce2 <_malloc_r+0x4a>
 800bd74:	461a      	mov	r2, r3
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	42a3      	cmp	r3, r4
 800bd7a:	d1fb      	bne.n	800bd74 <_malloc_r+0xdc>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	6053      	str	r3, [r2, #4]
 800bd80:	e7de      	b.n	800bd40 <_malloc_r+0xa8>
 800bd82:	230c      	movs	r3, #12
 800bd84:	6033      	str	r3, [r6, #0]
 800bd86:	4630      	mov	r0, r6
 800bd88:	f000 f80c 	bl	800bda4 <__malloc_unlock>
 800bd8c:	e794      	b.n	800bcb8 <_malloc_r+0x20>
 800bd8e:	6005      	str	r5, [r0, #0]
 800bd90:	e7d6      	b.n	800bd40 <_malloc_r+0xa8>
 800bd92:	bf00      	nop
 800bd94:	200007dc 	.word	0x200007dc

0800bd98 <__malloc_lock>:
 800bd98:	4801      	ldr	r0, [pc, #4]	@ (800bda0 <__malloc_lock+0x8>)
 800bd9a:	f000 b88f 	b.w	800bebc <__retarget_lock_acquire_recursive>
 800bd9e:	bf00      	nop
 800bda0:	2000091c 	.word	0x2000091c

0800bda4 <__malloc_unlock>:
 800bda4:	4801      	ldr	r0, [pc, #4]	@ (800bdac <__malloc_unlock+0x8>)
 800bda6:	f000 b88a 	b.w	800bebe <__retarget_lock_release_recursive>
 800bdaa:	bf00      	nop
 800bdac:	2000091c 	.word	0x2000091c

0800bdb0 <memset>:
 800bdb0:	4402      	add	r2, r0
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d100      	bne.n	800bdba <memset+0xa>
 800bdb8:	4770      	bx	lr
 800bdba:	f803 1b01 	strb.w	r1, [r3], #1
 800bdbe:	e7f9      	b.n	800bdb4 <memset+0x4>

0800bdc0 <_raise_r>:
 800bdc0:	291f      	cmp	r1, #31
 800bdc2:	b538      	push	{r3, r4, r5, lr}
 800bdc4:	4605      	mov	r5, r0
 800bdc6:	460c      	mov	r4, r1
 800bdc8:	d904      	bls.n	800bdd4 <_raise_r+0x14>
 800bdca:	2316      	movs	r3, #22
 800bdcc:	6003      	str	r3, [r0, #0]
 800bdce:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd2:	bd38      	pop	{r3, r4, r5, pc}
 800bdd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bdd6:	b112      	cbz	r2, 800bdde <_raise_r+0x1e>
 800bdd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bddc:	b94b      	cbnz	r3, 800bdf2 <_raise_r+0x32>
 800bdde:	4628      	mov	r0, r5
 800bde0:	f000 f830 	bl	800be44 <_getpid_r>
 800bde4:	4622      	mov	r2, r4
 800bde6:	4601      	mov	r1, r0
 800bde8:	4628      	mov	r0, r5
 800bdea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdee:	f000 b817 	b.w	800be20 <_kill_r>
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d00a      	beq.n	800be0c <_raise_r+0x4c>
 800bdf6:	1c59      	adds	r1, r3, #1
 800bdf8:	d103      	bne.n	800be02 <_raise_r+0x42>
 800bdfa:	2316      	movs	r3, #22
 800bdfc:	6003      	str	r3, [r0, #0]
 800bdfe:	2001      	movs	r0, #1
 800be00:	e7e7      	b.n	800bdd2 <_raise_r+0x12>
 800be02:	2100      	movs	r1, #0
 800be04:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be08:	4620      	mov	r0, r4
 800be0a:	4798      	blx	r3
 800be0c:	2000      	movs	r0, #0
 800be0e:	e7e0      	b.n	800bdd2 <_raise_r+0x12>

0800be10 <raise>:
 800be10:	4b02      	ldr	r3, [pc, #8]	@ (800be1c <raise+0xc>)
 800be12:	4601      	mov	r1, r0
 800be14:	6818      	ldr	r0, [r3, #0]
 800be16:	f7ff bfd3 	b.w	800bdc0 <_raise_r>
 800be1a:	bf00      	nop
 800be1c:	200000e0 	.word	0x200000e0

0800be20 <_kill_r>:
 800be20:	b538      	push	{r3, r4, r5, lr}
 800be22:	4d07      	ldr	r5, [pc, #28]	@ (800be40 <_kill_r+0x20>)
 800be24:	2300      	movs	r3, #0
 800be26:	4604      	mov	r4, r0
 800be28:	4608      	mov	r0, r1
 800be2a:	4611      	mov	r1, r2
 800be2c:	602b      	str	r3, [r5, #0]
 800be2e:	f7f8 ffd3 	bl	8004dd8 <_kill>
 800be32:	1c43      	adds	r3, r0, #1
 800be34:	d102      	bne.n	800be3c <_kill_r+0x1c>
 800be36:	682b      	ldr	r3, [r5, #0]
 800be38:	b103      	cbz	r3, 800be3c <_kill_r+0x1c>
 800be3a:	6023      	str	r3, [r4, #0]
 800be3c:	bd38      	pop	{r3, r4, r5, pc}
 800be3e:	bf00      	nop
 800be40:	20000918 	.word	0x20000918

0800be44 <_getpid_r>:
 800be44:	f7f8 bfc0 	b.w	8004dc8 <_getpid>

0800be48 <_sbrk_r>:
 800be48:	b538      	push	{r3, r4, r5, lr}
 800be4a:	4d06      	ldr	r5, [pc, #24]	@ (800be64 <_sbrk_r+0x1c>)
 800be4c:	2300      	movs	r3, #0
 800be4e:	4604      	mov	r4, r0
 800be50:	4608      	mov	r0, r1
 800be52:	602b      	str	r3, [r5, #0]
 800be54:	f7f8 ffdc 	bl	8004e10 <_sbrk>
 800be58:	1c43      	adds	r3, r0, #1
 800be5a:	d102      	bne.n	800be62 <_sbrk_r+0x1a>
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	b103      	cbz	r3, 800be62 <_sbrk_r+0x1a>
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	bd38      	pop	{r3, r4, r5, pc}
 800be64:	20000918 	.word	0x20000918

0800be68 <__errno>:
 800be68:	4b01      	ldr	r3, [pc, #4]	@ (800be70 <__errno+0x8>)
 800be6a:	6818      	ldr	r0, [r3, #0]
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	200000e0 	.word	0x200000e0

0800be74 <__libc_init_array>:
 800be74:	b570      	push	{r4, r5, r6, lr}
 800be76:	4d0d      	ldr	r5, [pc, #52]	@ (800beac <__libc_init_array+0x38>)
 800be78:	4c0d      	ldr	r4, [pc, #52]	@ (800beb0 <__libc_init_array+0x3c>)
 800be7a:	1b64      	subs	r4, r4, r5
 800be7c:	10a4      	asrs	r4, r4, #2
 800be7e:	2600      	movs	r6, #0
 800be80:	42a6      	cmp	r6, r4
 800be82:	d109      	bne.n	800be98 <__libc_init_array+0x24>
 800be84:	4d0b      	ldr	r5, [pc, #44]	@ (800beb4 <__libc_init_array+0x40>)
 800be86:	4c0c      	ldr	r4, [pc, #48]	@ (800beb8 <__libc_init_array+0x44>)
 800be88:	f000 f872 	bl	800bf70 <_init>
 800be8c:	1b64      	subs	r4, r4, r5
 800be8e:	10a4      	asrs	r4, r4, #2
 800be90:	2600      	movs	r6, #0
 800be92:	42a6      	cmp	r6, r4
 800be94:	d105      	bne.n	800bea2 <__libc_init_array+0x2e>
 800be96:	bd70      	pop	{r4, r5, r6, pc}
 800be98:	f855 3b04 	ldr.w	r3, [r5], #4
 800be9c:	4798      	blx	r3
 800be9e:	3601      	adds	r6, #1
 800bea0:	e7ee      	b.n	800be80 <__libc_init_array+0xc>
 800bea2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bea6:	4798      	blx	r3
 800bea8:	3601      	adds	r6, #1
 800beaa:	e7f2      	b.n	800be92 <__libc_init_array+0x1e>
 800beac:	0800c0d8 	.word	0x0800c0d8
 800beb0:	0800c0d8 	.word	0x0800c0d8
 800beb4:	0800c0d8 	.word	0x0800c0d8
 800beb8:	0800c0e4 	.word	0x0800c0e4

0800bebc <__retarget_lock_acquire_recursive>:
 800bebc:	4770      	bx	lr

0800bebe <__retarget_lock_release_recursive>:
 800bebe:	4770      	bx	lr

0800bec0 <memcpy>:
 800bec0:	440a      	add	r2, r1
 800bec2:	4291      	cmp	r1, r2
 800bec4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bec8:	d100      	bne.n	800becc <memcpy+0xc>
 800beca:	4770      	bx	lr
 800becc:	b510      	push	{r4, lr}
 800bece:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bed2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bed6:	4291      	cmp	r1, r2
 800bed8:	d1f9      	bne.n	800bece <memcpy+0xe>
 800beda:	bd10      	pop	{r4, pc}

0800bedc <_free_r>:
 800bedc:	b538      	push	{r3, r4, r5, lr}
 800bede:	4605      	mov	r5, r0
 800bee0:	2900      	cmp	r1, #0
 800bee2:	d041      	beq.n	800bf68 <_free_r+0x8c>
 800bee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bee8:	1f0c      	subs	r4, r1, #4
 800beea:	2b00      	cmp	r3, #0
 800beec:	bfb8      	it	lt
 800beee:	18e4      	addlt	r4, r4, r3
 800bef0:	f7ff ff52 	bl	800bd98 <__malloc_lock>
 800bef4:	4a1d      	ldr	r2, [pc, #116]	@ (800bf6c <_free_r+0x90>)
 800bef6:	6813      	ldr	r3, [r2, #0]
 800bef8:	b933      	cbnz	r3, 800bf08 <_free_r+0x2c>
 800befa:	6063      	str	r3, [r4, #4]
 800befc:	6014      	str	r4, [r2, #0]
 800befe:	4628      	mov	r0, r5
 800bf00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf04:	f7ff bf4e 	b.w	800bda4 <__malloc_unlock>
 800bf08:	42a3      	cmp	r3, r4
 800bf0a:	d908      	bls.n	800bf1e <_free_r+0x42>
 800bf0c:	6820      	ldr	r0, [r4, #0]
 800bf0e:	1821      	adds	r1, r4, r0
 800bf10:	428b      	cmp	r3, r1
 800bf12:	bf01      	itttt	eq
 800bf14:	6819      	ldreq	r1, [r3, #0]
 800bf16:	685b      	ldreq	r3, [r3, #4]
 800bf18:	1809      	addeq	r1, r1, r0
 800bf1a:	6021      	streq	r1, [r4, #0]
 800bf1c:	e7ed      	b.n	800befa <_free_r+0x1e>
 800bf1e:	461a      	mov	r2, r3
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	b10b      	cbz	r3, 800bf28 <_free_r+0x4c>
 800bf24:	42a3      	cmp	r3, r4
 800bf26:	d9fa      	bls.n	800bf1e <_free_r+0x42>
 800bf28:	6811      	ldr	r1, [r2, #0]
 800bf2a:	1850      	adds	r0, r2, r1
 800bf2c:	42a0      	cmp	r0, r4
 800bf2e:	d10b      	bne.n	800bf48 <_free_r+0x6c>
 800bf30:	6820      	ldr	r0, [r4, #0]
 800bf32:	4401      	add	r1, r0
 800bf34:	1850      	adds	r0, r2, r1
 800bf36:	4283      	cmp	r3, r0
 800bf38:	6011      	str	r1, [r2, #0]
 800bf3a:	d1e0      	bne.n	800befe <_free_r+0x22>
 800bf3c:	6818      	ldr	r0, [r3, #0]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	6053      	str	r3, [r2, #4]
 800bf42:	4408      	add	r0, r1
 800bf44:	6010      	str	r0, [r2, #0]
 800bf46:	e7da      	b.n	800befe <_free_r+0x22>
 800bf48:	d902      	bls.n	800bf50 <_free_r+0x74>
 800bf4a:	230c      	movs	r3, #12
 800bf4c:	602b      	str	r3, [r5, #0]
 800bf4e:	e7d6      	b.n	800befe <_free_r+0x22>
 800bf50:	6820      	ldr	r0, [r4, #0]
 800bf52:	1821      	adds	r1, r4, r0
 800bf54:	428b      	cmp	r3, r1
 800bf56:	bf04      	itt	eq
 800bf58:	6819      	ldreq	r1, [r3, #0]
 800bf5a:	685b      	ldreq	r3, [r3, #4]
 800bf5c:	6063      	str	r3, [r4, #4]
 800bf5e:	bf04      	itt	eq
 800bf60:	1809      	addeq	r1, r1, r0
 800bf62:	6021      	streq	r1, [r4, #0]
 800bf64:	6054      	str	r4, [r2, #4]
 800bf66:	e7ca      	b.n	800befe <_free_r+0x22>
 800bf68:	bd38      	pop	{r3, r4, r5, pc}
 800bf6a:	bf00      	nop
 800bf6c:	200007dc 	.word	0x200007dc

0800bf70 <_init>:
 800bf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf72:	bf00      	nop
 800bf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf76:	bc08      	pop	{r3}
 800bf78:	469e      	mov	lr, r3
 800bf7a:	4770      	bx	lr

0800bf7c <_fini>:
 800bf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf7e:	bf00      	nop
 800bf80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf82:	bc08      	pop	{r3}
 800bf84:	469e      	mov	lr, r3
 800bf86:	4770      	bx	lr
