#ifndef EKF_H
#define EKF_H

#include <cmath>
#include <cstring>
// Define your own _float_t if not defined
#ifndef _float_t
#define _float_t float
#endif
class EKF {
public:
    static constexpr int EKF_N = 2;  // State vector dimension: [angle, velocity]
    static constexpr int EKF_M = 1;  // Measurement vector dimension: [angle]

    EKF() {
        initialize();
    }

    void initialize() {
        const _float_t pdiag[EKF_N] = {1, 1};
        for (int i = 0; i < EKF_N; ++i) {
            for (int j = 0; j < EKF_N; ++j) {
                P[i * EKF_N + j] = (i == j) ? pdiag[i] : 0;
            }
            x[i] = 0;
        }
    }

    void predict() {
        _float_t fx[EKF_N];
        fx[0] = x[0] + x[1] * Ts;  // Angle update: θ + ω * dt
        fx[1] = x[1];  // Velocity update: ω

        memcpy(x, fx, sizeof(fx));

        _float_t FP[EKF_N * EKF_N], FPFt[EKF_N * EKF_N], Ft[EKF_N * EKF_N];
        _mulmat(F, P, FP, EKF_N, EKF_N, EKF_N);
        _transpose(F, Ft, EKF_N, EKF_N);
        _mulmat(FP, Ft, FPFt, EKF_N, EKF_N, EKF_N);
        _addmat(FPFt, Q, P, EKF_N, EKF_N);
    }

    bool update(_float_t z) {
        _float_t hx[EKF_M];
        hx[0] = x[0];  // Predicted measurement

        _float_t Ht[EKF_N * EKF_M], PHt[EKF_N * EKF_M], HpHt[EKF_M * EKF_M], HPHtRinv[EKF_M * EKF_M];
        _transpose(H, Ht, EKF_M, EKF_N);
        _mulmat(P, Ht, PHt, EKF_N, EKF_N, EKF_M);
        _mulmat(H, PHt, HpHt, EKF_M, EKF_N, EKF_M);
        _addmat(HpHt, R, HpHtRinv, EKF_M, EKF_M);

        if (!invert(HpHtRinv, HpHtRinv)) {
            return false;  // Matrix inversion failed, skip update
        }

        _float_t G[EKF_N * EKF_M], GH[EKF_N * EKF_N];
        _mulmat(PHt, HpHtRinv, G, EKF_N, EKF_M, EKF_M);
        _mulmat(G, H, GH, EKF_N, EKF_M, EKF_N);

        _float_t z_hx[EKF_M];
        _sub(&z, hx, z_hx, EKF_M);
        _float_t Gz_hx[EKF_N];
        _mulvec(G, z_hx, Gz_hx, EKF_N, EKF_M);
        _addvec(x, Gz_hx, x, EKF_N);

        _mulmat(GH, P, GH, EKF_N, EKF_N, EKF_N);
        _negate(GH, EKF_N, EKF_N);
        _addeye(GH, EKF_N);
        _float_t P_new[EKF_N * EKF_N];
        _mulmat(GH, P, P_new, EKF_N, EKF_N, EKF_N);
        memcpy(P, P_new, sizeof(P_new));

        return true;
    }

    _float_t getVelocity() const {
        return x[1];
    }

private:


    _float_t x[EKF_N];          // State vector
    _float_t P[EKF_N * EKF_N];  // Prediction error covariance

    const _float_t Q[EKF_N * EKF_N] = {0.01, 0, 0, 0.01};  // Process noise covariance
    const _float_t R[EKF_M * EKF_M] = {0.1};               // Measurement noise covariance
    const _float_t F[EKF_N * EKF_N] = {1, Ts, 0, 1};       // State transition model
    const _float_t H[EKF_M * EKF_N] = {1, 0};              // Observation model

    static constexpr _float_t Ts = 0.1f; // Sample time

    // Utility functions for matrix operations
    void _mulmat(const _float_t* A, const _float_t* B, _float_t* C, int m, int p, int n);
    void _transpose(const _float_t* A, _float_t* At, int m, int n);
    void _addmat(const _float_t* A, const _float_t* B, _float_t* C, int m, int n);
    bool invert(const _float_t* A, _float_t* Ainv);
    void _sub(const _float_t* A, const _float_t* B, _float_t* C, int m);
    void _mulvec(const _float_t* A, const _float_t* x, _float_t* Ax, int m, int n);
    void _addvec(const _float_t* A, const _float_t* B, _float_t* C, int m);
    void _negate(_float_t* A, int m, int n);
    void _addeye(_float_t* A, int m);
};

#endif // EKF_H
