
bldc_driver_controller_runj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c180  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800c358  0800c358  0000d358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4a8  0800c4a8  0000e130  2**0
                  CONTENTS
  4 .ARM          00000000  0800c4a8  0800c4a8  0000e130  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c4a8  0800c4a8  0000e130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800c4a8  0800c4a8  0000d4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800c4b4  0800c4b4  0000d4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  0800c4bc  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000130  0800c5ec  0000e130  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000092c  0800c5ec  0000e92c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e130  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031dfe  00000000  00000000  0000e160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fe2  00000000  00000000  0003ff5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  00045f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001683  00000000  00000000  00047cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bcc  00000000  00000000  00049333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028429  00000000  00000000  00072eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f120f  00000000  00000000  0009b328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018c537  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008904  00000000  00000000  0018c57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00194e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000130 	.word	0x20000130
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c340 	.word	0x0800c340

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000134 	.word	0x20000134
 8000214:	0800c340 	.word	0x0800c340

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b9e:	eef0 7ae7 	vabs.f32	s15, s15
 8000ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_ZN17AS5048A_interfaceC1Ev>:
	    .command_parity_bit = 15
};



AS5048A_interface::AS5048A_interface() {
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8000c74 <_ZN17AS5048A_interfaceC1Ev+0xc4>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f04f 0200 	mov.w	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	@ 0x24
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f04f 0200 	mov.w	r2, #0
 8000be0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f04f 0200 	mov.w	r2, #0
 8000c04:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a1b      	ldr	r2, [pc, #108]	@ (8000c78 <_ZN17AS5048A_interfaceC1Ev+0xc8>)
 8000c0a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c7c <_ZN17AS5048A_interfaceC1Ev+0xcc>)
 8000c10:	649a      	str	r2, [r3, #72]	@ 0x48
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	334c      	adds	r3, #76	@ 0x4c
 8000c16:	2201      	movs	r2, #1
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fd9e 	bl	800175c <_ZN3EKFC1Eii>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a17      	ldr	r2, [pc, #92]	@ (8000c80 <_ZN17AS5048A_interfaceC1Ev+0xd0>)
 8000c24:	3360      	adds	r3, #96	@ 0x60
 8000c26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a14      	ldr	r2, [pc, #80]	@ (8000c84 <_ZN17AS5048A_interfaceC1Ev+0xd4>)
 8000c32:	f103 0480 	add.w	r4, r3, #128	@ 0x80
 8000c36:	4613      	mov	r3, r2
 8000c38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a11      	ldr	r2, [pc, #68]	@ (8000c88 <_ZN17AS5048A_interfaceC1Ev+0xd8>)
 8000c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a10      	ldr	r2, [pc, #64]	@ (8000c8c <_ZN17AS5048A_interfaceC1Ev+0xdc>)
 8000c4a:	f103 0494 	add.w	r4, r3, #148	@ 0x94
 8000c4e:	4613      	mov	r3, r2
 8000c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000c5c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f04f 0200 	mov.w	r2, #0
 8000c66:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	// TODO Auto-generated constructor stub

}
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd90      	pop	{r4, r7, pc}
 8000c74:	0800c3dc 	.word	0x0800c3dc
 8000c78:	c640e400 	.word	0xc640e400
 8000c7c:	ffffcfc7 	.word	0xffffcfc7
 8000c80:	0800c358 	.word	0x0800c358
 8000c84:	0800c360 	.word	0x0800c360
 8000c88:	3089705f 	.word	0x3089705f
 8000c8c:	0800c370 	.word	0x0800c370

08000c90 <_ZN17AS5048A_interfaceD1Ev>:

AS5048A_interface::~AS5048A_interface() {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	4a06      	ldr	r2, [pc, #24]	@ (8000cb4 <_ZN17AS5048A_interfaceD1Ev+0x24>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	334c      	adds	r3, #76	@ 0x4c
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fd72 	bl	800178c <_ZN3EKFD1Ev>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	0800c3dc 	.word	0x0800c3dc

08000cb8 <_ZN17AS5048A_interfaceD0Ev>:
AS5048A_interface::~AS5048A_interface() {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
}
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ffe5 	bl	8000c90 <_ZN17AS5048A_interfaceD1Ev>
 8000cc6:	21ac      	movs	r1, #172	@ 0xac
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f009 ff8d 	bl	800abe8 <_ZdlPvj>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>:

/**
 * @brief Initialize SPI for Magnetic Sensor with AS5048A_SPI
*/
void AS5048A_interface::MagneticSensorSPI_init() 
{
 8000cd8:	b5b0      	push	{r4, r5, r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	struct MagneticSensorSPIConfig_s config = AS5048A_SPI;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x74>)
 8000ce2:	f107 040c 	add.w	r4, r7, #12
 8000ce6:	461d      	mov	r5, r3
 8000ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cec:	682b      	ldr	r3, [r5, #0]
 8000cee:	6023      	str	r3, [r4, #0]
	// angle read register of the magnetic sensor
	angle_register = config.angle_registers ? config.angle_registers : DEF_ANGLE_REGISTER;
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x22>
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	e001      	b.n	8000cfe <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x26>
 8000cfa:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6193      	str	r3, [r2, #24]
	// register maximum value (counts per revolution)
	cpr = pow(2, config.bit_resolution);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4619      	mov	r1, r3
 8000d06:	2002      	movs	r0, #2
 8000d08:	f000 fa85 	bl	8001216 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000d0c:	ec53 2b10 	vmov	r2, r3, d0
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff feec 	bl	8000af0 <__aeabi_d2f>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	605a      	str	r2, [r3, #4]
	bit_resolution = config.bit_resolution;
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	609a      	str	r2, [r3, #8]

	command_parity_bit = config.command_parity_bit; 	// for backwards compatibility
 8000d24:	69fa      	ldr	r2, [r7, #28]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60da      	str	r2, [r3, #12]
	command_rw_bit = config.command_rw_bit; 			// for backwards compatibility
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	611a      	str	r2, [r3, #16]
	data_start_bit = config.data_start_bit; 			// for backwards compatibility
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	615a      	str	r2, [r3, #20]

	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2110      	movs	r1, #16
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3e:	f006 ff5f 	bl	8007c00 <HAL_GPIO_WritePin>
}
 8000d42:	bf00      	nop
 8000d44:	3720      	adds	r7, #32
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bdb0      	pop	{r4, r5, r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000000 	.word	0x20000000

08000d50 <_ZN17AS5048A_interface11Sensor_initEv>:

/**
 * @brief Initialize the variable of encoder
*/
void AS5048A_interface::Sensor_init()
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	// initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
	getSensorAngle(); 
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f000 f8cb 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
	vel_angle_prev = getSensorAngle();
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 f8c8 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
 8000d64:	eef0 7a40 	vmov.f32	s15, s0
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	vel_angle_prev_ts = micros();
 8000d6e:	f000 f935 	bl	8000fdc <_ZN17AS5048A_interface6microsEv>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(1);		// Wait for collecting data
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f004 f9dc 	bl	8005138 <HAL_Delay>
	getSensorAngle();
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 f8b7 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
	angle_prev = getSensorAngle(); 
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f8b4 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
 8000d8c:	eef0 7a40 	vmov.f32	s15, s0
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	edc3 7a07 	vstr	s15, [r3, #28]
	angle_prev_ts = micros();
 8000d96:	f000 f921 	bl	8000fdc <_ZN17AS5048A_interface6microsEv>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	621a      	str	r2, [r3, #32]


	ekf_encoder.ekf_initialize(&_ekf_s_encoder, Pdiag);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3360      	adds	r3, #96	@ 0x60
 8000db2:	461a      	mov	r2, r3
 8000db4:	f000 fd0a 	bl	80017cc <_ZN3EKF14ekf_initializeEP5ekf_tPKf>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_ZN17AS5048A_interface17spiCalcEvenParityEt>:

/**
 * @brief Utility function used to calculate even parity of word
 */
uint8_t AS5048A_interface::spiCalcEvenParity(uint16_t value) 
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	807b      	strh	r3, [r7, #2]
	uint8_t cnt = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73fb      	strb	r3, [r7, #15]
	uint8_t i;
	for (i = 0; i < 16; i++) 
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73bb      	strb	r3, [r7, #14]
 8000dd4:	e00d      	b.n	8000df2 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x32>
	{
		if (value & 0x1)
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x26>
			cnt++;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	3301      	adds	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
		value >>= 1;
 8000de6:	887b      	ldrh	r3, [r7, #2]
 8000de8:	085b      	lsrs	r3, r3, #1
 8000dea:	807b      	strh	r3, [r7, #2]
	for (i = 0; i < 16; i++) 
 8000dec:	7bbb      	ldrb	r3, [r7, #14]
 8000dee:	3301      	adds	r3, #1
 8000df0:	73bb      	strb	r3, [r7, #14]
 8000df2:	7bbb      	ldrb	r3, [r7, #14]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d9ee      	bls.n	8000dd6 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x16>
	}
	return cnt & 0x1;
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	b2db      	uxtb	r3, r3
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_ZN17AS5048A_interface4readEt>:
 * @brief Read a register from the SPI encoder sensor
 * 		  Takes the address of the register as a 16 bit word
 * @return the value of the register
 */
uint16_t AS5048A_interface::read(uint16_t angle_register) 
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]
	uint16_t register_value;
	uint16_t command = angle_register;
 8000e18:	887b      	ldrh	r3, [r7, #2]
 8000e1a:	817b      	strh	r3, [r7, #10]

	if (command_rw_bit > 0)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dd0b      	ble.n	8000e3c <_ZN17AS5048A_interface4readEt+0x30>
	{
		command = angle_register | (1 << command_rw_bit);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	817b      	strh	r3, [r7, #10]
	}
	if (command_parity_bit > 0)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	dd11      	ble.n	8000e68 <_ZN17AS5048A_interface4readEt+0x5c>
	{
		//Add a parity bit on the the MSB
		command |= ((uint16_t) spiCalcEvenParity(command) << command_parity_bit);
 8000e44:	897b      	ldrh	r3, [r7, #10]
 8000e46:	4619      	mov	r1, r3
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ffb9 	bl	8000dc0 <_ZN17AS5048A_interface17spiCalcEvenParityEt>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	b21a      	sxth	r2, r3
 8000e5c:	897b      	ldrh	r3, [r7, #10]
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	817b      	strh	r3, [r7, #10]
	}

	//>>>> SPI - begin transaction <<<<
	//Send the command
	//  spi->transfer16(command);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e70:	f006 fec6 	bl	8007c00 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &command, (uint8_t*) &register_value, sizeof(register_value) / sizeof(uint16_t), 100);
 8000e74:	f107 020c 	add.w	r2, r7, #12
 8000e78:	f107 010a 	add.w	r1, r7, #10
 8000e7c:	2364      	movs	r3, #100	@ 0x64
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2301      	movs	r3, #1
 8000e82:	4813      	ldr	r0, [pc, #76]	@ (8000ed0 <_ZN17AS5048A_interface4readEt+0xc4>)
 8000e84:	f007 ff65 	bl	8008d52 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e90:	f006 feb6 	bl	8007c00 <HAL_GPIO_WritePin>
//	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) & command, (uint8_t*) &register_value, sizeof(register_value) / sizeof(uint16_t), 100);
//	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);

	//>>>> SPI - end transaction <<<<

	register_value = register_value >> (1 + data_start_bit - bit_resolution); //this should shift data to the rightmost bits of the word
 8000e94:	89bb      	ldrh	r3, [r7, #12]
 8000e96:	4619      	mov	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	fa41 f303 	asr.w	r3, r1, r3
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	81bb      	strh	r3, [r7, #12]
	uint16_t data_mask = 0xFFFF >> (16 - bit_resolution);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f1c3 0310 	rsb	r3, r3, #16
 8000eb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eb8:	fa42 f303 	asr.w	r3, r2, r3
 8000ebc:	81fb      	strh	r3, [r7, #14]
	return register_value & data_mask; // Return the data, stripping the non data (e.g parity) bits
 8000ebe:	89ba      	ldrh	r2, [r7, #12]
 8000ec0:	89fb      	ldrh	r3, [r7, #14]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	b29b      	uxth	r3, r3
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200006c0 	.word	0x200006c0

08000ed4 <_ZN17AS5048A_interface11getRawCountEv>:
 * @brief Reading the raw counter of the magnetic sensor
 * 
 * @return raw data from SPI signal [16-bits word]
*/
int AS5048A_interface::getRawCount() 
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	return (int) read(angle_register);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff91 	bl	8000e0c <_ZN17AS5048A_interface4readEt>
 8000eea:	4603      	mov	r3, r0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>:
 * @brief Get absolute angular position from raw data of encoder
 *
 * @return absolute angular position [radians]
 */
float AS5048A_interface::getSensorAngle() 
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	return (getRawCount() / (float) cpr) * _2PI;
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ffe9 	bl	8000ed4 <_ZN17AS5048A_interface11getRawCountEv>
 8000f02:	ee07 0a90 	vmov	s15, r0
 8000f06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f14:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000f28 <_ZN17AS5048A_interface14getSensorAngleEv+0x34>
 8000f18:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40c90fdb 	.word	0x40c90fdb

08000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>:
 * 
 * @return absolute angular position with number of round [radians]
 * 
*/
float AS5048A_interface::get_full_rotation_angle() 
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	return (float) full_rotations * _2PI + angle_prev;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f38:	ee07 3a90 	vmov	s15, r3
 8000f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f40:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000f60 <_ZN17AS5048A_interface23get_full_rotation_angleEv+0x34>
 8000f44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000f52:	eeb0 0a67 	vmov.f32	s0, s15
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	40c90fdb 	.word	0x40c90fdb

08000f64 <_ZN17AS5048A_interface18getMechanicalAngleEv>:

/**
 * @brief Get absolute angular position from last call updateSensor function
*/
float AS5048A_interface::getMechanicalAngle() 
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	return angle_prev;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	ee07 3a90 	vmov	s15, r3
}
 8000f74:	eeb0 0a67 	vmov.f32	s0, s15
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <_ZN17AS5048A_interface15electricalAngleEv>:
 * @brief Calculate electrical angular position from absoulute angular position 
 * 
 * @return electrical angular position [radians]
*/
float AS5048A_interface::electricalAngle() 
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	ed2d 8b02 	vpush	{d8}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	return _normalizeAngle((float) (sensor_direction * pole_pairs) * getMechanicalAngle() - zero_electric_angle);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f94:	4a10      	ldr	r2, [pc, #64]	@ (8000fd8 <_ZN17AS5048A_interface15electricalAngleEv+0x54>)
 8000f96:	6812      	ldr	r2, [r2, #0]
 8000f98:	fb02 f303 	mul.w	r3, r2, r3
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ffdd 	bl	8000f64 <_ZN17AS5048A_interface18getMechanicalAngleEv>
 8000faa:	eef0 7a40 	vmov.f32	s15, s0
 8000fae:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc0:	f001 fc72 	bl	80028a8 <_Z15_normalizeAnglef>
 8000fc4:	eef0 7a40 	vmov.f32	s15, s0
}
 8000fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	ecbd 8b02 	vpop	{d8}
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000a8 	.word	0x200000a8

08000fdc <_ZN17AS5048A_interface6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t AS5048A_interface::micros(void) 
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8000fe0:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <_ZN17AS5048A_interface6microsEv+0x24>)
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <_ZN17AS5048A_interface6microsEv+0x28>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4907      	ldr	r1, [pc, #28]	@ (8001008 <_ZN17AS5048A_interface6microsEv+0x2c>)
 8000fea:	fba1 1303 	umull	r1, r3, r1, r3
 8000fee:	0c9b      	lsrs	r3, r3, #18
 8000ff0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e0001000 	.word	0xe0001000
 8001004:	200000c0 	.word	0x200000c0
 8001008:	431bde83 	.word	0x431bde83

0800100c <_ZN17AS5048A_interface12updateSensorEv>:
/**
 * @brief Update parameter of encoder 
 * 	- should be used in the loop
*/
void AS5048A_interface::updateSensor() 
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	float angle_current = getSensorAngle();
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff6d 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
 800101a:	ed87 0a03 	vstr	s0, [r7, #12]
	angle_prev_ts = micros();
 800101e:	f7ff ffdd 	bl	8000fdc <_ZN17AS5048A_interface6microsEv>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	621a      	str	r2, [r3, #32]
	float d_angle = angle_current - angle_prev;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001030:	ed97 7a03 	vldr	s14, [r7, #12]
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	edc7 7a02 	vstr	s15, [r7, #8]
	// if overflow happened track it as full rotation
	if (abs(d_angle) > (0.8f * _2PI))
 800103c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001040:	f7ff fda6 	bl	8000b90 <_ZSt3absf>
 8001044:	eef0 7a40 	vmov.f32	s15, s0
 8001048:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001090 <_ZN17AS5048A_interface12updateSensorEv+0x84>
 800104c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001054:	bfcc      	ite	gt
 8001056:	2301      	movgt	r3, #1
 8001058:	2300      	movle	r3, #0
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00f      	beq.n	8001080 <_ZN17AS5048A_interface12updateSensorEv+0x74>
		full_rotations += (d_angle > 0) ? -1 : 1;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001064:	edd7 7a02 	vldr	s15, [r7, #8]
 8001068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	dd02      	ble.n	8001078 <_ZN17AS5048A_interface12updateSensorEv+0x6c>
 8001072:	f04f 32ff 	mov.w	r2, #4294967295
 8001076:	e000      	b.n	800107a <_ZN17AS5048A_interface12updateSensorEv+0x6e>
 8001078:	2201      	movs	r2, #1
 800107a:	441a      	add	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	639a      	str	r2, [r3, #56]	@ 0x38
	angle_prev = angle_current;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	61da      	str	r2, [r3, #28]

//	getShaftVelocity();
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40a0d97c 	.word	0x40a0d97c

08001094 <_ZN17AS5048A_interface14updateVelocityEv>:

void AS5048A_interface::updateVelocity()
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af02      	add	r7, sp, #8
 800109a:	6078      	str	r0, [r7, #4]
	// calculate sample time
	float Ts = 1e-3f;
 800109c:	4b3f      	ldr	r3, [pc, #252]	@ (800119c <_ZN17AS5048A_interface14updateVelocityEv+0x108>)
 800109e:	61fb      	str	r3, [r7, #28]

	// [2] EKF Velocity estimation
	_float_t angle_measurement = get_full_rotation_angle();
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff43 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 80010a6:	eef0 7a40 	vmov.f32	s15, s0
 80010aa:	edc7 7a06 	vstr	s15, [r7, #24]
	
    _float_t fx[EKF_N];
    fx[0] = _ekf_s_encoder.x[0] + _ekf_s_encoder.x[1] * Ts;   // Angle update
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b2:	ed93 7a00 	vldr	s14, [r3]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ba:	3304      	adds	r3, #4
 80010bc:	edd3 6a00 	vldr	s13, [r3]
 80010c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80010c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010cc:	edc7 7a04 	vstr	s15, [r7, #16]
    fx[1] = _ekf_s_encoder.x[1];                    // Velocity remains the same
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	617b      	str	r3, [r7, #20]
    ekf_encoder.ekf_predict(&_ekf_s_encoder, fx, F, Q);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f103 0494 	add.w	r4, r3, #148	@ 0x94
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3380      	adds	r3, #128	@ 0x80
 80010ee:	f107 0210 	add.w	r2, r7, #16
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	4623      	mov	r3, r4
 80010f6:	f000 fbd0 	bl	800189a <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_>

    _float_t hx[EKF_N];
    hx[0] = _ekf_s_encoder.x[0];  // Predicted measurement
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60bb      	str	r3, [r7, #8]
    ekf_encoder.ekf_update(&_ekf_s_encoder, &angle_measurement, hx, H, R);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	33a4      	adds	r3, #164	@ 0xa4
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	3290      	adds	r2, #144	@ 0x90
 8001116:	f107 0508 	add.w	r5, r7, #8
 800111a:	f107 0418 	add.w	r4, r7, #24
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	462b      	mov	r3, r5
 8001124:	4622      	mov	r2, r4
 8001126:	f000 fcc4 	bl	8001ab2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_>

    vel_prev_EKF = LPF_velocity(_ekf_s_encoder.x[1]);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112e:	3304      	adds	r3, #4
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	4819      	ldr	r0, [pc, #100]	@ (80011a0 <_ZN17AS5048A_interface14updateVelocityEv+0x10c>)
 800113a:	f001 fc23 	bl	8002984 <_ZN13LowPassFilterclEf>
 800113e:	eef0 7a40 	vmov.f32	s15, s0
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34



    // [1] Velocity calculation
    vel_prev = ((float)(full_rotations - vel_full_rotations) * _2PI + (angle_prev - vel_angle_prev)) / Ts;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80011a4 <_ZN17AS5048A_interface14updateVelocityEv+0x110>
 800115e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	edd3 6a07 	vldr	s13, [r3, #28]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800116e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001172:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001176:	ed97 7a07 	vldr	s14, [r7, #28]
 800117a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// save variables for next iteration
	vel_angle_prev = angle_prev;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69da      	ldr	r2, [r3, #28]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
	vel_full_rotations = full_rotations;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	63da      	str	r2, [r3, #60]	@ 0x3c
	// Low pass filter
//	vel_prev_LPF = sensor_direction * LPF_velocity(vel_prev);
}
 8001194:	bf00      	nop
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bdb0      	pop	{r4, r5, r7, pc}
 800119c:	3a83126f 	.word	0x3a83126f
 80011a0:	20000200 	.word	0x20000200
 80011a4:	40c90fdb 	.word	0x40c90fdb

080011a8 <_ZN17AS5048A_interface13getShaftAngleEv>:
 * Get filtered absolute angular position from encoder with sensor direction
 *
 * @return absolute angular position with sensor direction [radians]
*/
float AS5048A_interface::getShaftAngle() 
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	ed2d 8b02 	vpush	{d8}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	return sensor_direction * LPF_position(get_full_rotation_angle()) - sensor_offset;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011b8:	ee07 3a90 	vmov	s15, r3
 80011bc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff feb3 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 80011c6:	eef0 7a40 	vmov.f32	s15, s0
 80011ca:	eeb0 0a67 	vmov.f32	s0, s15
 80011ce:	4809      	ldr	r0, [pc, #36]	@ (80011f4 <_ZN17AS5048A_interface13getShaftAngleEv+0x4c>)
 80011d0:	f001 fbd8 	bl	8002984 <_ZN13LowPassFilterclEf>
 80011d4:	eef0 7a40 	vmov.f32	s15, s0
 80011d8:	ee28 7a27 	vmul.f32	s14, s16, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80011e2:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80011e6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	ecbd 8b02 	vpop	{d8}
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001f4 	.word	0x200001f4

080011f8 <_ZN17AS5048A_interface16getShaftVelocityEv>:
 * Get filtered absolute angular velocity from encoder with sensor direction
 *
 * @return absolute angular velocity with sensor direction [radians/second]
*/
float AS5048A_interface::getShaftVelocity() 
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	return vel_prev_EKF;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001204:	ee07 3a90 	vmov	s15, r3
}
 8001208:	eeb0 0a67 	vmov.f32	s0, s15
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001216:	b5b0      	push	{r4, r5, r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff f94b 	bl	80004bc <__aeabi_i2d>
 8001226:	4604      	mov	r4, r0
 8001228:	460d      	mov	r5, r1
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f7ff f946 	bl	80004bc <__aeabi_i2d>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	ec43 2b11 	vmov	d1, r2, r3
 8001238:	ec45 4b10 	vmov	d0, r4, r5
 800123c:	f009 fcf6 	bl	800ac2c <pow>
 8001240:	eeb0 7a40 	vmov.f32	s14, s0
 8001244:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001248:	eeb0 0a47 	vmov.f32	s0, s14
 800124c:	eef0 0a67 	vmov.f32	s1, s15
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001258 <_ZN12CurrentSenseC1Ev>:

#include <CurrentSense.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU


CurrentSense::CurrentSense() 
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	4a4d      	ldr	r2, [pc, #308]	@ (8001398 <_ZN12CurrentSenseC1Ev+0x140>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	334c      	adds	r3, #76	@ 0x4c
 800126a:	2201      	movs	r2, #1
 800126c:	2102      	movs	r1, #2
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fa74 	bl	800175c <_ZN3EKFC1Eii>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a49      	ldr	r2, [pc, #292]	@ (800139c <_ZN12CurrentSenseC1Ev+0x144>)
 8001278:	3360      	adds	r3, #96	@ 0x60
 800127a:	ca07      	ldmia	r2, {r0, r1, r2}
 800127c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a47      	ldr	r2, [pc, #284]	@ (80013a0 <_ZN12CurrentSenseC1Ev+0x148>)
 8001284:	f103 049c 	add.w	r4, r3, #156	@ 0x9c
 8001288:	4615      	mov	r5, r2
 800128a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001292:	682b      	ldr	r3, [r5, #0]
 8001294:	6023      	str	r3, [r4, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a41      	ldr	r2, [pc, #260]	@ (80013a0 <_ZN12CurrentSenseC1Ev+0x148>)
 800129a:	f103 04c0 	add.w	r4, r3, #192	@ 0xc0
 800129e:	4615      	mov	r5, r2
 80012a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a8:	682b      	ldr	r3, [r5, #0]
 80012aa:	6023      	str	r3, [r4, #0]
 80012ac:	4b3d      	ldr	r3, [pc, #244]	@ (80013a4 <_ZN12CurrentSenseC1Ev+0x14c>)
 80012ae:	ed93 7a00 	vldr	s14, [r3]
 80012b2:	4b3d      	ldr	r3, [pc, #244]	@ (80013a8 <_ZN12CurrentSenseC1Ev+0x150>)
 80012b4:	edd3 7a00 	vldr	s15, [r3]
 80012b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012bc:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80013ac <_ZN12CurrentSenseC1Ev+0x154>
 80012c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80012c4:	4b3a      	ldr	r3, [pc, #232]	@ (80013b0 <_ZN12CurrentSenseC1Ev+0x158>)
 80012c6:	ed93 7a00 	vldr	s14, [r3]
 80012ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80012fa:	4b2a      	ldr	r3, [pc, #168]	@ (80013a4 <_ZN12CurrentSenseC1Ev+0x14c>)
 80012fc:	ed93 7a00 	vldr	s14, [r3]
 8001300:	4b29      	ldr	r3, [pc, #164]	@ (80013a8 <_ZN12CurrentSenseC1Ev+0x150>)
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80013ac <_ZN12CurrentSenseC1Ev+0x154>
 800130e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001312:	4b27      	ldr	r3, [pc, #156]	@ (80013b0 <_ZN12CurrentSenseC1Ev+0x158>)
 8001314:	ed93 7a00 	vldr	s14, [r3]
 8001318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800131c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8001348:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <_ZN12CurrentSenseC1Ev+0x14c>)
 800134a:	ed93 7a00 	vldr	s14, [r3]
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <_ZN12CurrentSenseC1Ev+0x150>)
 8001350:	edd3 7a00 	vldr	s15, [r3]
 8001354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001358:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80013ac <_ZN12CurrentSenseC1Ev+0x154>
 800135c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <_ZN12CurrentSenseC1Ev+0x158>)
 8001362:	ed93 7a00 	vldr	s14, [r3]
 8001366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800136a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800136e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a41 	vstr	s15, [r3, #260]	@ 0x104
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a0e      	ldr	r2, [pc, #56]	@ (80013b4 <_ZN12CurrentSenseC1Ev+0x15c>)
 800137c:	f503 7484 	add.w	r4, r3, #264	@ 0x108
 8001380:	4615      	mov	r5, r2
 8001382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	6023      	str	r3, [r4, #0]
{
	
}
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bdb0      	pop	{r4, r5, r7, pc}
 8001398:	0800c3ec 	.word	0x0800c3ec
 800139c:	0800c380 	.word	0x0800c380
 80013a0:	0800c38c 	.word	0x0800c38c
 80013a4:	20000098 	.word	0x20000098
 80013a8:	200000a0 	.word	0x200000a0
 80013ac:	3a83126f 	.word	0x3a83126f
 80013b0:	200000a4 	.word	0x200000a4
 80013b4:	0800c3b0 	.word	0x0800c3b0

080013b8 <_ZN12CurrentSenseD1Ev>:

CurrentSense::~CurrentSense() 
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	4a06      	ldr	r2, [pc, #24]	@ (80013dc <_ZN12CurrentSenseD1Ev+0x24>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	334c      	adds	r3, #76	@ 0x4c
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f9de 	bl	800178c <_ZN3EKFD1Ev>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	0800c3ec 	.word	0x0800c3ec

080013e0 <_ZN12CurrentSenseD0Ev>:
CurrentSense::~CurrentSense() 
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
}
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ffe5 	bl	80013b8 <_ZN12CurrentSenseD1Ev>
 80013ee:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f009 fbf8 	bl	800abe8 <_ZdlPvj>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <_ZN12CurrentSense16initCurrentsenseEff>:
/**
 * @brief Initialize Direct Memory Access (DMA) for Analog to Digital Convertor (ADC)
 * 			, which use to read current sensor signals 
*/
void CurrentSense::initCurrentsense(float _shunt_resistor, float _gain) 
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001410:	edc7 0a01 	vstr	s1, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, adcResultDMA_a, 1);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3344      	adds	r3, #68	@ 0x44
 8001418:	2201      	movs	r2, #1
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <_ZN12CurrentSense16initCurrentsenseEff+0x4c>)
 800141e:	f004 fa79 	bl	8005914 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, adcResultDMA_c, 1);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3348      	adds	r3, #72	@ 0x48
 8001426:	2201      	movs	r2, #1
 8001428:	4619      	mov	r1, r3
 800142a:	480a      	ldr	r0, [pc, #40]	@ (8001454 <_ZN12CurrentSense16initCurrentsenseEff+0x50>)
 800142c:	f004 fa72 	bl	8005914 <HAL_ADC_Start_DMA>

	R_sense = _shunt_resistor;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	62da      	str	r2, [r3, #44]	@ 0x2c
	gain_a = _gain;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	621a      	str	r2, [r3, #32]
	gain_b = _gain;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	625a      	str	r2, [r3, #36]	@ 0x24
	gain_c = _gain;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000440 	.word	0x20000440
 8001454:	200004ac 	.word	0x200004ac

08001458 <_ZN12CurrentSense16calibrateOffsetsEv>:

/**
 * @brief Calibrate current offset in initial steady state (first 1000 iterations)
*/
void CurrentSense::calibrateOffsets() 
{
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	const int calibration_rounds = 1000;
 8001460:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001464:	60bb      	str	r3, [r7, #8]
	// find adc offset = zero current voltage
	offset_ia = 0;
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	e9c1 2302 	strd	r2, r3, [r1, #8]
	offset_ib = 0;
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	offset_ic = 0;
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	// read the adc voltage 1000 times ( arbitrary number )
	for (int i = 0; i < calibration_rounds; i++) 
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	e02b      	b.n	80014ee <_ZN12CurrentSense16calibrateOffsetsEv+0x96>
	{
		offset_ia += adcResultDMA_a[0];
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7fe fffb 	bl	800049c <__aeabi_ui2d>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4620      	mov	r0, r4
 80014ac:	4629      	mov	r1, r5
 80014ae:	f7fe feb9 	bl	8000224 <__adddf3>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
//		offset_ib += adcResultDMA[0];
		offset_ic += adcResultDMA_c[0];
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe ffe8 	bl	800049c <__aeabi_ui2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4620      	mov	r0, r4
 80014d2:	4629      	mov	r1, r5
 80014d4:	f7fe fea6 	bl	8000224 <__adddf3>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	e9c1 2306 	strd	r2, r3, [r1, #24]
		HAL_Delay(1);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f003 fe28 	bl	8005138 <HAL_Delay>
	for (int i = 0; i < calibration_rounds; i++) 
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3301      	adds	r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014f4:	dbcf      	blt.n	8001496 <_ZN12CurrentSense16calibrateOffsetsEv+0x3e>
	}
	// calculate the mean offsets
	offset_ia = offset_ia / calibration_rounds;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <_ZN12CurrentSense16calibrateOffsetsEv+0xdc>)
 8001502:	f7ff f96f 	bl	80007e4 <__aeabi_ddiv>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	e9c1 2302 	strd	r2, r3, [r1, #8]
//	offset_ib = offset_ib / calibration_rounds;
	offset_ic = offset_ic / calibration_rounds;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <_ZN12CurrentSense16calibrateOffsetsEv+0xdc>)
 800151c:	f7ff f962 	bl	80007e4 <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bdb0      	pop	{r4, r5, r7, pc}
 8001532:	bf00      	nop
 8001534:	408f4000 	.word	0x408f4000

08001538 <_ZN12CurrentSense16getPhaseCurrentsEv>:
 * @note the value 3.05 to 0.25 is the range of ADC signal from DRV8323RH, please see Datasheet.
 * 
 * @return  Phase current in Struct PhaseCurrent_s (Amperes)
*/
struct PhaseCurrent_s CurrentSense::getPhaseCurrents() 
{
 8001538:	b5b0      	push	{r4, r5, r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6178      	str	r0, [r7, #20]
//	struct PhaseCurrent_s current;
	current.a = ((offset_ia - adcResultDMA_a[0]) * (3.3 / 4096.0)) / (R_sense * gain_a);
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ffa6 	bl	800049c <__aeabi_ui2d>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4620      	mov	r0, r4
 8001556:	4629      	mov	r1, r5
 8001558:	f7fe fe62 	bl	8000220 <__aeabi_dsub>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	a33a      	add	r3, pc, #232	@ (adr r3, 8001650 <_ZN12CurrentSense16getPhaseCurrentsEv+0x118>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7ff f811 	bl	8000590 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4614      	mov	r4, r2
 8001574:	461d      	mov	r5, r3
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001586:	ee17 0a90 	vmov	r0, s15
 800158a:	f7fe ffa9 	bl	80004e0 <__aeabi_f2d>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7ff f925 	bl	80007e4 <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff faa5 	bl	8000af0 <__aeabi_d2f>
 80015a6:	4602      	mov	r2, r0
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	631a      	str	r2, [r3, #48]	@ 0x30
//	current.b = ((offset_ib - adcResultDMA_b[0]) * (3.3 / 4096.0)) / (R_sense * gain_b);
	current.c = ((offset_ic - adcResultDMA_c[0]) * (3.3 / 4096.0)) / (R_sense * gain_c);
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ff70 	bl	800049c <__aeabi_ui2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4620      	mov	r0, r4
 80015c2:	4629      	mov	r1, r5
 80015c4:	f7fe fe2c 	bl	8000220 <__aeabi_dsub>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	a31f      	add	r3, pc, #124	@ (adr r3, 8001650 <_ZN12CurrentSense16getPhaseCurrentsEv+0x118>)
 80015d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d6:	f7fe ffdb 	bl	8000590 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4614      	mov	r4, r2
 80015e0:	461d      	mov	r5, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80015ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f2:	ee17 0a90 	vmov	r0, s15
 80015f6:	f7fe ff73 	bl	80004e0 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4620      	mov	r0, r4
 8001600:	4629      	mov	r1, r5
 8001602:	f7ff f8ef 	bl	80007e4 <__aeabi_ddiv>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff fa6f 	bl	8000af0 <__aeabi_d2f>
 8001612:	4602      	mov	r2, r0
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	639a      	str	r2, [r3, #56]	@ 0x38
//    current.b = - current.a  - current.c; // --(1)
	return current;
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	3230      	adds	r2, #48	@ 0x30
 8001620:	ca07      	ldmia	r2, {r0, r1, r2}
 8001622:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001626:	69f9      	ldr	r1, [r7, #28]
 8001628:	6a3a      	ldr	r2, [r7, #32]
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	ee06 1a90 	vmov	s13, r1
 8001630:	ee07 2a10 	vmov	s14, r2
 8001634:	ee07 3a90 	vmov	s15, r3
}
 8001638:	eeb0 0a66 	vmov.f32	s0, s13
 800163c:	eef0 0a47 	vmov.f32	s1, s14
 8001640:	eeb0 1a67 	vmov.f32	s2, s15
 8001644:	3728      	adds	r7, #40	@ 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bdb0      	pop	{r4, r5, r7, pc}
 800164a:	bf00      	nop
 800164c:	f3af 8000 	nop.w
 8001650:	66666666 	.word	0x66666666
 8001654:	3f4a6666 	.word	0x3f4a6666

08001658 <_ZN12CurrentSense14getFOCCurrentsEf>:
 * @note function calculate by Clarke-Park transform of the phase currents
 * 
 * @return  DQ current in Struct DQCurrent_s (Amperes)
*/
struct DQCurrent_s CurrentSense::getFOCCurrents(float angle_el) 
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b08b      	sub	sp, #44	@ 0x2c
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	ed87 0a02 	vstr	s0, [r7, #8]
	// read current phase currents
//	struct PhaseCurrent_s current = getPhaseCurrents(); //Ia, Ib, Ic
	current = getPhaseCurrents(); //Ia,Ib,Ic
 8001664:	68fc      	ldr	r4, [r7, #12]
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f7ff ff66 	bl	8001538 <_ZN12CurrentSense16getPhaseCurrentsEv>
 800166c:	eef0 6a40 	vmov.f32	s13, s0
 8001670:	eeb0 7a60 	vmov.f32	s14, s1
 8001674:	eef0 7a41 	vmov.f32	s15, s2
 8001678:	edc4 6a0c 	vstr	s13, [r4, #48]	@ 0x30
 800167c:	ed84 7a0d 	vstr	s14, [r4, #52]	@ 0x34
 8001680:	edc4 7a0e 	vstr	s15, [r4, #56]	@ 0x38
//    float a = current.a - mid;
//    float b = current.b - mid;
//    i_alpha = a;
//    i_beta = _1_SQRT3 * a + _2_SQRT3 * b;

	i_alpha = current.a;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
	i_beta = (-(_1_SQRT3) * current.a) + (-(_2_SQRT3) * current.c);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001690:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001734 <_ZN12CurrentSense14getFOCCurrentsEf+0xdc>
 8001694:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800169e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001738 <_ZN12CurrentSense14getFOCCurrentsEf+0xe0>
 80016a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016aa:	edc7 7a08 	vstr	s15, [r7, #32]

	// calculate park transform
	float ct = _cos(angle_el);
 80016ae:	ed97 0a02 	vldr	s0, [r7, #8]
 80016b2:	f001 f8c9 	bl	8002848 <_Z4_cosf>
 80016b6:	ed87 0a07 	vstr	s0, [r7, #28]
	float st = _sin(angle_el);
 80016ba:	ed97 0a02 	vldr	s0, [r7, #8]
 80016be:	f001 f84b 	bl	8002758 <_Z4_sinf>
 80016c2:	ed87 0a06 	vstr	s0, [r7, #24]

//	struct DQCurrent_s dq_current;		// Id, Iq

	dq_current.d = i_alpha * ct + i_beta  * st;
 80016c6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80016ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d2:	edd7 6a08 	vldr	s13, [r7, #32]
 80016d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	dq_current.q = i_beta  * ct - i_alpha * st;
 80016e8:	ed97 7a08 	vldr	s14, [r7, #32]
 80016ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80016f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80016f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80016fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	return dq_current;
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	323c      	adds	r2, #60	@ 0x3c
 8001712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001716:	e883 0003 	stmia.w	r3, {r0, r1}
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	ee07 2a10 	vmov	s14, r2
 8001722:	ee07 3a90 	vmov	s15, r3
}
 8001726:	eeb0 0a47 	vmov.f32	s0, s14
 800172a:	eef0 0a67 	vmov.f32	s1, s15
 800172e:	372c      	adds	r7, #44	@ 0x2c
 8001730:	46bd      	mov	sp, r7
 8001732:	bd90      	pop	{r4, r7, pc}
 8001734:	bf13cd3a 	.word	0xbf13cd3a
 8001738:	bf93cd3a 	.word	0xbf93cd3a

0800173c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	ed87 0a01 	vstr	s0, [r7, #4]
 8001746:	ed97 0a01 	vldr	s0, [r7, #4]
 800174a:	f009 fb01 	bl	800ad50 <sqrtf>
 800174e:	eef0 7a40 	vmov.f32	s15, s0
 8001752:	eeb0 0a67 	vmov.f32	s0, s15
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <_ZN3EKFC1Eii>:
#include "ekf.h"

// EKF ///////////////////////////////////////////////////////////////////////
EKF::EKF(int n, int m) : EKF_N(n), EKF_M(m){}
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	4a07      	ldr	r2, [pc, #28]	@ (8001788 <_ZN3EKFC1Eii+0x2c>)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	0800c3fc 	.word	0x0800c3fc

0800178c <_ZN3EKFD1Ev>:

EKF::~EKF(){}
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <_ZN3EKFD1Ev+0x1c>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	0800c3fc 	.word	0x0800c3fc

080017ac <_ZN3EKFD0Ev>:
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ffe9 	bl	800178c <_ZN3EKFD1Ev>
 80017ba:	210c      	movs	r1, #12
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f009 fa13 	bl	800abe8 <_ZdlPvj>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_ZN3EKF14ekf_initializeEP5ekf_tPKf>:
 * @param ekf pointer to an ekf_t structure
 * @param pdiag a vector of length EKF_N containing the initial values for the
 * covariance matrix diagonal
 */
void EKF::ekf_initialize(ekf_t* ekf, const _float_t* pdiag) 
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
    ekf->x = new _float_t[EKF_N];
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d201      	bcs.n	80017e8 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x1c>
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	e001      	b.n	80017ec <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x20>
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ec:	4618      	mov	r0, r3
 80017ee:	f009 f9ff 	bl	800abf0 <_Znaj>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	601a      	str	r2, [r3, #0]
    ekf->P = new _float_t[EKF_N * EKF_N];
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	6852      	ldr	r2, [r2, #4]
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 800180a:	4293      	cmp	r3, r2
 800180c:	d201      	bcs.n	8001812 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x46>
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	e001      	b.n	8001816 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x4a>
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	4618      	mov	r0, r3
 8001818:	f009 f9ea 	bl	800abf0 <_Znaj>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < EKF_N; ++i) 
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	e02d      	b.n	8001886 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0xba>
    {
        for (int j = 0; j < EKF_N; ++j) 
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	e01a      	b.n	8001866 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x9a>
        {
            ekf->P[i * EKF_N + j] = i == j ? pdiag[i] : 0;
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	429a      	cmp	r2, r3
 8001836:	d105      	bne.n	8001844 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x78>
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	e001      	b.n	8001848 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x7c>
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	6851      	ldr	r1, [r2, #4]
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	6852      	ldr	r2, [r2, #4]
 8001850:	6978      	ldr	r0, [r7, #20]
 8001852:	fb02 f000 	mul.w	r0, r2, r0
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4402      	add	r2, r0
 800185a:	0092      	lsls	r2, r2, #2
 800185c:	440a      	add	r2, r1
 800185e:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < EKF_N; ++j) 
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	3301      	adds	r3, #1
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	dbdf      	blt.n	8001830 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x64>
        }
        ekf->x[i] = 0;
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < EKF_N; ++i) 
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	429a      	cmp	r2, r3
 800188e:	dbcc      	blt.n	800182a <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x5e>
    }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_>:
  * @param F Jacobian of state-transition function
  * @param Q process noise matrix
  *
  */
void EKF::ekf_predict(ekf_t* ekf, const _float_t* fx, const _float_t* F, const _float_t* Q) 
{
 800189a:	b590      	push	{r4, r7, lr}
 800189c:	b08d      	sub	sp, #52	@ 0x34
 800189e:	af04      	add	r7, sp, #16
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	603b      	str	r3, [r7, #0]
    // \hat{x}_k = f(\hat{x}_{k-1}, u_k)
    memcpy(ekf->x, fx, EKF_N * sizeof(_float_t));
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	461a      	mov	r2, r3
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	f00a fceb 	bl	800c290 <memcpy>

    // P_k = F_{k-1} P_{k-1} F^T_{k-1} + Q_{k-1}
    _float_t* FP = new _float_t[EKF_N * EKF_N]();
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	6852      	ldr	r2, [r2, #4]
 80018c2:	fb02 f303 	mul.w	r3, r2, r3
 80018c6:	461c      	mov	r4, r3
 80018c8:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80018cc:	429c      	cmp	r4, r3
 80018ce:	d201      	bcs.n	80018d4 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x3a>
 80018d0:	00a3      	lsls	r3, r4, #2
 80018d2:	e001      	b.n	80018d8 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x3e>
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
 80018d8:	4618      	mov	r0, r3
 80018da:	f009 f989 	bl	800abf0 <_Znaj>
 80018de:	4603      	mov	r3, r0
 80018e0:	4618      	mov	r0, r3
 80018e2:	4602      	mov	r2, r0
 80018e4:	1e63      	subs	r3, r4, #1
 80018e6:	e004      	b.n	80018f2 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x58>
 80018e8:	f04f 0100 	mov.w	r1, #0
 80018ec:	6011      	str	r1, [r2, #0]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	3204      	adds	r2, #4
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	daf8      	bge.n	80018e8 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x4e>
 80018f6:	61f8      	str	r0, [r7, #28]
    _mulmat(F, ekf->P, FP, EKF_N, EKF_N, EKF_N);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	6858      	ldr	r0, [r3, #4]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	6852      	ldr	r2, [r2, #4]
 8001904:	68f9      	ldr	r1, [r7, #12]
 8001906:	6849      	ldr	r1, [r1, #4]
 8001908:	9102      	str	r1, [sp, #8]
 800190a:	9201      	str	r2, [sp, #4]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	4602      	mov	r2, r0
 8001912:	6839      	ldr	r1, [r7, #0]
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 fa8d 	bl	8001e34 <_ZN3EKF7_mulmatEPKfS1_Pfiii>

    _float_t* Ft = new _float_t[EKF_N * EKF_N]();
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	6852      	ldr	r2, [r2, #4]
 8001922:	fb02 f303 	mul.w	r3, r2, r3
 8001926:	461c      	mov	r4, r3
 8001928:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800192c:	429c      	cmp	r4, r3
 800192e:	d201      	bcs.n	8001934 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x9a>
 8001930:	00a3      	lsls	r3, r4, #2
 8001932:	e001      	b.n	8001938 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x9e>
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
 8001938:	4618      	mov	r0, r3
 800193a:	f009 f959 	bl	800abf0 <_Znaj>
 800193e:	4603      	mov	r3, r0
 8001940:	4618      	mov	r0, r3
 8001942:	4602      	mov	r2, r0
 8001944:	1e63      	subs	r3, r4, #1
 8001946:	e004      	b.n	8001952 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xb8>
 8001948:	f04f 0100 	mov.w	r1, #0
 800194c:	6011      	str	r1, [r2, #0]
 800194e:	3b01      	subs	r3, #1
 8001950:	3204      	adds	r2, #4
 8001952:	2b00      	cmp	r3, #0
 8001954:	daf8      	bge.n	8001948 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xae>
 8001956:	61b8      	str	r0, [r7, #24]
    _transpose(F, Ft, EKF_N, EKF_N);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	4613      	mov	r3, r2
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	6839      	ldr	r1, [r7, #0]
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 fb15 	bl	8001f98 <_ZN3EKF10_transposeEPKfPfii>

    _float_t* FPFt = new _float_t[EKF_N * EKF_N]();
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	6852      	ldr	r2, [r2, #4]
 8001976:	fb02 f303 	mul.w	r3, r2, r3
 800197a:	461c      	mov	r4, r3
 800197c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8001980:	429c      	cmp	r4, r3
 8001982:	d201      	bcs.n	8001988 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xee>
 8001984:	00a3      	lsls	r3, r4, #2
 8001986:	e001      	b.n	800198c <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xf2>
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
 800198c:	4618      	mov	r0, r3
 800198e:	f009 f92f 	bl	800abf0 <_Znaj>
 8001992:	4603      	mov	r3, r0
 8001994:	4618      	mov	r0, r3
 8001996:	4602      	mov	r2, r0
 8001998:	1e63      	subs	r3, r4, #1
 800199a:	e004      	b.n	80019a6 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x10c>
 800199c:	f04f 0100 	mov.w	r1, #0
 80019a0:	6011      	str	r1, [r2, #0]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	3204      	adds	r2, #4
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	daf8      	bge.n	800199c <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x102>
 80019aa:	6178      	str	r0, [r7, #20]
    _mulmat(FP, Ft, FPFt, EKF_N, EKF_N, EKF_N);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	6852      	ldr	r2, [r2, #4]
 80019b4:	68f9      	ldr	r1, [r7, #12]
 80019b6:	6849      	ldr	r1, [r1, #4]
 80019b8:	9102      	str	r1, [sp, #8]
 80019ba:	9201      	str	r2, [sp, #4]
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	69f9      	ldr	r1, [r7, #28]
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 fa35 	bl	8001e34 <_ZN3EKF7_mulmatEPKfS1_Pfiii>

    _addmat(FPFt, Q, ekf->P, EKF_N, EKF_N);
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	6859      	ldr	r1, [r3, #4]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	6852      	ldr	r2, [r2, #4]
 80019d6:	9201      	str	r2, [sp, #4]
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	460b      	mov	r3, r1
 80019dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019de:	6979      	ldr	r1, [r7, #20]
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 fb0f 	bl	8002004 <_ZN3EKF7_addmatEPKfS1_Pfii>

    delete[] FP;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x158>
 80019ec:	69f8      	ldr	r0, [r7, #28]
 80019ee:	f009 f8fd 	bl	800abec <_ZdaPv>
    delete[] Ft;
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x164>
 80019f8:	69b8      	ldr	r0, [r7, #24]
 80019fa:	f009 f8f7 	bl	800abec <_ZdaPv>
    delete[] FPFt;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x170>
 8001a04:	6978      	ldr	r0, [r7, #20]
 8001a06:	f009 f8f1 	bl	800abec <_ZdaPv>
}
 8001a0a:	bf00      	nop
 8001a0c:	3724      	adds	r7, #36	@ 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd90      	pop	{r4, r7, pc}

08001a12 <_ZN3EKF16ekf_update_step3EP5ekf_tPf>:



void EKF::ekf_update_step3(ekf_t* ekf, _float_t* GH) 
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b08a      	sub	sp, #40	@ 0x28
 8001a16:	af04      	add	r7, sp, #16
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
    _negate(GH, EKF_N, EKF_N);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f000 fb30 	bl	800208e <_ZN3EKF7_negateEPfii>
    _addeye(GH, EKF_N);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	461a      	mov	r2, r3
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 fb63 	bl	8002102 <_ZN3EKF7_addeyeEPfi>
    _float_t* GHP = new _float_t[EKF_N * EKF_N];
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	6852      	ldr	r2, [r2, #4]
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d201      	bcs.n	8001a54 <_ZN3EKF16ekf_update_step3EP5ekf_tPf+0x42>
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	e001      	b.n	8001a58 <_ZN3EKF16ekf_update_step3EP5ekf_tPf+0x46>
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f009 f8c9 	bl	800abf0 <_Znaj>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	617b      	str	r3, [r7, #20]
    _mulmat(GH, ekf->P, GHP, EKF_N, EKF_N, EKF_N);
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	6858      	ldr	r0, [r3, #4]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	6852      	ldr	r2, [r2, #4]
 8001a6e:	68f9      	ldr	r1, [r7, #12]
 8001a70:	6849      	ldr	r1, [r1, #4]
 8001a72:	9102      	str	r1, [sp, #8]
 8001a74:	9201      	str	r2, [sp, #4]
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 f9d8 	bl	8001e34 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    memcpy(ekf->P, GHP, EKF_N * EKF_N * sizeof(_float_t));
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	6858      	ldr	r0, [r3, #4]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	6852      	ldr	r2, [r2, #4]
 8001a90:	fb02 f303 	mul.w	r3, r2, r3
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	461a      	mov	r2, r3
 8001a98:	6979      	ldr	r1, [r7, #20]
 8001a9a:	f00a fbf9 	bl	800c290 <memcpy>
    delete[] GHP;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d002      	beq.n	8001aaa <_ZN3EKF16ekf_update_step3EP5ekf_tPf+0x98>
 8001aa4:	6978      	ldr	r0, [r7, #20]
 8001aa6:	f009 f8a1 	bl	800abec <_ZdaPv>
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_>:
  * @param H sensor-function Jacobian matrix
  * @param R measurement-noise matrix
  *
  */
bool EKF::ekf_update(ekf_t* ekf, const _float_t* z, const _float_t* hx, const _float_t* H, const _float_t* R) 
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b092      	sub	sp, #72	@ 0x48
 8001ab6:	af04      	add	r7, sp, #16
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	603b      	str	r3, [r7, #0]
     // G_k = P_k H^T_k (H_k P_k H^T_k + R)^{-1}
    _float_t* G = new _float_t[EKF_N * EKF_M];
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	6892      	ldr	r2, [r2, #8]
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d201      	bcs.n	8001ad8 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x26>
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	e001      	b.n	8001adc <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x2a>
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8001adc:	4618      	mov	r0, r3
 8001ade:	f009 f887 	bl	800abf0 <_Znaj>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	637b      	str	r3, [r7, #52]	@ 0x34
    _float_t* Ht = new _float_t[EKF_N * EKF_M];
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	6892      	ldr	r2, [r2, #8]
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
 8001af2:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d201      	bcs.n	8001afe <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x4c>
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	e001      	b.n	8001b02 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x50>
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	4618      	mov	r0, r3
 8001b04:	f009 f874 	bl	800abf0 <_Znaj>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	633b      	str	r3, [r7, #48]	@ 0x30
    _transpose(H, Ht, EKF_M, EKF_N);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	4613      	mov	r3, r2
 8001b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 fa3b 	bl	8001f98 <_ZN3EKF10_transposeEPKfPfii>
    _float_t* PHt = new _float_t[EKF_N * EKF_M];
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	6892      	ldr	r2, [r2, #8]
 8001b2a:	fb02 f303 	mul.w	r3, r2, r3
 8001b2e:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d201      	bcs.n	8001b3a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x88>
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	e001      	b.n	8001b3e <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x8c>
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f009 f856 	bl	800abf0 <_Znaj>
 8001b44:	4603      	mov	r3, r0
 8001b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    _mulmat(ekf->P, Ht, PHt, EKF_N, EKF_N, EKF_M);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	6858      	ldr	r0, [r3, #4]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	6852      	ldr	r2, [r2, #4]
 8001b54:	68f9      	ldr	r1, [r7, #12]
 8001b56:	6889      	ldr	r1, [r1, #8]
 8001b58:	9102      	str	r1, [sp, #8]
 8001b5a:	9201      	str	r2, [sp, #4]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b62:	4601      	mov	r1, r0
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 f965 	bl	8001e34 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t* HP = new _float_t[EKF_M * EKF_N];
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	6852      	ldr	r2, [r2, #4]
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d201      	bcs.n	8001b82 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0xd0>
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	e001      	b.n	8001b86 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0xd4>
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	4618      	mov	r0, r3
 8001b88:	f009 f832 	bl	800abf0 <_Znaj>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    _mulmat(H, ekf->P, HP, EKF_M, EKF_N, EKF_N);
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	6858      	ldr	r0, [r3, #4]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	6852      	ldr	r2, [r2, #4]
 8001b9c:	68f9      	ldr	r1, [r7, #12]
 8001b9e:	6849      	ldr	r1, [r1, #4]
 8001ba0:	9102      	str	r1, [sp, #8]
 8001ba2:	9201      	str	r2, [sp, #4]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba8:	4602      	mov	r2, r0
 8001baa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f941 	bl	8001e34 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t* HpHt = new _float_t[EKF_M * EKF_M];
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	6892      	ldr	r2, [r2, #8]
 8001bba:	fb02 f303 	mul.w	r3, r2, r3
 8001bbe:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d201      	bcs.n	8001bca <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x118>
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	e001      	b.n	8001bce <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x11c>
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f009 f80e 	bl	800abf0 <_Znaj>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    _mulmat(HP, Ht, HpHt, EKF_M, EKF_N, EKF_M);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	6852      	ldr	r2, [r2, #4]
 8001be0:	68f9      	ldr	r1, [r7, #12]
 8001be2:	6889      	ldr	r1, [r1, #8]
 8001be4:	9102      	str	r1, [sp, #8]
 8001be6:	9201      	str	r2, [sp, #4]
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 f91f 	bl	8001e34 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t* HpHtR = new _float_t[EKF_M * EKF_M];
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	6892      	ldr	r2, [r2, #8]
 8001bfe:	fb02 f303 	mul.w	r3, r2, r3
 8001c02:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d201      	bcs.n	8001c0e <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x15c>
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	e001      	b.n	8001c12 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x160>
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	4618      	mov	r0, r3
 8001c14:	f008 ffec 	bl	800abf0 <_Znaj>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	623b      	str	r3, [r7, #32]
    _addmat(HpHt, R, HpHtR, EKF_M, EKF_M);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	6892      	ldr	r2, [r2, #8]
 8001c24:	9201      	str	r2, [sp, #4]
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f9e8 	bl	8002004 <_ZN3EKF7_addmatEPKfS1_Pfii>
    _float_t* HPHtRinv = new _float_t[EKF_M * EKF_M];
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	6892      	ldr	r2, [r2, #8]
 8001c3c:	fb02 f303 	mul.w	r3, r2, r3
 8001c40:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d201      	bcs.n	8001c4c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x19a>
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	e001      	b.n	8001c50 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x19e>
 8001c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c50:	4618      	mov	r0, r3
 8001c52:	f008 ffcd 	bl	800abf0 <_Znaj>
 8001c56:	4603      	mov	r3, r0
 8001c58:	61fb      	str	r3, [r7, #28]
    if (!invert(HpHtR, HPHtRinv)) {
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	6a39      	ldr	r1, [r7, #32]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 fd1d 	bl	800269e <_ZN3EKF6invertEPKfPf>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f083 0301 	eor.w	r3, r3, #1
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d02b      	beq.n	8001cc8 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x216>
        delete[] G;
 8001c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1ca>
 8001c76:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001c78:	f008 ffb8 	bl	800abec <_ZdaPv>
        delete[] Ht;
 8001c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1d6>
 8001c82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001c84:	f008 ffb2 	bl	800abec <_ZdaPv>
        delete[] PHt;
 8001c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1e2>
 8001c8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001c90:	f008 ffac 	bl	800abec <_ZdaPv>
        delete[] HP;
 8001c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1ee>
 8001c9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c9c:	f008 ffa6 	bl	800abec <_ZdaPv>
        delete[] HpHt;
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1fa>
 8001ca6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ca8:	f008 ffa0 	bl	800abec <_ZdaPv>
        delete[] HpHtR;
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x206>
 8001cb2:	6a38      	ldr	r0, [r7, #32]
 8001cb4:	f008 ff9a 	bl	800abec <_ZdaPv>
        delete[] HPHtRinv;
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x212>
 8001cbe:	69f8      	ldr	r0, [r7, #28]
 8001cc0:	f008 ff94 	bl	800abec <_ZdaPv>
        return false;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e0b1      	b.n	8001e2c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x37a>
    }
    _mulmat(PHt, HPHtRinv, G, EKF_N, EKF_M, EKF_M);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	6892      	ldr	r2, [r2, #8]
 8001cd0:	68f9      	ldr	r1, [r7, #12]
 8001cd2:	6889      	ldr	r1, [r1, #8]
 8001cd4:	9102      	str	r1, [sp, #8]
 8001cd6:	9201      	str	r2, [sp, #4]
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 f8a7 	bl	8001e34 <_ZN3EKF7_mulmatEPKfS1_Pfiii>

    // \hat{x}_k = \hat{x_k} + G_k(z_k - h(\hat{x}_k))
    _float_t* z_hx = new _float_t[EKF_M];
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d201      	bcs.n	8001cf6 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x244>
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	e001      	b.n	8001cfa <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x248>
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f008 ff78 	bl	800abf0 <_Znaj>
 8001d00:	4603      	mov	r3, r0
 8001d02:	61bb      	str	r3, [r7, #24]
    _sub(z, hx, z_hx, EKF_M);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f000 fc98 	bl	8002646 <_ZN3EKF4_subEPKfS1_Pfi>
    _float_t* Gz_hx = new _float_t[EKF_N];
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d201      	bcs.n	8001d26 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x274>
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	e001      	b.n	8001d2a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x278>
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f008 ff60 	bl	800abf0 <_Znaj>
 8001d30:	4603      	mov	r3, r0
 8001d32:	617b      	str	r3, [r7, #20]
    _mulvec(G, z_hx, Gz_hx, EKF_N, EKF_M);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	6892      	ldr	r2, [r2, #8]
 8001d3c:	9201      	str	r2, [sp, #4]
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f8dc 	bl	8001f04 <_ZN3EKF7_mulvecEPKfS1_Pfii>
    _addvec(ekf->x, Gz_hx, ekf->x, EKF_N);
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	6819      	ldr	r1, [r3, #0]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 fc45 	bl	80025ee <_ZN3EKF7_addvecEPKfS1_Pfi>

    // P_k = (I - G_k H_k) P_k
    _float_t* GH = new _float_t[EKF_N * EKF_N];
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	6852      	ldr	r2, [r2, #4]
 8001d6c:	fb02 f303 	mul.w	r3, r2, r3
 8001d70:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d201      	bcs.n	8001d7c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x2ca>
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	e001      	b.n	8001d80 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x2ce>
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d80:	4618      	mov	r0, r3
 8001d82:	f008 ff35 	bl	800abf0 <_Znaj>
 8001d86:	4603      	mov	r3, r0
 8001d88:	613b      	str	r3, [r7, #16]
    _mulmat(G, H, GH, EKF_N, EKF_M, EKF_N);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	6892      	ldr	r2, [r2, #8]
 8001d92:	68f9      	ldr	r1, [r7, #12]
 8001d94:	6849      	ldr	r1, [r1, #4]
 8001d96:	9102      	str	r1, [sp, #8]
 8001d98:	9201      	str	r2, [sp, #4]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001da0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f846 	bl	8001e34 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    ekf_update_step3(ekf, GH);
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f7ff fe30 	bl	8001a12 <_ZN3EKF16ekf_update_step3EP5ekf_tPf>

    delete[] G;
 8001db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x30c>
 8001db8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001dba:	f008 ff17 	bl	800abec <_ZdaPv>
    delete[] Ht;
 8001dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x318>
 8001dc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001dc6:	f008 ff11 	bl	800abec <_ZdaPv>
    delete[] PHt;
 8001dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x324>
 8001dd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001dd2:	f008 ff0b 	bl	800abec <_ZdaPv>
    delete[] HP;
 8001dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x330>
 8001ddc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001dde:	f008 ff05 	bl	800abec <_ZdaPv>
    delete[] HpHt;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x33c>
 8001de8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001dea:	f008 feff 	bl	800abec <_ZdaPv>
    delete[] HpHtR;
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x348>
 8001df4:	6a38      	ldr	r0, [r7, #32]
 8001df6:	f008 fef9 	bl	800abec <_ZdaPv>
    delete[] HPHtRinv;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x354>
 8001e00:	69f8      	ldr	r0, [r7, #28]
 8001e02:	f008 fef3 	bl	800abec <_ZdaPv>
    delete[] z_hx;
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x360>
 8001e0c:	69b8      	ldr	r0, [r7, #24]
 8001e0e:	f008 feed 	bl	800abec <_ZdaPv>
    delete[] Gz_hx;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x36c>
 8001e18:	6978      	ldr	r0, [r7, #20]
 8001e1a:	f008 fee7 	bl	800abec <_ZdaPv>
    delete[] GH;
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x378>
 8001e24:	6938      	ldr	r0, [r7, #16]
 8001e26:	f008 fee1 	bl	800abec <_ZdaPv>

    // success
    return true;
 8001e2a:	2301      	movs	r3, #1
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3738      	adds	r7, #56	@ 0x38
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <_ZN3EKF7_mulmatEPKfS1_Pfiii>:
        const _float_t * b,
        _float_t * c,
        const int arows,
        const int acols,
        const int bcols)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	@ 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
    for (int i=0; i<arows; ++i) {
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	e052      	b.n	8001eee <_ZN3EKF7_mulmatEPKfS1_Pfiii+0xba>
        for (int j=0; j<bcols; ++j) {
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	e048      	b.n	8001ee0 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0xac>
            c[i*bcols+j] = 0;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e52:	fb03 f202 	mul.w	r2, r3, r2
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
            for (int k=0; k<acols; ++k) {
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	e032      	b.n	8001ed2 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x9e>
                c[i*bcols+j] += a[i*acols+k] * b[k*bcols+j];
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e70:	fb03 f202 	mul.w	r2, r3, r2
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	ed93 7a00 	vldr	s14, [r3]
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e86:	fb03 f202 	mul.w	r2, r3, r2
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	4413      	add	r3, r2
 8001e94:	edd3 6a00 	vldr	s13, [r3]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e9c:	fb03 f202 	mul.w	r2, r3, r2
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001eb6:	fb03 f202 	mul.w	r2, r3, r2
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec8:	edc3 7a00 	vstr	s15, [r3]
            for (int k=0; k<acols; ++k) {
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	dbc8      	blt.n	8001e6c <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x38>
        for (int j=0; j<bcols; ++j) {
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	3301      	adds	r3, #1
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	dbb2      	blt.n	8001e4e <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x1a>
    for (int i=0; i<arows; ++i) {
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	3301      	adds	r3, #1
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dba8      	blt.n	8001e48 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x14>
            }
        }
    }
}
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	3724      	adds	r7, #36	@ 0x24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <_ZN3EKF7_mulvecEPKfS1_Pfii>:
        const _float_t * a,
        const _float_t * x,
        _float_t * y,
        const int m,
        const int n)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	e034      	b.n	8001f82 <_ZN3EKF7_mulvecEPKfS1_Pfii+0x7e>
        y[i] = 0;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
        for (int j=0; j<n; ++j)
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	e023      	b.n	8001f74 <_ZN3EKF7_mulvecEPKfS1_Pfii+0x70>
            y[i] += x[j] * a[i*n+j];
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	ed93 7a00 	vldr	s14, [r3]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	edd3 6a00 	vldr	s13, [r3]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f48:	fb03 f202 	mul.w	r2, r3, r2
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	4413      	add	r3, r2
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6a:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	3301      	adds	r3, #1
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	dbd7      	blt.n	8001f2c <_ZN3EKF7_mulvecEPKfS1_Pfii+0x28>
    for (int i=0; i<m; ++i) {
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	dbc6      	blt.n	8001f18 <_ZN3EKF7_mulvecEPKfS1_Pfii+0x14>
    }
}
 8001f8a:	bf00      	nop
 8001f8c:	bf00      	nop
 8001f8e:	371c      	adds	r7, #28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <_ZN3EKF10_transposeEPKfPfii>:

/// @private
 void EKF::_transpose(
        const _float_t * a, _float_t * at, const int m, const int n)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	e020      	b.n	8001fee <_ZN3EKF10_transposeEPKfPfii+0x56>
        for (int j=0; j<n; ++j) {
 8001fac:	2300      	movs	r3, #0
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	e016      	b.n	8001fe0 <_ZN3EKF10_transposeEPKfPfii+0x48>
            at[j*m+i] = a[i*n+j];
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	6a3a      	ldr	r2, [r7, #32]
 8001fb6:	fb03 f202 	mul.w	r2, r3, r2
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	441a      	add	r2, r3
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	6839      	ldr	r1, [r7, #0]
 8001fc8:	fb03 f101 	mul.w	r1, r3, r1
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	440b      	add	r3, r1
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	440b      	add	r3, r1
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	601a      	str	r2, [r3, #0]
        for (int j=0; j<n; ++j) {
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	dbe4      	blt.n	8001fb2 <_ZN3EKF10_transposeEPKfPfii+0x1a>
    for (int i=0; i<m; ++i)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3301      	adds	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	dbda      	blt.n	8001fac <_ZN3EKF10_transposeEPKfPfii+0x14>
        }
}
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <_ZN3EKF7_addmatEPKfS1_Pfii>:

/// @private
 void EKF::_addmat(
        const _float_t * a, const _float_t * b, _float_t * c,
        const int m, const int n)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	e02f      	b.n	8002078 <_ZN3EKF7_addmatEPKfS1_Pfii+0x74>
        for (int j=0; j<n; ++j) {
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	e025      	b.n	800206a <_ZN3EKF7_addmatEPKfS1_Pfii+0x66>
            c[i*n+j] = a[i*n+j] + b[i*n+j];
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002022:	fb03 f202 	mul.w	r2, r3, r2
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	4413      	add	r3, r2
 8002030:	ed93 7a00 	vldr	s14, [r3]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002038:	fb03 f202 	mul.w	r2, r3, r2
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800204e:	fb03 f202 	mul.w	r2, r3, r2
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	4413      	add	r3, r2
 800205c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002060:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j) {
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	3301      	adds	r3, #1
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	429a      	cmp	r2, r3
 8002070:	dbd5      	blt.n	800201e <_ZN3EKF7_addmatEPKfS1_Pfii+0x1a>
    for (int i=0; i<m; ++i) {
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	3301      	adds	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	429a      	cmp	r2, r3
 800207e:	dbcb      	blt.n	8002018 <_ZN3EKF7_addmatEPKfS1_Pfii+0x14>
        }
    }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <_ZN3EKF7_negateEPfii>:

/// @private
 void EKF::_negate(_float_t * a, const int m, const int n)
{
 800208e:	b480      	push	{r7}
 8002090:	b087      	sub	sp, #28
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	e024      	b.n	80020ec <_ZN3EKF7_negateEPfii+0x5e>
        for (int j=0; j<n; ++j) {
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	e01a      	b.n	80020de <_ZN3EKF7_negateEPfii+0x50>
            a[i*n+j] = -a[i*n+j];
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	fb03 f202 	mul.w	r2, r3, r2
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	4413      	add	r3, r2
 80020ba:	edd3 7a00 	vldr	s15, [r3]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	fb03 f202 	mul.w	r2, r3, r2
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	4413      	add	r3, r2
 80020d0:	eef1 7a67 	vneg.f32	s15, s15
 80020d4:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j) {
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	3301      	adds	r3, #1
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	dbe0      	blt.n	80020a8 <_ZN3EKF7_negateEPfii+0x1a>
    for (int i=0; i<m; ++i) {
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	3301      	adds	r3, #1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	dbd6      	blt.n	80020a2 <_ZN3EKF7_negateEPfii+0x14>
        }
    }
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <_ZN3EKF7_addeyeEPfi>:

/// @private
 void EKF::_addeye(_float_t * a, const int n)
{
 8002102:	b480      	push	{r7}
 8002104:	b087      	sub	sp, #28
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
    for (int i=0; i<n; ++i) {
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	e01c      	b.n	800214e <_ZN3EKF7_addeyeEPfi+0x4c>
        a[i*n+i] += 1;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	fb03 f202 	mul.w	r2, r3, r2
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	4413      	add	r3, r2
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	fb03 f202 	mul.w	r2, r3, r2
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	4413      	add	r3, r2
 800213c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002140:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002144:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0; i<n; ++i) {
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3301      	adds	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	429a      	cmp	r2, r3
 8002154:	dbde      	blt.n	8002114 <_ZN3EKF7_addeyeEPfi+0x12>
    }
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_ZN3EKF8_choldc1EPfS0_i>:
/* Cholesky-decomposition matrix-inversion code, adapated from
http://jean-pierre.moreau.pagesperso-orange.fr/Cplus/_choles_cpp.txt */

/// @private
 int EKF::_choldc1(_float_t * a, _float_t * p, const int n)
{
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b089      	sub	sp, #36	@ 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < n; i++) {
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	e06e      	b.n	8002256 <_ZN3EKF8_choldc1EPfS0_i+0xf2>
        for (int j = i; j < n; j++) {
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	e064      	b.n	8002248 <_ZN3EKF8_choldc1EPfS0_i+0xe4>
            _float_t sum = a[i*n+j];
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	fb03 f202 	mul.w	r2, r3, r2
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	4413      	add	r3, r2
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	617b      	str	r3, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	3b01      	subs	r3, #1
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	e020      	b.n	80021de <_ZN3EKF8_choldc1EPfS0_i+0x7a>
                sum -= a[i*n+k] * a[j*n+k];
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	fb03 f202 	mul.w	r2, r3, r2
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	4413      	add	r3, r2
 80021ae:	ed93 7a00 	vldr	s14, [r3]
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	fb03 f202 	mul.w	r2, r3, r2
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	4413      	add	r3, r2
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80021d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d4:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	3b01      	subs	r3, #1
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	dadb      	bge.n	800219c <_ZN3EKF8_choldc1EPfS0_i+0x38>
            }
            if (i == j) {
 80021e4:	69fa      	ldr	r2, [r7, #28]
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d115      	bne.n	8002218 <_ZN3EKF8_choldc1EPfS0_i+0xb4>
                if (sum <= 0) {
 80021ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80021f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f8:	d801      	bhi.n	80021fe <_ZN3EKF8_choldc1EPfS0_i+0x9a>
                    return 1; /* error */
 80021fa:	2301      	movs	r3, #1
 80021fc:	e030      	b.n	8002260 <_ZN3EKF8_choldc1EPfS0_i+0xfc>
                }
                p[i] = sqrt(sum);
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	18d4      	adds	r4, r2, r3
 8002206:	ed97 0a05 	vldr	s0, [r7, #20]
 800220a:	f7ff fa97 	bl	800173c <_ZSt4sqrtf>
 800220e:	eef0 7a40 	vmov.f32	s15, s0
 8002212:	edc4 7a00 	vstr	s15, [r4]
 8002216:	e014      	b.n	8002242 <_ZN3EKF8_choldc1EPfS0_i+0xde>
            }
            else {
                a[j*n+i] = sum / p[i];
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	4413      	add	r3, r2
 8002220:	ed93 7a00 	vldr	s14, [r3]
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	fb03 f202 	mul.w	r2, r3, r2
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	4413      	add	r3, r2
 8002236:	edd7 6a05 	vldr	s13, [r7, #20]
 800223a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800223e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i; j < n; j++) {
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	3301      	adds	r3, #1
 8002246:	61bb      	str	r3, [r7, #24]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	db96      	blt.n	800217e <_ZN3EKF8_choldc1EPfS0_i+0x1a>
    for (int i = 0; i < n; i++) {
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	3301      	adds	r3, #1
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	db8c      	blt.n	8002178 <_ZN3EKF8_choldc1EPfS0_i+0x14>
            }
        }
    }

    return 0; // success:w
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3724      	adds	r7, #36	@ 0x24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd90      	pop	{r4, r7, pc}

08002268 <_ZN3EKF9_choldcslEPKfPfS2_i>:

/// @private
 int EKF::_choldcsl(const _float_t * A, _float_t * a, _float_t * p, const int n)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	@ 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < n; i++) {
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	@ 0x24
 800227a:	e020      	b.n	80022be <_ZN3EKF9_choldcslEPKfPfS2_i+0x56>
        for (int j = 0; j < n; j++) {
 800227c:	2300      	movs	r3, #0
 800227e:	623b      	str	r3, [r7, #32]
 8002280:	e016      	b.n	80022b0 <_ZN3EKF9_choldcslEPKfPfS2_i+0x48>
            a[i*n+j] = A[i*n+j];
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002286:	fb03 f202 	mul.w	r2, r3, r2
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	441a      	add	r2, r3
 8002294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002296:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002298:	fb03 f101 	mul.w	r1, r3, r1
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	440b      	add	r3, r1
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	440b      	add	r3, r1
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < n; j++) {
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	3301      	adds	r3, #1
 80022ae:	623b      	str	r3, [r7, #32]
 80022b0:	6a3a      	ldr	r2, [r7, #32]
 80022b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b4:	429a      	cmp	r2, r3
 80022b6:	dbe4      	blt.n	8002282 <_ZN3EKF9_choldcslEPKfPfS2_i+0x1a>
    for (int i = 0; i < n; i++) {
 80022b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ba:	3301      	adds	r3, #1
 80022bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80022be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c2:	429a      	cmp	r2, r3
 80022c4:	dbda      	blt.n	800227c <_ZN3EKF9_choldcslEPKfPfS2_i+0x14>
        }
    }
    if (_choldc1(a, p, n)) {
 80022c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f7ff ff49 	bl	8002164 <_ZN3EKF8_choldc1EPfS0_i>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf14      	ite	ne
 80022d8:	2301      	movne	r3, #1
 80022da:	2300      	moveq	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <_ZN3EKF9_choldcslEPKfPfS2_i+0x7e>
        return 1;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e06a      	b.n	80023bc <_ZN3EKF9_choldcslEPKfPfS2_i+0x154>
    }
    for (int i = 0; i < n; i++) {
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	e062      	b.n	80023b2 <_ZN3EKF9_choldcslEPKfPfS2_i+0x14a>
        a[i*n+i] = 1 / p[i];
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	ed93 7a00 	vldr	s14, [r3]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022fc:	fb03 f202 	mul.w	r2, r3, r2
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800230e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002312:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3301      	adds	r3, #1
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	e042      	b.n	80023a4 <_ZN3EKF9_choldcslEPKfPfS2_i+0x13c>
            _float_t sum = 0;
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
            for (int k = i; k < j; k++) {
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	e020      	b.n	800236c <_ZN3EKF9_choldcslEPKfPfS2_i+0x104>
                sum -= a[j*n+k] * a[k*n+i];
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800232e:	fb03 f202 	mul.w	r2, r3, r2
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	4413      	add	r3, r2
 800233c:	ed93 7a00 	vldr	s14, [r3]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002344:	fb03 f202 	mul.w	r2, r3, r2
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235a:	ed97 7a05 	vldr	s14, [r7, #20]
 800235e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002362:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i; k < j; k++) {
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	3301      	adds	r3, #1
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	429a      	cmp	r2, r3
 8002372:	dbda      	blt.n	800232a <_ZN3EKF9_choldcslEPKfPfS2_i+0xc2>
            }
            a[j*n+i] = sum / p[j];
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	4413      	add	r3, r2
 800237c:	ed93 7a00 	vldr	s14, [r3]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002384:	fb03 f202 	mul.w	r2, r3, r2
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	4413      	add	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	edd7 6a05 	vldr	s13, [r7, #20]
 8002396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61bb      	str	r3, [r7, #24]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a8:	429a      	cmp	r2, r3
 80023aa:	dbb8      	blt.n	800231e <_ZN3EKF9_choldcslEPKfPfS2_i+0xb6>
    for (int i = 0; i < n; i++) {
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	3301      	adds	r3, #1
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b6:	429a      	cmp	r2, r3
 80023b8:	db98      	blt.n	80022ec <_ZN3EKF9_choldcslEPKfPfS2_i+0x84>
        }
    }

    return 0; // success
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3728      	adds	r7, #40	@ 0x28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_ZN3EKF7_cholslEPKfPfS2_i>:

/// @private
 int EKF::_cholsl(const _float_t * A, _float_t * a, _float_t * p, const int n)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08e      	sub	sp, #56	@ 0x38
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
    if (_choldcsl(A,a,p,n)) {
 80023d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f7ff ff43 	bl	8002268 <_ZN3EKF9_choldcslEPKfPfS2_i>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf14      	ite	ne
 80023e8:	2301      	movne	r3, #1
 80023ea:	2300      	moveq	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <_ZN3EKF7_cholslEPKfPfS2_i+0x32>
        return 1;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e0f7      	b.n	80025e6 <_ZN3EKF7_cholslEPKfPfS2_i+0x222>
    }

    for (int i = 0; i < n; i++) {
 80023f6:	2300      	movs	r3, #0
 80023f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023fa:	e019      	b.n	8002430 <_ZN3EKF7_cholslEPKfPfS2_i+0x6c>
        for (int j = i + 1; j < n; j++) {
 80023fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fe:	3301      	adds	r3, #1
 8002400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002402:	e00e      	b.n	8002422 <_ZN3EKF7_cholslEPKfPfS2_i+0x5e>
            a[i*n+j] = 0.0;
 8002404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002406:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002408:	fb03 f202 	mul.w	r2, r3, r2
 800240c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
        for (int j = i + 1; j < n; j++) {
 800241c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241e:	3301      	adds	r3, #1
 8002420:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002422:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002426:	429a      	cmp	r2, r3
 8002428:	dbec      	blt.n	8002404 <_ZN3EKF7_cholslEPKfPfS2_i+0x40>
    for (int i = 0; i < n; i++) {
 800242a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800242c:	3301      	adds	r3, #1
 800242e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002434:	429a      	cmp	r2, r3
 8002436:	dbe1      	blt.n	80023fc <_ZN3EKF7_cholslEPKfPfS2_i+0x38>
        }
    }
    for (int i = 0; i < n; i++) {
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
 800243c:	e0a5      	b.n	800258a <_ZN3EKF7_cholslEPKfPfS2_i+0x1c6>
        a[i*n+i] *= a[i*n+i];
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002442:	fb03 f202 	mul.w	r2, r3, r2
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	ed93 7a00 	vldr	s14, [r3]
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002458:	fb03 f202 	mul.w	r2, r3, r2
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800246e:	fb03 f202 	mul.w	r2, r3, r2
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	4413      	add	r3, r2
 800247c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002480:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	3301      	adds	r3, #1
 8002488:	623b      	str	r3, [r7, #32]
 800248a:	e032      	b.n	80024f2 <_ZN3EKF7_cholslEPKfPfS2_i+0x12e>
            a[i*n+i] += a[k*n+i] * a[k*n+i];
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002490:	fb03 f202 	mul.w	r2, r3, r2
 8002494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	ed93 7a00 	vldr	s14, [r3]
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024a6:	fb03 f202 	mul.w	r2, r3, r2
 80024aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4413      	add	r3, r2
 80024b4:	edd3 6a00 	vldr	s13, [r3]
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024bc:	fb03 f202 	mul.w	r2, r3, r2
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	edd3 7a00 	vldr	s15, [r3]
 80024ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024d6:	fb03 f202 	mul.w	r2, r3, r2
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	4413      	add	r3, r2
 80024e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e8:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	3301      	adds	r3, #1
 80024f0:	623b      	str	r3, [r7, #32]
 80024f2:	6a3a      	ldr	r2, [r7, #32]
 80024f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f6:	429a      	cmp	r2, r3
 80024f8:	dbc8      	blt.n	800248c <_ZN3EKF7_cholslEPKfPfS2_i+0xc8>
        }
        for (int j = i + 1; j < n; j++) {
 80024fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fc:	3301      	adds	r3, #1
 80024fe:	61fb      	str	r3, [r7, #28]
 8002500:	e03c      	b.n	800257c <_ZN3EKF7_cholslEPKfPfS2_i+0x1b8>
            for (int k = j; k < n; k++) {
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	e032      	b.n	800256e <_ZN3EKF7_cholslEPKfPfS2_i+0x1aa>
                a[i*n+j] += a[k*n+i] * a[k*n+j];
 8002508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800250c:	fb03 f202 	mul.w	r2, r3, r2
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	ed93 7a00 	vldr	s14, [r3]
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002522:	fb03 f202 	mul.w	r2, r3, r2
 8002526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	edd3 6a00 	vldr	s13, [r3]
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002538:	fb03 f202 	mul.w	r2, r3, r2
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	edd3 7a00 	vldr	s15, [r3]
 800254a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002552:	fb03 f202 	mul.w	r2, r3, r2
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	4413      	add	r3, r2
 8002560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002564:	edc3 7a00 	vstr	s15, [r3]
            for (int k = j; k < n; k++) {
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	3301      	adds	r3, #1
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002572:	429a      	cmp	r2, r3
 8002574:	dbc8      	blt.n	8002508 <_ZN3EKF7_cholslEPKfPfS2_i+0x144>
        for (int j = i + 1; j < n; j++) {
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3301      	adds	r3, #1
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	69fa      	ldr	r2, [r7, #28]
 800257e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002580:	429a      	cmp	r2, r3
 8002582:	dbbe      	blt.n	8002502 <_ZN3EKF7_cholslEPKfPfS2_i+0x13e>
    for (int i = 0; i < n; i++) {
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	3301      	adds	r3, #1
 8002588:	627b      	str	r3, [r7, #36]	@ 0x24
 800258a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800258c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800258e:	429a      	cmp	r2, r3
 8002590:	f6ff af55 	blt.w	800243e <_ZN3EKF7_cholslEPKfPfS2_i+0x7a>
            }
        }
    }
    for (int i = 0; i < n; i++) {
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	e020      	b.n	80025dc <_ZN3EKF7_cholslEPKfPfS2_i+0x218>
        for (int j = 0; j < i; j++) {
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	e016      	b.n	80025ce <_ZN3EKF7_cholslEPKfPfS2_i+0x20a>
            a[i*n+j] = a[j*n+i];
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025a4:	fb03 f202 	mul.w	r2, r3, r2
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	441a      	add	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025b6:	fb03 f101 	mul.w	r1, r3, r1
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	440b      	add	r3, r1
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	440b      	add	r3, r1
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < i; j++) {
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	3301      	adds	r3, #1
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	dbe4      	blt.n	80025a0 <_ZN3EKF7_cholslEPKfPfS2_i+0x1dc>
    for (int i = 0; i < n; i++) {
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	3301      	adds	r3, #1
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e0:	429a      	cmp	r2, r3
 80025e2:	dbda      	blt.n	800259a <_ZN3EKF7_cholslEPKfPfS2_i+0x1d6>
        }
    }

    return 0; // success
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3730      	adds	r7, #48	@ 0x30
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <_ZN3EKF7_addvecEPKfS1_Pfi>:

/// @private
 void EKF::_addvec(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b087      	sub	sp, #28
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e016      	b.n	8002630 <_ZN3EKF7_addvecEPKfS1_Pfi+0x42>
        c[j] = a[j] + b[j];
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	4413      	add	r3, r2
 800260a:	ed93 7a00 	vldr	s14, [r3]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	edd3 7a00 	vldr	s15, [r3]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	4413      	add	r3, r2
 8002622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002626:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	3301      	adds	r3, #1
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	429a      	cmp	r2, r3
 8002636:	dbe4      	blt.n	8002602 <_ZN3EKF7_addvecEPKfS1_Pfi+0x14>
    }
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	371c      	adds	r7, #28
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <_ZN3EKF4_subEPKfS1_Pfi>:

/// @private
 void EKF::_sub(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 8002646:	b480      	push	{r7}
 8002648:	b087      	sub	sp, #28
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	e016      	b.n	8002688 <_ZN3EKF4_subEPKfS1_Pfi+0x42>
        c[j] = a[j] - b[j];
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	4413      	add	r3, r2
 8002662:	ed93 7a00 	vldr	s14, [r3]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	edd3 7a00 	vldr	s15, [r3]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	4413      	add	r3, r2
 800267a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800267e:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3301      	adds	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	429a      	cmp	r2, r3
 800268e:	dbe4      	blt.n	800265a <_ZN3EKF4_subEPKfS1_Pfi+0x14>
    }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <_ZN3EKF6invertEPKfPf>:

/// @private
 bool EKF::invert(const _float_t * a, _float_t * ainv)
{
 800269e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026a2:	b089      	sub	sp, #36	@ 0x24
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
    _float_t tmp[EKF_M];

    return _cholsl(a, ainv, tmp, EKF_M) == 0;
}
 80026ac:	466b      	mov	r3, sp
 80026ae:	461e      	mov	r6, r3
    _float_t tmp[EKF_M];
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6899      	ldr	r1, [r3, #8]
 80026b4:	1e4b      	subs	r3, r1, #1
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	460a      	mov	r2, r1
 80026ba:	2300      	movs	r3, #0
 80026bc:	4690      	mov	r8, r2
 80026be:	4699      	mov	r9, r3
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80026cc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80026d0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80026d4:	460a      	mov	r2, r1
 80026d6:	2300      	movs	r3, #0
 80026d8:	4614      	mov	r4, r2
 80026da:	461d      	mov	r5, r3
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	016b      	lsls	r3, r5, #5
 80026e6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80026ea:	0162      	lsls	r2, r4, #5
 80026ec:	460b      	mov	r3, r1
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	3307      	adds	r3, #7
 80026f2:	08db      	lsrs	r3, r3, #3
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	ebad 0d03 	sub.w	sp, sp, r3
 80026fa:	ab02      	add	r3, sp, #8
 80026fc:	3303      	adds	r3, #3
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	613b      	str	r3, [r7, #16]
    return _cholsl(a, ainv, tmp, EKF_M) == 0;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7ff fe57 	bl	80023c4 <_ZN3EKF7_cholslEPKfPfS2_i>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	bf0c      	ite	eq
 800271c:	2301      	moveq	r3, #1
 800271e:	2300      	movne	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	46b5      	mov	sp, r6
}
 8002724:	4618      	mov	r0, r3
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800272e <_ZSt4fmodff>:
  { return __builtin_fmodf(__x, __y); }
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	ed87 0a01 	vstr	s0, [r7, #4]
 8002738:	edc7 0a00 	vstr	s1, [r7]
 800273c:	edd7 0a00 	vldr	s1, [r7]
 8002740:	ed97 0a01 	vldr	s0, [r7, #4]
 8002744:	f008 fae4 	bl	800ad10 <fmodf>
 8002748:	eef0 7a40 	vmov.f32	s15, s0
 800274c:	eeb0 0a67 	vmov.f32	s0, s15
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <_Z4_sinf>:


// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a){
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0,804,1608,2411,3212,4011,4808,5602,6393,7180,7962,8740,9512,10279,11039,11793,12540,13279,14010,14733,15447,16151,16846,17531,18205,18868,19520,20160,20788,21403,22006,22595,23170,23732,24279,24812,25330,25833,26320,26791,27246,27684,28106,28511,28899,29269,29622,29957,30274,30572,30853,31114,31357,31581,31786,31972,32138,32286,32413,32522,32610,32679,32729,32758,32768};
  unsigned int i = (unsigned int)(a * (64*4*256.0f/_2PI));
 8002762:	edd7 7a01 	vldr	s15, [r7, #4]
 8002766:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800283c <_Z4_sinf+0xe4>
 800276a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800276e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002772:	ee17 3a90 	vmov	r3, s15
 8002776:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	0a1b      	lsrs	r3, r3, #8
 8002782:	b2db      	uxtb	r3, r3
 8002784:	60fb      	str	r3, [r7, #12]
  if (i < 64) {
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b3f      	cmp	r3, #63	@ 0x3f
 800278a:	d80b      	bhi.n	80027a4 <_Z4_sinf+0x4c>
    t1 = sine_array[i]; t2 = sine_array[i+1];
 800278c:	4a2c      	ldr	r2, [pc, #176]	@ (8002840 <_Z4_sinf+0xe8>)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	3301      	adds	r3, #1
 800279a:	4a29      	ldr	r2, [pc, #164]	@ (8002840 <_Z4_sinf+0xe8>)
 800279c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	e033      	b.n	800280c <_Z4_sinf+0xb4>
  }
  else if(i < 128) {
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80027a8:	d80e      	bhi.n	80027c8 <_Z4_sinf+0x70>
    t1 = sine_array[128 - i]; t2 = sine_array[127 - i];
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80027b0:	4a23      	ldr	r2, [pc, #140]	@ (8002840 <_Z4_sinf+0xe8>)
 80027b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80027be:	4a20      	ldr	r2, [pc, #128]	@ (8002840 <_Z4_sinf+0xe8>)
 80027c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	e021      	b.n	800280c <_Z4_sinf+0xb4>
  }
  else if(i < 192) {
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2bbf      	cmp	r3, #191	@ 0xbf
 80027cc:	d80e      	bhi.n	80027ec <_Z4_sinf+0x94>
    t1 = -sine_array[-128 + i]; t2 = -sine_array[-127 + i];
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	3b80      	subs	r3, #128	@ 0x80
 80027d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002840 <_Z4_sinf+0xe8>)
 80027d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027d8:	425b      	negs	r3, r3
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3b7f      	subs	r3, #127	@ 0x7f
 80027e0:	4a17      	ldr	r2, [pc, #92]	@ (8002840 <_Z4_sinf+0xe8>)
 80027e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027e6:	425b      	negs	r3, r3
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	e00f      	b.n	800280c <_Z4_sinf+0xb4>
  }
  else {
    t1 = -sine_array[256 - i]; t2 = -sine_array[255 - i];
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80027f2:	4a13      	ldr	r2, [pc, #76]	@ (8002840 <_Z4_sinf+0xe8>)
 80027f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027f8:	425b      	negs	r3, r3
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8002802:	4a0f      	ldr	r2, [pc, #60]	@ (8002840 <_Z4_sinf+0xe8>)
 8002804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002808:	425b      	negs	r3, r3
 800280a:	613b      	str	r3, [r7, #16]
  }
  return (1.0f/32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	fb02 f303 	mul.w	r3, r2, r3
 8002818:	121a      	asrs	r2, r3, #8
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	4413      	add	r3, r2
 800281e:	ee07 3a90 	vmov	s15, r3
 8002822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002826:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002844 <_Z4_sinf+0xec>
 800282a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800282e:	eeb0 0a67 	vmov.f32	s0, s15
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	4622f983 	.word	0x4622f983
 8002840:	20000014 	.word	0x20000014
 8002844:	38000000 	.word	0x38000000

08002848 <_Z4_cosf>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a){
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 8002852:	edd7 7a01 	vldr	s15, [r7, #4]
 8002856:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80028a0 <_Z4_cosf+0x58>
 800285a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800285e:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 8002862:	edd7 7a03 	vldr	s15, [r7, #12]
 8002866:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80028a4 <_Z4_cosf+0x5c>
 800286a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800286e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002872:	dd06      	ble.n	8002882 <_Z4_cosf+0x3a>
 8002874:	edd7 7a03 	vldr	s15, [r7, #12]
 8002878:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80028a4 <_Z4_cosf+0x5c>
 800287c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002880:	e001      	b.n	8002886 <_Z4_cosf+0x3e>
 8002882:	edd7 7a03 	vldr	s15, [r7, #12]
 8002886:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800288a:	ed97 0a03 	vldr	s0, [r7, #12]
 800288e:	f7ff ff63 	bl	8002758 <_Z4_sinf>
 8002892:	eef0 7a40 	vmov.f32	s15, s0
}
 8002896:	eeb0 0a67 	vmov.f32	s0, s15
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	3fc90fdb 	.word	0x3fc90fdb
 80028a4:	40c90fdb 	.word	0x40c90fdb

080028a8 <_Z15_normalizeAnglef>:
    return r;
  }


// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 80028b2:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 80028ec <_Z15_normalizeAnglef+0x44>
 80028b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80028ba:	f7ff ff38 	bl	800272e <_ZSt4fmodff>
 80028be:	ed87 0a03 	vstr	s0, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 80028c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80028c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ce:	db02      	blt.n	80028d6 <_Z15_normalizeAnglef+0x2e>
 80028d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80028d4:	e005      	b.n	80028e2 <_Z15_normalizeAnglef+0x3a>
 80028d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80028da:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 80028ec <_Z15_normalizeAnglef+0x44>
 80028de:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80028e2:	eeb0 0a67 	vmov.f32	s0, s15
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40c90fdb 	.word	0x40c90fdb

080028f0 <_Z16_electricalAnglefi>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs) {
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80028fa:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	ee07 3a90 	vmov	s15, r3
 8002902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002906:	edd7 7a01 	vldr	s15, [r7, #4]
 800290a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800290e:	eeb0 0a67 	vmov.f32	s0, s15
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <_Z11_sqrtApproxf>:

// square root approximation function using
// https://reprap.org/forum/read.php?147,219210
// https://en.wikipedia.org/wiki/Fast_inverse_square_root
__attribute__((weak)) float _sqrtApprox(float number) {//low in fat
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	ed87 0a01 	vstr	s0, [r7, #4]
  union {
    float    f;
    uint32_t i;
  } y = { .f = number };
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	60fb      	str	r3, [r7, #12]
  y.i = 0x5f375a86 - ( y.i >> 1 );
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	085a      	lsrs	r2, r3, #1
 800292e:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <_Z11_sqrtApproxf+0x34>)
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
  return number * y.f;
 8002934:	ed97 7a03 	vldr	s14, [r7, #12]
 8002938:	edd7 7a01 	vldr	s15, [r7, #4]
 800293c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002940:	eeb0 0a67 	vmov.f32	s0, s15
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	5f375a86 	.word	0x5f375a86

08002954 <_ZN13LowPassFilterC1Ef>:
 */

#include <lowpass_filter.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU

LowPassFilter::LowPassFilter(float time_constant)
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	ed87 0a00 	vstr	s0, [r7]
    : Tf(time_constant)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	601a      	str	r2, [r3, #0]
    , y_prev(0.0f)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
{
    timestamp_prev = micros();
 800296e:	f000 f873 	bl	8002a58 <_ZN13LowPassFilter6microsEv>
 8002972:	4602      	mov	r2, r0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	605a      	str	r2, [r3, #4]
}
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <_ZN13LowPassFilterclEf>:


float LowPassFilter::operator() (float x)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	ed87 0a00 	vstr	s0, [r7]
    unsigned long timestamp = micros();
 8002990:	f000 f862 	bl	8002a58 <_ZN13LowPassFilter6microsEv>
 8002994:	6138      	str	r0, [r7, #16]
    float dt = (timestamp - timestamp_prev)*1e-6f;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	ee07 3a90 	vmov	s15, r3
 80029a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a6:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002a4c <_ZN13LowPassFilterclEf+0xc8>
 80029aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ae:	edc7 7a05 	vstr	s15, [r7, #20]

    if (dt < 0.0f ) dt = 1e-3f;
 80029b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80029b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029be:	d502      	bpl.n	80029c6 <_ZN13LowPassFilterclEf+0x42>
 80029c0:	4b23      	ldr	r3, [pc, #140]	@ (8002a50 <_ZN13LowPassFilterclEf+0xcc>)
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	e010      	b.n	80029e8 <_ZN13LowPassFilterclEf+0x64>
    else if(dt > 0.3f) {
 80029c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80029ca:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002a54 <_ZN13LowPassFilterclEf+0xd0>
 80029ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d6:	dd07      	ble.n	80029e8 <_ZN13LowPassFilterclEf+0x64>
        y_prev = x;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	609a      	str	r2, [r3, #8]
        timestamp_prev = timestamp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	605a      	str	r2, [r3, #4]
        return x;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	e029      	b.n	8002a3c <_ZN13LowPassFilterclEf+0xb8>
    }

    float alpha = Tf/(Tf + dt);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	edd3 6a00 	vldr	s13, [r3]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	ed93 7a00 	vldr	s14, [r3]
 80029f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80029f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a00:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha*y_prev + (1.0f - alpha)*x;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a1a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a1e:	edd7 7a00 	vldr	s15, [r7]
 8002a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a2a:	edc7 7a02 	vstr	s15, [r7, #8]
    y_prev = y;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	609a      	str	r2, [r3, #8]
    timestamp_prev = timestamp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	605a      	str	r2, [r3, #4]
    return y;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
}
 8002a3c:	ee07 3a90 	vmov	s15, r3
 8002a40:	eeb0 0a67 	vmov.f32	s0, s15
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	358637bd 	.word	0x358637bd
 8002a50:	3a83126f 	.word	0x3a83126f
 8002a54:	3e99999a 	.word	0x3e99999a

08002a58 <_ZN13LowPassFilter6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t LowPassFilter::micros(void) 
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8002a5c:	4b07      	ldr	r3, [pc, #28]	@ (8002a7c <_ZN13LowPassFilter6microsEv+0x24>)
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	4b07      	ldr	r3, [pc, #28]	@ (8002a80 <_ZN13LowPassFilter6microsEv+0x28>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4907      	ldr	r1, [pc, #28]	@ (8002a84 <_ZN13LowPassFilter6microsEv+0x2c>)
 8002a66:	fba1 1303 	umull	r1, r3, r1, r3
 8002a6a:	0c9b      	lsrs	r3, r3, #18
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e0001000 	.word	0xe0001000
 8002a80:	200000c0 	.word	0x200000c0
 8002a84:	431bde83 	.word	0x431bde83

08002a88 <_Z41__static_initialization_and_destruction_0ii>:
PIDController PID_position  {1.5, 0.0, 0.2, 0, velocity_limit};

LowPassFilter LPF_current_q	{0.08f}; // 1 is very slow
LowPassFilter LPF_current_d	{0.08f}; // 1 is very slow
LowPassFilter LPF_position	{0.01}; // 1 is very slow
LowPassFilter LPF_velocity	{0.0};  // 1 is very slow (EKF)
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d158      	bne.n	8002b4a <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d153      	bne.n	8002b4a <_Z41__static_initialization_and_destruction_0ii+0xc2>
PIDController PID_current_d {1.0, 1.0, 0.0, 1000.0, voltage_limit};
 8002aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8002b54 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002aa4:	edd3 7a00 	vldr	s15, [r3]
 8002aa8:	eeb0 2a67 	vmov.f32	s4, s15
 8002aac:	eddf 1a2a 	vldr	s3, [pc, #168]	@ 8002b58 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8002ab0:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8002b5c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002ab4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002ab8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002abc:	4828      	ldr	r0, [pc, #160]	@ (8002b60 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8002abe:	f000 f871 	bl	8002ba4 <_ZN13PIDControllerC1Efffff>
PIDController PID_current_q {1.0, 1.0, 0.0, 1000.0, voltage_limit};
 8002ac2:	4b24      	ldr	r3, [pc, #144]	@ (8002b54 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	eeb0 2a67 	vmov.f32	s4, s15
 8002acc:	eddf 1a22 	vldr	s3, [pc, #136]	@ 8002b58 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8002ad0:	ed9f 1a22 	vldr	s2, [pc, #136]	@ 8002b5c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002ad4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002ad8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002adc:	4821      	ldr	r0, [pc, #132]	@ (8002b64 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002ade:	f000 f861 	bl	8002ba4 <_ZN13PIDControllerC1Efffff>
PIDController PID_velocity  {1.0, 10.0, 0.0, 1000.0, current_limit};
 8002ae2:	4b21      	ldr	r3, [pc, #132]	@ (8002b68 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002ae4:	edd3 7a00 	vldr	s15, [r3]
 8002ae8:	eeb0 2a67 	vmov.f32	s4, s15
 8002aec:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8002b58 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8002af0:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8002b5c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002af4:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8002af8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002afc:	481b      	ldr	r0, [pc, #108]	@ (8002b6c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002afe:	f000 f851 	bl	8002ba4 <_ZN13PIDControllerC1Efffff>
PIDController PID_position  {1.5, 0.0, 0.2, 0, velocity_limit};
 8002b02:	4b1b      	ldr	r3, [pc, #108]	@ (8002b70 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	eeb0 2a67 	vmov.f32	s4, s15
 8002b0c:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8002b5c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002b10:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 8002b74 <_Z41__static_initialization_and_destruction_0ii+0xec>
 8002b14:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8002b5c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002b18:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8002b1c:	4816      	ldr	r0, [pc, #88]	@ (8002b78 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8002b1e:	f000 f841 	bl	8002ba4 <_ZN13PIDControllerC1Efffff>
LowPassFilter LPF_current_q	{0.08f}; // 1 is very slow
 8002b22:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8002b7c <_Z41__static_initialization_and_destruction_0ii+0xf4>
 8002b26:	4816      	ldr	r0, [pc, #88]	@ (8002b80 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8002b28:	f7ff ff14 	bl	8002954 <_ZN13LowPassFilterC1Ef>
LowPassFilter LPF_current_d	{0.08f}; // 1 is very slow
 8002b2c:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8002b7c <_Z41__static_initialization_and_destruction_0ii+0xf4>
 8002b30:	4814      	ldr	r0, [pc, #80]	@ (8002b84 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8002b32:	f7ff ff0f 	bl	8002954 <_ZN13LowPassFilterC1Ef>
LowPassFilter LPF_position	{0.01}; // 1 is very slow
 8002b36:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8002b88 <_Z41__static_initialization_and_destruction_0ii+0x100>
 8002b3a:	4814      	ldr	r0, [pc, #80]	@ (8002b8c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8002b3c:	f7ff ff0a 	bl	8002954 <_ZN13LowPassFilterC1Ef>
LowPassFilter LPF_velocity	{0.0};  // 1 is very slow (EKF)
 8002b40:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8002b5c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002b44:	4812      	ldr	r0, [pc, #72]	@ (8002b90 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8002b46:	f7ff ff05 	bl	8002954 <_ZN13LowPassFilterC1Ef>
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200000b0 	.word	0x200000b0
 8002b58:	447a0000 	.word	0x447a0000
 8002b5c:	00000000 	.word	0x00000000
 8002b60:	2000014c 	.word	0x2000014c
 8002b64:	20000170 	.word	0x20000170
 8002b68:	200000b4 	.word	0x200000b4
 8002b6c:	20000194 	.word	0x20000194
 8002b70:	200000b8 	.word	0x200000b8
 8002b74:	3e4ccccd 	.word	0x3e4ccccd
 8002b78:	200001b8 	.word	0x200001b8
 8002b7c:	3da3d70a 	.word	0x3da3d70a
 8002b80:	200001dc 	.word	0x200001dc
 8002b84:	200001e8 	.word	0x200001e8
 8002b88:	3c23d70a 	.word	0x3c23d70a
 8002b8c:	200001f4 	.word	0x200001f4
 8002b90:	20000200 	.word	0x20000200

08002b94 <_GLOBAL__sub_I_CurrentSense_resistance>:
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	f7ff ff73 	bl	8002a88 <_Z41__static_initialization_and_destruction_0ii>
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <_ZN13PIDControllerC1Efffff>:
 */

#include <pid.h>
#include "stm32g4xx_hal.h" // Include the HAL header for your specific MCU

PIDController::PIDController(float P, float I, float D, float ramp, float limit)
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6178      	str	r0, [r7, #20]
 8002bac:	ed87 0a04 	vstr	s0, [r7, #16]
 8002bb0:	edc7 0a03 	vstr	s1, [r7, #12]
 8002bb4:	ed87 1a02 	vstr	s2, [r7, #8]
 8002bb8:	edc7 1a01 	vstr	s3, [r7, #4]
 8002bbc:	ed87 2a00 	vstr	s4, [r7]
    : P(P)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	601a      	str	r2, [r3, #0]
    , I(I)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	605a      	str	r2, [r3, #4]
    , D(D)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	609a      	str	r2, [r3, #8]
    , output_ramp(ramp)    // output derivative limit [volts/second]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	60da      	str	r2, [r3, #12]
    , limit(limit)         // output supply limit     [volts]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	611a      	str	r2, [r3, #16]
    , error_prev(0.0f)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	615a      	str	r2, [r3, #20]
    , output_prev(0.0f)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	619a      	str	r2, [r3, #24]
    , integral_prev(0.0f)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	61da      	str	r2, [r3, #28]
{
    timestamp_prev = micros();
 8002bf6:	f000 f91d 	bl	8002e34 <_ZN13PIDController6microsEv>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	621a      	str	r2, [r3, #32]
}
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <_ZN13PIDControllerclEf>:

// PID controller "Functors" (see https://www.geeksforgeeks.org/functors-in-cpp/)
float PIDController::operator() (float error)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	@ 0x28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	ed87 0a00 	vstr	s0, [r7]
    // calculate the time from the last call
    unsigned long timestamp_now = micros();
 8002c18:	f000 f90c 	bl	8002e34 <_ZN13PIDController6microsEv>
 8002c1c:	61f8      	str	r0, [r7, #28]
    float Ts = (timestamp_now - timestamp_prev) * 1e-6f;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2e:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8002e2c <_ZN13PIDControllerclEf+0x220>
 8002c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c36:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // quick fix for strange cases (micros overflow)
    if(Ts <= 0 || Ts > 0.5f) Ts = 1e-3f;
 8002c3a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c46:	d908      	bls.n	8002c5a <_ZN13PIDControllerclEf+0x4e>
 8002c48:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c4c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c58:	dd01      	ble.n	8002c5e <_ZN13PIDControllerclEf+0x52>
 8002c5a:	4b75      	ldr	r3, [pc, #468]	@ (8002e30 <_ZN13PIDControllerclEf+0x224>)
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24

    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = P * error;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	edd3 7a00 	vldr	s15, [r3]
 8002c64:	ed97 7a00 	vldr	s14, [r7]
 8002c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c6c:	edc7 7a06 	vstr	s15, [r7, #24]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float integral = integral_prev + I*Ts*0.5f*(error + error_prev);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c7c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c84:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002c88:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	ed93 6a05 	vldr	s12, [r3, #20]
 8002c92:	edd7 7a00 	vldr	s15, [r7]
 8002c96:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002c9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca2:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -limit, limit);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cac:	eef1 7a67 	vneg.f32	s15, s15
 8002cb0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cbc:	d505      	bpl.n	8002cca <_ZN13PIDControllerclEf+0xbe>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cc4:	eef1 7a67 	vneg.f32	s15, s15
 8002cc8:	e00f      	b.n	8002cea <_ZN13PIDControllerclEf+0xde>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cd0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cdc:	dd03      	ble.n	8002ce6 <_ZN13PIDControllerclEf+0xda>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ce4:	e001      	b.n	8002cea <_ZN13PIDControllerclEf+0xde>
 8002ce6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cea:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = D*(error - error_prev)/Ts;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cfa:	edd7 6a00 	vldr	s13, [r7]
 8002cfe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d02:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002d06:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d0e:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 8002d12:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d16:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d26:	edc7 7a08 	vstr	s15, [r7, #32]
    // antiwindup - limit the output variable
    output = _constrain(output, -limit, limit);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d30:	eef1 7a67 	vneg.f32	s15, s15
 8002d34:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d40:	d505      	bpl.n	8002d4e <_ZN13PIDControllerclEf+0x142>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d48:	eef1 7a67 	vneg.f32	s15, s15
 8002d4c:	e00f      	b.n	8002d6e <_ZN13PIDControllerclEf+0x162>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d54:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d60:	dd03      	ble.n	8002d6a <_ZN13PIDControllerclEf+0x15e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d68:	e001      	b.n	8002d6e <_ZN13PIDControllerclEf+0x162>
 8002d6a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d6e:	edc7 7a08 	vstr	s15, [r7, #32]

    // if output ramp defined
    if(output_ramp > 0)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d80:	dd3f      	ble.n	8002e02 <_ZN13PIDControllerclEf+0x1f6>
	{
        // limit the acceleration by ramping the output
        float output_rate = (output - output_prev)/Ts;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d88:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d8c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002d90:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d98:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > output_ramp)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002da2:	ed97 7a03 	vldr	s14, [r7, #12]
 8002da6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dae:	dd0e      	ble.n	8002dce <_ZN13PIDControllerclEf+0x1c2>
            output = output_prev + output_ramp*Ts;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	ed93 7a06 	vldr	s14, [r3, #24]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	edd3 6a03 	vldr	s13, [r3, #12]
 8002dbc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc8:	edc7 7a08 	vstr	s15, [r7, #32]
 8002dcc:	e019      	b.n	8002e02 <_ZN13PIDControllerclEf+0x1f6>
        else if (output_rate < -output_ramp)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002dd4:	eef1 7a67 	vneg.f32	s15, s15
 8002dd8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ddc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de4:	d50d      	bpl.n	8002e02 <_ZN13PIDControllerclEf+0x1f6>
            output = output_prev - output_ramp*Ts;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	ed93 7a06 	vldr	s14, [r3, #24]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	edd3 6a03 	vldr	s13, [r3, #12]
 8002df2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfe:	edc7 7a08 	vstr	s15, [r7, #32]
    }
    // saving for the next pass
    integral_prev = integral;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	61da      	str	r2, [r3, #28]
    output_prev = output;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a3a      	ldr	r2, [r7, #32]
 8002e0c:	619a      	str	r2, [r3, #24]
    error_prev = error;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	615a      	str	r2, [r3, #20]
    timestamp_prev = timestamp_now;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	621a      	str	r2, [r3, #32]
    return output;
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	ee07 3a90 	vmov	s15, r3
}
 8002e20:	eeb0 0a67 	vmov.f32	s0, s15
 8002e24:	3728      	adds	r7, #40	@ 0x28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	358637bd 	.word	0x358637bd
 8002e30:	3a83126f 	.word	0x3a83126f

08002e34 <_ZN13PIDController6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t PIDController::micros(void) 
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8002e38:	4b07      	ldr	r3, [pc, #28]	@ (8002e58 <_ZN13PIDController6microsEv+0x24>)
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	4b07      	ldr	r3, [pc, #28]	@ (8002e5c <_ZN13PIDController6microsEv+0x28>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4907      	ldr	r1, [pc, #28]	@ (8002e60 <_ZN13PIDController6microsEv+0x2c>)
 8002e42:	fba1 1303 	umull	r1, r3, r1, r3
 8002e46:	0c9b      	lsrs	r3, r3, #18
 8002e48:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	e0001000 	.word	0xe0001000
 8002e5c:	200000c0 	.word	0x200000c0
 8002e60:	431bde83 	.word	0x431bde83

08002e64 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e6e:	edc7 0a00 	vstr	s1, [r7]
 8002e72:	edd7 0a00 	vldr	s1, [r7]
 8002e76:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e7a:	f007 ff47 	bl	800ad0c <atan2f>
 8002e7e:	eef0 7a40 	vmov.f32	s15, s0
 8002e82:	eeb0 0a67 	vmov.f32	s0, s15
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e96:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e9a:	f008 f807 	bl	800aeac <floorf>
 8002e9e:	eef0 7a40 	vmov.f32	s15, s0
 8002ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <_ZN11pwm_driversC1Ev>:
 */

#include <pwm_drivers.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU
#include "motor_param.h"
pwm_drivers::pwm_drivers() {
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	4a04      	ldr	r2, [pc, #16]	@ (8002ec8 <_ZN11pwm_driversC1Ev+0x1c>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	0800c40c 	.word	0x0800c40c

08002ecc <_ZN11pwm_driversD1Ev>:

pwm_drivers::~pwm_drivers() {
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	4a04      	ldr	r2, [pc, #16]	@ (8002ee8 <_ZN11pwm_driversD1Ev+0x1c>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	0800c40c 	.word	0x0800c40c

08002eec <_ZN11pwm_driversD0Ev>:
pwm_drivers::~pwm_drivers() {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
}
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ffe9 	bl	8002ecc <_ZN11pwm_driversD1Ev>
 8002efa:	2110      	movs	r1, #16
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f007 fe73 	bl	800abe8 <_ZdlPvj>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <_ZN11pwm_drivers10initDriverEv>:

void pwm_drivers::initDriver()
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   //pinMode
 8002f14:	2100      	movs	r1, #0
 8002f16:	4807      	ldr	r0, [pc, #28]	@ (8002f34 <_ZN11pwm_drivers10initDriverEv+0x28>)
 8002f18:	f006 fbcc 	bl	80096b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	//pinMode
 8002f1c:	2104      	movs	r1, #4
 8002f1e:	4805      	ldr	r0, [pc, #20]	@ (8002f34 <_ZN11pwm_drivers10initDriverEv+0x28>)
 8002f20:	f006 fbc8 	bl	80096b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	//pinMode
 8002f24:	2108      	movs	r1, #8
 8002f26:	4803      	ldr	r0, [pc, #12]	@ (8002f34 <_ZN11pwm_drivers10initDriverEv+0x28>)
 8002f28:	f006 fbc4 	bl	80096b4 <HAL_TIM_PWM_Start>
}
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000724 	.word	0x20000724

08002f38 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff>:

//Write PWM fsw = 25kHzfloat Ts
void pwm_drivers::writeDutyCycle3PWM(float dc_a, float dc_b, float dc_c) 
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f44:	edc7 0a01 	vstr	s1, [r7, #4]
 8002f48:	ed87 1a00 	vstr	s2, [r7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, fsw*dc_a);
 8002f4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f50:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002fa8 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 8002f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f58:	4b14      	ldr	r3, [pc, #80]	@ (8002fac <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f60:	ee17 2a90 	vmov	r2, s15
 8002f64:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, fsw*dc_b);
 8002f66:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f6a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002fa8 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 8002f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f72:	4b0e      	ldr	r3, [pc, #56]	@ (8002fac <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f7a:	ee17 2a90 	vmov	r2, s15
 8002f7e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, fsw*dc_c);
 8002f80:	edd7 7a00 	vldr	s15, [r7]
 8002f84:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002fa8 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 8002f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f8c:	4b07      	ldr	r3, [pc, #28]	@ (8002fac <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f94:	ee17 2a90 	vmov	r2, s15
 8002f98:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002f9a:	bf00      	nop
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	45610000 	.word	0x45610000
 8002fac:	20000724 	.word	0x20000724

08002fb0 <_ZN11pwm_drivers15setPhaseVoltageEfff>:

// Method using FOC to set Uq and Ud to the motor at the optimal angle
// Function implementing Space Vector PWM and Sine PWM algorithms
void pwm_drivers::setPhaseVoltage(float Uq, float Ud, float angle_el) 
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b090      	sub	sp, #64	@ 0x40
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002fbc:	edc7 0a01 	vstr	s1, [r7, #4]
 8002fc0:	ed87 1a00 	vstr	s2, [r7]


// ===========================================================================
	float Uout;
	// a bit of optitmisation
	if (Ud)
 8002fc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fc8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd0:	d029      	beq.n	8003026 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x76>
	{
		// only if Ud and Uq set
		// _sqrt is an approx of sqrt (3-4% error)
		Uout = _sqrtApprox(Ud*Ud + Uq*Uq) / voltage_limit;
 8002fd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fd6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002fda:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fde:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fea:	f7ff fc97 	bl	800291c <_Z11_sqrtApproxf>
 8002fee:	eef0 6a40 	vmov.f32	s13, s0
 8002ff2:	4be8      	ldr	r3, [pc, #928]	@ (8003394 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8002ff4:	ed93 7a00 	vldr	s14, [r3]
 8002ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ffc:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		// angle normalisation in between 0 and 2pi
		// only necessary if using _sin and _cos - approximation functions
		angle_el = _normalizeAngle(angle_el + atan2(Uq, Ud));
 8003000:	edd7 0a01 	vldr	s1, [r7, #4]
 8003004:	ed97 0a02 	vldr	s0, [r7, #8]
 8003008:	f7ff ff2c 	bl	8002e64 <_ZSt5atan2ff>
 800300c:	eeb0 7a40 	vmov.f32	s14, s0
 8003010:	edd7 7a00 	vldr	s15, [r7]
 8003014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003018:	eeb0 0a67 	vmov.f32	s0, s15
 800301c:	f7ff fc44 	bl	80028a8 <_Z15_normalizeAnglef>
 8003020:	ed87 0a00 	vstr	s0, [r7]
 8003024:	e014      	b.n	8003050 <_ZN11pwm_drivers15setPhaseVoltageEfff+0xa0>
	}
	else
	{
		// only Uq available - no need for atan2 and sqrt
		Uout = Uq / voltage_limit;
 8003026:	4bdb      	ldr	r3, [pc, #876]	@ (8003394 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003028:	ed93 7a00 	vldr	s14, [r3]
 800302c:	edd7 6a02 	vldr	s13, [r7, #8]
 8003030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003034:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		// angle normalisation in between 0 and 2pi
		// only necessary if using _sin and _cos - approximation functions
		angle_el = _normalizeAngle(angle_el + _PI_2);
 8003038:	edd7 7a00 	vldr	s15, [r7]
 800303c:	ed9f 7ad6 	vldr	s14, [pc, #856]	@ 8003398 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e8>
 8003040:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003044:	eeb0 0a67 	vmov.f32	s0, s15
 8003048:	f7ff fc2e 	bl	80028a8 <_Z15_normalizeAnglef>
 800304c:	ed87 0a00 	vstr	s0, [r7]
	}
	// find the sector we are in currently
	int sector = floor(angle_el / _PI_3) + 1;
 8003050:	edd7 7a00 	vldr	s15, [r7]
 8003054:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 800339c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 8003058:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800305c:	eeb0 0a47 	vmov.f32	s0, s14
 8003060:	f7ff ff14 	bl	8002e8c <_ZSt5floorf>
 8003064:	eef0 7a40 	vmov.f32	s15, s0
 8003068:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800306c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003074:	ee17 3a90 	vmov	r3, s15
 8003078:	62fb      	str	r3, [r7, #44]	@ 0x2c
	// calculate the duty cycles
	float T1 = _SQRT3 * _sin(sector * _PI_3 - angle_el) * Uout;
 800307a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800307c:	ee07 3a90 	vmov	s15, r3
 8003080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003084:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 800339c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 8003088:	ee27 7a87 	vmul.f32	s14, s15, s14
 800308c:	edd7 7a00 	vldr	s15, [r7]
 8003090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003094:	eeb0 0a67 	vmov.f32	s0, s15
 8003098:	f7ff fb5e 	bl	8002758 <_Z4_sinf>
 800309c:	eef0 7a40 	vmov.f32	s15, s0
 80030a0:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 80033a0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f0>
 80030a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030a8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80030ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float T2 = _SQRT3 * _sin(angle_el - (sector - 1.0f) * _PI_3) * Uout;
 80030b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80030c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030c6:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 800339c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 80030ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030ce:	ed97 7a00 	vldr	s14, [r7]
 80030d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d6:	eeb0 0a67 	vmov.f32	s0, s15
 80030da:	f7ff fb3d 	bl	8002758 <_Z4_sinf>
 80030de:	eef0 7a40 	vmov.f32	s15, s0
 80030e2:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 80033a0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f0>
 80030e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030ea:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80030ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float T0 = 1 - T1 - T2; // modulation_centered around driver->voltage_limit/2
 80030f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80030fa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80030fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003102:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310a:	edc7 7a08 	vstr	s15, [r7, #32]
//	float T0 = 0; // pulled to 0 - better for low power supply voltage

	// calculate the duty cycles(times)
	float Ta, Tb, Tc;
	switch (sector) {
 800310e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003110:	3b01      	subs	r3, #1
 8003112:	2b05      	cmp	r3, #5
 8003114:	f200 80ee 	bhi.w	80032f4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x344>
 8003118:	a201      	add	r2, pc, #4	@ (adr r2, 8003120 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x170>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003139 	.word	0x08003139
 8003124:	08003183 	.word	0x08003183
 8003128:	080031cd 	.word	0x080031cd
 800312c:	08003217 	.word	0x08003217
 8003130:	08003261 	.word	0x08003261
 8003134:	080032ab 	.word	0x080032ab
	case 1:
		Ta = T1 + T2 + T0 / 2;
 8003138:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800313c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003140:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003144:	edd7 6a08 	vldr	s13, [r7, #32]
 8003148:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800314c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003154:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T2 + T0 / 2;
 8003158:	ed97 7a08 	vldr	s14, [r7, #32]
 800315c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003160:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003164:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800316c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T0 / 2;
 8003170:	ed97 7a08 	vldr	s14, [r7, #32]
 8003174:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003178:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800317c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 8003180:	e0c1      	b.n	8003306 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 2:
		Ta = T1 + T0 / 2;
 8003182:	ed97 7a08 	vldr	s14, [r7, #32]
 8003186:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800318a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800318e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003196:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T2 + T0 / 2;
 800319a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800319e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80031a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031a6:	edd7 6a08 	vldr	s13, [r7, #32]
 80031aa:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80031ae:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T0 / 2;
 80031ba:	ed97 7a08 	vldr	s14, [r7, #32]
 80031be:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80031c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031c6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 80031ca:	e09c      	b.n	8003306 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 3:
		Ta = T0 / 2;
 80031cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80031d0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80031d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031d8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T2 + T0 / 2;
 80031dc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80031e0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80031e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031e8:	edd7 6a08 	vldr	s13, [r7, #32]
 80031ec:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80031f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T2 + T0 / 2;
 80031fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8003200:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003204:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003208:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800320c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003210:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 8003214:	e077      	b.n	8003306 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 4:
		Ta = T0 / 2;
 8003216:	ed97 7a08 	vldr	s14, [r7, #32]
 800321a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800321e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003222:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T0 / 2;
 8003226:	ed97 7a08 	vldr	s14, [r7, #32]
 800322a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800322e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003232:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800323a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T2 + T0 / 2;
 800323e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003242:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003246:	ee37 7a27 	vadd.f32	s14, s14, s15
 800324a:	edd7 6a08 	vldr	s13, [r7, #32]
 800324e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003252:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 800325e:	e052      	b.n	8003306 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 5:
		Ta = T2 + T0 / 2;
 8003260:	ed97 7a08 	vldr	s14, [r7, #32]
 8003264:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003268:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800326c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003274:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T0 / 2;
 8003278:	ed97 7a08 	vldr	s14, [r7, #32]
 800327c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003280:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003284:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T2 + T0 / 2;
 8003288:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800328c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003290:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003294:	edd7 6a08 	vldr	s13, [r7, #32]
 8003298:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800329c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 80032a8:	e02d      	b.n	8003306 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 6:
		Ta = T1 + T2 + T0 / 2;
 80032aa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80032ae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80032b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032b6:	edd7 6a08 	vldr	s13, [r7, #32]
 80032ba:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80032be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T0 / 2;
 80032ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80032ce:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80032d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032d6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T0 / 2;
 80032da:	ed97 7a08 	vldr	s14, [r7, #32]
 80032de:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80032e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032e6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80032ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ee:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 80032f2:	e008      	b.n	8003306 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	default:
		// possible error state
		Ta = 0;
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = 0;
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = 0;
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	// calculate the phase voltages
	Ua = Ta * voltage_limit;
 8003306:	4b23      	ldr	r3, [pc, #140]	@ (8003394 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003308:	ed93 7a00 	vldr	s14, [r3]
 800330c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	edc3 7a01 	vstr	s15, [r3, #4]
	Ub = Tb * voltage_limit;
 800331a:	4b1e      	ldr	r3, [pc, #120]	@ (8003394 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 800331c:	ed93 7a00 	vldr	s14, [r3]
 8003320:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	edc3 7a02 	vstr	s15, [r3, #8]
	Uc = Tc * voltage_limit;
 800332e:	4b19      	ldr	r3, [pc, #100]	@ (8003394 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003330:	ed93 7a00 	vldr	s14, [r3]
 8003334:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	edc3 7a03 	vstr	s15, [r3, #12]
// ===========================================================================

	// set the voltages in hardware
	// limit the voltage in driver
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	edd3 7a01 	vldr	s15, [r3, #4]
 8003348:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800334c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003350:	d502      	bpl.n	8003358 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3a8>
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	e00f      	b.n	8003378 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c8>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	ed93 7a01 	vldr	s14, [r3, #4]
 800335e:	4b0d      	ldr	r3, [pc, #52]	@ (8003394 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003360:	edd3 7a00 	vldr	s15, [r3]
 8003364:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336c:	dd02      	ble.n	8003374 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c4>
 800336e:	4b09      	ldr	r3, [pc, #36]	@ (8003394 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	e001      	b.n	8003378 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c8>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	6053      	str	r3, [r2, #4]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	d50b      	bpl.n	80033a4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f4>
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	e018      	b.n	80033c4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x414>
 8003392:	bf00      	nop
 8003394:	200000b0 	.word	0x200000b0
 8003398:	3fc90fdb 	.word	0x3fc90fdb
 800339c:	3f860a92 	.word	0x3f860a92
 80033a0:	3fddb3d7 	.word	0x3fddb3d7
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80033aa:	4b5e      	ldr	r3, [pc, #376]	@ (8003524 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 80033ac:	edd3 7a00 	vldr	s15, [r3]
 80033b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b8:	dd02      	ble.n	80033c0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x410>
 80033ba:	4b5a      	ldr	r3, [pc, #360]	@ (8003524 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	e001      	b.n	80033c4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x414>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	6093      	str	r3, [r2, #8]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80033ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d6:	d502      	bpl.n	80033de <_ZN11pwm_drivers15setPhaseVoltageEfff+0x42e>
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	e00f      	b.n	80033fe <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44e>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80033e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003524 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 80033e6:	edd3 7a00 	vldr	s15, [r3]
 80033ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f2:	dd02      	ble.n	80033fa <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44a>
 80033f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003524 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	e001      	b.n	80033fe <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44e>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	60d3      	str	r3, [r2, #12]
	// calculate duty cycle
	float dc_a;  //duty cycle phase A [0, 1]
	float dc_b;  //duty cycle phase B [0, 1]
	float dc_c;  //duty cycle phase C [0, 1]
	// limited in [0,1]
	dc_a = _constrain(Ua / voltage_power_supply, 0.0f, 0.94f);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	edd3 6a01 	vldr	s13, [r3, #4]
 8003408:	4b47      	ldr	r3, [pc, #284]	@ (8003528 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 800340a:	ed93 7a00 	vldr	s14, [r3]
 800340e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003412:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341a:	d502      	bpl.n	8003422 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x472>
 800341c:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800352c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 8003420:	e019      	b.n	8003456 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4a6>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	edd3 6a01 	vldr	s13, [r3, #4]
 8003428:	4b3f      	ldr	r3, [pc, #252]	@ (8003528 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 800342a:	ed93 7a00 	vldr	s14, [r3]
 800342e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003432:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003530 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 8003436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800343a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343e:	dd02      	ble.n	8003446 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x496>
 8003440:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8003530 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 8003444:	e007      	b.n	8003456 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4a6>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	edd3 6a01 	vldr	s13, [r3, #4]
 800344c:	4b36      	ldr	r3, [pc, #216]	@ (8003528 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 800344e:	ed93 7a00 	vldr	s14, [r3]
 8003452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003456:	edc7 7a07 	vstr	s15, [r7, #28]
	dc_b = _constrain(Ub / voltage_power_supply, 0.0f, 0.94f);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003460:	4b31      	ldr	r3, [pc, #196]	@ (8003528 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8003462:	ed93 7a00 	vldr	s14, [r3]
 8003466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800346a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800346e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003472:	d502      	bpl.n	800347a <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4ca>
 8003474:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800352c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 8003478:	e019      	b.n	80034ae <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4fe>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003480:	4b29      	ldr	r3, [pc, #164]	@ (8003528 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8003482:	ed93 7a00 	vldr	s14, [r3]
 8003486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800348a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8003530 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 800348e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003496:	dd02      	ble.n	800349e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4ee>
 8003498:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8003530 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 800349c:	e007      	b.n	80034ae <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4fe>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	edd3 6a02 	vldr	s13, [r3, #8]
 80034a4:	4b20      	ldr	r3, [pc, #128]	@ (8003528 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80034a6:	ed93 7a00 	vldr	s14, [r3]
 80034aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034ae:	edc7 7a06 	vstr	s15, [r7, #24]
	dc_c = _constrain(Uc / voltage_power_supply, 0.0f, 0.94f);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	edd3 6a03 	vldr	s13, [r3, #12]
 80034b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003528 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80034ba:	ed93 7a00 	vldr	s14, [r3]
 80034be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	d502      	bpl.n	80034d2 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x522>
 80034cc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800352c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 80034d0:	e019      	b.n	8003506 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x556>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	edd3 6a03 	vldr	s13, [r3, #12]
 80034d8:	4b13      	ldr	r3, [pc, #76]	@ (8003528 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80034da:	ed93 7a00 	vldr	s14, [r3]
 80034de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e2:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8003530 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 80034e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ee:	dd02      	ble.n	80034f6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x546>
 80034f0:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8003530 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 80034f4:	e007      	b.n	8003506 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x556>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	edd3 6a03 	vldr	s13, [r3, #12]
 80034fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003528 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80034fe:	ed93 7a00 	vldr	s14, [r3]
 8003502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003506:	edc7 7a05 	vstr	s15, [r7, #20]
	writeDutyCycle3PWM(dc_a, dc_b, dc_c);
 800350a:	ed97 1a05 	vldr	s2, [r7, #20]
 800350e:	edd7 0a06 	vldr	s1, [r7, #24]
 8003512:	ed97 0a07 	vldr	s0, [r7, #28]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff fd0e 	bl	8002f38 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff>
}
 800351c:	bf00      	nop
 800351e:	3740      	adds	r7, #64	@ 0x40
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	200000b0 	.word	0x200000b0
 8003528:	200000ac 	.word	0x200000ac
 800352c:	00000000 	.word	0x00000000
 8003530:	3f70a3d7 	.word	0x3f70a3d7

08003534 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	ed87 0a01 	vstr	s0, [r7, #4]
 800353e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003542:	eef0 7ae7 	vabs.f32	s15, s15
 8003546:	eeb0 0a67 	vmov.f32	s0, s15
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <_ZN9simpleFOCC1Ev>:
#include <simpleFOC.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU



simpleFOC::simpleFOC() 
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	4a0f      	ldr	r2, [pc, #60]	@ (800359c <_ZN9simpleFOCC1Ev+0x48>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3308      	adds	r3, #8
 8003566:	4618      	mov	r0, r3
 8003568:	f7fd fb22 	bl	8000bb0 <_ZN17AS5048A_interfaceC1Ev>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	33b8      	adds	r3, #184	@ 0xb8
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fe71 	bl	8001258 <_ZN12CurrentSenseC1Ev>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fc95 	bl	8002eac <_ZN11pwm_driversC1Ev>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a06      	ldr	r2, [pc, #24]	@ (80035a0 <_ZN9simpleFOCC1Ev+0x4c>)
 8003586:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a04      	ldr	r2, [pc, #16]	@ (80035a0 <_ZN9simpleFOCC1Ev+0x4c>)
 800358e:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
{

}
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	0800c41c 	.word	0x0800c41c
 80035a0:	40400000 	.word	0x40400000

080035a4 <_ZN9simpleFOCD1Ev>:

simpleFOC::~simpleFOC() 
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	4a0b      	ldr	r2, [pc, #44]	@ (80035dc <_ZN9simpleFOCD1Ev+0x38>)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fc87 	bl	8002ecc <_ZN11pwm_driversD1Ev>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	33b8      	adds	r3, #184	@ 0xb8
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd fef8 	bl	80013b8 <_ZN12CurrentSenseD1Ev>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3308      	adds	r3, #8
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fd fb5f 	bl	8000c90 <_ZN17AS5048A_interfaceD1Ev>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	0800c41c 	.word	0x0800c41c

080035e0 <_ZN9simpleFOCD0Ev>:
simpleFOC::~simpleFOC() 
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
}
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ffdb 	bl	80035a4 <_ZN9simpleFOCD1Ev>
 80035ee:	f44f 710c 	mov.w	r1, #560	@ 0x230
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f007 faf8 	bl	800abe8 <_ZdlPvj>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <_ZN9simpleFOC11initSensorsEv>:

void simpleFOC::initSensors()
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
	driver.initDriver();
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fc7a 	bl	8002f0c <_ZN11pwm_drivers10initDriverEv>
	Encoder.MagneticSensorSPI_init();
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3308      	adds	r3, #8
 800361c:	4618      	mov	r0, r3
 800361e:	f7fd fb5b 	bl	8000cd8 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>
	Encoder.Sensor_init();
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3308      	adds	r3, #8
 8003626:	4618      	mov	r0, r3
 8003628:	f7fd fb92 	bl	8000d50 <_ZN17AS5048A_interface11Sensor_initEv>
	CurrentSensor.initCurrentsense(CurrentSense_resistance, CurrentSense_gain);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	33b8      	adds	r3, #184	@ 0xb8
 8003630:	4a0a      	ldr	r2, [pc, #40]	@ (800365c <_ZN9simpleFOC11initSensorsEv+0x58>)
 8003632:	edd2 7a00 	vldr	s15, [r2]
 8003636:	4a0a      	ldr	r2, [pc, #40]	@ (8003660 <_ZN9simpleFOC11initSensorsEv+0x5c>)
 8003638:	ed92 7a00 	vldr	s14, [r2]
 800363c:	eef0 0a47 	vmov.f32	s1, s14
 8003640:	eeb0 0a67 	vmov.f32	s0, s15
 8003644:	4618      	mov	r0, r3
 8003646:	f7fd fedd 	bl	8001404 <_ZN12CurrentSense16initCurrentsenseEff>
	CurrentSensor.calibrateOffsets();
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	33b8      	adds	r3, #184	@ 0xb8
 800364e:	4618      	mov	r0, r3
 8003650:	f7fd ff02 	bl	8001458 <_ZN12CurrentSense16calibrateOffsetsEv>
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	20000098 	.word	0x20000098
 8003660:	2000009c 	.word	0x2000009c

08003664 <_ZN9simpleFOC11needsSearchEv>:

// returns 0 if it does need search for absolute zero
// 0 - magnetic sensor (& encoder with index which is found)
// 1 - encoder with index (with index not found yet)
int simpleFOC::needsSearch() 
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	return 0;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <_ZN9simpleFOC18absoluteZeroSearchEv>:

// Encoder alignment the absolute zero angle
// - to the index
int simpleFOC::absoluteZeroSearch() 
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	// search the absolute zero with small velocity
	float limit_vel = velocity_limit;
 8003684:	4b29      	ldr	r3, [pc, #164]	@ (800372c <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]
	float limit_volt = voltage_limit;
 800368a:	4b29      	ldr	r3, [pc, #164]	@ (8003730 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60bb      	str	r3, [r7, #8]
	velocity_limit = velocity_index_search;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003696:	4a25      	ldr	r2, [pc, #148]	@ (800372c <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 8003698:	6013      	str	r3, [r2, #0]
	voltage_limit = voltage_sensor_align;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80036a0:	4a23      	ldr	r2, [pc, #140]	@ (8003730 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 80036a2:	6013      	str	r3, [r2, #0]
	shaft_angle = 0;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	605a      	str	r2, [r3, #4]
	while (needsSearch() && shaft_angle < _2PI) 
 80036ac:	e009      	b.n	80036c2 <_ZN9simpleFOC18absoluteZeroSearchEv+0x46>
	{
		angleOpenloop(1.5 * _2PI);
 80036ae:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8003734 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb8>
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fae8 	bl	8003c88 <_ZN9simpleFOC13angleOpenloopEf>
		// call important for some sensors not to loose count
		// not needed for the search
		Encoder.get_full_rotation_angle();
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3308      	adds	r3, #8
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fd fc35 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
	while (needsSearch() && shaft_angle < _2PI) 
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ffce 	bl	8003664 <_ZN9simpleFOC11needsSearchEv>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <_ZN9simpleFOC18absoluteZeroSearchEv+0x6a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80036d4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003738 <_ZN9simpleFOC18absoluteZeroSearchEv+0xbc>
 80036d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e0:	d501      	bpl.n	80036e6 <_ZN9simpleFOC18absoluteZeroSearchEv+0x6a>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <_ZN9simpleFOC18absoluteZeroSearchEv+0x6c>
 80036e6:	2300      	movs	r3, #0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e0      	bne.n	80036ae <_ZN9simpleFOC18absoluteZeroSearchEv+0x32>
	}
	driver.setPhaseVoltage(0, 0, 0);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80036f2:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 800373c <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 80036f6:	eddf 0a11 	vldr	s1, [pc, #68]	@ 800373c <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 80036fa:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 800373c <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff fc56 	bl	8002fb0 <_ZN11pwm_drivers15setPhaseVoltageEfff>

	// re-init the limits
	velocity_limit = limit_vel;
 8003704:	4a09      	ldr	r2, [pc, #36]	@ (800372c <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6013      	str	r3, [r2, #0]
	voltage_limit = limit_volt;
 800370a:	4a09      	ldr	r2, [pc, #36]	@ (8003730 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	6013      	str	r3, [r2, #0]
	return !needsSearch();
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff ffa7 	bl	8003664 <_ZN9simpleFOC11needsSearchEv>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	200000b8 	.word	0x200000b8
 8003730:	200000b0 	.word	0x200000b0
 8003734:	4116cbe4 	.word	0x4116cbe4
 8003738:	40c90fdb 	.word	0x40c90fdb
 800373c:	00000000 	.word	0x00000000

08003740 <_ZN9simpleFOC11alignSensorEv>:

// Encoder alignment to electrical 0 angle
int simpleFOC::alignSensor() 
{
 8003740:	b580      	push	{r7, lr}
 8003742:	ed2d 8b02 	vpush	{d8}
 8003746:	b08a      	sub	sp, #40	@ 0x28
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
	int exit_flag = 1; //success
 800374c:	2301      	movs	r3, #1
 800374e:	627b      	str	r3, [r7, #36]	@ 0x24
	// if unknown natural direction
	if (!_isset(Encoder.sensor_direction)) //sensor_direction == -12345.0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003754:	ee07 3a90 	vmov	s15, r3
 8003758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800375c:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 8003a38 <_ZN9simpleFOC11alignSensorEv+0x2f8>
 8003760:	eef4 7a47 	vcmp.f32	s15, s14
 8003764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003768:	f040 810a 	bne.w	8003980 <_ZN9simpleFOC11alignSensorEv+0x240>
	{
		// check if sensor needs zero search
		if (needsSearch()) //needSearch == 0 because use Magnetic sensor
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ff79 	bl	8003664 <_ZN9simpleFOC11needsSearchEv>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf14      	ite	ne
 8003778:	2301      	movne	r3, #1
 800377a:	2300      	moveq	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <_ZN9simpleFOC11alignSensorEv+0x4a>
			exit_flag = absoluteZeroSearch(); // o
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ff7a 	bl	800367c <_ZN9simpleFOC18absoluteZeroSearchEv>
 8003788:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!exit_flag)
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <_ZN9simpleFOC11alignSensorEv+0x54>
			return exit_flag;
 8003790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003792:	e146      	b.n	8003a22 <_ZN9simpleFOC11alignSensorEv+0x2e2>

		// find natural direction
		// move one electrical revolution forward
		for (int i = 0; i <= 500; i++) 
 8003794:	2300      	movs	r3, #0
 8003796:	623b      	str	r3, [r7, #32]
 8003798:	e037      	b.n	800380a <_ZN9simpleFOC11alignSensorEv+0xca>
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	ee07 3a90 	vmov	s15, r3
 80037a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037a4:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8003a3c <_ZN9simpleFOC11alignSensorEv+0x2fc>
 80037a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ac:	ee17 0a90 	vmov	r0, s15
 80037b0:	f7fc fe96 	bl	80004e0 <__aeabi_f2d>
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	4ba1      	ldr	r3, [pc, #644]	@ (8003a40 <_ZN9simpleFOC11alignSensorEv+0x300>)
 80037ba:	f7fd f813 	bl	80007e4 <__aeabi_ddiv>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4610      	mov	r0, r2
 80037c4:	4619      	mov	r1, r3
 80037c6:	a39a      	add	r3, pc, #616	@ (adr r3, 8003a30 <_ZN9simpleFOC11alignSensorEv+0x2f0>)
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	f7fc fd2a 	bl	8000224 <__adddf3>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	f7fd f98a 	bl	8000af0 <__aeabi_d2f>
 80037dc:	4603      	mov	r3, r0
 80037de:	60bb      	str	r3, [r7, #8]
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	edd3 7a8a 	vldr	s15, [r3, #552]	@ 0x228
 80037ec:	ed97 1a02 	vldr	s2, [r7, #8]
 80037f0:	eddf 0a94 	vldr	s1, [pc, #592]	@ 8003a44 <_ZN9simpleFOC11alignSensorEv+0x304>
 80037f4:	eeb0 0a67 	vmov.f32	s0, s15
 80037f8:	4610      	mov	r0, r2
 80037fa:	f7ff fbd9 	bl	8002fb0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
			HAL_Delay(2);
 80037fe:	2002      	movs	r0, #2
 8003800:	f001 fc9a 	bl	8005138 <HAL_Delay>
		for (int i = 0; i <= 500; i++) 
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	3301      	adds	r3, #1
 8003808:	623b      	str	r3, [r7, #32]
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003810:	ddc3      	ble.n	800379a <_ZN9simpleFOC11alignSensorEv+0x5a>
		}
		Encoder.updateSensor();
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3308      	adds	r3, #8
 8003816:	4618      	mov	r0, r3
 8003818:	f7fd fbf8 	bl	800100c <_ZN17AS5048A_interface12updateSensorEv>
		// take and angle in the middle
		float mid_angle = Encoder.get_full_rotation_angle();
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3308      	adds	r3, #8
 8003820:	4618      	mov	r0, r3
 8003822:	f7fd fb83 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8003826:	ed87 0a06 	vstr	s0, [r7, #24]
		// move one electrical revolution backwards
		for (int i = 500; i >= 0; i--) 
 800382a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800382e:	61fb      	str	r3, [r7, #28]
 8003830:	e037      	b.n	80038a2 <_ZN9simpleFOC11alignSensorEv+0x162>
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	ee07 3a90 	vmov	s15, r3
 8003838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800383c:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8003a3c <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8003840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003844:	ee17 0a90 	vmov	r0, s15
 8003848:	f7fc fe4a 	bl	80004e0 <__aeabi_f2d>
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	4b7b      	ldr	r3, [pc, #492]	@ (8003a40 <_ZN9simpleFOC11alignSensorEv+0x300>)
 8003852:	f7fc ffc7 	bl	80007e4 <__aeabi_ddiv>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4610      	mov	r0, r2
 800385c:	4619      	mov	r1, r3
 800385e:	a374      	add	r3, pc, #464	@ (adr r3, 8003a30 <_ZN9simpleFOC11alignSensorEv+0x2f0>)
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f7fc fcde 	bl	8000224 <__adddf3>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	f7fd f93e 	bl	8000af0 <__aeabi_d2f>
 8003874:	4603      	mov	r3, r0
 8003876:	60fb      	str	r3, [r7, #12]
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	edd3 7a8a 	vldr	s15, [r3, #552]	@ 0x228
 8003884:	ed97 1a03 	vldr	s2, [r7, #12]
 8003888:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 8003a44 <_ZN9simpleFOC11alignSensorEv+0x304>
 800388c:	eeb0 0a67 	vmov.f32	s0, s15
 8003890:	4610      	mov	r0, r2
 8003892:	f7ff fb8d 	bl	8002fb0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
			HAL_Delay(2);
 8003896:	2002      	movs	r0, #2
 8003898:	f001 fc4e 	bl	8005138 <HAL_Delay>
		for (int i = 500; i >= 0; i--) 
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	3b01      	subs	r3, #1
 80038a0:	61fb      	str	r3, [r7, #28]
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	dac4      	bge.n	8003832 <_ZN9simpleFOC11alignSensorEv+0xf2>
		}
		Encoder.updateSensor();
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3308      	adds	r3, #8
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fd fbad 	bl	800100c <_ZN17AS5048A_interface12updateSensorEv>
		float end_angle = Encoder.get_full_rotation_angle();
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3308      	adds	r3, #8
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fd fb38 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 80038bc:	ed87 0a05 	vstr	s0, [r7, #20]
		driver.setPhaseVoltage(0, 0, 0);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80038c6:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 8003a44 <_ZN9simpleFOC11alignSensorEv+0x304>
 80038ca:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 8003a44 <_ZN9simpleFOC11alignSensorEv+0x304>
 80038ce:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 8003a44 <_ZN9simpleFOC11alignSensorEv+0x304>
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fb6c 	bl	8002fb0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(200);
 80038d8:	20c8      	movs	r0, #200	@ 0xc8
 80038da:	f001 fc2d 	bl	8005138 <HAL_Delay>
		// determine the direction the sensor moved
		if (mid_angle == end_angle) 
 80038de:	ed97 7a06 	vldr	s14, [r7, #24]
 80038e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80038e6:	eeb4 7a67 	vcmp.f32	s14, s15
 80038ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ee:	d101      	bne.n	80038f4 <_ZN9simpleFOC11alignSensorEv+0x1b4>
		{
			return 0; // failed calibration
 80038f0:	2300      	movs	r3, #0
 80038f2:	e096      	b.n	8003a22 <_ZN9simpleFOC11alignSensorEv+0x2e2>
		} else if (mid_angle < end_angle) 
 80038f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80038f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80038fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003904:	d504      	bpl.n	8003910 <_ZN9simpleFOC11alignSensorEv+0x1d0>
		{
			Encoder.sensor_direction = CCW;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f04f 32ff 	mov.w	r2, #4294967295
 800390c:	651a      	str	r2, [r3, #80]	@ 0x50
 800390e:	e002      	b.n	8003916 <_ZN9simpleFOC11alignSensorEv+0x1d6>
		} else {
			Encoder.sensor_direction = CW;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	651a      	str	r2, [r3, #80]	@ 0x50
		}
		// check pole pair number

		float moved = fabs(mid_angle - end_angle);
 8003916:	ed97 7a06 	vldr	s14, [r7, #24]
 800391a:	edd7 7a05 	vldr	s15, [r7, #20]
 800391e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003922:	eeb0 0a67 	vmov.f32	s0, s15
 8003926:	f7ff fe05 	bl	8003534 <_ZSt4fabsf>
 800392a:	ed87 0a04 	vstr	s0, [r7, #16]
		if (fabs(moved * pole_pairs - _2PI) > 0.5) 
 800392e:	4b46      	ldr	r3, [pc, #280]	@ (8003a48 <_ZN9simpleFOC11alignSensorEv+0x308>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800393a:	edd7 7a04 	vldr	s15, [r7, #16]
 800393e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003942:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8003a3c <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8003946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800394a:	eeb0 0a67 	vmov.f32	s0, s15
 800394e:	f7ff fdf1 	bl	8003534 <_ZSt4fabsf>
 8003952:	eef0 7a40 	vmov.f32	s15, s0
 8003956:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800395a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800395e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003962:	bfcc      	ite	gt
 8003964:	2301      	movgt	r3, #1
 8003966:	2300      	movle	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d008      	beq.n	8003980 <_ZN9simpleFOC11alignSensorEv+0x240>
		{ // 0.5 is arbitrary number it can be lower or higher!
			pp_check = _2PI / moved;
 800396e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8003a3c <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8003972:	ed97 7a04 	vldr	s14, [r7, #16]
 8003976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	edc3 7a89 	vstr	s15, [r3, #548]	@ 0x224
		}
	}

	// zero electric angle not known
	if (!_isset(Encoder.zero_electric_angle))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8003986:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8003a38 <_ZN9simpleFOC11alignSensorEv+0x2f8>
 800398a:	eef4 7a47 	vcmp.f32	s15, s14
 800398e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003992:	d145      	bne.n	8003a20 <_ZN9simpleFOC11alignSensorEv+0x2e0>
	{
		// align the electrical phases of the motor and sensor
		// set angle -90(270 = 3PI/2) degrees
		driver.setPhaseVoltage(voltage_sensor_align, 0, _3PI_2);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	edd3 7a8a 	vldr	s15, [r3, #552]	@ 0x228
 80039a0:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8003a4c <_ZN9simpleFOC11alignSensorEv+0x30c>
 80039a4:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8003a44 <_ZN9simpleFOC11alignSensorEv+0x304>
 80039a8:	eeb0 0a67 	vmov.f32	s0, s15
 80039ac:	4610      	mov	r0, r2
 80039ae:	f7ff faff 	bl	8002fb0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(700);
 80039b2:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80039b6:	f001 fbbf 	bl	8005138 <HAL_Delay>
		Encoder.zero_electric_angle = _normalizeAngle(_electricalAngle(Encoder.sensor_direction * Encoder.get_full_rotation_angle(), pole_pairs));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3308      	adds	r3, #8
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fd faae 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 80039d0:	eef0 7a40 	vmov.f32	s15, s0
 80039d4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80039d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a48 <_ZN9simpleFOC11alignSensorEv+0x308>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	eeb0 0a67 	vmov.f32	s0, s15
 80039e2:	f7fe ff85 	bl	80028f0 <_Z16_electricalAnglefi>
 80039e6:	eef0 7a40 	vmov.f32	s15, s0
 80039ea:	eeb0 0a67 	vmov.f32	s0, s15
 80039ee:	f7fe ff5b 	bl	80028a8 <_Z15_normalizeAnglef>
 80039f2:	eef0 7a40 	vmov.f32	s15, s0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		HAL_Delay(20);
 80039fc:	2014      	movs	r0, #20
 80039fe:	f001 fb9b 	bl	8005138 <HAL_Delay>
		// stop everything
		driver.setPhaseVoltage(0, 0, 0);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003a08:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8003a44 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003a0c:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8003a44 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003a10:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8003a44 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff facb 	bl	8002fb0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(200);
 8003a1a:	20c8      	movs	r0, #200	@ 0xc8
 8003a1c:	f001 fb8c 	bl	8005138 <HAL_Delay>
	}
	return exit_flag;
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3728      	adds	r7, #40	@ 0x28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	ecbd 8b02 	vpop	{d8}
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	80000000 	.word	0x80000000
 8003a34:	4012d97c 	.word	0x4012d97c
 8003a38:	c640e400 	.word	0xc640e400
 8003a3c:	40c90fdb 	.word	0x40c90fdb
 8003a40:	407f4000 	.word	0x407f4000
 8003a44:	00000000 	.word	0x00000000
 8003a48:	200000a8 	.word	0x200000a8
 8003a4c:	4096cbe4 	.word	0x4096cbe4

08003a50 <_ZN9simpleFOC7initFOCEf9Direction>:

// zero_electric_offset , _sensor_direction : from Run code "find_sensor_offset_and_direction"
// sensor : Encoder , Hall sensor , Magnetic encoder
int simpleFOC::initFOC(float zero_electric_offset, enum Direction _sensor_direction) 
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	71fb      	strb	r3, [r7, #7]
	int exit_flag = 1;
 8003a60:	2301      	movs	r3, #1
 8003a62:	617b      	str	r3, [r7, #20]
	// align motor if necessary
	// alignment necessary for encoders.
	if (_isset(zero_electric_offset)) 
 8003a64:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a68:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003abc <_ZN9simpleFOC7initFOCEf9Direction+0x6c>
 8003a6c:	eef4 7a47 	vcmp.f32	s15, s14
 8003a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a74:	d006      	beq.n	8003a84 <_ZN9simpleFOC7initFOCEf9Direction+0x34>
	{
		// absolute zero offset provided - no need to align
		Encoder.zero_electric_angle = zero_electric_offset;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	64da      	str	r2, [r3, #76]	@ 0x4c
		// set the sensor direction - default CW
		Encoder.sensor_direction = _sensor_direction;
 8003a7c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	// sensor and motor alignment - can be skipped
	// by setting motor.sensor_direction and motor.Encoder.zero_electric_angle
	exit_flag *= alignSensor();
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f7ff fe5b 	bl	8003740 <_ZN9simpleFOC11alignSensorEv>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	617b      	str	r3, [r7, #20]
	// added the shaft_angle update
	shaft_angle = Encoder.get_full_rotation_angle();
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3308      	adds	r3, #8
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fd fa47 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8003a9e:	eef0 7a40 	vmov.f32	s15, s0
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	edc3 7a01 	vstr	s15, [r3, #4]
	HAL_Delay(500);
 8003aa8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003aac:	f001 fb44 	bl	8005138 <HAL_Delay>

	return exit_flag;
 8003ab0:	697b      	ldr	r3, [r7, #20]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	c640e400 	.word	0xc640e400

08003ac0 <_ZN9simpleFOC7loopFOCEv>:



void simpleFOC::loopFOC() 
{
 8003ac0:	b590      	push	{r4, r7, lr}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	Encoder.updateSensor();
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3308      	adds	r3, #8
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd fa9d 	bl	800100c <_ZN17AS5048A_interface12updateSensorEv>
	// shaft angle/velocity need the update() to be called first
	// get shaft angle
	shaft_angle = Encoder.getShaftAngle();						// checked full rotation angle
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3308      	adds	r3, #8
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd fb66 	bl	80011a8 <_ZN17AS5048A_interface13getShaftAngleEv>
 8003adc:	eef0 7a40 	vmov.f32	s15, s0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	edc3 7a01 	vstr	s15, [r3, #4]
	// electrical angle - need shaftAngle to be called first
	electrical_angle = Encoder.electricalAngle();				//checked
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3308      	adds	r3, #8
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fd fa4a 	bl	8000f84 <_ZN17AS5048A_interface15electricalAngleEv>
 8003af0:	eef0 7a40 	vmov.f32	s15, s0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc


	// read dq currents
	current = CurrentSensor.getFOCCurrents(electrical_angle);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	edd3 7a7f 	vldr	s15, [r3, #508]	@ 0x1fc
 8003b06:	687c      	ldr	r4, [r7, #4]
 8003b08:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	f7fd fda3 	bl	8001658 <_ZN12CurrentSense14getFOCCurrentsEf>
 8003b12:	eeb0 7a40 	vmov.f32	s14, s0
 8003b16:	eef0 7a60 	vmov.f32	s15, s1
 8003b1a:	ed84 7a86 	vstr	s14, [r4, #536]	@ 0x218
 8003b1e:	edc4 7a87 	vstr	s15, [r4, #540]	@ 0x21c

	current.q = LPF_current_q(current.q);   // filter values
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	edd3 7a87 	vldr	s15, [r3, #540]	@ 0x21c
 8003b28:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2c:	4828      	ldr	r0, [pc, #160]	@ (8003bd0 <_ZN9simpleFOC7loopFOCEv+0x110>)
 8003b2e:	f7fe ff29 	bl	8002984 <_ZN13LowPassFilterclEf>
 8003b32:	eef0 7a40 	vmov.f32	s15, s0
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	edc3 7a87 	vstr	s15, [r3, #540]	@ 0x21c
	current.d = LPF_current_d(current.d);   // filter values
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	edd3 7a86 	vldr	s15, [r3, #536]	@ 0x218
 8003b42:	eeb0 0a67 	vmov.f32	s0, s15
 8003b46:	4823      	ldr	r0, [pc, #140]	@ (8003bd4 <_ZN9simpleFOC7loopFOCEv+0x114>)
 8003b48:	f7fe ff1c 	bl	8002984 <_ZN13LowPassFilterclEf>
 8003b4c:	eef0 7a40 	vmov.f32	s15, s0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	edc3 7a86 	vstr	s15, [r3, #536]	@ 0x218

	// calculate the phase voltages
	voltage.q = PID_current_q(current_sp - current.q);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	ed93 7a81 	vldr	s14, [r3, #516]	@ 0x204
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	edd3 7a87 	vldr	s15, [r3, #540]	@ 0x21c
 8003b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b66:	eeb0 0a67 	vmov.f32	s0, s15
 8003b6a:	481b      	ldr	r0, [pc, #108]	@ (8003bd8 <_ZN9simpleFOC7loopFOCEv+0x118>)
 8003b6c:	f7ff f84e 	bl	8002c0c <_ZN13PIDControllerclEf>
 8003b70:	eef0 7a40 	vmov.f32	s15, s0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	edc3 7a85 	vstr	s15, [r3, #532]	@ 0x214
	voltage.d = PID_current_d(0 - current.d);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	edd3 7a86 	vldr	s15, [r3, #536]	@ 0x218
 8003b80:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003bdc <_ZN9simpleFOC7loopFOCEv+0x11c>
 8003b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b88:	eeb0 0a67 	vmov.f32	s0, s15
 8003b8c:	4814      	ldr	r0, [pc, #80]	@ (8003be0 <_ZN9simpleFOC7loopFOCEv+0x120>)
 8003b8e:	f7ff f83d 	bl	8002c0c <_ZN13PIDControllerclEf>
 8003b92:	eef0 7a40 	vmov.f32	s15, s0
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	edc3 7a84 	vstr	s15, [r3, #528]	@ 0x210

	// set the phase voltage - FOC heart function :)
	driver.setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	edd3 7a85 	vldr	s15, [r3, #532]	@ 0x214
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	ed93 7a84 	vldr	s14, [r3, #528]	@ 0x210
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	edd3 6a7f 	vldr	s13, [r3, #508]	@ 0x1fc
 8003bb4:	eeb0 1a66 	vmov.f32	s2, s13
 8003bb8:	eef0 0a47 	vmov.f32	s1, s14
 8003bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	f7ff f9f5 	bl	8002fb0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd90      	pop	{r4, r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	200001dc 	.word	0x200001dc
 8003bd4:	200001e8 	.word	0x200001e8
 8003bd8:	20000170 	.word	0x20000170
 8003bdc:	00000000 	.word	0x00000000
 8003be0:	2000014c 	.word	0x2000014c

08003be4 <_ZN9simpleFOC13move_velocityEf>:
// Behavior of this function is determined by the motor.controller variable
// It runs either angle, velocity or torque loop
// - needs to be called iteratively it is asynchronous function
// - if target is not set it uses motor.target value
void simpleFOC::move_velocity(float new_target)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	ed87 0a00 	vstr	s0, [r7]
// get angular velocity
	shaft_velocity = Encoder.getShaftVelocity(); // read value even if motor is disabled to keep the monitoring updated
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fd faff 	bl	80011f8 <_ZN17AS5048A_interface16getShaftVelocityEv>
 8003bfa:	eef0 7a40 	vmov.f32	s15, s0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	edc3 7a80 	vstr	s15, [r3, #512]	@ 0x200

	if (_isset(new_target))
 8003c04:	edd7 7a00 	vldr	s15, [r7]
 8003c08:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003c78 <_ZN9simpleFOC13move_velocityEf+0x94>
 8003c0c:	eef4 7a47 	vcmp.f32	s15, s14
 8003c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c14:	d003      	beq.n	8003c1e <_ZN9simpleFOC13move_velocityEf+0x3a>
		target = new_target;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8

	// velocity set point
	shaft_velocity_sp = target;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8d3 21f8 	ldr.w	r2, [r3, #504]	@ 0x1f8
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208

	// calculate the torque command
	current_sp = PID_velocity(shaft_velocity_sp - shaft_velocity);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	ed93 7a82 	vldr	s14, [r3, #520]	@ 0x208
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	edd3 7a80 	vldr	s15, [r3, #512]	@ 0x200
 8003c36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c3e:	480f      	ldr	r0, [pc, #60]	@ (8003c7c <_ZN9simpleFOC13move_velocityEf+0x98>)
 8003c40:	f7fe ffe4 	bl	8002c0c <_ZN13PIDControllerclEf>
 8003c44:	eef0 7a40 	vmov.f32	s15, s0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	edc3 7a81 	vstr	s15, [r3, #516]	@ 0x204

	voltage.q = current_sp*phase_resistance;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	ed93 7a81 	vldr	s14, [r3, #516]	@ 0x204
 8003c54:	4b0a      	ldr	r3, [pc, #40]	@ (8003c80 <_ZN9simpleFOC13move_velocityEf+0x9c>)
 8003c56:	edd3 7a00 	vldr	s15, [r3]
 8003c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	edc3 7a85 	vstr	s15, [r3, #532]	@ 0x214
	voltage.d = 0;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	c640e400 	.word	0xc640e400
 8003c7c:	20000194 	.word	0x20000194
 8003c80:	200000a0 	.word	0x200000a0
 8003c84:	00000000 	.word	0x00000000

08003c88 <_ZN9simpleFOC13angleOpenloopEf>:

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float simpleFOC::angleOpenloop(float target_angle) 
{
 8003c88:	b590      	push	{r4, r7, lr}
 8003c8a:	ed2d 8b02 	vpush	{d8}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	ed87 0a00 	vstr	s0, [r7]
	unsigned long now_us = micros();
 8003c98:	f000 f8e6 	bl	8003e68 <_ZN9simpleFOC6microsEv>
 8003c9c:	60f8      	str	r0, [r7, #12]
	// calculate the sample time from last call
	float Ts = (now_us - open_loop_timestamp) * 1e-6;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fc fbf6 	bl	800049c <__aeabi_ui2d>
 8003cb0:	a36b      	add	r3, pc, #428	@ (adr r3, 8003e60 <_ZN9simpleFOC13angleOpenloopEf+0x1d8>)
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f7fc fc6b 	bl	8000590 <__aeabi_dmul>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	f7fc ff15 	bl	8000af0 <__aeabi_d2f>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	617b      	str	r3, [r7, #20]
	// quick fix for strange cases (micros overflow + timestamp not defined)
	if (Ts <= 0 || Ts > 0.5)
 8003cca:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd6:	d908      	bls.n	8003cea <_ZN9simpleFOC13angleOpenloopEf+0x62>
 8003cd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cdc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce8:	dd01      	ble.n	8003cee <_ZN9simpleFOC13angleOpenloopEf+0x66>
		Ts = 1e-3;
 8003cea:	4b55      	ldr	r3, [pc, #340]	@ (8003e40 <_ZN9simpleFOC13angleOpenloopEf+0x1b8>)
 8003cec:	617b      	str	r3, [r7, #20]

	// calculate the necessary angle to move from current position towards target angle
	// with maximal velocity (velocity_limit)
	if (abs(target_angle - shaft_angle) > abs(velocity_limit * Ts))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cf4:	ed97 7a00 	vldr	s14, [r7]
 8003cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8003d00:	f7fc ff46 	bl	8000b90 <_ZSt3absf>
 8003d04:	eeb0 8a40 	vmov.f32	s16, s0
 8003d08:	4b4e      	ldr	r3, [pc, #312]	@ (8003e44 <_ZN9simpleFOC13angleOpenloopEf+0x1bc>)
 8003d0a:	ed93 7a00 	vldr	s14, [r3]
 8003d0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d16:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1a:	f7fc ff39 	bl	8000b90 <_ZSt3absf>
 8003d1e:	eef0 7a40 	vmov.f32	s15, s0
 8003d22:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2a:	bfcc      	ite	gt
 8003d2c:	2301      	movgt	r3, #1
 8003d2e:	2300      	movle	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d03c      	beq.n	8003db0 <_ZN9simpleFOC13angleOpenloopEf+0x128>
	{
		shaft_angle += _sign(target_angle - shaft_angle) * abs(velocity_limit) * Ts;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d3c:	ed97 7a00 	vldr	s14, [r7]
 8003d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4c:	d502      	bpl.n	8003d54 <_ZN9simpleFOC13angleOpenloopEf+0xcc>
 8003d4e:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8003d52:	e010      	b.n	8003d76 <_ZN9simpleFOC13angleOpenloopEf+0xee>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d5a:	ed97 7a00 	vldr	s14, [r7]
 8003d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6a:	dd02      	ble.n	8003d72 <_ZN9simpleFOC13angleOpenloopEf+0xea>
 8003d6c:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8003d70:	e001      	b.n	8003d76 <_ZN9simpleFOC13angleOpenloopEf+0xee>
 8003d72:	ed9f 8a35 	vldr	s16, [pc, #212]	@ 8003e48 <_ZN9simpleFOC13angleOpenloopEf+0x1c0>
 8003d76:	4b33      	ldr	r3, [pc, #204]	@ (8003e44 <_ZN9simpleFOC13angleOpenloopEf+0x1bc>)
 8003d78:	edd3 7a00 	vldr	s15, [r3]
 8003d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d80:	f7fc ff06 	bl	8000b90 <_ZSt3absf>
 8003d84:	eef0 7a40 	vmov.f32	s15, s0
 8003d88:	ee28 7a27 	vmul.f32	s14, s16, s15
 8003d8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	edc3 7a01 	vstr	s15, [r3, #4]
		shaft_velocity = velocity_limit;
 8003da4:	4b27      	ldr	r3, [pc, #156]	@ (8003e44 <_ZN9simpleFOC13angleOpenloopEf+0x1bc>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8003dae:	e007      	b.n	8003dc0 <_ZN9simpleFOC13angleOpenloopEf+0x138>
	}
	else
	{
		shaft_angle = target_angle;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	605a      	str	r2, [r3, #4]
		shaft_velocity = 0;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	}

	// use voltage limit or current limit
	float Uq = voltage_limit;
 8003dc0:	4b22      	ldr	r3, [pc, #136]	@ (8003e4c <_ZN9simpleFOC13angleOpenloopEf+0x1c4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	613b      	str	r3, [r7, #16]
	if(_isset(phase_resistance))
 8003dc6:	4b22      	ldr	r3, [pc, #136]	@ (8003e50 <_ZN9simpleFOC13angleOpenloopEf+0x1c8>)
 8003dc8:	edd3 7a00 	vldr	s15, [r3]
 8003dcc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003e54 <_ZN9simpleFOC13angleOpenloopEf+0x1cc>
 8003dd0:	eef4 7a47 	vcmp.f32	s15, s14
 8003dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd8:	d009      	beq.n	8003dee <_ZN9simpleFOC13angleOpenloopEf+0x166>
		Uq =  current_limit*phase_resistance;
 8003dda:	4b1f      	ldr	r3, [pc, #124]	@ (8003e58 <_ZN9simpleFOC13angleOpenloopEf+0x1d0>)
 8003ddc:	ed93 7a00 	vldr	s14, [r3]
 8003de0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e50 <_ZN9simpleFOC13angleOpenloopEf+0x1c8>)
 8003de2:	edd3 7a00 	vldr	s15, [r3]
 8003de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dea:	edc7 7a04 	vstr	s15, [r7, #16]

	// set the maximal allowed voltage (voltage_limit) with the necessary angle
	driver.setPhaseVoltage(Uq, 0, _electricalAngle(shaft_angle, pole_pairs));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f503 74f4 	add.w	r4, r3, #488	@ 0x1e8
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003dfa:	4b18      	ldr	r3, [pc, #96]	@ (8003e5c <_ZN9simpleFOC13angleOpenloopEf+0x1d4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	eeb0 0a67 	vmov.f32	s0, s15
 8003e04:	f7fe fd74 	bl	80028f0 <_Z16_electricalAnglefi>
 8003e08:	eef0 7a40 	vmov.f32	s15, s0
 8003e0c:	eeb0 1a67 	vmov.f32	s2, s15
 8003e10:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8003e48 <_ZN9simpleFOC13angleOpenloopEf+0x1c0>
 8003e14:	ed97 0a04 	vldr	s0, [r7, #16]
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f7ff f8c9 	bl	8002fb0 <_ZN11pwm_drivers15setPhaseVoltageEfff>

	open_loop_timestamp = now_us;
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	return Uq;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	ee07 3a90 	vmov	s15, r3
}
 8003e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	ecbd 8b02 	vpop	{d8}
 8003e38:	bd90      	pop	{r4, r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	f3af 8000 	nop.w
 8003e40:	3a83126f 	.word	0x3a83126f
 8003e44:	200000b8 	.word	0x200000b8
 8003e48:	00000000 	.word	0x00000000
 8003e4c:	200000b0 	.word	0x200000b0
 8003e50:	200000a0 	.word	0x200000a0
 8003e54:	c640e400 	.word	0xc640e400
 8003e58:	200000b4 	.word	0x200000b4
 8003e5c:	200000a8 	.word	0x200000a8
 8003e60:	a0b5ed8d 	.word	0xa0b5ed8d
 8003e64:	3eb0c6f7 	.word	0x3eb0c6f7

08003e68 <_ZN9simpleFOC6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t simpleFOC::micros(void) 
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8003e6c:	4b07      	ldr	r3, [pc, #28]	@ (8003e8c <_ZN9simpleFOC6microsEv+0x24>)
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	4b07      	ldr	r3, [pc, #28]	@ (8003e90 <_ZN9simpleFOC6microsEv+0x28>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4907      	ldr	r1, [pc, #28]	@ (8003e94 <_ZN9simpleFOC6microsEv+0x2c>)
 8003e76:	fba1 1303 	umull	r1, r3, r1, r3
 8003e7a:	0c9b      	lsrs	r3, r3, #18
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	e0001000 	.word	0xe0001000
 8003e90:	200000c0 	.word	0x200000c0
 8003e94:	431bde83 	.word	0x431bde83

08003e98 <MX_CORDIC_Init>:

extern CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8003e9c:	4b06      	ldr	r3, [pc, #24]	@ (8003eb8 <MX_CORDIC_Init+0x20>)
 8003e9e:	4a07      	ldr	r2, [pc, #28]	@ (8003ebc <MX_CORDIC_Init+0x24>)
 8003ea0:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8003ea2:	4805      	ldr	r0, [pc, #20]	@ (8003eb8 <MX_CORDIC_Init+0x20>)
 8003ea4:	f002 fc82 	bl	80067ac <HAL_CORDIC_Init>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8003eae:	f000 fccf 	bl	8004850 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8003eb2:	bf00      	nop
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	200005d8 	.word	0x200005d8
 8003ebc:	40020c00 	.word	0x40020c00

08003ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ec4:	f001 f8c7 	bl	8005056 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ec8:	f000 f888 	bl	8003fdc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ecc:	f000 fc1e 	bl	800470c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003ed0:	f000 fbea 	bl	80046a8 <_ZL11MX_DMA_Initv>
  MX_SPI1_Init();
 8003ed4:	f000 fa5a 	bl	800438c <_ZL12MX_SPI1_Initv>
  MX_ADC1_Init();
 8003ed8:	f000 f8d6 	bl	8004088 <_ZL12MX_ADC1_Initv>
  MX_FDCAN1_Init();
 8003edc:	f000 f9f2 	bl	80042c4 <_ZL14MX_FDCAN1_Initv>
  MX_TIM1_Init();
 8003ee0:	f000 fa96 	bl	8004410 <_ZL12MX_TIM1_Initv>
  MX_ADC2_Init();
 8003ee4:	f000 f956 	bl	8004194 <_ZL12MX_ADC2_Initv>
  MX_CORDIC_Init();
 8003ee8:	f7ff ffd6 	bl	8003e98 <MX_CORDIC_Init>
  MX_CRC_Init();
 8003eec:	f000 f9c2 	bl	8004274 <_ZL11MX_CRC_Initv>
  MX_FMAC_Init();
 8003ef0:	f000 fa34 	bl	800435c <_ZL12MX_FMAC_Initv>
  MX_TIM2_Init();
 8003ef4:	f000 fb7c 	bl	80045f0 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  	  //  Delay SETUP
	DWT_Init();
 8003ef8:	f000 fc68 	bl	80047cc <_ZL8DWT_Initv>
	//  Timer Interrupt tim2,tim4
  	HAL_TIM_Base_Start_IT(&htim2);
 8003efc:	482c      	ldr	r0, [pc, #176]	@ (8003fb0 <main+0xf0>)
 8003efe:	f005 fb07 	bl	8009510 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);  // Enable
 8003f02:	2201      	movs	r2, #1
 8003f04:	2101      	movs	r1, #1
 8003f06:	482b      	ldr	r0, [pc, #172]	@ (8003fb4 <main+0xf4>)
 8003f08:	f003 fe7a 	bl	8007c00 <HAL_GPIO_WritePin>
//	  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);  // Disable

	//SPI SETUP
	simpleFOC.initSensors();
 8003f0c:	482a      	ldr	r0, [pc, #168]	@ (8003fb8 <main+0xf8>)
 8003f0e:	f7ff fb79 	bl	8003604 <_ZN9simpleFOC11initSensorsEv>
	//FOC SETUP
//  	simpleFOC.initFOC(0.564893246, CW);
  	simpleFOC.initFOC(NOT_SET, UNKNOWN);
 8003f12:	2100      	movs	r1, #0
 8003f14:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8003fbc <main+0xfc>
 8003f18:	4827      	ldr	r0, [pc, #156]	@ (8003fb8 <main+0xf8>)
 8003f1a:	f7ff fd99 	bl	8003a50 <_ZN9simpleFOC7initFOCEf9Direction>

	  /** Test Gate Drive	**/
//	  simpleFOC.driver.writeDutyCycle3PWM(0.2, 0.5, 0.8);  // Test Drive PWM for 3-phases [/]

	  /** Test Current Sensor **/
	  abc_current_debug = simpleFOC.CurrentSensor.getPhaseCurrents();
 8003f1e:	4828      	ldr	r0, [pc, #160]	@ (8003fc0 <main+0x100>)
 8003f20:	f7fd fb0a 	bl	8001538 <_ZN12CurrentSense16getPhaseCurrentsEv>
 8003f24:	eef0 6a40 	vmov.f32	s13, s0
 8003f28:	eeb0 7a60 	vmov.f32	s14, s1
 8003f2c:	eef0 7a41 	vmov.f32	s15, s2
 8003f30:	4b24      	ldr	r3, [pc, #144]	@ (8003fc4 <main+0x104>)
 8003f32:	edc3 6a00 	vstr	s13, [r3]
 8003f36:	ed83 7a01 	vstr	s14, [r3, #4]
 8003f3a:	edc3 7a02 	vstr	s15, [r3, #8]
//	  simpleFOC.angleOpenloop(0.0f);		  // Test move angle open loop [/] : Should set phase resistance


	  /** Test Closed Loop Control **/
//	  simpleFOC.move_torque(setpoint_cmd);			// 14 us
	  simpleFOC.move_velocity(setpoint_cmd);		// 21 us  maximum 100 rad/s --> 950 rpm
 8003f3e:	4b22      	ldr	r3, [pc, #136]	@ (8003fc8 <main+0x108>)
 8003f40:	edd3 7a00 	vldr	s15, [r3]
 8003f44:	eeb0 0a67 	vmov.f32	s0, s15
 8003f48:	481b      	ldr	r0, [pc, #108]	@ (8003fb8 <main+0xf8>)
 8003f4a:	f7ff fe4b 	bl	8003be4 <_ZN9simpleFOC13move_velocityEf>
//	  simpleFOC.move_angle(setpoint_cmd);			// 26 us

	  /** Always run loopFOC (except open loop control)**/
	  simpleFOC.loopFOC();							// 115 us
 8003f4e:	481a      	ldr	r0, [pc, #104]	@ (8003fb8 <main+0xf8>)
 8003f50:	f7ff fdb6 	bl	8003ac0 <_ZN9simpleFOC7loopFOCEv>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  t5 = micros() - t4;
 8003f54:	f000 fc52 	bl	80047fc <_ZL6microsv>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8003fcc <main+0x10c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd0 <main+0x110>)
 8003f62:	6013      	str	r3, [r2, #0]
	  t4 = micros();
 8003f64:	f000 fc4a 	bl	80047fc <_ZL6microsv>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	4a18      	ldr	r2, [pc, #96]	@ (8003fcc <main+0x10c>)
 8003f6c:	6013      	str	r3, [r2, #0]
	  loop_freq = 1.0 / (t5 * 1e-6);
 8003f6e:	4b18      	ldr	r3, [pc, #96]	@ (8003fd0 <main+0x110>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fc fa92 	bl	800049c <__aeabi_ui2d>
 8003f78:	a30b      	add	r3, pc, #44	@ (adr r3, 8003fa8 <main+0xe8>)
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	f7fc fb07 	bl	8000590 <__aeabi_dmul>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	f04f 0000 	mov.w	r0, #0
 8003f8a:	4912      	ldr	r1, [pc, #72]	@ (8003fd4 <main+0x114>)
 8003f8c:	f7fc fc2a 	bl	80007e4 <__aeabi_ddiv>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4610      	mov	r0, r2
 8003f96:	4619      	mov	r1, r3
 8003f98:	f7fc fdaa 	bl	8000af0 <__aeabi_d2f>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd8 <main+0x118>)
 8003fa0:	6013      	str	r3, [r2, #0]
	  abc_current_debug = simpleFOC.CurrentSensor.getPhaseCurrents();
 8003fa2:	bf00      	nop
 8003fa4:	e7bb      	b.n	8003f1e <main+0x5e>
 8003fa6:	bf00      	nop
 8003fa8:	a0b5ed8d 	.word	0xa0b5ed8d
 8003fac:	3eb0c6f7 	.word	0x3eb0c6f7
 8003fb0:	20000770 	.word	0x20000770
 8003fb4:	48000400 	.word	0x48000400
 8003fb8:	20000210 	.word	0x20000210
 8003fbc:	c640e400 	.word	0xc640e400
 8003fc0:	200002c8 	.word	0x200002c8
 8003fc4:	200007c8 	.word	0x200007c8
 8003fc8:	200000bc 	.word	0x200000bc
 8003fcc:	200007bc 	.word	0x200007bc
 8003fd0:	200007c0 	.word	0x200007c0
 8003fd4:	3ff00000 	.word	0x3ff00000
 8003fd8:	200007c4 	.word	0x200007c4

08003fdc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b094      	sub	sp, #80	@ 0x50
 8003fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fe2:	f107 0318 	add.w	r3, r7, #24
 8003fe6:	2238      	movs	r2, #56	@ 0x38
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f008 f8c8 	bl	800c180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ff0:	1d3b      	adds	r3, r7, #4
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	605a      	str	r2, [r3, #4]
 8003ff8:	609a      	str	r2, [r3, #8]
 8003ffa:	60da      	str	r2, [r3, #12]
 8003ffc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003ffe:	2000      	movs	r0, #0
 8004000:	f003 fe16 	bl	8007c30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004004:	2302      	movs	r3, #2
 8004006:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004008:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800400c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800400e:	2340      	movs	r3, #64	@ 0x40
 8004010:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004012:	2302      	movs	r3, #2
 8004014:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004016:	2302      	movs	r3, #2
 8004018:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800401a:	2304      	movs	r3, #4
 800401c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800401e:	2355      	movs	r3, #85	@ 0x55
 8004020:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004022:	2302      	movs	r3, #2
 8004024:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004026:	2302      	movs	r3, #2
 8004028:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800402a:	2302      	movs	r3, #2
 800402c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800402e:	f107 0318 	add.w	r3, r7, #24
 8004032:	4618      	mov	r0, r3
 8004034:	f003 feb0 	bl	8007d98 <HAL_RCC_OscConfig>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf14      	ite	ne
 800403e:	2301      	movne	r3, #1
 8004040:	2300      	moveq	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8004048:	f000 fc02 	bl	8004850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800404c:	230f      	movs	r3, #15
 800404e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004050:	2303      	movs	r3, #3
 8004052:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004058:	2300      	movs	r3, #0
 800405a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004060:	1d3b      	adds	r3, r7, #4
 8004062:	2104      	movs	r1, #4
 8004064:	4618      	mov	r0, r3
 8004066:	f004 f9a9 	bl	80083bc <HAL_RCC_ClockConfig>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf14      	ite	ne
 8004070:	2301      	movne	r3, #1
 8004072:	2300      	moveq	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800407a:	f000 fbe9 	bl	8004850 <Error_Handler>
  }
}
 800407e:	bf00      	nop
 8004080:	3750      	adds	r7, #80	@ 0x50
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08c      	sub	sp, #48	@ 0x30
 800408c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800408e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	605a      	str	r2, [r3, #4]
 8004098:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800409a:	1d3b      	adds	r3, r7, #4
 800409c:	2220      	movs	r2, #32
 800409e:	2100      	movs	r1, #0
 80040a0:	4618      	mov	r0, r3
 80040a2:	f008 f86d 	bl	800c180 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80040a6:	4b39      	ldr	r3, [pc, #228]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 80040a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80040ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80040ae:	4b37      	ldr	r3, [pc, #220]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 80040b0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80040b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80040b6:	4b35      	ldr	r3, [pc, #212]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040bc:	4b33      	ldr	r3, [pc, #204]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 80040be:	2200      	movs	r2, #0
 80040c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80040c2:	4b32      	ldr	r3, [pc, #200]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80040c8:	4b30      	ldr	r3, [pc, #192]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040ce:	4b2f      	ldr	r3, [pc, #188]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 80040d0:	2204      	movs	r2, #4
 80040d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80040d4:	4b2d      	ldr	r3, [pc, #180]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80040da:	4b2c      	ldr	r3, [pc, #176]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 80040dc:	2201      	movs	r2, #1
 80040de:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80040e0:	4b2a      	ldr	r3, [pc, #168]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80040e6:	4b29      	ldr	r3, [pc, #164]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80040ee:	4b27      	ldr	r3, [pc, #156]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80040f4:	4b25      	ldr	r3, [pc, #148]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80040fa:	4b24      	ldr	r3, [pc, #144]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004102:	4b22      	ldr	r3, [pc, #136]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 8004104:	2200      	movs	r2, #0
 8004106:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004108:	4b20      	ldr	r3, [pc, #128]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004110:	481e      	ldr	r0, [pc, #120]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 8004112:	f001 fa51 	bl	80055b8 <HAL_ADC_Init>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	bf14      	ite	ne
 800411c:	2301      	movne	r3, #1
 800411e:	2300      	moveq	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8004126:	f000 fb93 	bl	8004850 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800412a:	2300      	movs	r3, #0
 800412c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800412e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004132:	4619      	mov	r1, r3
 8004134:	4815      	ldr	r0, [pc, #84]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 8004136:	f002 fa51 	bl	80065dc <HAL_ADCEx_MultiModeConfigChannel>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf14      	ite	ne
 8004140:	2301      	movne	r3, #1
 8004142:	2300      	moveq	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 800414a:	f000 fb81 	bl	8004850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800414e:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <_ZL12MX_ADC1_Initv+0x108>)
 8004150:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004152:	2306      	movs	r3, #6
 8004154:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004156:	2307      	movs	r3, #7
 8004158:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800415a:	237f      	movs	r3, #127	@ 0x7f
 800415c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800415e:	2304      	movs	r3, #4
 8004160:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004162:	2300      	movs	r3, #0
 8004164:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004166:	1d3b      	adds	r3, r7, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4808      	ldr	r0, [pc, #32]	@ (800418c <_ZL12MX_ADC1_Initv+0x104>)
 800416c:	f001 fcba 	bl	8005ae4 <HAL_ADC_ConfigChannel>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	bf14      	ite	ne
 8004176:	2301      	movne	r3, #1
 8004178:	2300      	moveq	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 8004180:	f000 fb66 	bl	8004850 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004184:	bf00      	nop
 8004186:	3730      	adds	r7, #48	@ 0x30
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20000440 	.word	0x20000440
 8004190:	04300002 	.word	0x04300002

08004194 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800419a:	463b      	mov	r3, r7
 800419c:	2220      	movs	r2, #32
 800419e:	2100      	movs	r1, #0
 80041a0:	4618      	mov	r0, r3
 80041a2:	f007 ffed 	bl	800c180 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80041a6:	4b30      	ldr	r3, [pc, #192]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 80041a8:	4a30      	ldr	r2, [pc, #192]	@ (800426c <_ZL12MX_ADC2_Initv+0xd8>)
 80041aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80041ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 80041ae:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80041b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80041b4:	4b2c      	ldr	r3, [pc, #176]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 80041bc:	2200      	movs	r2, #0
 80041be:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80041c0:	4b29      	ldr	r3, [pc, #164]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80041c6:	4b28      	ldr	r3, [pc, #160]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80041cc:	4b26      	ldr	r3, [pc, #152]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 80041ce:	2204      	movs	r2, #4
 80041d0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80041d2:	4b25      	ldr	r3, [pc, #148]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80041d8:	4b23      	ldr	r3, [pc, #140]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 80041da:	2201      	movs	r2, #1
 80041dc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80041de:	4b22      	ldr	r3, [pc, #136]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80041e4:	4b20      	ldr	r3, [pc, #128]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80041f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80041f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004200:	4b19      	ldr	r3, [pc, #100]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 8004202:	2200      	movs	r2, #0
 8004204:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8004206:	4b18      	ldr	r3, [pc, #96]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800420e:	4816      	ldr	r0, [pc, #88]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 8004210:	f001 f9d2 	bl	80055b8 <HAL_ADC_Init>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	bf14      	ite	ne
 800421a:	2301      	movne	r3, #1
 800421c:	2300      	moveq	r3, #0
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 8004224:	f000 fb14 	bl	8004850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004228:	4b11      	ldr	r3, [pc, #68]	@ (8004270 <_ZL12MX_ADC2_Initv+0xdc>)
 800422a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800422c:	2306      	movs	r3, #6
 800422e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004230:	2307      	movs	r3, #7
 8004232:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004234:	237f      	movs	r3, #127	@ 0x7f
 8004236:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004238:	2304      	movs	r3, #4
 800423a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004240:	463b      	mov	r3, r7
 8004242:	4619      	mov	r1, r3
 8004244:	4808      	ldr	r0, [pc, #32]	@ (8004268 <_ZL12MX_ADC2_Initv+0xd4>)
 8004246:	f001 fc4d 	bl	8005ae4 <HAL_ADC_ConfigChannel>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 800425a:	f000 faf9 	bl	8004850 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800425e:	bf00      	nop
 8004260:	3720      	adds	r7, #32
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	200004ac 	.word	0x200004ac
 800426c:	50000100 	.word	0x50000100
 8004270:	08600004 	.word	0x08600004

08004274 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004278:	4b10      	ldr	r3, [pc, #64]	@ (80042bc <_ZL11MX_CRC_Initv+0x48>)
 800427a:	4a11      	ldr	r2, [pc, #68]	@ (80042c0 <_ZL11MX_CRC_Initv+0x4c>)
 800427c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800427e:	4b0f      	ldr	r3, [pc, #60]	@ (80042bc <_ZL11MX_CRC_Initv+0x48>)
 8004280:	2200      	movs	r2, #0
 8004282:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8004284:	4b0d      	ldr	r3, [pc, #52]	@ (80042bc <_ZL11MX_CRC_Initv+0x48>)
 8004286:	2200      	movs	r2, #0
 8004288:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800428a:	4b0c      	ldr	r3, [pc, #48]	@ (80042bc <_ZL11MX_CRC_Initv+0x48>)
 800428c:	2200      	movs	r2, #0
 800428e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004290:	4b0a      	ldr	r3, [pc, #40]	@ (80042bc <_ZL11MX_CRC_Initv+0x48>)
 8004292:	2200      	movs	r2, #0
 8004294:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004296:	4b09      	ldr	r3, [pc, #36]	@ (80042bc <_ZL11MX_CRC_Initv+0x48>)
 8004298:	2201      	movs	r2, #1
 800429a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800429c:	4807      	ldr	r0, [pc, #28]	@ (80042bc <_ZL11MX_CRC_Initv+0x48>)
 800429e:	f002 fbc7 	bl	8006a30 <HAL_CRC_Init>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 80042b2:	f000 facd 	bl	8004850 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80042b6:	bf00      	nop
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20000600 	.word	0x20000600
 80042c0:	40023000 	.word	0x40023000

080042c4 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80042c8:	4b22      	ldr	r3, [pc, #136]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 80042ca:	4a23      	ldr	r2, [pc, #140]	@ (8004358 <_ZL14MX_FDCAN1_Initv+0x94>)
 80042cc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80042ce:	4b21      	ldr	r3, [pc, #132]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80042d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80042da:	4b1e      	ldr	r3, [pc, #120]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 80042dc:	2200      	movs	r2, #0
 80042de:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80042e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80042e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80042ec:	4b19      	ldr	r3, [pc, #100]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = NomPS;
 80042f2:	4b18      	ldr	r3, [pc, #96]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 80042f4:	2202      	movs	r2, #2
 80042f6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 80042f8:	4b16      	ldr	r3, [pc, #88]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 80042fa:	220b      	movs	r2, #11
 80042fc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 73;
 80042fe:	4b15      	ldr	r3, [pc, #84]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 8004300:	2249      	movs	r2, #73	@ 0x49
 8004302:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 8004304:	4b13      	ldr	r3, [pc, #76]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 8004306:	220b      	movs	r2, #11
 8004308:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = DataPS;
 800430a:	4b12      	ldr	r3, [pc, #72]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 800430c:	2205      	movs	r2, #5
 800430e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 15;
 8004310:	4b10      	ldr	r3, [pc, #64]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 8004312:	220f      	movs	r2, #15
 8004314:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 18;
 8004316:	4b0f      	ldr	r3, [pc, #60]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 8004318:	2212      	movs	r2, #18
 800431a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 15;
 800431c:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 800431e:	220f      	movs	r2, #15
 8004320:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 10;
 8004322:	4b0c      	ldr	r3, [pc, #48]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 8004324:	220a      	movs	r2, #10
 8004326:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8004328:	4b0a      	ldr	r3, [pc, #40]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 800432a:	2200      	movs	r2, #0
 800432c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800432e:	4b09      	ldr	r3, [pc, #36]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 8004330:	2200      	movs	r2, #0
 8004332:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8004334:	4807      	ldr	r0, [pc, #28]	@ (8004354 <_ZL14MX_FDCAN1_Initv+0x90>)
 8004336:	f002 fedf 	bl	80070f8 <HAL_FDCAN_Init>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	bf14      	ite	ne
 8004340:	2301      	movne	r3, #1
 8004342:	2300      	moveq	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 800434a:	f000 fa81 	bl	8004850 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000624 	.word	0x20000624
 8004358:	40006400 	.word	0x40006400

0800435c <_ZL12MX_FMAC_Initv>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8004360:	4b08      	ldr	r3, [pc, #32]	@ (8004384 <_ZL12MX_FMAC_Initv+0x28>)
 8004362:	4a09      	ldr	r2, [pc, #36]	@ (8004388 <_ZL12MX_FMAC_Initv+0x2c>)
 8004364:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8004366:	4807      	ldr	r0, [pc, #28]	@ (8004384 <_ZL12MX_FMAC_Initv+0x28>)
 8004368:	f003 fa1c 	bl	80077a4 <HAL_FMAC_Init>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	bf14      	ite	ne
 8004372:	2301      	movne	r3, #1
 8004374:	2300      	moveq	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <_ZL12MX_FMAC_Initv+0x24>
  {
    Error_Handler();
 800437c:	f000 fa68 	bl	8004850 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8004380:	bf00      	nop
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20000688 	.word	0x20000688
 8004388:	40021400 	.word	0x40021400

0800438c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004390:	4b1d      	ldr	r3, [pc, #116]	@ (8004408 <_ZL12MX_SPI1_Initv+0x7c>)
 8004392:	4a1e      	ldr	r2, [pc, #120]	@ (800440c <_ZL12MX_SPI1_Initv+0x80>)
 8004394:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004396:	4b1c      	ldr	r3, [pc, #112]	@ (8004408 <_ZL12MX_SPI1_Initv+0x7c>)
 8004398:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800439c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800439e:	4b1a      	ldr	r3, [pc, #104]	@ (8004408 <_ZL12MX_SPI1_Initv+0x7c>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80043a4:	4b18      	ldr	r3, [pc, #96]	@ (8004408 <_ZL12MX_SPI1_Initv+0x7c>)
 80043a6:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80043aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043ac:	4b16      	ldr	r3, [pc, #88]	@ (8004408 <_ZL12MX_SPI1_Initv+0x7c>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80043b2:	4b15      	ldr	r3, [pc, #84]	@ (8004408 <_ZL12MX_SPI1_Initv+0x7c>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80043b8:	4b13      	ldr	r3, [pc, #76]	@ (8004408 <_ZL12MX_SPI1_Initv+0x7c>)
 80043ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80043c0:	4b11      	ldr	r3, [pc, #68]	@ (8004408 <_ZL12MX_SPI1_Initv+0x7c>)
 80043c2:	2218      	movs	r2, #24
 80043c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043c6:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <_ZL12MX_SPI1_Initv+0x7c>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80043cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004408 <_ZL12MX_SPI1_Initv+0x7c>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004408 <_ZL12MX_SPI1_Initv+0x7c>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80043d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004408 <_ZL12MX_SPI1_Initv+0x7c>)
 80043da:	2207      	movs	r2, #7
 80043dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80043de:	4b0a      	ldr	r3, [pc, #40]	@ (8004408 <_ZL12MX_SPI1_Initv+0x7c>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80043e4:	4b08      	ldr	r3, [pc, #32]	@ (8004408 <_ZL12MX_SPI1_Initv+0x7c>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80043ea:	4807      	ldr	r0, [pc, #28]	@ (8004408 <_ZL12MX_SPI1_Initv+0x7c>)
 80043ec:	f004 fc06 	bl	8008bfc <HAL_SPI_Init>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bf14      	ite	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	2300      	moveq	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8004400:	f000 fa26 	bl	8004850 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004404:	bf00      	nop
 8004406:	bd80      	pop	{r7, pc}
 8004408:	200006c0 	.word	0x200006c0
 800440c:	40013000 	.word	0x40013000

08004410 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b09c      	sub	sp, #112	@ 0x70
 8004414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004416:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	605a      	str	r2, [r3, #4]
 8004420:	609a      	str	r2, [r3, #8]
 8004422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004424:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004430:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	611a      	str	r2, [r3, #16]
 8004440:	615a      	str	r2, [r3, #20]
 8004442:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004444:	1d3b      	adds	r3, r7, #4
 8004446:	2234      	movs	r2, #52	@ 0x34
 8004448:	2100      	movs	r1, #0
 800444a:	4618      	mov	r0, r3
 800444c:	f007 fe98 	bl	800c180 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004450:	4b65      	ldr	r3, [pc, #404]	@ (80045e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 8004452:	4a66      	ldr	r2, [pc, #408]	@ (80045ec <_ZL12MX_TIM1_Initv+0x1dc>)
 8004454:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004456:	4b64      	ldr	r3, [pc, #400]	@ (80045e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 8004458:	2200      	movs	r2, #0
 800445a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800445c:	4b62      	ldr	r3, [pc, #392]	@ (80045e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 800445e:	2220      	movs	r2, #32
 8004460:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 8004462:	4b61      	ldr	r3, [pc, #388]	@ (80045e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 8004464:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8004468:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800446a:	4b5f      	ldr	r3, [pc, #380]	@ (80045e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 800446c:	2200      	movs	r2, #0
 800446e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8004470:	4b5d      	ldr	r3, [pc, #372]	@ (80045e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 8004472:	2201      	movs	r2, #1
 8004474:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004476:	4b5c      	ldr	r3, [pc, #368]	@ (80045e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 8004478:	2280      	movs	r2, #128	@ 0x80
 800447a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800447c:	485a      	ldr	r0, [pc, #360]	@ (80045e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 800447e:	f004 ffef 	bl	8009460 <HAL_TIM_Base_Init>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf14      	ite	ne
 8004488:	2301      	movne	r3, #1
 800448a:	2300      	moveq	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 8004492:	f000 f9dd 	bl	8004850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004496:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800449a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800449c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80044a0:	4619      	mov	r1, r3
 80044a2:	4851      	ldr	r0, [pc, #324]	@ (80045e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 80044a4:	f005 fc76 	bl	8009d94 <HAL_TIM_ConfigClockSource>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	bf14      	ite	ne
 80044ae:	2301      	movne	r3, #1
 80044b0:	2300      	moveq	r3, #0
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 80044b8:	f000 f9ca 	bl	8004850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80044bc:	484a      	ldr	r0, [pc, #296]	@ (80045e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 80044be:	f005 f897 	bl	80095f0 <HAL_TIM_PWM_Init>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf14      	ite	ne
 80044c8:	2301      	movne	r3, #1
 80044ca:	2300      	moveq	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 80044d2:	f000 f9bd 	bl	8004850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044d6:	2300      	movs	r3, #0
 80044d8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80044da:	2300      	movs	r3, #0
 80044dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044de:	2300      	movs	r3, #0
 80044e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80044e6:	4619      	mov	r1, r3
 80044e8:	483f      	ldr	r0, [pc, #252]	@ (80045e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 80044ea:	f006 fa15 	bl	800a918 <HAL_TIMEx_MasterConfigSynchronization>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bf14      	ite	ne
 80044f4:	2301      	movne	r3, #1
 80044f6:	2300      	moveq	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 80044fe:	f000 f9a7 	bl	8004850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004502:	2360      	movs	r3, #96	@ 0x60
 8004504:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800450a:	2302      	movs	r3, #2
 800450c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800450e:	2300      	movs	r3, #0
 8004510:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004512:	2304      	movs	r3, #4
 8004514:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004516:	2300      	movs	r3, #0
 8004518:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800451a:	2300      	movs	r3, #0
 800451c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800451e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004522:	2200      	movs	r2, #0
 8004524:	4619      	mov	r1, r3
 8004526:	4830      	ldr	r0, [pc, #192]	@ (80045e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 8004528:	f005 fb20 	bl	8009b6c <HAL_TIM_PWM_ConfigChannel>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	bf14      	ite	ne
 8004532:	2301      	movne	r3, #1
 8004534:	2300      	moveq	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <_ZL12MX_TIM1_Initv+0x130>
  {
    Error_Handler();
 800453c:	f000 f988 	bl	8004850 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004540:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004544:	2204      	movs	r2, #4
 8004546:	4619      	mov	r1, r3
 8004548:	4827      	ldr	r0, [pc, #156]	@ (80045e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 800454a:	f005 fb0f 	bl	8009b6c <HAL_TIM_PWM_ConfigChannel>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	bf14      	ite	ne
 8004554:	2301      	movne	r3, #1
 8004556:	2300      	moveq	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 800455e:	f000 f977 	bl	8004850 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004562:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004566:	2208      	movs	r2, #8
 8004568:	4619      	mov	r1, r3
 800456a:	481f      	ldr	r0, [pc, #124]	@ (80045e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 800456c:	f005 fafe 	bl	8009b6c <HAL_TIM_PWM_ConfigChannel>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	bf14      	ite	ne
 8004576:	2301      	movne	r3, #1
 8004578:	2300      	moveq	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <_ZL12MX_TIM1_Initv+0x174>
  {
    Error_Handler();
 8004580:	f000 f966 	bl	8004850 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004584:	2300      	movs	r3, #0
 8004586:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004588:	2300      	movs	r3, #0
 800458a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004598:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800459c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80045a2:	2300      	movs	r3, #0
 80045a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80045aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80045b4:	2300      	movs	r3, #0
 80045b6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80045bc:	1d3b      	adds	r3, r7, #4
 80045be:	4619      	mov	r1, r3
 80045c0:	4809      	ldr	r0, [pc, #36]	@ (80045e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 80045c2:	f006 fa37 	bl	800aa34 <HAL_TIMEx_ConfigBreakDeadTime>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf14      	ite	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	2300      	moveq	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <_ZL12MX_TIM1_Initv+0x1ca>
  {
    Error_Handler();
 80045d6:	f000 f93b 	bl	8004850 <Error_Handler>
//  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
//      // Master configuration error
//      Error_Handler();
//  }
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80045da:	4803      	ldr	r0, [pc, #12]	@ (80045e8 <_ZL12MX_TIM1_Initv+0x1d8>)
 80045dc:	f000 fbfa 	bl	8004dd4 <HAL_TIM_MspPostInit>

}
 80045e0:	bf00      	nop
 80045e2:	3770      	adds	r7, #112	@ 0x70
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	20000724 	.word	0x20000724
 80045ec:	40012c00 	.word	0x40012c00

080045f0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045f6:	f107 0310 	add.w	r3, r7, #16
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	605a      	str	r2, [r3, #4]
 8004600:	609a      	str	r2, [r3, #8]
 8004602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004604:	1d3b      	adds	r3, r7, #4
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	605a      	str	r2, [r3, #4]
 800460c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800460e:	4b25      	ldr	r3, [pc, #148]	@ (80046a4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004610:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004614:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1700-1;
 8004616:	4b23      	ldr	r3, [pc, #140]	@ (80046a4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004618:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800461c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800461e:	4b21      	ldr	r3, [pc, #132]	@ (80046a4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004620:	2200      	movs	r2, #0
 8004622:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8004624:	4b1f      	ldr	r3, [pc, #124]	@ (80046a4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004626:	2263      	movs	r2, #99	@ 0x63
 8004628:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800462a:	4b1e      	ldr	r3, [pc, #120]	@ (80046a4 <_ZL12MX_TIM2_Initv+0xb4>)
 800462c:	2200      	movs	r2, #0
 800462e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004630:	4b1c      	ldr	r3, [pc, #112]	@ (80046a4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004632:	2200      	movs	r2, #0
 8004634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004636:	481b      	ldr	r0, [pc, #108]	@ (80046a4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004638:	f004 ff12 	bl	8009460 <HAL_TIM_Base_Init>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	bf14      	ite	ne
 8004642:	2301      	movne	r3, #1
 8004644:	2300      	moveq	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 800464c:	f000 f900 	bl	8004850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004650:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004654:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004656:	f107 0310 	add.w	r3, r7, #16
 800465a:	4619      	mov	r1, r3
 800465c:	4811      	ldr	r0, [pc, #68]	@ (80046a4 <_ZL12MX_TIM2_Initv+0xb4>)
 800465e:	f005 fb99 	bl	8009d94 <HAL_TIM_ConfigClockSource>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf14      	ite	ne
 8004668:	2301      	movne	r3, #1
 800466a:	2300      	moveq	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8004672:	f000 f8ed 	bl	8004850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004676:	2300      	movs	r3, #0
 8004678:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800467e:	1d3b      	adds	r3, r7, #4
 8004680:	4619      	mov	r1, r3
 8004682:	4808      	ldr	r0, [pc, #32]	@ (80046a4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004684:	f006 f948 	bl	800a918 <HAL_TIMEx_MasterConfigSynchronization>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	bf14      	ite	ne
 800468e:	2301      	movne	r3, #1
 8004690:	2300      	moveq	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8004698:	f000 f8da 	bl	8004850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800469c:	bf00      	nop
 800469e:	3720      	adds	r7, #32
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20000770 	.word	0x20000770

080046a8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80046ae:	4b16      	ldr	r3, [pc, #88]	@ (8004708 <_ZL11MX_DMA_Initv+0x60>)
 80046b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046b2:	4a15      	ldr	r2, [pc, #84]	@ (8004708 <_ZL11MX_DMA_Initv+0x60>)
 80046b4:	f043 0304 	orr.w	r3, r3, #4
 80046b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80046ba:	4b13      	ldr	r3, [pc, #76]	@ (8004708 <_ZL11MX_DMA_Initv+0x60>)
 80046bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	607b      	str	r3, [r7, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80046c6:	4b10      	ldr	r3, [pc, #64]	@ (8004708 <_ZL11MX_DMA_Initv+0x60>)
 80046c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004708 <_ZL11MX_DMA_Initv+0x60>)
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80046d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004708 <_ZL11MX_DMA_Initv+0x60>)
 80046d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80046de:	2200      	movs	r2, #0
 80046e0:	2100      	movs	r1, #0
 80046e2:	200b      	movs	r0, #11
 80046e4:	f002 f96f 	bl	80069c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80046e8:	200b      	movs	r0, #11
 80046ea:	f002 f986 	bl	80069fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80046ee:	2200      	movs	r2, #0
 80046f0:	2100      	movs	r1, #0
 80046f2:	200c      	movs	r0, #12
 80046f4:	f002 f967 	bl	80069c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80046f8:	200c      	movs	r0, #12
 80046fa:	f002 f97e 	bl	80069fa <HAL_NVIC_EnableIRQ>

}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40021000 	.word	0x40021000

0800470c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004712:	f107 030c 	add.w	r3, r7, #12
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	605a      	str	r2, [r3, #4]
 800471c:	609a      	str	r2, [r3, #8]
 800471e:	60da      	str	r2, [r3, #12]
 8004720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004722:	4b28      	ldr	r3, [pc, #160]	@ (80047c4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004726:	4a27      	ldr	r2, [pc, #156]	@ (80047c4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004728:	f043 0320 	orr.w	r3, r3, #32
 800472c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800472e:	4b25      	ldr	r3, [pc, #148]	@ (80047c4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	60bb      	str	r3, [r7, #8]
 8004738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800473a:	4b22      	ldr	r3, [pc, #136]	@ (80047c4 <_ZL12MX_GPIO_Initv+0xb8>)
 800473c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800473e:	4a21      	ldr	r2, [pc, #132]	@ (80047c4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004746:	4b1f      	ldr	r3, [pc, #124]	@ (80047c4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	607b      	str	r3, [r7, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004752:	4b1c      	ldr	r3, [pc, #112]	@ (80047c4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004756:	4a1b      	ldr	r2, [pc, #108]	@ (80047c4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004758:	f043 0302 	orr.w	r3, r3, #2
 800475c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800475e:	4b19      	ldr	r3, [pc, #100]	@ (80047c4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 800476a:	2200      	movs	r2, #0
 800476c:	2110      	movs	r1, #16
 800476e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004772:	f003 fa45 	bl	8007c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8004776:	2200      	movs	r2, #0
 8004778:	2101      	movs	r1, #1
 800477a:	4813      	ldr	r0, [pc, #76]	@ (80047c8 <_ZL12MX_GPIO_Initv+0xbc>)
 800477c:	f003 fa40 	bl	8007c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8004780:	2310      	movs	r3, #16
 8004782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004784:	2301      	movs	r3, #1
 8004786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478c:	2300      	movs	r3, #0
 800478e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8004790:	f107 030c 	add.w	r3, r7, #12
 8004794:	4619      	mov	r1, r3
 8004796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800479a:	f003 f8af 	bl	80078fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800479e:	2301      	movs	r3, #1
 80047a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047a2:	2301      	movs	r3, #1
 80047a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80047ae:	f107 030c 	add.w	r3, r7, #12
 80047b2:	4619      	mov	r1, r3
 80047b4:	4804      	ldr	r0, [pc, #16]	@ (80047c8 <_ZL12MX_GPIO_Initv+0xbc>)
 80047b6:	f003 f8a1 	bl	80078fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80047ba:	bf00      	nop
 80047bc:	3720      	adds	r7, #32
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40021000 	.word	0x40021000
 80047c8:	48000400 	.word	0x48000400

080047cc <_ZL8DWT_Initv>:

/* USER CODE BEGIN 4 */
//Delay function
__STATIC_INLINE void DWT_Init(void) {
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80047d0:	4b08      	ldr	r3, [pc, #32]	@ (80047f4 <_ZL8DWT_Initv+0x28>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4a07      	ldr	r2, [pc, #28]	@ (80047f4 <_ZL8DWT_Initv+0x28>)
 80047d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047da:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Data watchpoint trigger(DWT)
 80047dc:	4b06      	ldr	r3, [pc, #24]	@ (80047f8 <_ZL8DWT_Initv+0x2c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a05      	ldr	r2, [pc, #20]	@ (80047f8 <_ZL8DWT_Initv+0x2c>)
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	6013      	str	r3, [r2, #0]
}
 80047e8:	bf00      	nop
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	e000edf0 	.word	0xe000edf0
 80047f8:	e0001000 	.word	0xe0001000

080047fc <_ZL6microsv>:
__STATIC_INLINE uint32_t micros(void) {
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
	return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8004800:	4b07      	ldr	r3, [pc, #28]	@ (8004820 <_ZL6microsv+0x24>)
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	4b07      	ldr	r3, [pc, #28]	@ (8004824 <_ZL6microsv+0x28>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4907      	ldr	r1, [pc, #28]	@ (8004828 <_ZL6microsv+0x2c>)
 800480a:	fba1 1303 	umull	r1, r3, r1, r3
 800480e:	0c9b      	lsrs	r3, r3, #18
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	e0001000 	.word	0xe0001000
 8004824:	200000c0 	.word	0x200000c0
 8004828:	431bde83 	.word	0x431bde83

0800482c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2) // 1000 Hz timer interrupt event
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800483c:	d102      	bne.n	8004844 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	  simpleFOC.Encoder.updateVelocity();
 800483e:	4803      	ldr	r0, [pc, #12]	@ (800484c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004840:	f7fc fc28 	bl	8001094 <_ZN17AS5048A_interface14updateVelocityEv>
  }
}
 8004844:	bf00      	nop
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	20000218 	.word	0x20000218

08004850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004854:	b672      	cpsid	i
}
 8004856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004858:	bf00      	nop
 800485a:	e7fd      	b.n	8004858 <Error_Handler+0x8>

0800485c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d107      	bne.n	800487c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004872:	4293      	cmp	r3, r2
 8004874:	d102      	bne.n	800487c <_Z41__static_initialization_and_destruction_0ii+0x20>
simpleFOC simpleFOC;
 8004876:	4809      	ldr	r0, [pc, #36]	@ (800489c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004878:	f7fe fe6c 	bl	8003554 <_ZN9simpleFOCC1Ev>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d107      	bne.n	8004892 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004888:	4293      	cmp	r3, r2
 800488a:	d102      	bne.n	8004892 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800488c:	4803      	ldr	r0, [pc, #12]	@ (800489c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800488e:	f7fe fe89 	bl	80035a4 <_ZN9simpleFOCD1Ev>
}
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	20000210 	.word	0x20000210

080048a0 <_GLOBAL__sub_I_simpleFOC>:
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80048a8:	2001      	movs	r0, #1
 80048aa:	f7ff ffd7 	bl	800485c <_Z41__static_initialization_and_destruction_0ii>
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <_GLOBAL__sub_D_simpleFOC>:
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80048b8:	2000      	movs	r0, #0
 80048ba:	f7ff ffcf 	bl	800485c <_Z41__static_initialization_and_destruction_0ii>
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004904 <HAL_MspInit+0x44>)
 80048c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004904 <HAL_MspInit+0x44>)
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80048d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004904 <HAL_MspInit+0x44>)
 80048d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	607b      	str	r3, [r7, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048de:	4b09      	ldr	r3, [pc, #36]	@ (8004904 <HAL_MspInit+0x44>)
 80048e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e2:	4a08      	ldr	r2, [pc, #32]	@ (8004904 <HAL_MspInit+0x44>)
 80048e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80048ea:	4b06      	ldr	r3, [pc, #24]	@ (8004904 <HAL_MspInit+0x44>)
 80048ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80048f6:	f003 fa3f 	bl	8007d78 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40021000 	.word	0x40021000

08004908 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b0a0      	sub	sp, #128	@ 0x80
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004910:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	605a      	str	r2, [r3, #4]
 800491a:	609a      	str	r2, [r3, #8]
 800491c:	60da      	str	r2, [r3, #12]
 800491e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004920:	f107 031c 	add.w	r3, r7, #28
 8004924:	2250      	movs	r2, #80	@ 0x50
 8004926:	2100      	movs	r1, #0
 8004928:	4618      	mov	r0, r3
 800492a:	f007 fc29 	bl	800c180 <memset>
  if(hadc->Instance==ADC1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004936:	d169      	bne.n	8004a0c <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004938:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800493c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800493e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004942:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004944:	f107 031c 	add.w	r3, r7, #28
 8004948:	4618      	mov	r0, r3
 800494a:	f003 ff1b 	bl	8008784 <HAL_RCCEx_PeriphCLKConfig>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004954:	f7ff ff7c 	bl	8004850 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004958:	4b65      	ldr	r3, [pc, #404]	@ (8004af0 <HAL_ADC_MspInit+0x1e8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3301      	adds	r3, #1
 800495e:	4a64      	ldr	r2, [pc, #400]	@ (8004af0 <HAL_ADC_MspInit+0x1e8>)
 8004960:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004962:	4b63      	ldr	r3, [pc, #396]	@ (8004af0 <HAL_ADC_MspInit+0x1e8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d10b      	bne.n	8004982 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800496a:	4b62      	ldr	r3, [pc, #392]	@ (8004af4 <HAL_ADC_MspInit+0x1ec>)
 800496c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800496e:	4a61      	ldr	r2, [pc, #388]	@ (8004af4 <HAL_ADC_MspInit+0x1ec>)
 8004970:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004976:	4b5f      	ldr	r3, [pc, #380]	@ (8004af4 <HAL_ADC_MspInit+0x1ec>)
 8004978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800497a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800497e:	61bb      	str	r3, [r7, #24]
 8004980:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004982:	4b5c      	ldr	r3, [pc, #368]	@ (8004af4 <HAL_ADC_MspInit+0x1ec>)
 8004984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004986:	4a5b      	ldr	r2, [pc, #364]	@ (8004af4 <HAL_ADC_MspInit+0x1ec>)
 8004988:	f043 0301 	orr.w	r3, r3, #1
 800498c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800498e:	4b59      	ldr	r3, [pc, #356]	@ (8004af4 <HAL_ADC_MspInit+0x1ec>)
 8004990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CSOA_Pin;
 800499a:	2301      	movs	r3, #1
 800499c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800499e:	2303      	movs	r3, #3
 80049a0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOA_GPIO_Port, &GPIO_InitStruct);
 80049a6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80049aa:	4619      	mov	r1, r3
 80049ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049b0:	f002 ffa4 	bl	80078fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80049b4:	4b50      	ldr	r3, [pc, #320]	@ (8004af8 <HAL_ADC_MspInit+0x1f0>)
 80049b6:	4a51      	ldr	r2, [pc, #324]	@ (8004afc <HAL_ADC_MspInit+0x1f4>)
 80049b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80049ba:	4b4f      	ldr	r3, [pc, #316]	@ (8004af8 <HAL_ADC_MspInit+0x1f0>)
 80049bc:	2205      	movs	r2, #5
 80049be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049c0:	4b4d      	ldr	r3, [pc, #308]	@ (8004af8 <HAL_ADC_MspInit+0x1f0>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80049c6:	4b4c      	ldr	r3, [pc, #304]	@ (8004af8 <HAL_ADC_MspInit+0x1f0>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80049cc:	4b4a      	ldr	r3, [pc, #296]	@ (8004af8 <HAL_ADC_MspInit+0x1f0>)
 80049ce:	2280      	movs	r2, #128	@ 0x80
 80049d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049d2:	4b49      	ldr	r3, [pc, #292]	@ (8004af8 <HAL_ADC_MspInit+0x1f0>)
 80049d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049da:	4b47      	ldr	r3, [pc, #284]	@ (8004af8 <HAL_ADC_MspInit+0x1f0>)
 80049dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80049e2:	4b45      	ldr	r3, [pc, #276]	@ (8004af8 <HAL_ADC_MspInit+0x1f0>)
 80049e4:	2220      	movs	r2, #32
 80049e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80049e8:	4b43      	ldr	r3, [pc, #268]	@ (8004af8 <HAL_ADC_MspInit+0x1f0>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80049ee:	4842      	ldr	r0, [pc, #264]	@ (8004af8 <HAL_ADC_MspInit+0x1f0>)
 80049f0:	f002 f910 	bl	8006c14 <HAL_DMA_Init>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80049fa:	f7ff ff29 	bl	8004850 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a3d      	ldr	r2, [pc, #244]	@ (8004af8 <HAL_ADC_MspInit+0x1f0>)
 8004a02:	655a      	str	r2, [r3, #84]	@ 0x54
 8004a04:	4a3c      	ldr	r2, [pc, #240]	@ (8004af8 <HAL_ADC_MspInit+0x1f0>)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004a0a:	e06d      	b.n	8004ae8 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a3b      	ldr	r2, [pc, #236]	@ (8004b00 <HAL_ADC_MspInit+0x1f8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d168      	bne.n	8004ae8 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004a16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a1a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004a1c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a22:	f107 031c 	add.w	r3, r7, #28
 8004a26:	4618      	mov	r0, r3
 8004a28:	f003 feac 	bl	8008784 <HAL_RCCEx_PeriphCLKConfig>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8004a32:	f7ff ff0d 	bl	8004850 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004a36:	4b2e      	ldr	r3, [pc, #184]	@ (8004af0 <HAL_ADC_MspInit+0x1e8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8004af0 <HAL_ADC_MspInit+0x1e8>)
 8004a3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004a40:	4b2b      	ldr	r3, [pc, #172]	@ (8004af0 <HAL_ADC_MspInit+0x1e8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d10b      	bne.n	8004a60 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004a48:	4b2a      	ldr	r3, [pc, #168]	@ (8004af4 <HAL_ADC_MspInit+0x1ec>)
 8004a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a4c:	4a29      	ldr	r2, [pc, #164]	@ (8004af4 <HAL_ADC_MspInit+0x1ec>)
 8004a4e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004a52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a54:	4b27      	ldr	r3, [pc, #156]	@ (8004af4 <HAL_ADC_MspInit+0x1ec>)
 8004a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a60:	4b24      	ldr	r3, [pc, #144]	@ (8004af4 <HAL_ADC_MspInit+0x1ec>)
 8004a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a64:	4a23      	ldr	r2, [pc, #140]	@ (8004af4 <HAL_ADC_MspInit+0x1ec>)
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a6c:	4b21      	ldr	r3, [pc, #132]	@ (8004af4 <HAL_ADC_MspInit+0x1ec>)
 8004a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CSOB_Pin;
 8004a78:	2302      	movs	r3, #2
 8004a7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOB_GPIO_Port, &GPIO_InitStruct);
 8004a84:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004a88:	4619      	mov	r1, r3
 8004a8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a8e:	f002 ff35 	bl	80078fc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8004a92:	4b1c      	ldr	r3, [pc, #112]	@ (8004b04 <HAL_ADC_MspInit+0x1fc>)
 8004a94:	4a1c      	ldr	r2, [pc, #112]	@ (8004b08 <HAL_ADC_MspInit+0x200>)
 8004a96:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004a98:	4b1a      	ldr	r3, [pc, #104]	@ (8004b04 <HAL_ADC_MspInit+0x1fc>)
 8004a9a:	2224      	movs	r2, #36	@ 0x24
 8004a9c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a9e:	4b19      	ldr	r3, [pc, #100]	@ (8004b04 <HAL_ADC_MspInit+0x1fc>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aa4:	4b17      	ldr	r3, [pc, #92]	@ (8004b04 <HAL_ADC_MspInit+0x1fc>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004aaa:	4b16      	ldr	r3, [pc, #88]	@ (8004b04 <HAL_ADC_MspInit+0x1fc>)
 8004aac:	2280      	movs	r2, #128	@ 0x80
 8004aae:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004ab0:	4b14      	ldr	r3, [pc, #80]	@ (8004b04 <HAL_ADC_MspInit+0x1fc>)
 8004ab2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ab6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004ab8:	4b12      	ldr	r3, [pc, #72]	@ (8004b04 <HAL_ADC_MspInit+0x1fc>)
 8004aba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004abe:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004ac0:	4b10      	ldr	r3, [pc, #64]	@ (8004b04 <HAL_ADC_MspInit+0x1fc>)
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8004b04 <HAL_ADC_MspInit+0x1fc>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004acc:	480d      	ldr	r0, [pc, #52]	@ (8004b04 <HAL_ADC_MspInit+0x1fc>)
 8004ace:	f002 f8a1 	bl	8006c14 <HAL_DMA_Init>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8004ad8:	f7ff feba 	bl	8004850 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a09      	ldr	r2, [pc, #36]	@ (8004b04 <HAL_ADC_MspInit+0x1fc>)
 8004ae0:	655a      	str	r2, [r3, #84]	@ 0x54
 8004ae2:	4a08      	ldr	r2, [pc, #32]	@ (8004b04 <HAL_ADC_MspInit+0x1fc>)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8004ae8:	bf00      	nop
 8004aea:	3780      	adds	r7, #128	@ 0x80
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	200007d4 	.word	0x200007d4
 8004af4:	40021000 	.word	0x40021000
 8004af8:	20000518 	.word	0x20000518
 8004afc:	40020008 	.word	0x40020008
 8004b00:	50000100 	.word	0x50000100
 8004b04:	20000578 	.word	0x20000578
 8004b08:	4002001c 	.word	0x4002001c

08004b0c <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a0a      	ldr	r2, [pc, #40]	@ (8004b44 <HAL_CORDIC_MspInit+0x38>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d10b      	bne.n	8004b36 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b48 <HAL_CORDIC_MspInit+0x3c>)
 8004b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b22:	4a09      	ldr	r2, [pc, #36]	@ (8004b48 <HAL_CORDIC_MspInit+0x3c>)
 8004b24:	f043 0308 	orr.w	r3, r3, #8
 8004b28:	6493      	str	r3, [r2, #72]	@ 0x48
 8004b2a:	4b07      	ldr	r3, [pc, #28]	@ (8004b48 <HAL_CORDIC_MspInit+0x3c>)
 8004b2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40020c00 	.word	0x40020c00
 8004b48:	40021000 	.word	0x40021000

08004b4c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a0a      	ldr	r2, [pc, #40]	@ (8004b84 <HAL_CRC_MspInit+0x38>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d10b      	bne.n	8004b76 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b88 <HAL_CRC_MspInit+0x3c>)
 8004b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b62:	4a09      	ldr	r2, [pc, #36]	@ (8004b88 <HAL_CRC_MspInit+0x3c>)
 8004b64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b68:	6493      	str	r3, [r2, #72]	@ 0x48
 8004b6a:	4b07      	ldr	r3, [pc, #28]	@ (8004b88 <HAL_CRC_MspInit+0x3c>)
 8004b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004b76:	bf00      	nop
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40023000 	.word	0x40023000
 8004b88:	40021000 	.word	0x40021000

08004b8c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b09e      	sub	sp, #120	@ 0x78
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b94:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	605a      	str	r2, [r3, #4]
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ba4:	f107 0314 	add.w	r3, r7, #20
 8004ba8:	2250      	movs	r2, #80	@ 0x50
 8004baa:	2100      	movs	r1, #0
 8004bac:	4618      	mov	r0, r3
 8004bae:	f007 fae7 	bl	800c180 <memset>
  if(hfdcan->Instance==FDCAN1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a33      	ldr	r2, [pc, #204]	@ (8004c84 <HAL_FDCAN_MspInit+0xf8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d15e      	bne.n	8004c7a <HAL_FDCAN_MspInit+0xee>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004bbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bc0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004bc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bc8:	f107 0314 	add.w	r3, r7, #20
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f003 fdd9 	bl	8008784 <HAL_RCCEx_PeriphCLKConfig>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004bd8:	f7ff fe3a 	bl	8004850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8004c88 <HAL_FDCAN_MspInit+0xfc>)
 8004bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be0:	4a29      	ldr	r2, [pc, #164]	@ (8004c88 <HAL_FDCAN_MspInit+0xfc>)
 8004be2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004be6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004be8:	4b27      	ldr	r3, [pc, #156]	@ (8004c88 <HAL_FDCAN_MspInit+0xfc>)
 8004bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bf4:	4b24      	ldr	r3, [pc, #144]	@ (8004c88 <HAL_FDCAN_MspInit+0xfc>)
 8004bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bf8:	4a23      	ldr	r2, [pc, #140]	@ (8004c88 <HAL_FDCAN_MspInit+0xfc>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c00:	4b21      	ldr	r3, [pc, #132]	@ (8004c88 <HAL_FDCAN_MspInit+0xfc>)
 8004c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004c88 <HAL_FDCAN_MspInit+0xfc>)
 8004c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c10:	4a1d      	ldr	r2, [pc, #116]	@ (8004c88 <HAL_FDCAN_MspInit+0xfc>)
 8004c12:	f043 0302 	orr.w	r3, r3, #2
 8004c16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c18:	4b1b      	ldr	r3, [pc, #108]	@ (8004c88 <HAL_FDCAN_MspInit+0xfc>)
 8004c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA12     ------> FDCAN1_TX
    PB8-BOOT0     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004c24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c28:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c32:	2300      	movs	r3, #0
 8004c34:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004c36:	2309      	movs	r3, #9
 8004c38:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c3a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004c3e:	4619      	mov	r1, r3
 8004c40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c44:	f002 fe5a 	bl	80078fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004c48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c4c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4e:	2302      	movs	r3, #2
 8004c50:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c56:	2300      	movs	r3, #0
 8004c58:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004c5a:	2309      	movs	r3, #9
 8004c5c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c5e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004c62:	4619      	mov	r1, r3
 8004c64:	4809      	ldr	r0, [pc, #36]	@ (8004c8c <HAL_FDCAN_MspInit+0x100>)
 8004c66:	f002 fe49 	bl	80078fc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	2015      	movs	r0, #21
 8004c70:	f001 fea9 	bl	80069c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004c74:	2015      	movs	r0, #21
 8004c76:	f001 fec0 	bl	80069fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8004c7a:	bf00      	nop
 8004c7c:	3778      	adds	r7, #120	@ 0x78
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	40006400 	.word	0x40006400
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	48000400 	.word	0x48000400

08004c90 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc8 <HAL_FMAC_MspInit+0x38>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d10b      	bne.n	8004cba <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <HAL_FMAC_MspInit+0x3c>)
 8004ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ca6:	4a09      	ldr	r2, [pc, #36]	@ (8004ccc <HAL_FMAC_MspInit+0x3c>)
 8004ca8:	f043 0310 	orr.w	r3, r3, #16
 8004cac:	6493      	str	r3, [r2, #72]	@ 0x48
 8004cae:	4b07      	ldr	r3, [pc, #28]	@ (8004ccc <HAL_FMAC_MspInit+0x3c>)
 8004cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40021400 	.word	0x40021400
 8004ccc:	40021000 	.word	0x40021000

08004cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	@ 0x28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd8:	f107 0314 	add.w	r3, r7, #20
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	609a      	str	r2, [r3, #8]
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a17      	ldr	r2, [pc, #92]	@ (8004d4c <HAL_SPI_MspInit+0x7c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d128      	bne.n	8004d44 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004cf2:	4b17      	ldr	r3, [pc, #92]	@ (8004d50 <HAL_SPI_MspInit+0x80>)
 8004cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf6:	4a16      	ldr	r2, [pc, #88]	@ (8004d50 <HAL_SPI_MspInit+0x80>)
 8004cf8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004cfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8004cfe:	4b14      	ldr	r3, [pc, #80]	@ (8004d50 <HAL_SPI_MspInit+0x80>)
 8004d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d0a:	4b11      	ldr	r3, [pc, #68]	@ (8004d50 <HAL_SPI_MspInit+0x80>)
 8004d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d0e:	4a10      	ldr	r2, [pc, #64]	@ (8004d50 <HAL_SPI_MspInit+0x80>)
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d16:	4b0e      	ldr	r3, [pc, #56]	@ (8004d50 <HAL_SPI_MspInit+0x80>)
 8004d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004d22:	23e0      	movs	r3, #224	@ 0xe0
 8004d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d26:	2302      	movs	r3, #2
 8004d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d2e:	2302      	movs	r3, #2
 8004d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d32:	2305      	movs	r3, #5
 8004d34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d36:	f107 0314 	add.w	r3, r7, #20
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d40:	f002 fddc 	bl	80078fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004d44:	bf00      	nop
 8004d46:	3728      	adds	r7, #40	@ 0x28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40013000 	.word	0x40013000
 8004d50:	40021000 	.word	0x40021000

08004d54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1a      	ldr	r2, [pc, #104]	@ (8004dcc <HAL_TIM_Base_MspInit+0x78>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d114      	bne.n	8004d90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d66:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd0 <HAL_TIM_Base_MspInit+0x7c>)
 8004d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d6a:	4a19      	ldr	r2, [pc, #100]	@ (8004dd0 <HAL_TIM_Base_MspInit+0x7c>)
 8004d6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004d70:	6613      	str	r3, [r2, #96]	@ 0x60
 8004d72:	4b17      	ldr	r3, [pc, #92]	@ (8004dd0 <HAL_TIM_Base_MspInit+0x7c>)
 8004d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2100      	movs	r1, #0
 8004d82:	2019      	movs	r0, #25
 8004d84:	f001 fe1f 	bl	80069c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004d88:	2019      	movs	r0, #25
 8004d8a:	f001 fe36 	bl	80069fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004d8e:	e018      	b.n	8004dc2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d98:	d113      	bne.n	8004dc2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd0 <HAL_TIM_Base_MspInit+0x7c>)
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd0 <HAL_TIM_Base_MspInit+0x7c>)
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004da6:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd0 <HAL_TIM_Base_MspInit+0x7c>)
 8004da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	60bb      	str	r3, [r7, #8]
 8004db0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004db2:	2200      	movs	r2, #0
 8004db4:	2100      	movs	r1, #0
 8004db6:	201c      	movs	r0, #28
 8004db8:	f001 fe05 	bl	80069c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004dbc:	201c      	movs	r0, #28
 8004dbe:	f001 fe1c 	bl	80069fa <HAL_NVIC_EnableIRQ>
}
 8004dc2:	bf00      	nop
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	40021000 	.word	0x40021000

08004dd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ddc:	f107 030c 	add.w	r3, r7, #12
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	605a      	str	r2, [r3, #4]
 8004de6:	609a      	str	r2, [r3, #8]
 8004de8:	60da      	str	r2, [r3, #12]
 8004dea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e60 <HAL_TIM_MspPostInit+0x8c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d12f      	bne.n	8004e56 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e64 <HAL_TIM_MspPostInit+0x90>)
 8004df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8004e64 <HAL_TIM_MspPostInit+0x90>)
 8004dfc:	f043 0301 	orr.w	r3, r3, #1
 8004e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e02:	4b18      	ldr	r3, [pc, #96]	@ (8004e64 <HAL_TIM_MspPostInit+0x90>)
 8004e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	60bb      	str	r3, [r7, #8]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWMC_Pin|PWMB_Pin|PWMA_Pin;
 8004e0e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8004e12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e14:	2302      	movs	r3, #2
 8004e16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004e20:	2306      	movs	r3, #6
 8004e22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e24:	f107 030c 	add.w	r3, r7, #12
 8004e28:	4619      	mov	r1, r3
 8004e2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e2e:	f002 fd65 	bl	80078fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004e32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e38:	2302      	movs	r3, #2
 8004e3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e40:	2300      	movs	r3, #0
 8004e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8004e44:	230b      	movs	r3, #11
 8004e46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e52:	f002 fd53 	bl	80078fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004e56:	bf00      	nop
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40012c00 	.word	0x40012c00
 8004e64:	40021000 	.word	0x40021000

08004e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004e6c:	bf00      	nop
 8004e6e:	e7fd      	b.n	8004e6c <NMI_Handler+0x4>

08004e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e74:	bf00      	nop
 8004e76:	e7fd      	b.n	8004e74 <HardFault_Handler+0x4>

08004e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e7c:	bf00      	nop
 8004e7e:	e7fd      	b.n	8004e7c <MemManage_Handler+0x4>

08004e80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e84:	bf00      	nop
 8004e86:	e7fd      	b.n	8004e84 <BusFault_Handler+0x4>

08004e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e8c:	bf00      	nop
 8004e8e:	e7fd      	b.n	8004e8c <UsageFault_Handler+0x4>

08004e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e94:	bf00      	nop
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ea2:	bf00      	nop
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004eb0:	bf00      	nop
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ebe:	f000 f91d 	bl	80050fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004ecc:	4802      	ldr	r0, [pc, #8]	@ (8004ed8 <DMA1_Channel1_IRQHandler+0x10>)
 8004ece:	f001 ffc4 	bl	8006e5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004ed2:	bf00      	nop
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20000518 	.word	0x20000518

08004edc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004ee0:	4802      	ldr	r0, [pc, #8]	@ (8004eec <DMA1_Channel2_IRQHandler+0x10>)
 8004ee2:	f001 ffba 	bl	8006e5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004ee6:	bf00      	nop
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000578 	.word	0x20000578

08004ef0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004ef4:	4802      	ldr	r0, [pc, #8]	@ (8004f00 <FDCAN1_IT0_IRQHandler+0x10>)
 8004ef6:	f002 fa59 	bl	80073ac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004efa:	bf00      	nop
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000624 	.word	0x20000624

08004f04 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f08:	4802      	ldr	r0, [pc, #8]	@ (8004f14 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004f0a:	f004 fcdf 	bl	80098cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004f0e:	bf00      	nop
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000724 	.word	0x20000724

08004f18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f1c:	4802      	ldr	r0, [pc, #8]	@ (8004f28 <TIM2_IRQHandler+0x10>)
 8004f1e:	f004 fcd5 	bl	80098cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004f22:	bf00      	nop
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20000770 	.word	0x20000770

08004f2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return 1;
 8004f30:	2301      	movs	r3, #1
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <_kill>:

int _kill(int pid, int sig)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f46:	f007 f977 	bl	800c238 <__errno>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2216      	movs	r2, #22
 8004f4e:	601a      	str	r2, [r3, #0]
  return -1;
 8004f50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <_exit>:

void _exit (int status)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004f64:	f04f 31ff 	mov.w	r1, #4294967295
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff ffe7 	bl	8004f3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004f6e:	bf00      	nop
 8004f70:	e7fd      	b.n	8004f6e <_exit+0x12>
	...

08004f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f7c:	4a14      	ldr	r2, [pc, #80]	@ (8004fd0 <_sbrk+0x5c>)
 8004f7e:	4b15      	ldr	r3, [pc, #84]	@ (8004fd4 <_sbrk+0x60>)
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f88:	4b13      	ldr	r3, [pc, #76]	@ (8004fd8 <_sbrk+0x64>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d102      	bne.n	8004f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f90:	4b11      	ldr	r3, [pc, #68]	@ (8004fd8 <_sbrk+0x64>)
 8004f92:	4a12      	ldr	r2, [pc, #72]	@ (8004fdc <_sbrk+0x68>)
 8004f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f96:	4b10      	ldr	r3, [pc, #64]	@ (8004fd8 <_sbrk+0x64>)
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d207      	bcs.n	8004fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004fa4:	f007 f948 	bl	800c238 <__errno>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	220c      	movs	r2, #12
 8004fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004fae:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb2:	e009      	b.n	8004fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fb4:	4b08      	ldr	r3, [pc, #32]	@ (8004fd8 <_sbrk+0x64>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fba:	4b07      	ldr	r3, [pc, #28]	@ (8004fd8 <_sbrk+0x64>)
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	4a05      	ldr	r2, [pc, #20]	@ (8004fd8 <_sbrk+0x64>)
 8004fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	2001c000 	.word	0x2001c000
 8004fd4:	00000400 	.word	0x00000400
 8004fd8:	200007d8 	.word	0x200007d8
 8004fdc:	20000930 	.word	0x20000930

08004fe0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004fe4:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <SystemInit+0x20>)
 8004fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fea:	4a05      	ldr	r2, [pc, #20]	@ (8005000 <SystemInit+0x20>)
 8004fec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ff0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	e000ed00 	.word	0xe000ed00

08005004 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005004:	480d      	ldr	r0, [pc, #52]	@ (800503c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005006:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005008:	f7ff ffea 	bl	8004fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800500c:	480c      	ldr	r0, [pc, #48]	@ (8005040 <LoopForever+0x6>)
  ldr r1, =_edata
 800500e:	490d      	ldr	r1, [pc, #52]	@ (8005044 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005010:	4a0d      	ldr	r2, [pc, #52]	@ (8005048 <LoopForever+0xe>)
  movs r3, #0
 8005012:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005014:	e002      	b.n	800501c <LoopCopyDataInit>

08005016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800501a:	3304      	adds	r3, #4

0800501c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800501c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800501e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005020:	d3f9      	bcc.n	8005016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005022:	4a0a      	ldr	r2, [pc, #40]	@ (800504c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005024:	4c0a      	ldr	r4, [pc, #40]	@ (8005050 <LoopForever+0x16>)
  movs r3, #0
 8005026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005028:	e001      	b.n	800502e <LoopFillZerobss>

0800502a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800502a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800502c:	3204      	adds	r2, #4

0800502e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800502e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005030:	d3fb      	bcc.n	800502a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005032:	f007 f907 	bl	800c244 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005036:	f7fe ff43 	bl	8003ec0 <main>

0800503a <LoopForever>:

LoopForever:
    b LoopForever
 800503a:	e7fe      	b.n	800503a <LoopForever>
  ldr   r0, =_estack
 800503c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8005040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005044:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8005048:	0800c4bc 	.word	0x0800c4bc
  ldr r2, =_sbss
 800504c:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8005050:	2000092c 	.word	0x2000092c

08005054 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005054:	e7fe      	b.n	8005054 <ADC1_2_IRQHandler>

08005056 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b082      	sub	sp, #8
 800505a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005060:	2003      	movs	r0, #3
 8005062:	f001 fca5 	bl	80069b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005066:	200f      	movs	r0, #15
 8005068:	f000 f80e 	bl	8005088 <HAL_InitTick>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	71fb      	strb	r3, [r7, #7]
 8005076:	e001      	b.n	800507c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005078:	f7ff fc22 	bl	80048c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800507c:	79fb      	ldrb	r3, [r7, #7]

}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005094:	4b16      	ldr	r3, [pc, #88]	@ (80050f0 <HAL_InitTick+0x68>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d022      	beq.n	80050e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800509c:	4b15      	ldr	r3, [pc, #84]	@ (80050f4 <HAL_InitTick+0x6c>)
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4b13      	ldr	r3, [pc, #76]	@ (80050f0 <HAL_InitTick+0x68>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80050a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80050ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 fcb0 	bl	8006a16 <HAL_SYSTICK_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10f      	bne.n	80050dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b0f      	cmp	r3, #15
 80050c0:	d809      	bhi.n	80050d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050c2:	2200      	movs	r2, #0
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ca:	f001 fc7c 	bl	80069c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80050ce:	4a0a      	ldr	r2, [pc, #40]	@ (80050f8 <HAL_InitTick+0x70>)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	e007      	b.n	80050e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
 80050da:	e004      	b.n	80050e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	73fb      	strb	r3, [r7, #15]
 80050e0:	e001      	b.n	80050e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	200000c8 	.word	0x200000c8
 80050f4:	200000c0 	.word	0x200000c0
 80050f8:	200000c4 	.word	0x200000c4

080050fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005100:	4b05      	ldr	r3, [pc, #20]	@ (8005118 <HAL_IncTick+0x1c>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	4b05      	ldr	r3, [pc, #20]	@ (800511c <HAL_IncTick+0x20>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4413      	add	r3, r2
 800510a:	4a03      	ldr	r2, [pc, #12]	@ (8005118 <HAL_IncTick+0x1c>)
 800510c:	6013      	str	r3, [r2, #0]
}
 800510e:	bf00      	nop
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	200007dc 	.word	0x200007dc
 800511c:	200000c8 	.word	0x200000c8

08005120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  return uwTick;
 8005124:	4b03      	ldr	r3, [pc, #12]	@ (8005134 <HAL_GetTick+0x14>)
 8005126:	681b      	ldr	r3, [r3, #0]
}
 8005128:	4618      	mov	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	200007dc 	.word	0x200007dc

08005138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005140:	f7ff ffee 	bl	8005120 <HAL_GetTick>
 8005144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d004      	beq.n	800515c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005152:	4b09      	ldr	r3, [pc, #36]	@ (8005178 <HAL_Delay+0x40>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800515c:	bf00      	nop
 800515e:	f7ff ffdf 	bl	8005120 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	429a      	cmp	r2, r3
 800516c:	d8f7      	bhi.n	800515e <HAL_Delay+0x26>
  {
  }
}
 800516e:	bf00      	nop
 8005170:	bf00      	nop
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	200000c8 	.word	0x200000c8

0800517c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	609a      	str	r2, [r3, #8]
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	609a      	str	r2, [r3, #8]
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80051d8:	4618      	mov	r0, r3
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3360      	adds	r3, #96	@ 0x60
 80051f6:	461a      	mov	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4b08      	ldr	r3, [pc, #32]	@ (8005228 <LL_ADC_SetOffset+0x44>)
 8005206:	4013      	ands	r3, r2
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	4313      	orrs	r3, r2
 8005214:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800521c:	bf00      	nop
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	03fff000 	.word	0x03fff000

0800522c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3360      	adds	r3, #96	@ 0x60
 800523a:	461a      	mov	r2, r3
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3360      	adds	r3, #96	@ 0x60
 8005268:	461a      	mov	r2, r3
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	431a      	orrs	r2, r3
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800528e:	b480      	push	{r7}
 8005290:	b087      	sub	sp, #28
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3360      	adds	r3, #96	@ 0x60
 800529e:	461a      	mov	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80052b8:	bf00      	nop
 80052ba:	371c      	adds	r7, #28
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3360      	adds	r3, #96	@ 0x60
 80052d4:	461a      	mov	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	431a      	orrs	r2, r3
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	615a      	str	r2, [r3, #20]
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005346:	b480      	push	{r7}
 8005348:	b087      	sub	sp, #28
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3330      	adds	r3, #48	@ 0x30
 8005356:	461a      	mov	r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	0a1b      	lsrs	r3, r3, #8
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	f003 030c 	and.w	r3, r3, #12
 8005362:	4413      	add	r3, r2
 8005364:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f003 031f 	and.w	r3, r3, #31
 8005370:	211f      	movs	r1, #31
 8005372:	fa01 f303 	lsl.w	r3, r1, r3
 8005376:	43db      	mvns	r3, r3
 8005378:	401a      	ands	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	0e9b      	lsrs	r3, r3, #26
 800537e:	f003 011f 	and.w	r1, r3, #31
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	fa01 f303 	lsl.w	r3, r1, r3
 800538c:	431a      	orrs	r2, r3
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800539e:	b480      	push	{r7}
 80053a0:	b087      	sub	sp, #28
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3314      	adds	r3, #20
 80053ae:	461a      	mov	r2, r3
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	0e5b      	lsrs	r3, r3, #25
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	4413      	add	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	0d1b      	lsrs	r3, r3, #20
 80053c6:	f003 031f 	and.w	r3, r3, #31
 80053ca:	2107      	movs	r1, #7
 80053cc:	fa01 f303 	lsl.w	r3, r1, r3
 80053d0:	43db      	mvns	r3, r3
 80053d2:	401a      	ands	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	0d1b      	lsrs	r3, r3, #20
 80053d8:	f003 031f 	and.w	r3, r3, #31
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	fa01 f303 	lsl.w	r3, r1, r3
 80053e2:	431a      	orrs	r2, r3
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80053e8:	bf00      	nop
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800540c:	43db      	mvns	r3, r3
 800540e:	401a      	ands	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f003 0318 	and.w	r3, r3, #24
 8005416:	4908      	ldr	r1, [pc, #32]	@ (8005438 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005418:	40d9      	lsrs	r1, r3
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	400b      	ands	r3, r1
 800541e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005422:	431a      	orrs	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800542a:	bf00      	nop
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	0007ffff 	.word	0x0007ffff

0800543c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 031f 	and.w	r3, r3, #31
}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005468:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6093      	str	r3, [r2, #8]
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800548c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005490:	d101      	bne.n	8005496 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80054b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80054b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054e0:	d101      	bne.n	80054e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005504:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005508:	f043 0201 	orr.w	r2, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <LL_ADC_IsEnabled+0x18>
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <LL_ADC_IsEnabled+0x1a>
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005552:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005556:	f043 0204 	orr.w	r2, r3, #4
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b04      	cmp	r3, #4
 800557c:	d101      	bne.n	8005582 <LL_ADC_REG_IsConversionOngoing+0x18>
 800557e:	2301      	movs	r3, #1
 8005580:	e000      	b.n	8005584 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d101      	bne.n	80055a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80055b8:	b590      	push	{r4, r7, lr}
 80055ba:	b089      	sub	sp, #36	@ 0x24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e19b      	b.n	800590a <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d109      	bne.n	80055f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff f991 	bl	8004908 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff ff3f 	bl	800547c <LL_ADC_IsDeepPowerDownEnabled>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d004      	beq.n	800560e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f7ff ff25 	bl	8005458 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff ff5a 	bl	80054cc <LL_ADC_IsInternalRegulatorEnabled>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d115      	bne.n	800564a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff ff3e 	bl	80054a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005628:	4b97      	ldr	r3, [pc, #604]	@ (8005888 <HAL_ADC_Init+0x2d0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	099b      	lsrs	r3, r3, #6
 800562e:	4a97      	ldr	r2, [pc, #604]	@ (800588c <HAL_ADC_Init+0x2d4>)
 8005630:	fba2 2303 	umull	r2, r3, r2, r3
 8005634:	099b      	lsrs	r3, r3, #6
 8005636:	3301      	adds	r3, #1
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800563c:	e002      	b.n	8005644 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3b01      	subs	r3, #1
 8005642:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f9      	bne.n	800563e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff ff3c 	bl	80054cc <LL_ADC_IsInternalRegulatorEnabled>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10d      	bne.n	8005676 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800565e:	f043 0210 	orr.w	r2, r3, #16
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800566a:	f043 0201 	orr.w	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f7ff ff75 	bl	800556a <LL_ADC_REG_IsConversionOngoing>
 8005680:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005686:	f003 0310 	and.w	r3, r3, #16
 800568a:	2b00      	cmp	r3, #0
 800568c:	f040 8134 	bne.w	80058f8 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2b00      	cmp	r3, #0
 8005694:	f040 8130 	bne.w	80058f8 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800569c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80056a0:	f043 0202 	orr.w	r2, r3, #2
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff ff35 	bl	800551c <LL_ADC_IsEnabled>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d137      	bne.n	8005728 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056c0:	d004      	beq.n	80056cc <HAL_ADC_Init+0x114>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a72      	ldr	r2, [pc, #456]	@ (8005890 <HAL_ADC_Init+0x2d8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d10f      	bne.n	80056ec <HAL_ADC_Init+0x134>
 80056cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80056d0:	f7ff ff24 	bl	800551c <LL_ADC_IsEnabled>
 80056d4:	4604      	mov	r4, r0
 80056d6:	486e      	ldr	r0, [pc, #440]	@ (8005890 <HAL_ADC_Init+0x2d8>)
 80056d8:	f7ff ff20 	bl	800551c <LL_ADC_IsEnabled>
 80056dc:	4603      	mov	r3, r0
 80056de:	4323      	orrs	r3, r4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	bf0c      	ite	eq
 80056e4:	2301      	moveq	r3, #1
 80056e6:	2300      	movne	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	e008      	b.n	80056fe <HAL_ADC_Init+0x146>
 80056ec:	4869      	ldr	r0, [pc, #420]	@ (8005894 <HAL_ADC_Init+0x2dc>)
 80056ee:	f7ff ff15 	bl	800551c <LL_ADC_IsEnabled>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf0c      	ite	eq
 80056f8:	2301      	moveq	r3, #1
 80056fa:	2300      	movne	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d012      	beq.n	8005728 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800570a:	d004      	beq.n	8005716 <HAL_ADC_Init+0x15e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a5f      	ldr	r2, [pc, #380]	@ (8005890 <HAL_ADC_Init+0x2d8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d101      	bne.n	800571a <HAL_ADC_Init+0x162>
 8005716:	4a60      	ldr	r2, [pc, #384]	@ (8005898 <HAL_ADC_Init+0x2e0>)
 8005718:	e000      	b.n	800571c <HAL_ADC_Init+0x164>
 800571a:	4a60      	ldr	r2, [pc, #384]	@ (800589c <HAL_ADC_Init+0x2e4>)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	4619      	mov	r1, r3
 8005722:	4610      	mov	r0, r2
 8005724:	f7ff fd2a 	bl	800517c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	7f5b      	ldrb	r3, [r3, #29]
 800572c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005732:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005738:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800573e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005746:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005748:	4313      	orrs	r3, r2
 800574a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005752:	2b01      	cmp	r3, #1
 8005754:	d106      	bne.n	8005764 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575a:	3b01      	subs	r3, #1
 800575c:	045b      	lsls	r3, r3, #17
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4313      	orrs	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d009      	beq.n	8005780 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005770:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005778:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	4313      	orrs	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	4b46      	ldr	r3, [pc, #280]	@ (80058a0 <HAL_ADC_Init+0x2e8>)
 8005788:	4013      	ands	r3, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6812      	ldr	r2, [r2, #0]
 800578e:	69b9      	ldr	r1, [r7, #24]
 8005790:	430b      	orrs	r3, r1
 8005792:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff feee 	bl	8005590 <LL_ADC_INJ_IsConversionOngoing>
 80057b4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d17b      	bne.n	80058b4 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d178      	bne.n	80058b4 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80057c6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80057ce:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057de:	f023 0302 	bic.w	r3, r3, #2
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6812      	ldr	r2, [r2, #0]
 80057e6:	69b9      	ldr	r1, [r7, #24]
 80057e8:	430b      	orrs	r3, r1
 80057ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d017      	beq.n	8005824 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005802:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800580c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005810:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6911      	ldr	r1, [r2, #16]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	430b      	orrs	r3, r1
 800581e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005822:	e013      	b.n	800584c <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691a      	ldr	r2, [r3, #16]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005832:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6812      	ldr	r2, [r2, #0]
 8005840:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005844:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005848:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005852:	2b01      	cmp	r3, #1
 8005854:	d126      	bne.n	80058a4 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005860:	f023 0304 	bic.w	r3, r3, #4
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800586c:	4311      	orrs	r1, r2
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005872:	4311      	orrs	r1, r2
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005878:	430a      	orrs	r2, r1
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0201 	orr.w	r2, r2, #1
 8005884:	611a      	str	r2, [r3, #16]
 8005886:	e015      	b.n	80058b4 <HAL_ADC_Init+0x2fc>
 8005888:	200000c0 	.word	0x200000c0
 800588c:	053e2d63 	.word	0x053e2d63
 8005890:	50000100 	.word	0x50000100
 8005894:	50000400 	.word	0x50000400
 8005898:	50000300 	.word	0x50000300
 800589c:	50000700 	.word	0x50000700
 80058a0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691a      	ldr	r2, [r3, #16]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0201 	bic.w	r2, r2, #1
 80058b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d10c      	bne.n	80058d6 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c2:	f023 010f 	bic.w	r1, r3, #15
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	1e5a      	subs	r2, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80058d4:	e007      	b.n	80058e6 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 020f 	bic.w	r2, r2, #15
 80058e4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ea:	f023 0303 	bic.w	r3, r3, #3
 80058ee:	f043 0201 	orr.w	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80058f6:	e007      	b.n	8005908 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058fc:	f043 0210 	orr.w	r2, r3, #16
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005908:	7ffb      	ldrb	r3, [r7, #31]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3724      	adds	r7, #36	@ 0x24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd90      	pop	{r4, r7, pc}
 8005912:	bf00      	nop

08005914 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005928:	d004      	beq.n	8005934 <HAL_ADC_Start_DMA+0x20>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a57      	ldr	r2, [pc, #348]	@ (8005a8c <HAL_ADC_Start_DMA+0x178>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d101      	bne.n	8005938 <HAL_ADC_Start_DMA+0x24>
 8005934:	4b56      	ldr	r3, [pc, #344]	@ (8005a90 <HAL_ADC_Start_DMA+0x17c>)
 8005936:	e000      	b.n	800593a <HAL_ADC_Start_DMA+0x26>
 8005938:	4b56      	ldr	r3, [pc, #344]	@ (8005a94 <HAL_ADC_Start_DMA+0x180>)
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff fd7e 	bl	800543c <LL_ADC_GetMultimode>
 8005940:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff fe0f 	bl	800556a <LL_ADC_REG_IsConversionOngoing>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	f040 8094 	bne.w	8005a7c <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_ADC_Start_DMA+0x4e>
 800595e:	2302      	movs	r3, #2
 8005960:	e08f      	b.n	8005a82 <HAL_ADC_Start_DMA+0x16e>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a4a      	ldr	r2, [pc, #296]	@ (8005a98 <HAL_ADC_Start_DMA+0x184>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d008      	beq.n	8005986 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d005      	beq.n	8005986 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2b05      	cmp	r3, #5
 800597e:	d002      	beq.n	8005986 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	2b09      	cmp	r3, #9
 8005984:	d173      	bne.n	8005a6e <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fcd8 	bl	800633c <ADC_Enable>
 800598c:	4603      	mov	r3, r0
 800598e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005990:	7dfb      	ldrb	r3, [r7, #23]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d166      	bne.n	8005a64 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800599a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a37      	ldr	r2, [pc, #220]	@ (8005a8c <HAL_ADC_Start_DMA+0x178>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d002      	beq.n	80059ba <HAL_ADC_Start_DMA+0xa6>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	e001      	b.n	80059be <HAL_ADC_Start_DMA+0xaa>
 80059ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d002      	beq.n	80059cc <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d105      	bne.n	80059d8 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d006      	beq.n	80059f2 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059e8:	f023 0206 	bic.w	r2, r3, #6
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	661a      	str	r2, [r3, #96]	@ 0x60
 80059f0:	e002      	b.n	80059f8 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fc:	4a27      	ldr	r2, [pc, #156]	@ (8005a9c <HAL_ADC_Start_DMA+0x188>)
 80059fe:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a04:	4a26      	ldr	r2, [pc, #152]	@ (8005aa0 <HAL_ADC_Start_DMA+0x18c>)
 8005a06:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a0c:	4a25      	ldr	r2, [pc, #148]	@ (8005aa4 <HAL_ADC_Start_DMA+0x190>)
 8005a0e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	221c      	movs	r2, #28
 8005a16:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0210 	orr.w	r2, r2, #16
 8005a2e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0201 	orr.w	r2, r2, #1
 8005a3e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3340      	adds	r3, #64	@ 0x40
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f001 f988 	bl	8006d64 <HAL_DMA_Start_IT>
 8005a54:	4603      	mov	r3, r0
 8005a56:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff fd70 	bl	8005542 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005a62:	e00d      	b.n	8005a80 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005a6c:	e008      	b.n	8005a80 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005a7a:	e001      	b.n	8005a80 <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	50000100 	.word	0x50000100
 8005a90:	50000300 	.word	0x50000300
 8005a94:	50000700 	.word	0x50000700
 8005a98:	50000400 	.word	0x50000400
 8005a9c:	08006469 	.word	0x08006469
 8005aa0:	08006541 	.word	0x08006541
 8005aa4:	0800655d 	.word	0x0800655d

08005aa8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b0b6      	sub	sp, #216	@ 0xd8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d102      	bne.n	8005b08 <HAL_ADC_ConfigChannel+0x24>
 8005b02:	2302      	movs	r3, #2
 8005b04:	f000 bc04 	b.w	8006310 <HAL_ADC_ConfigChannel+0x82c>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff fd28 	bl	800556a <LL_ADC_REG_IsConversionOngoing>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f040 83e8 	bne.w	80062f2 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6859      	ldr	r1, [r3, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f7ff fc09 	bl	8005346 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff fd16 	bl	800556a <LL_ADC_REG_IsConversionOngoing>
 8005b3e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff fd22 	bl	8005590 <LL_ADC_INJ_IsConversionOngoing>
 8005b4c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005b50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f040 81d9 	bne.w	8005f0c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005b5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f040 81d4 	bne.w	8005f0c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b6c:	d10f      	bne.n	8005b8e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2200      	movs	r2, #0
 8005b78:	4619      	mov	r1, r3
 8005b7a:	f7ff fc10 	bl	800539e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fbb7 	bl	80052fa <LL_ADC_SetSamplingTimeCommonConfig>
 8005b8c:	e00e      	b.n	8005bac <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	6819      	ldr	r1, [r3, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f7ff fbff 	bl	800539e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff fba7 	bl	80052fa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	695a      	ldr	r2, [r3, #20]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	08db      	lsrs	r3, r3, #3
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d022      	beq.n	8005c14 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6919      	ldr	r1, [r3, #16]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005bde:	f7ff fb01 	bl	80051e4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	6919      	ldr	r1, [r3, #16]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f7ff fb4d 	bl	800528e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d102      	bne.n	8005c0a <HAL_ADC_ConfigChannel+0x126>
 8005c04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c08:	e000      	b.n	8005c0c <HAL_ADC_ConfigChannel+0x128>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f7ff fb59 	bl	80052c4 <LL_ADC_SetOffsetSaturation>
 8005c12:	e17b      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff fb06 	bl	800522c <LL_ADC_GetOffsetChannel>
 8005c20:	4603      	mov	r3, r0
 8005c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10a      	bne.n	8005c40 <HAL_ADC_ConfigChannel+0x15c>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2100      	movs	r1, #0
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff fafb 	bl	800522c <LL_ADC_GetOffsetChannel>
 8005c36:	4603      	mov	r3, r0
 8005c38:	0e9b      	lsrs	r3, r3, #26
 8005c3a:	f003 021f 	and.w	r2, r3, #31
 8005c3e:	e01e      	b.n	8005c7e <HAL_ADC_ConfigChannel+0x19a>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2100      	movs	r1, #0
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff faf0 	bl	800522c <LL_ADC_GetOffsetChannel>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005c56:	fa93 f3a3 	rbit	r3, r3
 8005c5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005c5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005c66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005c6e:	2320      	movs	r3, #32
 8005c70:	e004      	b.n	8005c7c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005c72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005c76:	fab3 f383 	clz	r3, r3
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d105      	bne.n	8005c96 <HAL_ADC_ConfigChannel+0x1b2>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	0e9b      	lsrs	r3, r3, #26
 8005c90:	f003 031f 	and.w	r3, r3, #31
 8005c94:	e018      	b.n	8005cc8 <HAL_ADC_ConfigChannel+0x1e4>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005ca2:	fa93 f3a3 	rbit	r3, r3
 8005ca6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005cb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005cba:	2320      	movs	r3, #32
 8005cbc:	e004      	b.n	8005cc8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005cbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005cc2:	fab3 f383 	clz	r3, r3
 8005cc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d106      	bne.n	8005cda <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff fabf 	bl	8005258 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2101      	movs	r1, #1
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff faa3 	bl	800522c <LL_ADC_GetOffsetChannel>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <HAL_ADC_ConfigChannel+0x222>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff fa98 	bl	800522c <LL_ADC_GetOffsetChannel>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	0e9b      	lsrs	r3, r3, #26
 8005d00:	f003 021f 	and.w	r2, r3, #31
 8005d04:	e01e      	b.n	8005d44 <HAL_ADC_ConfigChannel+0x260>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff fa8d 	bl	800522c <LL_ADC_GetOffsetChannel>
 8005d12:	4603      	mov	r3, r0
 8005d14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005d1c:	fa93 f3a3 	rbit	r3, r3
 8005d20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005d24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005d2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005d34:	2320      	movs	r3, #32
 8005d36:	e004      	b.n	8005d42 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005d38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d3c:	fab3 f383 	clz	r3, r3
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d105      	bne.n	8005d5c <HAL_ADC_ConfigChannel+0x278>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	0e9b      	lsrs	r3, r3, #26
 8005d56:	f003 031f 	and.w	r3, r3, #31
 8005d5a:	e018      	b.n	8005d8e <HAL_ADC_ConfigChannel+0x2aa>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d68:	fa93 f3a3 	rbit	r3, r3
 8005d6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005d70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005d74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005d78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005d80:	2320      	movs	r3, #32
 8005d82:	e004      	b.n	8005d8e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d88:	fab3 f383 	clz	r3, r3
 8005d8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d106      	bne.n	8005da0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2200      	movs	r2, #0
 8005d98:	2101      	movs	r1, #1
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff fa5c 	bl	8005258 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2102      	movs	r1, #2
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff fa40 	bl	800522c <LL_ADC_GetOffsetChannel>
 8005dac:	4603      	mov	r3, r0
 8005dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10a      	bne.n	8005dcc <HAL_ADC_ConfigChannel+0x2e8>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2102      	movs	r1, #2
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff fa35 	bl	800522c <LL_ADC_GetOffsetChannel>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	0e9b      	lsrs	r3, r3, #26
 8005dc6:	f003 021f 	and.w	r2, r3, #31
 8005dca:	e01e      	b.n	8005e0a <HAL_ADC_ConfigChannel+0x326>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2102      	movs	r1, #2
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff fa2a 	bl	800522c <LL_ADC_GetOffsetChannel>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005de2:	fa93 f3a3 	rbit	r3, r3
 8005de6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005dea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005dee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005df2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005dfa:	2320      	movs	r3, #32
 8005dfc:	e004      	b.n	8005e08 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005dfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e02:	fab3 f383 	clz	r3, r3
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d105      	bne.n	8005e22 <HAL_ADC_ConfigChannel+0x33e>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	0e9b      	lsrs	r3, r3, #26
 8005e1c:	f003 031f 	and.w	r3, r3, #31
 8005e20:	e016      	b.n	8005e50 <HAL_ADC_ConfigChannel+0x36c>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e2e:	fa93 f3a3 	rbit	r3, r3
 8005e32:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005e34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005e3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005e42:	2320      	movs	r3, #32
 8005e44:	e004      	b.n	8005e50 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005e46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e4a:	fab3 f383 	clz	r3, r3
 8005e4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d106      	bne.n	8005e62 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2102      	movs	r1, #2
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff f9fb 	bl	8005258 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2103      	movs	r1, #3
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff f9df 	bl	800522c <LL_ADC_GetOffsetChannel>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10a      	bne.n	8005e8e <HAL_ADC_ConfigChannel+0x3aa>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2103      	movs	r1, #3
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7ff f9d4 	bl	800522c <LL_ADC_GetOffsetChannel>
 8005e84:	4603      	mov	r3, r0
 8005e86:	0e9b      	lsrs	r3, r3, #26
 8005e88:	f003 021f 	and.w	r2, r3, #31
 8005e8c:	e017      	b.n	8005ebe <HAL_ADC_ConfigChannel+0x3da>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2103      	movs	r1, #3
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff f9c9 	bl	800522c <LL_ADC_GetOffsetChannel>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ea0:	fa93 f3a3 	rbit	r3, r3
 8005ea4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005ea6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ea8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005eaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005eb0:	2320      	movs	r3, #32
 8005eb2:	e003      	b.n	8005ebc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005eb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eb6:	fab3 f383 	clz	r3, r3
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d105      	bne.n	8005ed6 <HAL_ADC_ConfigChannel+0x3f2>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	0e9b      	lsrs	r3, r3, #26
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	e011      	b.n	8005efa <HAL_ADC_ConfigChannel+0x416>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005edc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ede:	fa93 f3a3 	rbit	r3, r3
 8005ee2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005ee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ee6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005ee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005eee:	2320      	movs	r3, #32
 8005ef0:	e003      	b.n	8005efa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ef4:	fab3 f383 	clz	r3, r3
 8005ef8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d106      	bne.n	8005f0c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2200      	movs	r2, #0
 8005f04:	2103      	movs	r1, #3
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff f9a6 	bl	8005258 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff fb03 	bl	800551c <LL_ADC_IsEnabled>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f040 813d 	bne.w	8006198 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6819      	ldr	r1, [r3, #0]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f7ff fa62 	bl	80053f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	4aa2      	ldr	r2, [pc, #648]	@ (80061c0 <HAL_ADC_ConfigChannel+0x6dc>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	f040 812e 	bne.w	8006198 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10b      	bne.n	8005f64 <HAL_ADC_ConfigChannel+0x480>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	0e9b      	lsrs	r3, r3, #26
 8005f52:	3301      	adds	r3, #1
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	2b09      	cmp	r3, #9
 8005f5a:	bf94      	ite	ls
 8005f5c:	2301      	movls	r3, #1
 8005f5e:	2300      	movhi	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	e019      	b.n	8005f98 <HAL_ADC_ConfigChannel+0x4b4>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f6c:	fa93 f3a3 	rbit	r3, r3
 8005f70:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005f72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f74:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005f76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005f7c:	2320      	movs	r3, #32
 8005f7e:	e003      	b.n	8005f88 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005f80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f82:	fab3 f383 	clz	r3, r3
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	3301      	adds	r3, #1
 8005f8a:	f003 031f 	and.w	r3, r3, #31
 8005f8e:	2b09      	cmp	r3, #9
 8005f90:	bf94      	ite	ls
 8005f92:	2301      	movls	r3, #1
 8005f94:	2300      	movhi	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d079      	beq.n	8006090 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d107      	bne.n	8005fb8 <HAL_ADC_ConfigChannel+0x4d4>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	0e9b      	lsrs	r3, r3, #26
 8005fae:	3301      	adds	r3, #1
 8005fb0:	069b      	lsls	r3, r3, #26
 8005fb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005fb6:	e015      	b.n	8005fe4 <HAL_ADC_ConfigChannel+0x500>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fc0:	fa93 f3a3 	rbit	r3, r3
 8005fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005fc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fc8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005fd0:	2320      	movs	r3, #32
 8005fd2:	e003      	b.n	8005fdc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fd6:	fab3 f383 	clz	r3, r3
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	3301      	adds	r3, #1
 8005fde:	069b      	lsls	r3, r3, #26
 8005fe0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d109      	bne.n	8006004 <HAL_ADC_ConfigChannel+0x520>
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	0e9b      	lsrs	r3, r3, #26
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	f003 031f 	and.w	r3, r3, #31
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8006002:	e017      	b.n	8006034 <HAL_ADC_ConfigChannel+0x550>
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800600a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800600c:	fa93 f3a3 	rbit	r3, r3
 8006010:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006014:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8006016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800601c:	2320      	movs	r3, #32
 800601e:	e003      	b.n	8006028 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006022:	fab3 f383 	clz	r3, r3
 8006026:	b2db      	uxtb	r3, r3
 8006028:	3301      	adds	r3, #1
 800602a:	f003 031f 	and.w	r3, r3, #31
 800602e:	2101      	movs	r1, #1
 8006030:	fa01 f303 	lsl.w	r3, r1, r3
 8006034:	ea42 0103 	orr.w	r1, r2, r3
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <HAL_ADC_ConfigChannel+0x576>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	0e9b      	lsrs	r3, r3, #26
 800604a:	3301      	adds	r3, #1
 800604c:	f003 021f 	and.w	r2, r3, #31
 8006050:	4613      	mov	r3, r2
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	4413      	add	r3, r2
 8006056:	051b      	lsls	r3, r3, #20
 8006058:	e018      	b.n	800608c <HAL_ADC_ConfigChannel+0x5a8>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006062:	fa93 f3a3 	rbit	r3, r3
 8006066:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800606c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006072:	2320      	movs	r3, #32
 8006074:	e003      	b.n	800607e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006078:	fab3 f383 	clz	r3, r3
 800607c:	b2db      	uxtb	r3, r3
 800607e:	3301      	adds	r3, #1
 8006080:	f003 021f 	and.w	r2, r3, #31
 8006084:	4613      	mov	r3, r2
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	4413      	add	r3, r2
 800608a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800608c:	430b      	orrs	r3, r1
 800608e:	e07e      	b.n	800618e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006098:	2b00      	cmp	r3, #0
 800609a:	d107      	bne.n	80060ac <HAL_ADC_ConfigChannel+0x5c8>
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	0e9b      	lsrs	r3, r3, #26
 80060a2:	3301      	adds	r3, #1
 80060a4:	069b      	lsls	r3, r3, #26
 80060a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80060aa:	e015      	b.n	80060d8 <HAL_ADC_ConfigChannel+0x5f4>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b4:	fa93 f3a3 	rbit	r3, r3
 80060b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80060ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060bc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80060be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80060c4:	2320      	movs	r3, #32
 80060c6:	e003      	b.n	80060d0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80060c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ca:	fab3 f383 	clz	r3, r3
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	3301      	adds	r3, #1
 80060d2:	069b      	lsls	r3, r3, #26
 80060d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d109      	bne.n	80060f8 <HAL_ADC_ConfigChannel+0x614>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	0e9b      	lsrs	r3, r3, #26
 80060ea:	3301      	adds	r3, #1
 80060ec:	f003 031f 	and.w	r3, r3, #31
 80060f0:	2101      	movs	r1, #1
 80060f2:	fa01 f303 	lsl.w	r3, r1, r3
 80060f6:	e017      	b.n	8006128 <HAL_ADC_ConfigChannel+0x644>
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	fa93 f3a3 	rbit	r3, r3
 8006104:	61fb      	str	r3, [r7, #28]
  return result;
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800610a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006110:	2320      	movs	r3, #32
 8006112:	e003      	b.n	800611c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006116:	fab3 f383 	clz	r3, r3
 800611a:	b2db      	uxtb	r3, r3
 800611c:	3301      	adds	r3, #1
 800611e:	f003 031f 	and.w	r3, r3, #31
 8006122:	2101      	movs	r1, #1
 8006124:	fa01 f303 	lsl.w	r3, r1, r3
 8006128:	ea42 0103 	orr.w	r1, r2, r3
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10d      	bne.n	8006154 <HAL_ADC_ConfigChannel+0x670>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	0e9b      	lsrs	r3, r3, #26
 800613e:	3301      	adds	r3, #1
 8006140:	f003 021f 	and.w	r2, r3, #31
 8006144:	4613      	mov	r3, r2
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	4413      	add	r3, r2
 800614a:	3b1e      	subs	r3, #30
 800614c:	051b      	lsls	r3, r3, #20
 800614e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006152:	e01b      	b.n	800618c <HAL_ADC_ConfigChannel+0x6a8>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	fa93 f3a3 	rbit	r3, r3
 8006160:	613b      	str	r3, [r7, #16]
  return result;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800616c:	2320      	movs	r3, #32
 800616e:	e003      	b.n	8006178 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	fab3 f383 	clz	r3, r3
 8006176:	b2db      	uxtb	r3, r3
 8006178:	3301      	adds	r3, #1
 800617a:	f003 021f 	and.w	r2, r3, #31
 800617e:	4613      	mov	r3, r2
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	4413      	add	r3, r2
 8006184:	3b1e      	subs	r3, #30
 8006186:	051b      	lsls	r3, r3, #20
 8006188:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800618c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006192:	4619      	mov	r1, r3
 8006194:	f7ff f903 	bl	800539e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	4b09      	ldr	r3, [pc, #36]	@ (80061c4 <HAL_ADC_ConfigChannel+0x6e0>)
 800619e:	4013      	ands	r3, r2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 80af 	beq.w	8006304 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061ae:	d004      	beq.n	80061ba <HAL_ADC_ConfigChannel+0x6d6>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a04      	ldr	r2, [pc, #16]	@ (80061c8 <HAL_ADC_ConfigChannel+0x6e4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d10a      	bne.n	80061d0 <HAL_ADC_ConfigChannel+0x6ec>
 80061ba:	4b04      	ldr	r3, [pc, #16]	@ (80061cc <HAL_ADC_ConfigChannel+0x6e8>)
 80061bc:	e009      	b.n	80061d2 <HAL_ADC_ConfigChannel+0x6ee>
 80061be:	bf00      	nop
 80061c0:	407f0000 	.word	0x407f0000
 80061c4:	80080000 	.word	0x80080000
 80061c8:	50000100 	.word	0x50000100
 80061cc:	50000300 	.word	0x50000300
 80061d0:	4b51      	ldr	r3, [pc, #324]	@ (8006318 <HAL_ADC_ConfigChannel+0x834>)
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe fff8 	bl	80051c8 <LL_ADC_GetCommonPathInternalCh>
 80061d8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a4e      	ldr	r2, [pc, #312]	@ (800631c <HAL_ADC_ConfigChannel+0x838>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d004      	beq.n	80061f0 <HAL_ADC_ConfigChannel+0x70c>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a4d      	ldr	r2, [pc, #308]	@ (8006320 <HAL_ADC_ConfigChannel+0x83c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d134      	bne.n	800625a <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80061f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d12e      	bne.n	800625a <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006204:	d17e      	bne.n	8006304 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800620e:	d004      	beq.n	800621a <HAL_ADC_ConfigChannel+0x736>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a43      	ldr	r2, [pc, #268]	@ (8006324 <HAL_ADC_ConfigChannel+0x840>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d101      	bne.n	800621e <HAL_ADC_ConfigChannel+0x73a>
 800621a:	4a43      	ldr	r2, [pc, #268]	@ (8006328 <HAL_ADC_ConfigChannel+0x844>)
 800621c:	e000      	b.n	8006220 <HAL_ADC_ConfigChannel+0x73c>
 800621e:	4a3e      	ldr	r2, [pc, #248]	@ (8006318 <HAL_ADC_ConfigChannel+0x834>)
 8006220:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006224:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006228:	4619      	mov	r1, r3
 800622a:	4610      	mov	r0, r2
 800622c:	f7fe ffb9 	bl	80051a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006230:	4b3e      	ldr	r3, [pc, #248]	@ (800632c <HAL_ADC_ConfigChannel+0x848>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	099b      	lsrs	r3, r3, #6
 8006236:	4a3e      	ldr	r2, [pc, #248]	@ (8006330 <HAL_ADC_ConfigChannel+0x84c>)
 8006238:	fba2 2303 	umull	r2, r3, r2, r3
 800623c:	099b      	lsrs	r3, r3, #6
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	4613      	mov	r3, r2
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800624a:	e002      	b.n	8006252 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3b01      	subs	r3, #1
 8006250:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1f9      	bne.n	800624c <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006258:	e054      	b.n	8006304 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a35      	ldr	r2, [pc, #212]	@ (8006334 <HAL_ADC_ConfigChannel+0x850>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d120      	bne.n	80062a6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006264:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006268:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d11a      	bne.n	80062a6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006278:	d144      	bne.n	8006304 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006282:	d004      	beq.n	800628e <HAL_ADC_ConfigChannel+0x7aa>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a26      	ldr	r2, [pc, #152]	@ (8006324 <HAL_ADC_ConfigChannel+0x840>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d101      	bne.n	8006292 <HAL_ADC_ConfigChannel+0x7ae>
 800628e:	4a26      	ldr	r2, [pc, #152]	@ (8006328 <HAL_ADC_ConfigChannel+0x844>)
 8006290:	e000      	b.n	8006294 <HAL_ADC_ConfigChannel+0x7b0>
 8006292:	4a21      	ldr	r2, [pc, #132]	@ (8006318 <HAL_ADC_ConfigChannel+0x834>)
 8006294:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006298:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f7fe ff7f 	bl	80051a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80062a4:	e02e      	b.n	8006304 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a23      	ldr	r2, [pc, #140]	@ (8006338 <HAL_ADC_ConfigChannel+0x854>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d129      	bne.n	8006304 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80062b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d123      	bne.n	8006304 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a18      	ldr	r2, [pc, #96]	@ (8006324 <HAL_ADC_ConfigChannel+0x840>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01e      	beq.n	8006304 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062ce:	d004      	beq.n	80062da <HAL_ADC_ConfigChannel+0x7f6>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a13      	ldr	r2, [pc, #76]	@ (8006324 <HAL_ADC_ConfigChannel+0x840>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d101      	bne.n	80062de <HAL_ADC_ConfigChannel+0x7fa>
 80062da:	4a13      	ldr	r2, [pc, #76]	@ (8006328 <HAL_ADC_ConfigChannel+0x844>)
 80062dc:	e000      	b.n	80062e0 <HAL_ADC_ConfigChannel+0x7fc>
 80062de:	4a0e      	ldr	r2, [pc, #56]	@ (8006318 <HAL_ADC_ConfigChannel+0x834>)
 80062e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80062e8:	4619      	mov	r1, r3
 80062ea:	4610      	mov	r0, r2
 80062ec:	f7fe ff59 	bl	80051a2 <LL_ADC_SetCommonPathInternalCh>
 80062f0:	e008      	b.n	8006304 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062f6:	f043 0220 	orr.w	r2, r3, #32
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800630c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006310:	4618      	mov	r0, r3
 8006312:	37d8      	adds	r7, #216	@ 0xd8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	50000700 	.word	0x50000700
 800631c:	c3210000 	.word	0xc3210000
 8006320:	90c00010 	.word	0x90c00010
 8006324:	50000100 	.word	0x50000100
 8006328:	50000300 	.word	0x50000300
 800632c:	200000c0 	.word	0x200000c0
 8006330:	053e2d63 	.word	0x053e2d63
 8006334:	c7520000 	.word	0xc7520000
 8006338:	cb840000 	.word	0xcb840000

0800633c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006344:	2300      	movs	r3, #0
 8006346:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff f8e5 	bl	800551c <LL_ADC_IsEnabled>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d176      	bne.n	8006446 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	4b3c      	ldr	r3, [pc, #240]	@ (8006450 <ADC_Enable+0x114>)
 8006360:	4013      	ands	r3, r2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00d      	beq.n	8006382 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800636a:	f043 0210 	orr.w	r2, r3, #16
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006376:	f043 0201 	orr.w	r2, r3, #1
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e062      	b.n	8006448 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4618      	mov	r0, r3
 8006388:	f7ff f8b4 	bl	80054f4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006394:	d004      	beq.n	80063a0 <ADC_Enable+0x64>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a2e      	ldr	r2, [pc, #184]	@ (8006454 <ADC_Enable+0x118>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d101      	bne.n	80063a4 <ADC_Enable+0x68>
 80063a0:	4b2d      	ldr	r3, [pc, #180]	@ (8006458 <ADC_Enable+0x11c>)
 80063a2:	e000      	b.n	80063a6 <ADC_Enable+0x6a>
 80063a4:	4b2d      	ldr	r3, [pc, #180]	@ (800645c <ADC_Enable+0x120>)
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe ff0e 	bl	80051c8 <LL_ADC_GetCommonPathInternalCh>
 80063ac:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80063ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d013      	beq.n	80063de <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80063b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006460 <ADC_Enable+0x124>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	099b      	lsrs	r3, r3, #6
 80063bc:	4a29      	ldr	r2, [pc, #164]	@ (8006464 <ADC_Enable+0x128>)
 80063be:	fba2 2303 	umull	r2, r3, r2, r3
 80063c2:	099b      	lsrs	r3, r3, #6
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	4613      	mov	r3, r2
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80063d0:	e002      	b.n	80063d8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f9      	bne.n	80063d2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80063de:	f7fe fe9f 	bl	8005120 <HAL_GetTick>
 80063e2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80063e4:	e028      	b.n	8006438 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7ff f896 	bl	800551c <LL_ADC_IsEnabled>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d104      	bne.n	8006400 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff f87a 	bl	80054f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006400:	f7fe fe8e 	bl	8005120 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d914      	bls.n	8006438 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b01      	cmp	r3, #1
 800641a:	d00d      	beq.n	8006438 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006420:	f043 0210 	orr.w	r2, r3, #16
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800642c:	f043 0201 	orr.w	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e007      	b.n	8006448 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b01      	cmp	r3, #1
 8006444:	d1cf      	bne.n	80063e6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	8000003f 	.word	0x8000003f
 8006454:	50000100 	.word	0x50000100
 8006458:	50000300 	.word	0x50000300
 800645c:	50000700 	.word	0x50000700
 8006460:	200000c0 	.word	0x200000c0
 8006464:	053e2d63 	.word	0x053e2d63

08006468 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006474:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800647a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800647e:	2b00      	cmp	r3, #0
 8006480:	d14b      	bne.n	800651a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006486:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d021      	beq.n	80064e0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fe ff3d 	bl	8005320 <LL_ADC_REG_IsTriggerSourceSWStart>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d032      	beq.n	8006512 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d12b      	bne.n	8006512 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064be:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d11f      	bne.n	8006512 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d6:	f043 0201 	orr.w	r2, r3, #1
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80064de:	e018      	b.n	8006512 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d111      	bne.n	8006512 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d105      	bne.n	8006512 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800650a:	f043 0201 	orr.w	r2, r3, #1
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f7ff fac8 	bl	8005aa8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006518:	e00e      	b.n	8006538 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800651e:	f003 0310 	and.w	r3, r3, #16
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f7ff fad2 	bl	8005ad0 <HAL_ADC_ErrorCallback>
}
 800652c:	e004      	b.n	8006538 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	4798      	blx	r3
}
 8006538:	bf00      	nop
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f7ff fab4 	bl	8005abc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006554:	bf00      	nop
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006568:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800656e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800657a:	f043 0204 	orr.w	r2, r3, #4
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f7ff faa4 	bl	8005ad0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <LL_ADC_IsEnabled>:
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d101      	bne.n	80065a8 <LL_ADC_IsEnabled+0x18>
 80065a4:	2301      	movs	r3, #1
 80065a6:	e000      	b.n	80065aa <LL_ADC_IsEnabled+0x1a>
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d101      	bne.n	80065ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80065ca:	2301      	movs	r3, #1
 80065cc:	e000      	b.n	80065d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80065dc:	b590      	push	{r4, r7, lr}
 80065de:	b0a1      	sub	sp, #132	@ 0x84
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d101      	bne.n	80065fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80065f6:	2302      	movs	r3, #2
 80065f8:	e0cb      	b.n	8006792 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006602:	2300      	movs	r3, #0
 8006604:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006606:	2300      	movs	r3, #0
 8006608:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006612:	d102      	bne.n	800661a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006614:	4b61      	ldr	r3, [pc, #388]	@ (800679c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006616:	60bb      	str	r3, [r7, #8]
 8006618:	e001      	b.n	800661e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800661a:	2300      	movs	r3, #0
 800661c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10b      	bne.n	800663c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006628:	f043 0220 	orr.w	r2, r3, #32
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e0aa      	b.n	8006792 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff ffb9 	bl	80065b6 <LL_ADC_REG_IsConversionOngoing>
 8006644:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff ffb3 	bl	80065b6 <LL_ADC_REG_IsConversionOngoing>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	f040 808c 	bne.w	8006770 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006658:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800665a:	2b00      	cmp	r3, #0
 800665c:	f040 8088 	bne.w	8006770 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006668:	d004      	beq.n	8006674 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a4b      	ldr	r2, [pc, #300]	@ (800679c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d101      	bne.n	8006678 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8006674:	4b4a      	ldr	r3, [pc, #296]	@ (80067a0 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8006676:	e000      	b.n	800667a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006678:	4b4a      	ldr	r3, [pc, #296]	@ (80067a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 800667a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d041      	beq.n	8006708 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006684:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	6859      	ldr	r1, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006696:	035b      	lsls	r3, r3, #13
 8006698:	430b      	orrs	r3, r1
 800669a:	431a      	orrs	r2, r3
 800669c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800669e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066a8:	d004      	beq.n	80066b4 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a3b      	ldr	r2, [pc, #236]	@ (800679c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d10f      	bne.n	80066d4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 80066b4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80066b8:	f7ff ff6a 	bl	8006590 <LL_ADC_IsEnabled>
 80066bc:	4604      	mov	r4, r0
 80066be:	4837      	ldr	r0, [pc, #220]	@ (800679c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80066c0:	f7ff ff66 	bl	8006590 <LL_ADC_IsEnabled>
 80066c4:	4603      	mov	r3, r0
 80066c6:	4323      	orrs	r3, r4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	bf0c      	ite	eq
 80066cc:	2301      	moveq	r3, #1
 80066ce:	2300      	movne	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	e008      	b.n	80066e6 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 80066d4:	4834      	ldr	r0, [pc, #208]	@ (80067a8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80066d6:	f7ff ff5b 	bl	8006590 <LL_ADC_IsEnabled>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	bf0c      	ite	eq
 80066e0:	2301      	moveq	r3, #1
 80066e2:	2300      	movne	r3, #0
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d04c      	beq.n	8006784 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80066ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80066f2:	f023 030f 	bic.w	r3, r3, #15
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	6811      	ldr	r1, [r2, #0]
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	6892      	ldr	r2, [r2, #8]
 80066fe:	430a      	orrs	r2, r1
 8006700:	431a      	orrs	r2, r3
 8006702:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006704:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006706:	e03d      	b.n	8006784 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006708:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006710:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006712:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800671c:	d004      	beq.n	8006728 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1e      	ldr	r2, [pc, #120]	@ (800679c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d10f      	bne.n	8006748 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8006728:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800672c:	f7ff ff30 	bl	8006590 <LL_ADC_IsEnabled>
 8006730:	4604      	mov	r4, r0
 8006732:	481a      	ldr	r0, [pc, #104]	@ (800679c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006734:	f7ff ff2c 	bl	8006590 <LL_ADC_IsEnabled>
 8006738:	4603      	mov	r3, r0
 800673a:	4323      	orrs	r3, r4
 800673c:	2b00      	cmp	r3, #0
 800673e:	bf0c      	ite	eq
 8006740:	2301      	moveq	r3, #1
 8006742:	2300      	movne	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	e008      	b.n	800675a <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8006748:	4817      	ldr	r0, [pc, #92]	@ (80067a8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800674a:	f7ff ff21 	bl	8006590 <LL_ADC_IsEnabled>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	bf0c      	ite	eq
 8006754:	2301      	moveq	r3, #1
 8006756:	2300      	movne	r3, #0
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d012      	beq.n	8006784 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800675e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006766:	f023 030f 	bic.w	r3, r3, #15
 800676a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800676c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800676e:	e009      	b.n	8006784 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006774:	f043 0220 	orr.w	r2, r3, #32
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006782:	e000      	b.n	8006786 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006784:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800678e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006792:	4618      	mov	r0, r3
 8006794:	3784      	adds	r7, #132	@ 0x84
 8006796:	46bd      	mov	sp, r7
 8006798:	bd90      	pop	{r4, r7, pc}
 800679a:	bf00      	nop
 800679c:	50000100 	.word	0x50000100
 80067a0:	50000300 	.word	0x50000300
 80067a4:	50000700 	.word	0x50000700
 80067a8:	50000400 	.word	0x50000400

080067ac <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e023      	b.n	8006806 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d106      	bne.n	80067d8 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7fe f99a 	bl	8004b0c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006820:	4b0c      	ldr	r3, [pc, #48]	@ (8006854 <__NVIC_SetPriorityGrouping+0x44>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800682c:	4013      	ands	r3, r2
 800682e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006838:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800683c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006842:	4a04      	ldr	r2, [pc, #16]	@ (8006854 <__NVIC_SetPriorityGrouping+0x44>)
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	60d3      	str	r3, [r2, #12]
}
 8006848:	bf00      	nop
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	e000ed00 	.word	0xe000ed00

08006858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800685c:	4b04      	ldr	r3, [pc, #16]	@ (8006870 <__NVIC_GetPriorityGrouping+0x18>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	0a1b      	lsrs	r3, r3, #8
 8006862:	f003 0307 	and.w	r3, r3, #7
}
 8006866:	4618      	mov	r0, r3
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	e000ed00 	.word	0xe000ed00

08006874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	4603      	mov	r3, r0
 800687c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800687e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006882:	2b00      	cmp	r3, #0
 8006884:	db0b      	blt.n	800689e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006886:	79fb      	ldrb	r3, [r7, #7]
 8006888:	f003 021f 	and.w	r2, r3, #31
 800688c:	4907      	ldr	r1, [pc, #28]	@ (80068ac <__NVIC_EnableIRQ+0x38>)
 800688e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006892:	095b      	lsrs	r3, r3, #5
 8006894:	2001      	movs	r0, #1
 8006896:	fa00 f202 	lsl.w	r2, r0, r2
 800689a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800689e:	bf00      	nop
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	e000e100 	.word	0xe000e100

080068b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	6039      	str	r1, [r7, #0]
 80068ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	db0a      	blt.n	80068da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	490c      	ldr	r1, [pc, #48]	@ (80068fc <__NVIC_SetPriority+0x4c>)
 80068ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ce:	0112      	lsls	r2, r2, #4
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	440b      	add	r3, r1
 80068d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068d8:	e00a      	b.n	80068f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	4908      	ldr	r1, [pc, #32]	@ (8006900 <__NVIC_SetPriority+0x50>)
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	3b04      	subs	r3, #4
 80068e8:	0112      	lsls	r2, r2, #4
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	440b      	add	r3, r1
 80068ee:	761a      	strb	r2, [r3, #24]
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	e000e100 	.word	0xe000e100
 8006900:	e000ed00 	.word	0xe000ed00

08006904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006904:	b480      	push	{r7}
 8006906:	b089      	sub	sp, #36	@ 0x24
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	f1c3 0307 	rsb	r3, r3, #7
 800691e:	2b04      	cmp	r3, #4
 8006920:	bf28      	it	cs
 8006922:	2304      	movcs	r3, #4
 8006924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	3304      	adds	r3, #4
 800692a:	2b06      	cmp	r3, #6
 800692c:	d902      	bls.n	8006934 <NVIC_EncodePriority+0x30>
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	3b03      	subs	r3, #3
 8006932:	e000      	b.n	8006936 <NVIC_EncodePriority+0x32>
 8006934:	2300      	movs	r3, #0
 8006936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006938:	f04f 32ff 	mov.w	r2, #4294967295
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	43da      	mvns	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	401a      	ands	r2, r3
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800694c:	f04f 31ff 	mov.w	r1, #4294967295
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	fa01 f303 	lsl.w	r3, r1, r3
 8006956:	43d9      	mvns	r1, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800695c:	4313      	orrs	r3, r2
         );
}
 800695e:	4618      	mov	r0, r3
 8006960:	3724      	adds	r7, #36	@ 0x24
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
	...

0800696c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3b01      	subs	r3, #1
 8006978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800697c:	d301      	bcc.n	8006982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800697e:	2301      	movs	r3, #1
 8006980:	e00f      	b.n	80069a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006982:	4a0a      	ldr	r2, [pc, #40]	@ (80069ac <SysTick_Config+0x40>)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3b01      	subs	r3, #1
 8006988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800698a:	210f      	movs	r1, #15
 800698c:	f04f 30ff 	mov.w	r0, #4294967295
 8006990:	f7ff ff8e 	bl	80068b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006994:	4b05      	ldr	r3, [pc, #20]	@ (80069ac <SysTick_Config+0x40>)
 8006996:	2200      	movs	r2, #0
 8006998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800699a:	4b04      	ldr	r3, [pc, #16]	@ (80069ac <SysTick_Config+0x40>)
 800699c:	2207      	movs	r2, #7
 800699e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	e000e010 	.word	0xe000e010

080069b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff ff29 	bl	8006810 <__NVIC_SetPriorityGrouping>
}
 80069be:	bf00      	nop
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b086      	sub	sp, #24
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	4603      	mov	r3, r0
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	607a      	str	r2, [r7, #4]
 80069d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80069d4:	f7ff ff40 	bl	8006858 <__NVIC_GetPriorityGrouping>
 80069d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	68b9      	ldr	r1, [r7, #8]
 80069de:	6978      	ldr	r0, [r7, #20]
 80069e0:	f7ff ff90 	bl	8006904 <NVIC_EncodePriority>
 80069e4:	4602      	mov	r2, r0
 80069e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069ea:	4611      	mov	r1, r2
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff ff5f 	bl	80068b0 <__NVIC_SetPriority>
}
 80069f2:	bf00      	nop
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b082      	sub	sp, #8
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	4603      	mov	r3, r0
 8006a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7ff ff33 	bl	8006874 <__NVIC_EnableIRQ>
}
 8006a0e:	bf00      	nop
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b082      	sub	sp, #8
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff ffa4 	bl	800696c <SysTick_Config>
 8006a24:	4603      	mov	r3, r0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
	...

08006a30 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e054      	b.n	8006aec <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	7f5b      	ldrb	r3, [r3, #29]
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d105      	bne.n	8006a58 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7fe f87a 	bl	8004b4c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	791b      	ldrb	r3, [r3, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10c      	bne.n	8006a80 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a22      	ldr	r2, [pc, #136]	@ (8006af4 <HAL_CRC_Init+0xc4>)
 8006a6c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 0218 	bic.w	r2, r2, #24
 8006a7c:	609a      	str	r2, [r3, #8]
 8006a7e:	e00c      	b.n	8006a9a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6899      	ldr	r1, [r3, #8]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f834 	bl	8006af8 <HAL_CRCEx_Polynomial_Set>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e028      	b.n	8006aec <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	795b      	ldrb	r3, [r3, #5]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d105      	bne.n	8006aae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8006aaa:	611a      	str	r2, [r3, #16]
 8006aac:	e004      	b.n	8006ab8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6912      	ldr	r2, [r2, #16]
 8006ab6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	695a      	ldr	r2, [r3, #20]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699a      	ldr	r2, [r3, #24]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	04c11db7 	.word	0x04c11db7

08006af8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006b08:	231f      	movs	r3, #31
 8006b0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d102      	bne.n	8006b1c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	75fb      	strb	r3, [r7, #23]
 8006b1a:	e063      	b.n	8006be4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006b1c:	bf00      	nop
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1e5a      	subs	r2, r3, #1
 8006b22:	613a      	str	r2, [r7, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d009      	beq.n	8006b3c <HAL_CRCEx_Polynomial_Set+0x44>
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f003 031f 	and.w	r3, r3, #31
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	fa22 f303 	lsr.w	r3, r2, r3
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d0f0      	beq.n	8006b1e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b18      	cmp	r3, #24
 8006b40:	d846      	bhi.n	8006bd0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8006b42:	a201      	add	r2, pc, #4	@ (adr r2, 8006b48 <HAL_CRCEx_Polynomial_Set+0x50>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006bd7 	.word	0x08006bd7
 8006b4c:	08006bd1 	.word	0x08006bd1
 8006b50:	08006bd1 	.word	0x08006bd1
 8006b54:	08006bd1 	.word	0x08006bd1
 8006b58:	08006bd1 	.word	0x08006bd1
 8006b5c:	08006bd1 	.word	0x08006bd1
 8006b60:	08006bd1 	.word	0x08006bd1
 8006b64:	08006bd1 	.word	0x08006bd1
 8006b68:	08006bc5 	.word	0x08006bc5
 8006b6c:	08006bd1 	.word	0x08006bd1
 8006b70:	08006bd1 	.word	0x08006bd1
 8006b74:	08006bd1 	.word	0x08006bd1
 8006b78:	08006bd1 	.word	0x08006bd1
 8006b7c:	08006bd1 	.word	0x08006bd1
 8006b80:	08006bd1 	.word	0x08006bd1
 8006b84:	08006bd1 	.word	0x08006bd1
 8006b88:	08006bb9 	.word	0x08006bb9
 8006b8c:	08006bd1 	.word	0x08006bd1
 8006b90:	08006bd1 	.word	0x08006bd1
 8006b94:	08006bd1 	.word	0x08006bd1
 8006b98:	08006bd1 	.word	0x08006bd1
 8006b9c:	08006bd1 	.word	0x08006bd1
 8006ba0:	08006bd1 	.word	0x08006bd1
 8006ba4:	08006bd1 	.word	0x08006bd1
 8006ba8:	08006bad 	.word	0x08006bad
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	2b06      	cmp	r3, #6
 8006bb0:	d913      	bls.n	8006bda <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006bb6:	e010      	b.n	8006bda <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	2b07      	cmp	r3, #7
 8006bbc:	d90f      	bls.n	8006bde <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006bc2:	e00c      	b.n	8006bde <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	2b0f      	cmp	r3, #15
 8006bc8:	d90b      	bls.n	8006be2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006bce:	e008      	b.n	8006be2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	75fb      	strb	r3, [r7, #23]
        break;
 8006bd4:	e006      	b.n	8006be4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006bd6:	bf00      	nop
 8006bd8:	e004      	b.n	8006be4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006bda:	bf00      	nop
 8006bdc:	e002      	b.n	8006be4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006bde:	bf00      	nop
 8006be0:	e000      	b.n	8006be4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006be2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006be4:	7dfb      	ldrb	r3, [r7, #23]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10d      	bne.n	8006c06 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f023 0118 	bic.w	r1, r3, #24
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	371c      	adds	r7, #28
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e08d      	b.n	8006d42 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	4b47      	ldr	r3, [pc, #284]	@ (8006d4c <HAL_DMA_Init+0x138>)
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d80f      	bhi.n	8006c52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	4b45      	ldr	r3, [pc, #276]	@ (8006d50 <HAL_DMA_Init+0x13c>)
 8006c3a:	4413      	add	r3, r2
 8006c3c:	4a45      	ldr	r2, [pc, #276]	@ (8006d54 <HAL_DMA_Init+0x140>)
 8006c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c42:	091b      	lsrs	r3, r3, #4
 8006c44:	009a      	lsls	r2, r3, #2
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a42      	ldr	r2, [pc, #264]	@ (8006d58 <HAL_DMA_Init+0x144>)
 8006c4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006c50:	e00e      	b.n	8006c70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	4b40      	ldr	r3, [pc, #256]	@ (8006d5c <HAL_DMA_Init+0x148>)
 8006c5a:	4413      	add	r3, r2
 8006c5c:	4a3d      	ldr	r2, [pc, #244]	@ (8006d54 <HAL_DMA_Init+0x140>)
 8006c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c62:	091b      	lsrs	r3, r3, #4
 8006c64:	009a      	lsls	r2, r3, #2
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a3c      	ldr	r2, [pc, #240]	@ (8006d60 <HAL_DMA_Init+0x14c>)
 8006c6e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f9b6 	bl	8007034 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cd0:	d102      	bne.n	8006cd8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006cec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d010      	beq.n	8006d18 <HAL_DMA_Init+0x104>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d80c      	bhi.n	8006d18 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f9d6 	bl	80070b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006d14:	605a      	str	r2, [r3, #4]
 8006d16:	e008      	b.n	8006d2a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	40020407 	.word	0x40020407
 8006d50:	bffdfff8 	.word	0xbffdfff8
 8006d54:	cccccccd 	.word	0xcccccccd
 8006d58:	40020000 	.word	0x40020000
 8006d5c:	bffdfbf8 	.word	0xbffdfbf8
 8006d60:	40020400 	.word	0x40020400

08006d64 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d101      	bne.n	8006d84 <HAL_DMA_Start_IT+0x20>
 8006d80:	2302      	movs	r3, #2
 8006d82:	e066      	b.n	8006e52 <HAL_DMA_Start_IT+0xee>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d155      	bne.n	8006e44 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0201 	bic.w	r2, r2, #1
 8006db4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 f8fb 	bl	8006fb8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d008      	beq.n	8006ddc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f042 020e 	orr.w	r2, r2, #14
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	e00f      	b.n	8006dfc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 0204 	bic.w	r2, r2, #4
 8006dea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 020a 	orr.w	r2, r2, #10
 8006dfa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d007      	beq.n	8006e1a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e18:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d007      	beq.n	8006e32 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e30:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f042 0201 	orr.w	r2, r2, #1
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	e005      	b.n	8006e50 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3718      	adds	r7, #24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e76:	f003 031f 	and.w	r3, r3, #31
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	409a      	lsls	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4013      	ands	r3, r2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d026      	beq.n	8006ed4 <HAL_DMA_IRQHandler+0x7a>
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d021      	beq.n	8006ed4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0320 	and.w	r3, r3, #32
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d107      	bne.n	8006eae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 0204 	bic.w	r2, r2, #4
 8006eac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eb2:	f003 021f 	and.w	r2, r3, #31
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eba:	2104      	movs	r1, #4
 8006ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8006ec0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d071      	beq.n	8006fae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006ed2:	e06c      	b.n	8006fae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	2202      	movs	r2, #2
 8006ede:	409a      	lsls	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d02e      	beq.n	8006f46 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d029      	beq.n	8006f46 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0320 	and.w	r3, r3, #32
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 020a 	bic.w	r2, r2, #10
 8006f0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f1c:	f003 021f 	and.w	r2, r3, #31
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f24:	2102      	movs	r1, #2
 8006f26:	fa01 f202 	lsl.w	r2, r1, r2
 8006f2a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d038      	beq.n	8006fae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006f44:	e033      	b.n	8006fae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	2208      	movs	r2, #8
 8006f50:	409a      	lsls	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	4013      	ands	r3, r2
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d02a      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d025      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 020e 	bic.w	r2, r2, #14
 8006f72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f78:	f003 021f 	and.w	r2, r3, #31
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f80:	2101      	movs	r1, #1
 8006f82:	fa01 f202 	lsl.w	r2, r1, r2
 8006f86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d004      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
}
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
 8006fc4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006fce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d004      	beq.n	8006fe2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006fe0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe6:	f003 021f 	and.w	r2, r3, #31
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fee:	2101      	movs	r1, #1
 8006ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8006ff4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	2b10      	cmp	r3, #16
 8007004:	d108      	bne.n	8007018 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007016:	e007      	b.n	8007028 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	60da      	str	r2, [r3, #12]
}
 8007028:	bf00      	nop
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	461a      	mov	r2, r3
 8007042:	4b16      	ldr	r3, [pc, #88]	@ (800709c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007044:	429a      	cmp	r2, r3
 8007046:	d802      	bhi.n	800704e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007048:	4b15      	ldr	r3, [pc, #84]	@ (80070a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	e001      	b.n	8007052 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800704e:	4b15      	ldr	r3, [pc, #84]	@ (80070a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007050:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	b2db      	uxtb	r3, r3
 800705c:	3b08      	subs	r3, #8
 800705e:	4a12      	ldr	r2, [pc, #72]	@ (80070a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007060:	fba2 2303 	umull	r2, r3, r2, r3
 8007064:	091b      	lsrs	r3, r3, #4
 8007066:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800706c:	089b      	lsrs	r3, r3, #2
 800706e:	009a      	lsls	r2, r3, #2
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	4413      	add	r3, r2
 8007074:	461a      	mov	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a0b      	ldr	r2, [pc, #44]	@ (80070ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800707e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f003 031f 	and.w	r3, r3, #31
 8007086:	2201      	movs	r2, #1
 8007088:	409a      	lsls	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800708e:	bf00      	nop
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	40020407 	.word	0x40020407
 80070a0:	40020800 	.word	0x40020800
 80070a4:	40020820 	.word	0x40020820
 80070a8:	cccccccd 	.word	0xcccccccd
 80070ac:	40020880 	.word	0x40020880

080070b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	4b0b      	ldr	r3, [pc, #44]	@ (80070f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80070c4:	4413      	add	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	461a      	mov	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a08      	ldr	r2, [pc, #32]	@ (80070f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80070d2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	f003 031f 	and.w	r3, r3, #31
 80070dc:	2201      	movs	r2, #1
 80070de:	409a      	lsls	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80070e4:	bf00      	nop
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	1000823f 	.word	0x1000823f
 80070f4:	40020940 	.word	0x40020940

080070f8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e147      	b.n	800739a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d106      	bne.n	8007124 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7fd fd34 	bl	8004b8c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 0210 	bic.w	r2, r2, #16
 8007132:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007134:	f7fd fff4 	bl	8005120 <HAL_GetTick>
 8007138:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800713a:	e012      	b.n	8007162 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800713c:	f7fd fff0 	bl	8005120 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b0a      	cmp	r3, #10
 8007148:	d90b      	bls.n	8007162 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800714e:	f043 0201 	orr.w	r2, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2203      	movs	r2, #3
 800715a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e11b      	b.n	800739a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	f003 0308 	and.w	r3, r3, #8
 800716c:	2b08      	cmp	r3, #8
 800716e:	d0e5      	beq.n	800713c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699a      	ldr	r2, [r3, #24]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0201 	orr.w	r2, r2, #1
 800717e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007180:	f7fd ffce 	bl	8005120 <HAL_GetTick>
 8007184:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007186:	e012      	b.n	80071ae <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007188:	f7fd ffca 	bl	8005120 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b0a      	cmp	r3, #10
 8007194:	d90b      	bls.n	80071ae <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800719a:	f043 0201 	orr.w	r2, r3, #1
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2203      	movs	r2, #3
 80071a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e0f5      	b.n	800739a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d0e5      	beq.n	8007188 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 0202 	orr.w	r2, r2, #2
 80071ca:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a74      	ldr	r2, [pc, #464]	@ (80073a4 <HAL_FDCAN_Init+0x2ac>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d103      	bne.n	80071de <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80071d6:	4a74      	ldr	r2, [pc, #464]	@ (80073a8 <HAL_FDCAN_Init+0x2b0>)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	7c1b      	ldrb	r3, [r3, #16]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d108      	bne.n	80071f8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	699a      	ldr	r2, [r3, #24]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071f4:	619a      	str	r2, [r3, #24]
 80071f6:	e007      	b.n	8007208 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699a      	ldr	r2, [r3, #24]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007206:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	7c5b      	ldrb	r3, [r3, #17]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d108      	bne.n	8007222 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699a      	ldr	r2, [r3, #24]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800721e:	619a      	str	r2, [r3, #24]
 8007220:	e007      	b.n	8007232 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699a      	ldr	r2, [r3, #24]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007230:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	7c9b      	ldrb	r3, [r3, #18]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d108      	bne.n	800724c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	699a      	ldr	r2, [r3, #24]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007248:	619a      	str	r2, [r3, #24]
 800724a:	e007      	b.n	800725c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699a      	ldr	r2, [r3, #24]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800725a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	689a      	ldr	r2, [r3, #8]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	699a      	ldr	r2, [r3, #24]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8007280:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	691a      	ldr	r2, [r3, #16]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0210 	bic.w	r2, r2, #16
 8007290:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d108      	bne.n	80072ac <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	699a      	ldr	r2, [r3, #24]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0204 	orr.w	r2, r2, #4
 80072a8:	619a      	str	r2, [r3, #24]
 80072aa:	e02c      	b.n	8007306 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d028      	beq.n	8007306 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d01c      	beq.n	80072f6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699a      	ldr	r2, [r3, #24]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80072ca:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	691a      	ldr	r2, [r3, #16]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0210 	orr.w	r2, r2, #16
 80072da:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d110      	bne.n	8007306 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699a      	ldr	r2, [r3, #24]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0220 	orr.w	r2, r2, #32
 80072f2:	619a      	str	r2, [r3, #24]
 80072f4:	e007      	b.n	8007306 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	699a      	ldr	r2, [r3, #24]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f042 0220 	orr.w	r2, r2, #32
 8007304:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	3b01      	subs	r3, #1
 800730c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	3b01      	subs	r3, #1
 8007314:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007316:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800731e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	3b01      	subs	r3, #1
 8007328:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800732e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007330:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800733a:	d115      	bne.n	8007368 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007340:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007346:	3b01      	subs	r3, #1
 8007348:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800734a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007350:	3b01      	subs	r3, #1
 8007352:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007354:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735c:	3b01      	subs	r3, #1
 800735e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007364:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007366:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f9ae 	bl	80076e0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	40006400 	.word	0x40006400
 80073a8:	40006500 	.word	0x40006500

080073ac <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08c      	sub	sp, #48	@ 0x30
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ba:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80073be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073c8:	4013      	ands	r3, r2
 80073ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073d2:	f003 0307 	and.w	r3, r3, #7
 80073d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073e0:	4013      	ands	r3, r2
 80073e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073f8:	4013      	ands	r3, r2
 80073fa:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007402:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8007406:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800740e:	6a3a      	ldr	r2, [r7, #32]
 8007410:	4013      	ands	r3, r2
 8007412:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800741a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800741e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007426:	69fa      	ldr	r2, [r7, #28]
 8007428:	4013      	ands	r3, r2
 800742a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007432:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800743a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00b      	beq.n	800745e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800744c:	2b00      	cmp	r3, #0
 800744e:	d006      	beq.n	800745e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2240      	movs	r2, #64	@ 0x40
 8007456:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f921 	bl	80076a0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007464:	2b00      	cmp	r3, #0
 8007466:	d019      	beq.n	800749c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800746e:	2b00      	cmp	r3, #0
 8007470:	d014      	beq.n	800749c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800747a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4013      	ands	r3, r2
 8007488:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007492:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007494:	6939      	ldr	r1, [r7, #16]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f8e3 	bl	8007662 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800749c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d007      	beq.n	80074b2 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074a8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80074aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f8a2 	bl	80075f6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80074b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d007      	beq.n	80074c8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074be:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80074c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f8a2 	bl	800760c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80074c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d007      	beq.n	80074de <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80074d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f8a2 	bl	8007622 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00c      	beq.n	8007502 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074fa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f89b 	bl	8007638 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007508:	2b00      	cmp	r3, #0
 800750a:	d018      	beq.n	800753e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007512:	2b00      	cmp	r3, #0
 8007514:	d013      	beq.n	800753e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800751e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4013      	ands	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2280      	movs	r2, #128	@ 0x80
 8007534:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007536:	68f9      	ldr	r1, [r7, #12]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f887 	bl	800764c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00c      	beq.n	8007562 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d007      	beq.n	8007562 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800755a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f88b 	bl	8007678 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00c      	beq.n	8007586 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d007      	beq.n	8007586 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800757e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f883 	bl	800768c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00f      	beq.n	80075b0 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80075a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d007      	beq.n	80075c6 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69fa      	ldr	r2, [r7, #28]
 80075bc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80075be:	69f9      	ldr	r1, [r7, #28]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f881 	bl	80076c8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d009      	beq.n	80075e0 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6a3a      	ldr	r2, [r7, #32]
 80075d2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f863 	bl	80076b4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80075ee:	bf00      	nop
 80075f0:	3730      	adds	r7, #48	@ 0x30
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007622:	b480      	push	{r7}
 8007624:	b083      	sub	sp, #12
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007656:	bf00      	nop
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
	...

080076e0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80076e8:	4b2c      	ldr	r3, [pc, #176]	@ (800779c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80076ea:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a2b      	ldr	r2, [pc, #172]	@ (80077a0 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d103      	bne.n	80076fe <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80076fc:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800770c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007714:	041a      	lsls	r2, r3, #16
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007732:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773a:	061a      	lsls	r2, r3, #24
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	60fb      	str	r3, [r7, #12]
 8007772:	e005      	b.n	8007780 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3304      	adds	r3, #4
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	429a      	cmp	r2, r3
 800778a:	d3f3      	bcc.n	8007774 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800778c:	bf00      	nop
 800778e:	bf00      	nop
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	4000a400 	.word	0x4000a400
 80077a0:	40006800 	.word	0x40006800

080077a4 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e033      	b.n	800781e <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d106      	bne.n	80077d0 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7fd fa60 	bl	8004c90 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f854 	bl	8007884 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f822 	bl	8007826 <FMAC_Reset>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d10c      	bne.n	8007802 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ec:	f043 0210 	orr.w	r2, r3, #16
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	22a0      	movs	r2, #160	@ 0xa0
 80077f8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	73fb      	strb	r3, [r7, #15]
 8007800:	e008      	b.n	8007814 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2220      	movs	r2, #32
 800780c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800782e:	f7fd fc77 	bl	8005120 <HAL_GetTick>
 8007832:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	691a      	ldr	r2, [r3, #16]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007842:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007844:	e00f      	b.n	8007866 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8007846:	f7fd fc6b 	bl	8005120 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007854:	d907      	bls.n	8007866 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800785a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e00a      	b.n	800787c <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e8      	bne.n	8007846 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f807 	bl	80078a0 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f81b 	bl	80078ce <FMAC_ResetOutputStateAndDataPointers>
}
 8007898:	bf00      	nop
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2220      	movs	r2, #32
 80078be:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007906:	2300      	movs	r3, #0
 8007908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800790a:	e15a      	b.n	8007bc2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	2101      	movs	r1, #1
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	fa01 f303 	lsl.w	r3, r1, r3
 8007918:	4013      	ands	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 814c 	beq.w	8007bbc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f003 0303 	and.w	r3, r3, #3
 800792c:	2b01      	cmp	r3, #1
 800792e:	d005      	beq.n	800793c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007938:	2b02      	cmp	r3, #2
 800793a:	d130      	bne.n	800799e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	2203      	movs	r2, #3
 8007948:	fa02 f303 	lsl.w	r3, r2, r3
 800794c:	43db      	mvns	r3, r3
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	4013      	ands	r3, r2
 8007952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	fa02 f303 	lsl.w	r3, r2, r3
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	4313      	orrs	r3, r2
 8007964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007972:	2201      	movs	r2, #1
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	fa02 f303 	lsl.w	r3, r2, r3
 800797a:	43db      	mvns	r3, r3
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	4013      	ands	r3, r2
 8007980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	091b      	lsrs	r3, r3, #4
 8007988:	f003 0201 	and.w	r2, r3, #1
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	fa02 f303 	lsl.w	r3, r2, r3
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	4313      	orrs	r3, r2
 8007996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f003 0303 	and.w	r3, r3, #3
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d017      	beq.n	80079da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	2203      	movs	r2, #3
 80079b6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ba:	43db      	mvns	r3, r3
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	4013      	ands	r3, r2
 80079c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	689a      	ldr	r2, [r3, #8]
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	fa02 f303 	lsl.w	r3, r2, r3
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f003 0303 	and.w	r3, r3, #3
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d123      	bne.n	8007a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	08da      	lsrs	r2, r3, #3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	3208      	adds	r2, #8
 80079ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	220f      	movs	r2, #15
 80079fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007a02:	43db      	mvns	r3, r3
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4013      	ands	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	691a      	ldr	r2, [r3, #16]
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f003 0307 	and.w	r3, r3, #7
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	08da      	lsrs	r2, r3, #3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3208      	adds	r2, #8
 8007a28:	6939      	ldr	r1, [r7, #16]
 8007a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	2203      	movs	r2, #3
 8007a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3e:	43db      	mvns	r3, r3
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	4013      	ands	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f003 0203 	and.w	r2, r3, #3
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	fa02 f303 	lsl.w	r3, r2, r3
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 80a6 	beq.w	8007bbc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a70:	4b5b      	ldr	r3, [pc, #364]	@ (8007be0 <HAL_GPIO_Init+0x2e4>)
 8007a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a74:	4a5a      	ldr	r2, [pc, #360]	@ (8007be0 <HAL_GPIO_Init+0x2e4>)
 8007a76:	f043 0301 	orr.w	r3, r3, #1
 8007a7a:	6613      	str	r3, [r2, #96]	@ 0x60
 8007a7c:	4b58      	ldr	r3, [pc, #352]	@ (8007be0 <HAL_GPIO_Init+0x2e4>)
 8007a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	60bb      	str	r3, [r7, #8]
 8007a86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a88:	4a56      	ldr	r2, [pc, #344]	@ (8007be4 <HAL_GPIO_Init+0x2e8>)
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	089b      	lsrs	r3, r3, #2
 8007a8e:	3302      	adds	r3, #2
 8007a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f003 0303 	and.w	r3, r3, #3
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	220f      	movs	r2, #15
 8007aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa4:	43db      	mvns	r3, r3
 8007aa6:	693a      	ldr	r2, [r7, #16]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007ab2:	d01f      	beq.n	8007af4 <HAL_GPIO_Init+0x1f8>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a4c      	ldr	r2, [pc, #304]	@ (8007be8 <HAL_GPIO_Init+0x2ec>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d019      	beq.n	8007af0 <HAL_GPIO_Init+0x1f4>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a4b      	ldr	r2, [pc, #300]	@ (8007bec <HAL_GPIO_Init+0x2f0>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d013      	beq.n	8007aec <HAL_GPIO_Init+0x1f0>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a4a      	ldr	r2, [pc, #296]	@ (8007bf0 <HAL_GPIO_Init+0x2f4>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d00d      	beq.n	8007ae8 <HAL_GPIO_Init+0x1ec>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a49      	ldr	r2, [pc, #292]	@ (8007bf4 <HAL_GPIO_Init+0x2f8>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d007      	beq.n	8007ae4 <HAL_GPIO_Init+0x1e8>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a48      	ldr	r2, [pc, #288]	@ (8007bf8 <HAL_GPIO_Init+0x2fc>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d101      	bne.n	8007ae0 <HAL_GPIO_Init+0x1e4>
 8007adc:	2305      	movs	r3, #5
 8007ade:	e00a      	b.n	8007af6 <HAL_GPIO_Init+0x1fa>
 8007ae0:	2306      	movs	r3, #6
 8007ae2:	e008      	b.n	8007af6 <HAL_GPIO_Init+0x1fa>
 8007ae4:	2304      	movs	r3, #4
 8007ae6:	e006      	b.n	8007af6 <HAL_GPIO_Init+0x1fa>
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e004      	b.n	8007af6 <HAL_GPIO_Init+0x1fa>
 8007aec:	2302      	movs	r3, #2
 8007aee:	e002      	b.n	8007af6 <HAL_GPIO_Init+0x1fa>
 8007af0:	2301      	movs	r3, #1
 8007af2:	e000      	b.n	8007af6 <HAL_GPIO_Init+0x1fa>
 8007af4:	2300      	movs	r3, #0
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	f002 0203 	and.w	r2, r2, #3
 8007afc:	0092      	lsls	r2, r2, #2
 8007afe:	4093      	lsls	r3, r2
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b06:	4937      	ldr	r1, [pc, #220]	@ (8007be4 <HAL_GPIO_Init+0x2e8>)
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	089b      	lsrs	r3, r3, #2
 8007b0c:	3302      	adds	r3, #2
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b14:	4b39      	ldr	r3, [pc, #228]	@ (8007bfc <HAL_GPIO_Init+0x300>)
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	43db      	mvns	r3, r3
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	4013      	ands	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007b38:	4a30      	ldr	r2, [pc, #192]	@ (8007bfc <HAL_GPIO_Init+0x300>)
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8007bfc <HAL_GPIO_Init+0x300>)
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	43db      	mvns	r3, r3
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007b62:	4a26      	ldr	r2, [pc, #152]	@ (8007bfc <HAL_GPIO_Init+0x300>)
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007b68:	4b24      	ldr	r3, [pc, #144]	@ (8007bfc <HAL_GPIO_Init+0x300>)
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	43db      	mvns	r3, r3
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	4013      	ands	r3, r2
 8007b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8007bfc <HAL_GPIO_Init+0x300>)
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007b92:	4b1a      	ldr	r3, [pc, #104]	@ (8007bfc <HAL_GPIO_Init+0x300>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	43db      	mvns	r3, r3
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007bb6:	4a11      	ldr	r2, [pc, #68]	@ (8007bfc <HAL_GPIO_Init+0x300>)
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f47f ae9d 	bne.w	800790c <HAL_GPIO_Init+0x10>
  }
}
 8007bd2:	bf00      	nop
 8007bd4:	bf00      	nop
 8007bd6:	371c      	adds	r7, #28
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	40021000 	.word	0x40021000
 8007be4:	40010000 	.word	0x40010000
 8007be8:	48000400 	.word	0x48000400
 8007bec:	48000800 	.word	0x48000800
 8007bf0:	48000c00 	.word	0x48000c00
 8007bf4:	48001000 	.word	0x48001000
 8007bf8:	48001400 	.word	0x48001400
 8007bfc:	40010400 	.word	0x40010400

08007c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	807b      	strh	r3, [r7, #2]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c10:	787b      	ldrb	r3, [r7, #1]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007c16:	887a      	ldrh	r2, [r7, #2]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007c1c:	e002      	b.n	8007c24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007c1e:	887a      	ldrh	r2, [r7, #2]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d141      	bne.n	8007cc2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c3e:	4b4b      	ldr	r3, [pc, #300]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c4a:	d131      	bne.n	8007cb0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c4c:	4b47      	ldr	r3, [pc, #284]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c52:	4a46      	ldr	r2, [pc, #280]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c5c:	4b43      	ldr	r3, [pc, #268]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c64:	4a41      	ldr	r2, [pc, #260]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c6c:	4b40      	ldr	r3, [pc, #256]	@ (8007d70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2232      	movs	r2, #50	@ 0x32
 8007c72:	fb02 f303 	mul.w	r3, r2, r3
 8007c76:	4a3f      	ldr	r2, [pc, #252]	@ (8007d74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007c78:	fba2 2303 	umull	r2, r3, r2, r3
 8007c7c:	0c9b      	lsrs	r3, r3, #18
 8007c7e:	3301      	adds	r3, #1
 8007c80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c82:	e002      	b.n	8007c8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c8a:	4b38      	ldr	r3, [pc, #224]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c96:	d102      	bne.n	8007c9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1f2      	bne.n	8007c84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c9e:	4b33      	ldr	r3, [pc, #204]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007caa:	d158      	bne.n	8007d5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e057      	b.n	8007d60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cb6:	4a2d      	ldr	r2, [pc, #180]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007cc0:	e04d      	b.n	8007d5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cc8:	d141      	bne.n	8007d4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007cca:	4b28      	ldr	r3, [pc, #160]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cd6:	d131      	bne.n	8007d3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007cd8:	4b24      	ldr	r3, [pc, #144]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cde:	4a23      	ldr	r2, [pc, #140]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ce4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ce8:	4b20      	ldr	r3, [pc, #128]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007cf0:	4a1e      	ldr	r2, [pc, #120]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007cf6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8007d70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2232      	movs	r2, #50	@ 0x32
 8007cfe:	fb02 f303 	mul.w	r3, r2, r3
 8007d02:	4a1c      	ldr	r2, [pc, #112]	@ (8007d74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007d04:	fba2 2303 	umull	r2, r3, r2, r3
 8007d08:	0c9b      	lsrs	r3, r3, #18
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d0e:	e002      	b.n	8007d16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d16:	4b15      	ldr	r3, [pc, #84]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d22:	d102      	bne.n	8007d2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1f2      	bne.n	8007d10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d2a:	4b10      	ldr	r3, [pc, #64]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d36:	d112      	bne.n	8007d5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e011      	b.n	8007d60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d42:	4a0a      	ldr	r2, [pc, #40]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007d4c:	e007      	b.n	8007d5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007d4e:	4b07      	ldr	r3, [pc, #28]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007d56:	4a05      	ldr	r2, [pc, #20]	@ (8007d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007d5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	40007000 	.word	0x40007000
 8007d70:	200000c0 	.word	0x200000c0
 8007d74:	431bde83 	.word	0x431bde83

08007d78 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007d7c:	4b05      	ldr	r3, [pc, #20]	@ (8007d94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	4a04      	ldr	r2, [pc, #16]	@ (8007d94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007d82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d86:	6093      	str	r3, [r2, #8]
}
 8007d88:	bf00      	nop
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	40007000 	.word	0x40007000

08007d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e2fe      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d075      	beq.n	8007ea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007db6:	4b97      	ldr	r3, [pc, #604]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f003 030c 	and.w	r3, r3, #12
 8007dbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007dc0:	4b94      	ldr	r3, [pc, #592]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f003 0303 	and.w	r3, r3, #3
 8007dc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	2b0c      	cmp	r3, #12
 8007dce:	d102      	bne.n	8007dd6 <HAL_RCC_OscConfig+0x3e>
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d002      	beq.n	8007ddc <HAL_RCC_OscConfig+0x44>
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	2b08      	cmp	r3, #8
 8007dda:	d10b      	bne.n	8007df4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ddc:	4b8d      	ldr	r3, [pc, #564]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d05b      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x108>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d157      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e2d9      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dfc:	d106      	bne.n	8007e0c <HAL_RCC_OscConfig+0x74>
 8007dfe:	4b85      	ldr	r3, [pc, #532]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a84      	ldr	r2, [pc, #528]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e08:	6013      	str	r3, [r2, #0]
 8007e0a:	e01d      	b.n	8007e48 <HAL_RCC_OscConfig+0xb0>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e14:	d10c      	bne.n	8007e30 <HAL_RCC_OscConfig+0x98>
 8007e16:	4b7f      	ldr	r3, [pc, #508]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a7e      	ldr	r2, [pc, #504]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007e1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e20:	6013      	str	r3, [r2, #0]
 8007e22:	4b7c      	ldr	r3, [pc, #496]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a7b      	ldr	r2, [pc, #492]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e2c:	6013      	str	r3, [r2, #0]
 8007e2e:	e00b      	b.n	8007e48 <HAL_RCC_OscConfig+0xb0>
 8007e30:	4b78      	ldr	r3, [pc, #480]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a77      	ldr	r2, [pc, #476]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007e36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e3a:	6013      	str	r3, [r2, #0]
 8007e3c:	4b75      	ldr	r3, [pc, #468]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a74      	ldr	r2, [pc, #464]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007e42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d013      	beq.n	8007e78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e50:	f7fd f966 	bl	8005120 <HAL_GetTick>
 8007e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e56:	e008      	b.n	8007e6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e58:	f7fd f962 	bl	8005120 <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	2b64      	cmp	r3, #100	@ 0x64
 8007e64:	d901      	bls.n	8007e6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e29e      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e6a:	4b6a      	ldr	r3, [pc, #424]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d0f0      	beq.n	8007e58 <HAL_RCC_OscConfig+0xc0>
 8007e76:	e014      	b.n	8007ea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e78:	f7fd f952 	bl	8005120 <HAL_GetTick>
 8007e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007e7e:	e008      	b.n	8007e92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e80:	f7fd f94e 	bl	8005120 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b64      	cmp	r3, #100	@ 0x64
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e28a      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007e92:	4b60      	ldr	r3, [pc, #384]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1f0      	bne.n	8007e80 <HAL_RCC_OscConfig+0xe8>
 8007e9e:	e000      	b.n	8007ea2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0302 	and.w	r3, r3, #2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d075      	beq.n	8007f9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eae:	4b59      	ldr	r3, [pc, #356]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f003 030c 	and.w	r3, r3, #12
 8007eb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007eb8:	4b56      	ldr	r3, [pc, #344]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f003 0303 	and.w	r3, r3, #3
 8007ec0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	2b0c      	cmp	r3, #12
 8007ec6:	d102      	bne.n	8007ece <HAL_RCC_OscConfig+0x136>
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d002      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x13c>
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	d11f      	bne.n	8007f14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ed4:	4b4f      	ldr	r3, [pc, #316]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d005      	beq.n	8007eec <HAL_RCC_OscConfig+0x154>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e25d      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eec:	4b49      	ldr	r3, [pc, #292]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	061b      	lsls	r3, r3, #24
 8007efa:	4946      	ldr	r1, [pc, #280]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007f00:	4b45      	ldr	r3, [pc, #276]	@ (8008018 <HAL_RCC_OscConfig+0x280>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fd f8bf 	bl	8005088 <HAL_InitTick>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d043      	beq.n	8007f98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e249      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d023      	beq.n	8007f64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f1c:	4b3d      	ldr	r3, [pc, #244]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a3c      	ldr	r2, [pc, #240]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f28:	f7fd f8fa 	bl	8005120 <HAL_GetTick>
 8007f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f2e:	e008      	b.n	8007f42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f30:	f7fd f8f6 	bl	8005120 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d901      	bls.n	8007f42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e232      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f42:	4b34      	ldr	r3, [pc, #208]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d0f0      	beq.n	8007f30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f4e:	4b31      	ldr	r3, [pc, #196]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	061b      	lsls	r3, r3, #24
 8007f5c:	492d      	ldr	r1, [pc, #180]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	604b      	str	r3, [r1, #4]
 8007f62:	e01a      	b.n	8007f9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f64:	4b2b      	ldr	r3, [pc, #172]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a2a      	ldr	r2, [pc, #168]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007f6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f70:	f7fd f8d6 	bl	8005120 <HAL_GetTick>
 8007f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f76:	e008      	b.n	8007f8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f78:	f7fd f8d2 	bl	8005120 <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d901      	bls.n	8007f8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e20e      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f8a:	4b22      	ldr	r3, [pc, #136]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1f0      	bne.n	8007f78 <HAL_RCC_OscConfig+0x1e0>
 8007f96:	e000      	b.n	8007f9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0308 	and.w	r3, r3, #8
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d041      	beq.n	800802a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d01c      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fae:	4b19      	ldr	r3, [pc, #100]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fb4:	4a17      	ldr	r2, [pc, #92]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007fb6:	f043 0301 	orr.w	r3, r3, #1
 8007fba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fbe:	f7fd f8af 	bl	8005120 <HAL_GetTick>
 8007fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007fc4:	e008      	b.n	8007fd8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fc6:	f7fd f8ab 	bl	8005120 <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d901      	bls.n	8007fd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e1e7      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0ef      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x22e>
 8007fe6:	e020      	b.n	800802a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fee:	4a09      	ldr	r2, [pc, #36]	@ (8008014 <HAL_RCC_OscConfig+0x27c>)
 8007ff0:	f023 0301 	bic.w	r3, r3, #1
 8007ff4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ff8:	f7fd f892 	bl	8005120 <HAL_GetTick>
 8007ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ffe:	e00d      	b.n	800801c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008000:	f7fd f88e 	bl	8005120 <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	2b02      	cmp	r3, #2
 800800c:	d906      	bls.n	800801c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e1ca      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
 8008012:	bf00      	nop
 8008014:	40021000 	.word	0x40021000
 8008018:	200000c4 	.word	0x200000c4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800801c:	4b8c      	ldr	r3, [pc, #560]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 800801e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1ea      	bne.n	8008000 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0304 	and.w	r3, r3, #4
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 80a6 	beq.w	8008184 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008038:	2300      	movs	r3, #0
 800803a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800803c:	4b84      	ldr	r3, [pc, #528]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 800803e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <HAL_RCC_OscConfig+0x2b4>
 8008048:	2301      	movs	r3, #1
 800804a:	e000      	b.n	800804e <HAL_RCC_OscConfig+0x2b6>
 800804c:	2300      	movs	r3, #0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00d      	beq.n	800806e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008052:	4b7f      	ldr	r3, [pc, #508]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 8008054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008056:	4a7e      	ldr	r2, [pc, #504]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 8008058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800805c:	6593      	str	r3, [r2, #88]	@ 0x58
 800805e:	4b7c      	ldr	r3, [pc, #496]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 8008060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800806a:	2301      	movs	r3, #1
 800806c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800806e:	4b79      	ldr	r3, [pc, #484]	@ (8008254 <HAL_RCC_OscConfig+0x4bc>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008076:	2b00      	cmp	r3, #0
 8008078:	d118      	bne.n	80080ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800807a:	4b76      	ldr	r3, [pc, #472]	@ (8008254 <HAL_RCC_OscConfig+0x4bc>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a75      	ldr	r2, [pc, #468]	@ (8008254 <HAL_RCC_OscConfig+0x4bc>)
 8008080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008086:	f7fd f84b 	bl	8005120 <HAL_GetTick>
 800808a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800808c:	e008      	b.n	80080a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800808e:	f7fd f847 	bl	8005120 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	2b02      	cmp	r3, #2
 800809a:	d901      	bls.n	80080a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e183      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080a0:	4b6c      	ldr	r3, [pc, #432]	@ (8008254 <HAL_RCC_OscConfig+0x4bc>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d0f0      	beq.n	800808e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d108      	bne.n	80080c6 <HAL_RCC_OscConfig+0x32e>
 80080b4:	4b66      	ldr	r3, [pc, #408]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 80080b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ba:	4a65      	ldr	r2, [pc, #404]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 80080bc:	f043 0301 	orr.w	r3, r3, #1
 80080c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80080c4:	e024      	b.n	8008110 <HAL_RCC_OscConfig+0x378>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	2b05      	cmp	r3, #5
 80080cc:	d110      	bne.n	80080f0 <HAL_RCC_OscConfig+0x358>
 80080ce:	4b60      	ldr	r3, [pc, #384]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 80080d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080d4:	4a5e      	ldr	r2, [pc, #376]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 80080d6:	f043 0304 	orr.w	r3, r3, #4
 80080da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80080de:	4b5c      	ldr	r3, [pc, #368]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 80080e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080e4:	4a5a      	ldr	r2, [pc, #360]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 80080e6:	f043 0301 	orr.w	r3, r3, #1
 80080ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80080ee:	e00f      	b.n	8008110 <HAL_RCC_OscConfig+0x378>
 80080f0:	4b57      	ldr	r3, [pc, #348]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 80080f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f6:	4a56      	ldr	r2, [pc, #344]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 80080f8:	f023 0301 	bic.w	r3, r3, #1
 80080fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008100:	4b53      	ldr	r3, [pc, #332]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 8008102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008106:	4a52      	ldr	r2, [pc, #328]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 8008108:	f023 0304 	bic.w	r3, r3, #4
 800810c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d016      	beq.n	8008146 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008118:	f7fd f802 	bl	8005120 <HAL_GetTick>
 800811c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800811e:	e00a      	b.n	8008136 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008120:	f7fc fffe 	bl	8005120 <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800812e:	4293      	cmp	r3, r2
 8008130:	d901      	bls.n	8008136 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e138      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008136:	4b46      	ldr	r3, [pc, #280]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 8008138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800813c:	f003 0302 	and.w	r3, r3, #2
 8008140:	2b00      	cmp	r3, #0
 8008142:	d0ed      	beq.n	8008120 <HAL_RCC_OscConfig+0x388>
 8008144:	e015      	b.n	8008172 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008146:	f7fc ffeb 	bl	8005120 <HAL_GetTick>
 800814a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800814c:	e00a      	b.n	8008164 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800814e:	f7fc ffe7 	bl	8005120 <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800815c:	4293      	cmp	r3, r2
 800815e:	d901      	bls.n	8008164 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e121      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008164:	4b3a      	ldr	r3, [pc, #232]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 8008166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1ed      	bne.n	800814e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008172:	7ffb      	ldrb	r3, [r7, #31]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d105      	bne.n	8008184 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008178:	4b35      	ldr	r3, [pc, #212]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 800817a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800817c:	4a34      	ldr	r2, [pc, #208]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 800817e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008182:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	2b00      	cmp	r3, #0
 800818e:	d03c      	beq.n	800820a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d01c      	beq.n	80081d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008198:	4b2d      	ldr	r3, [pc, #180]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 800819a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800819e:	4a2c      	ldr	r2, [pc, #176]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 80081a0:	f043 0301 	orr.w	r3, r3, #1
 80081a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081a8:	f7fc ffba 	bl	8005120 <HAL_GetTick>
 80081ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80081ae:	e008      	b.n	80081c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081b0:	f7fc ffb6 	bl	8005120 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d901      	bls.n	80081c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e0f2      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80081c2:	4b23      	ldr	r3, [pc, #140]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 80081c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081c8:	f003 0302 	and.w	r3, r3, #2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d0ef      	beq.n	80081b0 <HAL_RCC_OscConfig+0x418>
 80081d0:	e01b      	b.n	800820a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80081d2:	4b1f      	ldr	r3, [pc, #124]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 80081d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 80081da:	f023 0301 	bic.w	r3, r3, #1
 80081de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e2:	f7fc ff9d 	bl	8005120 <HAL_GetTick>
 80081e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80081e8:	e008      	b.n	80081fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081ea:	f7fc ff99 	bl	8005120 <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d901      	bls.n	80081fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e0d5      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80081fc:	4b14      	ldr	r3, [pc, #80]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 80081fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1ef      	bne.n	80081ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 80c9 	beq.w	80083a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008214:	4b0e      	ldr	r3, [pc, #56]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f003 030c 	and.w	r3, r3, #12
 800821c:	2b0c      	cmp	r3, #12
 800821e:	f000 8083 	beq.w	8008328 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	2b02      	cmp	r3, #2
 8008228:	d15e      	bne.n	80082e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800822a:	4b09      	ldr	r3, [pc, #36]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a08      	ldr	r2, [pc, #32]	@ (8008250 <HAL_RCC_OscConfig+0x4b8>)
 8008230:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008236:	f7fc ff73 	bl	8005120 <HAL_GetTick>
 800823a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800823c:	e00c      	b.n	8008258 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800823e:	f7fc ff6f 	bl	8005120 <HAL_GetTick>
 8008242:	4602      	mov	r2, r0
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d905      	bls.n	8008258 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e0ab      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
 8008250:	40021000 	.word	0x40021000
 8008254:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008258:	4b55      	ldr	r3, [pc, #340]	@ (80083b0 <HAL_RCC_OscConfig+0x618>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1ec      	bne.n	800823e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008264:	4b52      	ldr	r3, [pc, #328]	@ (80083b0 <HAL_RCC_OscConfig+0x618>)
 8008266:	68da      	ldr	r2, [r3, #12]
 8008268:	4b52      	ldr	r3, [pc, #328]	@ (80083b4 <HAL_RCC_OscConfig+0x61c>)
 800826a:	4013      	ands	r3, r2
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	6a11      	ldr	r1, [r2, #32]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008274:	3a01      	subs	r2, #1
 8008276:	0112      	lsls	r2, r2, #4
 8008278:	4311      	orrs	r1, r2
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800827e:	0212      	lsls	r2, r2, #8
 8008280:	4311      	orrs	r1, r2
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008286:	0852      	lsrs	r2, r2, #1
 8008288:	3a01      	subs	r2, #1
 800828a:	0552      	lsls	r2, r2, #21
 800828c:	4311      	orrs	r1, r2
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008292:	0852      	lsrs	r2, r2, #1
 8008294:	3a01      	subs	r2, #1
 8008296:	0652      	lsls	r2, r2, #25
 8008298:	4311      	orrs	r1, r2
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800829e:	06d2      	lsls	r2, r2, #27
 80082a0:	430a      	orrs	r2, r1
 80082a2:	4943      	ldr	r1, [pc, #268]	@ (80083b0 <HAL_RCC_OscConfig+0x618>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082a8:	4b41      	ldr	r3, [pc, #260]	@ (80083b0 <HAL_RCC_OscConfig+0x618>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a40      	ldr	r2, [pc, #256]	@ (80083b0 <HAL_RCC_OscConfig+0x618>)
 80082ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80082b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80082b4:	4b3e      	ldr	r3, [pc, #248]	@ (80083b0 <HAL_RCC_OscConfig+0x618>)
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	4a3d      	ldr	r2, [pc, #244]	@ (80083b0 <HAL_RCC_OscConfig+0x618>)
 80082ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80082be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c0:	f7fc ff2e 	bl	8005120 <HAL_GetTick>
 80082c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082c6:	e008      	b.n	80082da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082c8:	f7fc ff2a 	bl	8005120 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d901      	bls.n	80082da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e066      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082da:	4b35      	ldr	r3, [pc, #212]	@ (80083b0 <HAL_RCC_OscConfig+0x618>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d0f0      	beq.n	80082c8 <HAL_RCC_OscConfig+0x530>
 80082e6:	e05e      	b.n	80083a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082e8:	4b31      	ldr	r3, [pc, #196]	@ (80083b0 <HAL_RCC_OscConfig+0x618>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a30      	ldr	r2, [pc, #192]	@ (80083b0 <HAL_RCC_OscConfig+0x618>)
 80082ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f4:	f7fc ff14 	bl	8005120 <HAL_GetTick>
 80082f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082fa:	e008      	b.n	800830e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082fc:	f7fc ff10 	bl	8005120 <HAL_GetTick>
 8008300:	4602      	mov	r2, r0
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	2b02      	cmp	r3, #2
 8008308:	d901      	bls.n	800830e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e04c      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800830e:	4b28      	ldr	r3, [pc, #160]	@ (80083b0 <HAL_RCC_OscConfig+0x618>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1f0      	bne.n	80082fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800831a:	4b25      	ldr	r3, [pc, #148]	@ (80083b0 <HAL_RCC_OscConfig+0x618>)
 800831c:	68da      	ldr	r2, [r3, #12]
 800831e:	4924      	ldr	r1, [pc, #144]	@ (80083b0 <HAL_RCC_OscConfig+0x618>)
 8008320:	4b25      	ldr	r3, [pc, #148]	@ (80083b8 <HAL_RCC_OscConfig+0x620>)
 8008322:	4013      	ands	r3, r2
 8008324:	60cb      	str	r3, [r1, #12]
 8008326:	e03e      	b.n	80083a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d101      	bne.n	8008334 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e039      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008334:	4b1e      	ldr	r3, [pc, #120]	@ (80083b0 <HAL_RCC_OscConfig+0x618>)
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f003 0203 	and.w	r2, r3, #3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	429a      	cmp	r2, r3
 8008346:	d12c      	bne.n	80083a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008352:	3b01      	subs	r3, #1
 8008354:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008356:	429a      	cmp	r2, r3
 8008358:	d123      	bne.n	80083a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008364:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008366:	429a      	cmp	r2, r3
 8008368:	d11b      	bne.n	80083a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008374:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008376:	429a      	cmp	r2, r3
 8008378:	d113      	bne.n	80083a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008384:	085b      	lsrs	r3, r3, #1
 8008386:	3b01      	subs	r3, #1
 8008388:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800838a:	429a      	cmp	r2, r3
 800838c:	d109      	bne.n	80083a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008398:	085b      	lsrs	r3, r3, #1
 800839a:	3b01      	subs	r3, #1
 800839c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800839e:	429a      	cmp	r2, r3
 80083a0:	d001      	beq.n	80083a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e000      	b.n	80083a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3720      	adds	r7, #32
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	40021000 	.word	0x40021000
 80083b4:	019f800c 	.word	0x019f800c
 80083b8:	feeefffc 	.word	0xfeeefffc

080083bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80083c6:	2300      	movs	r3, #0
 80083c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e11e      	b.n	8008612 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80083d4:	4b91      	ldr	r3, [pc, #580]	@ (800861c <HAL_RCC_ClockConfig+0x260>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 030f 	and.w	r3, r3, #15
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d910      	bls.n	8008404 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083e2:	4b8e      	ldr	r3, [pc, #568]	@ (800861c <HAL_RCC_ClockConfig+0x260>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f023 020f 	bic.w	r2, r3, #15
 80083ea:	498c      	ldr	r1, [pc, #560]	@ (800861c <HAL_RCC_ClockConfig+0x260>)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083f2:	4b8a      	ldr	r3, [pc, #552]	@ (800861c <HAL_RCC_ClockConfig+0x260>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 030f 	and.w	r3, r3, #15
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d001      	beq.n	8008404 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e106      	b.n	8008612 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	d073      	beq.n	80084f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	2b03      	cmp	r3, #3
 8008416:	d129      	bne.n	800846c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008418:	4b81      	ldr	r3, [pc, #516]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e0f4      	b.n	8008612 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008428:	f000 f966 	bl	80086f8 <RCC_GetSysClockFreqFromPLLSource>
 800842c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	4a7c      	ldr	r2, [pc, #496]	@ (8008624 <HAL_RCC_ClockConfig+0x268>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d93f      	bls.n	80084b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008436:	4b7a      	ldr	r3, [pc, #488]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d009      	beq.n	8008456 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800844a:	2b00      	cmp	r3, #0
 800844c:	d033      	beq.n	80084b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008452:	2b00      	cmp	r3, #0
 8008454:	d12f      	bne.n	80084b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008456:	4b72      	ldr	r3, [pc, #456]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800845e:	4a70      	ldr	r2, [pc, #448]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 8008460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008464:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008466:	2380      	movs	r3, #128	@ 0x80
 8008468:	617b      	str	r3, [r7, #20]
 800846a:	e024      	b.n	80084b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	2b02      	cmp	r3, #2
 8008472:	d107      	bne.n	8008484 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008474:	4b6a      	ldr	r3, [pc, #424]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d109      	bne.n	8008494 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e0c6      	b.n	8008612 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008484:	4b66      	ldr	r3, [pc, #408]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e0be      	b.n	8008612 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008494:	f000 f8ce 	bl	8008634 <HAL_RCC_GetSysClockFreq>
 8008498:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	4a61      	ldr	r2, [pc, #388]	@ (8008624 <HAL_RCC_ClockConfig+0x268>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d909      	bls.n	80084b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80084a2:	4b5f      	ldr	r3, [pc, #380]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084aa:	4a5d      	ldr	r2, [pc, #372]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 80084ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80084b2:	2380      	movs	r3, #128	@ 0x80
 80084b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80084b6:	4b5a      	ldr	r3, [pc, #360]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f023 0203 	bic.w	r2, r3, #3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	4957      	ldr	r1, [pc, #348]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084c8:	f7fc fe2a 	bl	8005120 <HAL_GetTick>
 80084cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084ce:	e00a      	b.n	80084e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084d0:	f7fc fe26 	bl	8005120 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084de:	4293      	cmp	r3, r2
 80084e0:	d901      	bls.n	80084e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e095      	b.n	8008612 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084e6:	4b4e      	ldr	r3, [pc, #312]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f003 020c 	and.w	r2, r3, #12
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d1eb      	bne.n	80084d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d023      	beq.n	800854c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0304 	and.w	r3, r3, #4
 800850c:	2b00      	cmp	r3, #0
 800850e:	d005      	beq.n	800851c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008510:	4b43      	ldr	r3, [pc, #268]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	4a42      	ldr	r2, [pc, #264]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 8008516:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800851a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0308 	and.w	r3, r3, #8
 8008524:	2b00      	cmp	r3, #0
 8008526:	d007      	beq.n	8008538 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008528:	4b3d      	ldr	r3, [pc, #244]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008530:	4a3b      	ldr	r2, [pc, #236]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 8008532:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008536:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008538:	4b39      	ldr	r3, [pc, #228]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	4936      	ldr	r1, [pc, #216]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 8008546:	4313      	orrs	r3, r2
 8008548:	608b      	str	r3, [r1, #8]
 800854a:	e008      	b.n	800855e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	2b80      	cmp	r3, #128	@ 0x80
 8008550:	d105      	bne.n	800855e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008552:	4b33      	ldr	r3, [pc, #204]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	4a32      	ldr	r2, [pc, #200]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 8008558:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800855c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800855e:	4b2f      	ldr	r3, [pc, #188]	@ (800861c <HAL_RCC_ClockConfig+0x260>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 030f 	and.w	r3, r3, #15
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	429a      	cmp	r2, r3
 800856a:	d21d      	bcs.n	80085a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800856c:	4b2b      	ldr	r3, [pc, #172]	@ (800861c <HAL_RCC_ClockConfig+0x260>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f023 020f 	bic.w	r2, r3, #15
 8008574:	4929      	ldr	r1, [pc, #164]	@ (800861c <HAL_RCC_ClockConfig+0x260>)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	4313      	orrs	r3, r2
 800857a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800857c:	f7fc fdd0 	bl	8005120 <HAL_GetTick>
 8008580:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008582:	e00a      	b.n	800859a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008584:	f7fc fdcc 	bl	8005120 <HAL_GetTick>
 8008588:	4602      	mov	r2, r0
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008592:	4293      	cmp	r3, r2
 8008594:	d901      	bls.n	800859a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e03b      	b.n	8008612 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800859a:	4b20      	ldr	r3, [pc, #128]	@ (800861c <HAL_RCC_ClockConfig+0x260>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 030f 	and.w	r3, r3, #15
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d1ed      	bne.n	8008584 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0304 	and.w	r3, r3, #4
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d008      	beq.n	80085c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	4917      	ldr	r1, [pc, #92]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 80085c2:	4313      	orrs	r3, r2
 80085c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0308 	and.w	r3, r3, #8
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d009      	beq.n	80085e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085d2:	4b13      	ldr	r3, [pc, #76]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	490f      	ldr	r1, [pc, #60]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80085e6:	f000 f825 	bl	8008634 <HAL_RCC_GetSysClockFreq>
 80085ea:	4602      	mov	r2, r0
 80085ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008620 <HAL_RCC_ClockConfig+0x264>)
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	091b      	lsrs	r3, r3, #4
 80085f2:	f003 030f 	and.w	r3, r3, #15
 80085f6:	490c      	ldr	r1, [pc, #48]	@ (8008628 <HAL_RCC_ClockConfig+0x26c>)
 80085f8:	5ccb      	ldrb	r3, [r1, r3]
 80085fa:	f003 031f 	and.w	r3, r3, #31
 80085fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008602:	4a0a      	ldr	r2, [pc, #40]	@ (800862c <HAL_RCC_ClockConfig+0x270>)
 8008604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008606:	4b0a      	ldr	r3, [pc, #40]	@ (8008630 <HAL_RCC_ClockConfig+0x274>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4618      	mov	r0, r3
 800860c:	f7fc fd3c 	bl	8005088 <HAL_InitTick>
 8008610:	4603      	mov	r3, r0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3718      	adds	r7, #24
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	40022000 	.word	0x40022000
 8008620:	40021000 	.word	0x40021000
 8008624:	04c4b400 	.word	0x04c4b400
 8008628:	0800c424 	.word	0x0800c424
 800862c:	200000c0 	.word	0x200000c0
 8008630:	200000c4 	.word	0x200000c4

08008634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800863a:	4b2c      	ldr	r3, [pc, #176]	@ (80086ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f003 030c 	and.w	r3, r3, #12
 8008642:	2b04      	cmp	r3, #4
 8008644:	d102      	bne.n	800864c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008646:	4b2a      	ldr	r3, [pc, #168]	@ (80086f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008648:	613b      	str	r3, [r7, #16]
 800864a:	e047      	b.n	80086dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800864c:	4b27      	ldr	r3, [pc, #156]	@ (80086ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f003 030c 	and.w	r3, r3, #12
 8008654:	2b08      	cmp	r3, #8
 8008656:	d102      	bne.n	800865e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008658:	4b26      	ldr	r3, [pc, #152]	@ (80086f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800865a:	613b      	str	r3, [r7, #16]
 800865c:	e03e      	b.n	80086dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800865e:	4b23      	ldr	r3, [pc, #140]	@ (80086ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f003 030c 	and.w	r3, r3, #12
 8008666:	2b0c      	cmp	r3, #12
 8008668:	d136      	bne.n	80086d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800866a:	4b20      	ldr	r3, [pc, #128]	@ (80086ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	f003 0303 	and.w	r3, r3, #3
 8008672:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008674:	4b1d      	ldr	r3, [pc, #116]	@ (80086ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	091b      	lsrs	r3, r3, #4
 800867a:	f003 030f 	and.w	r3, r3, #15
 800867e:	3301      	adds	r3, #1
 8008680:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b03      	cmp	r3, #3
 8008686:	d10c      	bne.n	80086a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008688:	4a1a      	ldr	r2, [pc, #104]	@ (80086f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008690:	4a16      	ldr	r2, [pc, #88]	@ (80086ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8008692:	68d2      	ldr	r2, [r2, #12]
 8008694:	0a12      	lsrs	r2, r2, #8
 8008696:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800869a:	fb02 f303 	mul.w	r3, r2, r3
 800869e:	617b      	str	r3, [r7, #20]
      break;
 80086a0:	e00c      	b.n	80086bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086a2:	4a13      	ldr	r2, [pc, #76]	@ (80086f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086aa:	4a10      	ldr	r2, [pc, #64]	@ (80086ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80086ac:	68d2      	ldr	r2, [r2, #12]
 80086ae:	0a12      	lsrs	r2, r2, #8
 80086b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80086b4:	fb02 f303 	mul.w	r3, r2, r3
 80086b8:	617b      	str	r3, [r7, #20]
      break;
 80086ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80086bc:	4b0b      	ldr	r3, [pc, #44]	@ (80086ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	0e5b      	lsrs	r3, r3, #25
 80086c2:	f003 0303 	and.w	r3, r3, #3
 80086c6:	3301      	adds	r3, #1
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80086cc:	697a      	ldr	r2, [r7, #20]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d4:	613b      	str	r3, [r7, #16]
 80086d6:	e001      	b.n	80086dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80086dc:	693b      	ldr	r3, [r7, #16]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	371c      	adds	r7, #28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	40021000 	.word	0x40021000
 80086f0:	00f42400 	.word	0x00f42400
 80086f4:	007a1200 	.word	0x007a1200

080086f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b087      	sub	sp, #28
 80086fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80086fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	f003 0303 	and.w	r3, r3, #3
 8008706:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008708:	4b1b      	ldr	r3, [pc, #108]	@ (8008778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	091b      	lsrs	r3, r3, #4
 800870e:	f003 030f 	and.w	r3, r3, #15
 8008712:	3301      	adds	r3, #1
 8008714:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	2b03      	cmp	r3, #3
 800871a:	d10c      	bne.n	8008736 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800871c:	4a17      	ldr	r2, [pc, #92]	@ (800877c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	fbb2 f3f3 	udiv	r3, r2, r3
 8008724:	4a14      	ldr	r2, [pc, #80]	@ (8008778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008726:	68d2      	ldr	r2, [r2, #12]
 8008728:	0a12      	lsrs	r2, r2, #8
 800872a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800872e:	fb02 f303 	mul.w	r3, r2, r3
 8008732:	617b      	str	r3, [r7, #20]
    break;
 8008734:	e00c      	b.n	8008750 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008736:	4a12      	ldr	r2, [pc, #72]	@ (8008780 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	fbb2 f3f3 	udiv	r3, r2, r3
 800873e:	4a0e      	ldr	r2, [pc, #56]	@ (8008778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008740:	68d2      	ldr	r2, [r2, #12]
 8008742:	0a12      	lsrs	r2, r2, #8
 8008744:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008748:	fb02 f303 	mul.w	r3, r2, r3
 800874c:	617b      	str	r3, [r7, #20]
    break;
 800874e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008750:	4b09      	ldr	r3, [pc, #36]	@ (8008778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	0e5b      	lsrs	r3, r3, #25
 8008756:	f003 0303 	and.w	r3, r3, #3
 800875a:	3301      	adds	r3, #1
 800875c:	005b      	lsls	r3, r3, #1
 800875e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	fbb2 f3f3 	udiv	r3, r2, r3
 8008768:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800876a:	687b      	ldr	r3, [r7, #4]
}
 800876c:	4618      	mov	r0, r3
 800876e:	371c      	adds	r7, #28
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	40021000 	.word	0x40021000
 800877c:	007a1200 	.word	0x007a1200
 8008780:	00f42400 	.word	0x00f42400

08008784 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800878c:	2300      	movs	r3, #0
 800878e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008790:	2300      	movs	r3, #0
 8008792:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800879c:	2b00      	cmp	r3, #0
 800879e:	f000 8098 	beq.w	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087a2:	2300      	movs	r3, #0
 80087a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087a6:	4b43      	ldr	r3, [pc, #268]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10d      	bne.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087b2:	4b40      	ldr	r3, [pc, #256]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087b6:	4a3f      	ldr	r2, [pc, #252]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80087be:	4b3d      	ldr	r3, [pc, #244]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087c6:	60bb      	str	r3, [r7, #8]
 80087c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087ca:	2301      	movs	r3, #1
 80087cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087ce:	4b3a      	ldr	r3, [pc, #232]	@ (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a39      	ldr	r2, [pc, #228]	@ (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80087d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087da:	f7fc fca1 	bl	8005120 <HAL_GetTick>
 80087de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087e0:	e009      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087e2:	f7fc fc9d 	bl	8005120 <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d902      	bls.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	74fb      	strb	r3, [r7, #19]
        break;
 80087f4:	e005      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087f6:	4b30      	ldr	r3, [pc, #192]	@ (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d0ef      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008802:	7cfb      	ldrb	r3, [r7, #19]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d159      	bne.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008808:	4b2a      	ldr	r3, [pc, #168]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800880a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800880e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008812:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d01e      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	429a      	cmp	r2, r3
 8008822:	d019      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008824:	4b23      	ldr	r3, [pc, #140]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800882a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800882e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008830:	4b20      	ldr	r3, [pc, #128]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008836:	4a1f      	ldr	r2, [pc, #124]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800883c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008840:	4b1c      	ldr	r3, [pc, #112]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008846:	4a1b      	ldr	r2, [pc, #108]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008848:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800884c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008850:	4a18      	ldr	r2, [pc, #96]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d016      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008862:	f7fc fc5d 	bl	8005120 <HAL_GetTick>
 8008866:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008868:	e00b      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800886a:	f7fc fc59 	bl	8005120 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008878:	4293      	cmp	r3, r2
 800887a:	d902      	bls.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	74fb      	strb	r3, [r7, #19]
            break;
 8008880:	e006      	b.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008882:	4b0c      	ldr	r3, [pc, #48]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008888:	f003 0302 	and.w	r3, r3, #2
 800888c:	2b00      	cmp	r3, #0
 800888e:	d0ec      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008890:	7cfb      	ldrb	r3, [r7, #19]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10b      	bne.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008896:	4b07      	ldr	r3, [pc, #28]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800889c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088a4:	4903      	ldr	r1, [pc, #12]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80088ac:	e008      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80088ae:	7cfb      	ldrb	r3, [r7, #19]
 80088b0:	74bb      	strb	r3, [r7, #18]
 80088b2:	e005      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80088b4:	40021000 	.word	0x40021000
 80088b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088bc:	7cfb      	ldrb	r3, [r7, #19]
 80088be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80088c0:	7c7b      	ldrb	r3, [r7, #17]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d105      	bne.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088c6:	4ba7      	ldr	r3, [pc, #668]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088ca:	4aa6      	ldr	r2, [pc, #664]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00a      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80088de:	4ba1      	ldr	r3, [pc, #644]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088e4:	f023 0203 	bic.w	r2, r3, #3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	499d      	ldr	r1, [pc, #628]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00a      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008900:	4b98      	ldr	r3, [pc, #608]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008906:	f023 020c 	bic.w	r2, r3, #12
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	4995      	ldr	r1, [pc, #596]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008910:	4313      	orrs	r3, r2
 8008912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0304 	and.w	r3, r3, #4
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00a      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008922:	4b90      	ldr	r3, [pc, #576]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008928:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	498c      	ldr	r1, [pc, #560]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008932:	4313      	orrs	r3, r2
 8008934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0308 	and.w	r3, r3, #8
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00a      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008944:	4b87      	ldr	r3, [pc, #540]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800894a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	4984      	ldr	r1, [pc, #528]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008954:	4313      	orrs	r3, r2
 8008956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0310 	and.w	r3, r3, #16
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008966:	4b7f      	ldr	r3, [pc, #508]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800896c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	497b      	ldr	r1, [pc, #492]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008976:	4313      	orrs	r3, r2
 8008978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0320 	and.w	r3, r3, #32
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00a      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008988:	4b76      	ldr	r3, [pc, #472]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800898a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800898e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	4973      	ldr	r1, [pc, #460]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008998:	4313      	orrs	r3, r2
 800899a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80089aa:	4b6e      	ldr	r3, [pc, #440]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	69db      	ldr	r3, [r3, #28]
 80089b8:	496a      	ldr	r1, [pc, #424]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00a      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80089cc:	4b65      	ldr	r3, [pc, #404]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	4962      	ldr	r1, [pc, #392]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00a      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80089ee:	4b5d      	ldr	r3, [pc, #372]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089fc:	4959      	ldr	r1, [pc, #356]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089fe:	4313      	orrs	r3, r2
 8008a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00a      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a10:	4b54      	ldr	r3, [pc, #336]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a16:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a1e:	4951      	ldr	r1, [pc, #324]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d015      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a32:	4b4c      	ldr	r3, [pc, #304]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a38:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a40:	4948      	ldr	r1, [pc, #288]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a50:	d105      	bne.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a52:	4b44      	ldr	r3, [pc, #272]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	4a43      	ldr	r2, [pc, #268]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a5c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d015      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a70:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a78:	493a      	ldr	r1, [pc, #232]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a88:	d105      	bne.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a8a:	4b36      	ldr	r3, [pc, #216]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	4a35      	ldr	r2, [pc, #212]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a94:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d015      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008aa2:	4b30      	ldr	r3, [pc, #192]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aa8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ab0:	492c      	ldr	r1, [pc, #176]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008ac0:	d105      	bne.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ac2:	4b28      	ldr	r3, [pc, #160]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	4a27      	ldr	r2, [pc, #156]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ac8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008acc:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d015      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ada:	4b22      	ldr	r3, [pc, #136]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ae0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae8:	491e      	ldr	r1, [pc, #120]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008af8:	d105      	bne.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008afa:	4b1a      	ldr	r3, [pc, #104]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	4a19      	ldr	r2, [pc, #100]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b04:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d015      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b12:	4b14      	ldr	r3, [pc, #80]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b18:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b20:	4910      	ldr	r1, [pc, #64]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b22:	4313      	orrs	r3, r2
 8008b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b30:	d105      	bne.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b32:	4b0c      	ldr	r3, [pc, #48]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	4a0b      	ldr	r2, [pc, #44]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b3c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d018      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008b4a:	4b06      	ldr	r3, [pc, #24]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b50:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b58:	4902      	ldr	r1, [pc, #8]	@ (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	e001      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008b64:	40021000 	.word	0x40021000
 8008b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b6e:	d105      	bne.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008b70:	4b21      	ldr	r3, [pc, #132]	@ (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	4a20      	ldr	r2, [pc, #128]	@ (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008b76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b7a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d015      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008b88:	4b1b      	ldr	r3, [pc, #108]	@ (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b8e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b96:	4918      	ldr	r1, [pc, #96]	@ (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ba6:	d105      	bne.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008ba8:	4b13      	ldr	r3, [pc, #76]	@ (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	4a12      	ldr	r2, [pc, #72]	@ (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bb2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d015      	beq.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008bc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bce:	490a      	ldr	r1, [pc, #40]	@ (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008bde:	d105      	bne.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008be0:	4b05      	ldr	r3, [pc, #20]	@ (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	4a04      	ldr	r2, [pc, #16]	@ (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008be6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008bec:	7cbb      	ldrb	r3, [r7, #18]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	40021000 	.word	0x40021000

08008bfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e09d      	b.n	8008d4a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d108      	bne.n	8008c28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c1e:	d009      	beq.n	8008c34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	61da      	str	r2, [r3, #28]
 8008c26:	e005      	b.n	8008c34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d106      	bne.n	8008c54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7fc f83e 	bl	8004cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c74:	d902      	bls.n	8008c7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]
 8008c7a:	e002      	b.n	8008c82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008c7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008c80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008c8a:	d007      	beq.n	8008c9c <HAL_SPI_Init+0xa0>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c94:	d002      	beq.n	8008c9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008cac:	431a      	orrs	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	f003 0302 	and.w	r3, r3, #2
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	f003 0301 	and.w	r3, r3, #1
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	69db      	ldr	r3, [r3, #28]
 8008cd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008cd4:	431a      	orrs	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cde:	ea42 0103 	orr.w	r1, r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	0c1b      	lsrs	r3, r3, #16
 8008cf8:	f003 0204 	and.w	r2, r3, #4
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d00:	f003 0310 	and.w	r3, r3, #16
 8008d04:	431a      	orrs	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d0a:	f003 0308 	and.w	r3, r3, #8
 8008d0e:	431a      	orrs	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008d18:	ea42 0103 	orr.w	r1, r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	430a      	orrs	r2, r1
 8008d28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	69da      	ldr	r2, [r3, #28]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b08a      	sub	sp, #40	@ 0x28
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	60f8      	str	r0, [r7, #12]
 8008d5a:	60b9      	str	r1, [r7, #8]
 8008d5c:	607a      	str	r2, [r7, #4]
 8008d5e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d60:	2301      	movs	r3, #1
 8008d62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d101      	bne.n	8008d78 <HAL_SPI_TransmitReceive+0x26>
 8008d74:	2302      	movs	r3, #2
 8008d76:	e20a      	b.n	800918e <HAL_SPI_TransmitReceive+0x43c>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d80:	f7fc f9ce 	bl	8005120 <HAL_GetTick>
 8008d84:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d8c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008d94:	887b      	ldrh	r3, [r7, #2]
 8008d96:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008d98:	887b      	ldrh	r3, [r7, #2]
 8008d9a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d9c:	7efb      	ldrb	r3, [r7, #27]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d00e      	beq.n	8008dc0 <HAL_SPI_TransmitReceive+0x6e>
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008da8:	d106      	bne.n	8008db8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d102      	bne.n	8008db8 <HAL_SPI_TransmitReceive+0x66>
 8008db2:	7efb      	ldrb	r3, [r7, #27]
 8008db4:	2b04      	cmp	r3, #4
 8008db6:	d003      	beq.n	8008dc0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008db8:	2302      	movs	r3, #2
 8008dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008dbe:	e1e0      	b.n	8009182 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d005      	beq.n	8008dd2 <HAL_SPI_TransmitReceive+0x80>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <HAL_SPI_TransmitReceive+0x80>
 8008dcc:	887b      	ldrh	r3, [r7, #2]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d103      	bne.n	8008dda <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008dd8:	e1d3      	b.n	8009182 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b04      	cmp	r3, #4
 8008de4:	d003      	beq.n	8008dee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2205      	movs	r2, #5
 8008dea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	887a      	ldrh	r2, [r7, #2]
 8008dfe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	887a      	ldrh	r2, [r7, #2]
 8008e06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	887a      	ldrh	r2, [r7, #2]
 8008e14:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	887a      	ldrh	r2, [r7, #2]
 8008e1a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e30:	d802      	bhi.n	8008e38 <HAL_SPI_TransmitReceive+0xe6>
 8008e32:	8a3b      	ldrh	r3, [r7, #16]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d908      	bls.n	8008e4a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e46:	605a      	str	r2, [r3, #4]
 8008e48:	e007      	b.n	8008e5a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	685a      	ldr	r2, [r3, #4]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008e58:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e64:	2b40      	cmp	r3, #64	@ 0x40
 8008e66:	d007      	beq.n	8008e78 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e80:	f240 8081 	bls.w	8008f86 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <HAL_SPI_TransmitReceive+0x140>
 8008e8c:	8a7b      	ldrh	r3, [r7, #18]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d16d      	bne.n	8008f6e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e96:	881a      	ldrh	r2, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea2:	1c9a      	adds	r2, r3, #2
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008eb6:	e05a      	b.n	8008f6e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f003 0302 	and.w	r3, r3, #2
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d11b      	bne.n	8008efe <HAL_SPI_TransmitReceive+0x1ac>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d016      	beq.n	8008efe <HAL_SPI_TransmitReceive+0x1ac>
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d113      	bne.n	8008efe <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eda:	881a      	ldrh	r2, [r3, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee6:	1c9a      	adds	r2, r3, #2
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f003 0301 	and.w	r3, r3, #1
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d11c      	bne.n	8008f46 <HAL_SPI_TransmitReceive+0x1f4>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d016      	beq.n	8008f46 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68da      	ldr	r2, [r3, #12]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f22:	b292      	uxth	r2, r2
 8008f24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f2a:	1c9a      	adds	r2, r3, #2
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	b29a      	uxth	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f42:	2301      	movs	r3, #1
 8008f44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f46:	f7fc f8eb 	bl	8005120 <HAL_GetTick>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d80b      	bhi.n	8008f6e <HAL_SPI_TransmitReceive+0x21c>
 8008f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5c:	d007      	beq.n	8008f6e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008f6c:	e109      	b.n	8009182 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d19f      	bne.n	8008eb8 <HAL_SPI_TransmitReceive+0x166>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d199      	bne.n	8008eb8 <HAL_SPI_TransmitReceive+0x166>
 8008f84:	e0e3      	b.n	800914e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <HAL_SPI_TransmitReceive+0x244>
 8008f8e:	8a7b      	ldrh	r3, [r7, #18]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	f040 80cf 	bne.w	8009134 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d912      	bls.n	8008fc6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa4:	881a      	ldrh	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb0:	1c9a      	adds	r2, r3, #2
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	3b02      	subs	r3, #2
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008fc4:	e0b6      	b.n	8009134 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	330c      	adds	r3, #12
 8008fd0:	7812      	ldrb	r2, [r2, #0]
 8008fd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fd8:	1c5a      	adds	r2, r3, #1
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fec:	e0a2      	b.n	8009134 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	f003 0302 	and.w	r3, r3, #2
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d134      	bne.n	8009066 <HAL_SPI_TransmitReceive+0x314>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009000:	b29b      	uxth	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d02f      	beq.n	8009066 <HAL_SPI_TransmitReceive+0x314>
 8009006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009008:	2b01      	cmp	r3, #1
 800900a:	d12c      	bne.n	8009066 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009010:	b29b      	uxth	r3, r3
 8009012:	2b01      	cmp	r3, #1
 8009014:	d912      	bls.n	800903c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800901a:	881a      	ldrh	r2, [r3, #0]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009026:	1c9a      	adds	r2, r3, #2
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009030:	b29b      	uxth	r3, r3
 8009032:	3b02      	subs	r3, #2
 8009034:	b29a      	uxth	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800903a:	e012      	b.n	8009062 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	330c      	adds	r3, #12
 8009046:	7812      	ldrb	r2, [r2, #0]
 8009048:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800904e:	1c5a      	adds	r2, r3, #1
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009058:	b29b      	uxth	r3, r3
 800905a:	3b01      	subs	r3, #1
 800905c:	b29a      	uxth	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f003 0301 	and.w	r3, r3, #1
 8009070:	2b01      	cmp	r3, #1
 8009072:	d148      	bne.n	8009106 <HAL_SPI_TransmitReceive+0x3b4>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800907a:	b29b      	uxth	r3, r3
 800907c:	2b00      	cmp	r3, #0
 800907e:	d042      	beq.n	8009106 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009086:	b29b      	uxth	r3, r3
 8009088:	2b01      	cmp	r3, #1
 800908a:	d923      	bls.n	80090d4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68da      	ldr	r2, [r3, #12]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009096:	b292      	uxth	r2, r2
 8009098:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800909e:	1c9a      	adds	r2, r3, #2
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	3b02      	subs	r3, #2
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090bc:	b29b      	uxth	r3, r3
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d81f      	bhi.n	8009102 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80090d0:	605a      	str	r2, [r3, #4]
 80090d2:	e016      	b.n	8009102 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f103 020c 	add.w	r2, r3, #12
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090e0:	7812      	ldrb	r2, [r2, #0]
 80090e2:	b2d2      	uxtb	r2, r2
 80090e4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	3b01      	subs	r3, #1
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009102:	2301      	movs	r3, #1
 8009104:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009106:	f7fc f80b 	bl	8005120 <HAL_GetTick>
 800910a:	4602      	mov	r2, r0
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009112:	429a      	cmp	r2, r3
 8009114:	d803      	bhi.n	800911e <HAL_SPI_TransmitReceive+0x3cc>
 8009116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911c:	d102      	bne.n	8009124 <HAL_SPI_TransmitReceive+0x3d2>
 800911e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009120:	2b00      	cmp	r3, #0
 8009122:	d107      	bne.n	8009134 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2201      	movs	r2, #1
 800912e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009132:	e026      	b.n	8009182 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009138:	b29b      	uxth	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	f47f af57 	bne.w	8008fee <HAL_SPI_TransmitReceive+0x29c>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009146:	b29b      	uxth	r3, r3
 8009148:	2b00      	cmp	r3, #0
 800914a:	f47f af50 	bne.w	8008fee <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800914e:	69fa      	ldr	r2, [r7, #28]
 8009150:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 f93e 	bl	80093d4 <SPI_EndRxTxTransaction>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d005      	beq.n	800916a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2220      	movs	r2, #32
 8009168:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800916e:	2b00      	cmp	r3, #0
 8009170:	d003      	beq.n	800917a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009178:	e003      	b.n	8009182 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800918a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800918e:	4618      	mov	r0, r3
 8009190:	3728      	adds	r7, #40	@ 0x28
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
	...

08009198 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	603b      	str	r3, [r7, #0]
 80091a4:	4613      	mov	r3, r2
 80091a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80091a8:	f7fb ffba 	bl	8005120 <HAL_GetTick>
 80091ac:	4602      	mov	r2, r0
 80091ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b0:	1a9b      	subs	r3, r3, r2
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	4413      	add	r3, r2
 80091b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80091b8:	f7fb ffb2 	bl	8005120 <HAL_GetTick>
 80091bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80091be:	4b39      	ldr	r3, [pc, #228]	@ (80092a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	015b      	lsls	r3, r3, #5
 80091c4:	0d1b      	lsrs	r3, r3, #20
 80091c6:	69fa      	ldr	r2, [r7, #28]
 80091c8:	fb02 f303 	mul.w	r3, r2, r3
 80091cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091ce:	e054      	b.n	800927a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d6:	d050      	beq.n	800927a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091d8:	f7fb ffa2 	bl	8005120 <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	69fa      	ldr	r2, [r7, #28]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d902      	bls.n	80091ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d13d      	bne.n	800926a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685a      	ldr	r2, [r3, #4]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80091fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009206:	d111      	bne.n	800922c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009210:	d004      	beq.n	800921c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800921a:	d107      	bne.n	800922c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800922a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009234:	d10f      	bne.n	8009256 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009254:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009266:	2303      	movs	r3, #3
 8009268:	e017      	b.n	800929a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	3b01      	subs	r3, #1
 8009278:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	689a      	ldr	r2, [r3, #8]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	4013      	ands	r3, r2
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	429a      	cmp	r2, r3
 8009288:	bf0c      	ite	eq
 800928a:	2301      	moveq	r3, #1
 800928c:	2300      	movne	r3, #0
 800928e:	b2db      	uxtb	r3, r3
 8009290:	461a      	mov	r2, r3
 8009292:	79fb      	ldrb	r3, [r7, #7]
 8009294:	429a      	cmp	r2, r3
 8009296:	d19b      	bne.n	80091d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3720      	adds	r7, #32
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	200000c0 	.word	0x200000c0

080092a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b08a      	sub	sp, #40	@ 0x28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
 80092b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80092b6:	2300      	movs	r3, #0
 80092b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80092ba:	f7fb ff31 	bl	8005120 <HAL_GetTick>
 80092be:	4602      	mov	r2, r0
 80092c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c2:	1a9b      	subs	r3, r3, r2
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	4413      	add	r3, r2
 80092c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80092ca:	f7fb ff29 	bl	8005120 <HAL_GetTick>
 80092ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	330c      	adds	r3, #12
 80092d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80092d8:	4b3d      	ldr	r3, [pc, #244]	@ (80093d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	4613      	mov	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4413      	add	r3, r2
 80092e2:	00da      	lsls	r2, r3, #3
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	0d1b      	lsrs	r3, r3, #20
 80092e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092ea:	fb02 f303 	mul.w	r3, r2, r3
 80092ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80092f0:	e060      	b.n	80093b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80092f8:	d107      	bne.n	800930a <SPI_WaitFifoStateUntilTimeout+0x62>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d104      	bne.n	800930a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009308:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009310:	d050      	beq.n	80093b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009312:	f7fb ff05 	bl	8005120 <HAL_GetTick>
 8009316:	4602      	mov	r2, r0
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800931e:	429a      	cmp	r2, r3
 8009320:	d902      	bls.n	8009328 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009324:	2b00      	cmp	r3, #0
 8009326:	d13d      	bne.n	80093a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009336:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009340:	d111      	bne.n	8009366 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800934a:	d004      	beq.n	8009356 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009354:	d107      	bne.n	8009366 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009364:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800936e:	d10f      	bne.n	8009390 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800937e:	601a      	str	r2, [r3, #0]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800938e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e010      	b.n	80093c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80093aa:	2300      	movs	r3, #0
 80093ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	3b01      	subs	r3, #1
 80093b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689a      	ldr	r2, [r3, #8]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	4013      	ands	r3, r2
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d196      	bne.n	80092f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3728      	adds	r7, #40	@ 0x28
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	200000c0 	.word	0x200000c0

080093d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af02      	add	r7, sp, #8
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f7ff ff5b 	bl	80092a8 <SPI_WaitFifoStateUntilTimeout>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d007      	beq.n	8009408 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093fc:	f043 0220 	orr.w	r2, r3, #32
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e027      	b.n	8009458 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	2200      	movs	r2, #0
 8009410:	2180      	movs	r1, #128	@ 0x80
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f7ff fec0 	bl	8009198 <SPI_WaitFlagStateUntilTimeout>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d007      	beq.n	800942e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009422:	f043 0220 	orr.w	r2, r3, #32
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800942a:	2303      	movs	r3, #3
 800942c:	e014      	b.n	8009458 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	2200      	movs	r2, #0
 8009436:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f7ff ff34 	bl	80092a8 <SPI_WaitFifoStateUntilTimeout>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d007      	beq.n	8009456 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800944a:	f043 0220 	orr.w	r2, r3, #32
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e000      	b.n	8009458 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d101      	bne.n	8009472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	e049      	b.n	8009506 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	d106      	bne.n	800948c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7fb fc64 	bl	8004d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3304      	adds	r3, #4
 800949c:	4619      	mov	r1, r3
 800949e:	4610      	mov	r0, r2
 80094a0:	f000 fda4 	bl	8009fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
	...

08009510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b01      	cmp	r3, #1
 8009522:	d001      	beq.n	8009528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e04f      	b.n	80095c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2202      	movs	r2, #2
 800952c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f042 0201 	orr.w	r2, r2, #1
 800953e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a23      	ldr	r2, [pc, #140]	@ (80095d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d01d      	beq.n	8009586 <HAL_TIM_Base_Start_IT+0x76>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009552:	d018      	beq.n	8009586 <HAL_TIM_Base_Start_IT+0x76>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a1f      	ldr	r2, [pc, #124]	@ (80095d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d013      	beq.n	8009586 <HAL_TIM_Base_Start_IT+0x76>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a1e      	ldr	r2, [pc, #120]	@ (80095dc <HAL_TIM_Base_Start_IT+0xcc>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d00e      	beq.n	8009586 <HAL_TIM_Base_Start_IT+0x76>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a1c      	ldr	r2, [pc, #112]	@ (80095e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d009      	beq.n	8009586 <HAL_TIM_Base_Start_IT+0x76>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a1b      	ldr	r2, [pc, #108]	@ (80095e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d004      	beq.n	8009586 <HAL_TIM_Base_Start_IT+0x76>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a19      	ldr	r2, [pc, #100]	@ (80095e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d115      	bne.n	80095b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689a      	ldr	r2, [r3, #8]
 800958c:	4b17      	ldr	r3, [pc, #92]	@ (80095ec <HAL_TIM_Base_Start_IT+0xdc>)
 800958e:	4013      	ands	r3, r2
 8009590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2b06      	cmp	r3, #6
 8009596:	d015      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0xb4>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800959e:	d011      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f042 0201 	orr.w	r2, r2, #1
 80095ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095b0:	e008      	b.n	80095c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f042 0201 	orr.w	r2, r2, #1
 80095c0:	601a      	str	r2, [r3, #0]
 80095c2:	e000      	b.n	80095c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	40012c00 	.word	0x40012c00
 80095d8:	40000400 	.word	0x40000400
 80095dc:	40000800 	.word	0x40000800
 80095e0:	40013400 	.word	0x40013400
 80095e4:	40014000 	.word	0x40014000
 80095e8:	40015000 	.word	0x40015000
 80095ec:	00010007 	.word	0x00010007

080095f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d101      	bne.n	8009602 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e049      	b.n	8009696 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	d106      	bne.n	800961c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f841 	bl	800969e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2202      	movs	r2, #2
 8009620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	3304      	adds	r3, #4
 800962c:	4619      	mov	r1, r3
 800962e:	4610      	mov	r0, r2
 8009630:	f000 fcdc 	bl	8009fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800969e:	b480      	push	{r7}
 80096a0:	b083      	sub	sp, #12
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80096a6:	bf00      	nop
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
	...

080096b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d109      	bne.n	80096d8 <HAL_TIM_PWM_Start+0x24>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	bf14      	ite	ne
 80096d0:	2301      	movne	r3, #1
 80096d2:	2300      	moveq	r3, #0
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	e03c      	b.n	8009752 <HAL_TIM_PWM_Start+0x9e>
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	2b04      	cmp	r3, #4
 80096dc:	d109      	bne.n	80096f2 <HAL_TIM_PWM_Start+0x3e>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	bf14      	ite	ne
 80096ea:	2301      	movne	r3, #1
 80096ec:	2300      	moveq	r3, #0
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	e02f      	b.n	8009752 <HAL_TIM_PWM_Start+0x9e>
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b08      	cmp	r3, #8
 80096f6:	d109      	bne.n	800970c <HAL_TIM_PWM_Start+0x58>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	2b01      	cmp	r3, #1
 8009702:	bf14      	ite	ne
 8009704:	2301      	movne	r3, #1
 8009706:	2300      	moveq	r3, #0
 8009708:	b2db      	uxtb	r3, r3
 800970a:	e022      	b.n	8009752 <HAL_TIM_PWM_Start+0x9e>
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2b0c      	cmp	r3, #12
 8009710:	d109      	bne.n	8009726 <HAL_TIM_PWM_Start+0x72>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b01      	cmp	r3, #1
 800971c:	bf14      	ite	ne
 800971e:	2301      	movne	r3, #1
 8009720:	2300      	moveq	r3, #0
 8009722:	b2db      	uxtb	r3, r3
 8009724:	e015      	b.n	8009752 <HAL_TIM_PWM_Start+0x9e>
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	2b10      	cmp	r3, #16
 800972a:	d109      	bne.n	8009740 <HAL_TIM_PWM_Start+0x8c>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b01      	cmp	r3, #1
 8009736:	bf14      	ite	ne
 8009738:	2301      	movne	r3, #1
 800973a:	2300      	moveq	r3, #0
 800973c:	b2db      	uxtb	r3, r3
 800973e:	e008      	b.n	8009752 <HAL_TIM_PWM_Start+0x9e>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b01      	cmp	r3, #1
 800974a:	bf14      	ite	ne
 800974c:	2301      	movne	r3, #1
 800974e:	2300      	moveq	r3, #0
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e0a1      	b.n	800989e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d104      	bne.n	800976a <HAL_TIM_PWM_Start+0xb6>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009768:	e023      	b.n	80097b2 <HAL_TIM_PWM_Start+0xfe>
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b04      	cmp	r3, #4
 800976e:	d104      	bne.n	800977a <HAL_TIM_PWM_Start+0xc6>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2202      	movs	r2, #2
 8009774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009778:	e01b      	b.n	80097b2 <HAL_TIM_PWM_Start+0xfe>
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2b08      	cmp	r3, #8
 800977e:	d104      	bne.n	800978a <HAL_TIM_PWM_Start+0xd6>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2202      	movs	r2, #2
 8009784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009788:	e013      	b.n	80097b2 <HAL_TIM_PWM_Start+0xfe>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	2b0c      	cmp	r3, #12
 800978e:	d104      	bne.n	800979a <HAL_TIM_PWM_Start+0xe6>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2202      	movs	r2, #2
 8009794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009798:	e00b      	b.n	80097b2 <HAL_TIM_PWM_Start+0xfe>
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	2b10      	cmp	r3, #16
 800979e:	d104      	bne.n	80097aa <HAL_TIM_PWM_Start+0xf6>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2202      	movs	r2, #2
 80097a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097a8:	e003      	b.n	80097b2 <HAL_TIM_PWM_Start+0xfe>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2202      	movs	r2, #2
 80097ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2201      	movs	r2, #1
 80097b8:	6839      	ldr	r1, [r7, #0]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f001 f886 	bl	800a8cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a38      	ldr	r2, [pc, #224]	@ (80098a8 <HAL_TIM_PWM_Start+0x1f4>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d018      	beq.n	80097fc <HAL_TIM_PWM_Start+0x148>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a37      	ldr	r2, [pc, #220]	@ (80098ac <HAL_TIM_PWM_Start+0x1f8>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d013      	beq.n	80097fc <HAL_TIM_PWM_Start+0x148>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a35      	ldr	r2, [pc, #212]	@ (80098b0 <HAL_TIM_PWM_Start+0x1fc>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d00e      	beq.n	80097fc <HAL_TIM_PWM_Start+0x148>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a34      	ldr	r2, [pc, #208]	@ (80098b4 <HAL_TIM_PWM_Start+0x200>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d009      	beq.n	80097fc <HAL_TIM_PWM_Start+0x148>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a32      	ldr	r2, [pc, #200]	@ (80098b8 <HAL_TIM_PWM_Start+0x204>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d004      	beq.n	80097fc <HAL_TIM_PWM_Start+0x148>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a31      	ldr	r2, [pc, #196]	@ (80098bc <HAL_TIM_PWM_Start+0x208>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d101      	bne.n	8009800 <HAL_TIM_PWM_Start+0x14c>
 80097fc:	2301      	movs	r3, #1
 80097fe:	e000      	b.n	8009802 <HAL_TIM_PWM_Start+0x14e>
 8009800:	2300      	movs	r3, #0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d007      	beq.n	8009816 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009814:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a23      	ldr	r2, [pc, #140]	@ (80098a8 <HAL_TIM_PWM_Start+0x1f4>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d01d      	beq.n	800985c <HAL_TIM_PWM_Start+0x1a8>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009828:	d018      	beq.n	800985c <HAL_TIM_PWM_Start+0x1a8>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a24      	ldr	r2, [pc, #144]	@ (80098c0 <HAL_TIM_PWM_Start+0x20c>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d013      	beq.n	800985c <HAL_TIM_PWM_Start+0x1a8>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a22      	ldr	r2, [pc, #136]	@ (80098c4 <HAL_TIM_PWM_Start+0x210>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d00e      	beq.n	800985c <HAL_TIM_PWM_Start+0x1a8>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a1a      	ldr	r2, [pc, #104]	@ (80098ac <HAL_TIM_PWM_Start+0x1f8>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d009      	beq.n	800985c <HAL_TIM_PWM_Start+0x1a8>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a18      	ldr	r2, [pc, #96]	@ (80098b0 <HAL_TIM_PWM_Start+0x1fc>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d004      	beq.n	800985c <HAL_TIM_PWM_Start+0x1a8>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a19      	ldr	r2, [pc, #100]	@ (80098bc <HAL_TIM_PWM_Start+0x208>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d115      	bne.n	8009888 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	689a      	ldr	r2, [r3, #8]
 8009862:	4b19      	ldr	r3, [pc, #100]	@ (80098c8 <HAL_TIM_PWM_Start+0x214>)
 8009864:	4013      	ands	r3, r2
 8009866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b06      	cmp	r3, #6
 800986c:	d015      	beq.n	800989a <HAL_TIM_PWM_Start+0x1e6>
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009874:	d011      	beq.n	800989a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f042 0201 	orr.w	r2, r2, #1
 8009884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009886:	e008      	b.n	800989a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f042 0201 	orr.w	r2, r2, #1
 8009896:	601a      	str	r2, [r3, #0]
 8009898:	e000      	b.n	800989c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800989a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	40012c00 	.word	0x40012c00
 80098ac:	40013400 	.word	0x40013400
 80098b0:	40014000 	.word	0x40014000
 80098b4:	40014400 	.word	0x40014400
 80098b8:	40014800 	.word	0x40014800
 80098bc:	40015000 	.word	0x40015000
 80098c0:	40000400 	.word	0x40000400
 80098c4:	40000800 	.word	0x40000800
 80098c8:	00010007 	.word	0x00010007

080098cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	f003 0302 	and.w	r3, r3, #2
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d020      	beq.n	8009930 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f003 0302 	and.w	r3, r3, #2
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d01b      	beq.n	8009930 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f06f 0202 	mvn.w	r2, #2
 8009900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	f003 0303 	and.w	r3, r3, #3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d003      	beq.n	800991e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fb4a 	bl	8009fb0 <HAL_TIM_IC_CaptureCallback>
 800991c:	e005      	b.n	800992a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fb3c 	bl	8009f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fb4d 	bl	8009fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f003 0304 	and.w	r3, r3, #4
 8009936:	2b00      	cmp	r3, #0
 8009938:	d020      	beq.n	800997c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f003 0304 	and.w	r3, r3, #4
 8009940:	2b00      	cmp	r3, #0
 8009942:	d01b      	beq.n	800997c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f06f 0204 	mvn.w	r2, #4
 800994c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2202      	movs	r2, #2
 8009952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800995e:	2b00      	cmp	r3, #0
 8009960:	d003      	beq.n	800996a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fb24 	bl	8009fb0 <HAL_TIM_IC_CaptureCallback>
 8009968:	e005      	b.n	8009976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fb16 	bl	8009f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fb27 	bl	8009fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	f003 0308 	and.w	r3, r3, #8
 8009982:	2b00      	cmp	r3, #0
 8009984:	d020      	beq.n	80099c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f003 0308 	and.w	r3, r3, #8
 800998c:	2b00      	cmp	r3, #0
 800998e:	d01b      	beq.n	80099c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f06f 0208 	mvn.w	r2, #8
 8009998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2204      	movs	r2, #4
 800999e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	69db      	ldr	r3, [r3, #28]
 80099a6:	f003 0303 	and.w	r3, r3, #3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d003      	beq.n	80099b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fafe 	bl	8009fb0 <HAL_TIM_IC_CaptureCallback>
 80099b4:	e005      	b.n	80099c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 faf0 	bl	8009f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fb01 	bl	8009fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	f003 0310 	and.w	r3, r3, #16
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d020      	beq.n	8009a14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f003 0310 	and.w	r3, r3, #16
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d01b      	beq.n	8009a14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f06f 0210 	mvn.w	r2, #16
 80099e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2208      	movs	r2, #8
 80099ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	69db      	ldr	r3, [r3, #28]
 80099f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d003      	beq.n	8009a02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fad8 	bl	8009fb0 <HAL_TIM_IC_CaptureCallback>
 8009a00:	e005      	b.n	8009a0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 faca 	bl	8009f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 fadb 	bl	8009fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00c      	beq.n	8009a38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d007      	beq.n	8009a38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f06f 0201 	mvn.w	r2, #1
 8009a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7fa fefa 	bl	800482c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d104      	bne.n	8009a4c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00c      	beq.n	8009a66 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d007      	beq.n	8009a66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f001 f885 	bl	800ab70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00c      	beq.n	8009a8a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d007      	beq.n	8009a8a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f001 f87d 	bl	800ab84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00c      	beq.n	8009aae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d007      	beq.n	8009aae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fa95 	bl	8009fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	f003 0320 	and.w	r3, r3, #32
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00c      	beq.n	8009ad2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f003 0320 	and.w	r3, r3, #32
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d007      	beq.n	8009ad2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f06f 0220 	mvn.w	r2, #32
 8009aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f001 f845 	bl	800ab5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00c      	beq.n	8009af6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d007      	beq.n	8009af6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f001 f851 	bl	800ab98 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00c      	beq.n	8009b1a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d007      	beq.n	8009b1a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f001 f849 	bl	800abac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00c      	beq.n	8009b3e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d007      	beq.n	8009b3e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f001 f841 	bl	800abc0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00c      	beq.n	8009b62 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d007      	beq.n	8009b62 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f001 f839 	bl	800abd4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b62:	bf00      	nop
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
	...

08009b6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d101      	bne.n	8009b8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b86:	2302      	movs	r3, #2
 8009b88:	e0ff      	b.n	8009d8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2b14      	cmp	r3, #20
 8009b96:	f200 80f0 	bhi.w	8009d7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009ba0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba0:	08009bf5 	.word	0x08009bf5
 8009ba4:	08009d7b 	.word	0x08009d7b
 8009ba8:	08009d7b 	.word	0x08009d7b
 8009bac:	08009d7b 	.word	0x08009d7b
 8009bb0:	08009c35 	.word	0x08009c35
 8009bb4:	08009d7b 	.word	0x08009d7b
 8009bb8:	08009d7b 	.word	0x08009d7b
 8009bbc:	08009d7b 	.word	0x08009d7b
 8009bc0:	08009c77 	.word	0x08009c77
 8009bc4:	08009d7b 	.word	0x08009d7b
 8009bc8:	08009d7b 	.word	0x08009d7b
 8009bcc:	08009d7b 	.word	0x08009d7b
 8009bd0:	08009cb7 	.word	0x08009cb7
 8009bd4:	08009d7b 	.word	0x08009d7b
 8009bd8:	08009d7b 	.word	0x08009d7b
 8009bdc:	08009d7b 	.word	0x08009d7b
 8009be0:	08009cf9 	.word	0x08009cf9
 8009be4:	08009d7b 	.word	0x08009d7b
 8009be8:	08009d7b 	.word	0x08009d7b
 8009bec:	08009d7b 	.word	0x08009d7b
 8009bf0:	08009d39 	.word	0x08009d39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68b9      	ldr	r1, [r7, #8]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 faa0 	bl	800a140 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	699a      	ldr	r2, [r3, #24]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f042 0208 	orr.w	r2, r2, #8
 8009c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	699a      	ldr	r2, [r3, #24]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 0204 	bic.w	r2, r2, #4
 8009c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6999      	ldr	r1, [r3, #24]
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	691a      	ldr	r2, [r3, #16]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	619a      	str	r2, [r3, #24]
      break;
 8009c32:	e0a5      	b.n	8009d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68b9      	ldr	r1, [r7, #8]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 fb1a 	bl	800a274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	699a      	ldr	r2, [r3, #24]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	699a      	ldr	r2, [r3, #24]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6999      	ldr	r1, [r3, #24]
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	021a      	lsls	r2, r3, #8
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	430a      	orrs	r2, r1
 8009c72:	619a      	str	r2, [r3, #24]
      break;
 8009c74:	e084      	b.n	8009d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68b9      	ldr	r1, [r7, #8]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f000 fb8d 	bl	800a39c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	69da      	ldr	r2, [r3, #28]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f042 0208 	orr.w	r2, r2, #8
 8009c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	69da      	ldr	r2, [r3, #28]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f022 0204 	bic.w	r2, r2, #4
 8009ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	69d9      	ldr	r1, [r3, #28]
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	691a      	ldr	r2, [r3, #16]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	61da      	str	r2, [r3, #28]
      break;
 8009cb4:	e064      	b.n	8009d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68b9      	ldr	r1, [r7, #8]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f000 fbff 	bl	800a4c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	69da      	ldr	r2, [r3, #28]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	69da      	ldr	r2, [r3, #28]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	69d9      	ldr	r1, [r3, #28]
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	021a      	lsls	r2, r3, #8
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	430a      	orrs	r2, r1
 8009cf4:	61da      	str	r2, [r3, #28]
      break;
 8009cf6:	e043      	b.n	8009d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68b9      	ldr	r1, [r7, #8]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 fc72 	bl	800a5e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f042 0208 	orr.w	r2, r2, #8
 8009d12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f022 0204 	bic.w	r2, r2, #4
 8009d22:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	691a      	ldr	r2, [r3, #16]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	430a      	orrs	r2, r1
 8009d34:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009d36:	e023      	b.n	8009d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68b9      	ldr	r1, [r7, #8]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 fcbc 	bl	800a6bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d62:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	021a      	lsls	r2, r3, #8
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	430a      	orrs	r2, r1
 8009d76:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009d78:	e002      	b.n	8009d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop

08009d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d101      	bne.n	8009db0 <HAL_TIM_ConfigClockSource+0x1c>
 8009dac:	2302      	movs	r3, #2
 8009dae:	e0e6      	b.n	8009f7e <HAL_TIM_ConfigClockSource+0x1ea>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009dce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009dda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a67      	ldr	r2, [pc, #412]	@ (8009f88 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	f000 80b1 	beq.w	8009f52 <HAL_TIM_ConfigClockSource+0x1be>
 8009df0:	4a65      	ldr	r2, [pc, #404]	@ (8009f88 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	f200 80b6 	bhi.w	8009f64 <HAL_TIM_ConfigClockSource+0x1d0>
 8009df8:	4a64      	ldr	r2, [pc, #400]	@ (8009f8c <HAL_TIM_ConfigClockSource+0x1f8>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	f000 80a9 	beq.w	8009f52 <HAL_TIM_ConfigClockSource+0x1be>
 8009e00:	4a62      	ldr	r2, [pc, #392]	@ (8009f8c <HAL_TIM_ConfigClockSource+0x1f8>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	f200 80ae 	bhi.w	8009f64 <HAL_TIM_ConfigClockSource+0x1d0>
 8009e08:	4a61      	ldr	r2, [pc, #388]	@ (8009f90 <HAL_TIM_ConfigClockSource+0x1fc>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	f000 80a1 	beq.w	8009f52 <HAL_TIM_ConfigClockSource+0x1be>
 8009e10:	4a5f      	ldr	r2, [pc, #380]	@ (8009f90 <HAL_TIM_ConfigClockSource+0x1fc>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	f200 80a6 	bhi.w	8009f64 <HAL_TIM_ConfigClockSource+0x1d0>
 8009e18:	4a5e      	ldr	r2, [pc, #376]	@ (8009f94 <HAL_TIM_ConfigClockSource+0x200>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	f000 8099 	beq.w	8009f52 <HAL_TIM_ConfigClockSource+0x1be>
 8009e20:	4a5c      	ldr	r2, [pc, #368]	@ (8009f94 <HAL_TIM_ConfigClockSource+0x200>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	f200 809e 	bhi.w	8009f64 <HAL_TIM_ConfigClockSource+0x1d0>
 8009e28:	4a5b      	ldr	r2, [pc, #364]	@ (8009f98 <HAL_TIM_ConfigClockSource+0x204>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	f000 8091 	beq.w	8009f52 <HAL_TIM_ConfigClockSource+0x1be>
 8009e30:	4a59      	ldr	r2, [pc, #356]	@ (8009f98 <HAL_TIM_ConfigClockSource+0x204>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	f200 8096 	bhi.w	8009f64 <HAL_TIM_ConfigClockSource+0x1d0>
 8009e38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009e3c:	f000 8089 	beq.w	8009f52 <HAL_TIM_ConfigClockSource+0x1be>
 8009e40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009e44:	f200 808e 	bhi.w	8009f64 <HAL_TIM_ConfigClockSource+0x1d0>
 8009e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e4c:	d03e      	beq.n	8009ecc <HAL_TIM_ConfigClockSource+0x138>
 8009e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e52:	f200 8087 	bhi.w	8009f64 <HAL_TIM_ConfigClockSource+0x1d0>
 8009e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e5a:	f000 8086 	beq.w	8009f6a <HAL_TIM_ConfigClockSource+0x1d6>
 8009e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e62:	d87f      	bhi.n	8009f64 <HAL_TIM_ConfigClockSource+0x1d0>
 8009e64:	2b70      	cmp	r3, #112	@ 0x70
 8009e66:	d01a      	beq.n	8009e9e <HAL_TIM_ConfigClockSource+0x10a>
 8009e68:	2b70      	cmp	r3, #112	@ 0x70
 8009e6a:	d87b      	bhi.n	8009f64 <HAL_TIM_ConfigClockSource+0x1d0>
 8009e6c:	2b60      	cmp	r3, #96	@ 0x60
 8009e6e:	d050      	beq.n	8009f12 <HAL_TIM_ConfigClockSource+0x17e>
 8009e70:	2b60      	cmp	r3, #96	@ 0x60
 8009e72:	d877      	bhi.n	8009f64 <HAL_TIM_ConfigClockSource+0x1d0>
 8009e74:	2b50      	cmp	r3, #80	@ 0x50
 8009e76:	d03c      	beq.n	8009ef2 <HAL_TIM_ConfigClockSource+0x15e>
 8009e78:	2b50      	cmp	r3, #80	@ 0x50
 8009e7a:	d873      	bhi.n	8009f64 <HAL_TIM_ConfigClockSource+0x1d0>
 8009e7c:	2b40      	cmp	r3, #64	@ 0x40
 8009e7e:	d058      	beq.n	8009f32 <HAL_TIM_ConfigClockSource+0x19e>
 8009e80:	2b40      	cmp	r3, #64	@ 0x40
 8009e82:	d86f      	bhi.n	8009f64 <HAL_TIM_ConfigClockSource+0x1d0>
 8009e84:	2b30      	cmp	r3, #48	@ 0x30
 8009e86:	d064      	beq.n	8009f52 <HAL_TIM_ConfigClockSource+0x1be>
 8009e88:	2b30      	cmp	r3, #48	@ 0x30
 8009e8a:	d86b      	bhi.n	8009f64 <HAL_TIM_ConfigClockSource+0x1d0>
 8009e8c:	2b20      	cmp	r3, #32
 8009e8e:	d060      	beq.n	8009f52 <HAL_TIM_ConfigClockSource+0x1be>
 8009e90:	2b20      	cmp	r3, #32
 8009e92:	d867      	bhi.n	8009f64 <HAL_TIM_ConfigClockSource+0x1d0>
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d05c      	beq.n	8009f52 <HAL_TIM_ConfigClockSource+0x1be>
 8009e98:	2b10      	cmp	r3, #16
 8009e9a:	d05a      	beq.n	8009f52 <HAL_TIM_ConfigClockSource+0x1be>
 8009e9c:	e062      	b.n	8009f64 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009eae:	f000 fced 	bl	800a88c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009ec0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	609a      	str	r2, [r3, #8]
      break;
 8009eca:	e04f      	b.n	8009f6c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009edc:	f000 fcd6 	bl	800a88c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	689a      	ldr	r2, [r3, #8]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009eee:	609a      	str	r2, [r3, #8]
      break;
 8009ef0:	e03c      	b.n	8009f6c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009efe:	461a      	mov	r2, r3
 8009f00:	f000 fc48 	bl	800a794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2150      	movs	r1, #80	@ 0x50
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 fca1 	bl	800a852 <TIM_ITRx_SetConfig>
      break;
 8009f10:	e02c      	b.n	8009f6c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f1e:	461a      	mov	r2, r3
 8009f20:	f000 fc67 	bl	800a7f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2160      	movs	r1, #96	@ 0x60
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 fc91 	bl	800a852 <TIM_ITRx_SetConfig>
      break;
 8009f30:	e01c      	b.n	8009f6c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f3e:	461a      	mov	r2, r3
 8009f40:	f000 fc28 	bl	800a794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2140      	movs	r1, #64	@ 0x40
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f000 fc81 	bl	800a852 <TIM_ITRx_SetConfig>
      break;
 8009f50:	e00c      	b.n	8009f6c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	f000 fc78 	bl	800a852 <TIM_ITRx_SetConfig>
      break;
 8009f62:	e003      	b.n	8009f6c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	73fb      	strb	r3, [r7, #15]
      break;
 8009f68:	e000      	b.n	8009f6c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8009f6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	00100070 	.word	0x00100070
 8009f8c:	00100050 	.word	0x00100050
 8009f90:	00100040 	.word	0x00100040
 8009f94:	00100030 	.word	0x00100030
 8009f98:	00100020 	.word	0x00100020

08009f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a48      	ldr	r2, [pc, #288]	@ (800a120 <TIM_Base_SetConfig+0x134>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d013      	beq.n	800a02c <TIM_Base_SetConfig+0x40>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a00a:	d00f      	beq.n	800a02c <TIM_Base_SetConfig+0x40>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a45      	ldr	r2, [pc, #276]	@ (800a124 <TIM_Base_SetConfig+0x138>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d00b      	beq.n	800a02c <TIM_Base_SetConfig+0x40>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a44      	ldr	r2, [pc, #272]	@ (800a128 <TIM_Base_SetConfig+0x13c>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d007      	beq.n	800a02c <TIM_Base_SetConfig+0x40>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a43      	ldr	r2, [pc, #268]	@ (800a12c <TIM_Base_SetConfig+0x140>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d003      	beq.n	800a02c <TIM_Base_SetConfig+0x40>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a42      	ldr	r2, [pc, #264]	@ (800a130 <TIM_Base_SetConfig+0x144>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d108      	bne.n	800a03e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a37      	ldr	r2, [pc, #220]	@ (800a120 <TIM_Base_SetConfig+0x134>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d01f      	beq.n	800a086 <TIM_Base_SetConfig+0x9a>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a04c:	d01b      	beq.n	800a086 <TIM_Base_SetConfig+0x9a>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a34      	ldr	r2, [pc, #208]	@ (800a124 <TIM_Base_SetConfig+0x138>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d017      	beq.n	800a086 <TIM_Base_SetConfig+0x9a>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a33      	ldr	r2, [pc, #204]	@ (800a128 <TIM_Base_SetConfig+0x13c>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d013      	beq.n	800a086 <TIM_Base_SetConfig+0x9a>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a32      	ldr	r2, [pc, #200]	@ (800a12c <TIM_Base_SetConfig+0x140>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d00f      	beq.n	800a086 <TIM_Base_SetConfig+0x9a>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a32      	ldr	r2, [pc, #200]	@ (800a134 <TIM_Base_SetConfig+0x148>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d00b      	beq.n	800a086 <TIM_Base_SetConfig+0x9a>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a31      	ldr	r2, [pc, #196]	@ (800a138 <TIM_Base_SetConfig+0x14c>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d007      	beq.n	800a086 <TIM_Base_SetConfig+0x9a>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a30      	ldr	r2, [pc, #192]	@ (800a13c <TIM_Base_SetConfig+0x150>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d003      	beq.n	800a086 <TIM_Base_SetConfig+0x9a>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a2b      	ldr	r2, [pc, #172]	@ (800a130 <TIM_Base_SetConfig+0x144>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d108      	bne.n	800a098 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a08c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	4313      	orrs	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	689a      	ldr	r2, [r3, #8]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a18      	ldr	r2, [pc, #96]	@ (800a120 <TIM_Base_SetConfig+0x134>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d013      	beq.n	800a0ec <TIM_Base_SetConfig+0x100>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a19      	ldr	r2, [pc, #100]	@ (800a12c <TIM_Base_SetConfig+0x140>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d00f      	beq.n	800a0ec <TIM_Base_SetConfig+0x100>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a19      	ldr	r2, [pc, #100]	@ (800a134 <TIM_Base_SetConfig+0x148>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d00b      	beq.n	800a0ec <TIM_Base_SetConfig+0x100>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a18      	ldr	r2, [pc, #96]	@ (800a138 <TIM_Base_SetConfig+0x14c>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d007      	beq.n	800a0ec <TIM_Base_SetConfig+0x100>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a17      	ldr	r2, [pc, #92]	@ (800a13c <TIM_Base_SetConfig+0x150>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d003      	beq.n	800a0ec <TIM_Base_SetConfig+0x100>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a12      	ldr	r2, [pc, #72]	@ (800a130 <TIM_Base_SetConfig+0x144>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d103      	bne.n	800a0f4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	691a      	ldr	r2, [r3, #16]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	f003 0301 	and.w	r3, r3, #1
 800a102:	2b01      	cmp	r3, #1
 800a104:	d105      	bne.n	800a112 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	f023 0201 	bic.w	r2, r3, #1
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	611a      	str	r2, [r3, #16]
  }
}
 800a112:	bf00      	nop
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	40012c00 	.word	0x40012c00
 800a124:	40000400 	.word	0x40000400
 800a128:	40000800 	.word	0x40000800
 800a12c:	40013400 	.word	0x40013400
 800a130:	40015000 	.word	0x40015000
 800a134:	40014000 	.word	0x40014000
 800a138:	40014400 	.word	0x40014400
 800a13c:	40014800 	.word	0x40014800

0800a140 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a1b      	ldr	r3, [r3, #32]
 800a154:	f023 0201 	bic.w	r2, r3, #1
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a16e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f023 0303 	bic.w	r3, r3, #3
 800a17a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	4313      	orrs	r3, r2
 800a184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	f023 0302 	bic.w	r3, r3, #2
 800a18c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	697a      	ldr	r2, [r7, #20]
 800a194:	4313      	orrs	r3, r2
 800a196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a30      	ldr	r2, [pc, #192]	@ (800a25c <TIM_OC1_SetConfig+0x11c>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d013      	beq.n	800a1c8 <TIM_OC1_SetConfig+0x88>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a2f      	ldr	r2, [pc, #188]	@ (800a260 <TIM_OC1_SetConfig+0x120>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d00f      	beq.n	800a1c8 <TIM_OC1_SetConfig+0x88>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a2e      	ldr	r2, [pc, #184]	@ (800a264 <TIM_OC1_SetConfig+0x124>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d00b      	beq.n	800a1c8 <TIM_OC1_SetConfig+0x88>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a2d      	ldr	r2, [pc, #180]	@ (800a268 <TIM_OC1_SetConfig+0x128>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d007      	beq.n	800a1c8 <TIM_OC1_SetConfig+0x88>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	4a2c      	ldr	r2, [pc, #176]	@ (800a26c <TIM_OC1_SetConfig+0x12c>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d003      	beq.n	800a1c8 <TIM_OC1_SetConfig+0x88>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a2b      	ldr	r2, [pc, #172]	@ (800a270 <TIM_OC1_SetConfig+0x130>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d10c      	bne.n	800a1e2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	f023 0308 	bic.w	r3, r3, #8
 800a1ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	697a      	ldr	r2, [r7, #20]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f023 0304 	bic.w	r3, r3, #4
 800a1e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a1d      	ldr	r2, [pc, #116]	@ (800a25c <TIM_OC1_SetConfig+0x11c>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d013      	beq.n	800a212 <TIM_OC1_SetConfig+0xd2>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a1c      	ldr	r2, [pc, #112]	@ (800a260 <TIM_OC1_SetConfig+0x120>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d00f      	beq.n	800a212 <TIM_OC1_SetConfig+0xd2>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4a1b      	ldr	r2, [pc, #108]	@ (800a264 <TIM_OC1_SetConfig+0x124>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d00b      	beq.n	800a212 <TIM_OC1_SetConfig+0xd2>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4a1a      	ldr	r2, [pc, #104]	@ (800a268 <TIM_OC1_SetConfig+0x128>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d007      	beq.n	800a212 <TIM_OC1_SetConfig+0xd2>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a19      	ldr	r2, [pc, #100]	@ (800a26c <TIM_OC1_SetConfig+0x12c>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d003      	beq.n	800a212 <TIM_OC1_SetConfig+0xd2>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4a18      	ldr	r2, [pc, #96]	@ (800a270 <TIM_OC1_SetConfig+0x130>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d111      	bne.n	800a236 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	4313      	orrs	r3, r2
 800a22a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	4313      	orrs	r3, r2
 800a234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	693a      	ldr	r2, [r7, #16]
 800a23a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	685a      	ldr	r2, [r3, #4]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	697a      	ldr	r2, [r7, #20]
 800a24e:	621a      	str	r2, [r3, #32]
}
 800a250:	bf00      	nop
 800a252:	371c      	adds	r7, #28
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	40012c00 	.word	0x40012c00
 800a260:	40013400 	.word	0x40013400
 800a264:	40014000 	.word	0x40014000
 800a268:	40014400 	.word	0x40014400
 800a26c:	40014800 	.word	0x40014800
 800a270:	40015000 	.word	0x40015000

0800a274 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a274:	b480      	push	{r7}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a1b      	ldr	r3, [r3, #32]
 800a282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a1b      	ldr	r3, [r3, #32]
 800a288:	f023 0210 	bic.w	r2, r3, #16
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a2a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	021b      	lsls	r3, r3, #8
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	f023 0320 	bic.w	r3, r3, #32
 800a2c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	011b      	lsls	r3, r3, #4
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a2c      	ldr	r2, [pc, #176]	@ (800a384 <TIM_OC2_SetConfig+0x110>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d007      	beq.n	800a2e8 <TIM_OC2_SetConfig+0x74>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a2b      	ldr	r2, [pc, #172]	@ (800a388 <TIM_OC2_SetConfig+0x114>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d003      	beq.n	800a2e8 <TIM_OC2_SetConfig+0x74>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a2a      	ldr	r2, [pc, #168]	@ (800a38c <TIM_OC2_SetConfig+0x118>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d10d      	bne.n	800a304 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	011b      	lsls	r3, r3, #4
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a302:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a1f      	ldr	r2, [pc, #124]	@ (800a384 <TIM_OC2_SetConfig+0x110>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d013      	beq.n	800a334 <TIM_OC2_SetConfig+0xc0>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a1e      	ldr	r2, [pc, #120]	@ (800a388 <TIM_OC2_SetConfig+0x114>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d00f      	beq.n	800a334 <TIM_OC2_SetConfig+0xc0>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a1e      	ldr	r2, [pc, #120]	@ (800a390 <TIM_OC2_SetConfig+0x11c>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d00b      	beq.n	800a334 <TIM_OC2_SetConfig+0xc0>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a1d      	ldr	r2, [pc, #116]	@ (800a394 <TIM_OC2_SetConfig+0x120>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d007      	beq.n	800a334 <TIM_OC2_SetConfig+0xc0>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a1c      	ldr	r2, [pc, #112]	@ (800a398 <TIM_OC2_SetConfig+0x124>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d003      	beq.n	800a334 <TIM_OC2_SetConfig+0xc0>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a17      	ldr	r2, [pc, #92]	@ (800a38c <TIM_OC2_SetConfig+0x118>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d113      	bne.n	800a35c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a33a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a342:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	695b      	ldr	r3, [r3, #20]
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	4313      	orrs	r3, r2
 800a35a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	685a      	ldr	r2, [r3, #4]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	697a      	ldr	r2, [r7, #20]
 800a374:	621a      	str	r2, [r3, #32]
}
 800a376:	bf00      	nop
 800a378:	371c      	adds	r7, #28
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	40012c00 	.word	0x40012c00
 800a388:	40013400 	.word	0x40013400
 800a38c:	40015000 	.word	0x40015000
 800a390:	40014000 	.word	0x40014000
 800a394:	40014400 	.word	0x40014400
 800a398:	40014800 	.word	0x40014800

0800a39c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b087      	sub	sp, #28
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a1b      	ldr	r3, [r3, #32]
 800a3b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	69db      	ldr	r3, [r3, #28]
 800a3c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f023 0303 	bic.w	r3, r3, #3
 800a3d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a3e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	021b      	lsls	r3, r3, #8
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a2b      	ldr	r2, [pc, #172]	@ (800a4a8 <TIM_OC3_SetConfig+0x10c>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d007      	beq.n	800a40e <TIM_OC3_SetConfig+0x72>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a2a      	ldr	r2, [pc, #168]	@ (800a4ac <TIM_OC3_SetConfig+0x110>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d003      	beq.n	800a40e <TIM_OC3_SetConfig+0x72>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a29      	ldr	r2, [pc, #164]	@ (800a4b0 <TIM_OC3_SetConfig+0x114>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d10d      	bne.n	800a42a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	021b      	lsls	r3, r3, #8
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	4313      	orrs	r3, r2
 800a420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a1e      	ldr	r2, [pc, #120]	@ (800a4a8 <TIM_OC3_SetConfig+0x10c>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d013      	beq.n	800a45a <TIM_OC3_SetConfig+0xbe>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a1d      	ldr	r2, [pc, #116]	@ (800a4ac <TIM_OC3_SetConfig+0x110>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d00f      	beq.n	800a45a <TIM_OC3_SetConfig+0xbe>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a1d      	ldr	r2, [pc, #116]	@ (800a4b4 <TIM_OC3_SetConfig+0x118>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d00b      	beq.n	800a45a <TIM_OC3_SetConfig+0xbe>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a1c      	ldr	r2, [pc, #112]	@ (800a4b8 <TIM_OC3_SetConfig+0x11c>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d007      	beq.n	800a45a <TIM_OC3_SetConfig+0xbe>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a1b      	ldr	r2, [pc, #108]	@ (800a4bc <TIM_OC3_SetConfig+0x120>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d003      	beq.n	800a45a <TIM_OC3_SetConfig+0xbe>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a16      	ldr	r2, [pc, #88]	@ (800a4b0 <TIM_OC3_SetConfig+0x114>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d113      	bne.n	800a482 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	011b      	lsls	r3, r3, #4
 800a470:	693a      	ldr	r2, [r7, #16]
 800a472:	4313      	orrs	r3, r2
 800a474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	011b      	lsls	r3, r3, #4
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	4313      	orrs	r3, r2
 800a480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	693a      	ldr	r2, [r7, #16]
 800a486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	685a      	ldr	r2, [r3, #4]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	621a      	str	r2, [r3, #32]
}
 800a49c:	bf00      	nop
 800a49e:	371c      	adds	r7, #28
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr
 800a4a8:	40012c00 	.word	0x40012c00
 800a4ac:	40013400 	.word	0x40013400
 800a4b0:	40015000 	.word	0x40015000
 800a4b4:	40014000 	.word	0x40014000
 800a4b8:	40014400 	.word	0x40014400
 800a4bc:	40014800 	.word	0x40014800

0800a4c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a1b      	ldr	r3, [r3, #32]
 800a4ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a1b      	ldr	r3, [r3, #32]
 800a4d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	69db      	ldr	r3, [r3, #28]
 800a4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a4ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	021b      	lsls	r3, r3, #8
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	4313      	orrs	r3, r2
 800a506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a50e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	031b      	lsls	r3, r3, #12
 800a516:	697a      	ldr	r2, [r7, #20]
 800a518:	4313      	orrs	r3, r2
 800a51a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a2c      	ldr	r2, [pc, #176]	@ (800a5d0 <TIM_OC4_SetConfig+0x110>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d007      	beq.n	800a534 <TIM_OC4_SetConfig+0x74>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a2b      	ldr	r2, [pc, #172]	@ (800a5d4 <TIM_OC4_SetConfig+0x114>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d003      	beq.n	800a534 <TIM_OC4_SetConfig+0x74>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a2a      	ldr	r2, [pc, #168]	@ (800a5d8 <TIM_OC4_SetConfig+0x118>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d10d      	bne.n	800a550 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a53a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	031b      	lsls	r3, r3, #12
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	4313      	orrs	r3, r2
 800a546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a54e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a1f      	ldr	r2, [pc, #124]	@ (800a5d0 <TIM_OC4_SetConfig+0x110>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d013      	beq.n	800a580 <TIM_OC4_SetConfig+0xc0>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a1e      	ldr	r2, [pc, #120]	@ (800a5d4 <TIM_OC4_SetConfig+0x114>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d00f      	beq.n	800a580 <TIM_OC4_SetConfig+0xc0>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a1e      	ldr	r2, [pc, #120]	@ (800a5dc <TIM_OC4_SetConfig+0x11c>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d00b      	beq.n	800a580 <TIM_OC4_SetConfig+0xc0>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a1d      	ldr	r2, [pc, #116]	@ (800a5e0 <TIM_OC4_SetConfig+0x120>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d007      	beq.n	800a580 <TIM_OC4_SetConfig+0xc0>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4a1c      	ldr	r2, [pc, #112]	@ (800a5e4 <TIM_OC4_SetConfig+0x124>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d003      	beq.n	800a580 <TIM_OC4_SetConfig+0xc0>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a17      	ldr	r2, [pc, #92]	@ (800a5d8 <TIM_OC4_SetConfig+0x118>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d113      	bne.n	800a5a8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a586:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a58e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	695b      	ldr	r3, [r3, #20]
 800a594:	019b      	lsls	r3, r3, #6
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	4313      	orrs	r3, r2
 800a59a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	019b      	lsls	r3, r3, #6
 800a5a2:	693a      	ldr	r2, [r7, #16]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	693a      	ldr	r2, [r7, #16]
 800a5ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	685a      	ldr	r2, [r3, #4]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	621a      	str	r2, [r3, #32]
}
 800a5c2:	bf00      	nop
 800a5c4:	371c      	adds	r7, #28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	40012c00 	.word	0x40012c00
 800a5d4:	40013400 	.word	0x40013400
 800a5d8:	40015000 	.word	0x40015000
 800a5dc:	40014000 	.word	0x40014000
 800a5e0:	40014400 	.word	0x40014400
 800a5e4:	40014800 	.word	0x40014800

0800a5e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b087      	sub	sp, #28
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a1b      	ldr	r3, [r3, #32]
 800a5f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a1b      	ldr	r3, [r3, #32]
 800a5fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a60e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a61a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	4313      	orrs	r3, r2
 800a624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a62c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	041b      	lsls	r3, r3, #16
 800a634:	693a      	ldr	r2, [r7, #16]
 800a636:	4313      	orrs	r3, r2
 800a638:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a19      	ldr	r2, [pc, #100]	@ (800a6a4 <TIM_OC5_SetConfig+0xbc>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d013      	beq.n	800a66a <TIM_OC5_SetConfig+0x82>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a18      	ldr	r2, [pc, #96]	@ (800a6a8 <TIM_OC5_SetConfig+0xc0>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d00f      	beq.n	800a66a <TIM_OC5_SetConfig+0x82>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a17      	ldr	r2, [pc, #92]	@ (800a6ac <TIM_OC5_SetConfig+0xc4>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d00b      	beq.n	800a66a <TIM_OC5_SetConfig+0x82>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4a16      	ldr	r2, [pc, #88]	@ (800a6b0 <TIM_OC5_SetConfig+0xc8>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d007      	beq.n	800a66a <TIM_OC5_SetConfig+0x82>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a15      	ldr	r2, [pc, #84]	@ (800a6b4 <TIM_OC5_SetConfig+0xcc>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d003      	beq.n	800a66a <TIM_OC5_SetConfig+0x82>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a14      	ldr	r2, [pc, #80]	@ (800a6b8 <TIM_OC5_SetConfig+0xd0>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d109      	bne.n	800a67e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a670:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	695b      	ldr	r3, [r3, #20]
 800a676:	021b      	lsls	r3, r3, #8
 800a678:	697a      	ldr	r2, [r7, #20]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	697a      	ldr	r2, [r7, #20]
 800a682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	685a      	ldr	r2, [r3, #4]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	693a      	ldr	r2, [r7, #16]
 800a696:	621a      	str	r2, [r3, #32]
}
 800a698:	bf00      	nop
 800a69a:	371c      	adds	r7, #28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	40012c00 	.word	0x40012c00
 800a6a8:	40013400 	.word	0x40013400
 800a6ac:	40014000 	.word	0x40014000
 800a6b0:	40014400 	.word	0x40014400
 800a6b4:	40014800 	.word	0x40014800
 800a6b8:	40015000 	.word	0x40015000

0800a6bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b087      	sub	sp, #28
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a1b      	ldr	r3, [r3, #32]
 800a6ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a1b      	ldr	r3, [r3, #32]
 800a6d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a6ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	021b      	lsls	r3, r3, #8
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a702:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	051b      	lsls	r3, r3, #20
 800a70a:	693a      	ldr	r2, [r7, #16]
 800a70c:	4313      	orrs	r3, r2
 800a70e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a1a      	ldr	r2, [pc, #104]	@ (800a77c <TIM_OC6_SetConfig+0xc0>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d013      	beq.n	800a740 <TIM_OC6_SetConfig+0x84>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a19      	ldr	r2, [pc, #100]	@ (800a780 <TIM_OC6_SetConfig+0xc4>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d00f      	beq.n	800a740 <TIM_OC6_SetConfig+0x84>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a18      	ldr	r2, [pc, #96]	@ (800a784 <TIM_OC6_SetConfig+0xc8>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d00b      	beq.n	800a740 <TIM_OC6_SetConfig+0x84>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a17      	ldr	r2, [pc, #92]	@ (800a788 <TIM_OC6_SetConfig+0xcc>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d007      	beq.n	800a740 <TIM_OC6_SetConfig+0x84>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a16      	ldr	r2, [pc, #88]	@ (800a78c <TIM_OC6_SetConfig+0xd0>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d003      	beq.n	800a740 <TIM_OC6_SetConfig+0x84>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a15      	ldr	r2, [pc, #84]	@ (800a790 <TIM_OC6_SetConfig+0xd4>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d109      	bne.n	800a754 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a746:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	695b      	ldr	r3, [r3, #20]
 800a74c:	029b      	lsls	r3, r3, #10
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	4313      	orrs	r3, r2
 800a752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	697a      	ldr	r2, [r7, #20]
 800a758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	685a      	ldr	r2, [r3, #4]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	693a      	ldr	r2, [r7, #16]
 800a76c:	621a      	str	r2, [r3, #32]
}
 800a76e:	bf00      	nop
 800a770:	371c      	adds	r7, #28
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	40012c00 	.word	0x40012c00
 800a780:	40013400 	.word	0x40013400
 800a784:	40014000 	.word	0x40014000
 800a788:	40014400 	.word	0x40014400
 800a78c:	40014800 	.word	0x40014800
 800a790:	40015000 	.word	0x40015000

0800a794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a794:	b480      	push	{r7}
 800a796:	b087      	sub	sp, #28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6a1b      	ldr	r3, [r3, #32]
 800a7a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6a1b      	ldr	r3, [r3, #32]
 800a7aa:	f023 0201 	bic.w	r2, r3, #1
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a7be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	011b      	lsls	r3, r3, #4
 800a7c4:	693a      	ldr	r2, [r7, #16]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	f023 030a 	bic.w	r3, r3, #10
 800a7d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a7d2:	697a      	ldr	r2, [r7, #20]
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	621a      	str	r2, [r3, #32]
}
 800a7e6:	bf00      	nop
 800a7e8:	371c      	adds	r7, #28
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr

0800a7f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	b087      	sub	sp, #28
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	60f8      	str	r0, [r7, #12]
 800a7fa:	60b9      	str	r1, [r7, #8]
 800a7fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6a1b      	ldr	r3, [r3, #32]
 800a802:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6a1b      	ldr	r3, [r3, #32]
 800a808:	f023 0210 	bic.w	r2, r3, #16
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a81c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	031b      	lsls	r3, r3, #12
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	4313      	orrs	r3, r2
 800a826:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a82e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	011b      	lsls	r3, r3, #4
 800a834:	697a      	ldr	r2, [r7, #20]
 800a836:	4313      	orrs	r3, r2
 800a838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	693a      	ldr	r2, [r7, #16]
 800a83e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	697a      	ldr	r2, [r7, #20]
 800a844:	621a      	str	r2, [r3, #32]
}
 800a846:	bf00      	nop
 800a848:	371c      	adds	r7, #28
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr

0800a852 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a852:	b480      	push	{r7}
 800a854:	b085      	sub	sp, #20
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a868:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a86c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	4313      	orrs	r3, r2
 800a874:	f043 0307 	orr.w	r3, r3, #7
 800a878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	609a      	str	r2, [r3, #8]
}
 800a880:	bf00      	nop
 800a882:	3714      	adds	r7, #20
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b087      	sub	sp, #28
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a8a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	021a      	lsls	r2, r3, #8
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	431a      	orrs	r2, r3
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	697a      	ldr	r2, [r7, #20]
 800a8be:	609a      	str	r2, [r3, #8]
}
 800a8c0:	bf00      	nop
 800a8c2:	371c      	adds	r7, #28
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b087      	sub	sp, #28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	f003 031f 	and.w	r3, r3, #31
 800a8de:	2201      	movs	r2, #1
 800a8e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6a1a      	ldr	r2, [r3, #32]
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	43db      	mvns	r3, r3
 800a8ee:	401a      	ands	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6a1a      	ldr	r2, [r3, #32]
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f003 031f 	and.w	r3, r3, #31
 800a8fe:	6879      	ldr	r1, [r7, #4]
 800a900:	fa01 f303 	lsl.w	r3, r1, r3
 800a904:	431a      	orrs	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	621a      	str	r2, [r3, #32]
}
 800a90a:	bf00      	nop
 800a90c:	371c      	adds	r7, #28
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr
	...

0800a918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d101      	bne.n	800a930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a92c:	2302      	movs	r3, #2
 800a92e:	e06f      	b.n	800aa10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2202      	movs	r2, #2
 800a93c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a31      	ldr	r2, [pc, #196]	@ (800aa1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d009      	beq.n	800a96e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a30      	ldr	r2, [pc, #192]	@ (800aa20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d004      	beq.n	800a96e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a2e      	ldr	r2, [pc, #184]	@ (800aa24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d108      	bne.n	800a980 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a974:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a98a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	4313      	orrs	r3, r2
 800a994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68fa      	ldr	r2, [r7, #12]
 800a99c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a1e      	ldr	r2, [pc, #120]	@ (800aa1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d01d      	beq.n	800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9b0:	d018      	beq.n	800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a1c      	ldr	r2, [pc, #112]	@ (800aa28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d013      	beq.n	800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a1a      	ldr	r2, [pc, #104]	@ (800aa2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d00e      	beq.n	800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a15      	ldr	r2, [pc, #84]	@ (800aa20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d009      	beq.n	800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a16      	ldr	r2, [pc, #88]	@ (800aa30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d004      	beq.n	800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a11      	ldr	r2, [pc, #68]	@ (800aa24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d10c      	bne.n	800a9fe <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	68ba      	ldr	r2, [r7, #8]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2201      	movs	r2, #1
 800aa02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3714      	adds	r7, #20
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr
 800aa1c:	40012c00 	.word	0x40012c00
 800aa20:	40013400 	.word	0x40013400
 800aa24:	40015000 	.word	0x40015000
 800aa28:	40000400 	.word	0x40000400
 800aa2c:	40000800 	.word	0x40000800
 800aa30:	40014000 	.word	0x40014000

0800aa34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d101      	bne.n	800aa50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	e078      	b.n	800ab42 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aab6:	4313      	orrs	r3, r2
 800aab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	699b      	ldr	r3, [r3, #24]
 800aac4:	041b      	lsls	r3, r3, #16
 800aac6:	4313      	orrs	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	69db      	ldr	r3, [r3, #28]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a1c      	ldr	r2, [pc, #112]	@ (800ab50 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d009      	beq.n	800aaf6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a1b      	ldr	r2, [pc, #108]	@ (800ab54 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d004      	beq.n	800aaf6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a19      	ldr	r2, [pc, #100]	@ (800ab58 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d11c      	bne.n	800ab30 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab00:	051b      	lsls	r3, r3, #20
 800ab02:	4313      	orrs	r3, r2
 800ab04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	6a1b      	ldr	r3, [r3, #32]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3714      	adds	r7, #20
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	40012c00 	.word	0x40012c00
 800ab54:	40013400 	.word	0x40013400
 800ab58:	40015000 	.word	0x40015000

0800ab5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab64:	bf00      	nop
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab78:	bf00      	nop
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab8c:	bf00      	nop
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800aba0:	bf00      	nop
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800abb4:	bf00      	nop
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <_ZdlPvj>:
 800abe8:	f000 b804 	b.w	800abf4 <_ZdlPv>

0800abec <_ZdaPv>:
 800abec:	f000 b802 	b.w	800abf4 <_ZdlPv>

0800abf0 <_Znaj>:
 800abf0:	f000 b802 	b.w	800abf8 <_Znwj>

0800abf4 <_ZdlPv>:
 800abf4:	f001 ba0e 	b.w	800c014 <free>

0800abf8 <_Znwj>:
 800abf8:	2801      	cmp	r0, #1
 800abfa:	bf38      	it	cc
 800abfc:	2001      	movcc	r0, #1
 800abfe:	b510      	push	{r4, lr}
 800ac00:	4604      	mov	r4, r0
 800ac02:	4620      	mov	r0, r4
 800ac04:	f001 f9fe 	bl	800c004 <malloc>
 800ac08:	b100      	cbz	r0, 800ac0c <_Znwj+0x14>
 800ac0a:	bd10      	pop	{r4, pc}
 800ac0c:	f000 f806 	bl	800ac1c <_ZSt15get_new_handlerv>
 800ac10:	b908      	cbnz	r0, 800ac16 <_Znwj+0x1e>
 800ac12:	f001 f9ef 	bl	800bff4 <abort>
 800ac16:	4780      	blx	r0
 800ac18:	e7f3      	b.n	800ac02 <_Znwj+0xa>
	...

0800ac1c <_ZSt15get_new_handlerv>:
 800ac1c:	4b02      	ldr	r3, [pc, #8]	@ (800ac28 <_ZSt15get_new_handlerv+0xc>)
 800ac1e:	6818      	ldr	r0, [r3, #0]
 800ac20:	f3bf 8f5b 	dmb	ish
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	200007e0 	.word	0x200007e0

0800ac2c <pow>:
 800ac2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac2e:	ed2d 8b02 	vpush	{d8}
 800ac32:	eeb0 8a40 	vmov.f32	s16, s0
 800ac36:	eef0 8a60 	vmov.f32	s17, s1
 800ac3a:	ec55 4b11 	vmov	r4, r5, d1
 800ac3e:	f000 f97b 	bl	800af38 <__ieee754_pow>
 800ac42:	4622      	mov	r2, r4
 800ac44:	462b      	mov	r3, r5
 800ac46:	4620      	mov	r0, r4
 800ac48:	4629      	mov	r1, r5
 800ac4a:	ec57 6b10 	vmov	r6, r7, d0
 800ac4e:	f7f5 ff39 	bl	8000ac4 <__aeabi_dcmpun>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	d13b      	bne.n	800acce <pow+0xa2>
 800ac56:	ec51 0b18 	vmov	r0, r1, d8
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	f7f5 feff 	bl	8000a60 <__aeabi_dcmpeq>
 800ac62:	b1b8      	cbz	r0, 800ac94 <pow+0x68>
 800ac64:	2200      	movs	r2, #0
 800ac66:	2300      	movs	r3, #0
 800ac68:	4620      	mov	r0, r4
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	f7f5 fef8 	bl	8000a60 <__aeabi_dcmpeq>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d146      	bne.n	800ad02 <pow+0xd6>
 800ac74:	ec45 4b10 	vmov	d0, r4, r5
 800ac78:	f000 f888 	bl	800ad8c <finite>
 800ac7c:	b338      	cbz	r0, 800acce <pow+0xa2>
 800ac7e:	2200      	movs	r2, #0
 800ac80:	2300      	movs	r3, #0
 800ac82:	4620      	mov	r0, r4
 800ac84:	4629      	mov	r1, r5
 800ac86:	f7f5 fef5 	bl	8000a74 <__aeabi_dcmplt>
 800ac8a:	b300      	cbz	r0, 800acce <pow+0xa2>
 800ac8c:	f001 fad4 	bl	800c238 <__errno>
 800ac90:	2322      	movs	r3, #34	@ 0x22
 800ac92:	e01b      	b.n	800accc <pow+0xa0>
 800ac94:	ec47 6b10 	vmov	d0, r6, r7
 800ac98:	f000 f878 	bl	800ad8c <finite>
 800ac9c:	b9e0      	cbnz	r0, 800acd8 <pow+0xac>
 800ac9e:	eeb0 0a48 	vmov.f32	s0, s16
 800aca2:	eef0 0a68 	vmov.f32	s1, s17
 800aca6:	f000 f871 	bl	800ad8c <finite>
 800acaa:	b1a8      	cbz	r0, 800acd8 <pow+0xac>
 800acac:	ec45 4b10 	vmov	d0, r4, r5
 800acb0:	f000 f86c 	bl	800ad8c <finite>
 800acb4:	b180      	cbz	r0, 800acd8 <pow+0xac>
 800acb6:	4632      	mov	r2, r6
 800acb8:	463b      	mov	r3, r7
 800acba:	4630      	mov	r0, r6
 800acbc:	4639      	mov	r1, r7
 800acbe:	f7f5 ff01 	bl	8000ac4 <__aeabi_dcmpun>
 800acc2:	2800      	cmp	r0, #0
 800acc4:	d0e2      	beq.n	800ac8c <pow+0x60>
 800acc6:	f001 fab7 	bl	800c238 <__errno>
 800acca:	2321      	movs	r3, #33	@ 0x21
 800accc:	6003      	str	r3, [r0, #0]
 800acce:	ecbd 8b02 	vpop	{d8}
 800acd2:	ec47 6b10 	vmov	d0, r6, r7
 800acd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acd8:	2200      	movs	r2, #0
 800acda:	2300      	movs	r3, #0
 800acdc:	4630      	mov	r0, r6
 800acde:	4639      	mov	r1, r7
 800ace0:	f7f5 febe 	bl	8000a60 <__aeabi_dcmpeq>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d0f2      	beq.n	800acce <pow+0xa2>
 800ace8:	eeb0 0a48 	vmov.f32	s0, s16
 800acec:	eef0 0a68 	vmov.f32	s1, s17
 800acf0:	f000 f84c 	bl	800ad8c <finite>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d0ea      	beq.n	800acce <pow+0xa2>
 800acf8:	ec45 4b10 	vmov	d0, r4, r5
 800acfc:	f000 f846 	bl	800ad8c <finite>
 800ad00:	e7c3      	b.n	800ac8a <pow+0x5e>
 800ad02:	4f01      	ldr	r7, [pc, #4]	@ (800ad08 <pow+0xdc>)
 800ad04:	2600      	movs	r6, #0
 800ad06:	e7e2      	b.n	800acce <pow+0xa2>
 800ad08:	3ff00000 	.word	0x3ff00000

0800ad0c <atan2f>:
 800ad0c:	f000 be60 	b.w	800b9d0 <__ieee754_atan2f>

0800ad10 <fmodf>:
 800ad10:	b508      	push	{r3, lr}
 800ad12:	ed2d 8b02 	vpush	{d8}
 800ad16:	eef0 8a40 	vmov.f32	s17, s0
 800ad1a:	eeb0 8a60 	vmov.f32	s16, s1
 800ad1e:	f000 fef7 	bl	800bb10 <__ieee754_fmodf>
 800ad22:	eef4 8a48 	vcmp.f32	s17, s16
 800ad26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad2a:	d60c      	bvs.n	800ad46 <fmodf+0x36>
 800ad2c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ad4c <fmodf+0x3c>
 800ad30:	eeb4 8a68 	vcmp.f32	s16, s17
 800ad34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad38:	d105      	bne.n	800ad46 <fmodf+0x36>
 800ad3a:	f001 fa7d 	bl	800c238 <__errno>
 800ad3e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ad42:	2321      	movs	r3, #33	@ 0x21
 800ad44:	6003      	str	r3, [r0, #0]
 800ad46:	ecbd 8b02 	vpop	{d8}
 800ad4a:	bd08      	pop	{r3, pc}
 800ad4c:	00000000 	.word	0x00000000

0800ad50 <sqrtf>:
 800ad50:	b508      	push	{r3, lr}
 800ad52:	ed2d 8b02 	vpush	{d8}
 800ad56:	eeb0 8a40 	vmov.f32	s16, s0
 800ad5a:	f000 f8a3 	bl	800aea4 <__ieee754_sqrtf>
 800ad5e:	eeb4 8a48 	vcmp.f32	s16, s16
 800ad62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad66:	d60c      	bvs.n	800ad82 <sqrtf+0x32>
 800ad68:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ad88 <sqrtf+0x38>
 800ad6c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ad70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad74:	d505      	bpl.n	800ad82 <sqrtf+0x32>
 800ad76:	f001 fa5f 	bl	800c238 <__errno>
 800ad7a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ad7e:	2321      	movs	r3, #33	@ 0x21
 800ad80:	6003      	str	r3, [r0, #0]
 800ad82:	ecbd 8b02 	vpop	{d8}
 800ad86:	bd08      	pop	{r3, pc}
 800ad88:	00000000 	.word	0x00000000

0800ad8c <finite>:
 800ad8c:	b082      	sub	sp, #8
 800ad8e:	ed8d 0b00 	vstr	d0, [sp]
 800ad92:	9801      	ldr	r0, [sp, #4]
 800ad94:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800ad98:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ad9c:	0fc0      	lsrs	r0, r0, #31
 800ad9e:	b002      	add	sp, #8
 800ada0:	4770      	bx	lr
 800ada2:	0000      	movs	r0, r0
 800ada4:	0000      	movs	r0, r0
	...

0800ada8 <scalbn>:
 800ada8:	b570      	push	{r4, r5, r6, lr}
 800adaa:	ec55 4b10 	vmov	r4, r5, d0
 800adae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800adb2:	4606      	mov	r6, r0
 800adb4:	462b      	mov	r3, r5
 800adb6:	b991      	cbnz	r1, 800adde <scalbn+0x36>
 800adb8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800adbc:	4323      	orrs	r3, r4
 800adbe:	d03d      	beq.n	800ae3c <scalbn+0x94>
 800adc0:	4b35      	ldr	r3, [pc, #212]	@ (800ae98 <scalbn+0xf0>)
 800adc2:	4620      	mov	r0, r4
 800adc4:	4629      	mov	r1, r5
 800adc6:	2200      	movs	r2, #0
 800adc8:	f7f5 fbe2 	bl	8000590 <__aeabi_dmul>
 800adcc:	4b33      	ldr	r3, [pc, #204]	@ (800ae9c <scalbn+0xf4>)
 800adce:	429e      	cmp	r6, r3
 800add0:	4604      	mov	r4, r0
 800add2:	460d      	mov	r5, r1
 800add4:	da0f      	bge.n	800adf6 <scalbn+0x4e>
 800add6:	a328      	add	r3, pc, #160	@ (adr r3, 800ae78 <scalbn+0xd0>)
 800add8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800addc:	e01e      	b.n	800ae1c <scalbn+0x74>
 800adde:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ade2:	4291      	cmp	r1, r2
 800ade4:	d10b      	bne.n	800adfe <scalbn+0x56>
 800ade6:	4622      	mov	r2, r4
 800ade8:	4620      	mov	r0, r4
 800adea:	4629      	mov	r1, r5
 800adec:	f7f5 fa1a 	bl	8000224 <__adddf3>
 800adf0:	4604      	mov	r4, r0
 800adf2:	460d      	mov	r5, r1
 800adf4:	e022      	b.n	800ae3c <scalbn+0x94>
 800adf6:	460b      	mov	r3, r1
 800adf8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800adfc:	3936      	subs	r1, #54	@ 0x36
 800adfe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ae02:	4296      	cmp	r6, r2
 800ae04:	dd0d      	ble.n	800ae22 <scalbn+0x7a>
 800ae06:	2d00      	cmp	r5, #0
 800ae08:	a11d      	add	r1, pc, #116	@ (adr r1, 800ae80 <scalbn+0xd8>)
 800ae0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae0e:	da02      	bge.n	800ae16 <scalbn+0x6e>
 800ae10:	a11d      	add	r1, pc, #116	@ (adr r1, 800ae88 <scalbn+0xe0>)
 800ae12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae16:	a31a      	add	r3, pc, #104	@ (adr r3, 800ae80 <scalbn+0xd8>)
 800ae18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1c:	f7f5 fbb8 	bl	8000590 <__aeabi_dmul>
 800ae20:	e7e6      	b.n	800adf0 <scalbn+0x48>
 800ae22:	1872      	adds	r2, r6, r1
 800ae24:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ae28:	428a      	cmp	r2, r1
 800ae2a:	dcec      	bgt.n	800ae06 <scalbn+0x5e>
 800ae2c:	2a00      	cmp	r2, #0
 800ae2e:	dd08      	ble.n	800ae42 <scalbn+0x9a>
 800ae30:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ae34:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ae38:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae3c:	ec45 4b10 	vmov	d0, r4, r5
 800ae40:	bd70      	pop	{r4, r5, r6, pc}
 800ae42:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ae46:	da08      	bge.n	800ae5a <scalbn+0xb2>
 800ae48:	2d00      	cmp	r5, #0
 800ae4a:	a10b      	add	r1, pc, #44	@ (adr r1, 800ae78 <scalbn+0xd0>)
 800ae4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae50:	dac1      	bge.n	800add6 <scalbn+0x2e>
 800ae52:	a10f      	add	r1, pc, #60	@ (adr r1, 800ae90 <scalbn+0xe8>)
 800ae54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae58:	e7bd      	b.n	800add6 <scalbn+0x2e>
 800ae5a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ae5e:	3236      	adds	r2, #54	@ 0x36
 800ae60:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ae64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae68:	4620      	mov	r0, r4
 800ae6a:	4b0d      	ldr	r3, [pc, #52]	@ (800aea0 <scalbn+0xf8>)
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	2200      	movs	r2, #0
 800ae70:	e7d4      	b.n	800ae1c <scalbn+0x74>
 800ae72:	bf00      	nop
 800ae74:	f3af 8000 	nop.w
 800ae78:	c2f8f359 	.word	0xc2f8f359
 800ae7c:	01a56e1f 	.word	0x01a56e1f
 800ae80:	8800759c 	.word	0x8800759c
 800ae84:	7e37e43c 	.word	0x7e37e43c
 800ae88:	8800759c 	.word	0x8800759c
 800ae8c:	fe37e43c 	.word	0xfe37e43c
 800ae90:	c2f8f359 	.word	0xc2f8f359
 800ae94:	81a56e1f 	.word	0x81a56e1f
 800ae98:	43500000 	.word	0x43500000
 800ae9c:	ffff3cb0 	.word	0xffff3cb0
 800aea0:	3c900000 	.word	0x3c900000

0800aea4 <__ieee754_sqrtf>:
 800aea4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800aea8:	4770      	bx	lr
	...

0800aeac <floorf>:
 800aeac:	ee10 3a10 	vmov	r3, s0
 800aeb0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800aeb4:	3a7f      	subs	r2, #127	@ 0x7f
 800aeb6:	2a16      	cmp	r2, #22
 800aeb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800aebc:	dc2b      	bgt.n	800af16 <floorf+0x6a>
 800aebe:	2a00      	cmp	r2, #0
 800aec0:	da12      	bge.n	800aee8 <floorf+0x3c>
 800aec2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800af28 <floorf+0x7c>
 800aec6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aeca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed2:	dd06      	ble.n	800aee2 <floorf+0x36>
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	da24      	bge.n	800af22 <floorf+0x76>
 800aed8:	2900      	cmp	r1, #0
 800aeda:	4b14      	ldr	r3, [pc, #80]	@ (800af2c <floorf+0x80>)
 800aedc:	bf08      	it	eq
 800aede:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800aee2:	ee00 3a10 	vmov	s0, r3
 800aee6:	4770      	bx	lr
 800aee8:	4911      	ldr	r1, [pc, #68]	@ (800af30 <floorf+0x84>)
 800aeea:	4111      	asrs	r1, r2
 800aeec:	420b      	tst	r3, r1
 800aeee:	d0fa      	beq.n	800aee6 <floorf+0x3a>
 800aef0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800af28 <floorf+0x7c>
 800aef4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aef8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af00:	ddef      	ble.n	800aee2 <floorf+0x36>
 800af02:	2b00      	cmp	r3, #0
 800af04:	bfbe      	ittt	lt
 800af06:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800af0a:	fa40 f202 	asrlt.w	r2, r0, r2
 800af0e:	189b      	addlt	r3, r3, r2
 800af10:	ea23 0301 	bic.w	r3, r3, r1
 800af14:	e7e5      	b.n	800aee2 <floorf+0x36>
 800af16:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800af1a:	d3e4      	bcc.n	800aee6 <floorf+0x3a>
 800af1c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800af20:	4770      	bx	lr
 800af22:	2300      	movs	r3, #0
 800af24:	e7dd      	b.n	800aee2 <floorf+0x36>
 800af26:	bf00      	nop
 800af28:	7149f2ca 	.word	0x7149f2ca
 800af2c:	bf800000 	.word	0xbf800000
 800af30:	007fffff 	.word	0x007fffff
 800af34:	00000000 	.word	0x00000000

0800af38 <__ieee754_pow>:
 800af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3c:	b091      	sub	sp, #68	@ 0x44
 800af3e:	ed8d 1b00 	vstr	d1, [sp]
 800af42:	e9dd 1900 	ldrd	r1, r9, [sp]
 800af46:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800af4a:	ea5a 0001 	orrs.w	r0, sl, r1
 800af4e:	ec57 6b10 	vmov	r6, r7, d0
 800af52:	d113      	bne.n	800af7c <__ieee754_pow+0x44>
 800af54:	19b3      	adds	r3, r6, r6
 800af56:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800af5a:	4152      	adcs	r2, r2
 800af5c:	4298      	cmp	r0, r3
 800af5e:	4b98      	ldr	r3, [pc, #608]	@ (800b1c0 <__ieee754_pow+0x288>)
 800af60:	4193      	sbcs	r3, r2
 800af62:	f080 84ea 	bcs.w	800b93a <__ieee754_pow+0xa02>
 800af66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af6a:	4630      	mov	r0, r6
 800af6c:	4639      	mov	r1, r7
 800af6e:	f7f5 f959 	bl	8000224 <__adddf3>
 800af72:	ec41 0b10 	vmov	d0, r0, r1
 800af76:	b011      	add	sp, #68	@ 0x44
 800af78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7c:	4a91      	ldr	r2, [pc, #580]	@ (800b1c4 <__ieee754_pow+0x28c>)
 800af7e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800af82:	4590      	cmp	r8, r2
 800af84:	463d      	mov	r5, r7
 800af86:	4633      	mov	r3, r6
 800af88:	d806      	bhi.n	800af98 <__ieee754_pow+0x60>
 800af8a:	d101      	bne.n	800af90 <__ieee754_pow+0x58>
 800af8c:	2e00      	cmp	r6, #0
 800af8e:	d1ea      	bne.n	800af66 <__ieee754_pow+0x2e>
 800af90:	4592      	cmp	sl, r2
 800af92:	d801      	bhi.n	800af98 <__ieee754_pow+0x60>
 800af94:	d10e      	bne.n	800afb4 <__ieee754_pow+0x7c>
 800af96:	b169      	cbz	r1, 800afb4 <__ieee754_pow+0x7c>
 800af98:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800af9c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800afa0:	431d      	orrs	r5, r3
 800afa2:	d1e0      	bne.n	800af66 <__ieee754_pow+0x2e>
 800afa4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800afa8:	18db      	adds	r3, r3, r3
 800afaa:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800afae:	4152      	adcs	r2, r2
 800afb0:	429d      	cmp	r5, r3
 800afb2:	e7d4      	b.n	800af5e <__ieee754_pow+0x26>
 800afb4:	2d00      	cmp	r5, #0
 800afb6:	46c3      	mov	fp, r8
 800afb8:	da3a      	bge.n	800b030 <__ieee754_pow+0xf8>
 800afba:	4a83      	ldr	r2, [pc, #524]	@ (800b1c8 <__ieee754_pow+0x290>)
 800afbc:	4592      	cmp	sl, r2
 800afbe:	d84d      	bhi.n	800b05c <__ieee754_pow+0x124>
 800afc0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800afc4:	4592      	cmp	sl, r2
 800afc6:	f240 84c7 	bls.w	800b958 <__ieee754_pow+0xa20>
 800afca:	ea4f 522a 	mov.w	r2, sl, asr #20
 800afce:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800afd2:	2a14      	cmp	r2, #20
 800afd4:	dd0f      	ble.n	800aff6 <__ieee754_pow+0xbe>
 800afd6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800afda:	fa21 f402 	lsr.w	r4, r1, r2
 800afde:	fa04 f202 	lsl.w	r2, r4, r2
 800afe2:	428a      	cmp	r2, r1
 800afe4:	f040 84b8 	bne.w	800b958 <__ieee754_pow+0xa20>
 800afe8:	f004 0401 	and.w	r4, r4, #1
 800afec:	f1c4 0402 	rsb	r4, r4, #2
 800aff0:	2900      	cmp	r1, #0
 800aff2:	d158      	bne.n	800b0a6 <__ieee754_pow+0x16e>
 800aff4:	e00e      	b.n	800b014 <__ieee754_pow+0xdc>
 800aff6:	2900      	cmp	r1, #0
 800aff8:	d154      	bne.n	800b0a4 <__ieee754_pow+0x16c>
 800affa:	f1c2 0214 	rsb	r2, r2, #20
 800affe:	fa4a f402 	asr.w	r4, sl, r2
 800b002:	fa04 f202 	lsl.w	r2, r4, r2
 800b006:	4552      	cmp	r2, sl
 800b008:	f040 84a3 	bne.w	800b952 <__ieee754_pow+0xa1a>
 800b00c:	f004 0401 	and.w	r4, r4, #1
 800b010:	f1c4 0402 	rsb	r4, r4, #2
 800b014:	4a6d      	ldr	r2, [pc, #436]	@ (800b1cc <__ieee754_pow+0x294>)
 800b016:	4592      	cmp	sl, r2
 800b018:	d12e      	bne.n	800b078 <__ieee754_pow+0x140>
 800b01a:	f1b9 0f00 	cmp.w	r9, #0
 800b01e:	f280 8494 	bge.w	800b94a <__ieee754_pow+0xa12>
 800b022:	496a      	ldr	r1, [pc, #424]	@ (800b1cc <__ieee754_pow+0x294>)
 800b024:	4632      	mov	r2, r6
 800b026:	463b      	mov	r3, r7
 800b028:	2000      	movs	r0, #0
 800b02a:	f7f5 fbdb 	bl	80007e4 <__aeabi_ddiv>
 800b02e:	e7a0      	b.n	800af72 <__ieee754_pow+0x3a>
 800b030:	2400      	movs	r4, #0
 800b032:	bbc1      	cbnz	r1, 800b0a6 <__ieee754_pow+0x16e>
 800b034:	4a63      	ldr	r2, [pc, #396]	@ (800b1c4 <__ieee754_pow+0x28c>)
 800b036:	4592      	cmp	sl, r2
 800b038:	d1ec      	bne.n	800b014 <__ieee754_pow+0xdc>
 800b03a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800b03e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b042:	431a      	orrs	r2, r3
 800b044:	f000 8479 	beq.w	800b93a <__ieee754_pow+0xa02>
 800b048:	4b61      	ldr	r3, [pc, #388]	@ (800b1d0 <__ieee754_pow+0x298>)
 800b04a:	4598      	cmp	r8, r3
 800b04c:	d908      	bls.n	800b060 <__ieee754_pow+0x128>
 800b04e:	f1b9 0f00 	cmp.w	r9, #0
 800b052:	f2c0 8476 	blt.w	800b942 <__ieee754_pow+0xa0a>
 800b056:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b05a:	e78a      	b.n	800af72 <__ieee754_pow+0x3a>
 800b05c:	2402      	movs	r4, #2
 800b05e:	e7e8      	b.n	800b032 <__ieee754_pow+0xfa>
 800b060:	f1b9 0f00 	cmp.w	r9, #0
 800b064:	f04f 0000 	mov.w	r0, #0
 800b068:	f04f 0100 	mov.w	r1, #0
 800b06c:	da81      	bge.n	800af72 <__ieee754_pow+0x3a>
 800b06e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b072:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b076:	e77c      	b.n	800af72 <__ieee754_pow+0x3a>
 800b078:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b07c:	d106      	bne.n	800b08c <__ieee754_pow+0x154>
 800b07e:	4632      	mov	r2, r6
 800b080:	463b      	mov	r3, r7
 800b082:	4630      	mov	r0, r6
 800b084:	4639      	mov	r1, r7
 800b086:	f7f5 fa83 	bl	8000590 <__aeabi_dmul>
 800b08a:	e772      	b.n	800af72 <__ieee754_pow+0x3a>
 800b08c:	4a51      	ldr	r2, [pc, #324]	@ (800b1d4 <__ieee754_pow+0x29c>)
 800b08e:	4591      	cmp	r9, r2
 800b090:	d109      	bne.n	800b0a6 <__ieee754_pow+0x16e>
 800b092:	2d00      	cmp	r5, #0
 800b094:	db07      	blt.n	800b0a6 <__ieee754_pow+0x16e>
 800b096:	ec47 6b10 	vmov	d0, r6, r7
 800b09a:	b011      	add	sp, #68	@ 0x44
 800b09c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a0:	f000 bece 	b.w	800be40 <__ieee754_sqrt>
 800b0a4:	2400      	movs	r4, #0
 800b0a6:	ec47 6b10 	vmov	d0, r6, r7
 800b0aa:	9302      	str	r3, [sp, #8]
 800b0ac:	f000 fc88 	bl	800b9c0 <fabs>
 800b0b0:	9b02      	ldr	r3, [sp, #8]
 800b0b2:	ec51 0b10 	vmov	r0, r1, d0
 800b0b6:	bb53      	cbnz	r3, 800b10e <__ieee754_pow+0x1d6>
 800b0b8:	4b44      	ldr	r3, [pc, #272]	@ (800b1cc <__ieee754_pow+0x294>)
 800b0ba:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d002      	beq.n	800b0c8 <__ieee754_pow+0x190>
 800b0c2:	f1b8 0f00 	cmp.w	r8, #0
 800b0c6:	d122      	bne.n	800b10e <__ieee754_pow+0x1d6>
 800b0c8:	f1b9 0f00 	cmp.w	r9, #0
 800b0cc:	da05      	bge.n	800b0da <__ieee754_pow+0x1a2>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	493d      	ldr	r1, [pc, #244]	@ (800b1cc <__ieee754_pow+0x294>)
 800b0d6:	f7f5 fb85 	bl	80007e4 <__aeabi_ddiv>
 800b0da:	2d00      	cmp	r5, #0
 800b0dc:	f6bf af49 	bge.w	800af72 <__ieee754_pow+0x3a>
 800b0e0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800b0e4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800b0e8:	ea58 0804 	orrs.w	r8, r8, r4
 800b0ec:	d108      	bne.n	800b100 <__ieee754_pow+0x1c8>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	4610      	mov	r0, r2
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	f7f5 f893 	bl	8000220 <__aeabi_dsub>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	e794      	b.n	800b02a <__ieee754_pow+0xf2>
 800b100:	2c01      	cmp	r4, #1
 800b102:	f47f af36 	bne.w	800af72 <__ieee754_pow+0x3a>
 800b106:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b10a:	4619      	mov	r1, r3
 800b10c:	e731      	b.n	800af72 <__ieee754_pow+0x3a>
 800b10e:	0feb      	lsrs	r3, r5, #31
 800b110:	3b01      	subs	r3, #1
 800b112:	ea53 0204 	orrs.w	r2, r3, r4
 800b116:	d102      	bne.n	800b11e <__ieee754_pow+0x1e6>
 800b118:	4632      	mov	r2, r6
 800b11a:	463b      	mov	r3, r7
 800b11c:	e7e9      	b.n	800b0f2 <__ieee754_pow+0x1ba>
 800b11e:	3c01      	subs	r4, #1
 800b120:	431c      	orrs	r4, r3
 800b122:	d016      	beq.n	800b152 <__ieee754_pow+0x21a>
 800b124:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800b1b0 <__ieee754_pow+0x278>
 800b128:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800b12c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b130:	f240 8112 	bls.w	800b358 <__ieee754_pow+0x420>
 800b134:	4b28      	ldr	r3, [pc, #160]	@ (800b1d8 <__ieee754_pow+0x2a0>)
 800b136:	459a      	cmp	sl, r3
 800b138:	4b25      	ldr	r3, [pc, #148]	@ (800b1d0 <__ieee754_pow+0x298>)
 800b13a:	d916      	bls.n	800b16a <__ieee754_pow+0x232>
 800b13c:	4598      	cmp	r8, r3
 800b13e:	d80b      	bhi.n	800b158 <__ieee754_pow+0x220>
 800b140:	f1b9 0f00 	cmp.w	r9, #0
 800b144:	da0b      	bge.n	800b15e <__ieee754_pow+0x226>
 800b146:	2000      	movs	r0, #0
 800b148:	b011      	add	sp, #68	@ 0x44
 800b14a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14e:	f000 be6f 	b.w	800be30 <__math_oflow>
 800b152:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800b1b8 <__ieee754_pow+0x280>
 800b156:	e7e7      	b.n	800b128 <__ieee754_pow+0x1f0>
 800b158:	f1b9 0f00 	cmp.w	r9, #0
 800b15c:	dcf3      	bgt.n	800b146 <__ieee754_pow+0x20e>
 800b15e:	2000      	movs	r0, #0
 800b160:	b011      	add	sp, #68	@ 0x44
 800b162:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b166:	f000 be5b 	b.w	800be20 <__math_uflow>
 800b16a:	4598      	cmp	r8, r3
 800b16c:	d20c      	bcs.n	800b188 <__ieee754_pow+0x250>
 800b16e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b172:	2200      	movs	r2, #0
 800b174:	2300      	movs	r3, #0
 800b176:	f7f5 fc7d 	bl	8000a74 <__aeabi_dcmplt>
 800b17a:	3800      	subs	r0, #0
 800b17c:	bf18      	it	ne
 800b17e:	2001      	movne	r0, #1
 800b180:	f1b9 0f00 	cmp.w	r9, #0
 800b184:	daec      	bge.n	800b160 <__ieee754_pow+0x228>
 800b186:	e7df      	b.n	800b148 <__ieee754_pow+0x210>
 800b188:	4b10      	ldr	r3, [pc, #64]	@ (800b1cc <__ieee754_pow+0x294>)
 800b18a:	4598      	cmp	r8, r3
 800b18c:	f04f 0200 	mov.w	r2, #0
 800b190:	d924      	bls.n	800b1dc <__ieee754_pow+0x2a4>
 800b192:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b196:	2300      	movs	r3, #0
 800b198:	f7f5 fc6c 	bl	8000a74 <__aeabi_dcmplt>
 800b19c:	3800      	subs	r0, #0
 800b19e:	bf18      	it	ne
 800b1a0:	2001      	movne	r0, #1
 800b1a2:	f1b9 0f00 	cmp.w	r9, #0
 800b1a6:	dccf      	bgt.n	800b148 <__ieee754_pow+0x210>
 800b1a8:	e7da      	b.n	800b160 <__ieee754_pow+0x228>
 800b1aa:	bf00      	nop
 800b1ac:	f3af 8000 	nop.w
 800b1b0:	00000000 	.word	0x00000000
 800b1b4:	3ff00000 	.word	0x3ff00000
 800b1b8:	00000000 	.word	0x00000000
 800b1bc:	bff00000 	.word	0xbff00000
 800b1c0:	fff00000 	.word	0xfff00000
 800b1c4:	7ff00000 	.word	0x7ff00000
 800b1c8:	433fffff 	.word	0x433fffff
 800b1cc:	3ff00000 	.word	0x3ff00000
 800b1d0:	3fefffff 	.word	0x3fefffff
 800b1d4:	3fe00000 	.word	0x3fe00000
 800b1d8:	43f00000 	.word	0x43f00000
 800b1dc:	4b5a      	ldr	r3, [pc, #360]	@ (800b348 <__ieee754_pow+0x410>)
 800b1de:	f7f5 f81f 	bl	8000220 <__aeabi_dsub>
 800b1e2:	a351      	add	r3, pc, #324	@ (adr r3, 800b328 <__ieee754_pow+0x3f0>)
 800b1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e8:	4604      	mov	r4, r0
 800b1ea:	460d      	mov	r5, r1
 800b1ec:	f7f5 f9d0 	bl	8000590 <__aeabi_dmul>
 800b1f0:	a34f      	add	r3, pc, #316	@ (adr r3, 800b330 <__ieee754_pow+0x3f8>)
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	4606      	mov	r6, r0
 800b1f8:	460f      	mov	r7, r1
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	4629      	mov	r1, r5
 800b1fe:	f7f5 f9c7 	bl	8000590 <__aeabi_dmul>
 800b202:	4b52      	ldr	r3, [pc, #328]	@ (800b34c <__ieee754_pow+0x414>)
 800b204:	4682      	mov	sl, r0
 800b206:	468b      	mov	fp, r1
 800b208:	2200      	movs	r2, #0
 800b20a:	4620      	mov	r0, r4
 800b20c:	4629      	mov	r1, r5
 800b20e:	f7f5 f9bf 	bl	8000590 <__aeabi_dmul>
 800b212:	4602      	mov	r2, r0
 800b214:	460b      	mov	r3, r1
 800b216:	a148      	add	r1, pc, #288	@ (adr r1, 800b338 <__ieee754_pow+0x400>)
 800b218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b21c:	f7f5 f800 	bl	8000220 <__aeabi_dsub>
 800b220:	4622      	mov	r2, r4
 800b222:	462b      	mov	r3, r5
 800b224:	f7f5 f9b4 	bl	8000590 <__aeabi_dmul>
 800b228:	4602      	mov	r2, r0
 800b22a:	460b      	mov	r3, r1
 800b22c:	2000      	movs	r0, #0
 800b22e:	4948      	ldr	r1, [pc, #288]	@ (800b350 <__ieee754_pow+0x418>)
 800b230:	f7f4 fff6 	bl	8000220 <__aeabi_dsub>
 800b234:	4622      	mov	r2, r4
 800b236:	4680      	mov	r8, r0
 800b238:	4689      	mov	r9, r1
 800b23a:	462b      	mov	r3, r5
 800b23c:	4620      	mov	r0, r4
 800b23e:	4629      	mov	r1, r5
 800b240:	f7f5 f9a6 	bl	8000590 <__aeabi_dmul>
 800b244:	4602      	mov	r2, r0
 800b246:	460b      	mov	r3, r1
 800b248:	4640      	mov	r0, r8
 800b24a:	4649      	mov	r1, r9
 800b24c:	f7f5 f9a0 	bl	8000590 <__aeabi_dmul>
 800b250:	a33b      	add	r3, pc, #236	@ (adr r3, 800b340 <__ieee754_pow+0x408>)
 800b252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b256:	f7f5 f99b 	bl	8000590 <__aeabi_dmul>
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
 800b25e:	4650      	mov	r0, sl
 800b260:	4659      	mov	r1, fp
 800b262:	f7f4 ffdd 	bl	8000220 <__aeabi_dsub>
 800b266:	4602      	mov	r2, r0
 800b268:	460b      	mov	r3, r1
 800b26a:	4680      	mov	r8, r0
 800b26c:	4689      	mov	r9, r1
 800b26e:	4630      	mov	r0, r6
 800b270:	4639      	mov	r1, r7
 800b272:	f7f4 ffd7 	bl	8000224 <__adddf3>
 800b276:	2400      	movs	r4, #0
 800b278:	4632      	mov	r2, r6
 800b27a:	463b      	mov	r3, r7
 800b27c:	4620      	mov	r0, r4
 800b27e:	460d      	mov	r5, r1
 800b280:	f7f4 ffce 	bl	8000220 <__aeabi_dsub>
 800b284:	4602      	mov	r2, r0
 800b286:	460b      	mov	r3, r1
 800b288:	4640      	mov	r0, r8
 800b28a:	4649      	mov	r1, r9
 800b28c:	f7f4 ffc8 	bl	8000220 <__aeabi_dsub>
 800b290:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b294:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b298:	2300      	movs	r3, #0
 800b29a:	9304      	str	r3, [sp, #16]
 800b29c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b2a0:	4606      	mov	r6, r0
 800b2a2:	460f      	mov	r7, r1
 800b2a4:	4652      	mov	r2, sl
 800b2a6:	465b      	mov	r3, fp
 800b2a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2ac:	f7f4 ffb8 	bl	8000220 <__aeabi_dsub>
 800b2b0:	4622      	mov	r2, r4
 800b2b2:	462b      	mov	r3, r5
 800b2b4:	f7f5 f96c 	bl	8000590 <__aeabi_dmul>
 800b2b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2bc:	4680      	mov	r8, r0
 800b2be:	4689      	mov	r9, r1
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	4639      	mov	r1, r7
 800b2c4:	f7f5 f964 	bl	8000590 <__aeabi_dmul>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4640      	mov	r0, r8
 800b2ce:	4649      	mov	r1, r9
 800b2d0:	f7f4 ffa8 	bl	8000224 <__adddf3>
 800b2d4:	4652      	mov	r2, sl
 800b2d6:	465b      	mov	r3, fp
 800b2d8:	4606      	mov	r6, r0
 800b2da:	460f      	mov	r7, r1
 800b2dc:	4620      	mov	r0, r4
 800b2de:	4629      	mov	r1, r5
 800b2e0:	f7f5 f956 	bl	8000590 <__aeabi_dmul>
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	4680      	mov	r8, r0
 800b2ea:	4689      	mov	r9, r1
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	4639      	mov	r1, r7
 800b2f0:	f7f4 ff98 	bl	8000224 <__adddf3>
 800b2f4:	4b17      	ldr	r3, [pc, #92]	@ (800b354 <__ieee754_pow+0x41c>)
 800b2f6:	4299      	cmp	r1, r3
 800b2f8:	4604      	mov	r4, r0
 800b2fa:	460d      	mov	r5, r1
 800b2fc:	468a      	mov	sl, r1
 800b2fe:	468b      	mov	fp, r1
 800b300:	f340 82ef 	ble.w	800b8e2 <__ieee754_pow+0x9aa>
 800b304:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b308:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b30c:	4303      	orrs	r3, r0
 800b30e:	f000 81e8 	beq.w	800b6e2 <__ieee754_pow+0x7aa>
 800b312:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b316:	2200      	movs	r2, #0
 800b318:	2300      	movs	r3, #0
 800b31a:	f7f5 fbab 	bl	8000a74 <__aeabi_dcmplt>
 800b31e:	3800      	subs	r0, #0
 800b320:	bf18      	it	ne
 800b322:	2001      	movne	r0, #1
 800b324:	e710      	b.n	800b148 <__ieee754_pow+0x210>
 800b326:	bf00      	nop
 800b328:	60000000 	.word	0x60000000
 800b32c:	3ff71547 	.word	0x3ff71547
 800b330:	f85ddf44 	.word	0xf85ddf44
 800b334:	3e54ae0b 	.word	0x3e54ae0b
 800b338:	55555555 	.word	0x55555555
 800b33c:	3fd55555 	.word	0x3fd55555
 800b340:	652b82fe 	.word	0x652b82fe
 800b344:	3ff71547 	.word	0x3ff71547
 800b348:	3ff00000 	.word	0x3ff00000
 800b34c:	3fd00000 	.word	0x3fd00000
 800b350:	3fe00000 	.word	0x3fe00000
 800b354:	408fffff 	.word	0x408fffff
 800b358:	4bd5      	ldr	r3, [pc, #852]	@ (800b6b0 <__ieee754_pow+0x778>)
 800b35a:	402b      	ands	r3, r5
 800b35c:	2200      	movs	r2, #0
 800b35e:	b92b      	cbnz	r3, 800b36c <__ieee754_pow+0x434>
 800b360:	4bd4      	ldr	r3, [pc, #848]	@ (800b6b4 <__ieee754_pow+0x77c>)
 800b362:	f7f5 f915 	bl	8000590 <__aeabi_dmul>
 800b366:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800b36a:	468b      	mov	fp, r1
 800b36c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800b370:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b374:	4413      	add	r3, r2
 800b376:	930a      	str	r3, [sp, #40]	@ 0x28
 800b378:	4bcf      	ldr	r3, [pc, #828]	@ (800b6b8 <__ieee754_pow+0x780>)
 800b37a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800b37e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800b382:	459b      	cmp	fp, r3
 800b384:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b388:	dd08      	ble.n	800b39c <__ieee754_pow+0x464>
 800b38a:	4bcc      	ldr	r3, [pc, #816]	@ (800b6bc <__ieee754_pow+0x784>)
 800b38c:	459b      	cmp	fp, r3
 800b38e:	f340 81a5 	ble.w	800b6dc <__ieee754_pow+0x7a4>
 800b392:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b394:	3301      	adds	r3, #1
 800b396:	930a      	str	r3, [sp, #40]	@ 0x28
 800b398:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b39c:	f04f 0a00 	mov.w	sl, #0
 800b3a0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b3a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3a6:	4bc6      	ldr	r3, [pc, #792]	@ (800b6c0 <__ieee754_pow+0x788>)
 800b3a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b3ac:	ed93 7b00 	vldr	d7, [r3]
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	ec53 2b17 	vmov	r2, r3, d7
 800b3b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b3ba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b3be:	f7f4 ff2f 	bl	8000220 <__aeabi_dsub>
 800b3c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b3c6:	4606      	mov	r6, r0
 800b3c8:	460f      	mov	r7, r1
 800b3ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3ce:	f7f4 ff29 	bl	8000224 <__adddf3>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	49ba      	ldr	r1, [pc, #744]	@ (800b6c4 <__ieee754_pow+0x78c>)
 800b3da:	f7f5 fa03 	bl	80007e4 <__aeabi_ddiv>
 800b3de:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	4639      	mov	r1, r7
 800b3ea:	f7f5 f8d1 	bl	8000590 <__aeabi_dmul>
 800b3ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3f2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800b3f6:	106d      	asrs	r5, r5, #1
 800b3f8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b3fc:	f04f 0b00 	mov.w	fp, #0
 800b400:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b404:	4661      	mov	r1, ip
 800b406:	2200      	movs	r2, #0
 800b408:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b40c:	4658      	mov	r0, fp
 800b40e:	46e1      	mov	r9, ip
 800b410:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800b414:	4614      	mov	r4, r2
 800b416:	461d      	mov	r5, r3
 800b418:	f7f5 f8ba 	bl	8000590 <__aeabi_dmul>
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	4630      	mov	r0, r6
 800b422:	4639      	mov	r1, r7
 800b424:	f7f4 fefc 	bl	8000220 <__aeabi_dsub>
 800b428:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b42c:	4606      	mov	r6, r0
 800b42e:	460f      	mov	r7, r1
 800b430:	4620      	mov	r0, r4
 800b432:	4629      	mov	r1, r5
 800b434:	f7f4 fef4 	bl	8000220 <__aeabi_dsub>
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b440:	f7f4 feee 	bl	8000220 <__aeabi_dsub>
 800b444:	465a      	mov	r2, fp
 800b446:	464b      	mov	r3, r9
 800b448:	f7f5 f8a2 	bl	8000590 <__aeabi_dmul>
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	4630      	mov	r0, r6
 800b452:	4639      	mov	r1, r7
 800b454:	f7f4 fee4 	bl	8000220 <__aeabi_dsub>
 800b458:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b45c:	f7f5 f898 	bl	8000590 <__aeabi_dmul>
 800b460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b464:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b468:	4610      	mov	r0, r2
 800b46a:	4619      	mov	r1, r3
 800b46c:	f7f5 f890 	bl	8000590 <__aeabi_dmul>
 800b470:	a37d      	add	r3, pc, #500	@ (adr r3, 800b668 <__ieee754_pow+0x730>)
 800b472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b476:	4604      	mov	r4, r0
 800b478:	460d      	mov	r5, r1
 800b47a:	f7f5 f889 	bl	8000590 <__aeabi_dmul>
 800b47e:	a37c      	add	r3, pc, #496	@ (adr r3, 800b670 <__ieee754_pow+0x738>)
 800b480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b484:	f7f4 fece 	bl	8000224 <__adddf3>
 800b488:	4622      	mov	r2, r4
 800b48a:	462b      	mov	r3, r5
 800b48c:	f7f5 f880 	bl	8000590 <__aeabi_dmul>
 800b490:	a379      	add	r3, pc, #484	@ (adr r3, 800b678 <__ieee754_pow+0x740>)
 800b492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b496:	f7f4 fec5 	bl	8000224 <__adddf3>
 800b49a:	4622      	mov	r2, r4
 800b49c:	462b      	mov	r3, r5
 800b49e:	f7f5 f877 	bl	8000590 <__aeabi_dmul>
 800b4a2:	a377      	add	r3, pc, #476	@ (adr r3, 800b680 <__ieee754_pow+0x748>)
 800b4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a8:	f7f4 febc 	bl	8000224 <__adddf3>
 800b4ac:	4622      	mov	r2, r4
 800b4ae:	462b      	mov	r3, r5
 800b4b0:	f7f5 f86e 	bl	8000590 <__aeabi_dmul>
 800b4b4:	a374      	add	r3, pc, #464	@ (adr r3, 800b688 <__ieee754_pow+0x750>)
 800b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ba:	f7f4 feb3 	bl	8000224 <__adddf3>
 800b4be:	4622      	mov	r2, r4
 800b4c0:	462b      	mov	r3, r5
 800b4c2:	f7f5 f865 	bl	8000590 <__aeabi_dmul>
 800b4c6:	a372      	add	r3, pc, #456	@ (adr r3, 800b690 <__ieee754_pow+0x758>)
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	f7f4 feaa 	bl	8000224 <__adddf3>
 800b4d0:	4622      	mov	r2, r4
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	460f      	mov	r7, r1
 800b4d6:	462b      	mov	r3, r5
 800b4d8:	4620      	mov	r0, r4
 800b4da:	4629      	mov	r1, r5
 800b4dc:	f7f5 f858 	bl	8000590 <__aeabi_dmul>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	4639      	mov	r1, r7
 800b4e8:	f7f5 f852 	bl	8000590 <__aeabi_dmul>
 800b4ec:	465a      	mov	r2, fp
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	460d      	mov	r5, r1
 800b4f2:	464b      	mov	r3, r9
 800b4f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4f8:	f7f4 fe94 	bl	8000224 <__adddf3>
 800b4fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b500:	f7f5 f846 	bl	8000590 <__aeabi_dmul>
 800b504:	4622      	mov	r2, r4
 800b506:	462b      	mov	r3, r5
 800b508:	f7f4 fe8c 	bl	8000224 <__adddf3>
 800b50c:	465a      	mov	r2, fp
 800b50e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b512:	464b      	mov	r3, r9
 800b514:	4658      	mov	r0, fp
 800b516:	4649      	mov	r1, r9
 800b518:	f7f5 f83a 	bl	8000590 <__aeabi_dmul>
 800b51c:	4b6a      	ldr	r3, [pc, #424]	@ (800b6c8 <__ieee754_pow+0x790>)
 800b51e:	2200      	movs	r2, #0
 800b520:	4606      	mov	r6, r0
 800b522:	460f      	mov	r7, r1
 800b524:	f7f4 fe7e 	bl	8000224 <__adddf3>
 800b528:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b52c:	f7f4 fe7a 	bl	8000224 <__adddf3>
 800b530:	46d8      	mov	r8, fp
 800b532:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800b536:	460d      	mov	r5, r1
 800b538:	465a      	mov	r2, fp
 800b53a:	460b      	mov	r3, r1
 800b53c:	4640      	mov	r0, r8
 800b53e:	4649      	mov	r1, r9
 800b540:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800b544:	f7f5 f824 	bl	8000590 <__aeabi_dmul>
 800b548:	465c      	mov	r4, fp
 800b54a:	4680      	mov	r8, r0
 800b54c:	4689      	mov	r9, r1
 800b54e:	4b5e      	ldr	r3, [pc, #376]	@ (800b6c8 <__ieee754_pow+0x790>)
 800b550:	2200      	movs	r2, #0
 800b552:	4620      	mov	r0, r4
 800b554:	4629      	mov	r1, r5
 800b556:	f7f4 fe63 	bl	8000220 <__aeabi_dsub>
 800b55a:	4632      	mov	r2, r6
 800b55c:	463b      	mov	r3, r7
 800b55e:	f7f4 fe5f 	bl	8000220 <__aeabi_dsub>
 800b562:	4602      	mov	r2, r0
 800b564:	460b      	mov	r3, r1
 800b566:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b56a:	f7f4 fe59 	bl	8000220 <__aeabi_dsub>
 800b56e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b572:	f7f5 f80d 	bl	8000590 <__aeabi_dmul>
 800b576:	4622      	mov	r2, r4
 800b578:	4606      	mov	r6, r0
 800b57a:	460f      	mov	r7, r1
 800b57c:	462b      	mov	r3, r5
 800b57e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b582:	f7f5 f805 	bl	8000590 <__aeabi_dmul>
 800b586:	4602      	mov	r2, r0
 800b588:	460b      	mov	r3, r1
 800b58a:	4630      	mov	r0, r6
 800b58c:	4639      	mov	r1, r7
 800b58e:	f7f4 fe49 	bl	8000224 <__adddf3>
 800b592:	4606      	mov	r6, r0
 800b594:	460f      	mov	r7, r1
 800b596:	4602      	mov	r2, r0
 800b598:	460b      	mov	r3, r1
 800b59a:	4640      	mov	r0, r8
 800b59c:	4649      	mov	r1, r9
 800b59e:	f7f4 fe41 	bl	8000224 <__adddf3>
 800b5a2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800b5a6:	a33c      	add	r3, pc, #240	@ (adr r3, 800b698 <__ieee754_pow+0x760>)
 800b5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ac:	4658      	mov	r0, fp
 800b5ae:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800b5b2:	460d      	mov	r5, r1
 800b5b4:	f7f4 ffec 	bl	8000590 <__aeabi_dmul>
 800b5b8:	465c      	mov	r4, fp
 800b5ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5be:	4642      	mov	r2, r8
 800b5c0:	464b      	mov	r3, r9
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	4629      	mov	r1, r5
 800b5c6:	f7f4 fe2b 	bl	8000220 <__aeabi_dsub>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	4639      	mov	r1, r7
 800b5d2:	f7f4 fe25 	bl	8000220 <__aeabi_dsub>
 800b5d6:	a332      	add	r3, pc, #200	@ (adr r3, 800b6a0 <__ieee754_pow+0x768>)
 800b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5dc:	f7f4 ffd8 	bl	8000590 <__aeabi_dmul>
 800b5e0:	a331      	add	r3, pc, #196	@ (adr r3, 800b6a8 <__ieee754_pow+0x770>)
 800b5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e6:	4606      	mov	r6, r0
 800b5e8:	460f      	mov	r7, r1
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	4629      	mov	r1, r5
 800b5ee:	f7f4 ffcf 	bl	8000590 <__aeabi_dmul>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4630      	mov	r0, r6
 800b5f8:	4639      	mov	r1, r7
 800b5fa:	f7f4 fe13 	bl	8000224 <__adddf3>
 800b5fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b600:	4b32      	ldr	r3, [pc, #200]	@ (800b6cc <__ieee754_pow+0x794>)
 800b602:	4413      	add	r3, r2
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	f7f4 fe0c 	bl	8000224 <__adddf3>
 800b60c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b610:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b612:	f7f4 ff53 	bl	80004bc <__aeabi_i2d>
 800b616:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b618:	4b2d      	ldr	r3, [pc, #180]	@ (800b6d0 <__ieee754_pow+0x798>)
 800b61a:	4413      	add	r3, r2
 800b61c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b620:	4606      	mov	r6, r0
 800b622:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b626:	460f      	mov	r7, r1
 800b628:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b62c:	f7f4 fdfa 	bl	8000224 <__adddf3>
 800b630:	4642      	mov	r2, r8
 800b632:	464b      	mov	r3, r9
 800b634:	f7f4 fdf6 	bl	8000224 <__adddf3>
 800b638:	4632      	mov	r2, r6
 800b63a:	463b      	mov	r3, r7
 800b63c:	f7f4 fdf2 	bl	8000224 <__adddf3>
 800b640:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800b644:	4632      	mov	r2, r6
 800b646:	463b      	mov	r3, r7
 800b648:	4658      	mov	r0, fp
 800b64a:	460d      	mov	r5, r1
 800b64c:	f7f4 fde8 	bl	8000220 <__aeabi_dsub>
 800b650:	4642      	mov	r2, r8
 800b652:	464b      	mov	r3, r9
 800b654:	f7f4 fde4 	bl	8000220 <__aeabi_dsub>
 800b658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b65c:	f7f4 fde0 	bl	8000220 <__aeabi_dsub>
 800b660:	465c      	mov	r4, fp
 800b662:	4602      	mov	r2, r0
 800b664:	e036      	b.n	800b6d4 <__ieee754_pow+0x79c>
 800b666:	bf00      	nop
 800b668:	4a454eef 	.word	0x4a454eef
 800b66c:	3fca7e28 	.word	0x3fca7e28
 800b670:	93c9db65 	.word	0x93c9db65
 800b674:	3fcd864a 	.word	0x3fcd864a
 800b678:	a91d4101 	.word	0xa91d4101
 800b67c:	3fd17460 	.word	0x3fd17460
 800b680:	518f264d 	.word	0x518f264d
 800b684:	3fd55555 	.word	0x3fd55555
 800b688:	db6fabff 	.word	0xdb6fabff
 800b68c:	3fdb6db6 	.word	0x3fdb6db6
 800b690:	33333303 	.word	0x33333303
 800b694:	3fe33333 	.word	0x3fe33333
 800b698:	e0000000 	.word	0xe0000000
 800b69c:	3feec709 	.word	0x3feec709
 800b6a0:	dc3a03fd 	.word	0xdc3a03fd
 800b6a4:	3feec709 	.word	0x3feec709
 800b6a8:	145b01f5 	.word	0x145b01f5
 800b6ac:	be3e2fe0 	.word	0xbe3e2fe0
 800b6b0:	7ff00000 	.word	0x7ff00000
 800b6b4:	43400000 	.word	0x43400000
 800b6b8:	0003988e 	.word	0x0003988e
 800b6bc:	000bb679 	.word	0x000bb679
 800b6c0:	0800c458 	.word	0x0800c458
 800b6c4:	3ff00000 	.word	0x3ff00000
 800b6c8:	40080000 	.word	0x40080000
 800b6cc:	0800c438 	.word	0x0800c438
 800b6d0:	0800c448 	.word	0x0800c448
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6da:	e5d7      	b.n	800b28c <__ieee754_pow+0x354>
 800b6dc:	f04f 0a01 	mov.w	sl, #1
 800b6e0:	e65e      	b.n	800b3a0 <__ieee754_pow+0x468>
 800b6e2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800b9b4 <__ieee754_pow+0xa7c>)
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	4639      	mov	r1, r7
 800b6ec:	f7f4 fd9a 	bl	8000224 <__adddf3>
 800b6f0:	4642      	mov	r2, r8
 800b6f2:	e9cd 0100 	strd	r0, r1, [sp]
 800b6f6:	464b      	mov	r3, r9
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	4629      	mov	r1, r5
 800b6fc:	f7f4 fd90 	bl	8000220 <__aeabi_dsub>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b708:	f7f5 f9d2 	bl	8000ab0 <__aeabi_dcmpgt>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	f47f ae00 	bne.w	800b312 <__ieee754_pow+0x3da>
 800b712:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b716:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b71a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b71e:	fa43 fa0a 	asr.w	sl, r3, sl
 800b722:	44da      	add	sl, fp
 800b724:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b728:	489d      	ldr	r0, [pc, #628]	@ (800b9a0 <__ieee754_pow+0xa68>)
 800b72a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b72e:	4108      	asrs	r0, r1
 800b730:	ea00 030a 	and.w	r3, r0, sl
 800b734:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b738:	f1c1 0114 	rsb	r1, r1, #20
 800b73c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b740:	fa4a fa01 	asr.w	sl, sl, r1
 800b744:	f1bb 0f00 	cmp.w	fp, #0
 800b748:	4640      	mov	r0, r8
 800b74a:	4649      	mov	r1, r9
 800b74c:	f04f 0200 	mov.w	r2, #0
 800b750:	bfb8      	it	lt
 800b752:	f1ca 0a00 	rsblt	sl, sl, #0
 800b756:	f7f4 fd63 	bl	8000220 <__aeabi_dsub>
 800b75a:	4680      	mov	r8, r0
 800b75c:	4689      	mov	r9, r1
 800b75e:	4632      	mov	r2, r6
 800b760:	463b      	mov	r3, r7
 800b762:	4640      	mov	r0, r8
 800b764:	4649      	mov	r1, r9
 800b766:	f7f4 fd5d 	bl	8000224 <__adddf3>
 800b76a:	2400      	movs	r4, #0
 800b76c:	a37c      	add	r3, pc, #496	@ (adr r3, 800b960 <__ieee754_pow+0xa28>)
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	4620      	mov	r0, r4
 800b774:	460d      	mov	r5, r1
 800b776:	f7f4 ff0b 	bl	8000590 <__aeabi_dmul>
 800b77a:	4642      	mov	r2, r8
 800b77c:	e9cd 0100 	strd	r0, r1, [sp]
 800b780:	464b      	mov	r3, r9
 800b782:	4620      	mov	r0, r4
 800b784:	4629      	mov	r1, r5
 800b786:	f7f4 fd4b 	bl	8000220 <__aeabi_dsub>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	4630      	mov	r0, r6
 800b790:	4639      	mov	r1, r7
 800b792:	f7f4 fd45 	bl	8000220 <__aeabi_dsub>
 800b796:	a374      	add	r3, pc, #464	@ (adr r3, 800b968 <__ieee754_pow+0xa30>)
 800b798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79c:	f7f4 fef8 	bl	8000590 <__aeabi_dmul>
 800b7a0:	a373      	add	r3, pc, #460	@ (adr r3, 800b970 <__ieee754_pow+0xa38>)
 800b7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a6:	4680      	mov	r8, r0
 800b7a8:	4689      	mov	r9, r1
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	4629      	mov	r1, r5
 800b7ae:	f7f4 feef 	bl	8000590 <__aeabi_dmul>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	4640      	mov	r0, r8
 800b7b8:	4649      	mov	r1, r9
 800b7ba:	f7f4 fd33 	bl	8000224 <__adddf3>
 800b7be:	4604      	mov	r4, r0
 800b7c0:	460d      	mov	r5, r1
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7ca:	f7f4 fd2b 	bl	8000224 <__adddf3>
 800b7ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7d2:	4680      	mov	r8, r0
 800b7d4:	4689      	mov	r9, r1
 800b7d6:	f7f4 fd23 	bl	8000220 <__aeabi_dsub>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	460b      	mov	r3, r1
 800b7de:	4620      	mov	r0, r4
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	f7f4 fd1d 	bl	8000220 <__aeabi_dsub>
 800b7e6:	4642      	mov	r2, r8
 800b7e8:	4606      	mov	r6, r0
 800b7ea:	460f      	mov	r7, r1
 800b7ec:	464b      	mov	r3, r9
 800b7ee:	4640      	mov	r0, r8
 800b7f0:	4649      	mov	r1, r9
 800b7f2:	f7f4 fecd 	bl	8000590 <__aeabi_dmul>
 800b7f6:	a360      	add	r3, pc, #384	@ (adr r3, 800b978 <__ieee754_pow+0xa40>)
 800b7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	460d      	mov	r5, r1
 800b800:	f7f4 fec6 	bl	8000590 <__aeabi_dmul>
 800b804:	a35e      	add	r3, pc, #376	@ (adr r3, 800b980 <__ieee754_pow+0xa48>)
 800b806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80a:	f7f4 fd09 	bl	8000220 <__aeabi_dsub>
 800b80e:	4622      	mov	r2, r4
 800b810:	462b      	mov	r3, r5
 800b812:	f7f4 febd 	bl	8000590 <__aeabi_dmul>
 800b816:	a35c      	add	r3, pc, #368	@ (adr r3, 800b988 <__ieee754_pow+0xa50>)
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	f7f4 fd02 	bl	8000224 <__adddf3>
 800b820:	4622      	mov	r2, r4
 800b822:	462b      	mov	r3, r5
 800b824:	f7f4 feb4 	bl	8000590 <__aeabi_dmul>
 800b828:	a359      	add	r3, pc, #356	@ (adr r3, 800b990 <__ieee754_pow+0xa58>)
 800b82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82e:	f7f4 fcf7 	bl	8000220 <__aeabi_dsub>
 800b832:	4622      	mov	r2, r4
 800b834:	462b      	mov	r3, r5
 800b836:	f7f4 feab 	bl	8000590 <__aeabi_dmul>
 800b83a:	a357      	add	r3, pc, #348	@ (adr r3, 800b998 <__ieee754_pow+0xa60>)
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f7f4 fcf0 	bl	8000224 <__adddf3>
 800b844:	4622      	mov	r2, r4
 800b846:	462b      	mov	r3, r5
 800b848:	f7f4 fea2 	bl	8000590 <__aeabi_dmul>
 800b84c:	4602      	mov	r2, r0
 800b84e:	460b      	mov	r3, r1
 800b850:	4640      	mov	r0, r8
 800b852:	4649      	mov	r1, r9
 800b854:	f7f4 fce4 	bl	8000220 <__aeabi_dsub>
 800b858:	4604      	mov	r4, r0
 800b85a:	460d      	mov	r5, r1
 800b85c:	4602      	mov	r2, r0
 800b85e:	460b      	mov	r3, r1
 800b860:	4640      	mov	r0, r8
 800b862:	4649      	mov	r1, r9
 800b864:	f7f4 fe94 	bl	8000590 <__aeabi_dmul>
 800b868:	2200      	movs	r2, #0
 800b86a:	e9cd 0100 	strd	r0, r1, [sp]
 800b86e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b872:	4620      	mov	r0, r4
 800b874:	4629      	mov	r1, r5
 800b876:	f7f4 fcd3 	bl	8000220 <__aeabi_dsub>
 800b87a:	4602      	mov	r2, r0
 800b87c:	460b      	mov	r3, r1
 800b87e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b882:	f7f4 ffaf 	bl	80007e4 <__aeabi_ddiv>
 800b886:	4632      	mov	r2, r6
 800b888:	4604      	mov	r4, r0
 800b88a:	460d      	mov	r5, r1
 800b88c:	463b      	mov	r3, r7
 800b88e:	4640      	mov	r0, r8
 800b890:	4649      	mov	r1, r9
 800b892:	f7f4 fe7d 	bl	8000590 <__aeabi_dmul>
 800b896:	4632      	mov	r2, r6
 800b898:	463b      	mov	r3, r7
 800b89a:	f7f4 fcc3 	bl	8000224 <__adddf3>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	4629      	mov	r1, r5
 800b8a6:	f7f4 fcbb 	bl	8000220 <__aeabi_dsub>
 800b8aa:	4642      	mov	r2, r8
 800b8ac:	464b      	mov	r3, r9
 800b8ae:	f7f4 fcb7 	bl	8000220 <__aeabi_dsub>
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	493b      	ldr	r1, [pc, #236]	@ (800b9a4 <__ieee754_pow+0xa6c>)
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	f7f4 fcb1 	bl	8000220 <__aeabi_dsub>
 800b8be:	ec41 0b10 	vmov	d0, r0, r1
 800b8c2:	ee10 3a90 	vmov	r3, s1
 800b8c6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b8ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b8ce:	da30      	bge.n	800b932 <__ieee754_pow+0x9fa>
 800b8d0:	4650      	mov	r0, sl
 800b8d2:	f7ff fa69 	bl	800ada8 <scalbn>
 800b8d6:	ec51 0b10 	vmov	r0, r1, d0
 800b8da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8de:	f7ff bbd2 	b.w	800b086 <__ieee754_pow+0x14e>
 800b8e2:	4c31      	ldr	r4, [pc, #196]	@ (800b9a8 <__ieee754_pow+0xa70>)
 800b8e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b8e8:	42a3      	cmp	r3, r4
 800b8ea:	d91a      	bls.n	800b922 <__ieee754_pow+0x9ea>
 800b8ec:	4b2f      	ldr	r3, [pc, #188]	@ (800b9ac <__ieee754_pow+0xa74>)
 800b8ee:	440b      	add	r3, r1
 800b8f0:	4303      	orrs	r3, r0
 800b8f2:	d009      	beq.n	800b908 <__ieee754_pow+0x9d0>
 800b8f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	f7f5 f8ba 	bl	8000a74 <__aeabi_dcmplt>
 800b900:	3800      	subs	r0, #0
 800b902:	bf18      	it	ne
 800b904:	2001      	movne	r0, #1
 800b906:	e42b      	b.n	800b160 <__ieee754_pow+0x228>
 800b908:	4642      	mov	r2, r8
 800b90a:	464b      	mov	r3, r9
 800b90c:	f7f4 fc88 	bl	8000220 <__aeabi_dsub>
 800b910:	4632      	mov	r2, r6
 800b912:	463b      	mov	r3, r7
 800b914:	f7f5 f8c2 	bl	8000a9c <__aeabi_dcmpge>
 800b918:	2800      	cmp	r0, #0
 800b91a:	d1eb      	bne.n	800b8f4 <__ieee754_pow+0x9bc>
 800b91c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800b9bc <__ieee754_pow+0xa84>
 800b920:	e6f7      	b.n	800b712 <__ieee754_pow+0x7da>
 800b922:	469a      	mov	sl, r3
 800b924:	4b22      	ldr	r3, [pc, #136]	@ (800b9b0 <__ieee754_pow+0xa78>)
 800b926:	459a      	cmp	sl, r3
 800b928:	f63f aef3 	bhi.w	800b712 <__ieee754_pow+0x7da>
 800b92c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b930:	e715      	b.n	800b75e <__ieee754_pow+0x826>
 800b932:	ec51 0b10 	vmov	r0, r1, d0
 800b936:	4619      	mov	r1, r3
 800b938:	e7cf      	b.n	800b8da <__ieee754_pow+0x9a2>
 800b93a:	491a      	ldr	r1, [pc, #104]	@ (800b9a4 <__ieee754_pow+0xa6c>)
 800b93c:	2000      	movs	r0, #0
 800b93e:	f7ff bb18 	b.w	800af72 <__ieee754_pow+0x3a>
 800b942:	2000      	movs	r0, #0
 800b944:	2100      	movs	r1, #0
 800b946:	f7ff bb14 	b.w	800af72 <__ieee754_pow+0x3a>
 800b94a:	4630      	mov	r0, r6
 800b94c:	4639      	mov	r1, r7
 800b94e:	f7ff bb10 	b.w	800af72 <__ieee754_pow+0x3a>
 800b952:	460c      	mov	r4, r1
 800b954:	f7ff bb5e 	b.w	800b014 <__ieee754_pow+0xdc>
 800b958:	2400      	movs	r4, #0
 800b95a:	f7ff bb49 	b.w	800aff0 <__ieee754_pow+0xb8>
 800b95e:	bf00      	nop
 800b960:	00000000 	.word	0x00000000
 800b964:	3fe62e43 	.word	0x3fe62e43
 800b968:	fefa39ef 	.word	0xfefa39ef
 800b96c:	3fe62e42 	.word	0x3fe62e42
 800b970:	0ca86c39 	.word	0x0ca86c39
 800b974:	be205c61 	.word	0xbe205c61
 800b978:	72bea4d0 	.word	0x72bea4d0
 800b97c:	3e663769 	.word	0x3e663769
 800b980:	c5d26bf1 	.word	0xc5d26bf1
 800b984:	3ebbbd41 	.word	0x3ebbbd41
 800b988:	af25de2c 	.word	0xaf25de2c
 800b98c:	3f11566a 	.word	0x3f11566a
 800b990:	16bebd93 	.word	0x16bebd93
 800b994:	3f66c16c 	.word	0x3f66c16c
 800b998:	5555553e 	.word	0x5555553e
 800b99c:	3fc55555 	.word	0x3fc55555
 800b9a0:	fff00000 	.word	0xfff00000
 800b9a4:	3ff00000 	.word	0x3ff00000
 800b9a8:	4090cbff 	.word	0x4090cbff
 800b9ac:	3f6f3400 	.word	0x3f6f3400
 800b9b0:	3fe00000 	.word	0x3fe00000
 800b9b4:	652b82fe 	.word	0x652b82fe
 800b9b8:	3c971547 	.word	0x3c971547
 800b9bc:	4090cc00 	.word	0x4090cc00

0800b9c0 <fabs>:
 800b9c0:	ec51 0b10 	vmov	r0, r1, d0
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b9ca:	ec43 2b10 	vmov	d0, r2, r3
 800b9ce:	4770      	bx	lr

0800b9d0 <__ieee754_atan2f>:
 800b9d0:	ee10 2a90 	vmov	r2, s1
 800b9d4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800b9d8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b9dc:	b510      	push	{r4, lr}
 800b9de:	eef0 7a40 	vmov.f32	s15, s0
 800b9e2:	d806      	bhi.n	800b9f2 <__ieee754_atan2f+0x22>
 800b9e4:	ee10 0a10 	vmov	r0, s0
 800b9e8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800b9ec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b9f0:	d904      	bls.n	800b9fc <__ieee754_atan2f+0x2c>
 800b9f2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b9f6:	eeb0 0a67 	vmov.f32	s0, s15
 800b9fa:	bd10      	pop	{r4, pc}
 800b9fc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800ba00:	d103      	bne.n	800ba0a <__ieee754_atan2f+0x3a>
 800ba02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba06:	f000 b905 	b.w	800bc14 <atanf>
 800ba0a:	1794      	asrs	r4, r2, #30
 800ba0c:	f004 0402 	and.w	r4, r4, #2
 800ba10:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ba14:	b943      	cbnz	r3, 800ba28 <__ieee754_atan2f+0x58>
 800ba16:	2c02      	cmp	r4, #2
 800ba18:	d05e      	beq.n	800bad8 <__ieee754_atan2f+0x108>
 800ba1a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800baec <__ieee754_atan2f+0x11c>
 800ba1e:	2c03      	cmp	r4, #3
 800ba20:	bf08      	it	eq
 800ba22:	eef0 7a47 	vmoveq.f32	s15, s14
 800ba26:	e7e6      	b.n	800b9f6 <__ieee754_atan2f+0x26>
 800ba28:	b941      	cbnz	r1, 800ba3c <__ieee754_atan2f+0x6c>
 800ba2a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800baf0 <__ieee754_atan2f+0x120>
 800ba2e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800baf4 <__ieee754_atan2f+0x124>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	bfb8      	it	lt
 800ba36:	eef0 7a47 	vmovlt.f32	s15, s14
 800ba3a:	e7dc      	b.n	800b9f6 <__ieee754_atan2f+0x26>
 800ba3c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ba40:	d110      	bne.n	800ba64 <__ieee754_atan2f+0x94>
 800ba42:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ba46:	f104 34ff 	add.w	r4, r4, #4294967295
 800ba4a:	d107      	bne.n	800ba5c <__ieee754_atan2f+0x8c>
 800ba4c:	2c02      	cmp	r4, #2
 800ba4e:	d846      	bhi.n	800bade <__ieee754_atan2f+0x10e>
 800ba50:	4b29      	ldr	r3, [pc, #164]	@ (800baf8 <__ieee754_atan2f+0x128>)
 800ba52:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ba56:	edd3 7a00 	vldr	s15, [r3]
 800ba5a:	e7cc      	b.n	800b9f6 <__ieee754_atan2f+0x26>
 800ba5c:	2c02      	cmp	r4, #2
 800ba5e:	d841      	bhi.n	800bae4 <__ieee754_atan2f+0x114>
 800ba60:	4b26      	ldr	r3, [pc, #152]	@ (800bafc <__ieee754_atan2f+0x12c>)
 800ba62:	e7f6      	b.n	800ba52 <__ieee754_atan2f+0x82>
 800ba64:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ba68:	d0df      	beq.n	800ba2a <__ieee754_atan2f+0x5a>
 800ba6a:	1a5b      	subs	r3, r3, r1
 800ba6c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800ba70:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800ba74:	da1a      	bge.n	800baac <__ieee754_atan2f+0xdc>
 800ba76:	2a00      	cmp	r2, #0
 800ba78:	da01      	bge.n	800ba7e <__ieee754_atan2f+0xae>
 800ba7a:	313c      	adds	r1, #60	@ 0x3c
 800ba7c:	db19      	blt.n	800bab2 <__ieee754_atan2f+0xe2>
 800ba7e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800ba82:	f000 f99b 	bl	800bdbc <fabsf>
 800ba86:	f000 f8c5 	bl	800bc14 <atanf>
 800ba8a:	eef0 7a40 	vmov.f32	s15, s0
 800ba8e:	2c01      	cmp	r4, #1
 800ba90:	d012      	beq.n	800bab8 <__ieee754_atan2f+0xe8>
 800ba92:	2c02      	cmp	r4, #2
 800ba94:	d017      	beq.n	800bac6 <__ieee754_atan2f+0xf6>
 800ba96:	2c00      	cmp	r4, #0
 800ba98:	d0ad      	beq.n	800b9f6 <__ieee754_atan2f+0x26>
 800ba9a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800bb00 <__ieee754_atan2f+0x130>
 800ba9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800baa2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800bb04 <__ieee754_atan2f+0x134>
 800baa6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800baaa:	e7a4      	b.n	800b9f6 <__ieee754_atan2f+0x26>
 800baac:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800baf0 <__ieee754_atan2f+0x120>
 800bab0:	e7ed      	b.n	800ba8e <__ieee754_atan2f+0xbe>
 800bab2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bb08 <__ieee754_atan2f+0x138>
 800bab6:	e7ea      	b.n	800ba8e <__ieee754_atan2f+0xbe>
 800bab8:	ee17 3a90 	vmov	r3, s15
 800babc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bac0:	ee07 3a90 	vmov	s15, r3
 800bac4:	e797      	b.n	800b9f6 <__ieee754_atan2f+0x26>
 800bac6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800bb00 <__ieee754_atan2f+0x130>
 800baca:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bace:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800bb04 <__ieee754_atan2f+0x134>
 800bad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bad6:	e78e      	b.n	800b9f6 <__ieee754_atan2f+0x26>
 800bad8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800bb04 <__ieee754_atan2f+0x134>
 800badc:	e78b      	b.n	800b9f6 <__ieee754_atan2f+0x26>
 800bade:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800bb0c <__ieee754_atan2f+0x13c>
 800bae2:	e788      	b.n	800b9f6 <__ieee754_atan2f+0x26>
 800bae4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800bb08 <__ieee754_atan2f+0x138>
 800bae8:	e785      	b.n	800b9f6 <__ieee754_atan2f+0x26>
 800baea:	bf00      	nop
 800baec:	c0490fdb 	.word	0xc0490fdb
 800baf0:	3fc90fdb 	.word	0x3fc90fdb
 800baf4:	bfc90fdb 	.word	0xbfc90fdb
 800baf8:	0800c474 	.word	0x0800c474
 800bafc:	0800c468 	.word	0x0800c468
 800bb00:	33bbbd2e 	.word	0x33bbbd2e
 800bb04:	40490fdb 	.word	0x40490fdb
 800bb08:	00000000 	.word	0x00000000
 800bb0c:	3f490fdb 	.word	0x3f490fdb

0800bb10 <__ieee754_fmodf>:
 800bb10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb12:	ee10 5a90 	vmov	r5, s1
 800bb16:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 800bb1a:	1e43      	subs	r3, r0, #1
 800bb1c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bb20:	d206      	bcs.n	800bb30 <__ieee754_fmodf+0x20>
 800bb22:	ee10 3a10 	vmov	r3, s0
 800bb26:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800bb2a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800bb2e:	d304      	bcc.n	800bb3a <__ieee754_fmodf+0x2a>
 800bb30:	ee60 0a20 	vmul.f32	s1, s0, s1
 800bb34:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800bb38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb3a:	4286      	cmp	r6, r0
 800bb3c:	dbfc      	blt.n	800bb38 <__ieee754_fmodf+0x28>
 800bb3e:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 800bb42:	d105      	bne.n	800bb50 <__ieee754_fmodf+0x40>
 800bb44:	4b32      	ldr	r3, [pc, #200]	@ (800bc10 <__ieee754_fmodf+0x100>)
 800bb46:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800bb4a:	ed93 0a00 	vldr	s0, [r3]
 800bb4e:	e7f3      	b.n	800bb38 <__ieee754_fmodf+0x28>
 800bb50:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800bb54:	d140      	bne.n	800bbd8 <__ieee754_fmodf+0xc8>
 800bb56:	0232      	lsls	r2, r6, #8
 800bb58:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800bb5c:	2a00      	cmp	r2, #0
 800bb5e:	dc38      	bgt.n	800bbd2 <__ieee754_fmodf+0xc2>
 800bb60:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 800bb64:	d13e      	bne.n	800bbe4 <__ieee754_fmodf+0xd4>
 800bb66:	0207      	lsls	r7, r0, #8
 800bb68:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800bb6c:	2f00      	cmp	r7, #0
 800bb6e:	da36      	bge.n	800bbde <__ieee754_fmodf+0xce>
 800bb70:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 800bb74:	bfb9      	ittee	lt
 800bb76:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800bb7a:	1a5b      	sublt	r3, r3, r1
 800bb7c:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800bb80:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 800bb84:	bfb8      	it	lt
 800bb86:	fa06 f303 	lsllt.w	r3, r6, r3
 800bb8a:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800bb8e:	bfb5      	itete	lt
 800bb90:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 800bb94:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 800bb98:	1aad      	sublt	r5, r5, r2
 800bb9a:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800bb9e:	bfb8      	it	lt
 800bba0:	40a8      	lsllt	r0, r5
 800bba2:	1a89      	subs	r1, r1, r2
 800bba4:	1a1d      	subs	r5, r3, r0
 800bba6:	bb01      	cbnz	r1, 800bbea <__ieee754_fmodf+0xda>
 800bba8:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800bbac:	bf38      	it	cc
 800bbae:	462b      	movcc	r3, r5
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d0c7      	beq.n	800bb44 <__ieee754_fmodf+0x34>
 800bbb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bbb8:	db1f      	blt.n	800bbfa <__ieee754_fmodf+0xea>
 800bbba:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800bbbe:	db1f      	blt.n	800bc00 <__ieee754_fmodf+0xf0>
 800bbc0:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800bbc4:	327f      	adds	r2, #127	@ 0x7f
 800bbc6:	4323      	orrs	r3, r4
 800bbc8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800bbcc:	ee00 3a10 	vmov	s0, r3
 800bbd0:	e7b2      	b.n	800bb38 <__ieee754_fmodf+0x28>
 800bbd2:	3901      	subs	r1, #1
 800bbd4:	0052      	lsls	r2, r2, #1
 800bbd6:	e7c1      	b.n	800bb5c <__ieee754_fmodf+0x4c>
 800bbd8:	15f1      	asrs	r1, r6, #23
 800bbda:	397f      	subs	r1, #127	@ 0x7f
 800bbdc:	e7c0      	b.n	800bb60 <__ieee754_fmodf+0x50>
 800bbde:	3a01      	subs	r2, #1
 800bbe0:	007f      	lsls	r7, r7, #1
 800bbe2:	e7c3      	b.n	800bb6c <__ieee754_fmodf+0x5c>
 800bbe4:	15c2      	asrs	r2, r0, #23
 800bbe6:	3a7f      	subs	r2, #127	@ 0x7f
 800bbe8:	e7c2      	b.n	800bb70 <__ieee754_fmodf+0x60>
 800bbea:	2d00      	cmp	r5, #0
 800bbec:	da02      	bge.n	800bbf4 <__ieee754_fmodf+0xe4>
 800bbee:	005b      	lsls	r3, r3, #1
 800bbf0:	3901      	subs	r1, #1
 800bbf2:	e7d7      	b.n	800bba4 <__ieee754_fmodf+0x94>
 800bbf4:	d0a6      	beq.n	800bb44 <__ieee754_fmodf+0x34>
 800bbf6:	006b      	lsls	r3, r5, #1
 800bbf8:	e7fa      	b.n	800bbf0 <__ieee754_fmodf+0xe0>
 800bbfa:	005b      	lsls	r3, r3, #1
 800bbfc:	3a01      	subs	r2, #1
 800bbfe:	e7d9      	b.n	800bbb4 <__ieee754_fmodf+0xa4>
 800bc00:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800bc04:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800bc08:	3282      	adds	r2, #130	@ 0x82
 800bc0a:	4113      	asrs	r3, r2
 800bc0c:	4323      	orrs	r3, r4
 800bc0e:	e7dd      	b.n	800bbcc <__ieee754_fmodf+0xbc>
 800bc10:	0800c480 	.word	0x0800c480

0800bc14 <atanf>:
 800bc14:	b538      	push	{r3, r4, r5, lr}
 800bc16:	ee10 5a10 	vmov	r5, s0
 800bc1a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800bc1e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800bc22:	eef0 7a40 	vmov.f32	s15, s0
 800bc26:	d310      	bcc.n	800bc4a <atanf+0x36>
 800bc28:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800bc2c:	d904      	bls.n	800bc38 <atanf+0x24>
 800bc2e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800bc32:	eeb0 0a67 	vmov.f32	s0, s15
 800bc36:	bd38      	pop	{r3, r4, r5, pc}
 800bc38:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800bd70 <atanf+0x15c>
 800bc3c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800bd74 <atanf+0x160>
 800bc40:	2d00      	cmp	r5, #0
 800bc42:	bfc8      	it	gt
 800bc44:	eef0 7a47 	vmovgt.f32	s15, s14
 800bc48:	e7f3      	b.n	800bc32 <atanf+0x1e>
 800bc4a:	4b4b      	ldr	r3, [pc, #300]	@ (800bd78 <atanf+0x164>)
 800bc4c:	429c      	cmp	r4, r3
 800bc4e:	d810      	bhi.n	800bc72 <atanf+0x5e>
 800bc50:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800bc54:	d20a      	bcs.n	800bc6c <atanf+0x58>
 800bc56:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800bd7c <atanf+0x168>
 800bc5a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800bc5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc62:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800bc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc6a:	dce2      	bgt.n	800bc32 <atanf+0x1e>
 800bc6c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc70:	e013      	b.n	800bc9a <atanf+0x86>
 800bc72:	f000 f8a3 	bl	800bdbc <fabsf>
 800bc76:	4b42      	ldr	r3, [pc, #264]	@ (800bd80 <atanf+0x16c>)
 800bc78:	429c      	cmp	r4, r3
 800bc7a:	d84f      	bhi.n	800bd1c <atanf+0x108>
 800bc7c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800bc80:	429c      	cmp	r4, r3
 800bc82:	d841      	bhi.n	800bd08 <atanf+0xf4>
 800bc84:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800bc88:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800bc8c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800bc90:	2300      	movs	r3, #0
 800bc92:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bc96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bc9a:	1c5a      	adds	r2, r3, #1
 800bc9c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800bca0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800bd84 <atanf+0x170>
 800bca4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800bd88 <atanf+0x174>
 800bca8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800bd8c <atanf+0x178>
 800bcac:	ee66 6a06 	vmul.f32	s13, s12, s12
 800bcb0:	eee6 5a87 	vfma.f32	s11, s13, s14
 800bcb4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800bd90 <atanf+0x17c>
 800bcb8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bcbc:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800bd94 <atanf+0x180>
 800bcc0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800bcc4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800bd98 <atanf+0x184>
 800bcc8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bccc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800bd9c <atanf+0x188>
 800bcd0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800bcd4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800bda0 <atanf+0x18c>
 800bcd8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800bcdc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800bda4 <atanf+0x190>
 800bce0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800bce4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800bda8 <atanf+0x194>
 800bce8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800bcec:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800bdac <atanf+0x198>
 800bcf0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800bcf4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bcf8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800bcfc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bd00:	d121      	bne.n	800bd46 <atanf+0x132>
 800bd02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd06:	e794      	b.n	800bc32 <atanf+0x1e>
 800bd08:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bd0c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bd10:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bd14:	2301      	movs	r3, #1
 800bd16:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bd1a:	e7be      	b.n	800bc9a <atanf+0x86>
 800bd1c:	4b24      	ldr	r3, [pc, #144]	@ (800bdb0 <atanf+0x19c>)
 800bd1e:	429c      	cmp	r4, r3
 800bd20:	d80b      	bhi.n	800bd3a <atanf+0x126>
 800bd22:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800bd26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd2a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800bd2e:	2302      	movs	r3, #2
 800bd30:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bd34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd38:	e7af      	b.n	800bc9a <atanf+0x86>
 800bd3a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800bd3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bd42:	2303      	movs	r3, #3
 800bd44:	e7a9      	b.n	800bc9a <atanf+0x86>
 800bd46:	4a1b      	ldr	r2, [pc, #108]	@ (800bdb4 <atanf+0x1a0>)
 800bd48:	491b      	ldr	r1, [pc, #108]	@ (800bdb8 <atanf+0x1a4>)
 800bd4a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bd4e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800bd52:	edd3 6a00 	vldr	s13, [r3]
 800bd56:	ee37 7a66 	vsub.f32	s14, s14, s13
 800bd5a:	2d00      	cmp	r5, #0
 800bd5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bd60:	edd2 7a00 	vldr	s15, [r2]
 800bd64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd68:	bfb8      	it	lt
 800bd6a:	eef1 7a67 	vneglt.f32	s15, s15
 800bd6e:	e760      	b.n	800bc32 <atanf+0x1e>
 800bd70:	bfc90fdb 	.word	0xbfc90fdb
 800bd74:	3fc90fdb 	.word	0x3fc90fdb
 800bd78:	3edfffff 	.word	0x3edfffff
 800bd7c:	7149f2ca 	.word	0x7149f2ca
 800bd80:	3f97ffff 	.word	0x3f97ffff
 800bd84:	3c8569d7 	.word	0x3c8569d7
 800bd88:	3d4bda59 	.word	0x3d4bda59
 800bd8c:	bd6ef16b 	.word	0xbd6ef16b
 800bd90:	3d886b35 	.word	0x3d886b35
 800bd94:	3dba2e6e 	.word	0x3dba2e6e
 800bd98:	3e124925 	.word	0x3e124925
 800bd9c:	3eaaaaab 	.word	0x3eaaaaab
 800bda0:	bd15a221 	.word	0xbd15a221
 800bda4:	bd9d8795 	.word	0xbd9d8795
 800bda8:	bde38e38 	.word	0xbde38e38
 800bdac:	be4ccccd 	.word	0xbe4ccccd
 800bdb0:	401bffff 	.word	0x401bffff
 800bdb4:	0800c498 	.word	0x0800c498
 800bdb8:	0800c488 	.word	0x0800c488

0800bdbc <fabsf>:
 800bdbc:	ee10 3a10 	vmov	r3, s0
 800bdc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bdc4:	ee00 3a10 	vmov	s0, r3
 800bdc8:	4770      	bx	lr

0800bdca <with_errno>:
 800bdca:	b510      	push	{r4, lr}
 800bdcc:	ed2d 8b02 	vpush	{d8}
 800bdd0:	eeb0 8a40 	vmov.f32	s16, s0
 800bdd4:	eef0 8a60 	vmov.f32	s17, s1
 800bdd8:	4604      	mov	r4, r0
 800bdda:	f000 fa2d 	bl	800c238 <__errno>
 800bdde:	eeb0 0a48 	vmov.f32	s0, s16
 800bde2:	eef0 0a68 	vmov.f32	s1, s17
 800bde6:	ecbd 8b02 	vpop	{d8}
 800bdea:	6004      	str	r4, [r0, #0]
 800bdec:	bd10      	pop	{r4, pc}

0800bdee <xflow>:
 800bdee:	4603      	mov	r3, r0
 800bdf0:	b507      	push	{r0, r1, r2, lr}
 800bdf2:	ec51 0b10 	vmov	r0, r1, d0
 800bdf6:	b183      	cbz	r3, 800be1a <xflow+0x2c>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bdfe:	e9cd 2300 	strd	r2, r3, [sp]
 800be02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be06:	f7f4 fbc3 	bl	8000590 <__aeabi_dmul>
 800be0a:	ec41 0b10 	vmov	d0, r0, r1
 800be0e:	2022      	movs	r0, #34	@ 0x22
 800be10:	b003      	add	sp, #12
 800be12:	f85d eb04 	ldr.w	lr, [sp], #4
 800be16:	f7ff bfd8 	b.w	800bdca <with_errno>
 800be1a:	4602      	mov	r2, r0
 800be1c:	460b      	mov	r3, r1
 800be1e:	e7ee      	b.n	800bdfe <xflow+0x10>

0800be20 <__math_uflow>:
 800be20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800be28 <__math_uflow+0x8>
 800be24:	f7ff bfe3 	b.w	800bdee <xflow>
 800be28:	00000000 	.word	0x00000000
 800be2c:	10000000 	.word	0x10000000

0800be30 <__math_oflow>:
 800be30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800be38 <__math_oflow+0x8>
 800be34:	f7ff bfdb 	b.w	800bdee <xflow>
 800be38:	00000000 	.word	0x00000000
 800be3c:	70000000 	.word	0x70000000

0800be40 <__ieee754_sqrt>:
 800be40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be44:	4a68      	ldr	r2, [pc, #416]	@ (800bfe8 <__ieee754_sqrt+0x1a8>)
 800be46:	ec55 4b10 	vmov	r4, r5, d0
 800be4a:	43aa      	bics	r2, r5
 800be4c:	462b      	mov	r3, r5
 800be4e:	4621      	mov	r1, r4
 800be50:	d110      	bne.n	800be74 <__ieee754_sqrt+0x34>
 800be52:	4622      	mov	r2, r4
 800be54:	4620      	mov	r0, r4
 800be56:	4629      	mov	r1, r5
 800be58:	f7f4 fb9a 	bl	8000590 <__aeabi_dmul>
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	4620      	mov	r0, r4
 800be62:	4629      	mov	r1, r5
 800be64:	f7f4 f9de 	bl	8000224 <__adddf3>
 800be68:	4604      	mov	r4, r0
 800be6a:	460d      	mov	r5, r1
 800be6c:	ec45 4b10 	vmov	d0, r4, r5
 800be70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be74:	2d00      	cmp	r5, #0
 800be76:	dc0e      	bgt.n	800be96 <__ieee754_sqrt+0x56>
 800be78:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800be7c:	4322      	orrs	r2, r4
 800be7e:	d0f5      	beq.n	800be6c <__ieee754_sqrt+0x2c>
 800be80:	b19d      	cbz	r5, 800beaa <__ieee754_sqrt+0x6a>
 800be82:	4622      	mov	r2, r4
 800be84:	4620      	mov	r0, r4
 800be86:	4629      	mov	r1, r5
 800be88:	f7f4 f9ca 	bl	8000220 <__aeabi_dsub>
 800be8c:	4602      	mov	r2, r0
 800be8e:	460b      	mov	r3, r1
 800be90:	f7f4 fca8 	bl	80007e4 <__aeabi_ddiv>
 800be94:	e7e8      	b.n	800be68 <__ieee754_sqrt+0x28>
 800be96:	152a      	asrs	r2, r5, #20
 800be98:	d115      	bne.n	800bec6 <__ieee754_sqrt+0x86>
 800be9a:	2000      	movs	r0, #0
 800be9c:	e009      	b.n	800beb2 <__ieee754_sqrt+0x72>
 800be9e:	0acb      	lsrs	r3, r1, #11
 800bea0:	3a15      	subs	r2, #21
 800bea2:	0549      	lsls	r1, r1, #21
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d0fa      	beq.n	800be9e <__ieee754_sqrt+0x5e>
 800bea8:	e7f7      	b.n	800be9a <__ieee754_sqrt+0x5a>
 800beaa:	462a      	mov	r2, r5
 800beac:	e7fa      	b.n	800bea4 <__ieee754_sqrt+0x64>
 800beae:	005b      	lsls	r3, r3, #1
 800beb0:	3001      	adds	r0, #1
 800beb2:	02dc      	lsls	r4, r3, #11
 800beb4:	d5fb      	bpl.n	800beae <__ieee754_sqrt+0x6e>
 800beb6:	1e44      	subs	r4, r0, #1
 800beb8:	1b12      	subs	r2, r2, r4
 800beba:	f1c0 0420 	rsb	r4, r0, #32
 800bebe:	fa21 f404 	lsr.w	r4, r1, r4
 800bec2:	4323      	orrs	r3, r4
 800bec4:	4081      	lsls	r1, r0
 800bec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800beca:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800bece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bed2:	07d2      	lsls	r2, r2, #31
 800bed4:	bf5c      	itt	pl
 800bed6:	005b      	lslpl	r3, r3, #1
 800bed8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bedc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bee0:	bf58      	it	pl
 800bee2:	0049      	lslpl	r1, r1, #1
 800bee4:	2600      	movs	r6, #0
 800bee6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800beea:	106d      	asrs	r5, r5, #1
 800beec:	0049      	lsls	r1, r1, #1
 800beee:	2016      	movs	r0, #22
 800bef0:	4632      	mov	r2, r6
 800bef2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bef6:	1917      	adds	r7, r2, r4
 800bef8:	429f      	cmp	r7, r3
 800befa:	bfde      	ittt	le
 800befc:	193a      	addle	r2, r7, r4
 800befe:	1bdb      	suble	r3, r3, r7
 800bf00:	1936      	addle	r6, r6, r4
 800bf02:	0fcf      	lsrs	r7, r1, #31
 800bf04:	3801      	subs	r0, #1
 800bf06:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800bf0a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bf0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bf12:	d1f0      	bne.n	800bef6 <__ieee754_sqrt+0xb6>
 800bf14:	4604      	mov	r4, r0
 800bf16:	2720      	movs	r7, #32
 800bf18:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	eb00 0e0c 	add.w	lr, r0, ip
 800bf22:	db02      	blt.n	800bf2a <__ieee754_sqrt+0xea>
 800bf24:	d113      	bne.n	800bf4e <__ieee754_sqrt+0x10e>
 800bf26:	458e      	cmp	lr, r1
 800bf28:	d811      	bhi.n	800bf4e <__ieee754_sqrt+0x10e>
 800bf2a:	f1be 0f00 	cmp.w	lr, #0
 800bf2e:	eb0e 000c 	add.w	r0, lr, ip
 800bf32:	da42      	bge.n	800bfba <__ieee754_sqrt+0x17a>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	db40      	blt.n	800bfba <__ieee754_sqrt+0x17a>
 800bf38:	f102 0801 	add.w	r8, r2, #1
 800bf3c:	1a9b      	subs	r3, r3, r2
 800bf3e:	458e      	cmp	lr, r1
 800bf40:	bf88      	it	hi
 800bf42:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bf46:	eba1 010e 	sub.w	r1, r1, lr
 800bf4a:	4464      	add	r4, ip
 800bf4c:	4642      	mov	r2, r8
 800bf4e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bf52:	3f01      	subs	r7, #1
 800bf54:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bf58:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bf5c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bf60:	d1dc      	bne.n	800bf1c <__ieee754_sqrt+0xdc>
 800bf62:	4319      	orrs	r1, r3
 800bf64:	d01b      	beq.n	800bf9e <__ieee754_sqrt+0x15e>
 800bf66:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800bfec <__ieee754_sqrt+0x1ac>
 800bf6a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800bff0 <__ieee754_sqrt+0x1b0>
 800bf6e:	e9da 0100 	ldrd	r0, r1, [sl]
 800bf72:	e9db 2300 	ldrd	r2, r3, [fp]
 800bf76:	f7f4 f953 	bl	8000220 <__aeabi_dsub>
 800bf7a:	e9da 8900 	ldrd	r8, r9, [sl]
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	4640      	mov	r0, r8
 800bf84:	4649      	mov	r1, r9
 800bf86:	f7f4 fd7f 	bl	8000a88 <__aeabi_dcmple>
 800bf8a:	b140      	cbz	r0, 800bf9e <__ieee754_sqrt+0x15e>
 800bf8c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bf90:	e9da 0100 	ldrd	r0, r1, [sl]
 800bf94:	e9db 2300 	ldrd	r2, r3, [fp]
 800bf98:	d111      	bne.n	800bfbe <__ieee754_sqrt+0x17e>
 800bf9a:	3601      	adds	r6, #1
 800bf9c:	463c      	mov	r4, r7
 800bf9e:	1072      	asrs	r2, r6, #1
 800bfa0:	0863      	lsrs	r3, r4, #1
 800bfa2:	07f1      	lsls	r1, r6, #31
 800bfa4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800bfa8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800bfac:	bf48      	it	mi
 800bfae:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800bfb2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	e756      	b.n	800be68 <__ieee754_sqrt+0x28>
 800bfba:	4690      	mov	r8, r2
 800bfbc:	e7be      	b.n	800bf3c <__ieee754_sqrt+0xfc>
 800bfbe:	f7f4 f931 	bl	8000224 <__adddf3>
 800bfc2:	e9da 8900 	ldrd	r8, r9, [sl]
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	460b      	mov	r3, r1
 800bfca:	4640      	mov	r0, r8
 800bfcc:	4649      	mov	r1, r9
 800bfce:	f7f4 fd51 	bl	8000a74 <__aeabi_dcmplt>
 800bfd2:	b120      	cbz	r0, 800bfde <__ieee754_sqrt+0x19e>
 800bfd4:	1ca0      	adds	r0, r4, #2
 800bfd6:	bf08      	it	eq
 800bfd8:	3601      	addeq	r6, #1
 800bfda:	3402      	adds	r4, #2
 800bfdc:	e7df      	b.n	800bf9e <__ieee754_sqrt+0x15e>
 800bfde:	1c63      	adds	r3, r4, #1
 800bfe0:	f023 0401 	bic.w	r4, r3, #1
 800bfe4:	e7db      	b.n	800bf9e <__ieee754_sqrt+0x15e>
 800bfe6:	bf00      	nop
 800bfe8:	7ff00000 	.word	0x7ff00000
 800bfec:	200000d8 	.word	0x200000d8
 800bff0:	200000d0 	.word	0x200000d0

0800bff4 <abort>:
 800bff4:	b508      	push	{r3, lr}
 800bff6:	2006      	movs	r0, #6
 800bff8:	f000 f8f2 	bl	800c1e0 <raise>
 800bffc:	2001      	movs	r0, #1
 800bffe:	f7f8 ffad 	bl	8004f5c <_exit>
	...

0800c004 <malloc>:
 800c004:	4b02      	ldr	r3, [pc, #8]	@ (800c010 <malloc+0xc>)
 800c006:	4601      	mov	r1, r0
 800c008:	6818      	ldr	r0, [r3, #0]
 800c00a:	f000 b82d 	b.w	800c068 <_malloc_r>
 800c00e:	bf00      	nop
 800c010:	200000e0 	.word	0x200000e0

0800c014 <free>:
 800c014:	4b02      	ldr	r3, [pc, #8]	@ (800c020 <free+0xc>)
 800c016:	4601      	mov	r1, r0
 800c018:	6818      	ldr	r0, [r3, #0]
 800c01a:	f000 b947 	b.w	800c2ac <_free_r>
 800c01e:	bf00      	nop
 800c020:	200000e0 	.word	0x200000e0

0800c024 <sbrk_aligned>:
 800c024:	b570      	push	{r4, r5, r6, lr}
 800c026:	4e0f      	ldr	r6, [pc, #60]	@ (800c064 <sbrk_aligned+0x40>)
 800c028:	460c      	mov	r4, r1
 800c02a:	6831      	ldr	r1, [r6, #0]
 800c02c:	4605      	mov	r5, r0
 800c02e:	b911      	cbnz	r1, 800c036 <sbrk_aligned+0x12>
 800c030:	f000 f8f2 	bl	800c218 <_sbrk_r>
 800c034:	6030      	str	r0, [r6, #0]
 800c036:	4621      	mov	r1, r4
 800c038:	4628      	mov	r0, r5
 800c03a:	f000 f8ed 	bl	800c218 <_sbrk_r>
 800c03e:	1c43      	adds	r3, r0, #1
 800c040:	d103      	bne.n	800c04a <sbrk_aligned+0x26>
 800c042:	f04f 34ff 	mov.w	r4, #4294967295
 800c046:	4620      	mov	r0, r4
 800c048:	bd70      	pop	{r4, r5, r6, pc}
 800c04a:	1cc4      	adds	r4, r0, #3
 800c04c:	f024 0403 	bic.w	r4, r4, #3
 800c050:	42a0      	cmp	r0, r4
 800c052:	d0f8      	beq.n	800c046 <sbrk_aligned+0x22>
 800c054:	1a21      	subs	r1, r4, r0
 800c056:	4628      	mov	r0, r5
 800c058:	f000 f8de 	bl	800c218 <_sbrk_r>
 800c05c:	3001      	adds	r0, #1
 800c05e:	d1f2      	bne.n	800c046 <sbrk_aligned+0x22>
 800c060:	e7ef      	b.n	800c042 <sbrk_aligned+0x1e>
 800c062:	bf00      	nop
 800c064:	200007e4 	.word	0x200007e4

0800c068 <_malloc_r>:
 800c068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c06c:	1ccd      	adds	r5, r1, #3
 800c06e:	f025 0503 	bic.w	r5, r5, #3
 800c072:	3508      	adds	r5, #8
 800c074:	2d0c      	cmp	r5, #12
 800c076:	bf38      	it	cc
 800c078:	250c      	movcc	r5, #12
 800c07a:	2d00      	cmp	r5, #0
 800c07c:	4606      	mov	r6, r0
 800c07e:	db01      	blt.n	800c084 <_malloc_r+0x1c>
 800c080:	42a9      	cmp	r1, r5
 800c082:	d904      	bls.n	800c08e <_malloc_r+0x26>
 800c084:	230c      	movs	r3, #12
 800c086:	6033      	str	r3, [r6, #0]
 800c088:	2000      	movs	r0, #0
 800c08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c08e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c164 <_malloc_r+0xfc>
 800c092:	f000 f869 	bl	800c168 <__malloc_lock>
 800c096:	f8d8 3000 	ldr.w	r3, [r8]
 800c09a:	461c      	mov	r4, r3
 800c09c:	bb44      	cbnz	r4, 800c0f0 <_malloc_r+0x88>
 800c09e:	4629      	mov	r1, r5
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f7ff ffbf 	bl	800c024 <sbrk_aligned>
 800c0a6:	1c43      	adds	r3, r0, #1
 800c0a8:	4604      	mov	r4, r0
 800c0aa:	d158      	bne.n	800c15e <_malloc_r+0xf6>
 800c0ac:	f8d8 4000 	ldr.w	r4, [r8]
 800c0b0:	4627      	mov	r7, r4
 800c0b2:	2f00      	cmp	r7, #0
 800c0b4:	d143      	bne.n	800c13e <_malloc_r+0xd6>
 800c0b6:	2c00      	cmp	r4, #0
 800c0b8:	d04b      	beq.n	800c152 <_malloc_r+0xea>
 800c0ba:	6823      	ldr	r3, [r4, #0]
 800c0bc:	4639      	mov	r1, r7
 800c0be:	4630      	mov	r0, r6
 800c0c0:	eb04 0903 	add.w	r9, r4, r3
 800c0c4:	f000 f8a8 	bl	800c218 <_sbrk_r>
 800c0c8:	4581      	cmp	r9, r0
 800c0ca:	d142      	bne.n	800c152 <_malloc_r+0xea>
 800c0cc:	6821      	ldr	r1, [r4, #0]
 800c0ce:	1a6d      	subs	r5, r5, r1
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	f7ff ffa6 	bl	800c024 <sbrk_aligned>
 800c0d8:	3001      	adds	r0, #1
 800c0da:	d03a      	beq.n	800c152 <_malloc_r+0xea>
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	442b      	add	r3, r5
 800c0e0:	6023      	str	r3, [r4, #0]
 800c0e2:	f8d8 3000 	ldr.w	r3, [r8]
 800c0e6:	685a      	ldr	r2, [r3, #4]
 800c0e8:	bb62      	cbnz	r2, 800c144 <_malloc_r+0xdc>
 800c0ea:	f8c8 7000 	str.w	r7, [r8]
 800c0ee:	e00f      	b.n	800c110 <_malloc_r+0xa8>
 800c0f0:	6822      	ldr	r2, [r4, #0]
 800c0f2:	1b52      	subs	r2, r2, r5
 800c0f4:	d420      	bmi.n	800c138 <_malloc_r+0xd0>
 800c0f6:	2a0b      	cmp	r2, #11
 800c0f8:	d917      	bls.n	800c12a <_malloc_r+0xc2>
 800c0fa:	1961      	adds	r1, r4, r5
 800c0fc:	42a3      	cmp	r3, r4
 800c0fe:	6025      	str	r5, [r4, #0]
 800c100:	bf18      	it	ne
 800c102:	6059      	strne	r1, [r3, #4]
 800c104:	6863      	ldr	r3, [r4, #4]
 800c106:	bf08      	it	eq
 800c108:	f8c8 1000 	streq.w	r1, [r8]
 800c10c:	5162      	str	r2, [r4, r5]
 800c10e:	604b      	str	r3, [r1, #4]
 800c110:	4630      	mov	r0, r6
 800c112:	f000 f82f 	bl	800c174 <__malloc_unlock>
 800c116:	f104 000b 	add.w	r0, r4, #11
 800c11a:	1d23      	adds	r3, r4, #4
 800c11c:	f020 0007 	bic.w	r0, r0, #7
 800c120:	1ac2      	subs	r2, r0, r3
 800c122:	bf1c      	itt	ne
 800c124:	1a1b      	subne	r3, r3, r0
 800c126:	50a3      	strne	r3, [r4, r2]
 800c128:	e7af      	b.n	800c08a <_malloc_r+0x22>
 800c12a:	6862      	ldr	r2, [r4, #4]
 800c12c:	42a3      	cmp	r3, r4
 800c12e:	bf0c      	ite	eq
 800c130:	f8c8 2000 	streq.w	r2, [r8]
 800c134:	605a      	strne	r2, [r3, #4]
 800c136:	e7eb      	b.n	800c110 <_malloc_r+0xa8>
 800c138:	4623      	mov	r3, r4
 800c13a:	6864      	ldr	r4, [r4, #4]
 800c13c:	e7ae      	b.n	800c09c <_malloc_r+0x34>
 800c13e:	463c      	mov	r4, r7
 800c140:	687f      	ldr	r7, [r7, #4]
 800c142:	e7b6      	b.n	800c0b2 <_malloc_r+0x4a>
 800c144:	461a      	mov	r2, r3
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	42a3      	cmp	r3, r4
 800c14a:	d1fb      	bne.n	800c144 <_malloc_r+0xdc>
 800c14c:	2300      	movs	r3, #0
 800c14e:	6053      	str	r3, [r2, #4]
 800c150:	e7de      	b.n	800c110 <_malloc_r+0xa8>
 800c152:	230c      	movs	r3, #12
 800c154:	6033      	str	r3, [r6, #0]
 800c156:	4630      	mov	r0, r6
 800c158:	f000 f80c 	bl	800c174 <__malloc_unlock>
 800c15c:	e794      	b.n	800c088 <_malloc_r+0x20>
 800c15e:	6005      	str	r5, [r0, #0]
 800c160:	e7d6      	b.n	800c110 <_malloc_r+0xa8>
 800c162:	bf00      	nop
 800c164:	200007e8 	.word	0x200007e8

0800c168 <__malloc_lock>:
 800c168:	4801      	ldr	r0, [pc, #4]	@ (800c170 <__malloc_lock+0x8>)
 800c16a:	f000 b88f 	b.w	800c28c <__retarget_lock_acquire_recursive>
 800c16e:	bf00      	nop
 800c170:	20000928 	.word	0x20000928

0800c174 <__malloc_unlock>:
 800c174:	4801      	ldr	r0, [pc, #4]	@ (800c17c <__malloc_unlock+0x8>)
 800c176:	f000 b88a 	b.w	800c28e <__retarget_lock_release_recursive>
 800c17a:	bf00      	nop
 800c17c:	20000928 	.word	0x20000928

0800c180 <memset>:
 800c180:	4402      	add	r2, r0
 800c182:	4603      	mov	r3, r0
 800c184:	4293      	cmp	r3, r2
 800c186:	d100      	bne.n	800c18a <memset+0xa>
 800c188:	4770      	bx	lr
 800c18a:	f803 1b01 	strb.w	r1, [r3], #1
 800c18e:	e7f9      	b.n	800c184 <memset+0x4>

0800c190 <_raise_r>:
 800c190:	291f      	cmp	r1, #31
 800c192:	b538      	push	{r3, r4, r5, lr}
 800c194:	4605      	mov	r5, r0
 800c196:	460c      	mov	r4, r1
 800c198:	d904      	bls.n	800c1a4 <_raise_r+0x14>
 800c19a:	2316      	movs	r3, #22
 800c19c:	6003      	str	r3, [r0, #0]
 800c19e:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a2:	bd38      	pop	{r3, r4, r5, pc}
 800c1a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c1a6:	b112      	cbz	r2, 800c1ae <_raise_r+0x1e>
 800c1a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1ac:	b94b      	cbnz	r3, 800c1c2 <_raise_r+0x32>
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	f000 f830 	bl	800c214 <_getpid_r>
 800c1b4:	4622      	mov	r2, r4
 800c1b6:	4601      	mov	r1, r0
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1be:	f000 b817 	b.w	800c1f0 <_kill_r>
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d00a      	beq.n	800c1dc <_raise_r+0x4c>
 800c1c6:	1c59      	adds	r1, r3, #1
 800c1c8:	d103      	bne.n	800c1d2 <_raise_r+0x42>
 800c1ca:	2316      	movs	r3, #22
 800c1cc:	6003      	str	r3, [r0, #0]
 800c1ce:	2001      	movs	r0, #1
 800c1d0:	e7e7      	b.n	800c1a2 <_raise_r+0x12>
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c1d8:	4620      	mov	r0, r4
 800c1da:	4798      	blx	r3
 800c1dc:	2000      	movs	r0, #0
 800c1de:	e7e0      	b.n	800c1a2 <_raise_r+0x12>

0800c1e0 <raise>:
 800c1e0:	4b02      	ldr	r3, [pc, #8]	@ (800c1ec <raise+0xc>)
 800c1e2:	4601      	mov	r1, r0
 800c1e4:	6818      	ldr	r0, [r3, #0]
 800c1e6:	f7ff bfd3 	b.w	800c190 <_raise_r>
 800c1ea:	bf00      	nop
 800c1ec:	200000e0 	.word	0x200000e0

0800c1f0 <_kill_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	4d07      	ldr	r5, [pc, #28]	@ (800c210 <_kill_r+0x20>)
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	4608      	mov	r0, r1
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	602b      	str	r3, [r5, #0]
 800c1fe:	f7f8 fe9d 	bl	8004f3c <_kill>
 800c202:	1c43      	adds	r3, r0, #1
 800c204:	d102      	bne.n	800c20c <_kill_r+0x1c>
 800c206:	682b      	ldr	r3, [r5, #0]
 800c208:	b103      	cbz	r3, 800c20c <_kill_r+0x1c>
 800c20a:	6023      	str	r3, [r4, #0]
 800c20c:	bd38      	pop	{r3, r4, r5, pc}
 800c20e:	bf00      	nop
 800c210:	20000924 	.word	0x20000924

0800c214 <_getpid_r>:
 800c214:	f7f8 be8a 	b.w	8004f2c <_getpid>

0800c218 <_sbrk_r>:
 800c218:	b538      	push	{r3, r4, r5, lr}
 800c21a:	4d06      	ldr	r5, [pc, #24]	@ (800c234 <_sbrk_r+0x1c>)
 800c21c:	2300      	movs	r3, #0
 800c21e:	4604      	mov	r4, r0
 800c220:	4608      	mov	r0, r1
 800c222:	602b      	str	r3, [r5, #0]
 800c224:	f7f8 fea6 	bl	8004f74 <_sbrk>
 800c228:	1c43      	adds	r3, r0, #1
 800c22a:	d102      	bne.n	800c232 <_sbrk_r+0x1a>
 800c22c:	682b      	ldr	r3, [r5, #0]
 800c22e:	b103      	cbz	r3, 800c232 <_sbrk_r+0x1a>
 800c230:	6023      	str	r3, [r4, #0]
 800c232:	bd38      	pop	{r3, r4, r5, pc}
 800c234:	20000924 	.word	0x20000924

0800c238 <__errno>:
 800c238:	4b01      	ldr	r3, [pc, #4]	@ (800c240 <__errno+0x8>)
 800c23a:	6818      	ldr	r0, [r3, #0]
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop
 800c240:	200000e0 	.word	0x200000e0

0800c244 <__libc_init_array>:
 800c244:	b570      	push	{r4, r5, r6, lr}
 800c246:	4d0d      	ldr	r5, [pc, #52]	@ (800c27c <__libc_init_array+0x38>)
 800c248:	4c0d      	ldr	r4, [pc, #52]	@ (800c280 <__libc_init_array+0x3c>)
 800c24a:	1b64      	subs	r4, r4, r5
 800c24c:	10a4      	asrs	r4, r4, #2
 800c24e:	2600      	movs	r6, #0
 800c250:	42a6      	cmp	r6, r4
 800c252:	d109      	bne.n	800c268 <__libc_init_array+0x24>
 800c254:	4d0b      	ldr	r5, [pc, #44]	@ (800c284 <__libc_init_array+0x40>)
 800c256:	4c0c      	ldr	r4, [pc, #48]	@ (800c288 <__libc_init_array+0x44>)
 800c258:	f000 f872 	bl	800c340 <_init>
 800c25c:	1b64      	subs	r4, r4, r5
 800c25e:	10a4      	asrs	r4, r4, #2
 800c260:	2600      	movs	r6, #0
 800c262:	42a6      	cmp	r6, r4
 800c264:	d105      	bne.n	800c272 <__libc_init_array+0x2e>
 800c266:	bd70      	pop	{r4, r5, r6, pc}
 800c268:	f855 3b04 	ldr.w	r3, [r5], #4
 800c26c:	4798      	blx	r3
 800c26e:	3601      	adds	r6, #1
 800c270:	e7ee      	b.n	800c250 <__libc_init_array+0xc>
 800c272:	f855 3b04 	ldr.w	r3, [r5], #4
 800c276:	4798      	blx	r3
 800c278:	3601      	adds	r6, #1
 800c27a:	e7f2      	b.n	800c262 <__libc_init_array+0x1e>
 800c27c:	0800c4a8 	.word	0x0800c4a8
 800c280:	0800c4a8 	.word	0x0800c4a8
 800c284:	0800c4a8 	.word	0x0800c4a8
 800c288:	0800c4b4 	.word	0x0800c4b4

0800c28c <__retarget_lock_acquire_recursive>:
 800c28c:	4770      	bx	lr

0800c28e <__retarget_lock_release_recursive>:
 800c28e:	4770      	bx	lr

0800c290 <memcpy>:
 800c290:	440a      	add	r2, r1
 800c292:	4291      	cmp	r1, r2
 800c294:	f100 33ff 	add.w	r3, r0, #4294967295
 800c298:	d100      	bne.n	800c29c <memcpy+0xc>
 800c29a:	4770      	bx	lr
 800c29c:	b510      	push	{r4, lr}
 800c29e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2a6:	4291      	cmp	r1, r2
 800c2a8:	d1f9      	bne.n	800c29e <memcpy+0xe>
 800c2aa:	bd10      	pop	{r4, pc}

0800c2ac <_free_r>:
 800c2ac:	b538      	push	{r3, r4, r5, lr}
 800c2ae:	4605      	mov	r5, r0
 800c2b0:	2900      	cmp	r1, #0
 800c2b2:	d041      	beq.n	800c338 <_free_r+0x8c>
 800c2b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2b8:	1f0c      	subs	r4, r1, #4
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	bfb8      	it	lt
 800c2be:	18e4      	addlt	r4, r4, r3
 800c2c0:	f7ff ff52 	bl	800c168 <__malloc_lock>
 800c2c4:	4a1d      	ldr	r2, [pc, #116]	@ (800c33c <_free_r+0x90>)
 800c2c6:	6813      	ldr	r3, [r2, #0]
 800c2c8:	b933      	cbnz	r3, 800c2d8 <_free_r+0x2c>
 800c2ca:	6063      	str	r3, [r4, #4]
 800c2cc:	6014      	str	r4, [r2, #0]
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2d4:	f7ff bf4e 	b.w	800c174 <__malloc_unlock>
 800c2d8:	42a3      	cmp	r3, r4
 800c2da:	d908      	bls.n	800c2ee <_free_r+0x42>
 800c2dc:	6820      	ldr	r0, [r4, #0]
 800c2de:	1821      	adds	r1, r4, r0
 800c2e0:	428b      	cmp	r3, r1
 800c2e2:	bf01      	itttt	eq
 800c2e4:	6819      	ldreq	r1, [r3, #0]
 800c2e6:	685b      	ldreq	r3, [r3, #4]
 800c2e8:	1809      	addeq	r1, r1, r0
 800c2ea:	6021      	streq	r1, [r4, #0]
 800c2ec:	e7ed      	b.n	800c2ca <_free_r+0x1e>
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	b10b      	cbz	r3, 800c2f8 <_free_r+0x4c>
 800c2f4:	42a3      	cmp	r3, r4
 800c2f6:	d9fa      	bls.n	800c2ee <_free_r+0x42>
 800c2f8:	6811      	ldr	r1, [r2, #0]
 800c2fa:	1850      	adds	r0, r2, r1
 800c2fc:	42a0      	cmp	r0, r4
 800c2fe:	d10b      	bne.n	800c318 <_free_r+0x6c>
 800c300:	6820      	ldr	r0, [r4, #0]
 800c302:	4401      	add	r1, r0
 800c304:	1850      	adds	r0, r2, r1
 800c306:	4283      	cmp	r3, r0
 800c308:	6011      	str	r1, [r2, #0]
 800c30a:	d1e0      	bne.n	800c2ce <_free_r+0x22>
 800c30c:	6818      	ldr	r0, [r3, #0]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	6053      	str	r3, [r2, #4]
 800c312:	4408      	add	r0, r1
 800c314:	6010      	str	r0, [r2, #0]
 800c316:	e7da      	b.n	800c2ce <_free_r+0x22>
 800c318:	d902      	bls.n	800c320 <_free_r+0x74>
 800c31a:	230c      	movs	r3, #12
 800c31c:	602b      	str	r3, [r5, #0]
 800c31e:	e7d6      	b.n	800c2ce <_free_r+0x22>
 800c320:	6820      	ldr	r0, [r4, #0]
 800c322:	1821      	adds	r1, r4, r0
 800c324:	428b      	cmp	r3, r1
 800c326:	bf04      	itt	eq
 800c328:	6819      	ldreq	r1, [r3, #0]
 800c32a:	685b      	ldreq	r3, [r3, #4]
 800c32c:	6063      	str	r3, [r4, #4]
 800c32e:	bf04      	itt	eq
 800c330:	1809      	addeq	r1, r1, r0
 800c332:	6021      	streq	r1, [r4, #0]
 800c334:	6054      	str	r4, [r2, #4]
 800c336:	e7ca      	b.n	800c2ce <_free_r+0x22>
 800c338:	bd38      	pop	{r3, r4, r5, pc}
 800c33a:	bf00      	nop
 800c33c:	200007e8 	.word	0x200007e8

0800c340 <_init>:
 800c340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c342:	bf00      	nop
 800c344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c346:	bc08      	pop	{r3}
 800c348:	469e      	mov	lr, r3
 800c34a:	4770      	bx	lr

0800c34c <_fini>:
 800c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34e:	bf00      	nop
 800c350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c352:	bc08      	pop	{r3}
 800c354:	469e      	mov	lr, r3
 800c356:	4770      	bx	lr
