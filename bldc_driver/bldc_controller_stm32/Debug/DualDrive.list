
DualDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf18  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  0800c0f0  0800c0f0  0001c0f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c478  0800c478  00020518  2**0
                  CONTENTS
  4 .ARM          00000000  0800c478  0800c478  00020518  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c478  0800c478  00020518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c478  0800c478  0001c478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c47c  0800c47c  0001c47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000518  20000000  0800c480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  20000518  0800c998  00020518  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d34  0800c998  00020d34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020518  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc83  00000000  00000000  00020548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000311a  00000000  00000000  0003c1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  0003f2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018e8  00000000  00000000  00040d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b37  00000000  00000000  00042610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b33c  00000000  00000000  00065147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea37d  00000000  00000000  00080483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a800  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a78  00000000  00000000  0016a850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000518 	.word	0x20000518
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c0d8 	.word	0x0800c0d8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000051c 	.word	0x2000051c
 8000214:	0800c0d8 	.word	0x0800c0d8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_frsub>:
 8000be0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	e002      	b.n	8000bec <__addsf3>
 8000be6:	bf00      	nop

08000be8 <__aeabi_fsub>:
 8000be8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bec <__addsf3>:
 8000bec:	0042      	lsls	r2, r0, #1
 8000bee:	bf1f      	itttt	ne
 8000bf0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bf4:	ea92 0f03 	teqne	r2, r3
 8000bf8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bfc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c00:	d06a      	beq.n	8000cd8 <__addsf3+0xec>
 8000c02:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c0a:	bfc1      	itttt	gt
 8000c0c:	18d2      	addgt	r2, r2, r3
 8000c0e:	4041      	eorgt	r1, r0
 8000c10:	4048      	eorgt	r0, r1
 8000c12:	4041      	eorgt	r1, r0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	2b19      	cmp	r3, #25
 8000c1a:	bf88      	it	hi
 8000c1c:	4770      	bxhi	lr
 8000c1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4240      	negne	r0, r0
 8000c2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4249      	negne	r1, r1
 8000c3e:	ea92 0f03 	teq	r2, r3
 8000c42:	d03f      	beq.n	8000cc4 <__addsf3+0xd8>
 8000c44:	f1a2 0201 	sub.w	r2, r2, #1
 8000c48:	fa41 fc03 	asr.w	ip, r1, r3
 8000c4c:	eb10 000c 	adds.w	r0, r0, ip
 8000c50:	f1c3 0320 	rsb	r3, r3, #32
 8000c54:	fa01 f103 	lsl.w	r1, r1, r3
 8000c58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5c:	d502      	bpl.n	8000c64 <__addsf3+0x78>
 8000c5e:	4249      	negs	r1, r1
 8000c60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c68:	d313      	bcc.n	8000c92 <__addsf3+0xa6>
 8000c6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c6e:	d306      	bcc.n	8000c7e <__addsf3+0x92>
 8000c70:	0840      	lsrs	r0, r0, #1
 8000c72:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c76:	f102 0201 	add.w	r2, r2, #1
 8000c7a:	2afe      	cmp	r2, #254	; 0xfe
 8000c7c:	d251      	bcs.n	8000d22 <__addsf3+0x136>
 8000c7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c86:	bf08      	it	eq
 8000c88:	f020 0001 	biceq.w	r0, r0, #1
 8000c8c:	ea40 0003 	orr.w	r0, r0, r3
 8000c90:	4770      	bx	lr
 8000c92:	0049      	lsls	r1, r1, #1
 8000c94:	eb40 0000 	adc.w	r0, r0, r0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	bf28      	it	cs
 8000c9c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ca0:	d2ed      	bcs.n	8000c7e <__addsf3+0x92>
 8000ca2:	fab0 fc80 	clz	ip, r0
 8000ca6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000caa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cae:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cb2:	bfaa      	itet	ge
 8000cb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb8:	4252      	neglt	r2, r2
 8000cba:	4318      	orrge	r0, r3
 8000cbc:	bfbc      	itt	lt
 8000cbe:	40d0      	lsrlt	r0, r2
 8000cc0:	4318      	orrlt	r0, r3
 8000cc2:	4770      	bx	lr
 8000cc4:	f092 0f00 	teq	r2, #0
 8000cc8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ccc:	bf06      	itte	eq
 8000cce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cd2:	3201      	addeq	r2, #1
 8000cd4:	3b01      	subne	r3, #1
 8000cd6:	e7b5      	b.n	8000c44 <__addsf3+0x58>
 8000cd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce0:	bf18      	it	ne
 8000ce2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce6:	d021      	beq.n	8000d2c <__addsf3+0x140>
 8000ce8:	ea92 0f03 	teq	r2, r3
 8000cec:	d004      	beq.n	8000cf8 <__addsf3+0x10c>
 8000cee:	f092 0f00 	teq	r2, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	4608      	moveq	r0, r1
 8000cf6:	4770      	bx	lr
 8000cf8:	ea90 0f01 	teq	r0, r1
 8000cfc:	bf1c      	itt	ne
 8000cfe:	2000      	movne	r0, #0
 8000d00:	4770      	bxne	lr
 8000d02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d06:	d104      	bne.n	8000d12 <__addsf3+0x126>
 8000d08:	0040      	lsls	r0, r0, #1
 8000d0a:	bf28      	it	cs
 8000d0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d16:	bf3c      	itt	cc
 8000d18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d1c:	4770      	bxcc	lr
 8000d1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2a:	4770      	bx	lr
 8000d2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d30:	bf16      	itet	ne
 8000d32:	4608      	movne	r0, r1
 8000d34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d38:	4601      	movne	r1, r0
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	bf06      	itte	eq
 8000d3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d42:	ea90 0f01 	teqeq	r0, r1
 8000d46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_ui2f>:
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e004      	b.n	8000d5c <__aeabi_i2f+0x8>
 8000d52:	bf00      	nop

08000d54 <__aeabi_i2f>:
 8000d54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d58:	bf48      	it	mi
 8000d5a:	4240      	negmi	r0, r0
 8000d5c:	ea5f 0c00 	movs.w	ip, r0
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d68:	4601      	mov	r1, r0
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	e01c      	b.n	8000daa <__aeabi_l2f+0x2a>

08000d70 <__aeabi_ul2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e00a      	b.n	8000d94 <__aeabi_l2f+0x14>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_l2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d8c:	d502      	bpl.n	8000d94 <__aeabi_l2f+0x14>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	ea5f 0c01 	movs.w	ip, r1
 8000d98:	bf02      	ittt	eq
 8000d9a:	4684      	moveq	ip, r0
 8000d9c:	4601      	moveq	r1, r0
 8000d9e:	2000      	moveq	r0, #0
 8000da0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000da4:	bf08      	it	eq
 8000da6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000daa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dae:	fabc f28c 	clz	r2, ip
 8000db2:	3a08      	subs	r2, #8
 8000db4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db8:	db10      	blt.n	8000ddc <__aeabi_l2f+0x5c>
 8000dba:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dc4:	f1c2 0220 	rsb	r2, r2, #32
 8000dc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dcc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd0:	eb43 0002 	adc.w	r0, r3, r2
 8000dd4:	bf08      	it	eq
 8000dd6:	f020 0001 	biceq.w	r0, r0, #1
 8000dda:	4770      	bx	lr
 8000ddc:	f102 0220 	add.w	r2, r2, #32
 8000de0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dec:	fa21 f202 	lsr.w	r2, r1, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dfa:	4770      	bx	lr
 8000dfc:	0000      	movs	r0, r0
	...

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e06:	f004 f992 	bl	800512e <HAL_Init>

  /* USER CODE BEGIN Init */
	motor_nbr = 1;
 8000e0a:	4bb5      	ldr	r3, [pc, #724]	; (80010e0 <main+0x2e0>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e10:	f000 f9d8 	bl	80011c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e14:	f000 fd0a 	bl	800182c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e18:	f000 fcd6 	bl	80017c8 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000e1c:	f000 fb32 	bl	8001484 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8000e20:	f000 fbcc 	bl	80015bc <MX_SPI1_Init>
  MX_ADC1_Init();
 8000e24:	f000 fa1a 	bl	800125c <MX_ADC1_Init>

  MX_TIM1_Init();
 8000e28:	f000 fc06 	bl	8001638 <MX_TIM1_Init>
  MX_ADC2_Init();
 8000e2c:	f000 fa8e 	bl	800134c <MX_ADC2_Init>
  MX_CORDIC_Init();
 8000e30:	f000 faf2 	bl	8001418 <MX_CORDIC_Init>
  MX_CRC_Init();
 8000e34:	f000 fb04 	bl	8001440 <MX_CRC_Init>
  MX_FMAC_Init();
 8000e38:	f000 fbac 	bl	8001594 <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */
	//Delay SETUP
	DWT_Init();
 8000e3c:	f000 fd68 	bl	8001910 <DWT_Init>
	//SPI SETUP
	MagneticSensorSPI_init(AS5048A_SPI);
 8000e40:	4ba8      	ldr	r3, [pc, #672]	; (80010e4 <main+0x2e4>)
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	9200      	str	r2, [sp, #0]
 8000e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e48:	f001 f972 	bl	8002130 <MagneticSensorSPI_init>
	//POSITION SENSOR SETUP
	Sensor_init();
 8000e4c:	f001 fa92 	bl	8002374 <Sensor_init>
	//
	//Driver Setup
	state_enable = 1;
 8000e50:	4ba5      	ldr	r3, [pc, #660]	; (80010e8 <main+0x2e8>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]

	voltage_sensor_align = 2; // aligning voltage [V]
 8000e56:	4ba5      	ldr	r3, [pc, #660]	; (80010ec <main+0x2ec>)
 8000e58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e5c:	601a      	str	r2, [r3, #0]
	velocity_index_search = 2; // index search velocity [rad/s]
 8000e5e:	4ba4      	ldr	r3, [pc, #656]	; (80010f0 <main+0x2f0>)
 8000e60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e64:	601a      	str	r2, [r3, #0]

	voltage_power_supply = 24.0;
 8000e66:	4ba3      	ldr	r3, [pc, #652]	; (80010f4 <main+0x2f4>)
 8000e68:	4aa3      	ldr	r2, [pc, #652]	; (80010f8 <main+0x2f8>)
 8000e6a:	601a      	str	r2, [r3, #0]

	voltage_limit = 24.0;
 8000e6c:	4ba3      	ldr	r3, [pc, #652]	; (80010fc <main+0x2fc>)
 8000e6e:	4aa2      	ldr	r2, [pc, #648]	; (80010f8 <main+0x2f8>)
 8000e70:	601a      	str	r2, [r3, #0]
	current_limit = 24.0;
 8000e72:	4ba3      	ldr	r3, [pc, #652]	; (8001100 <main+0x300>)
 8000e74:	4aa0      	ldr	r2, [pc, #640]	; (80010f8 <main+0x2f8>)
 8000e76:	601a      	str	r2, [r3, #0]
	velocity_limit = 30.0;
 8000e78:	4ba2      	ldr	r3, [pc, #648]	; (8001104 <main+0x304>)
 8000e7a:	4aa3      	ldr	r2, [pc, #652]	; (8001108 <main+0x308>)
 8000e7c:	601a      	str	r2, [r3, #0]

	Command_setpoint = 0.0;
 8000e7e:	4ba3      	ldr	r3, [pc, #652]	; (800110c <main+0x30c>)
 8000e80:	f04f 0200 	mov.w	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
	offset_Command_setpoint = -2.0;
 8000e86:	4ba2      	ldr	r3, [pc, #648]	; (8001110 <main+0x310>)
 8000e88:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000e8c:	601a      	str	r2, [r3, #0]
	LPF_Command_setpoint.Tf = 0.03;
 8000e8e:	4ba1      	ldr	r3, [pc, #644]	; (8001114 <main+0x314>)
 8000e90:	4aa1      	ldr	r2, [pc, #644]	; (8001118 <main+0x318>)
 8000e92:	60da      	str	r2, [r3, #12]
	initGain();
 8000e94:	f002 f95e 	bl	8003154 <initGain>
	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);  // Enable
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	489f      	ldr	r0, [pc, #636]	; (800111c <main+0x31c>)
 8000e9e:	f006 ff87 	bl	8007db0 <HAL_GPIO_WritePin>

	//CURRENT SENSE SETUP
	HAL_ADC_Start_DMA(&hadc1, adcResultDMA_a, 1);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	499e      	ldr	r1, [pc, #632]	; (8001120 <main+0x320>)
 8000ea6:	489f      	ldr	r0, [pc, #636]	; (8001124 <main+0x324>)
 8000ea8:	f004 fdaa 	bl	8005a00 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, adcResultDMA_b, 1);
 8000eac:	2201      	movs	r2, #1
 8000eae:	499e      	ldr	r1, [pc, #632]	; (8001128 <main+0x328>)
 8000eb0:	489e      	ldr	r0, [pc, #632]	; (800112c <main+0x32c>)
 8000eb2:	f004 fda5 	bl	8005a00 <HAL_ADC_Start_DMA>
	initCurrentsense(CurrentSense_resistance, CurrentSense_gain);
 8000eb6:	4b9e      	ldr	r3, [pc, #632]	; (8001130 <main+0x330>)
 8000eb8:	edd3 7a00 	vldr	s15, [r3]
 8000ebc:	4b9d      	ldr	r3, [pc, #628]	; (8001134 <main+0x334>)
 8000ebe:	ed93 7a00 	vldr	s14, [r3]
 8000ec2:	eef0 0a47 	vmov.f32	s1, s14
 8000ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eca:	f000 fd51 	bl	8001970 <initCurrentsense>
	calibrateOffsets();
 8000ece:	f000 fd71 	bl	80019b4 <calibrateOffsets>
	//
	//PWM SETUP
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  //pinMode
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4898      	ldr	r0, [pc, #608]	; (8001138 <main+0x338>)
 8000ed6:	f008 fc49 	bl	800976c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	//pinMode
 8000eda:	2104      	movs	r1, #4
 8000edc:	4896      	ldr	r0, [pc, #600]	; (8001138 <main+0x338>)
 8000ede:	f008 fc45 	bl	800976c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	//pinMode
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	4894      	ldr	r0, [pc, #592]	; (8001138 <main+0x338>)
 8000ee6:	f008 fc41 	bl	800976c <HAL_TIM_PWM_Start>
//
//	//Control system configuration

//	//====Motor====

	zero_electric_angle_avg = motor_param[0][motor_nbr];
 8000eea:	4b7d      	ldr	r3, [pc, #500]	; (80010e0 <main+0x2e0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a93      	ldr	r2, [pc, #588]	; (800113c <main+0x33c>)
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a92      	ldr	r2, [pc, #584]	; (8001140 <main+0x340>)
 8000ef8:	6013      	str	r3, [r2, #0]
	initFOC(motor_param[0][motor_nbr], sensor_dir[motor_nbr]);
 8000efa:	4b79      	ldr	r3, [pc, #484]	; (80010e0 <main+0x2e0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a8f      	ldr	r2, [pc, #572]	; (800113c <main+0x33c>)
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	edd3 7a00 	vldr	s15, [r3]
 8000f08:	4b75      	ldr	r3, [pc, #468]	; (80010e0 <main+0x2e0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a8d      	ldr	r2, [pc, #564]	; (8001144 <main+0x344>)
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	4618      	mov	r0, r3
 8000f16:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1a:	f002 fb4f 	bl	80035bc <initFOC>
//	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
//	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
//	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
//	TxHeader.MessageMarker = 0;

	t1 = 0;
 8000f1e:	4b8a      	ldr	r3, [pc, #552]	; (8001148 <main+0x348>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
	t2 = micros();
 8000f24:	f000 fd0c 	bl	8001940 <micros>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a88      	ldr	r2, [pc, #544]	; (800114c <main+0x34c>)
 8000f2c:	6013      	str	r3, [r2, #0]
	_1a = 0;
 8000f2e:	4b88      	ldr	r3, [pc, #544]	; (8001150 <main+0x350>)
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
	_2a = 0;
 8000f36:	4b87      	ldr	r3, [pc, #540]	; (8001154 <main+0x354>)
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
	_3a = 0;
 8000f3e:	4b86      	ldr	r3, [pc, #536]	; (8001158 <main+0x358>)
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
		//												       //
		//                   Don't comment                     //
		//													   //
		//													   //
		//=====================================================//
		updateSensor();
 8000f46:	f001 fa43 	bl	80023d0 <updateSensor>
		adaptiveZero();
 8000f4a:	f001 fcaf 	bl	80028ac <adaptiveZero>

		debug_current_abc = getPhaseCurrents();
 8000f4e:	f000 fda7 	bl	8001aa0 <getPhaseCurrents>
 8000f52:	eeb0 6a40 	vmov.f32	s12, s0
 8000f56:	eef0 6a60 	vmov.f32	s13, s1
 8000f5a:	eeb0 7a41 	vmov.f32	s14, s2
 8000f5e:	eef0 7a61 	vmov.f32	s15, s3
 8000f62:	4b7e      	ldr	r3, [pc, #504]	; (800115c <main+0x35c>)
 8000f64:	ed83 6a00 	vstr	s12, [r3]
 8000f68:	edc3 6a01 	vstr	s13, [r3, #4]
 8000f6c:	ed83 7a02 	vstr	s14, [r3, #8]
 8000f70:	edc3 7a03 	vstr	s15, [r3, #12]
		debug_current_dq = current;
 8000f74:	4b7a      	ldr	r3, [pc, #488]	; (8001160 <main+0x360>)
 8000f76:	4a7b      	ldr	r2, [pc, #492]	; (8001164 <main+0x364>)
 8000f78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f7c:	e883 0003 	stmia.w	r3, {r0, r1}
		_velocity = shaftVelocity();
 8000f80:	f001 fc04 	bl	800278c <shaftVelocity>
 8000f84:	eef0 7a40 	vmov.f32	s15, s0
 8000f88:	4b77      	ldr	r3, [pc, #476]	; (8001168 <main+0x368>)
 8000f8a:	edc3 7a00 	vstr	s15, [r3]
		_angle = shaftAngle() - offset_Command_setpoint;
 8000f8e:	f001 fbc3 	bl	8002718 <shaftAngle>
 8000f92:	eeb0 7a40 	vmov.f32	s14, s0
 8000f96:	4b5e      	ldr	r3, [pc, #376]	; (8001110 <main+0x310>)
 8000f98:	edd3 7a00 	vldr	s15, [r3]
 8000f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa0:	4b72      	ldr	r3, [pc, #456]	; (800116c <main+0x36c>)
 8000fa2:	edc3 7a00 	vstr	s15, [r3]
		_acceleration = shaftAcceleration() ;
 8000fa6:	f001 fc23 	bl	80027f0 <shaftAcceleration>
 8000faa:	eef0 7a40 	vmov.f32	s15, s0
 8000fae:	4b70      	ldr	r3, [pc, #448]	; (8001170 <main+0x370>)
 8000fb0:	edc3 7a00 	vstr	s15, [r3]
		_setpoint = Command_setpoint ;
 8000fb4:	4b55      	ldr	r3, [pc, #340]	; (800110c <main+0x30c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a6e      	ldr	r2, [pc, #440]	; (8001174 <main+0x374>)
 8000fba:	6013      	str	r3, [r2, #0]
//		t1 = micros();

//		state_limit = HAL_GPIO_ReadPin(LIMIT_GPIO_Port, LIMIT_Pin); // limit = 1
//		if (Command_setpoint != prev_Command_setpoint)
//			state_enable = 1;
		if ((current_D.output_prev >= 23.9) || (current_D.output_prev < -23.9))
 8000fbc:	4b6e      	ldr	r3, [pc, #440]	; (8001178 <main+0x378>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fa8d 	bl	80004e0 <__aeabi_f2d>
 8000fc6:	a33e      	add	r3, pc, #248	; (adr r3, 80010c0 <main+0x2c0>)
 8000fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fcc:	f7ff fd66 	bl	8000a9c <__aeabi_dcmpge>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10c      	bne.n	8000ff0 <main+0x1f0>
 8000fd6:	4b68      	ldr	r3, [pc, #416]	; (8001178 <main+0x378>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fa80 	bl	80004e0 <__aeabi_f2d>
 8000fe0:	a339      	add	r3, pc, #228	; (adr r3, 80010c8 <main+0x2c8>)
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	f7ff fd45 	bl	8000a74 <__aeabi_dcmplt>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <main+0x1f6>
			state_enable = 0;
 8000ff0:	4b3d      	ldr	r3, [pc, #244]	; (80010e8 <main+0x2e8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
//		if (state_enable == 0)
//			Command_setpoint = shaftAngle();
		if (Command_setpoint != prev_Command_setpoint)
 8000ff6:	4b45      	ldr	r3, [pc, #276]	; (800110c <main+0x30c>)
 8000ff8:	ed93 7a00 	vldr	s14, [r3]
 8000ffc:	4b5f      	ldr	r3, [pc, #380]	; (800117c <main+0x37c>)
 8000ffe:	edd3 7a00 	vldr	s15, [r3]
 8001002:	eeb4 7a67 	vcmp.f32	s14, s15
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	d01d      	beq.n	8001048 <main+0x248>
			if((Command_setpoint <= 0.1)&&(Command_setpoint >= -0.1))
 800100c:	4b3f      	ldr	r3, [pc, #252]	; (800110c <main+0x30c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa65 	bl	80004e0 <__aeabi_f2d>
 8001016:	a32e      	add	r3, pc, #184	; (adr r3, 80010d0 <main+0x2d0>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff fd34 	bl	8000a88 <__aeabi_dcmple>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d010      	beq.n	8001048 <main+0x248>
 8001026:	4b39      	ldr	r3, [pc, #228]	; (800110c <main+0x30c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fa58 	bl	80004e0 <__aeabi_f2d>
 8001030:	a329      	add	r3, pc, #164	; (adr r3, 80010d8 <main+0x2d8>)
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	f7ff fd31 	bl	8000a9c <__aeabi_dcmpge>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <main+0x248>
				current_D.integral_prev = 0.0f ;
 8001040:	4b4d      	ldr	r3, [pc, #308]	; (8001178 <main+0x378>)
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, state_enable);
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <main+0x2e8>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	2101      	movs	r1, #1
 8001050:	4832      	ldr	r0, [pc, #200]	; (800111c <main+0x31c>)
 8001052:	f006 fead 	bl	8007db0 <HAL_GPIO_WritePin>
		prev_Command_setpoint = Command_setpoint;
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <main+0x30c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a48      	ldr	r2, [pc, #288]	; (800117c <main+0x37c>)
 800105c:	6013      	str	r3, [r2, #0]
		//                        SMC                          //
		//													   //
		//													   //
		//=====================================================//

		LPF_Command_setpoint.x = Command_setpoint + offset_Command_setpoint;
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <main+0x30c>)
 8001060:	ed93 7a00 	vldr	s14, [r3]
 8001064:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <main+0x310>)
 8001066:	edd3 7a00 	vldr	s15, [r3]
 800106a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106e:	4b29      	ldr	r3, [pc, #164]	; (8001114 <main+0x314>)
 8001070:	edc3 7a00 	vstr	s15, [r3]
		LPF_Command_setpoint = LowPassFilter(LPF_Command_setpoint);
 8001074:	4e27      	ldr	r6, [pc, #156]	; (8001114 <main+0x314>)
 8001076:	463c      	mov	r4, r7
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <main+0x314>)
 800107a:	466d      	mov	r5, sp
 800107c:	f103 020c 	add.w	r2, r3, #12
 8001080:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001084:	e885 0003 	stmia.w	r5, {r0, r1}
 8001088:	cb0e      	ldmia	r3, {r1, r2, r3}
 800108a:	4620      	mov	r0, r4
 800108c:	f002 fbbe 	bl	800380c <LowPassFilter>
 8001090:	4635      	mov	r5, r6
 8001092:	463c      	mov	r4, r7
 8001094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001098:	6823      	ldr	r3, [r4, #0]
 800109a:	602b      	str	r3, [r5, #0]
		LP_Command_setpoint = LPF_Command_setpoint.y_prev;  // filter values
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <main+0x314>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	4a37      	ldr	r2, [pc, #220]	; (8001180 <main+0x380>)
 80010a2:	6013      	str	r3, [r2, #0]
		if (state_control == 1)
 80010a4:	4b37      	ldr	r3, [pc, #220]	; (8001184 <main+0x384>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d16d      	bne.n	8001188 <main+0x388>
			move_angle(LP_Command_setpoint);
 80010ac:	4b34      	ldr	r3, [pc, #208]	; (8001180 <main+0x380>)
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	eeb0 0a67 	vmov.f32	s0, s15
 80010b6:	f003 fbbd 	bl	8004834 <move_angle>
 80010ba:	e07c      	b.n	80011b6 <main+0x3b6>
 80010bc:	f3af 8000 	nop.w
 80010c0:	66666666 	.word	0x66666666
 80010c4:	4037e666 	.word	0x4037e666
 80010c8:	66666666 	.word	0x66666666
 80010cc:	c037e666 	.word	0xc037e666
 80010d0:	9999999a 	.word	0x9999999a
 80010d4:	3fb99999 	.word	0x3fb99999
 80010d8:	9999999a 	.word	0x9999999a
 80010dc:	bfb99999 	.word	0xbfb99999
 80010e0:	20000d20 	.word	0x20000d20
 80010e4:	20000000 	.word	0x20000000
 80010e8:	20000d24 	.word	0x20000d24
 80010ec:	20000c3c 	.word	0x20000c3c
 80010f0:	20000c40 	.word	0x20000c40
 80010f4:	20000c44 	.word	0x20000c44
 80010f8:	41c00000 	.word	0x41c00000
 80010fc:	20000c60 	.word	0x20000c60
 8001100:	20000c64 	.word	0x20000c64
 8001104:	20000c68 	.word	0x20000c68
 8001108:	41f00000 	.word	0x41f00000
 800110c:	20000cf4 	.word	0x20000cf4
 8001110:	20000d00 	.word	0x20000d00
 8001114:	20000994 	.word	0x20000994
 8001118:	3cf5c28f 	.word	0x3cf5c28f
 800111c:	48000400 	.word	0x48000400
 8001120:	200008f0 	.word	0x200008f0
 8001124:	20000534 	.word	0x20000534
 8001128:	200008f4 	.word	0x200008f4
 800112c:	200005a0 	.word	0x200005a0
 8001130:	200008e8 	.word	0x200008e8
 8001134:	200008ec 	.word	0x200008ec
 8001138:	20000818 	.word	0x20000818
 800113c:	20000020 	.word	0x20000020
 8001140:	20000018 	.word	0x20000018
 8001144:	20000494 	.word	0x20000494
 8001148:	20000cec 	.word	0x20000cec
 800114c:	20000cf0 	.word	0x20000cf0
 8001150:	20000d14 	.word	0x20000d14
 8001154:	20000d18 	.word	0x20000d18
 8001158:	20000d1c 	.word	0x20000d1c
 800115c:	200008b0 	.word	0x200008b0
 8001160:	200008a8 	.word	0x200008a8
 8001164:	20000928 	.word	0x20000928
 8001168:	20000d08 	.word	0x20000d08
 800116c:	20000d0c 	.word	0x20000d0c
 8001170:	20000d04 	.word	0x20000d04
 8001174:	20000d10 	.word	0x20000d10
 8001178:	200009e8 	.word	0x200009e8
 800117c:	20000cfc 	.word	0x20000cfc
 8001180:	20000cf8 	.word	0x20000cf8
 8001184:	20000d28 	.word	0x20000d28
		else if (state_control == 0)
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <main+0x3bc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d107      	bne.n	80011a0 <main+0x3a0>
			SMC_angle(LP_Command_setpoint);
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <main+0x3c0>)
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	eeb0 0a67 	vmov.f32	s0, s15
 800119a:	f002 feb1 	bl	8003f00 <SMC_angle>
 800119e:	e00a      	b.n	80011b6 <main+0x3b6>
//			SMC_velocity(LP_Command_setpoint);
		else if (state_control == 2)
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <main+0x3bc>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d106      	bne.n	80011b6 <main+0x3b6>
			fusion_angle(LP_Command_setpoint);
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <main+0x3c0>)
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	eeb0 0a67 	vmov.f32	s0, s15
 80011b2:	f003 fa69 	bl	8004688 <fusion_angle>
		loopFOC();
 80011b6:	f002 fa39 	bl	800362c <loopFOC>
		updateSensor();
 80011ba:	e6c4      	b.n	8000f46 <main+0x146>
 80011bc:	20000d28 	.word	0x20000d28
 80011c0:	20000cf8 	.word	0x20000cf8

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b094      	sub	sp, #80	; 0x50
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0318 	add.w	r3, r7, #24
 80011ce:	2238      	movs	r2, #56	; 0x38
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f009 fde8 	bl	800ada8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f006 fdfa 	bl	8007de0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f6:	2340      	movs	r3, #64	; 0x40
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fa:	2302      	movs	r3, #2
 80011fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011fe:	2302      	movs	r3, #2
 8001200:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001202:	2304      	movs	r3, #4
 8001204:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001206:	2355      	movs	r3, #85	; 0x55
 8001208:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800120a:	2302      	movs	r3, #2
 800120c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800120e:	2302      	movs	r3, #2
 8001210:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001212:	2302      	movs	r3, #2
 8001214:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	4618      	mov	r0, r3
 800121c:	f006 fe94 	bl	8007f48 <HAL_RCC_OscConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001226:	f003 fc67 	bl	8004af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122a:	230f      	movs	r3, #15
 800122c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122e:	2303      	movs	r3, #3
 8001230:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2104      	movs	r1, #4
 8001242:	4618      	mov	r0, r3
 8001244:	f007 f998 	bl	8008578 <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800124e:	f003 fc53 	bl	8004af8 <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	3750      	adds	r7, #80	; 0x50
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2220      	movs	r2, #32
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f009 fd97 	bl	800ada8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800127a:	4b32      	ldr	r3, [pc, #200]	; (8001344 <MX_ADC1_Init+0xe8>)
 800127c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001280:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <MX_ADC1_Init+0xe8>)
 8001284:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001288:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800128a:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <MX_ADC1_Init+0xe8>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001290:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <MX_ADC1_Init+0xe8>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001296:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <MX_ADC1_Init+0xe8>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800129c:	4b29      	ldr	r3, [pc, #164]	; (8001344 <MX_ADC1_Init+0xe8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <MX_ADC1_Init+0xe8>)
 80012a4:	2204      	movs	r2, #4
 80012a6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012a8:	4b26      	ldr	r3, [pc, #152]	; (8001344 <MX_ADC1_Init+0xe8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012ae:	4b25      	ldr	r3, [pc, #148]	; (8001344 <MX_ADC1_Init+0xe8>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80012b4:	4b23      	ldr	r3, [pc, #140]	; (8001344 <MX_ADC1_Init+0xe8>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ba:	4b22      	ldr	r3, [pc, #136]	; (8001344 <MX_ADC1_Init+0xe8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <MX_ADC1_Init+0xe8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <MX_ADC1_Init+0xe8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <MX_ADC1_Init+0xe8>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_ADC1_Init+0xe8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <MX_ADC1_Init+0xe8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e4:	4817      	ldr	r0, [pc, #92]	; (8001344 <MX_ADC1_Init+0xe8>)
 80012e6:	f004 f9d7 	bl	8005698 <HAL_ADC_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80012f0:	f003 fc02 	bl	8004af8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fc:	4619      	mov	r1, r3
 80012fe:	4811      	ldr	r0, [pc, #68]	; (8001344 <MX_ADC1_Init+0xe8>)
 8001300:	f005 f9ae 	bl	8006660 <HAL_ADCEx_MultiModeConfigChannel>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800130a:	f003 fbf5 	bl	8004af8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_ADC1_Init+0xec>)
 8001310:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001312:	2306      	movs	r3, #6
 8001314:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001316:	2307      	movs	r3, #7
 8001318:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800131a:	237f      	movs	r3, #127	; 0x7f
 800131c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800131e:	2304      	movs	r3, #4
 8001320:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <MX_ADC1_Init+0xe8>)
 800132c:	f004 fc50 	bl	8005bd0 <HAL_ADC_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001336:	f003 fbdf 	bl	8004af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3730      	adds	r7, #48	; 0x30
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000534 	.word	0x20000534
 8001348:	04300002 	.word	0x04300002

0800134c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001352:	463b      	mov	r3, r7
 8001354:	2220      	movs	r2, #32
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f009 fd25 	bl	800ada8 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800135e:	4b2b      	ldr	r3, [pc, #172]	; (800140c <MX_ADC2_Init+0xc0>)
 8001360:	4a2b      	ldr	r2, [pc, #172]	; (8001410 <MX_ADC2_Init+0xc4>)
 8001362:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <MX_ADC2_Init+0xc0>)
 8001366:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800136a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800136c:	4b27      	ldr	r3, [pc, #156]	; (800140c <MX_ADC2_Init+0xc0>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <MX_ADC2_Init+0xc0>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <MX_ADC2_Init+0xc0>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800137e:	4b23      	ldr	r3, [pc, #140]	; (800140c <MX_ADC2_Init+0xc0>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001384:	4b21      	ldr	r3, [pc, #132]	; (800140c <MX_ADC2_Init+0xc0>)
 8001386:	2204      	movs	r2, #4
 8001388:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <MX_ADC2_Init+0xc0>)
 800138c:	2200      	movs	r2, #0
 800138e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <MX_ADC2_Init+0xc0>)
 8001392:	2201      	movs	r2, #1
 8001394:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001396:	4b1d      	ldr	r3, [pc, #116]	; (800140c <MX_ADC2_Init+0xc0>)
 8001398:	2201      	movs	r2, #1
 800139a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_ADC2_Init+0xc0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_ADC2_Init+0xc0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <MX_ADC2_Init+0xc0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <MX_ADC2_Init+0xc0>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_ADC2_Init+0xc0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_ADC2_Init+0xc0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013c6:	4811      	ldr	r0, [pc, #68]	; (800140c <MX_ADC2_Init+0xc0>)
 80013c8:	f004 f966 	bl	8005698 <HAL_ADC_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80013d2:	f003 fb91 	bl	8004af8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_ADC2_Init+0xc8>)
 80013d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013da:	2306      	movs	r3, #6
 80013dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80013de:	2307      	movs	r3, #7
 80013e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013e2:	237f      	movs	r3, #127	; 0x7f
 80013e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013e6:	2304      	movs	r3, #4
 80013e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <MX_ADC2_Init+0xc0>)
 80013f4:	f004 fbec 	bl	8005bd0 <HAL_ADC_ConfigChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80013fe:	f003 fb7b 	bl	8004af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200005a0 	.word	0x200005a0
 8001410:	50000100 	.word	0x50000100
 8001414:	08600004 	.word	0x08600004

08001418 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_CORDIC_Init+0x20>)
 800141e:	4a07      	ldr	r2, [pc, #28]	; (800143c <MX_CORDIC_Init+0x24>)
 8001420:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_CORDIC_Init+0x20>)
 8001424:	f005 fa04 	bl	8006830 <HAL_CORDIC_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800142e:	f003 fb63 	bl	8004af8 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200006cc 	.word	0x200006cc
 800143c:	40020c00 	.word	0x40020c00

08001440 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <MX_CRC_Init+0x3c>)
 8001446:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <MX_CRC_Init+0x40>)
 8001448:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_CRC_Init+0x3c>)
 800144c:	2200      	movs	r2, #0
 800144e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <MX_CRC_Init+0x3c>)
 8001452:	2200      	movs	r2, #0
 8001454:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_CRC_Init+0x3c>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <MX_CRC_Init+0x3c>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_CRC_Init+0x3c>)
 8001464:	2201      	movs	r2, #1
 8001466:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <MX_CRC_Init+0x3c>)
 800146a:	f005 fb23 	bl	8006ab4 <HAL_CRC_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001474:	f003 fb40 	bl	8004af8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200006f4 	.word	0x200006f4
 8001480:	40023000 	.word	0x40023000

08001484 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800148a:	4b3f      	ldr	r3, [pc, #252]	; (8001588 <MX_FDCAN1_Init+0x104>)
 800148c:	4a3f      	ldr	r2, [pc, #252]	; (800158c <MX_FDCAN1_Init+0x108>)
 800148e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001490:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <MX_FDCAN1_Init+0x104>)
 8001492:	2200      	movs	r2, #0
 8001494:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001496:	4b3c      	ldr	r3, [pc, #240]	; (8001588 <MX_FDCAN1_Init+0x104>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800149c:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <MX_FDCAN1_Init+0x104>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80014a2:	4b39      	ldr	r3, [pc, #228]	; (8001588 <MX_FDCAN1_Init+0x104>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80014a8:	4b37      	ldr	r3, [pc, #220]	; (8001588 <MX_FDCAN1_Init+0x104>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80014ae:	4b36      	ldr	r3, [pc, #216]	; (8001588 <MX_FDCAN1_Init+0x104>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = NomPS;
 80014b4:	4b34      	ldr	r3, [pc, #208]	; (8001588 <MX_FDCAN1_Init+0x104>)
 80014b6:	2202      	movs	r2, #2
 80014b8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 80014ba:	4b33      	ldr	r3, [pc, #204]	; (8001588 <MX_FDCAN1_Init+0x104>)
 80014bc:	220b      	movs	r2, #11
 80014be:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 73;
 80014c0:	4b31      	ldr	r3, [pc, #196]	; (8001588 <MX_FDCAN1_Init+0x104>)
 80014c2:	2249      	movs	r2, #73	; 0x49
 80014c4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 80014c6:	4b30      	ldr	r3, [pc, #192]	; (8001588 <MX_FDCAN1_Init+0x104>)
 80014c8:	220b      	movs	r2, #11
 80014ca:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = DataPS;
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <MX_FDCAN1_Init+0x104>)
 80014ce:	2205      	movs	r2, #5
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 15;
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <MX_FDCAN1_Init+0x104>)
 80014d4:	220f      	movs	r2, #15
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 18;
 80014d8:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <MX_FDCAN1_Init+0x104>)
 80014da:	2212      	movs	r2, #18
 80014dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 15;
 80014de:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <MX_FDCAN1_Init+0x104>)
 80014e0:	220f      	movs	r2, #15
 80014e2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 10;
 80014e4:	4b28      	ldr	r3, [pc, #160]	; (8001588 <MX_FDCAN1_Init+0x104>)
 80014e6:	220a      	movs	r2, #10
 80014e8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <MX_FDCAN1_Init+0x104>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <MX_FDCAN1_Init+0x104>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80014f6:	4824      	ldr	r0, [pc, #144]	; (8001588 <MX_FDCAN1_Init+0x104>)
 80014f8:	f005 fe38 	bl	800716c <HAL_FDCAN_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001502:	f003 faf9 	bl	8004af8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef CAN1Filter;

	CAN1Filter.IdType = FDCAN_STANDARD_ID;
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
	CAN1Filter.FilterIndex = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
	CAN1Filter.FilterType = FDCAN_FILTER_MASK;
 800150e:	2302      	movs	r3, #2
 8001510:	60bb      	str	r3, [r7, #8]
	CAN1Filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001512:	2301      	movs	r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
//	can_id[4] = { 16, 128, 32, 64 };
//	CAN1Filter.FilterID1 = can_id[motor_nbr];
//	CAN1Filter.FilterID2 = can_id[motor_nbr];

	if (motor_nbr == 0) {
 8001516:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <MX_FDCAN1_Init+0x10c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d103      	bne.n	8001526 <MX_FDCAN1_Init+0xa2>
		CAN1Filter.FilterID1 = 0x80;
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	613b      	str	r3, [r7, #16]
		CAN1Filter.FilterID2 = 0x80;
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	617b      	str	r3, [r7, #20]
//		datacheck = 1 ;
	}
	if (motor_nbr == 1) {
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_FDCAN1_Init+0x10c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d103      	bne.n	8001536 <MX_FDCAN1_Init+0xb2>
		CAN1Filter.FilterID1 = 0x16;
 800152e:	2316      	movs	r3, #22
 8001530:	613b      	str	r3, [r7, #16]
		CAN1Filter.FilterID2 = 0x16;
 8001532:	2316      	movs	r3, #22
 8001534:	617b      	str	r3, [r7, #20]
//		datacheck = 2 ;
	}
	if (motor_nbr == 2) {
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <MX_FDCAN1_Init+0x10c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d103      	bne.n	8001546 <MX_FDCAN1_Init+0xc2>
		CAN1Filter.FilterID1 = 0x24;
 800153e:	2324      	movs	r3, #36	; 0x24
 8001540:	613b      	str	r3, [r7, #16]
		CAN1Filter.FilterID2 = 0x24;
 8001542:	2324      	movs	r3, #36	; 0x24
 8001544:	617b      	str	r3, [r7, #20]
//		datacheck = 3 ;
	}
	if (motor_nbr == 3) {
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_FDCAN1_Init+0x10c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b03      	cmp	r3, #3
 800154c:	d103      	bne.n	8001556 <MX_FDCAN1_Init+0xd2>
		CAN1Filter.FilterID1 = 0x32;
 800154e:	2332      	movs	r3, #50	; 0x32
 8001550:	613b      	str	r3, [r7, #16]
		CAN1Filter.FilterID2 = 0x32;
 8001552:	2332      	movs	r3, #50	; 0x32
 8001554:	617b      	str	r3, [r7, #20]
//		datacheck = 4 ;
	}
	if (motor_nbr == 4) {
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_FDCAN1_Init+0x10c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b04      	cmp	r3, #4
 800155c:	d103      	bne.n	8001566 <MX_FDCAN1_Init+0xe2>
		CAN1Filter.FilterID1 = 0x69;
 800155e:	2369      	movs	r3, #105	; 0x69
 8001560:	613b      	str	r3, [r7, #16]
		CAN1Filter.FilterID2 = 0x69;
 8001562:	2369      	movs	r3, #105	; 0x69
 8001564:	617b      	str	r3, [r7, #20]
//		datacheck = 4 ;
	}
	HAL_FDCAN_ConfigFilter(&hfdcan1, &CAN1Filter);
 8001566:	463b      	mov	r3, r7
 8001568:	4619      	mov	r1, r3
 800156a:	4807      	ldr	r0, [pc, #28]	; (8001588 <MX_FDCAN1_Init+0x104>)
 800156c:	f005 ff58 	bl	8007420 <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT,
 8001570:	2300      	movs	r3, #0
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2300      	movs	r3, #0
 8001576:	2202      	movs	r2, #2
 8001578:	2102      	movs	r1, #2
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <MX_FDCAN1_Init+0x104>)
 800157c:	f005 ffaa 	bl	80074d4 <HAL_FDCAN_ConfigGlobalFilter>
	FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);

  /* USER CODE END FDCAN1_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000718 	.word	0x20000718
 800158c:	40006400 	.word	0x40006400
 8001590:	20000d20 	.word	0x20000d20

08001594 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_FMAC_Init+0x20>)
 800159a:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <MX_FMAC_Init+0x24>)
 800159c:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_FMAC_Init+0x20>)
 80015a0:	f006 f9d8 	bl	8007954 <HAL_FMAC_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80015aa:	f003 faa5 	bl	8004af8 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000077c 	.word	0x2000077c
 80015b8:	40021400 	.word	0x40021400

080015bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <MX_SPI1_Init+0x74>)
 80015c2:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <MX_SPI1_Init+0x78>)
 80015c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_SPI1_Init+0x74>)
 80015c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <MX_SPI1_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <MX_SPI1_Init+0x74>)
 80015d6:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80015da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_SPI1_Init+0x74>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <MX_SPI1_Init+0x74>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_SPI1_Init+0x74>)
 80015ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_SPI1_Init+0x74>)
 80015f2:	2228      	movs	r2, #40	; 0x28
 80015f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_SPI1_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_SPI1_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_SPI1_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_SPI1_Init+0x74>)
 800160a:	2207      	movs	r2, #7
 800160c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_SPI1_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_SPI1_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_SPI1_Init+0x74>)
 800161c:	f007 fbcc 	bl	8008db8 <HAL_SPI_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001626:	f003 fa67 	bl	8004af8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200007b4 	.word	0x200007b4
 8001634:	40013000 	.word	0x40013000

08001638 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b09c      	sub	sp, #112	; 0x70
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001658:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
 8001668:	615a      	str	r2, [r3, #20]
 800166a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2234      	movs	r2, #52	; 0x34
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f009 fb98 	bl	800ada8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001678:	4b51      	ldr	r3, [pc, #324]	; (80017c0 <MX_TIM1_Init+0x188>)
 800167a:	4a52      	ldr	r2, [pc, #328]	; (80017c4 <MX_TIM1_Init+0x18c>)
 800167c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800167e:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <MX_TIM1_Init+0x188>)
 8001680:	2200      	movs	r2, #0
 8001682:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001684:	4b4e      	ldr	r3, [pc, #312]	; (80017c0 <MX_TIM1_Init+0x188>)
 8001686:	2220      	movs	r2, #32
 8001688:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 800168a:	4b4d      	ldr	r3, [pc, #308]	; (80017c0 <MX_TIM1_Init+0x188>)
 800168c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001690:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001692:	4b4b      	ldr	r3, [pc, #300]	; (80017c0 <MX_TIM1_Init+0x188>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001698:	4b49      	ldr	r3, [pc, #292]	; (80017c0 <MX_TIM1_Init+0x188>)
 800169a:	2201      	movs	r2, #1
 800169c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800169e:	4b48      	ldr	r3, [pc, #288]	; (80017c0 <MX_TIM1_Init+0x188>)
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016a4:	4846      	ldr	r0, [pc, #280]	; (80017c0 <MX_TIM1_Init+0x188>)
 80016a6:	f007 ffa9 	bl	80095fc <HAL_TIM_Base_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80016b0:	f003 fa22 	bl	8004af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016be:	4619      	mov	r1, r3
 80016c0:	483f      	ldr	r0, [pc, #252]	; (80017c0 <MX_TIM1_Init+0x188>)
 80016c2:	f008 fbf3 	bl	8009eac <HAL_TIM_ConfigClockSource>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80016cc:	f003 fa14 	bl	8004af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016d0:	483b      	ldr	r0, [pc, #236]	; (80017c0 <MX_TIM1_Init+0x188>)
 80016d2:	f007 ffea 	bl	80096aa <HAL_TIM_PWM_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80016dc:	f003 fa0c 	bl	8004af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e0:	2300      	movs	r3, #0
 80016e2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016f0:	4619      	mov	r1, r3
 80016f2:	4833      	ldr	r0, [pc, #204]	; (80017c0 <MX_TIM1_Init+0x188>)
 80016f4:	f009 f99a 	bl	800aa2c <HAL_TIMEx_MasterConfigSynchronization>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80016fe:	f003 f9fb 	bl	8004af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001702:	2360      	movs	r3, #96	; 0x60
 8001704:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800170a:	2302      	movs	r3, #2
 800170c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800170e:	2300      	movs	r3, #0
 8001710:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001712:	2304      	movs	r3, #4
 8001714:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800171e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001722:	2200      	movs	r2, #0
 8001724:	4619      	mov	r1, r3
 8001726:	4826      	ldr	r0, [pc, #152]	; (80017c0 <MX_TIM1_Init+0x188>)
 8001728:	f008 faac 	bl	8009c84 <HAL_TIM_PWM_ConfigChannel>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001732:	f003 f9e1 	bl	8004af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001736:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800173a:	2204      	movs	r2, #4
 800173c:	4619      	mov	r1, r3
 800173e:	4820      	ldr	r0, [pc, #128]	; (80017c0 <MX_TIM1_Init+0x188>)
 8001740:	f008 faa0 	bl	8009c84 <HAL_TIM_PWM_ConfigChannel>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800174a:	f003 f9d5 	bl	8004af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800174e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001752:	2208      	movs	r2, #8
 8001754:	4619      	mov	r1, r3
 8001756:	481a      	ldr	r0, [pc, #104]	; (80017c0 <MX_TIM1_Init+0x188>)
 8001758:	f008 fa94 	bl	8009c84 <HAL_TIM_PWM_ConfigChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001762:	f003 f9c9 	bl	8004af8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800177a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800177e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800178c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001796:	2300      	movs	r3, #0
 8001798:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	4619      	mov	r1, r3
 80017a2:	4807      	ldr	r0, [pc, #28]	; (80017c0 <MX_TIM1_Init+0x188>)
 80017a4:	f009 f9d0 	bl	800ab48 <HAL_TIMEx_ConfigBreakDeadTime>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80017ae:	f003 f9a3 	bl	8004af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017b2:	4803      	ldr	r0, [pc, #12]	; (80017c0 <MX_TIM1_Init+0x188>)
 80017b4:	f003 fbf6 	bl	8004fa4 <HAL_TIM_MspPostInit>

}
 80017b8:	bf00      	nop
 80017ba:	3770      	adds	r7, #112	; 0x70
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000818 	.word	0x20000818
 80017c4:	40012c00 	.word	0x40012c00

080017c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80017ce:	4b16      	ldr	r3, [pc, #88]	; (8001828 <MX_DMA_Init+0x60>)
 80017d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d2:	4a15      	ldr	r2, [pc, #84]	; (8001828 <MX_DMA_Init+0x60>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	6493      	str	r3, [r2, #72]	; 0x48
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_DMA_Init+0x60>)
 80017dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <MX_DMA_Init+0x60>)
 80017e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ea:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <MX_DMA_Init+0x60>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6493      	str	r3, [r2, #72]	; 0x48
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <MX_DMA_Init+0x60>)
 80017f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	200b      	movs	r0, #11
 8001804:	f005 f921 	bl	8006a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001808:	200b      	movs	r0, #11
 800180a:	f005 f938 	bl	8006a7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	200c      	movs	r0, #12
 8001814:	f005 f919 	bl	8006a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001818:	200c      	movs	r0, #12
 800181a:	f005 f930 	bl	8006a7e <HAL_NVIC_EnableIRQ>

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000

0800182c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <MX_GPIO_Init+0xdc>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	4a30      	ldr	r2, [pc, #192]	; (8001908 <MX_GPIO_Init+0xdc>)
 8001848:	f043 0320 	orr.w	r3, r3, #32
 800184c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184e:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <MX_GPIO_Init+0xdc>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	f003 0320 	and.w	r3, r3, #32
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <MX_GPIO_Init+0xdc>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	4a2a      	ldr	r2, [pc, #168]	; (8001908 <MX_GPIO_Init+0xdc>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <MX_GPIO_Init+0xdc>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	4b25      	ldr	r3, [pc, #148]	; (8001908 <MX_GPIO_Init+0xdc>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	4a24      	ldr	r2, [pc, #144]	; (8001908 <MX_GPIO_Init+0xdc>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <MX_GPIO_Init+0xdc>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_CON_Pin|ENABLEA15_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	f248 0110 	movw	r1, #32784	; 0x8010
 8001890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001894:	f006 fa8c 	bl	8007db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	2101      	movs	r1, #1
 800189c:	481b      	ldr	r0, [pc, #108]	; (800190c <MX_GPIO_Init+0xe0>)
 800189e:	f006 fa87 	bl	8007db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_CON_Pin ENABLEA15_Pin */
  GPIO_InitStruct.Pin = CS_CON_Pin|ENABLEA15_Pin;
 80018a2:	f248 0310 	movw	r3, #32784	; 0x8010
 80018a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a8:	2301      	movs	r3, #1
 80018aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	4619      	mov	r1, r3
 80018ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018be:	f006 f8f5 	bl	8007aac <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80018c2:	2301      	movs	r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	4619      	mov	r1, r3
 80018d8:	480c      	ldr	r0, [pc, #48]	; (800190c <MX_GPIO_Init+0xe0>)
 80018da:	f006 f8e7 	bl	8007aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018de:	23c0      	movs	r3, #192	; 0xc0
 80018e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	4619      	mov	r1, r3
 80018f8:	4804      	ldr	r0, [pc, #16]	; (800190c <MX_GPIO_Init+0xe0>)
 80018fa:	f006 f8d7 	bl	8007aac <HAL_GPIO_Init>

}
 80018fe:	bf00      	nop
 8001900:	3720      	adds	r7, #32
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000
 800190c:	48000400 	.word	0x48000400

08001910 <DWT_Init>:

/* USER CODE BEGIN 4 */
__STATIC_INLINE void DWT_Init(void) {
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <DWT_Init+0x28>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <DWT_Init+0x28>)
 800191a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800191e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Data watchpoint trigger(DWT)
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <DWT_Init+0x2c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a05      	ldr	r2, [pc, #20]	; (800193c <DWT_Init+0x2c>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6013      	str	r3, [r2, #0]
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000edf0 	.word	0xe000edf0
 800193c:	e0001000 	.word	0xe0001000

08001940 <micros>:
	DWT->CYCCNT = 0U;
	while (DWT->CYCCNT < us_count_tic)
		;
}

__STATIC_INLINE uint32_t micros(void) {
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
	return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001944:	4b07      	ldr	r3, [pc, #28]	; (8001964 <micros+0x24>)
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <micros+0x28>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4907      	ldr	r1, [pc, #28]	; (800196c <micros+0x2c>)
 800194e:	fba1 1303 	umull	r1, r3, r1, r3
 8001952:	0c9b      	lsrs	r3, r3, #18
 8001954:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e0001000 	.word	0xe0001000
 8001968:	200004a8 	.word	0x200004a8
 800196c:	431bde83 	.word	0x431bde83

08001970 <initCurrentsense>:
//	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);

}

//Initialize Current Sensor
void initCurrentsense(float _shunt_resistor, float _gain) {
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	ed87 0a01 	vstr	s0, [r7, #4]
 800197a:	edc7 0a00 	vstr	s1, [r7]
	R_sense = _shunt_resistor;
 800197e:	4a09      	ldr	r2, [pc, #36]	; (80019a4 <initCurrentsense+0x34>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6013      	str	r3, [r2, #0]
	gain_a = _gain;
 8001984:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <initCurrentsense+0x38>)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	6013      	str	r3, [r2, #0]
	gain_b = _gain;
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <initCurrentsense+0x3c>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	6013      	str	r3, [r2, #0]
	gain_c = _gain;
 8001990:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <initCurrentsense+0x40>)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6013      	str	r3, [r2, #0]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	200008e4 	.word	0x200008e4
 80019a8:	200008d8 	.word	0x200008d8
 80019ac:	200008dc 	.word	0x200008dc
 80019b0:	200008e0 	.word	0x200008e0

080019b4 <calibrateOffsets>:

//Calibrate Offset current sensor
void calibrateOffsets() {
 80019b4:	b5b0      	push	{r4, r5, r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
	const int calibration_rounds = 1000;
 80019ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019be:	603b      	str	r3, [r7, #0]
// find adc offset = zero current voltage
	offset_ia = 0;
 80019c0:	4932      	ldr	r1, [pc, #200]	; (8001a8c <calibrateOffsets+0xd8>)
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	e9c1 2300 	strd	r2, r3, [r1]
	offset_ib = 0;
 80019ce:	4930      	ldr	r1, [pc, #192]	; (8001a90 <calibrateOffsets+0xdc>)
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	e9c1 2300 	strd	r2, r3, [r1]
	offset_ic = 0;
 80019dc:	492d      	ldr	r1, [pc, #180]	; (8001a94 <calibrateOffsets+0xe0>)
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	e9c1 2300 	strd	r2, r3, [r1]
// read the adc voltage 1000 times ( arbitrary number )
	for (int i = 0; i < calibration_rounds; i++) {
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	e023      	b.n	8001a38 <calibrateOffsets+0x84>
		offset_ia += adcResultDMA_a[0];
 80019f0:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <calibrateOffsets+0xe4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fd51 	bl	800049c <__aeabi_ui2d>
 80019fa:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <calibrateOffsets+0xd8>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	f7fe fc10 	bl	8000224 <__adddf3>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4920      	ldr	r1, [pc, #128]	; (8001a8c <calibrateOffsets+0xd8>)
 8001a0a:	e9c1 2300 	strd	r2, r3, [r1]
		offset_ib += adcResultDMA_b[0];
 8001a0e:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <calibrateOffsets+0xe8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd42 	bl	800049c <__aeabi_ui2d>
 8001a18:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <calibrateOffsets+0xdc>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f7fe fc01 	bl	8000224 <__adddf3>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	491a      	ldr	r1, [pc, #104]	; (8001a90 <calibrateOffsets+0xdc>)
 8001a28:	e9c1 2300 	strd	r2, r3, [r1]
//		offset_ic += adcResultDMA_c[0];
		HAL_Delay(1);
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f003 fbef 	bl	8005210 <HAL_Delay>
	for (int i = 0; i < calibration_rounds; i++) {
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3301      	adds	r3, #1
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbd7      	blt.n	80019f0 <calibrateOffsets+0x3c>
	}
// calculate the mean offsets
	offset_ia = offset_ia / calibration_rounds;
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <calibrateOffsets+0xd8>)
 8001a42:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a46:	6838      	ldr	r0, [r7, #0]
 8001a48:	f7fe fd38 	bl	80004bc <__aeabi_i2d>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4620      	mov	r0, r4
 8001a52:	4629      	mov	r1, r5
 8001a54:	f7fe fec6 	bl	80007e4 <__aeabi_ddiv>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	490b      	ldr	r1, [pc, #44]	; (8001a8c <calibrateOffsets+0xd8>)
 8001a5e:	e9c1 2300 	strd	r2, r3, [r1]
	offset_ib = offset_ib / calibration_rounds;
 8001a62:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <calibrateOffsets+0xdc>)
 8001a64:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a68:	6838      	ldr	r0, [r7, #0]
 8001a6a:	f7fe fd27 	bl	80004bc <__aeabi_i2d>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4620      	mov	r0, r4
 8001a74:	4629      	mov	r1, r5
 8001a76:	f7fe feb5 	bl	80007e4 <__aeabi_ddiv>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4904      	ldr	r1, [pc, #16]	; (8001a90 <calibrateOffsets+0xdc>)
 8001a80:	e9c1 2300 	strd	r2, r3, [r1]
//	offset_ic = offset_ic / calibration_rounds;
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a8c:	200008c0 	.word	0x200008c0
 8001a90:	200008c8 	.word	0x200008c8
 8001a94:	200008d0 	.word	0x200008d0
 8001a98:	200008f0 	.word	0x200008f0
 8001a9c:	200008f4 	.word	0x200008f4

08001aa0 <getPhaseCurrents>:

//// read all three phase currents (if possible 2 or 3)
struct PhaseCurrent_s getPhaseCurrents() {
 8001aa0:	b5b0      	push	{r4, r5, r7, lr}
 8001aa2:	b08c      	sub	sp, #48	; 0x30
 8001aa4:	af00      	add	r7, sp, #0
	struct PhaseCurrent_s current;
	current.a = ((offset_ia - adcResultDMA_a[0]) * (3.3 / 4096.0))
 8001aa6:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <getPhaseCurrents+0x120>)
 8001aa8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001aac:	4b45      	ldr	r3, [pc, #276]	; (8001bc4 <getPhaseCurrents+0x124>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fcf3 	bl	800049c <__aeabi_ui2d>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4620      	mov	r0, r4
 8001abc:	4629      	mov	r1, r5
 8001abe:	f7fe fbaf 	bl	8000220 <__aeabi_dsub>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	a33b      	add	r3, pc, #236	; (adr r3, 8001bb8 <getPhaseCurrents+0x118>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	f7fe fd5e 	bl	8000590 <__aeabi_dmul>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4614      	mov	r4, r2
 8001ada:	461d      	mov	r5, r3
			/ (R_sense * gain_a);
 8001adc:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <getPhaseCurrents+0x128>)
 8001ade:	ed93 7a00 	vldr	s14, [r3]
 8001ae2:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <getPhaseCurrents+0x12c>)
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aec:	ee17 0a90 	vmov	r0, s15
 8001af0:	f7fe fcf6 	bl	80004e0 <__aeabi_f2d>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4620      	mov	r0, r4
 8001afa:	4629      	mov	r1, r5
 8001afc:	f7fe fe72 	bl	80007e4 <__aeabi_ddiv>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	f7ff f81a 	bl	8000b40 <__aeabi_d2f>
 8001b0c:	4603      	mov	r3, r0
	current.a = ((offset_ia - adcResultDMA_a[0]) * (3.3 / 4096.0))
 8001b0e:	613b      	str	r3, [r7, #16]
	current.b = ((offset_ib - adcResultDMA_b[0]) * (3.3 / 4096.0))
 8001b10:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <getPhaseCurrents+0x130>)
 8001b12:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b16:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <getPhaseCurrents+0x134>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fcbe 	bl	800049c <__aeabi_ui2d>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4620      	mov	r0, r4
 8001b26:	4629      	mov	r1, r5
 8001b28:	f7fe fb7a 	bl	8000220 <__aeabi_dsub>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	a320      	add	r3, pc, #128	; (adr r3, 8001bb8 <getPhaseCurrents+0x118>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	f7fe fd29 	bl	8000590 <__aeabi_dmul>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4614      	mov	r4, r2
 8001b44:	461d      	mov	r5, r3
			/ (R_sense * gain_b);
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <getPhaseCurrents+0x128>)
 8001b48:	ed93 7a00 	vldr	s14, [r3]
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <getPhaseCurrents+0x138>)
 8001b4e:	edd3 7a00 	vldr	s15, [r3]
 8001b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b56:	ee17 0a90 	vmov	r0, s15
 8001b5a:	f7fe fcc1 	bl	80004e0 <__aeabi_f2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4620      	mov	r0, r4
 8001b64:	4629      	mov	r1, r5
 8001b66:	f7fe fe3d 	bl	80007e4 <__aeabi_ddiv>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	f7fe ffe5 	bl	8000b40 <__aeabi_d2f>
 8001b76:	4603      	mov	r3, r0
	current.b = ((offset_ib - adcResultDMA_b[0]) * (3.3 / 4096.0))
 8001b78:	617b      	str	r3, [r7, #20]
//			/ (R_sense * gain_c);
//    current.c = -current.a-current.b;
//    current.rms = _sqrtApprox(
//			powf(debug_current_abc.a, 2) + powf(debug_current_abc.b, 2)
//					+ powf(debug_current_abc.c, 2));
	return current;
 8001b7a:	f107 0420 	add.w	r4, r7, #32
 8001b7e:	f107 0310 	add.w	r3, r7, #16
 8001b82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b88:	6a38      	ldr	r0, [r7, #32]
 8001b8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b90:	ee06 0a10 	vmov	s12, r0
 8001b94:	ee06 1a90 	vmov	s13, r1
 8001b98:	ee07 2a10 	vmov	s14, r2
 8001b9c:	ee07 3a90 	vmov	s15, r3
}
 8001ba0:	eeb0 0a46 	vmov.f32	s0, s12
 8001ba4:	eef0 0a66 	vmov.f32	s1, s13
 8001ba8:	eeb0 1a47 	vmov.f32	s2, s14
 8001bac:	eef0 1a67 	vmov.f32	s3, s15
 8001bb0:	3730      	adds	r7, #48	; 0x30
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	66666666 	.word	0x66666666
 8001bbc:	3f4a6666 	.word	0x3f4a6666
 8001bc0:	200008c0 	.word	0x200008c0
 8001bc4:	200008f0 	.word	0x200008f0
 8001bc8:	200008e4 	.word	0x200008e4
 8001bcc:	200008d8 	.word	0x200008d8
 8001bd0:	200008c8 	.word	0x200008c8
 8001bd4:	200008f4 	.word	0x200008f4
 8001bd8:	200008dc 	.word	0x200008dc
 8001bdc:	00000000 	.word	0x00000000

08001be0 <getFOCCurrents>:

// function used with the foc algorihtm
//   calculating DQ currents from phase currents
//   - function calculating park and clarke transform of the phase currents
//   - using getPhaseCurrents internally
struct DQCurrent_s getFOCCurrents(float angle_el) {
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	b090      	sub	sp, #64	; 0x40
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	ed87 0a03 	vstr	s0, [r7, #12]
// read current phase currents
	struct PhaseCurrent_s current = getPhaseCurrents(); //Ia,Ib,Ic
 8001bea:	f7ff ff59 	bl	8001aa0 <getPhaseCurrents>
 8001bee:	eeb0 6a40 	vmov.f32	s12, s0
 8001bf2:	eef0 6a60 	vmov.f32	s13, s1
 8001bf6:	eeb0 7a41 	vmov.f32	s14, s2
 8001bfa:	eef0 7a61 	vmov.f32	s15, s3
 8001bfe:	ed87 6a06 	vstr	s12, [r7, #24]
 8001c02:	edc7 6a07 	vstr	s13, [r7, #28]
 8001c06:	ed87 7a08 	vstr	s14, [r7, #32]
 8001c0a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
// if only two measured currents
// phase a - c
//	i_alpha = current.a;
//	i_beta = (-(_1_SQRT3) * current.a) + (-(_2_SQRT3) * current.c);
// phase a - b
	i_alpha = current.a;
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	63fb      	str	r3, [r7, #60]	; 0x3c
	i_beta = (_1_SQRT3) * current.a + (_2_SQRT3) * current.b;
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fc63 	bl	80004e0 <__aeabi_f2d>
 8001c1a:	a331      	add	r3, pc, #196	; (adr r3, 8001ce0 <getFOCCurrents+0x100>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe fcb6 	bl	8000590 <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4614      	mov	r4, r2
 8001c2a:	461d      	mov	r5, r3
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc56 	bl	80004e0 <__aeabi_f2d>
 8001c34:	a32c      	add	r3, pc, #176	; (adr r3, 8001ce8 <getFOCCurrents+0x108>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fca9 	bl	8000590 <__aeabi_dmul>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4620      	mov	r0, r4
 8001c44:	4629      	mov	r1, r5
 8001c46:	f7fe faed 	bl	8000224 <__adddf3>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe ff75 	bl	8000b40 <__aeabi_d2f>
 8001c56:	4603      	mov	r3, r0
 8001c58:	63bb      	str	r3, [r7, #56]	; 0x38
//        i_alpha = a;
//        i_beta = _1_SQRT3 * a + _2_SQRT3 * b;
//    }

// calculate park transform
	float _ct = _cos(angle_el);
 8001c5a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c5e:	f000 f9a7 	bl	8001fb0 <_cos>
 8001c62:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float _st = _sin(angle_el);
 8001c66:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c6a:	f000 f841 	bl	8001cf0 <_sin>
 8001c6e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30

	struct DQCurrent_s return_current;
	return_current.d = i_alpha * _ct + i_beta * _st;
 8001c72:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001c76:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c7e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001c82:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8e:	edc7 7a04 	vstr	s15, [r7, #16]
	return_current.q = i_beta * _ct - i_alpha * _st;
 8001c92:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001c96:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c9e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001ca2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cae:	edc7 7a05 	vstr	s15, [r7, #20]
	return return_current;
 8001cb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb6:	f107 0210 	add.w	r2, r7, #16
 8001cba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cbe:	e883 0003 	stmia.w	r3, {r0, r1}
 8001cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc6:	ee07 2a10 	vmov	s14, r2
 8001cca:	ee07 3a90 	vmov	s15, r3
}
 8001cce:	eeb0 0a47 	vmov.f32	s0, s14
 8001cd2:	eef0 0a67 	vmov.f32	s1, s15
 8001cd6:	3740      	adds	r7, #64	; 0x40
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bdb0      	pop	{r4, r5, r7, pc}
 8001cdc:	f3af 8000 	nop.w
 8001ce0:	45904047 	.word	0x45904047
 8001ce4:	3fe279a7 	.word	0x3fe279a7
 8001ce8:	45904047 	.word	0x45904047
 8001cec:	3ff279a7 	.word	0x3ff279a7

08001cf0 <_sin>:
// function approximating the sine calculation by using fixed size array
// ~40us (float array)
// ~50us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _sin(float a) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (a < _PI_2) {
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7fe fbf0 	bl	80004e0 <__aeabi_f2d>
 8001d00:	a3a8      	add	r3, pc, #672	; (adr r3, 8001fa4 <_sin+0x2b4>)
 8001d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d06:	f7fe feb5 	bl	8000a74 <__aeabi_dcmplt>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d043      	beq.n	8001d98 <_sin+0xa8>
		//return sine_array[(int)(199.0*( a / (_PI/2.0)))];
		//return sine_array[(int)(126.6873* a)];           // float array optimized
		return 0.0001f * sine_array[_round(126.6873f * a)]; // int array optimized
 8001d10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d14:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8001f90 <_sin+0x2a0>
 8001d18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d24:	db16      	blt.n	8001d54 <_sin+0x64>
 8001d26:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d2a:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8001f90 <_sin+0x2a0>
 8001d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d32:	ee17 0a90 	vmov	r0, s15
 8001d36:	f7fe fbd3 	bl	80004e0 <__aeabi_f2d>
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	4b95      	ldr	r3, [pc, #596]	; (8001f94 <_sin+0x2a4>)
 8001d40:	f7fe fa70 	bl	8000224 <__adddf3>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f7fe fed0 	bl	8000af0 <__aeabi_d2iz>
 8001d50:	4603      	mov	r3, r0
 8001d52:	e015      	b.n	8001d80 <_sin+0x90>
 8001d54:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d58:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8001f90 <_sin+0x2a0>
 8001d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d60:	ee17 0a90 	vmov	r0, s15
 8001d64:	f7fe fbbc 	bl	80004e0 <__aeabi_f2d>
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	4b89      	ldr	r3, [pc, #548]	; (8001f94 <_sin+0x2a4>)
 8001d6e:	f7fe fa57 	bl	8000220 <__aeabi_dsub>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f7fe feb9 	bl	8000af0 <__aeabi_d2iz>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4a85      	ldr	r2, [pc, #532]	; (8001f98 <_sin+0x2a8>)
 8001d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d86:	ee07 3a90 	vmov	s15, r3
 8001d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8e:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8001f9c <_sin+0x2ac>
 8001d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d96:	e0ec      	b.n	8001f72 <_sin+0x282>
	} else if (a < _PI) {
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7fe fba1 	bl	80004e0 <__aeabi_f2d>
 8001d9e:	a378      	add	r3, pc, #480	; (adr r3, 8001f80 <_sin+0x290>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fe66 	bl	8000a74 <__aeabi_dcmplt>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d047      	beq.n	8001e3e <_sin+0x14e>
		// return sine_array[(int)(199.0*(1.0 - (a-_PI/2.0) / (_PI/2.0)))];
		//return sine_array[398 - (int)(126.6873*a)];          // float array optimized
		return 0.0001f * sine_array[398 - _round(126.6873f * a)]; // int array optimized
 8001dae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001db2:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8001f90 <_sin+0x2a0>
 8001db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc2:	db18      	blt.n	8001df6 <_sin+0x106>
 8001dc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dc8:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001f90 <_sin+0x2a0>
 8001dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd0:	ee17 0a90 	vmov	r0, s15
 8001dd4:	f7fe fb84 	bl	80004e0 <__aeabi_f2d>
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	4b6d      	ldr	r3, [pc, #436]	; (8001f94 <_sin+0x2a4>)
 8001dde:	f7fe fa21 	bl	8000224 <__adddf3>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7fe fe81 	bl	8000af0 <__aeabi_d2iz>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8001df4:	e017      	b.n	8001e26 <_sin+0x136>
 8001df6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dfa:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001f90 <_sin+0x2a0>
 8001dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e02:	ee17 0a90 	vmov	r0, s15
 8001e06:	f7fe fb6b 	bl	80004e0 <__aeabi_f2d>
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b61      	ldr	r3, [pc, #388]	; (8001f94 <_sin+0x2a4>)
 8001e10:	f7fe fa06 	bl	8000220 <__aeabi_dsub>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f7fe fe68 	bl	8000af0 <__aeabi_d2iz>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8001e26:	4a5c      	ldr	r2, [pc, #368]	; (8001f98 <_sin+0x2a8>)
 8001e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e34:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001f9c <_sin+0x2ac>
 8001e38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e3c:	e099      	b.n	8001f72 <_sin+0x282>
	} else if (a < _3PI_2) {
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7fe fb4e 	bl	80004e0 <__aeabi_f2d>
 8001e44:	a350      	add	r3, pc, #320	; (adr r3, 8001f88 <_sin+0x298>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	f7fe fe13 	bl	8000a74 <__aeabi_dcmplt>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d047      	beq.n	8001ee4 <_sin+0x1f4>
		// return -sine_array[(int)(199.0*((a - _PI) / (_PI/2.0)))];
		//return -sine_array[-398 + (int)(126.6873*a)];           // float array optimized
		return -0.0001f * sine_array[-398 + _round(126.6873f * a)]; // int array optimized
 8001e54:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e58:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001f90 <_sin+0x2a0>
 8001e5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e68:	db18      	blt.n	8001e9c <_sin+0x1ac>
 8001e6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001f90 <_sin+0x2a0>
 8001e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e76:	ee17 0a90 	vmov	r0, s15
 8001e7a:	f7fe fb31 	bl	80004e0 <__aeabi_f2d>
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	4b44      	ldr	r3, [pc, #272]	; (8001f94 <_sin+0x2a4>)
 8001e84:	f7fe f9ce 	bl	8000224 <__adddf3>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7fe fe2e 	bl	8000af0 <__aeabi_d2iz>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 8001e9a:	e017      	b.n	8001ecc <_sin+0x1dc>
 8001e9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001f90 <_sin+0x2a0>
 8001ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea8:	ee17 0a90 	vmov	r0, s15
 8001eac:	f7fe fb18 	bl	80004e0 <__aeabi_f2d>
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <_sin+0x2a4>)
 8001eb6:	f7fe f9b3 	bl	8000220 <__aeabi_dsub>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f7fe fe15 	bl	8000af0 <__aeabi_d2iz>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 8001ecc:	4a32      	ldr	r2, [pc, #200]	; (8001f98 <_sin+0x2a8>)
 8001ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eda:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001fa0 <_sin+0x2b0>
 8001ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee2:	e046      	b.n	8001f72 <_sin+0x282>
	} else {
		// return -sine_array[(int)(199.0*(1.0 - (a - 3*_PI/2) / (_PI/2.0)))];
		//return -sine_array[796 - (int)(126.6873*a)];           // float array optimized
		return -0.0001f * sine_array[796 - _round(126.6873f * a)]; // int array optimized
 8001ee4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ee8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001f90 <_sin+0x2a0>
 8001eec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef8:	db18      	blt.n	8001f2c <_sin+0x23c>
 8001efa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001efe:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001f90 <_sin+0x2a0>
 8001f02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f06:	ee17 0a90 	vmov	r0, s15
 8001f0a:	f7fe fae9 	bl	80004e0 <__aeabi_f2d>
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <_sin+0x2a4>)
 8001f14:	f7fe f986 	bl	8000224 <__adddf3>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f7fe fde6 	bl	8000af0 <__aeabi_d2iz>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8001f2a:	e017      	b.n	8001f5c <_sin+0x26c>
 8001f2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f30:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001f90 <_sin+0x2a0>
 8001f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f38:	ee17 0a90 	vmov	r0, s15
 8001f3c:	f7fe fad0 	bl	80004e0 <__aeabi_f2d>
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <_sin+0x2a4>)
 8001f46:	f7fe f96b 	bl	8000220 <__aeabi_dsub>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f7fe fdcd 	bl	8000af0 <__aeabi_d2iz>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8001f5c:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <_sin+0x2a8>)
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f6a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001fa0 <_sin+0x2b0>
 8001f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
	}
}
 8001f72:	eeb0 0a67 	vmov.f32	s0, s15
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	f3af 8000 	nop.w
 8001f80:	54442eea 	.word	0x54442eea
 8001f84:	400921fb 	.word	0x400921fb
 8001f88:	7f330d32 	.word	0x7f330d32
 8001f8c:	4012d97c 	.word	0x4012d97c
 8001f90:	42fd5fe6 	.word	0x42fd5fe6
 8001f94:	3fe00000 	.word	0x3fe00000
 8001f98:	0800c0f0 	.word	0x0800c0f0
 8001f9c:	38d1b717 	.word	0x38d1b717
 8001fa0:	b8d1b717 	.word	0xb8d1b717
 8001fa4:	5443d6f4 	.word	0x5443d6f4
 8001fa8:	3ff921fb 	.word	0x3ff921fb
 8001fac:	00000000 	.word	0x00000000

08001fb0 <_cos>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _cos(float a) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	ed87 0a01 	vstr	s0, [r7, #4]
	float a_sin = a + _PI_2;
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe fa90 	bl	80004e0 <__aeabi_f2d>
 8001fc0:	a31b      	add	r3, pc, #108	; (adr r3, 8002030 <_cos+0x80>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	f7fe f92d 	bl	8000224 <__adddf3>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4610      	mov	r0, r2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f7fe fdb5 	bl	8000b40 <__aeabi_d2f>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	60fb      	str	r3, [r7, #12]
	a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f7fe fa80 	bl	80004e0 <__aeabi_f2d>
 8001fe0:	a315      	add	r3, pc, #84	; (adr r3, 8002038 <_cos+0x88>)
 8001fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe6:	f7fe fd63 	bl	8000ab0 <__aeabi_dcmpgt>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00f      	beq.n	8002010 <_cos+0x60>
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f7fe fa75 	bl	80004e0 <__aeabi_f2d>
 8001ff6:	a310      	add	r3, pc, #64	; (adr r3, 8002038 <_cos+0x88>)
 8001ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffc:	f7fe f910 	bl	8000220 <__aeabi_dsub>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4610      	mov	r0, r2
 8002006:	4619      	mov	r1, r3
 8002008:	f7fe fd9a 	bl	8000b40 <__aeabi_d2f>
 800200c:	4603      	mov	r3, r0
 800200e:	e000      	b.n	8002012 <_cos+0x62>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	60fb      	str	r3, [r7, #12]
	return _sin(a_sin);
 8002014:	ed97 0a03 	vldr	s0, [r7, #12]
 8002018:	f7ff fe6a 	bl	8001cf0 <_sin>
 800201c:	eef0 7a40 	vmov.f32	s15, s0
}
 8002020:	eeb0 0a67 	vmov.f32	s0, s15
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	f3af 8000 	nop.w
 8002030:	5443d6f4 	.word	0x5443d6f4
 8002034:	3ff921fb 	.word	0x3ff921fb
 8002038:	54442eea 	.word	0x54442eea
 800203c:	401921fb 	.word	0x401921fb

08002040 <_normalizeAngle>:

//normalizing radian angle to [0,2PI]
float _normalizeAngle(float angle) {
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	ed87 0a01 	vstr	s0, [r7, #4]
	float a = fmod(angle, _2PI);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fa48 	bl	80004e0 <__aeabi_f2d>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	ed9f 1b16 	vldr	d1, [pc, #88]	; 80020b0 <_normalizeAngle+0x70>
 8002058:	ec43 2b10 	vmov	d0, r2, r3
 800205c:	f008 feac 	bl	800adb8 <fmod>
 8002060:	ec53 2b10 	vmov	r2, r3, d0
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	f7fe fd6a 	bl	8000b40 <__aeabi_d2f>
 800206c:	4603      	mov	r3, r0
 800206e:	60fb      	str	r3, [r7, #12]
	return a >= 0 ? a : (a + _2PI);      //always project from 0 degree
 8002070:	edd7 7a03 	vldr	s15, [r7, #12]
 8002074:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207c:	db01      	blt.n	8002082 <_normalizeAngle+0x42>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	e00e      	b.n	80020a0 <_normalizeAngle+0x60>
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7fe fa2c 	bl	80004e0 <__aeabi_f2d>
 8002088:	a309      	add	r3, pc, #36	; (adr r3, 80020b0 <_normalizeAngle+0x70>)
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	f7fe f8c9 	bl	8000224 <__adddf3>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f7fe fd51 	bl	8000b40 <__aeabi_d2f>
 800209e:	4603      	mov	r3, r0
 80020a0:	ee07 3a90 	vmov	s15, r3
}
 80020a4:	eeb0 0a67 	vmov.f32	s0, s15
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	54442eea 	.word	0x54442eea
 80020b4:	401921fb 	.word	0x401921fb

080020b8 <_electricalAngle>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs) {
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	ed87 0a01 	vstr	s0, [r7, #4]
 80020c2:	6038      	str	r0, [r7, #0]
	return (shaft_angle * pole_pairs);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80020d2:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80020d6:	eeb0 0a67 	vmov.f32	s0, s15
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <_sqrtApprox>:

// square root approximation function using
// https://reprap.org/forum/read.php?147,219210
// https://en.wikipedia.org/wiki/Fast_inverse_square_root
float _sqrtApprox(float number) {
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	ed87 0a01 	vstr	s0, [r7, #4]
	float y;
// float x;
// const float f = 1.5F; // better precision

// x = number * 0.5F;
	y = number;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60bb      	str	r3, [r7, #8]
	i = *(long*) &y;
 80020f2:	f107 0308 	add.w	r3, r7, #8
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
	i = 0x5f375a86 - (i >> 1);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	105a      	asrs	r2, r3, #1
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <_sqrtApprox+0x44>)
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	60bb      	str	r3, [r7, #8]
// y = y * ( f - ( x * y * y ) ); // better precision
	return number * y;
 800210c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002110:	edd7 7a01 	vldr	s15, [r7, #4]
 8002114:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002118:	eeb0 0a67 	vmov.f32	s0, s15
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	5f375a86 	.word	0x5f375a86
 800212c:	00000000 	.word	0x00000000

08002130 <MagneticSensorSPI_init>:

// initialize SPI for Magnetic Sensor
void MagneticSensorSPI_init(struct MagneticSensorSPIConfig_s config) {
 8002130:	b084      	sub	sp, #16
 8002132:	b580      	push	{r7, lr}
 8002134:	af00      	add	r7, sp, #0
 8002136:	f107 0c08 	add.w	ip, r7, #8
 800213a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
// angle read register of the magnetic sensor
	angle_register = config.angle_registers ? config.angle_registers : DEF_ANGLE_REGISTER;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MagneticSensorSPI_init+0x18>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	e001      	b.n	800214c <MagneticSensorSPI_init+0x1c>
 8002148:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800214c:	4a1a      	ldr	r2, [pc, #104]	; (80021b8 <MagneticSensorSPI_init+0x88>)
 800214e:	6013      	str	r3, [r2, #0]
// register maximum value (counts per revolution)
	cpr = pow(2, config.bit_resolution);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe f9b2 	bl	80004bc <__aeabi_i2d>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	ec43 2b11 	vmov	d1, r2, r3
 8002160:	ed9f 0b13 	vldr	d0, [pc, #76]	; 80021b0 <MagneticSensorSPI_init+0x80>
 8002164:	f008 fe56 	bl	800ae14 <pow>
 8002168:	ec53 2b10 	vmov	r2, r3, d0
 800216c:	4610      	mov	r0, r2
 800216e:	4619      	mov	r1, r3
 8002170:	f7fe fce6 	bl	8000b40 <__aeabi_d2f>
 8002174:	4603      	mov	r3, r0
 8002176:	4a11      	ldr	r2, [pc, #68]	; (80021bc <MagneticSensorSPI_init+0x8c>)
 8002178:	6013      	str	r3, [r2, #0]
	bit_resolution = config.bit_resolution;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <MagneticSensorSPI_init+0x90>)
 800217e:	6013      	str	r3, [r2, #0]

	command_parity_bit = config.command_parity_bit; // for backwards compatibility
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <MagneticSensorSPI_init+0x94>)
 8002184:	6013      	str	r3, [r2, #0]
	command_rw_bit = config.command_rw_bit; // for backwards compatibility
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	4a0f      	ldr	r2, [pc, #60]	; (80021c8 <MagneticSensorSPI_init+0x98>)
 800218a:	6013      	str	r3, [r2, #0]
	data_start_bit = config.data_start_bit; // for backwards compatibility
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4a0f      	ldr	r2, [pc, #60]	; (80021cc <MagneticSensorSPI_init+0x9c>)
 8002190:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(CS_CON_GPIO_Port, CS_CON_Pin, GPIO_PIN_SET);
 8002192:	2201      	movs	r2, #1
 8002194:	2110      	movs	r1, #16
 8002196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219a:	f005 fe09 	bl	8007db0 <HAL_GPIO_WritePin>
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021a6:	b004      	add	sp, #16
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	f3af 8000 	nop.w
 80021b0:	00000000 	.word	0x00000000
 80021b4:	40000000 	.word	0x40000000
 80021b8:	20000878 	.word	0x20000878
 80021bc:	20000864 	.word	0x20000864
 80021c0:	20000868 	.word	0x20000868
 80021c4:	2000086c 	.word	0x2000086c
 80021c8:	20000870 	.word	0x20000870
 80021cc:	20000874 	.word	0x20000874

080021d0 <spiCalcEvenParity>:

/**
 * Utility function used to calculate even parity of word
 */
uint8_t spiCalcEvenParity(uint16_t value) {
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for (i = 0; i < 16; i++) {
 80021de:	2300      	movs	r3, #0
 80021e0:	73bb      	strb	r3, [r7, #14]
 80021e2:	e00d      	b.n	8002200 <spiCalcEvenParity+0x30>
		if (value & 0x1)
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <spiCalcEvenParity+0x24>
			cnt++;
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	3301      	adds	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
		value >>= 1;
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	085b      	lsrs	r3, r3, #1
 80021f8:	80fb      	strh	r3, [r7, #6]
	for (i = 0; i < 16; i++) {
 80021fa:	7bbb      	ldrb	r3, [r7, #14]
 80021fc:	3301      	adds	r3, #1
 80021fe:	73bb      	strb	r3, [r7, #14]
 8002200:	7bbb      	ldrb	r3, [r7, #14]
 8002202:	2b0f      	cmp	r3, #15
 8002204:	d9ee      	bls.n	80021e4 <spiCalcEvenParity+0x14>
	}
	return cnt & 0x1;
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	b2db      	uxtb	r3, r3
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <read>:
/*
 * Read a register from the sensor
 * Takes the address of the register as a 16 bit word
 * Returns the value of the register
 */
uint16_t read(uint16_t angle_register) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af02      	add	r7, sp, #8
 8002222:	4603      	mov	r3, r0
 8002224:	80fb      	strh	r3, [r7, #6]
	uint16_t register_value;
	uint16_t command = angle_register;
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	817b      	strh	r3, [r7, #10]

	if (command_rw_bit > 0) {
 800222a:	4b30      	ldr	r3, [pc, #192]	; (80022ec <read+0xd0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	dd0b      	ble.n	800224a <read+0x2e>
		command = angle_register | (1 << command_rw_bit);
 8002232:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <read+0xd0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2201      	movs	r2, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	b21a      	sxth	r2, r3
 800223e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002242:	4313      	orrs	r3, r2
 8002244:	b21b      	sxth	r3, r3
 8002246:	b29b      	uxth	r3, r3
 8002248:	817b      	strh	r3, [r7, #10]
	}
	if (command_parity_bit > 0) {
 800224a:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <read+0xd4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	dd10      	ble.n	8002274 <read+0x58>
		//Add a parity bit on the the MSB
		command |= ((uint16_t) spiCalcEvenParity(command) << command_parity_bit);
 8002252:	897b      	ldrh	r3, [r7, #10]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ffbb 	bl	80021d0 <spiCalcEvenParity>
 800225a:	4603      	mov	r3, r0
 800225c:	461a      	mov	r2, r3
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <read+0xd4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	b21a      	sxth	r2, r3
 8002268:	897b      	ldrh	r3, [r7, #10]
 800226a:	b21b      	sxth	r3, r3
 800226c:	4313      	orrs	r3, r2
 800226e:	b21b      	sxth	r3, r3
 8002270:	b29b      	uxth	r3, r3
 8002272:	817b      	strh	r3, [r7, #10]
	}

	command = 0xFFFF;
 8002274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002278:	817b      	strh	r3, [r7, #10]
//Now read the response (NO_OPERATION_COMMAND = 0x0000)
//  uint16_t register_value = spi->transfer16(0x00);
	HAL_GPIO_WritePin(CS_CON_GPIO_Port, CS_CON_Pin, GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	2110      	movs	r1, #16
 800227e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002282:	f005 fd95 	bl	8007db0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &command,
 8002286:	f107 020c 	add.w	r2, r7, #12
 800228a:	f107 010a 	add.w	r1, r7, #10
 800228e:	2364      	movs	r3, #100	; 0x64
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2301      	movs	r3, #1
 8002294:	4817      	ldr	r0, [pc, #92]	; (80022f4 <read+0xd8>)
 8002296:	f006 fe3a 	bl	8008f0e <HAL_SPI_TransmitReceive>
			(uint8_t*) &register_value,
			sizeof(register_value) / sizeof(uint16_t), 100);
	HAL_GPIO_WritePin(CS_CON_GPIO_Port, CS_CON_Pin, GPIO_PIN_SET);
 800229a:	2201      	movs	r2, #1
 800229c:	2110      	movs	r1, #16
 800229e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a2:	f005 fd85 	bl	8007db0 <HAL_GPIO_WritePin>

//SPI - end transaction

	register_value = register_value >> (1 + data_start_bit - bit_resolution); //this should shift data to the rightmost bits of the word
 80022a6:	89bb      	ldrh	r3, [r7, #12]
 80022a8:	4619      	mov	r1, r3
 80022aa:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <read+0xdc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <read+0xe0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	fa41 f303 	asr.w	r3, r1, r3
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	81bb      	strh	r3, [r7, #12]
	uint16_t data_mask = 0xFFFF >> (16 - bit_resolution);
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <read+0xe0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f1c3 0310 	rsb	r3, r3, #16
 80022c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ca:	fa42 f303 	asr.w	r3, r2, r3
 80022ce:	81fb      	strh	r3, [r7, #14]
	temp = register_value & data_mask;
 80022d0:	89ba      	ldrh	r2, [r7, #12]
 80022d2:	89fb      	ldrh	r3, [r7, #14]
 80022d4:	4013      	ands	r3, r2
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <read+0xe4>)
 80022da:	801a      	strh	r2, [r3, #0]
	return register_value & data_mask; // Return the data, stripping the non data (e.g parity) bits
 80022dc:	89ba      	ldrh	r2, [r7, #12]
 80022de:	89fb      	ldrh	r3, [r7, #14]
 80022e0:	4013      	ands	r3, r2
 80022e2:	b29b      	uxth	r3, r3
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000870 	.word	0x20000870
 80022f0:	2000086c 	.word	0x2000086c
 80022f4:	200007b4 	.word	0x200007b4
 80022f8:	20000874 	.word	0x20000874
 80022fc:	20000868 	.word	0x20000868
 8002300:	20000ce8 	.word	0x20000ce8

08002304 <getRawCount>:

// function reading the raw counter of the magnetic sensor
int getRawCount() {
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	return (int) read(angle_register);
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <getRawCount+0x18>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b29b      	uxth	r3, r3
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ff84 	bl	800221c <read>
 8002314:	4603      	mov	r3, r0
}
 8002316:	4618      	mov	r0, r3
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000878 	.word	0x20000878

08002320 <getSensorAngle>:

//  Shaft angle calculation
//  angle is in radians [rad]
float getSensorAngle() {
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	return (getRawCount() / (float) cpr) * _2PI;
 8002324:	f7ff ffee 	bl	8002304 <getRawCount>
 8002328:	ee07 0a90 	vmov	s15, r0
 800232c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <getSensorAngle+0x50>)
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800233a:	ee16 0a90 	vmov	r0, s13
 800233e:	f7fe f8cf 	bl	80004e0 <__aeabi_f2d>
 8002342:	a309      	add	r3, pc, #36	; (adr r3, 8002368 <getSensorAngle+0x48>)
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	f7fe f922 	bl	8000590 <__aeabi_dmul>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	f7fe fbf4 	bl	8000b40 <__aeabi_d2f>
 8002358:	4603      	mov	r3, r0
 800235a:	ee07 3a90 	vmov	s15, r3
}
 800235e:	eeb0 0a67 	vmov.f32	s0, s15
 8002362:	bd80      	pop	{r7, pc}
 8002364:	f3af 8000 	nop.w
 8002368:	54442eea 	.word	0x54442eea
 800236c:	401921fb 	.word	0x401921fb
 8002370:	20000864 	.word	0x20000864

08002374 <Sensor_init>:

void Sensor_init() {
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
// initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
	getSensorAngle(); // call once
 8002378:	f7ff ffd2 	bl	8002320 <getSensorAngle>

	vel_angle_prev = getSensorAngle(); // call again
 800237c:	f7ff ffd0 	bl	8002320 <getSensorAngle>
 8002380:	eef0 7a40 	vmov.f32	s15, s0
 8002384:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <Sensor_init+0x4c>)
 8002386:	edc3 7a00 	vstr	s15, [r3]
	vel_angle_prev_ts = micros();
 800238a:	f7ff fad9 	bl	8001940 <micros>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <Sensor_init+0x50>)
 8002394:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 8002396:	2001      	movs	r0, #1
 8002398:	f002 ff3a 	bl	8005210 <HAL_Delay>
	getSensorAngle(); // call once
 800239c:	f7ff ffc0 	bl	8002320 <getSensorAngle>

	angle_prev = getSensorAngle(); // call again
 80023a0:	f7ff ffbe 	bl	8002320 <getSensorAngle>
 80023a4:	eef0 7a40 	vmov.f32	s15, s0
 80023a8:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <Sensor_init+0x54>)
 80023aa:	edc3 7a00 	vstr	s15, [r3]
	angle_prev_ts = micros();
 80023ae:	f7ff fac7 	bl	8001940 <micros>
 80023b2:	4603      	mov	r3, r0
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <Sensor_init+0x58>)
 80023b8:	601a      	str	r2, [r3, #0]
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000880 	.word	0x20000880
 80023c4:	20000894 	.word	0x20000894
 80023c8:	2000087c 	.word	0x2000087c
 80023cc:	20000898 	.word	0x20000898

080023d0 <updateSensor>:

void updateSensor() {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
	float val = getSensorAngle();
 80023d6:	f7ff ffa3 	bl	8002320 <getSensorAngle>
 80023da:	ed87 0a01 	vstr	s0, [r7, #4]
	angle_prev_ts = micros();
 80023de:	f7ff faaf 	bl	8001940 <micros>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <updateSensor+0x70>)
 80023e8:	601a      	str	r2, [r3, #0]
	float d_angle = val - angle_prev;
 80023ea:	4b16      	ldr	r3, [pc, #88]	; (8002444 <updateSensor+0x74>)
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80023f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f8:	edc7 7a00 	vstr	s15, [r7]
// if overflow happened track it as full rotation
	if (abs(d_angle) > (0.8f * _2PI))
 80023fc:	edd7 7a00 	vldr	s15, [r7]
 8002400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002404:	ee17 3a90 	vmov	r3, s15
 8002408:	2b00      	cmp	r3, #0
 800240a:	bfb8      	it	lt
 800240c:	425b      	neglt	r3, r3
 800240e:	2b05      	cmp	r3, #5
 8002410:	dd0f      	ble.n	8002432 <updateSensor+0x62>
		full_rotations += (d_angle > 0) ? -1 : 1;
 8002412:	edd7 7a00 	vldr	s15, [r7]
 8002416:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800241a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241e:	dd02      	ble.n	8002426 <updateSensor+0x56>
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	e000      	b.n	8002428 <updateSensor+0x58>
 8002426:	2201      	movs	r2, #1
 8002428:	4b07      	ldr	r3, [pc, #28]	; (8002448 <updateSensor+0x78>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4413      	add	r3, r2
 800242e:	4a06      	ldr	r2, [pc, #24]	; (8002448 <updateSensor+0x78>)
 8002430:	6013      	str	r3, [r2, #0]
	angle_prev = val;
 8002432:	4a04      	ldr	r2, [pc, #16]	; (8002444 <updateSensor+0x74>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6013      	str	r3, [r2, #0]
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000898 	.word	0x20000898
 8002444:	2000087c 	.word	0x2000087c
 8002448:	2000088c 	.word	0x2000088c

0800244c <getMechanicalAngle>:

float getMechanicalAngle() {
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
	return angle_prev;
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <getMechanicalAngle+0x18>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	ee07 3a90 	vmov	s15, r3
}
 8002458:	eeb0 0a67 	vmov.f32	s0, s15
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	2000087c 	.word	0x2000087c

08002468 <getAngle>:

float getAngle() {
 8002468:	b5b0      	push	{r4, r5, r7, lr}
 800246a:	af00      	add	r7, sp, #0
	return (float) full_rotations * _2PI + angle_prev;
 800246c:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <getAngle+0x60>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002478:	ee17 0a90 	vmov	r0, s15
 800247c:	f7fe f830 	bl	80004e0 <__aeabi_f2d>
 8002480:	a30f      	add	r3, pc, #60	; (adr r3, 80024c0 <getAngle+0x58>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	f7fe f883 	bl	8000590 <__aeabi_dmul>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4614      	mov	r4, r2
 8002490:	461d      	mov	r5, r3
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <getAngle+0x64>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe f822 	bl	80004e0 <__aeabi_f2d>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4620      	mov	r0, r4
 80024a2:	4629      	mov	r1, r5
 80024a4:	f7fd febe 	bl	8000224 <__adddf3>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7fe fb46 	bl	8000b40 <__aeabi_d2f>
 80024b4:	4603      	mov	r3, r0
 80024b6:	ee07 3a90 	vmov	s15, r3
}
 80024ba:	eeb0 0a67 	vmov.f32	s0, s15
 80024be:	bdb0      	pop	{r4, r5, r7, pc}
 80024c0:	54442eea 	.word	0x54442eea
 80024c4:	401921fb 	.word	0x401921fb
 80024c8:	2000088c 	.word	0x2000088c
 80024cc:	2000087c 	.word	0x2000087c

080024d0 <getvelocity>:

int32_t getFullRotations() {
	return full_rotations;
}

float getvelocity() {
 80024d0:	b5b0      	push	{r4, r5, r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
// calculate sample time
	vel_angle_ts = micros();
 80024d6:	f7ff fa33 	bl	8001940 <micros>
 80024da:	4603      	mov	r3, r0
 80024dc:	461a      	mov	r2, r3
 80024de:	4b42      	ldr	r3, [pc, #264]	; (80025e8 <getvelocity+0x118>)
 80024e0:	601a      	str	r2, [r3, #0]
	float Ts = (vel_angle_ts - vel_angle_prev_ts) * 1e-6;
 80024e2:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <getvelocity+0x118>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4b41      	ldr	r3, [pc, #260]	; (80025ec <getvelocity+0x11c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fd ffe5 	bl	80004bc <__aeabi_i2d>
 80024f2:	a339      	add	r3, pc, #228	; (adr r3, 80025d8 <getvelocity+0x108>)
 80024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f8:	f7fe f84a 	bl	8000590 <__aeabi_dmul>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	f7fe fb1c 	bl	8000b40 <__aeabi_d2f>
 8002508:	4603      	mov	r3, r0
 800250a:	607b      	str	r3, [r7, #4]
// quick fix for strange cases (micros overflow)
	if (Ts <= 0 || Ts > 0.0008f)
 800250c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002510:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002518:	d908      	bls.n	800252c <getvelocity+0x5c>
 800251a:	edd7 7a01 	vldr	s15, [r7, #4]
 800251e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80025f0 <getvelocity+0x120>
 8002522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252a:	dd01      	ble.n	8002530 <getvelocity+0x60>
		Ts = 0.0008f;
 800252c:	4b31      	ldr	r3, [pc, #196]	; (80025f4 <getvelocity+0x124>)
 800252e:	607b      	str	r3, [r7, #4]
// velocity calculation
	float vel = ((float) (full_rotations - vel_full_rotations) * _2PI
 8002530:	4b31      	ldr	r3, [pc, #196]	; (80025f8 <getvelocity+0x128>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b31      	ldr	r3, [pc, #196]	; (80025fc <getvelocity+0x12c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002542:	ee17 0a90 	vmov	r0, s15
 8002546:	f7fd ffcb 	bl	80004e0 <__aeabi_f2d>
 800254a:	a325      	add	r3, pc, #148	; (adr r3, 80025e0 <getvelocity+0x110>)
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	f7fe f81e 	bl	8000590 <__aeabi_dmul>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4614      	mov	r4, r2
 800255a:	461d      	mov	r5, r3
			+ (angle_prev - vel_angle_prev)) / Ts;
 800255c:	4b28      	ldr	r3, [pc, #160]	; (8002600 <getvelocity+0x130>)
 800255e:	ed93 7a00 	vldr	s14, [r3]
 8002562:	4b28      	ldr	r3, [pc, #160]	; (8002604 <getvelocity+0x134>)
 8002564:	edd3 7a00 	vldr	s15, [r3]
 8002568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800256c:	ee17 0a90 	vmov	r0, s15
 8002570:	f7fd ffb6 	bl	80004e0 <__aeabi_f2d>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4620      	mov	r0, r4
 800257a:	4629      	mov	r1, r5
 800257c:	f7fd fe52 	bl	8000224 <__adddf3>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4614      	mov	r4, r2
 8002586:	461d      	mov	r5, r3
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7fd ffa9 	bl	80004e0 <__aeabi_f2d>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4620      	mov	r0, r4
 8002594:	4629      	mov	r1, r5
 8002596:	f7fe f925 	bl	80007e4 <__aeabi_ddiv>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
	float vel = ((float) (full_rotations - vel_full_rotations) * _2PI
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f7fe facd 	bl	8000b40 <__aeabi_d2f>
 80025a6:	4603      	mov	r3, r0
 80025a8:	603b      	str	r3, [r7, #0]
// save variables for future pass
	vel_angle_prev = angle_prev;
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <getvelocity+0x130>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a15      	ldr	r2, [pc, #84]	; (8002604 <getvelocity+0x134>)
 80025b0:	6013      	str	r3, [r2, #0]
	vel_full_rotations = full_rotations;
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <getvelocity+0x128>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a11      	ldr	r2, [pc, #68]	; (80025fc <getvelocity+0x12c>)
 80025b8:	6013      	str	r3, [r2, #0]
	vel_angle_prev_ts = vel_angle_ts;
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <getvelocity+0x118>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <getvelocity+0x11c>)
 80025c0:	6013      	str	r3, [r2, #0]
	return vel;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	ee07 3a90 	vmov	s15, r3
}
 80025c8:	eeb0 0a67 	vmov.f32	s0, s15
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bdb0      	pop	{r4, r5, r7, pc}
 80025d2:	bf00      	nop
 80025d4:	f3af 8000 	nop.w
 80025d8:	a0b5ed8d 	.word	0xa0b5ed8d
 80025dc:	3eb0c6f7 	.word	0x3eb0c6f7
 80025e0:	54442eea 	.word	0x54442eea
 80025e4:	401921fb 	.word	0x401921fb
 80025e8:	2000089c 	.word	0x2000089c
 80025ec:	20000894 	.word	0x20000894
 80025f0:	3a51b717 	.word	0x3a51b717
 80025f4:	3a51b717 	.word	0x3a51b717
 80025f8:	2000088c 	.word	0x2000088c
 80025fc:	20000890 	.word	0x20000890
 8002600:	2000087c 	.word	0x2000087c
 8002604:	20000880 	.word	0x20000880

08002608 <getacceleration>:

float getacceleration() {
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
// calculate sample time
	acc_ts = micros() ;
 800260e:	f7ff f997 	bl	8001940 <micros>
 8002612:	4603      	mov	r3, r0
 8002614:	461a      	mov	r2, r3
 8002616:	4b38      	ldr	r3, [pc, #224]	; (80026f8 <getacceleration+0xf0>)
 8002618:	601a      	str	r2, [r3, #0]
	float Ts = (acc_ts - acc_prev_ts) * 1e-6;
 800261a:	4b37      	ldr	r3, [pc, #220]	; (80026f8 <getacceleration+0xf0>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4b37      	ldr	r3, [pc, #220]	; (80026fc <getacceleration+0xf4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	4618      	mov	r0, r3
 8002626:	f7fd ff49 	bl	80004bc <__aeabi_i2d>
 800262a:	a331      	add	r3, pc, #196	; (adr r3, 80026f0 <getacceleration+0xe8>)
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	f7fd ffae 	bl	8000590 <__aeabi_dmul>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	f7fe fa80 	bl	8000b40 <__aeabi_d2f>
 8002640:	4603      	mov	r3, r0
 8002642:	60fb      	str	r3, [r7, #12]
// quick fix for strange cases (micros overflow)
	if (Ts <= 0 || Ts > 0.0008f)
 8002644:	edd7 7a03 	vldr	s15, [r7, #12]
 8002648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002650:	d908      	bls.n	8002664 <getacceleration+0x5c>
 8002652:	edd7 7a03 	vldr	s15, [r7, #12]
 8002656:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002700 <getacceleration+0xf8>
 800265a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800265e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002662:	dd01      	ble.n	8002668 <getacceleration+0x60>
		Ts = 0.0008f;
 8002664:	4b27      	ldr	r3, [pc, #156]	; (8002704 <getacceleration+0xfc>)
 8002666:	60fb      	str	r3, [r7, #12]
	float temp = (int)(shaftVelocity() * 100 +0.5);
 8002668:	f000 f890 	bl	800278c <shaftVelocity>
 800266c:	eef0 7a40 	vmov.f32	s15, s0
 8002670:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002708 <getacceleration+0x100>
 8002674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002678:	ee17 0a90 	vmov	r0, s15
 800267c:	f7fd ff30 	bl	80004e0 <__aeabi_f2d>
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	4b21      	ldr	r3, [pc, #132]	; (800270c <getacceleration+0x104>)
 8002686:	f7fd fdcd 	bl	8000224 <__adddf3>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4610      	mov	r0, r2
 8002690:	4619      	mov	r1, r3
 8002692:	f7fe fa2d 	bl	8000af0 <__aeabi_d2iz>
 8002696:	ee07 0a90 	vmov	s15, r0
 800269a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800269e:	edc7 7a02 	vstr	s15, [r7, #8]
	acc_vel = (float)temp/100 ;
 80026a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80026a6:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002708 <getacceleration+0x100>
 80026aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ae:	4b18      	ldr	r3, [pc, #96]	; (8002710 <getacceleration+0x108>)
 80026b0:	edc3 7a00 	vstr	s15, [r3]
	float acc = (acc_vel_prev - acc_vel) / Ts ;
 80026b4:	4b17      	ldr	r3, [pc, #92]	; (8002714 <getacceleration+0x10c>)
 80026b6:	ed93 7a00 	vldr	s14, [r3]
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <getacceleration+0x108>)
 80026bc:	edd3 7a00 	vldr	s15, [r3]
 80026c0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80026c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026cc:	edc7 7a01 	vstr	s15, [r7, #4]

	acc_vel_prev = acc_vel ;
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <getacceleration+0x108>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a0f      	ldr	r2, [pc, #60]	; (8002714 <getacceleration+0x10c>)
 80026d6:	6013      	str	r3, [r2, #0]
	acc_prev_ts = acc_ts ;
 80026d8:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <getacceleration+0xf0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a07      	ldr	r2, [pc, #28]	; (80026fc <getacceleration+0xf4>)
 80026de:	6013      	str	r3, [r2, #0]
	return acc ;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	ee07 3a90 	vmov	s15, r3
//
//		zeta_3 = zeta_2;
//		zeta_2 = zeta_1 ;
//		acc_prev_ts = acc_ts ;
//		return acc ;
}
 80026e6:	eeb0 0a67 	vmov.f32	s0, s15
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80026f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80026f8:	200008a0 	.word	0x200008a0
 80026fc:	200008a4 	.word	0x200008a4
 8002700:	3a51b717 	.word	0x3a51b717
 8002704:	3a51b717 	.word	0x3a51b717
 8002708:	42c80000 	.word	0x42c80000
 800270c:	3fe00000 	.word	0x3fe00000
 8002710:	20000888 	.word	0x20000888
 8002714:	20000884 	.word	0x20000884

08002718 <shaftAngle>:
// shaft angle calculation
float shaftAngle() {
 8002718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	af02      	add	r7, sp, #8
	LPF_angle.x = getAngle();
 800271e:	f7ff fea3 	bl	8002468 <getAngle>
 8002722:	eef0 7a40 	vmov.f32	s15, s0
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <shaftAngle+0x68>)
 8002728:	edc3 7a00 	vstr	s15, [r3]
	LPF_angle = LowPassFilter(LPF_angle);
 800272c:	4e14      	ldr	r6, [pc, #80]	; (8002780 <shaftAngle+0x68>)
 800272e:	463c      	mov	r4, r7
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <shaftAngle+0x68>)
 8002732:	466d      	mov	r5, sp
 8002734:	f103 020c 	add.w	r2, r3, #12
 8002738:	e892 0003 	ldmia.w	r2, {r0, r1}
 800273c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002740:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002742:	4620      	mov	r0, r4
 8002744:	f001 f862 	bl	800380c <LowPassFilter>
 8002748:	4635      	mov	r5, r6
 800274a:	463c      	mov	r4, r7
 800274c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800274e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	602b      	str	r3, [r5, #0]
	return sensor_direction * LPF_angle.y_prev - sensor_offset;
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <shaftAngle+0x6c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	ee07 3a90 	vmov	s15, r3
 800275c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <shaftAngle+0x68>)
 8002762:	edd3 7a02 	vldr	s15, [r3, #8]
 8002766:	ee27 7a27 	vmul.f32	s14, s14, s15
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <shaftAngle+0x70>)
 800276c:	edd3 7a00 	vldr	s15, [r3]
 8002770:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002774:	eeb0 0a67 	vmov.f32	s0, s15
 8002778:	371c      	adds	r7, #28
 800277a:	46bd      	mov	sp, r7
 800277c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800277e:	bf00      	nop
 8002780:	20000930 	.word	0x20000930
 8002784:	2000001c 	.word	0x2000001c
 8002788:	20000c6c 	.word	0x20000c6c

0800278c <shaftVelocity>:
// shaft velocity calculation
float shaftVelocity() {
 800278c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278e:	b089      	sub	sp, #36	; 0x24
 8002790:	af02      	add	r7, sp, #8
	LPF_velocity.x = getvelocity();
 8002792:	f7ff fe9d 	bl	80024d0 <getvelocity>
 8002796:	eef0 7a40 	vmov.f32	s15, s0
 800279a:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <shaftVelocity+0x5c>)
 800279c:	edc3 7a00 	vstr	s15, [r3]
	LPF_velocity = LowPassFilter(LPF_velocity);
 80027a0:	4e11      	ldr	r6, [pc, #68]	; (80027e8 <shaftVelocity+0x5c>)
 80027a2:	463c      	mov	r4, r7
 80027a4:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <shaftVelocity+0x5c>)
 80027a6:	466d      	mov	r5, sp
 80027a8:	f103 020c 	add.w	r2, r3, #12
 80027ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80027b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027b6:	4620      	mov	r0, r4
 80027b8:	f001 f828 	bl	800380c <LowPassFilter>
 80027bc:	4635      	mov	r5, r6
 80027be:	463c      	mov	r4, r7
 80027c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	602b      	str	r3, [r5, #0]
	return sensor_direction * LPF_velocity.y_prev;
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <shaftVelocity+0x60>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	ee07 3a90 	vmov	s15, r3
 80027d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <shaftVelocity+0x5c>)
 80027d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80027da:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80027de:	eeb0 0a67 	vmov.f32	s0, s15
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027e8:	20000944 	.word	0x20000944
 80027ec:	2000001c 	.word	0x2000001c

080027f0 <shaftAcceleration>:

float shaftAcceleration() {
 80027f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af02      	add	r7, sp, #8
	LPF_acceleration.x = getacceleration();
 80027f6:	f7ff ff07 	bl	8002608 <getacceleration>
 80027fa:	eef0 7a40 	vmov.f32	s15, s0
 80027fe:	4b13      	ldr	r3, [pc, #76]	; (800284c <shaftAcceleration+0x5c>)
 8002800:	edc3 7a00 	vstr	s15, [r3]
	LPF_acceleration = LowPassFilter(LPF_acceleration);
 8002804:	4e11      	ldr	r6, [pc, #68]	; (800284c <shaftAcceleration+0x5c>)
 8002806:	463c      	mov	r4, r7
 8002808:	4b10      	ldr	r3, [pc, #64]	; (800284c <shaftAcceleration+0x5c>)
 800280a:	466d      	mov	r5, sp
 800280c:	f103 020c 	add.w	r2, r3, #12
 8002810:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002814:	e885 0003 	stmia.w	r5, {r0, r1}
 8002818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800281a:	4620      	mov	r0, r4
 800281c:	f000 fff6 	bl	800380c <LowPassFilter>
 8002820:	4635      	mov	r5, r6
 8002822:	463c      	mov	r4, r7
 8002824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	602b      	str	r3, [r5, #0]
	return sensor_direction * LPF_acceleration.y_prev;
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <shaftAcceleration+0x60>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <shaftAcceleration+0x5c>)
 800283a:	edd3 7a02 	vldr	s15, [r3, #8]
 800283e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002842:	eeb0 0a67 	vmov.f32	s0, s15
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800284c:	20000958 	.word	0x20000958
 8002850:	2000001c 	.word	0x2000001c

08002854 <electricalAngle>:
//Conversion shaft angle to elec angle
float electricalAngle() {
 8002854:	b580      	push	{r7, lr}
 8002856:	ed2d 8b02 	vpush	{d8}
 800285a:	af00      	add	r7, sp, #0
	return _normalizeAngle(
			(float) (sensor_direction * pole_pairs) * getMechanicalAngle()
 800285c:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <electricalAngle+0x4c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a10      	ldr	r2, [pc, #64]	; (80028a4 <electricalAngle+0x50>)
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	fb02 f303 	mul.w	r3, r2, r3
 8002868:	ee07 3a90 	vmov	s15, r3
 800286c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002870:	f7ff fdec 	bl	800244c <getMechanicalAngle>
 8002874:	eef0 7a40 	vmov.f32	s15, s0
 8002878:	ee28 7a27 	vmul.f32	s14, s16, s15
	return _normalizeAngle(
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <electricalAngle+0x54>)
 800287e:	edd3 7a00 	vldr	s15, [r3]
 8002882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002886:	eeb0 0a67 	vmov.f32	s0, s15
 800288a:	f7ff fbd9 	bl	8002040 <_normalizeAngle>
 800288e:	eef0 7a40 	vmov.f32	s15, s0
					- zero_electric_angle);
}
 8002892:	eeb0 0a67 	vmov.f32	s0, s15
 8002896:	46bd      	mov	sp, r7
 8002898:	ecbd 8b02 	vpop	{d8}
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	2000001c 	.word	0x2000001c
 80028a4:	20000c5c 	.word	0x20000c5c
 80028a8:	20000014 	.word	0x20000014

080028ac <adaptiveZero>:
void adaptiveZero() {
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
	float min_value = 99.0;
 80028b2:	4b22      	ldr	r3, [pc, #136]	; (800293c <adaptiveZero+0x90>)
 80028b4:	60fb      	str	r3, [r7, #12]
	int min_index = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
	float value;
	for (int i = 0; i < pole_pairs; i++) {
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	e024      	b.n	800290a <adaptiveZero+0x5e>
		value = fabs(angle_prev - shaft_angle_pp[i][motor_nbr]);
 80028c0:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <adaptiveZero+0x94>)
 80028c2:	ed93 7a00 	vldr	s14, [r3]
 80028c6:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <adaptiveZero+0x98>)
 80028c8:	6819      	ldr	r1, [r3, #0]
 80028ca:	481f      	ldr	r0, [pc, #124]	; (8002948 <adaptiveZero+0x9c>)
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	440b      	add	r3, r1
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4403      	add	r3, r0
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e2:	eef0 7ae7 	vabs.f32	s15, s15
 80028e6:	edc7 7a00 	vstr	s15, [r7]
		if (value < min_value) {
 80028ea:	ed97 7a00 	vldr	s14, [r7]
 80028ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80028f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fa:	d503      	bpl.n	8002904 <adaptiveZero+0x58>
			min_value = value;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	60fb      	str	r3, [r7, #12]
			min_index = i;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < pole_pairs; i++) {
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3301      	adds	r3, #1
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <adaptiveZero+0xa0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	429a      	cmp	r2, r3
 8002912:	dbd5      	blt.n	80028c0 <adaptiveZero+0x14>
		}
	}
	zero_electric_angle = zero_angle_pp[min_index][motor_nbr];
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <adaptiveZero+0x98>)
 8002916:	6819      	ldr	r1, [r3, #0]
 8002918:	480d      	ldr	r0, [pc, #52]	; (8002950 <adaptiveZero+0xa4>)
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	440b      	add	r3, r1
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4403      	add	r3, r0
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <adaptiveZero+0xa8>)
 800292c:	6013      	str	r3, [r2, #0]
//	return _normalizeAngle(zero_electric_angle);
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	42c60000 	.word	0x42c60000
 8002940:	2000087c 	.word	0x2000087c
 8002944:	20000d20 	.word	0x20000d20
 8002948:	20000264 	.word	0x20000264
 800294c:	20000c5c 	.word	0x20000c5c
 8002950:	2000037c 	.word	0x2000037c
 8002954:	20000014 	.word	0x20000014

08002958 <writeDutyCycle3PWM>:
/// Returns minimum of x, y, z ///
	return (x < y ? (x < z ? x : z) : (y < z ? y : z));
}

//Write PWM fsw = 25kHzfloat Ts
void writeDutyCycle3PWM(float dc_a, float dc_b, float dc_c) {
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002962:	edc7 0a02 	vstr	s1, [r7, #8]
 8002966:	ed87 1a01 	vstr	s2, [r7, #4]
//	dc_a = 1.0f - dc_a ;
//	dc_b = 1.0f - dc_b ;
//	dc_c = 1.0f - dc_c ;
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, fsw*dc_b);
 800296a:	edd7 7a02 	vldr	s15, [r7, #8]
 800296e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80029c4 <writeDutyCycle3PWM+0x6c>
 8002972:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <writeDutyCycle3PWM+0x70>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800297e:	ee17 2a90 	vmov	r2, s15
 8002982:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, fsw*dc_c);
 8002984:	edd7 7a01 	vldr	s15, [r7, #4]
 8002988:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80029c4 <writeDutyCycle3PWM+0x6c>
 800298c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <writeDutyCycle3PWM+0x70>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002998:	ee17 2a90 	vmov	r2, s15
 800299c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, fsw*dc_a);
 800299e:	edd7 7a03 	vldr	s15, [r7, #12]
 80029a2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80029c4 <writeDutyCycle3PWM+0x6c>
 80029a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <writeDutyCycle3PWM+0x70>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029b2:	ee17 2a90 	vmov	r2, s15
 80029b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	45610000 	.word	0x45610000
 80029c8:	20000818 	.word	0x20000818
 80029cc:	00000000 	.word	0x00000000

080029d0 <setPhaseVoltage>:

// Method using FOC to set Uq and Ud to the motor at the optimal angle
// Function implementing Space Vector PWM and Sine PWM algorithms
void setPhaseVoltage(float Uq, float Ud, float angle_el) {
 80029d0:	b5b0      	push	{r4, r5, r7, lr}
 80029d2:	b08c      	sub	sp, #48	; 0x30
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	ed87 0a03 	vstr	s0, [r7, #12]
 80029da:	edc7 0a02 	vstr	s1, [r7, #8]
 80029de:	ed87 1a01 	vstr	s2, [r7, #4]
// Sinusoidal PWM modulation ---------------------------------------------------------
// Inverse Park + Clarke transformation

// angle normalization in between 0 and 2pi
// only necessary if using _sin and _cos - approximation functions
	angle_el = _normalizeAngle(angle_el);
 80029e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80029e6:	f7ff fb2b 	bl	8002040 <_normalizeAngle>
 80029ea:	ed87 0a01 	vstr	s0, [r7, #4]
// Inverse park transform
	float _ca = _cos(angle_el);
 80029ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80029f2:	f7ff fadd 	bl	8001fb0 <_cos>
 80029f6:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float _sa = _sin(angle_el);
 80029fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80029fe:	f7ff f977 	bl	8001cf0 <_sin>
 8002a02:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	float iv_alpha, iv_beta;

	iv_alpha = _ca * Ud - _sa * Uq;  // -sin(angle) * Uq;
 8002a06:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002a0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a12:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a22:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	iv_beta = _sa * Ud + _ca * Uq;    //  cos(angle) * Uq;
 8002a26:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002a2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a32:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002a36:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a42:	edc7 7a08 	vstr	s15, [r7, #32]

// center = modulation_centered ? (driver->voltage_limit)/2 : Uq;
	float center = voltage_limit / 2;
 8002a46:	4bae      	ldr	r3, [pc, #696]	; (8002d00 <setPhaseVoltage+0x330>)
 8002a48:	ed93 7a00 	vldr	s14, [r3]
 8002a4c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002a50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a54:	edc7 7a07 	vstr	s15, [r7, #28]
// Inverse Clarke transform
	Ua = iv_alpha + center;
 8002a58:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002a5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a64:	4ba7      	ldr	r3, [pc, #668]	; (8002d04 <setPhaseVoltage+0x334>)
 8002a66:	edc3 7a00 	vstr	s15, [r3]
	Ub = -0.5f * iv_alpha + _SQRT3_2 * iv_beta + center;
 8002a6a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a6e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002a72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a76:	ee17 0a90 	vmov	r0, s15
 8002a7a:	f7fd fd31 	bl	80004e0 <__aeabi_f2d>
 8002a7e:	4604      	mov	r4, r0
 8002a80:	460d      	mov	r5, r1
 8002a82:	6a38      	ldr	r0, [r7, #32]
 8002a84:	f7fd fd2c 	bl	80004e0 <__aeabi_f2d>
 8002a88:	a39b      	add	r3, pc, #620	; (adr r3, 8002cf8 <setPhaseVoltage+0x328>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd fd7f 	bl	8000590 <__aeabi_dmul>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4620      	mov	r0, r4
 8002a98:	4629      	mov	r1, r5
 8002a9a:	f7fd fbc3 	bl	8000224 <__adddf3>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4614      	mov	r4, r2
 8002aa4:	461d      	mov	r5, r3
 8002aa6:	69f8      	ldr	r0, [r7, #28]
 8002aa8:	f7fd fd1a 	bl	80004e0 <__aeabi_f2d>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	4629      	mov	r1, r5
 8002ab4:	f7fd fbb6 	bl	8000224 <__adddf3>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4610      	mov	r0, r2
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f7fe f83e 	bl	8000b40 <__aeabi_d2f>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4a90      	ldr	r2, [pc, #576]	; (8002d08 <setPhaseVoltage+0x338>)
 8002ac8:	6013      	str	r3, [r2, #0]
	Uc = -0.5f * iv_alpha - _SQRT3_2 * iv_beta + center;
 8002aca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ace:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad6:	ee17 0a90 	vmov	r0, s15
 8002ada:	f7fd fd01 	bl	80004e0 <__aeabi_f2d>
 8002ade:	4604      	mov	r4, r0
 8002ae0:	460d      	mov	r5, r1
 8002ae2:	6a38      	ldr	r0, [r7, #32]
 8002ae4:	f7fd fcfc 	bl	80004e0 <__aeabi_f2d>
 8002ae8:	a383      	add	r3, pc, #524	; (adr r3, 8002cf8 <setPhaseVoltage+0x328>)
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f7fd fd4f 	bl	8000590 <__aeabi_dmul>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4620      	mov	r0, r4
 8002af8:	4629      	mov	r1, r5
 8002afa:	f7fd fb91 	bl	8000220 <__aeabi_dsub>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4614      	mov	r4, r2
 8002b04:	461d      	mov	r5, r3
 8002b06:	69f8      	ldr	r0, [r7, #28]
 8002b08:	f7fd fcea 	bl	80004e0 <__aeabi_f2d>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4620      	mov	r0, r4
 8002b12:	4629      	mov	r1, r5
 8002b14:	f7fd fb86 	bl	8000224 <__adddf3>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f7fe f80e 	bl	8000b40 <__aeabi_d2f>
 8002b24:	4603      	mov	r3, r0
 8002b26:	4a79      	ldr	r2, [pc, #484]	; (8002d0c <setPhaseVoltage+0x33c>)
 8002b28:	6013      	str	r3, [r2, #0]
//  Uc = Tc * voltage_limit;
//--------------------------------------------------------------

// set the voltages in hardware
// limit the voltage in driver
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 8002b2a:	4b76      	ldr	r3, [pc, #472]	; (8002d04 <setPhaseVoltage+0x334>)
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b38:	d502      	bpl.n	8002b40 <setPhaseVoltage+0x170>
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	e00f      	b.n	8002b60 <setPhaseVoltage+0x190>
 8002b40:	4b70      	ldr	r3, [pc, #448]	; (8002d04 <setPhaseVoltage+0x334>)
 8002b42:	ed93 7a00 	vldr	s14, [r3]
 8002b46:	4b6e      	ldr	r3, [pc, #440]	; (8002d00 <setPhaseVoltage+0x330>)
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b54:	dd02      	ble.n	8002b5c <setPhaseVoltage+0x18c>
 8002b56:	4b6a      	ldr	r3, [pc, #424]	; (8002d00 <setPhaseVoltage+0x330>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	e001      	b.n	8002b60 <setPhaseVoltage+0x190>
 8002b5c:	4b69      	ldr	r3, [pc, #420]	; (8002d04 <setPhaseVoltage+0x334>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a68      	ldr	r2, [pc, #416]	; (8002d04 <setPhaseVoltage+0x334>)
 8002b62:	6013      	str	r3, [r2, #0]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 8002b64:	4b68      	ldr	r3, [pc, #416]	; (8002d08 <setPhaseVoltage+0x338>)
 8002b66:	edd3 7a00 	vldr	s15, [r3]
 8002b6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b72:	d502      	bpl.n	8002b7a <setPhaseVoltage+0x1aa>
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e00f      	b.n	8002b9a <setPhaseVoltage+0x1ca>
 8002b7a:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <setPhaseVoltage+0x338>)
 8002b7c:	ed93 7a00 	vldr	s14, [r3]
 8002b80:	4b5f      	ldr	r3, [pc, #380]	; (8002d00 <setPhaseVoltage+0x330>)
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8e:	dd02      	ble.n	8002b96 <setPhaseVoltage+0x1c6>
 8002b90:	4b5b      	ldr	r3, [pc, #364]	; (8002d00 <setPhaseVoltage+0x330>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	e001      	b.n	8002b9a <setPhaseVoltage+0x1ca>
 8002b96:	4b5c      	ldr	r3, [pc, #368]	; (8002d08 <setPhaseVoltage+0x338>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a5b      	ldr	r2, [pc, #364]	; (8002d08 <setPhaseVoltage+0x338>)
 8002b9c:	6013      	str	r3, [r2, #0]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 8002b9e:	4b5b      	ldr	r3, [pc, #364]	; (8002d0c <setPhaseVoltage+0x33c>)
 8002ba0:	edd3 7a00 	vldr	s15, [r3]
 8002ba4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bac:	d502      	bpl.n	8002bb4 <setPhaseVoltage+0x1e4>
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	e00f      	b.n	8002bd4 <setPhaseVoltage+0x204>
 8002bb4:	4b55      	ldr	r3, [pc, #340]	; (8002d0c <setPhaseVoltage+0x33c>)
 8002bb6:	ed93 7a00 	vldr	s14, [r3]
 8002bba:	4b51      	ldr	r3, [pc, #324]	; (8002d00 <setPhaseVoltage+0x330>)
 8002bbc:	edd3 7a00 	vldr	s15, [r3]
 8002bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc8:	dd02      	ble.n	8002bd0 <setPhaseVoltage+0x200>
 8002bca:	4b4d      	ldr	r3, [pc, #308]	; (8002d00 <setPhaseVoltage+0x330>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	e001      	b.n	8002bd4 <setPhaseVoltage+0x204>
 8002bd0:	4b4e      	ldr	r3, [pc, #312]	; (8002d0c <setPhaseVoltage+0x33c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a4d      	ldr	r2, [pc, #308]	; (8002d0c <setPhaseVoltage+0x33c>)
 8002bd6:	6013      	str	r3, [r2, #0]
// calculate duty cycle
	float dc_a;  //duty cycle phase A [0, 0.94]
	float dc_b;  //duty cycle phase B [0, 0.94]
	float dc_c;  //duty cycle phase C [0, 0.94]
// limited in [0,1]
	dc_a = _constrain(Ua / voltage_power_supply, 0.0f, 0.94f);
 8002bd8:	4b4a      	ldr	r3, [pc, #296]	; (8002d04 <setPhaseVoltage+0x334>)
 8002bda:	edd3 6a00 	vldr	s13, [r3]
 8002bde:	4b4c      	ldr	r3, [pc, #304]	; (8002d10 <setPhaseVoltage+0x340>)
 8002be0:	ed93 7a00 	vldr	s14, [r3]
 8002be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002be8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf0:	d502      	bpl.n	8002bf8 <setPhaseVoltage+0x228>
 8002bf2:	eddf 7a48 	vldr	s15, [pc, #288]	; 8002d14 <setPhaseVoltage+0x344>
 8002bf6:	e019      	b.n	8002c2c <setPhaseVoltage+0x25c>
 8002bf8:	4b42      	ldr	r3, [pc, #264]	; (8002d04 <setPhaseVoltage+0x334>)
 8002bfa:	edd3 6a00 	vldr	s13, [r3]
 8002bfe:	4b44      	ldr	r3, [pc, #272]	; (8002d10 <setPhaseVoltage+0x340>)
 8002c00:	ed93 7a00 	vldr	s14, [r3]
 8002c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c08:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002d18 <setPhaseVoltage+0x348>
 8002c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	dd02      	ble.n	8002c1c <setPhaseVoltage+0x24c>
 8002c16:	eddf 7a40 	vldr	s15, [pc, #256]	; 8002d18 <setPhaseVoltage+0x348>
 8002c1a:	e007      	b.n	8002c2c <setPhaseVoltage+0x25c>
 8002c1c:	4b39      	ldr	r3, [pc, #228]	; (8002d04 <setPhaseVoltage+0x334>)
 8002c1e:	edd3 6a00 	vldr	s13, [r3]
 8002c22:	4b3b      	ldr	r3, [pc, #236]	; (8002d10 <setPhaseVoltage+0x340>)
 8002c24:	ed93 7a00 	vldr	s14, [r3]
 8002c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c2c:	edc7 7a06 	vstr	s15, [r7, #24]
	dc_b = _constrain(Ub / voltage_power_supply, 0.0f, 0.94f);
 8002c30:	4b35      	ldr	r3, [pc, #212]	; (8002d08 <setPhaseVoltage+0x338>)
 8002c32:	edd3 6a00 	vldr	s13, [r3]
 8002c36:	4b36      	ldr	r3, [pc, #216]	; (8002d10 <setPhaseVoltage+0x340>)
 8002c38:	ed93 7a00 	vldr	s14, [r3]
 8002c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c48:	d502      	bpl.n	8002c50 <setPhaseVoltage+0x280>
 8002c4a:	eddf 7a32 	vldr	s15, [pc, #200]	; 8002d14 <setPhaseVoltage+0x344>
 8002c4e:	e019      	b.n	8002c84 <setPhaseVoltage+0x2b4>
 8002c50:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <setPhaseVoltage+0x338>)
 8002c52:	edd3 6a00 	vldr	s13, [r3]
 8002c56:	4b2e      	ldr	r3, [pc, #184]	; (8002d10 <setPhaseVoltage+0x340>)
 8002c58:	ed93 7a00 	vldr	s14, [r3]
 8002c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c60:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002d18 <setPhaseVoltage+0x348>
 8002c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6c:	dd02      	ble.n	8002c74 <setPhaseVoltage+0x2a4>
 8002c6e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8002d18 <setPhaseVoltage+0x348>
 8002c72:	e007      	b.n	8002c84 <setPhaseVoltage+0x2b4>
 8002c74:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <setPhaseVoltage+0x338>)
 8002c76:	edd3 6a00 	vldr	s13, [r3]
 8002c7a:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <setPhaseVoltage+0x340>)
 8002c7c:	ed93 7a00 	vldr	s14, [r3]
 8002c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c84:	edc7 7a05 	vstr	s15, [r7, #20]
	dc_c = _constrain(Uc / voltage_power_supply, 0.0f, 0.94f);
 8002c88:	4b20      	ldr	r3, [pc, #128]	; (8002d0c <setPhaseVoltage+0x33c>)
 8002c8a:	edd3 6a00 	vldr	s13, [r3]
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <setPhaseVoltage+0x340>)
 8002c90:	ed93 7a00 	vldr	s14, [r3]
 8002c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca0:	d502      	bpl.n	8002ca8 <setPhaseVoltage+0x2d8>
 8002ca2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8002d14 <setPhaseVoltage+0x344>
 8002ca6:	e019      	b.n	8002cdc <setPhaseVoltage+0x30c>
 8002ca8:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <setPhaseVoltage+0x33c>)
 8002caa:	edd3 6a00 	vldr	s13, [r3]
 8002cae:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <setPhaseVoltage+0x340>)
 8002cb0:	ed93 7a00 	vldr	s14, [r3]
 8002cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cb8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002d18 <setPhaseVoltage+0x348>
 8002cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc4:	dd02      	ble.n	8002ccc <setPhaseVoltage+0x2fc>
 8002cc6:	eddf 7a14 	vldr	s15, [pc, #80]	; 8002d18 <setPhaseVoltage+0x348>
 8002cca:	e007      	b.n	8002cdc <setPhaseVoltage+0x30c>
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <setPhaseVoltage+0x33c>)
 8002cce:	edd3 6a00 	vldr	s13, [r3]
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <setPhaseVoltage+0x340>)
 8002cd4:	ed93 7a00 	vldr	s14, [r3]
 8002cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cdc:	edc7 7a04 	vstr	s15, [r7, #16]
	writeDutyCycle3PWM(dc_a, dc_b, dc_c);
 8002ce0:	ed97 1a04 	vldr	s2, [r7, #16]
 8002ce4:	edd7 0a05 	vldr	s1, [r7, #20]
 8002ce8:	ed97 0a06 	vldr	s0, [r7, #24]
 8002cec:	f7ff fe34 	bl	8002958 <writeDutyCycle3PWM>
}
 8002cf0:	bf00      	nop
 8002cf2:	3730      	adds	r7, #48	; 0x30
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf8:	e857b07f 	.word	0xe857b07f
 8002cfc:	3febb67a 	.word	0x3febb67a
 8002d00:	20000c60 	.word	0x20000c60
 8002d04:	200008f8 	.word	0x200008f8
 8002d08:	200008fc 	.word	0x200008fc
 8002d0c:	20000900 	.word	0x20000900
 8002d10:	20000c44 	.word	0x20000c44
 8002d14:	00000000 	.word	0x00000000
 8002d18:	3f70a3d7 	.word	0x3f70a3d7

08002d1c <needsSearch>:

// returns 0 if it does need search for absolute zero
// 0 - magnetic sensor (& encoder with index which is found)
// 1 - encoder with index (with index not found yet)
int needsSearch() {
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
	return 0;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	0000      	movs	r0, r0
	...

08002d30 <absoluteZeroSearch>:
// Encoder alignment the absolute zero angle
// - to the index
int absoluteZeroSearch() {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
// search the absolute zero with small velocity
	float limit_vel = velocity_limit;
 8002d36:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <absoluteZeroSearch+0x98>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	607b      	str	r3, [r7, #4]
	float limit_volt = voltage_limit;
 8002d3c:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <absoluteZeroSearch+0x9c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	603b      	str	r3, [r7, #0]
	velocity_limit = velocity_index_search;
 8002d42:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <absoluteZeroSearch+0xa0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a20      	ldr	r2, [pc, #128]	; (8002dc8 <absoluteZeroSearch+0x98>)
 8002d48:	6013      	str	r3, [r2, #0]
	voltage_limit = voltage_sensor_align;
 8002d4a:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <absoluteZeroSearch+0xa4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1f      	ldr	r2, [pc, #124]	; (8002dcc <absoluteZeroSearch+0x9c>)
 8002d50:	6013      	str	r3, [r2, #0]
	shaft_angle = 0;
 8002d52:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <absoluteZeroSearch+0xa8>)
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
	while (needsSearch() && shaft_angle < _2PI) {
 8002d5a:	e005      	b.n	8002d68 <absoluteZeroSearch+0x38>
		angleOpenloop(1.5 * _2PI);
 8002d5c:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8002ddc <absoluteZeroSearch+0xac>
 8002d60:	f001 fdfe 	bl	8004960 <angleOpenloop>
		// call important for some sensors not to loose count
		// not needed for the search
		getAngle();
 8002d64:	f7ff fb80 	bl	8002468 <getAngle>
	while (needsSearch() && shaft_angle < _2PI) {
 8002d68:	f7ff ffd8 	bl	8002d1c <needsSearch>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00c      	beq.n	8002d8c <absoluteZeroSearch+0x5c>
 8002d72:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <absoluteZeroSearch+0xa8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd fbb2 	bl	80004e0 <__aeabi_f2d>
 8002d7c:	a310      	add	r3, pc, #64	; (adr r3, 8002dc0 <absoluteZeroSearch+0x90>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fd fe77 	bl	8000a74 <__aeabi_dcmplt>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1e7      	bne.n	8002d5c <absoluteZeroSearch+0x2c>
	}
	setPhaseVoltage(0, 0, 0);
 8002d8c:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8002de0 <absoluteZeroSearch+0xb0>
 8002d90:	eddf 0a13 	vldr	s1, [pc, #76]	; 8002de0 <absoluteZeroSearch+0xb0>
 8002d94:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002de0 <absoluteZeroSearch+0xb0>
 8002d98:	f7ff fe1a 	bl	80029d0 <setPhaseVoltage>

// re-init the limits
	velocity_limit = limit_vel;
 8002d9c:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <absoluteZeroSearch+0x98>)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6013      	str	r3, [r2, #0]
	voltage_limit = limit_volt;
 8002da2:	4a0a      	ldr	r2, [pc, #40]	; (8002dcc <absoluteZeroSearch+0x9c>)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	6013      	str	r3, [r2, #0]
	return !needsSearch();
 8002da8:	f7ff ffb8 	bl	8002d1c <needsSearch>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	bf0c      	ite	eq
 8002db2:	2301      	moveq	r3, #1
 8002db4:	2300      	movne	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	54442eea 	.word	0x54442eea
 8002dc4:	401921fb 	.word	0x401921fb
 8002dc8:	20000c68 	.word	0x20000c68
 8002dcc:	20000c60 	.word	0x20000c60
 8002dd0:	20000c40 	.word	0x20000c40
 8002dd4:	20000c3c 	.word	0x20000c3c
 8002dd8:	20000908 	.word	0x20000908
 8002ddc:	4116cbe4 	.word	0x4116cbe4
	...

08002de8 <alignSensor>:
// Encoder alignment to electrical 0 angle
int alignSensor() {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	; 0x30
 8002dec:	af00      	add	r7, sp, #0
	int exit_flag = 1; //success
 8002dee:	2301      	movs	r3, #1
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
// if unknown natural direction
	if (!_isset(sensor_direction)) {
 8002df2:	4bb5      	ldr	r3, [pc, #724]	; (80030c8 <alignSensor+0x2e0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4ab5      	ldr	r2, [pc, #724]	; (80030cc <alignSensor+0x2e4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	f040 80b8 	bne.w	8002f6e <alignSensor+0x186>
		// check if sensor needs zero search
		if (needsSearch()) //needSearch == 0 because use Magnetic sensor
 8002dfe:	f7ff ff8d 	bl	8002d1c <needsSearch>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <alignSensor+0x26>
			exit_flag = absoluteZeroSearch(); // o
 8002e08:	f7ff ff92 	bl	8002d30 <absoluteZeroSearch>
 8002e0c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (!exit_flag)
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <alignSensor+0x30>
			return exit_flag;
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	e193      	b.n	8003140 <alignSensor+0x358>

		// find natural direction
		// move one electrical revolution forward
		for (int i = 0; i <= 500; i++) {
 8002e18:	2300      	movs	r3, #0
 8002e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e1c:	e034      	b.n	8002e88 <alignSensor+0xa0>
			float angle = _3PI_2 + _2PI * i / 500.0f;
 8002e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e20:	f7fd fb4c 	bl	80004bc <__aeabi_i2d>
 8002e24:	a3a4      	add	r3, pc, #656	; (adr r3, 80030b8 <alignSensor+0x2d0>)
 8002e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2a:	f7fd fbb1 	bl	8000590 <__aeabi_dmul>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4610      	mov	r0, r2
 8002e34:	4619      	mov	r1, r3
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	4ba5      	ldr	r3, [pc, #660]	; (80030d0 <alignSensor+0x2e8>)
 8002e3c:	f7fd fcd2 	bl	80007e4 <__aeabi_ddiv>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4610      	mov	r0, r2
 8002e46:	4619      	mov	r1, r3
 8002e48:	a39d      	add	r3, pc, #628	; (adr r3, 80030c0 <alignSensor+0x2d8>)
 8002e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4e:	f7fd f9e9 	bl	8000224 <__adddf3>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f7fd fe71 	bl	8000b40 <__aeabi_d2f>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	607b      	str	r3, [r7, #4]
			setPhaseVoltage(voltage_sensor_align, 0, angle);
 8002e62:	4b9c      	ldr	r3, [pc, #624]	; (80030d4 <alignSensor+0x2ec>)
 8002e64:	edd3 7a00 	vldr	s15, [r3]
 8002e68:	ed97 1a01 	vldr	s2, [r7, #4]
 8002e6c:	eddf 0a9a 	vldr	s1, [pc, #616]	; 80030d8 <alignSensor+0x2f0>
 8002e70:	eeb0 0a67 	vmov.f32	s0, s15
 8002e74:	f7ff fdac 	bl	80029d0 <setPhaseVoltage>
			updateSensor();
 8002e78:	f7ff faaa 	bl	80023d0 <updateSensor>
			HAL_Delay(1);
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	f002 f9c7 	bl	8005210 <HAL_Delay>
		for (int i = 0; i <= 500; i++) {
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	3301      	adds	r3, #1
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e8e:	ddc6      	ble.n	8002e1e <alignSensor+0x36>
		}
		updateSensor();
 8002e90:	f7ff fa9e 	bl	80023d0 <updateSensor>
		// take and angle in the middle
		float mid_angle = getAngle();
 8002e94:	f7ff fae8 	bl	8002468 <getAngle>
 8002e98:	ed87 0a04 	vstr	s0, [r7, #16]
		// move one electrical revolution backwards
		for (int i = 500; i >= 0; i--) {
 8002e9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea2:	e034      	b.n	8002f0e <alignSensor+0x126>
			float angle = _3PI_2 + _2PI * i / 500.0f;
 8002ea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ea6:	f7fd fb09 	bl	80004bc <__aeabi_i2d>
 8002eaa:	a383      	add	r3, pc, #524	; (adr r3, 80030b8 <alignSensor+0x2d0>)
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f7fd fb6e 	bl	8000590 <__aeabi_dmul>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	4b83      	ldr	r3, [pc, #524]	; (80030d0 <alignSensor+0x2e8>)
 8002ec2:	f7fd fc8f 	bl	80007e4 <__aeabi_ddiv>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4610      	mov	r0, r2
 8002ecc:	4619      	mov	r1, r3
 8002ece:	a37c      	add	r3, pc, #496	; (adr r3, 80030c0 <alignSensor+0x2d8>)
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f7fd f9a6 	bl	8000224 <__adddf3>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f7fd fe2e 	bl	8000b40 <__aeabi_d2f>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	60bb      	str	r3, [r7, #8]
			setPhaseVoltage(voltage_sensor_align, 0, angle);
 8002ee8:	4b7a      	ldr	r3, [pc, #488]	; (80030d4 <alignSensor+0x2ec>)
 8002eea:	edd3 7a00 	vldr	s15, [r3]
 8002eee:	ed97 1a02 	vldr	s2, [r7, #8]
 8002ef2:	eddf 0a79 	vldr	s1, [pc, #484]	; 80030d8 <alignSensor+0x2f0>
 8002ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8002efa:	f7ff fd69 	bl	80029d0 <setPhaseVoltage>
			updateSensor();
 8002efe:	f7ff fa67 	bl	80023d0 <updateSensor>
			HAL_Delay(1);
 8002f02:	2001      	movs	r0, #1
 8002f04:	f002 f984 	bl	8005210 <HAL_Delay>
		for (int i = 500; i >= 0; i--) {
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	dac7      	bge.n	8002ea4 <alignSensor+0xbc>
		}
		updateSensor();
 8002f14:	f7ff fa5c 	bl	80023d0 <updateSensor>
		float end_angle = getAngle();
 8002f18:	f7ff faa6 	bl	8002468 <getAngle>
 8002f1c:	ed87 0a03 	vstr	s0, [r7, #12]
		setPhaseVoltage(0, 0, 0);
 8002f20:	ed9f 1a6d 	vldr	s2, [pc, #436]	; 80030d8 <alignSensor+0x2f0>
 8002f24:	eddf 0a6c 	vldr	s1, [pc, #432]	; 80030d8 <alignSensor+0x2f0>
 8002f28:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 80030d8 <alignSensor+0x2f0>
 8002f2c:	f7ff fd50 	bl	80029d0 <setPhaseVoltage>
		HAL_Delay(100);
 8002f30:	2064      	movs	r0, #100	; 0x64
 8002f32:	f002 f96d 	bl	8005210 <HAL_Delay>
		// determine the direction the sensor moved
		if (mid_angle == end_angle) {
 8002f36:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f3e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f46:	d101      	bne.n	8002f4c <alignSensor+0x164>
			return 0; // failed calibration
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e0f9      	b.n	8003140 <alignSensor+0x358>
		} else if (mid_angle < end_angle) {
 8002f4c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f50:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5c:	d504      	bpl.n	8002f68 <alignSensor+0x180>
			sensor_direction = CCW;
 8002f5e:	4b5a      	ldr	r3, [pc, #360]	; (80030c8 <alignSensor+0x2e0>)
 8002f60:	f04f 32ff 	mov.w	r2, #4294967295
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	e002      	b.n	8002f6e <alignSensor+0x186>
		} else {
			sensor_direction = CW;
 8002f68:	4b57      	ldr	r3, [pc, #348]	; (80030c8 <alignSensor+0x2e0>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
		}
	}

// zero electric angle not known
	if (!_isset(zero_electric_angle)) {
 8002f6e:	4b5b      	ldr	r3, [pc, #364]	; (80030dc <alignSensor+0x2f4>)
 8002f70:	edd3 7a00 	vldr	s15, [r3]
 8002f74:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80030e0 <alignSensor+0x2f8>
 8002f78:	eef4 7a47 	vcmp.f32	s15, s14
 8002f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f80:	f040 80dd 	bne.w	800313e <alignSensor+0x356>
		// align the electrical phases of the motor and sensor
		// set angle -90(270 = 3PI/2) degrees
		for (int round = 0; round < pole_pairs; round++) {
 8002f84:	2300      	movs	r3, #0
 8002f86:	623b      	str	r3, [r7, #32]
 8002f88:	e07f      	b.n	800308a <alignSensor+0x2a2>
			zero_electric_angle = 0.0;
 8002f8a:	4b54      	ldr	r3, [pc, #336]	; (80030dc <alignSensor+0x2f4>)
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
			for (int k = 100; k >= 0; k--) {
 8002f92:	2364      	movs	r3, #100	; 0x64
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	e012      	b.n	8002fbe <alignSensor+0x1d6>
				setPhaseVoltage(voltage_sensor_align, 0, _3PI_2);
 8002f98:	4b4e      	ldr	r3, [pc, #312]	; (80030d4 <alignSensor+0x2ec>)
 8002f9a:	edd3 7a00 	vldr	s15, [r3]
 8002f9e:	ed9f 1a51 	vldr	s2, [pc, #324]	; 80030e4 <alignSensor+0x2fc>
 8002fa2:	eddf 0a4d 	vldr	s1, [pc, #308]	; 80030d8 <alignSensor+0x2f0>
 8002fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8002faa:	f7ff fd11 	bl	80029d0 <setPhaseVoltage>
				updateSensor();
 8002fae:	f7ff fa0f 	bl	80023d0 <updateSensor>
				HAL_Delay(1);
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	f002 f92c 	bl	8005210 <HAL_Delay>
			for (int k = 100; k >= 0; k--) {
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	dae9      	bge.n	8002f98 <alignSensor+0x1b0>
			}
//			setPhaseVoltage(voltage_sensor_align, 0, _3PI_2);
//			HAL_Delay(500);
			updateSensor();
 8002fc4:	f7ff fa04 	bl	80023d0 <updateSensor>
			align.zero_angle_pp[round] = electricalAngle();	//radian
 8002fc8:	f7ff fc44 	bl	8002854 <electricalAngle>
 8002fcc:	eef0 7a40 	vmov.f32	s15, s0
 8002fd0:	4a45      	ldr	r2, [pc, #276]	; (80030e8 <alignSensor+0x300>)
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	330e      	adds	r3, #14
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	edc3 7a00 	vstr	s15, [r3]
//			if ((align.zero_angle_pp[round] < 1.0)
//					&& (align.zero_angle_pp[round] > 0.0)) {
//			align.zero_angle_pp[round] = align.zero_angle_pp[round] + _2PI;
//		}
//			align.shaft_angle_pp[round] = getAngle() * (360.0 / _2PI);	//degree
			align.shaft_angle_pp[round] = getMechanicalAngle();	//rad
 8002fde:	f7ff fa35 	bl	800244c <getMechanicalAngle>
 8002fe2:	eef0 7a40 	vmov.f32	s15, s0
 8002fe6:	4a40      	ldr	r2, [pc, #256]	; (80030e8 <alignSensor+0x300>)
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	edc3 7a00 	vstr	s15, [r3]
//    zero_electric_angle = _normalizeAngle(_electricalAngle(sensor_direction*getAngle(), pole_pairs));
			HAL_Delay(20);
 8002ff2:	2014      	movs	r0, #20
 8002ff4:	f002 f90c 	bl	8005210 <HAL_Delay>
			// stop everything
			setPhaseVoltage(0, 0, 0);
 8002ff8:	ed9f 1a37 	vldr	s2, [pc, #220]	; 80030d8 <alignSensor+0x2f0>
 8002ffc:	eddf 0a36 	vldr	s1, [pc, #216]	; 80030d8 <alignSensor+0x2f0>
 8003000:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80030d8 <alignSensor+0x2f0>
 8003004:	f7ff fce4 	bl	80029d0 <setPhaseVoltage>
			HAL_Delay(100);
 8003008:	2064      	movs	r0, #100	; 0x64
 800300a:	f002 f901 	bl	8005210 <HAL_Delay>
			for (int j = 0; j <= 100; j++) {
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	e034      	b.n	800307e <alignSensor+0x296>
				float angle = _3PI_2 + _2PI * j / 100.0f;
 8003014:	69b8      	ldr	r0, [r7, #24]
 8003016:	f7fd fa51 	bl	80004bc <__aeabi_i2d>
 800301a:	a327      	add	r3, pc, #156	; (adr r3, 80030b8 <alignSensor+0x2d0>)
 800301c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003020:	f7fd fab6 	bl	8000590 <__aeabi_dmul>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	4b2e      	ldr	r3, [pc, #184]	; (80030ec <alignSensor+0x304>)
 8003032:	f7fd fbd7 	bl	80007e4 <__aeabi_ddiv>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4610      	mov	r0, r2
 800303c:	4619      	mov	r1, r3
 800303e:	a320      	add	r3, pc, #128	; (adr r3, 80030c0 <alignSensor+0x2d8>)
 8003040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003044:	f7fd f8ee 	bl	8000224 <__adddf3>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	f7fd fd76 	bl	8000b40 <__aeabi_d2f>
 8003054:	4603      	mov	r3, r0
 8003056:	603b      	str	r3, [r7, #0]
				setPhaseVoltage(voltage_sensor_align, 0, angle);
 8003058:	4b1e      	ldr	r3, [pc, #120]	; (80030d4 <alignSensor+0x2ec>)
 800305a:	edd3 7a00 	vldr	s15, [r3]
 800305e:	ed97 1a00 	vldr	s2, [r7]
 8003062:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80030d8 <alignSensor+0x2f0>
 8003066:	eeb0 0a67 	vmov.f32	s0, s15
 800306a:	f7ff fcb1 	bl	80029d0 <setPhaseVoltage>
				updateSensor();
 800306e:	f7ff f9af 	bl	80023d0 <updateSensor>
				HAL_Delay(1);
 8003072:	2001      	movs	r0, #1
 8003074:	f002 f8cc 	bl	8005210 <HAL_Delay>
			for (int j = 0; j <= 100; j++) {
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	3301      	adds	r3, #1
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	2b64      	cmp	r3, #100	; 0x64
 8003082:	ddc7      	ble.n	8003014 <alignSensor+0x22c>
		for (int round = 0; round < pole_pairs; round++) {
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	3301      	adds	r3, #1
 8003088:	623b      	str	r3, [r7, #32]
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <alignSensor+0x308>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6a3a      	ldr	r2, [r7, #32]
 8003090:	429a      	cmp	r2, r3
 8003092:	f6ff af7a 	blt.w	8002f8a <alignSensor+0x1a2>
			}
		}
		setPhaseVoltage(0, 0, 0);
 8003096:	ed9f 1a10 	vldr	s2, [pc, #64]	; 80030d8 <alignSensor+0x2f0>
 800309a:	eddf 0a0f 	vldr	s1, [pc, #60]	; 80030d8 <alignSensor+0x2f0>
 800309e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80030d8 <alignSensor+0x2f0>
 80030a2:	f7ff fc95 	bl	80029d0 <setPhaseVoltage>
		HAL_Delay(100);
 80030a6:	2064      	movs	r0, #100	; 0x64
 80030a8:	f002 f8b2 	bl	8005210 <HAL_Delay>
		for (int round = 0; round < pole_pairs; round++) {
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e032      	b.n	8003118 <alignSensor+0x330>
 80030b2:	bf00      	nop
 80030b4:	f3af 8000 	nop.w
 80030b8:	54442eea 	.word	0x54442eea
 80030bc:	401921fb 	.word	0x401921fb
 80030c0:	7f330d32 	.word	0x7f330d32
 80030c4:	4012d97c 	.word	0x4012d97c
 80030c8:	2000001c 	.word	0x2000001c
 80030cc:	ffffcfc7 	.word	0xffffcfc7
 80030d0:	407f4000 	.word	0x407f4000
 80030d4:	20000c3c 	.word	0x20000c3c
 80030d8:	00000000 	.word	0x00000000
 80030dc:	20000014 	.word	0x20000014
 80030e0:	c640e400 	.word	0xc640e400
 80030e4:	4096cbe4 	.word	0x4096cbe4
 80030e8:	20000c70 	.word	0x20000c70
 80030ec:	40590000 	.word	0x40590000
 80030f0:	20000c5c 	.word	0x20000c5c
			zero_electric_angle = zero_electric_angle
					+ align.zero_angle_pp[round];
 80030f4:	4a14      	ldr	r2, [pc, #80]	; (8003148 <alignSensor+0x360>)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	330e      	adds	r3, #14
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	ed93 7a00 	vldr	s14, [r3]
 8003102:	4b12      	ldr	r3, [pc, #72]	; (800314c <alignSensor+0x364>)
 8003104:	edd3 7a00 	vldr	s15, [r3]
 8003108:	ee77 7a27 	vadd.f32	s15, s14, s15
			zero_electric_angle = zero_electric_angle
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <alignSensor+0x364>)
 800310e:	edc3 7a00 	vstr	s15, [r3]
		for (int round = 0; round < pole_pairs; round++) {
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3301      	adds	r3, #1
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <alignSensor+0x368>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	429a      	cmp	r2, r3
 8003120:	dbe8      	blt.n	80030f4 <alignSensor+0x30c>
		}
		zero_electric_angle = zero_electric_angle / pole_pairs;
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <alignSensor+0x364>)
 8003124:	edd3 6a00 	vldr	s13, [r3]
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <alignSensor+0x368>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	ee07 3a90 	vmov	s15, r3
 8003130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003138:	4b04      	ldr	r3, [pc, #16]	; (800314c <alignSensor+0x364>)
 800313a:	edc3 7a00 	vstr	s15, [r3]
	}
	return exit_flag;
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003140:	4618      	mov	r0, r3
 8003142:	3730      	adds	r7, #48	; 0x30
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000c70 	.word	0x20000c70
 800314c:	20000014 	.word	0x20000014
 8003150:	20000c5c 	.word	0x20000c5c

08003154 <initGain>:
void initGain() {
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0

	CurrentSense_resistance = 0.22;
 8003158:	4b95      	ldr	r3, [pc, #596]	; (80033b0 <initGain+0x25c>)
 800315a:	4a96      	ldr	r2, [pc, #600]	; (80033b4 <initGain+0x260>)
 800315c:	601a      	str	r2, [r3, #0]
	CurrentSense_gain = 5.0;
 800315e:	4b96      	ldr	r3, [pc, #600]	; (80033b8 <initGain+0x264>)
 8003160:	4a96      	ldr	r2, [pc, #600]	; (80033bc <initGain+0x268>)
 8003162:	601a      	str	r2, [r3, #0]
	phase_resistance = 9.526; 	// ht4315 = 9.526     , mg4005 = 1.4
 8003164:	4b96      	ldr	r3, [pc, #600]	; (80033c0 <initGain+0x26c>)
 8003166:	4a97      	ldr	r2, [pc, #604]	; (80033c4 <initGain+0x270>)
 8003168:	601a      	str	r2, [r3, #0]
	phase_inductance = 0.00245; // ht4315 = 0.00245   , mg4005 = 0.0005
 800316a:	4b97      	ldr	r3, [pc, #604]	; (80033c8 <initGain+0x274>)
 800316c:	4a97      	ldr	r2, [pc, #604]	; (80033cc <initGain+0x278>)
 800316e:	601a      	str	r2, [r3, #0]
	voltage_power_supply = 24.0;
 8003170:	4b97      	ldr	r3, [pc, #604]	; (80033d0 <initGain+0x27c>)
 8003172:	4a98      	ldr	r2, [pc, #608]	; (80033d4 <initGain+0x280>)
 8003174:	601a      	str	r2, [r3, #0]
	pole_pairs = 14;			// ht4315 = 14        , mg4005 =
 8003176:	4b98      	ldr	r3, [pc, #608]	; (80033d8 <initGain+0x284>)
 8003178:	220e      	movs	r2, #14
 800317a:	601a      	str	r2, [r3, #0]
	// flux_linkage = 60/(sqrt(3)*poles*pi*kv)   ref : https://vesc-project.com/node/52
	flux_linkage = 0.01968;     // ht4315 = 0.01968   , mg4005 = 0.0075
 800317c:	4b97      	ldr	r3, [pc, #604]	; (80033dc <initGain+0x288>)
 800317e:	4a98      	ldr	r2, [pc, #608]	; (80033e0 <initGain+0x28c>)
 8003180:	601a      	str	r2, [r3, #0]
	//gear_ratio                // ht4315 = 1:1       , mg4005 = 10:1
	//inertia_load = (gear_ratio^2) * inertia_motor
	inertia = 0.0000268;        // ht4315 = 0.0000268 , mg4005 = 0.0014
 8003182:	4b98      	ldr	r3, [pc, #608]	; (80033e4 <initGain+0x290>)
 8003184:	4a98      	ldr	r2, [pc, #608]	; (80033e8 <initGain+0x294>)
 8003186:	601a      	str	r2, [r3, #0]
	damping = 0.0;              // ht4315 = 0.0       , mg4005 =
 8003188:	4b98      	ldr	r3, [pc, #608]	; (80033ec <initGain+0x298>)
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	601a      	str	r2, [r3, #0]


	//The detection box can still calculate the kp and ki parameters.   ref : https://vesc-project.com/node/52
	//The observer gain can be calculates roughly as 1000 / (lambda^2) where lambda is in mWb.

	LPF_SMC_out.y_prev = 0.0;
 8003190:	4b97      	ldr	r3, [pc, #604]	; (80033f0 <initGain+0x29c>)
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	609a      	str	r2, [r3, #8]
	LPF_SMC_out.Tf = 0.0001;
 8003198:	4b95      	ldr	r3, [pc, #596]	; (80033f0 <initGain+0x29c>)
 800319a:	4a96      	ldr	r2, [pc, #600]	; (80033f4 <initGain+0x2a0>)
 800319c:	60da      	str	r2, [r3, #12]
	SMC_ang.limit = motor_param_SMC[11][motor_nbr] ;
 800319e:	4b96      	ldr	r3, [pc, #600]	; (80033f8 <initGain+0x2a4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a96      	ldr	r2, [pc, #600]	; (80033fc <initGain+0x2a8>)
 80031a4:	3337      	adds	r3, #55	; 0x37
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a94      	ldr	r2, [pc, #592]	; (8003400 <initGain+0x2ac>)
 80031ae:	6713      	str	r3, [r2, #112]	; 0x70
	SMC_ang.k = motor_param_SMC[8][motor_nbr] ;
 80031b0:	4b91      	ldr	r3, [pc, #580]	; (80033f8 <initGain+0x2a4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a91      	ldr	r2, [pc, #580]	; (80033fc <initGain+0x2a8>)
 80031b6:	3328      	adds	r3, #40	; 0x28
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a90      	ldr	r2, [pc, #576]	; (8003400 <initGain+0x2ac>)
 80031c0:	6493      	str	r3, [r2, #72]	; 0x48
	SMC_ang.ep = motor_param_SMC[9][motor_nbr] ;
 80031c2:	4b8d      	ldr	r3, [pc, #564]	; (80033f8 <initGain+0x2a4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a8d      	ldr	r2, [pc, #564]	; (80033fc <initGain+0x2a8>)
 80031c8:	332d      	adds	r3, #45	; 0x2d
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a8b      	ldr	r2, [pc, #556]	; (8003400 <initGain+0x2ac>)
 80031d2:	6513      	str	r3, [r2, #80]	; 0x50
	SMC_ang.delta = motor_param_SMC[10][motor_nbr] ;
 80031d4:	4b88      	ldr	r3, [pc, #544]	; (80033f8 <initGain+0x2a4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a88      	ldr	r2, [pc, #544]	; (80033fc <initGain+0x2a8>)
 80031da:	3332      	adds	r3, #50	; 0x32
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a87      	ldr	r2, [pc, #540]	; (8003400 <initGain+0x2ac>)
 80031e4:	6553      	str	r3, [r2, #84]	; 0x54
	SMC_ang.g = motor_param_SMC[11][motor_nbr] ; // convergence rate of disturbance estimation error
 80031e6:	4b84      	ldr	r3, [pc, #528]	; (80033f8 <initGain+0x2a4>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a84      	ldr	r2, [pc, #528]	; (80033fc <initGain+0x2a8>)
 80031ec:	3337      	adds	r3, #55	; 0x37
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a82      	ldr	r2, [pc, #520]	; (8003400 <initGain+0x2ac>)
 80031f6:	6593      	str	r3, [r2, #88]	; 0x58
	SMC_ang.neta = motor_param_SMC[12][motor_nbr] ;
 80031f8:	4b7f      	ldr	r3, [pc, #508]	; (80033f8 <initGain+0x2a4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a7f      	ldr	r2, [pc, #508]	; (80033fc <initGain+0x2a8>)
 80031fe:	333c      	adds	r3, #60	; 0x3c
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a7e      	ldr	r2, [pc, #504]	; (8003400 <initGain+0x2ac>)
 8003208:	65d3      	str	r3, [r2, #92]	; 0x5c

	SMC_vel.limit = motor_param_SMC[5][motor_nbr];
 800320a:	4b7b      	ldr	r3, [pc, #492]	; (80033f8 <initGain+0x2a4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a7b      	ldr	r2, [pc, #492]	; (80033fc <initGain+0x2a8>)
 8003210:	3319      	adds	r3, #25
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a7a      	ldr	r2, [pc, #488]	; (8003404 <initGain+0x2b0>)
 800321a:	6713      	str	r3, [r2, #112]	; 0x70
	SMC_vel.k = motor_param_SMC[0][motor_nbr] ;
 800321c:	4b76      	ldr	r3, [pc, #472]	; (80033f8 <initGain+0x2a4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a76      	ldr	r2, [pc, #472]	; (80033fc <initGain+0x2a8>)
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a76      	ldr	r2, [pc, #472]	; (8003404 <initGain+0x2b0>)
 800322a:	6493      	str	r3, [r2, #72]	; 0x48
	SMC_vel.ep = motor_param_SMC[1][motor_nbr] ;
 800322c:	4b72      	ldr	r3, [pc, #456]	; (80033f8 <initGain+0x2a4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a72      	ldr	r2, [pc, #456]	; (80033fc <initGain+0x2a8>)
 8003232:	3305      	adds	r3, #5
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a72      	ldr	r2, [pc, #456]	; (8003404 <initGain+0x2b0>)
 800323c:	6513      	str	r3, [r2, #80]	; 0x50
	SMC_vel.delta = motor_param_SMC[2][motor_nbr] ;
 800323e:	4b6e      	ldr	r3, [pc, #440]	; (80033f8 <initGain+0x2a4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a6e      	ldr	r2, [pc, #440]	; (80033fc <initGain+0x2a8>)
 8003244:	330a      	adds	r3, #10
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a6d      	ldr	r2, [pc, #436]	; (8003404 <initGain+0x2b0>)
 800324e:	6553      	str	r3, [r2, #84]	; 0x54
	SMC_vel.g = motor_param_SMC[3][motor_nbr] ; // convergence rate of disturbance estimation error
 8003250:	4b69      	ldr	r3, [pc, #420]	; (80033f8 <initGain+0x2a4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a69      	ldr	r2, [pc, #420]	; (80033fc <initGain+0x2a8>)
 8003256:	330f      	adds	r3, #15
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a69      	ldr	r2, [pc, #420]	; (8003404 <initGain+0x2b0>)
 8003260:	6593      	str	r3, [r2, #88]	; 0x58
	SMC_vel.neta = motor_param_SMC[4][motor_nbr] ;
 8003262:	4b65      	ldr	r3, [pc, #404]	; (80033f8 <initGain+0x2a4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a65      	ldr	r2, [pc, #404]	; (80033fc <initGain+0x2a8>)
 8003268:	3314      	adds	r3, #20
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a64      	ldr	r2, [pc, #400]	; (8003404 <initGain+0x2b0>)
 8003272:	65d3      	str	r3, [r2, #92]	; 0x5c
	SMC_vel.kp = motor_param_SMC[6][motor_nbr] ;
 8003274:	4b60      	ldr	r3, [pc, #384]	; (80033f8 <initGain+0x2a4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a60      	ldr	r2, [pc, #384]	; (80033fc <initGain+0x2a8>)
 800327a:	331e      	adds	r3, #30
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a60      	ldr	r2, [pc, #384]	; (8003404 <initGain+0x2b0>)
 8003284:	6613      	str	r3, [r2, #96]	; 0x60
	SMC_vel.ki = motor_param_SMC[7][motor_nbr] ;
 8003286:	4b5c      	ldr	r3, [pc, #368]	; (80033f8 <initGain+0x2a4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a5c      	ldr	r2, [pc, #368]	; (80033fc <initGain+0x2a8>)
 800328c:	3323      	adds	r3, #35	; 0x23
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a5b      	ldr	r2, [pc, #364]	; (8003404 <initGain+0x2b0>)
 8003296:	6653      	str	r3, [r2, #100]	; 0x64

	fusion_vel.limit = motor_param_SMC[5][motor_nbr];
 8003298:	4b57      	ldr	r3, [pc, #348]	; (80033f8 <initGain+0x2a4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a57      	ldr	r2, [pc, #348]	; (80033fc <initGain+0x2a8>)
 800329e:	3319      	adds	r3, #25
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a58      	ldr	r2, [pc, #352]	; (8003408 <initGain+0x2b4>)
 80032a8:	6653      	str	r3, [r2, #100]	; 0x64
	fusion_vel.k = motor_param_SMC[0][motor_nbr] ;
 80032aa:	4b53      	ldr	r3, [pc, #332]	; (80033f8 <initGain+0x2a4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a53      	ldr	r2, [pc, #332]	; (80033fc <initGain+0x2a8>)
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a54      	ldr	r2, [pc, #336]	; (8003408 <initGain+0x2b4>)
 80032b8:	6393      	str	r3, [r2, #56]	; 0x38
	fusion_vel.ep = motor_param_SMC[1][motor_nbr] ;
 80032ba:	4b4f      	ldr	r3, [pc, #316]	; (80033f8 <initGain+0x2a4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a4f      	ldr	r2, [pc, #316]	; (80033fc <initGain+0x2a8>)
 80032c0:	3305      	adds	r3, #5
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a4f      	ldr	r2, [pc, #316]	; (8003408 <initGain+0x2b4>)
 80032ca:	63d3      	str	r3, [r2, #60]	; 0x3c
	fusion_vel.delta = motor_param_SMC[2][motor_nbr] ;
 80032cc:	4b4a      	ldr	r3, [pc, #296]	; (80033f8 <initGain+0x2a4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a4a      	ldr	r2, [pc, #296]	; (80033fc <initGain+0x2a8>)
 80032d2:	330a      	adds	r3, #10
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a4b      	ldr	r2, [pc, #300]	; (8003408 <initGain+0x2b4>)
 80032dc:	6413      	str	r3, [r2, #64]	; 0x40
	fusion_vel.g = motor_param_SMC[3][motor_nbr] ; // convergence rate of disturbance estimation error
 80032de:	4b46      	ldr	r3, [pc, #280]	; (80033f8 <initGain+0x2a4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a46      	ldr	r2, [pc, #280]	; (80033fc <initGain+0x2a8>)
 80032e4:	330f      	adds	r3, #15
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a46      	ldr	r2, [pc, #280]	; (8003408 <initGain+0x2b4>)
 80032ee:	6453      	str	r3, [r2, #68]	; 0x44
	fusion_vel.neta = motor_param_SMC[4][motor_nbr] ;
 80032f0:	4b41      	ldr	r3, [pc, #260]	; (80033f8 <initGain+0x2a4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a41      	ldr	r2, [pc, #260]	; (80033fc <initGain+0x2a8>)
 80032f6:	3314      	adds	r3, #20
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a42      	ldr	r2, [pc, #264]	; (8003408 <initGain+0x2b4>)
 8003300:	6493      	str	r3, [r2, #72]	; 0x48
	fusion_vel.P = motor_param[7][motor_nbr];
 8003302:	4b3d      	ldr	r3, [pc, #244]	; (80033f8 <initGain+0x2a4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a41      	ldr	r2, [pc, #260]	; (800340c <initGain+0x2b8>)
 8003308:	3323      	adds	r3, #35	; 0x23
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a3d      	ldr	r2, [pc, #244]	; (8003408 <initGain+0x2b4>)
 8003312:	64d3      	str	r3, [r2, #76]	; 0x4c
	fusion_vel.I = motor_param[8][motor_nbr];
 8003314:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <initGain+0x2a4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a3c      	ldr	r2, [pc, #240]	; (800340c <initGain+0x2b8>)
 800331a:	3328      	adds	r3, #40	; 0x28
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a39      	ldr	r2, [pc, #228]	; (8003408 <initGain+0x2b4>)
 8003324:	6513      	str	r3, [r2, #80]	; 0x50
	fusion_vel.D = motor_param[9][motor_nbr];
 8003326:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <initGain+0x2a4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a38      	ldr	r2, [pc, #224]	; (800340c <initGain+0x2b8>)
 800332c:	332d      	adds	r3, #45	; 0x2d
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a34      	ldr	r2, [pc, #208]	; (8003408 <initGain+0x2b4>)
 8003336:	6553      	str	r3, [r2, #84]	; 0x54
	fusion_vel.anti_windup = motor_param_SMC[5][motor_nbr];
 8003338:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <initGain+0x2a4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a2f      	ldr	r2, [pc, #188]	; (80033fc <initGain+0x2a8>)
 800333e:	3319      	adds	r3, #25
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a30      	ldr	r2, [pc, #192]	; (8003408 <initGain+0x2b4>)
 8003348:	6613      	str	r3, [r2, #96]	; 0x60

//	LPF_a_est.y_prev = 0.0;
//	LPF_a_est.Tf = 0.001;
	LPF_w_est.y_prev = 0.0;
 800334a:	4b31      	ldr	r3, [pc, #196]	; (8003410 <initGain+0x2bc>)
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	609a      	str	r2, [r3, #8]
	LPF_w_est.Tf = 0.02;
 8003352:	4b2f      	ldr	r3, [pc, #188]	; (8003410 <initGain+0x2bc>)
 8003354:	4a2f      	ldr	r2, [pc, #188]	; (8003414 <initGain+0x2c0>)
 8003356:	60da      	str	r2, [r3, #12]
	LPF_r_est.y_prev = 0.0;
 8003358:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <initGain+0x2c4>)
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
	LPF_r_est.Tf = 0.02;
 8003360:	4b2d      	ldr	r3, [pc, #180]	; (8003418 <initGain+0x2c4>)
 8003362:	4a2c      	ldr	r2, [pc, #176]	; (8003414 <initGain+0x2c0>)
 8003364:	60da      	str	r2, [r3, #12]

//	LPF_current_a.y_prev = 0.0;
//	LPF_current_a.Tf = 0.01;
//	LPF_current_c.y_prev = 0.0;
//	LPF_current_c.Tf = 0.01;
	LPF_current_D.y_prev = 0.0;
 8003366:	4b2d      	ldr	r3, [pc, #180]	; (800341c <initGain+0x2c8>)
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
	LPF_current_D.Tf = 0.001;
 800336e:	4b2b      	ldr	r3, [pc, #172]	; (800341c <initGain+0x2c8>)
 8003370:	4a2b      	ldr	r2, [pc, #172]	; (8003420 <initGain+0x2cc>)
 8003372:	60da      	str	r2, [r3, #12]
	current_D.P = motor_param[1][motor_nbr];
 8003374:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <initGain+0x2a4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a24      	ldr	r2, [pc, #144]	; (800340c <initGain+0x2b8>)
 800337a:	3305      	adds	r3, #5
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a28      	ldr	r2, [pc, #160]	; (8003424 <initGain+0x2d0>)
 8003384:	62d3      	str	r3, [r2, #44]	; 0x2c
	current_D.I = motor_param[2][motor_nbr];
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <initGain+0x2a4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a20      	ldr	r2, [pc, #128]	; (800340c <initGain+0x2b8>)
 800338c:	330a      	adds	r3, #10
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a23      	ldr	r2, [pc, #140]	; (8003424 <initGain+0x2d0>)
 8003396:	6313      	str	r3, [r2, #48]	; 0x30
	current_D.D = motor_param[3][motor_nbr];
 8003398:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <initGain+0x2a4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1b      	ldr	r2, [pc, #108]	; (800340c <initGain+0x2b8>)
 800339e:	330f      	adds	r3, #15
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1f      	ldr	r2, [pc, #124]	; (8003424 <initGain+0x2d0>)
 80033a8:	6353      	str	r3, [r2, #52]	; 0x34
	current_D.output_ramp = 100000.0;
 80033aa:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <initGain+0x2d0>)
 80033ac:	e03c      	b.n	8003428 <initGain+0x2d4>
 80033ae:	bf00      	nop
 80033b0:	200008e8 	.word	0x200008e8
 80033b4:	3e6147ae 	.word	0x3e6147ae
 80033b8:	200008ec 	.word	0x200008ec
 80033bc:	40a00000 	.word	0x40a00000
 80033c0:	20000c48 	.word	0x20000c48
 80033c4:	41186a7f 	.word	0x41186a7f
 80033c8:	20000c4c 	.word	0x20000c4c
 80033cc:	3b20902e 	.word	0x3b20902e
 80033d0:	20000c44 	.word	0x20000c44
 80033d4:	41c00000 	.word	0x41c00000
 80033d8:	20000c5c 	.word	0x20000c5c
 80033dc:	20000c54 	.word	0x20000c54
 80033e0:	3ca137f4 	.word	0x3ca137f4
 80033e4:	20000c50 	.word	0x20000c50
 80033e8:	37e0d090 	.word	0x37e0d090
 80033ec:	20000c58 	.word	0x20000c58
 80033f0:	200009d0 	.word	0x200009d0
 80033f4:	38d1b717 	.word	0x38d1b717
 80033f8:	20000d20 	.word	0x20000d20
 80033fc:	2000014c 	.word	0x2000014c
 8003400:	20000b48 	.word	0x20000b48
 8003404:	20000ac8 	.word	0x20000ac8
 8003408:	20000bc8 	.word	0x20000bc8
 800340c:	20000020 	.word	0x20000020
 8003410:	200009a8 	.word	0x200009a8
 8003414:	3ca3d70a 	.word	0x3ca3d70a
 8003418:	200009bc 	.word	0x200009bc
 800341c:	20000980 	.word	0x20000980
 8003420:	3a83126f 	.word	0x3a83126f
 8003424:	200009e8 	.word	0x200009e8
 8003428:	4a52      	ldr	r2, [pc, #328]	; (8003574 <initGain+0x420>)
 800342a:	61da      	str	r2, [r3, #28]
	current_D.anti_windup = 3.0;
 800342c:	4b52      	ldr	r3, [pc, #328]	; (8003578 <initGain+0x424>)
 800342e:	4a53      	ldr	r2, [pc, #332]	; (800357c <initGain+0x428>)
 8003430:	625a      	str	r2, [r3, #36]	; 0x24
	current_D.limit = voltage_limit;
 8003432:	4b53      	ldr	r3, [pc, #332]	; (8003580 <initGain+0x42c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a50      	ldr	r2, [pc, #320]	; (8003578 <initGain+0x424>)
 8003438:	6213      	str	r3, [r2, #32]
////
	LPF_current_Q.y_prev = 0.0;
 800343a:	4b52      	ldr	r3, [pc, #328]	; (8003584 <initGain+0x430>)
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
	LPF_current_Q.Tf = 0.001;
 8003442:	4b50      	ldr	r3, [pc, #320]	; (8003584 <initGain+0x430>)
 8003444:	4a50      	ldr	r2, [pc, #320]	; (8003588 <initGain+0x434>)
 8003446:	60da      	str	r2, [r3, #12]
	current_Q.P = motor_param[4][motor_nbr];
 8003448:	4b50      	ldr	r3, [pc, #320]	; (800358c <initGain+0x438>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a50      	ldr	r2, [pc, #320]	; (8003590 <initGain+0x43c>)
 800344e:	3314      	adds	r3, #20
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a4f      	ldr	r2, [pc, #316]	; (8003594 <initGain+0x440>)
 8003458:	62d3      	str	r3, [r2, #44]	; 0x2c
	current_Q.I = motor_param[5][motor_nbr];
 800345a:	4b4c      	ldr	r3, [pc, #304]	; (800358c <initGain+0x438>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a4c      	ldr	r2, [pc, #304]	; (8003590 <initGain+0x43c>)
 8003460:	3319      	adds	r3, #25
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a4a      	ldr	r2, [pc, #296]	; (8003594 <initGain+0x440>)
 800346a:	6313      	str	r3, [r2, #48]	; 0x30
	current_Q.D = motor_param[6][motor_nbr];
 800346c:	4b47      	ldr	r3, [pc, #284]	; (800358c <initGain+0x438>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a47      	ldr	r2, [pc, #284]	; (8003590 <initGain+0x43c>)
 8003472:	331e      	adds	r3, #30
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a46      	ldr	r2, [pc, #280]	; (8003594 <initGain+0x440>)
 800347c:	6353      	str	r3, [r2, #52]	; 0x34
	current_Q.output_ramp = 100000.0;
 800347e:	4b45      	ldr	r3, [pc, #276]	; (8003594 <initGain+0x440>)
 8003480:	4a3c      	ldr	r2, [pc, #240]	; (8003574 <initGain+0x420>)
 8003482:	61da      	str	r2, [r3, #28]
	current_Q.anti_windup = voltage_limit;
 8003484:	4b3e      	ldr	r3, [pc, #248]	; (8003580 <initGain+0x42c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a42      	ldr	r2, [pc, #264]	; (8003594 <initGain+0x440>)
 800348a:	6253      	str	r3, [r2, #36]	; 0x24
	current_Q.limit = voltage_limit;
 800348c:	4b3c      	ldr	r3, [pc, #240]	; (8003580 <initGain+0x42c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a40      	ldr	r2, [pc, #256]	; (8003594 <initGain+0x440>)
 8003492:	6213      	str	r3, [r2, #32]
////
	LPF_velocity.y_prev = 0.0;
 8003494:	4b40      	ldr	r3, [pc, #256]	; (8003598 <initGain+0x444>)
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	609a      	str	r2, [r3, #8]
	LPF_velocity.Tf = 0.02;
 800349c:	4b3e      	ldr	r3, [pc, #248]	; (8003598 <initGain+0x444>)
 800349e:	4a3f      	ldr	r2, [pc, #252]	; (800359c <initGain+0x448>)
 80034a0:	60da      	str	r2, [r3, #12]
	velocity.P = motor_param[7][motor_nbr];
 80034a2:	4b3a      	ldr	r3, [pc, #232]	; (800358c <initGain+0x438>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a3a      	ldr	r2, [pc, #232]	; (8003590 <initGain+0x43c>)
 80034a8:	3323      	adds	r3, #35	; 0x23
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a3b      	ldr	r2, [pc, #236]	; (80035a0 <initGain+0x44c>)
 80034b2:	62d3      	str	r3, [r2, #44]	; 0x2c
	velocity.I = motor_param[8][motor_nbr];
 80034b4:	4b35      	ldr	r3, [pc, #212]	; (800358c <initGain+0x438>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a35      	ldr	r2, [pc, #212]	; (8003590 <initGain+0x43c>)
 80034ba:	3328      	adds	r3, #40	; 0x28
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a37      	ldr	r2, [pc, #220]	; (80035a0 <initGain+0x44c>)
 80034c4:	6313      	str	r3, [r2, #48]	; 0x30
	velocity.D = motor_param[9][motor_nbr];
 80034c6:	4b31      	ldr	r3, [pc, #196]	; (800358c <initGain+0x438>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a31      	ldr	r2, [pc, #196]	; (8003590 <initGain+0x43c>)
 80034cc:	332d      	adds	r3, #45	; 0x2d
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a32      	ldr	r2, [pc, #200]	; (80035a0 <initGain+0x44c>)
 80034d6:	6353      	str	r3, [r2, #52]	; 0x34
	velocity.output_ramp = 10000;
 80034d8:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <initGain+0x44c>)
 80034da:	4a32      	ldr	r2, [pc, #200]	; (80035a4 <initGain+0x450>)
 80034dc:	61da      	str	r2, [r3, #28]
	velocity.anti_windup = current_limit;
 80034de:	4b32      	ldr	r3, [pc, #200]	; (80035a8 <initGain+0x454>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a2f      	ldr	r2, [pc, #188]	; (80035a0 <initGain+0x44c>)
 80034e4:	6253      	str	r3, [r2, #36]	; 0x24
	velocity.limit = current_limit;
 80034e6:	4b30      	ldr	r3, [pc, #192]	; (80035a8 <initGain+0x454>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a2d      	ldr	r2, [pc, #180]	; (80035a0 <initGain+0x44c>)
 80034ec:	6213      	str	r3, [r2, #32]
////
	LPF_angle.y_prev = 0.0;
 80034ee:	4b2f      	ldr	r3, [pc, #188]	; (80035ac <initGain+0x458>)
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
	LPF_angle.Tf = 0.001;
 80034f6:	4b2d      	ldr	r3, [pc, #180]	; (80035ac <initGain+0x458>)
 80034f8:	4a23      	ldr	r2, [pc, #140]	; (8003588 <initGain+0x434>)
 80034fa:	60da      	str	r2, [r3, #12]
	angle.P = motor_param[10][motor_nbr];
 80034fc:	4b23      	ldr	r3, [pc, #140]	; (800358c <initGain+0x438>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a23      	ldr	r2, [pc, #140]	; (8003590 <initGain+0x43c>)
 8003502:	3332      	adds	r3, #50	; 0x32
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a29      	ldr	r2, [pc, #164]	; (80035b0 <initGain+0x45c>)
 800350c:	62d3      	str	r3, [r2, #44]	; 0x2c
	angle.I = motor_param[11][motor_nbr];
 800350e:	4b1f      	ldr	r3, [pc, #124]	; (800358c <initGain+0x438>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1f      	ldr	r2, [pc, #124]	; (8003590 <initGain+0x43c>)
 8003514:	3337      	adds	r3, #55	; 0x37
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a24      	ldr	r2, [pc, #144]	; (80035b0 <initGain+0x45c>)
 800351e:	6313      	str	r3, [r2, #48]	; 0x30
	angle.D = motor_param[12][motor_nbr];
 8003520:	4b1a      	ldr	r3, [pc, #104]	; (800358c <initGain+0x438>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1a      	ldr	r2, [pc, #104]	; (8003590 <initGain+0x43c>)
 8003526:	333c      	adds	r3, #60	; 0x3c
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a20      	ldr	r2, [pc, #128]	; (80035b0 <initGain+0x45c>)
 8003530:	6353      	str	r3, [r2, #52]	; 0x34
	angle.output_ramp = 10000;
 8003532:	4b1f      	ldr	r3, [pc, #124]	; (80035b0 <initGain+0x45c>)
 8003534:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <initGain+0x450>)
 8003536:	61da      	str	r2, [r3, #28]
	angle.anti_windup = motor_param[13][motor_nbr];
 8003538:	4b14      	ldr	r3, [pc, #80]	; (800358c <initGain+0x438>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a14      	ldr	r2, [pc, #80]	; (8003590 <initGain+0x43c>)
 800353e:	3341      	adds	r3, #65	; 0x41
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1a      	ldr	r2, [pc, #104]	; (80035b0 <initGain+0x45c>)
 8003548:	6253      	str	r3, [r2, #36]	; 0x24
	angle.limit = motor_param[13][motor_nbr];
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <initGain+0x438>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a10      	ldr	r2, [pc, #64]	; (8003590 <initGain+0x43c>)
 8003550:	3341      	adds	r3, #65	; 0x41
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a15      	ldr	r2, [pc, #84]	; (80035b0 <initGain+0x45c>)
 800355a:	6213      	str	r3, [r2, #32]

	LPF_acceleration.y_prev = 0.0 ;
 800355c:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <initGain+0x460>)
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	609a      	str	r2, [r3, #8]
	LPF_acceleration.Tf = 0.005 ;
 8003564:	4b13      	ldr	r3, [pc, #76]	; (80035b4 <initGain+0x460>)
 8003566:	4a14      	ldr	r2, [pc, #80]	; (80035b8 <initGain+0x464>)
 8003568:	60da      	str	r2, [r3, #12]
////	haptic.D = 0.0;
////	haptic.output_ramp = 0;
////	haptic.limit = velocity_limit_output;
////	passivity_gain = 0.0f;
////
}
 800356a:	bf00      	nop
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	47c35000 	.word	0x47c35000
 8003578:	200009e8 	.word	0x200009e8
 800357c:	40400000 	.word	0x40400000
 8003580:	20000c60 	.word	0x20000c60
 8003584:	2000096c 	.word	0x2000096c
 8003588:	3a83126f 	.word	0x3a83126f
 800358c:	20000d20 	.word	0x20000d20
 8003590:	20000020 	.word	0x20000020
 8003594:	20000a20 	.word	0x20000a20
 8003598:	20000944 	.word	0x20000944
 800359c:	3ca3d70a 	.word	0x3ca3d70a
 80035a0:	20000a58 	.word	0x20000a58
 80035a4:	461c4000 	.word	0x461c4000
 80035a8:	20000c64 	.word	0x20000c64
 80035ac:	20000930 	.word	0x20000930
 80035b0:	20000a90 	.word	0x20000a90
 80035b4:	20000958 	.word	0x20000958
 80035b8:	3ba3d70a 	.word	0x3ba3d70a

080035bc <initFOC>:
// zero_electric_offset , _sensor_direction : from Run code "find_sensor_offset_and_direction"
// sensor : Encoder , Hall sensor , Magnetic encoder
int initFOC(float zero_electric_offset, enum Direction _sensor_direction) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80035c6:	4603      	mov	r3, r0
 80035c8:	70fb      	strb	r3, [r7, #3]
	int exit_flag = 1;
 80035ca:	2301      	movs	r3, #1
 80035cc:	60fb      	str	r3, [r7, #12]
// align motor if necessary
// alignment necessary for encoders.
	if (_isset(zero_electric_offset))
 80035ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80035d2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800361c <initFOC+0x60>
 80035d6:	eef4 7a47 	vcmp.f32	s15, s14
 80035da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035de:	d006      	beq.n	80035ee <initFOC+0x32>

	{
		// absolute zero offset provided - no need to align
		zero_electric_angle = zero_electric_offset;
 80035e0:	4a0f      	ldr	r2, [pc, #60]	; (8003620 <initFOC+0x64>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6013      	str	r3, [r2, #0]
		// set the sensor direction - default CW
		sensor_direction = _sensor_direction;
 80035e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ea:	4a0e      	ldr	r2, [pc, #56]	; (8003624 <initFOC+0x68>)
 80035ec:	6013      	str	r3, [r2, #0]
	}
// sensor and motor alignment - can be skipped
// by setting motor.sensor_direction and motor.zero_electric_angle
	exit_flag *= alignSensor();
 80035ee:	f7ff fbfb 	bl	8002de8 <alignSensor>
 80035f2:	4602      	mov	r2, r0
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	60fb      	str	r3, [r7, #12]
// added the shaft_angle update
	shaft_angle = getAngle();
 80035fc:	f7fe ff34 	bl	8002468 <getAngle>
 8003600:	eef0 7a40 	vmov.f32	s15, s0
 8003604:	4b08      	ldr	r3, [pc, #32]	; (8003628 <initFOC+0x6c>)
 8003606:	edc3 7a00 	vstr	s15, [r3]
	HAL_Delay(500);
 800360a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800360e:	f001 fdff 	bl	8005210 <HAL_Delay>

	return exit_flag;
 8003612:	68fb      	ldr	r3, [r7, #12]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	c640e400 	.word	0xc640e400
 8003620:	20000014 	.word	0x20000014
 8003624:	2000001c 	.word	0x2000001c
 8003628:	20000908 	.word	0x20000908

0800362c <loopFOC>:
	if((setpoint > -0.1)&&(setpoint <= 0.1))
		return 0.3 * fabs(feedback) ;
	else
		return 0.7 * fabs(setpoint) ;
}
void loopFOC() {
 800362c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362e:	b0a3      	sub	sp, #140	; 0x8c
 8003630:	af0c      	add	r7, sp, #48	; 0x30
	updateSensor();
 8003632:	f7fe fecd 	bl	80023d0 <updateSensor>
// shaft angle/velocity need the update() to be called first
// get shaft angle
	shaft_angle = shaftAngle();
 8003636:	f7ff f86f 	bl	8002718 <shaftAngle>
 800363a:	eef0 7a40 	vmov.f32	s15, s0
 800363e:	4b69      	ldr	r3, [pc, #420]	; (80037e4 <loopFOC+0x1b8>)
 8003640:	edc3 7a00 	vstr	s15, [r3]
// electrical angle - need shaftAngle to be called first
	electrical_angle = electricalAngle();
 8003644:	f7ff f906 	bl	8002854 <electricalAngle>
 8003648:	eef0 7a40 	vmov.f32	s15, s0
 800364c:	4b66      	ldr	r3, [pc, #408]	; (80037e8 <loopFOC+0x1bc>)
 800364e:	edc3 7a00 	vstr	s15, [r3]

// Chosen TorqueControlType::foc_current
// read dq currents
	current = getFOCCurrents(electrical_angle);
 8003652:	4b65      	ldr	r3, [pc, #404]	; (80037e8 <loopFOC+0x1bc>)
 8003654:	edd3 7a00 	vldr	s15, [r3]
 8003658:	eeb0 0a67 	vmov.f32	s0, s15
 800365c:	f7fe fac0 	bl	8001be0 <getFOCCurrents>
 8003660:	eeb0 7a40 	vmov.f32	s14, s0
 8003664:	eef0 7a60 	vmov.f32	s15, s1
 8003668:	4b60      	ldr	r3, [pc, #384]	; (80037ec <loopFOC+0x1c0>)
 800366a:	ed83 7a00 	vstr	s14, [r3]
 800366e:	edc3 7a01 	vstr	s15, [r3, #4]
	LPF_current_Q.x = current.q;
 8003672:	4b5e      	ldr	r3, [pc, #376]	; (80037ec <loopFOC+0x1c0>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4a5e      	ldr	r2, [pc, #376]	; (80037f0 <loopFOC+0x1c4>)
 8003678:	6013      	str	r3, [r2, #0]
	LPF_current_Q = LowPassFilter(LPF_current_Q);
 800367a:	4e5d      	ldr	r6, [pc, #372]	; (80037f0 <loopFOC+0x1c4>)
 800367c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003680:	4b5b      	ldr	r3, [pc, #364]	; (80037f0 <loopFOC+0x1c4>)
 8003682:	466d      	mov	r5, sp
 8003684:	f103 020c 	add.w	r2, r3, #12
 8003688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800368c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003690:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003692:	4620      	mov	r0, r4
 8003694:	f000 f8ba 	bl	800380c <LowPassFilter>
 8003698:	4635      	mov	r5, r6
 800369a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800369e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	602b      	str	r3, [r5, #0]
	current.q = LPF_current_Q.y_prev;   // filter values
 80036a6:	4b52      	ldr	r3, [pc, #328]	; (80037f0 <loopFOC+0x1c4>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4a50      	ldr	r2, [pc, #320]	; (80037ec <loopFOC+0x1c0>)
 80036ac:	6053      	str	r3, [r2, #4]

	LPF_current_D.x = current.d;
 80036ae:	4b4f      	ldr	r3, [pc, #316]	; (80037ec <loopFOC+0x1c0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a50      	ldr	r2, [pc, #320]	; (80037f4 <loopFOC+0x1c8>)
 80036b4:	6013      	str	r3, [r2, #0]
	LPF_current_D = LowPassFilter(LPF_current_D);
 80036b6:	4e4f      	ldr	r6, [pc, #316]	; (80037f4 <loopFOC+0x1c8>)
 80036b8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80036bc:	4b4d      	ldr	r3, [pc, #308]	; (80037f4 <loopFOC+0x1c8>)
 80036be:	466d      	mov	r5, sp
 80036c0:	f103 020c 	add.w	r2, r3, #12
 80036c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80036cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036ce:	4620      	mov	r0, r4
 80036d0:	f000 f89c 	bl	800380c <LowPassFilter>
 80036d4:	4635      	mov	r5, r6
 80036d6:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80036da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	602b      	str	r3, [r5, #0]
	current.d = LPF_current_D.y_prev;   // filter values
 80036e2:	4b44      	ldr	r3, [pc, #272]	; (80037f4 <loopFOC+0x1c8>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	4a41      	ldr	r2, [pc, #260]	; (80037ec <loopFOC+0x1c0>)
 80036e8:	6013      	str	r3, [r2, #0]

// calculate the phase voltages
	current_Q.error = current_sp - current.q;
 80036ea:	4b43      	ldr	r3, [pc, #268]	; (80037f8 <loopFOC+0x1cc>)
 80036ec:	ed93 7a00 	vldr	s14, [r3]
 80036f0:	4b3e      	ldr	r3, [pc, #248]	; (80037ec <loopFOC+0x1c0>)
 80036f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80036f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036fa:	4b40      	ldr	r3, [pc, #256]	; (80037fc <loopFOC+0x1d0>)
 80036fc:	edc3 7a00 	vstr	s15, [r3]
	current_Q = PID(current_Q);
 8003700:	4b3e      	ldr	r3, [pc, #248]	; (80037fc <loopFOC+0x1d0>)
 8003702:	607b      	str	r3, [r7, #4]
 8003704:	f107 0c08 	add.w	ip, r7, #8
 8003708:	4e3c      	ldr	r6, [pc, #240]	; (80037fc <loopFOC+0x1d0>)
 800370a:	466d      	mov	r5, sp
 800370c:	f106 0408 	add.w	r4, r6, #8
 8003710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003718:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800371c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003720:	e896 000c 	ldmia.w	r6, {r2, r3}
 8003724:	4660      	mov	r0, ip
 8003726:	f000 f8e7 	bl	80038f8 <PID>
 800372a:	687d      	ldr	r5, [r7, #4]
 800372c:	f107 0408 	add.w	r4, r7, #8
 8003730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800373a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800373c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003740:	e885 0003 	stmia.w	r5, {r0, r1}
	voltage.q = current_Q.output_prev;
 8003744:	4b2d      	ldr	r3, [pc, #180]	; (80037fc <loopFOC+0x1d0>)
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	4a2d      	ldr	r2, [pc, #180]	; (8003800 <loopFOC+0x1d4>)
 800374a:	6053      	str	r3, [r2, #4]

	current_D.error = 0.0 - current.d;
 800374c:	4b27      	ldr	r3, [pc, #156]	; (80037ec <loopFOC+0x1c0>)
 800374e:	edd3 7a00 	vldr	s15, [r3]
 8003752:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003804 <loopFOC+0x1d8>
 8003756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800375a:	4b2b      	ldr	r3, [pc, #172]	; (8003808 <loopFOC+0x1dc>)
 800375c:	edc3 7a00 	vstr	s15, [r3]
	current_D = PID(current_D);
 8003760:	4b29      	ldr	r3, [pc, #164]	; (8003808 <loopFOC+0x1dc>)
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	f107 0c08 	add.w	ip, r7, #8
 8003768:	4e27      	ldr	r6, [pc, #156]	; (8003808 <loopFOC+0x1dc>)
 800376a:	466d      	mov	r5, sp
 800376c:	f106 0408 	add.w	r4, r6, #8
 8003770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003778:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800377c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003780:	e896 000c 	ldmia.w	r6, {r2, r3}
 8003784:	4660      	mov	r0, ip
 8003786:	f000 f8b7 	bl	80038f8 <PID>
 800378a:	687d      	ldr	r5, [r7, #4]
 800378c:	f107 0408 	add.w	r4, r7, #8
 8003790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800379a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800379c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037a0:	e885 0003 	stmia.w	r5, {r0, r1}
	voltage.d = current_D.output_prev;
 80037a4:	4b18      	ldr	r3, [pc, #96]	; (8003808 <loopFOC+0x1dc>)
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	4a15      	ldr	r2, [pc, #84]	; (8003800 <loopFOC+0x1d4>)
 80037aa:	6013      	str	r3, [r2, #0]
	electrical_angle = electricalAngle();
 80037ac:	f7ff f852 	bl	8002854 <electricalAngle>
 80037b0:	eef0 7a40 	vmov.f32	s15, s0
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <loopFOC+0x1bc>)
 80037b6:	edc3 7a00 	vstr	s15, [r3]
// set the phase voltage - FOC heart function :)
	setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
 80037ba:	4b11      	ldr	r3, [pc, #68]	; (8003800 <loopFOC+0x1d4>)
 80037bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <loopFOC+0x1d4>)
 80037c2:	ed93 7a00 	vldr	s14, [r3]
 80037c6:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <loopFOC+0x1bc>)
 80037c8:	edd3 6a00 	vldr	s13, [r3]
 80037cc:	eeb0 1a66 	vmov.f32	s2, s13
 80037d0:	eef0 0a47 	vmov.f32	s1, s14
 80037d4:	eeb0 0a67 	vmov.f32	s0, s15
 80037d8:	f7ff f8fa 	bl	80029d0 <setPhaseVoltage>
//	setPhaseVoltage(current_sp, 0.0, electrical_angle);

}
 80037dc:	bf00      	nop
 80037de:	375c      	adds	r7, #92	; 0x5c
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037e4:	20000908 	.word	0x20000908
 80037e8:	2000090c 	.word	0x2000090c
 80037ec:	20000928 	.word	0x20000928
 80037f0:	2000096c 	.word	0x2000096c
 80037f4:	20000980 	.word	0x20000980
 80037f8:	20000914 	.word	0x20000914
 80037fc:	20000a20 	.word	0x20000a20
 8003800:	20000920 	.word	0x20000920
 8003804:	00000000 	.word	0x00000000
 8003808:	200009e8 	.word	0x200009e8

0800380c <LowPassFilter>:

//Low-Pass Filter
struct LPF LowPassFilter(struct LPF LPF) {
 800380c:	b084      	sub	sp, #16
 800380e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800381c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	unsigned long long timestamp = micros();
 8003820:	f7fe f88e 	bl	8001940 <micros>
 8003824:	4603      	mov	r3, r0
 8003826:	2200      	movs	r2, #0
 8003828:	469a      	mov	sl, r3
 800382a:	4693      	mov	fp, r2
 800382c:	e9c7 ab04 	strd	sl, fp, [r7, #16]

	float dt = (timestamp - LPF.timestamp_prev) * 1e-6f;
 8003830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003832:	2200      	movs	r2, #0
 8003834:	461c      	mov	r4, r3
 8003836:	4615      	mov	r5, r2
 8003838:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800383c:	ebb2 0804 	subs.w	r8, r2, r4
 8003840:	eb63 0905 	sbc.w	r9, r3, r5
 8003844:	4640      	mov	r0, r8
 8003846:	4649      	mov	r1, r9
 8003848:	f7fd fa92 	bl	8000d70 <__aeabi_ul2f>
 800384c:	ee07 0a10 	vmov	s14, r0
 8003850:	eddf 7a26 	vldr	s15, [pc, #152]	; 80038ec <LowPassFilter+0xe0>
 8003854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003858:	edc7 7a07 	vstr	s15, [r7, #28]

	if (dt <= 0 || dt > 0.0008f)
 800385c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003860:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003868:	d908      	bls.n	800387c <LowPassFilter+0x70>
 800386a:	edd7 7a07 	vldr	s15, [r7, #28]
 800386e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80038f0 <LowPassFilter+0xe4>
 8003872:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387a:	dd01      	ble.n	8003880 <LowPassFilter+0x74>
		dt = 0.0008f;
 800387c:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <LowPassFilter+0xe8>)
 800387e:	61fb      	str	r3, [r7, #28]
//    {
//    	LPF.y_prev = LPF.x;
//    	LPF.timestamp_prev = timestamp;
//        return LPF;
//    }
	float alpha = LPF.Tf / (LPF.Tf + dt);
 8003880:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8003884:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003888:	edd7 7a07 	vldr	s15, [r7, #28]
 800388c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003894:	edc7 7a03 	vstr	s15, [r7, #12]
	float y = alpha * LPF.y_prev + (1.0f - alpha) * LPF.x;
 8003898:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800389c:	edd7 7a03 	vldr	s15, [r7, #12]
 80038a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80038ac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80038b0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80038b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038bc:	edc7 7a02 	vstr	s15, [r7, #8]

	LPF.y_prev = y;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	LPF.timestamp_prev = timestamp;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	64bb      	str	r3, [r7, #72]	; 0x48
	LPF.debug_dt = alpha;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	657b      	str	r3, [r7, #84]	; 0x54

	return LPF;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	461d      	mov	r5, r3
 80038d0:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80038d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	602b      	str	r3, [r5, #0]
}
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e6:	b004      	add	sp, #16
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	358637bd 	.word	0x358637bd
 80038f0:	3a51b717 	.word	0x3a51b717
 80038f4:	3a51b717 	.word	0x3a51b717

080038f8 <PID>:

//float PID(float error,float P, float I, float D, float output_ramp, float limit, unsigned long timestamp_prev, float integral_prev, float error_prev , float output_prev)
struct PID PID(struct PID PID) {
 80038f8:	b082      	sub	sp, #8
 80038fa:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038fe:	b08a      	sub	sp, #40	; 0x28
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003908:	e881 000c 	stmia.w	r1, {r2, r3}

// calculate the time from the last call
	unsigned long long timestamp_now = micros();
 800390c:	f7fe f818 	bl	8001940 <micros>
 8003910:	4603      	mov	r3, r0
 8003912:	2200      	movs	r2, #0
 8003914:	4698      	mov	r8, r3
 8003916:	4691      	mov	r9, r2
 8003918:	e9c7 8906 	strd	r8, r9, [r7, #24]
	float Ts = (timestamp_now - PID.timestamp_prev) * 1e-6;
 800391c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003920:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003924:	1a84      	subs	r4, r0, r2
 8003926:	eb61 0503 	sbc.w	r5, r1, r3
 800392a:	4620      	mov	r0, r4
 800392c:	4629      	mov	r1, r5
 800392e:	f7fc fdf9 	bl	8000524 <__aeabi_ul2d>
 8003932:	a375      	add	r3, pc, #468	; (adr r3, 8003b08 <PID+0x210>)
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	f7fc fe2a 	bl	8000590 <__aeabi_dmul>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	f7fd f8fc 	bl	8000b40 <__aeabi_d2f>
 8003948:	4603      	mov	r3, r0
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
//fix for micros overflow
	if (Ts <= 0 || Ts > 0.0008f)
 800394c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003950:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003958:	d908      	bls.n	800396c <PID+0x74>
 800395a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800395e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003af0 <PID+0x1f8>
 8003962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396a:	dd01      	ble.n	8003970 <PID+0x78>
		Ts = 0.0008f;
 800396c:	4b61      	ldr	r3, [pc, #388]	; (8003af4 <PID+0x1fc>)
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
	dtx = Ts;
 8003970:	4a61      	ldr	r2, [pc, #388]	; (8003af8 <PID+0x200>)
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	6013      	str	r3, [r2, #0]
// u(s) = (P + I/s + Ds)e(s)
// Discrete implementations
// proportional part
// u_p  = P *e(k)
	float proportional = PID.P * PID.error;
 8003976:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800397a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800397e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003982:	edc7 7a05 	vstr	s15, [r7, #20]
// Tustin transform of the integral part
// u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
	float integral = PID.integral_prev + PID.I * Ts * 0.5f * (PID.error + PID.error_prev);
 8003986:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800398a:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800398e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003996:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800399a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800399e:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 80039a2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80039a6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80039aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039b2:	edc7 7a08 	vstr	s15, [r7, #32]
	if ((state_enable == 0) || (integral > 23.5) || (integral < -23.5)) {
 80039b6:	4b51      	ldr	r3, [pc, #324]	; (8003afc <PID+0x204>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	f083 0301 	eor.w	r3, r3, #1
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d111      	bne.n	80039e8 <PID+0xf0>
 80039c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80039c8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003b00 <PID+0x208>
 80039cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d4:	dc08      	bgt.n	80039e8 <PID+0xf0>
 80039d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80039da:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8003b04 <PID+0x20c>
 80039de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e6:	d502      	bpl.n	80039ee <PID+0xf6>
		integral = 0.0f;
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	623b      	str	r3, [r7, #32]
	}
// antiwindup - limit the output
	integral = _constrain(integral, -PID.anti_windup, PID.anti_windup);
 80039ee:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80039f2:	eef1 7a67 	vneg.f32	s15, s15
 80039f6:	ed97 7a08 	vldr	s14, [r7, #32]
 80039fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a02:	d504      	bpl.n	8003a0e <PID+0x116>
 8003a04:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003a08:	eef1 7a67 	vneg.f32	s15, s15
 8003a0c:	e00d      	b.n	8003a2a <PID+0x132>
 8003a0e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003a12:	ed97 7a08 	vldr	s14, [r7, #32]
 8003a16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1e:	dd02      	ble.n	8003a26 <PID+0x12e>
 8003a20:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003a24:	e001      	b.n	8003a2a <PID+0x132>
 8003a26:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a2a:	edc7 7a08 	vstr	s15, [r7, #32]
// Discrete derivation
// u_dk = D(ek - ek_1)/Ts
	float derivative = PID.D * (PID.error - PID.error_prev) / Ts;
 8003a2e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8003a32:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8003a36:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003a3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a3e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003a42:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a4a:	edc7 7a04 	vstr	s15, [r7, #16]

// sum all the components
	float output = proportional + integral + derivative;
 8003a4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a52:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a5a:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a62:	edc7 7a03 	vstr	s15, [r7, #12]
// antiwindup - limit the output variable
	output = _constrain(output, -PID.limit, PID.limit);
 8003a66:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003a6a:	eef1 7a67 	vneg.f32	s15, s15
 8003a6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7a:	d504      	bpl.n	8003a86 <PID+0x18e>
 8003a7c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003a80:	eef1 7a67 	vneg.f32	s15, s15
 8003a84:	e00d      	b.n	8003aa2 <PID+0x1aa>
 8003a86:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003a8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a96:	dd02      	ble.n	8003a9e <PID+0x1a6>
 8003a98:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003a9c:	e001      	b.n	8003aa2 <PID+0x1aa>
 8003a9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aa2:	edc7 7a03 	vstr	s15, [r7, #12]

// saving for the next pass
	PID.integral_prev = integral;
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	647b      	str	r3, [r7, #68]	; 0x44
	PID.output_prev = output;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	65bb      	str	r3, [r7, #88]	; 0x58
	PID.error_prev = PID.error;
 8003aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ab0:	64bb      	str	r3, [r7, #72]	; 0x48
	PID.timestamp_prev = timestamp_now;
 8003ab2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ab6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	PID.dtx = dtx;
 8003aba:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <PID+0x200>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	66bb      	str	r3, [r7, #104]	; 0x68
	return PID;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	461d      	mov	r5, r3
 8003ac4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ad4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ad8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	3728      	adds	r7, #40	; 0x28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8003ae6:	b002      	add	sp, #8
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	f3af 8000 	nop.w
 8003af0:	3a51b717 	.word	0x3a51b717
 8003af4:	3a51b717 	.word	0x3a51b717
 8003af8:	20000ce4 	.word	0x20000ce4
 8003afc:	20000d24 	.word	0x20000d24
 8003b00:	41bc0000 	.word	0x41bc0000
 8003b04:	c1bc0000 	.word	0xc1bc0000
 8003b08:	a0b5ed8d 	.word	0xa0b5ed8d
 8003b0c:	3eb0c6f7 	.word	0x3eb0c6f7

08003b10 <SMC_V>:
	PID_current_D.timestamp_prev = timestamp_now;
	PID_current_D.dtx = dtx;
	return PID_current_D;
}

struct SMC SMC_V(struct SMC SMC) {
 8003b10:	b084      	sub	sp, #16
 8003b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b14:	ed2d 8b02 	vpush	{d8}
 8003b18:	b099      	sub	sp, #100	; 0x64
 8003b1a:	af02      	add	r7, sp, #8
 8003b1c:	61f8      	str	r0, [r7, #28]
 8003b1e:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8003b22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	unsigned long timestamp_now = micros();
 8003b26:	f7fd ff0b 	bl	8001940 <micros>
 8003b2a:	6538      	str	r0, [r7, #80]	; 0x50
	float Ts = (timestamp_now - SMC.timestamp_prev) * 1e-6;
 8003b2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fc fcb1 	bl	800049c <__aeabi_ui2d>
 8003b3a:	a3d0      	add	r3, pc, #832	; (adr r3, 8003e7c <SMC_V+0x36c>)
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	f7fc fd26 	bl	8000590 <__aeabi_dmul>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	f7fc fff8 	bl	8000b40 <__aeabi_d2f>
 8003b50:	4603      	mov	r3, r0
 8003b52:	657b      	str	r3, [r7, #84]	; 0x54
	//fix for micros overflow
	if (Ts <= 0 || Ts > 0.0008f)
 8003b54:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003b58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b60:	d908      	bls.n	8003b74 <SMC_V+0x64>
 8003b62:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003b66:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8003e48 <SMC_V+0x338>
 8003b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b72:	dd01      	ble.n	8003b78 <SMC_V+0x68>
		Ts = 0.0008f;
 8003b74:	4bb5      	ldr	r3, [pc, #724]	; (8003e4c <SMC_V+0x33c>)
 8003b76:	657b      	str	r3, [r7, #84]	; 0x54
	dtx = Ts;
 8003b78:	4ab5      	ldr	r2, [pc, #724]	; (8003e50 <SMC_V+0x340>)
 8003b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b7c:	6013      	str	r3, [r2, #0]


	//Dynamic equations
	float an = (3 * (pole_pairs * pole_pairs) * flux_linkage) / (2 * inertia);
 8003b7e:	4bb5      	ldr	r3, [pc, #724]	; (8003e54 <SMC_V+0x344>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4ab4      	ldr	r2, [pc, #720]	; (8003e54 <SMC_V+0x344>)
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	fb03 f202 	mul.w	r2, r3, r2
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	ee07 3a90 	vmov	s15, r3
 8003b94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b98:	4baf      	ldr	r3, [pc, #700]	; (8003e58 <SMC_V+0x348>)
 8003b9a:	edd3 7a00 	vldr	s15, [r3]
 8003b9e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003ba2:	4bae      	ldr	r3, [pc, #696]	; (8003e5c <SMC_V+0x34c>)
 8003ba4:	edd3 7a00 	vldr	s15, [r3]
 8003ba8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bb0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
//	float bn = pole_pairs / inertia ;
	float cn = damping / inertia;
 8003bb4:	4baa      	ldr	r3, [pc, #680]	; (8003e60 <SMC_V+0x350>)
 8003bb6:	edd3 6a00 	vldr	s13, [r3]
 8003bba:	4ba8      	ldr	r3, [pc, #672]	; (8003e5c <SMC_V+0x34c>)
 8003bbc:	ed93 7a00 	vldr	s14, [r3]
 8003bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bc4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
//	float integral_error = SMC.integral_error_prev + Ts * 0.5f * (SMC.error + SMC.error_prev);
//	float integral_error_est = SMC.integral_error_est_prev + Ts * 0.5f * (SMC.error_est + SMC.error_est_prev);
//	float sliding_surface = SMC.error + integral_error;
//	float sliding_surface_est = SMC.error_est + integral_error_est;
	// S = e
	float sliding_surface = SMC.error ;
 8003bc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bca:	647b      	str	r3, [r7, #68]	; 0x44
	float sliding_surface_est = SMC.error_est ;
 8003bcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bd0:	643b      	str	r3, [r7, #64]	; 0x40

	//ESDMO
	//input_SM_observer = neta * sign(error_estimated)
	float u_smo = SMC.neta * _sign(sliding_surface_est);
 8003bd2:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8003bd6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003bda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be2:	d502      	bpl.n	8003bea <SMC_V+0xda>
 8003be4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8003be8:	e00b      	b.n	8003c02 <SMC_V+0xf2>
 8003bea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003bee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf6:	dd02      	ble.n	8003bfe <SMC_V+0xee>
 8003bf8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003bfc:	e001      	b.n	8003c02 <SMC_V+0xf2>
 8003bfe:	eddf 7a99 	vldr	s15, [pc, #612]	; 8003e64 <SMC_V+0x354>
 8003c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c06:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	// Dif velocity estimated
	float dw_est = (an * current.q) - (cn * SMC.w_est_prev) + (SMC.r_est_prev) + u_smo;
 8003c0a:	4b97      	ldr	r3, [pc, #604]	; (8003e68 <SMC_V+0x358>)
 8003c0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c10:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003c14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c18:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8003c1c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c28:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c30:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c38:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	// Dif error estimated
	float dr_est = SMC.g * u_smo;
 8003c3c:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8003c40:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c48:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	// Tustin transform of the integral part
	// u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
	float w_est = SMC.w_est_prev + Ts * 0.5f * (dw_est + SMC.dw_est_prev);
 8003c4c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003c50:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003c54:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003c58:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003c5c:	ed97 6a2c 	vldr	s12, [r7, #176]	; 0xb0
 8003c60:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003c64:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003c68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c70:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float r_est = SMC.r_est_prev + Ts * 0.5f * (dr_est + SMC.dr_est_prev);
 8003c74:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8003c78:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003c7c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003c80:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003c84:	ed97 6a2b 	vldr	s12, [r7, #172]	; 0xac
 8003c88:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003c8c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c98:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	LPF_w_est.x = w_est;
 8003c9c:	4a73      	ldr	r2, [pc, #460]	; (8003e6c <SMC_V+0x35c>)
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	6013      	str	r3, [r2, #0]
	LPF_w_est = LowPassFilter(LPF_w_est);
 8003ca2:	4e72      	ldr	r6, [pc, #456]	; (8003e6c <SMC_V+0x35c>)
 8003ca4:	463c      	mov	r4, r7
 8003ca6:	4b71      	ldr	r3, [pc, #452]	; (8003e6c <SMC_V+0x35c>)
 8003ca8:	466d      	mov	r5, sp
 8003caa:	f103 020c 	add.w	r2, r3, #12
 8003cae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f7ff fda7 	bl	800380c <LowPassFilter>
 8003cbe:	4635      	mov	r5, r6
 8003cc0:	463c      	mov	r4, r7
 8003cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	602b      	str	r3, [r5, #0]
	w_est = LPF_w_est.y_prev;  // filter values
 8003cca:	4b68      	ldr	r3, [pc, #416]	; (8003e6c <SMC_V+0x35c>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	633b      	str	r3, [r7, #48]	; 0x30
	LPF_r_est.x = r_est;
 8003cd0:	4a67      	ldr	r2, [pc, #412]	; (8003e70 <SMC_V+0x360>)
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	6013      	str	r3, [r2, #0]
	LPF_r_est = LowPassFilter(LPF_r_est);
 8003cd6:	4e66      	ldr	r6, [pc, #408]	; (8003e70 <SMC_V+0x360>)
 8003cd8:	463c      	mov	r4, r7
 8003cda:	4b65      	ldr	r3, [pc, #404]	; (8003e70 <SMC_V+0x360>)
 8003cdc:	466d      	mov	r5, sp
 8003cde:	f103 020c 	add.w	r2, r3, #12
 8003ce2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ce6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cec:	4620      	mov	r0, r4
 8003cee:	f7ff fd8d 	bl	800380c <LowPassFilter>
 8003cf2:	4635      	mov	r5, r6
 8003cf4:	463c      	mov	r4, r7
 8003cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	602b      	str	r3, [r5, #0]
	r_est = LPF_r_est.y_prev;  // filter values
 8003cfe:	4b5c      	ldr	r3, [pc, #368]	; (8003e70 <SMC_V+0x360>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
//		SMC.debug_eq = eq_nr ;
//		datacheck = 0 ;
//	}

////fusion method
	float sign_temp = _sign(sliding_surface) ;
 8003d04:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003d08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d10:	d501      	bpl.n	8003d16 <SMC_V+0x206>
 8003d12:	4b58      	ldr	r3, [pc, #352]	; (8003e74 <SMC_V+0x364>)
 8003d14:	e00b      	b.n	8003d2e <SMC_V+0x21e>
 8003d16:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003d1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d22:	dd02      	ble.n	8003d2a <SMC_V+0x21a>
 8003d24:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003d28:	e001      	b.n	8003d2e <SMC_V+0x21e>
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	float integral_sign = SMC.integral_sign_prev + Ts * 0.5f * (sign_temp + SMC.sign_temp_prev) ;
 8003d30:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003d34:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003d38:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003d3c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003d40:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8003d44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d48:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d54:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	SMC.debug_eq = (SMC.kp * _sqrtApprox(fabs(sliding_surface)) * _sign(sliding_surface)) + (SMC.ki * integral_sign* expf(-SMC.delta * fabs(sliding_surface)));
 8003d58:	ed97 8a37 	vldr	s16, [r7, #220]	; 0xdc
 8003d5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003d60:	eef0 7ae7 	vabs.f32	s15, s15
 8003d64:	eeb0 0a67 	vmov.f32	s0, s15
 8003d68:	f7fe f9bc 	bl	80020e4 <_sqrtApprox>
 8003d6c:	eef0 7a40 	vmov.f32	s15, s0
 8003d70:	ee28 7a27 	vmul.f32	s14, s16, s15
 8003d74:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003d78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d80:	d502      	bpl.n	8003d88 <SMC_V+0x278>
 8003d82:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8003d86:	e00b      	b.n	8003da0 <SMC_V+0x290>
 8003d88:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003d8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d94:	dd02      	ble.n	8003d9c <SMC_V+0x28c>
 8003d96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003d9a:	e001      	b.n	8003da0 <SMC_V+0x290>
 8003d9c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8003e64 <SMC_V+0x354>
 8003da0:	ee27 8a87 	vmul.f32	s16, s15, s14
 8003da4:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8003da8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003dac:	ee67 8a27 	vmul.f32	s17, s14, s15
 8003db0:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8003db4:	eeb1 7a67 	vneg.f32	s14, s15
 8003db8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003dbc:	eef0 7ae7 	vabs.f32	s15, s15
 8003dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc8:	f007 f894 	bl	800aef4 <expf>
 8003dcc:	eef0 7a40 	vmov.f32	s15, s0
 8003dd0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003dd4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003dd8:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8
	float output = (1 / an) * ((cn * shaft_velocity) - r_est + SMC.debug_eq);
 8003ddc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003de0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003de4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003de8:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <SMC_V+0x368>)
 8003dea:	edd3 6a00 	vldr	s13, [r3]
 8003dee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003df2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003df6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003dfa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003dfe:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 8003e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0a:	edc7 7a08 	vstr	s15, [r7, #32]
	output = _constrain(output, -SMC.limit, SMC.limit);
 8003e0e:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8003e12:	eef1 7a67 	vneg.f32	s15, s15
 8003e16:	ed97 7a08 	vldr	s14, [r7, #32]
 8003e1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e22:	d504      	bpl.n	8003e2e <SMC_V+0x31e>
 8003e24:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8003e28:	eef1 7a67 	vneg.f32	s15, s15
 8003e2c:	e02c      	b.n	8003e88 <SMC_V+0x378>
 8003e2e:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8003e32:	ed97 7a08 	vldr	s14, [r7, #32]
 8003e36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3e:	dd21      	ble.n	8003e84 <SMC_V+0x374>
 8003e40:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8003e44:	e020      	b.n	8003e88 <SMC_V+0x378>
 8003e46:	bf00      	nop
 8003e48:	3a51b717 	.word	0x3a51b717
 8003e4c:	3a51b717 	.word	0x3a51b717
 8003e50:	20000ce4 	.word	0x20000ce4
 8003e54:	20000c5c 	.word	0x20000c5c
 8003e58:	20000c54 	.word	0x20000c54
 8003e5c:	20000c50 	.word	0x20000c50
 8003e60:	20000c58 	.word	0x20000c58
 8003e64:	00000000 	.word	0x00000000
 8003e68:	20000928 	.word	0x20000928
 8003e6c:	200009a8 	.word	0x200009a8
 8003e70:	200009bc 	.word	0x200009bc
 8003e74:	bf800000 	.word	0xbf800000
 8003e78:	20000910 	.word	0x20000910
 8003e7c:	a0b5ed8d 	.word	0xa0b5ed8d
 8003e80:	3eb0c6f7 	.word	0x3eb0c6f7
 8003e84:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e88:	edc7 7a08 	vstr	s15, [r7, #32]
	SMC.debug_output = output ;
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	SMC.error_prev = SMC.error ;
 8003e92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	SMC.error_est_prev = SMC.error_est ;
 8003e98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
//	SMC.integral_error_prev = integral_error;
//	SMC.integral_error_est_prev = integral_error_est;
	SMC.sign_temp_prev = sign_temp ;
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	SMC.integral_sign_prev = integral_sign ;
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	SMC.output_prev = output ;
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	SMC.r_est_prev = r_est ;
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	SMC.dr_est_prev = dr_est ;
 8003eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	SMC.w_est_prev = w_est ;
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	SMC.dw_est_prev = dw_est ;
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	SMC.timestamp_prev = timestamp_now;
 8003eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ecc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	SMC.dtx = dtx ;
 8003ed0:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <SMC_V+0x3ec>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	return SMC;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003ee0:	2280      	movs	r2, #128	; 0x80
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	f006 ff52 	bl	800ad8c <memcpy>
}
 8003ee8:	69f8      	ldr	r0, [r7, #28]
 8003eea:	375c      	adds	r7, #92	; 0x5c
 8003eec:	46bd      	mov	sp, r7
 8003eee:	ecbd 8b02 	vpop	{d8}
 8003ef2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003ef6:	b004      	add	sp, #16
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	20000ce4 	.word	0x20000ce4

08003f00 <SMC_angle>:
	SMC.timestamp_prev = timestamp_now;
	SMC.dtx = Ts ;
	return SMC;
}

void SMC_angle(float new_target) {
 8003f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f02:	b0d1      	sub	sp, #324	; 0x144
 8003f04:	af1e      	add	r7, sp, #120	; 0x78
 8003f06:	ed87 0a31 	vstr	s0, [r7, #196]	; 0xc4

	shaft_angle = shaftAngle();
 8003f0a:	f7fe fc05 	bl	8002718 <shaftAngle>
 8003f0e:	eef0 7a40 	vmov.f32	s15, s0
 8003f12:	4b5c      	ldr	r3, [pc, #368]	; (8004084 <SMC_angle+0x184>)
 8003f14:	edc3 7a00 	vstr	s15, [r3]
	shaft_velocity = shaftVelocity();
 8003f18:	f7fe fc38 	bl	800278c <shaftVelocity>
 8003f1c:	eef0 7a40 	vmov.f32	s15, s0
 8003f20:	4b59      	ldr	r3, [pc, #356]	; (8004088 <SMC_angle+0x188>)
 8003f22:	edc3 7a00 	vstr	s15, [r3]
	electrical_angle = electricalAngle();
 8003f26:	f7fe fc95 	bl	8002854 <electricalAngle>
 8003f2a:	eef0 7a40 	vmov.f32	s15, s0
 8003f2e:	4b57      	ldr	r3, [pc, #348]	; (800408c <SMC_angle+0x18c>)
 8003f30:	edc3 7a00 	vstr	s15, [r3]
	current = getFOCCurrents(electrical_angle);
 8003f34:	4b55      	ldr	r3, [pc, #340]	; (800408c <SMC_angle+0x18c>)
 8003f36:	edd3 7a00 	vldr	s15, [r3]
 8003f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f3e:	f7fd fe4f 	bl	8001be0 <getFOCCurrents>
 8003f42:	eeb0 7a40 	vmov.f32	s14, s0
 8003f46:	eef0 7a60 	vmov.f32	s15, s1
 8003f4a:	4b51      	ldr	r3, [pc, #324]	; (8004090 <SMC_angle+0x190>)
 8003f4c:	ed83 7a00 	vstr	s14, [r3]
 8003f50:	edc3 7a01 	vstr	s15, [r3, #4]

	//PID - SMC -----------------------------------------------------------------------
	if (_isset(new_target))
 8003f54:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003f58:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8004094 <SMC_angle+0x194>
 8003f5c:	eef4 7a47 	vcmp.f32	s15, s14
 8003f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f64:	d003      	beq.n	8003f6e <SMC_angle+0x6e>
		target = new_target;
 8003f66:	4a4c      	ldr	r2, [pc, #304]	; (8004098 <SMC_angle+0x198>)
 8003f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f6c:	6013      	str	r3, [r2, #0]

// angle set point
	shaft_angle_sp = target;
 8003f6e:	4b4a      	ldr	r3, [pc, #296]	; (8004098 <SMC_angle+0x198>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a4a      	ldr	r2, [pc, #296]	; (800409c <SMC_angle+0x19c>)
 8003f74:	6013      	str	r3, [r2, #0]
// calculate velocity set point
	angle.error = shaft_angle_sp - shaft_angle;
 8003f76:	4b49      	ldr	r3, [pc, #292]	; (800409c <SMC_angle+0x19c>)
 8003f78:	ed93 7a00 	vldr	s14, [r3]
 8003f7c:	4b41      	ldr	r3, [pc, #260]	; (8004084 <SMC_angle+0x184>)
 8003f7e:	edd3 7a00 	vldr	s15, [r3]
 8003f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f86:	4b46      	ldr	r3, [pc, #280]	; (80040a0 <SMC_angle+0x1a0>)
 8003f88:	edc3 7a00 	vstr	s15, [r3]
	angle = PID(angle);
 8003f8c:	4b44      	ldr	r3, [pc, #272]	; (80040a0 <SMC_angle+0x1a0>)
 8003f8e:	607b      	str	r3, [r7, #4]
 8003f90:	f107 0c88 	add.w	ip, r7, #136	; 0x88
 8003f94:	4e42      	ldr	r6, [pc, #264]	; (80040a0 <SMC_angle+0x1a0>)
 8003f96:	466d      	mov	r5, sp
 8003f98:	f106 0408 	add.w	r4, r6, #8
 8003f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fa4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003fa8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003fac:	e896 000c 	ldmia.w	r6, {r2, r3}
 8003fb0:	4660      	mov	r0, ip
 8003fb2:	f7ff fca1 	bl	80038f8 <PID>
 8003fb6:	687d      	ldr	r5, [r7, #4]
 8003fb8:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8003fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fcc:	e885 0003 	stmia.w	r5, {r0, r1}

	shaft_angle = shaftAngle();
 8003fd0:	f7fe fba2 	bl	8002718 <shaftAngle>
 8003fd4:	eef0 7a40 	vmov.f32	s15, s0
 8003fd8:	4b2a      	ldr	r3, [pc, #168]	; (8004084 <SMC_angle+0x184>)
 8003fda:	edc3 7a00 	vstr	s15, [r3]
	shaft_velocity = shaftVelocity();
 8003fde:	f7fe fbd5 	bl	800278c <shaftVelocity>
 8003fe2:	eef0 7a40 	vmov.f32	s15, s0
 8003fe6:	4b28      	ldr	r3, [pc, #160]	; (8004088 <SMC_angle+0x188>)
 8003fe8:	edc3 7a00 	vstr	s15, [r3]
	electrical_angle = electricalAngle();
 8003fec:	f7fe fc32 	bl	8002854 <electricalAngle>
 8003ff0:	eef0 7a40 	vmov.f32	s15, s0
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <SMC_angle+0x18c>)
 8003ff6:	edc3 7a00 	vstr	s15, [r3]
	current = getFOCCurrents(electrical_angle);
 8003ffa:	4b24      	ldr	r3, [pc, #144]	; (800408c <SMC_angle+0x18c>)
 8003ffc:	edd3 7a00 	vldr	s15, [r3]
 8004000:	eeb0 0a67 	vmov.f32	s0, s15
 8004004:	f7fd fdec 	bl	8001be0 <getFOCCurrents>
 8004008:	eeb0 7a40 	vmov.f32	s14, s0
 800400c:	eef0 7a60 	vmov.f32	s15, s1
 8004010:	4b1f      	ldr	r3, [pc, #124]	; (8004090 <SMC_angle+0x190>)
 8004012:	ed83 7a00 	vstr	s14, [r3]
 8004016:	edc3 7a01 	vstr	s15, [r3, #4]

	SMC_vel.error = angle.output_prev - shaft_velocity;
 800401a:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <SMC_angle+0x1a0>)
 800401c:	ed93 7a06 	vldr	s14, [r3, #24]
 8004020:	4b19      	ldr	r3, [pc, #100]	; (8004088 <SMC_angle+0x188>)
 8004022:	edd3 7a00 	vldr	s15, [r3]
 8004026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800402a:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <SMC_angle+0x1a4>)
 800402c:	edc3 7a00 	vstr	s15, [r3]
	SMC_vel.error_est = SMC_vel.w_est_prev - shaft_velocity;
 8004030:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <SMC_angle+0x1a4>)
 8004032:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004036:	4b14      	ldr	r3, [pc, #80]	; (8004088 <SMC_angle+0x188>)
 8004038:	edd3 7a00 	vldr	s15, [r3]
 800403c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004040:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <SMC_angle+0x1a4>)
 8004042:	edc3 7a02 	vstr	s15, [r3, #8]
	SMC_vel = SMC_V(SMC_vel);
 8004046:	4e17      	ldr	r6, [pc, #92]	; (80040a4 <SMC_angle+0x1a4>)
 8004048:	f107 0508 	add.w	r5, r7, #8
 800404c:	4c15      	ldr	r4, [pc, #84]	; (80040a4 <SMC_angle+0x1a4>)
 800404e:	4668      	mov	r0, sp
 8004050:	f104 030c 	add.w	r3, r4, #12
 8004054:	2274      	movs	r2, #116	; 0x74
 8004056:	4619      	mov	r1, r3
 8004058:	f006 fe98 	bl	800ad8c <memcpy>
 800405c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004060:	4628      	mov	r0, r5
 8004062:	f7ff fd55 	bl	8003b10 <SMC_V>
 8004066:	4630      	mov	r0, r6
 8004068:	f107 0308 	add.w	r3, r7, #8
 800406c:	2280      	movs	r2, #128	; 0x80
 800406e:	4619      	mov	r1, r3
 8004070:	f006 fe8c 	bl	800ad8c <memcpy>
	current_sp = SMC_vel.output_prev;
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <SMC_angle+0x1a4>)
 8004076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004078:	4a0b      	ldr	r2, [pc, #44]	; (80040a8 <SMC_angle+0x1a8>)
 800407a:	6013      	str	r3, [r2, #0]
}
 800407c:	bf00      	nop
 800407e:	37cc      	adds	r7, #204	; 0xcc
 8004080:	46bd      	mov	sp, r7
 8004082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004084:	20000908 	.word	0x20000908
 8004088:	20000910 	.word	0x20000910
 800408c:	2000090c 	.word	0x2000090c
 8004090:	20000928 	.word	0x20000928
 8004094:	c640e400 	.word	0xc640e400
 8004098:	20000904 	.word	0x20000904
 800409c:	2000091c 	.word	0x2000091c
 80040a0:	20000a90 	.word	0x20000a90
 80040a4:	20000ac8 	.word	0x20000ac8
 80040a8:	20000914 	.word	0x20000914
 80040ac:	00000000 	.word	0x00000000

080040b0 <fusion_V>:

struct fusion fusion_V(struct fusion fusion)
{
 80040b0:	b084      	sub	sp, #16
 80040b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b6:	b09d      	sub	sp, #116	; 0x74
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	61f8      	str	r0, [r7, #28]
 80040bc:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80040c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	unsigned long timestamp_now = micros();
 80040c4:	f7fd fc3c 	bl	8001940 <micros>
 80040c8:	65f8      	str	r0, [r7, #92]	; 0x5c
	float Ts = (timestamp_now - fusion.timestamp_prev) * 1e-6;
 80040ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fc f9e2 	bl	800049c <__aeabi_ui2d>
 80040d8:	a3da      	add	r3, pc, #872	; (adr r3, 8004444 <fusion_V+0x394>)
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	f7fc fa57 	bl	8000590 <__aeabi_dmul>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4610      	mov	r0, r2
 80040e8:	4619      	mov	r1, r3
 80040ea:	f7fc fd29 	bl	8000b40 <__aeabi_d2f>
 80040ee:	4603      	mov	r3, r0
 80040f0:	667b      	str	r3, [r7, #100]	; 0x64
	//fix for micros overflow
	if (Ts <= 0 || Ts > 0.0008f)
 80040f2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80040f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040fe:	d908      	bls.n	8004112 <fusion_V+0x62>
 8004100:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004104:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8004408 <fusion_V+0x358>
 8004108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800410c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004110:	dd01      	ble.n	8004116 <fusion_V+0x66>
		Ts = 0.0008f;
 8004112:	4bbe      	ldr	r3, [pc, #760]	; (800440c <fusion_V+0x35c>)
 8004114:	667b      	str	r3, [r7, #100]	; 0x64
	dtx = Ts;
 8004116:	4abe      	ldr	r2, [pc, #760]	; (8004410 <fusion_V+0x360>)
 8004118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800411a:	6013      	str	r3, [r2, #0]
	//Calculate SMC-----------------------------------------------------------------------------------------------------------
	//Dynamic equations
	float an = (3 * (pole_pairs * pole_pairs) * flux_linkage) / (2 * inertia);
 800411c:	4bbd      	ldr	r3, [pc, #756]	; (8004414 <fusion_V+0x364>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4abc      	ldr	r2, [pc, #752]	; (8004414 <fusion_V+0x364>)
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	fb03 f202 	mul.w	r2, r3, r2
 8004128:	4613      	mov	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4413      	add	r3, r2
 800412e:	ee07 3a90 	vmov	s15, r3
 8004132:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004136:	4bb8      	ldr	r3, [pc, #736]	; (8004418 <fusion_V+0x368>)
 8004138:	edd3 7a00 	vldr	s15, [r3]
 800413c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004140:	4bb6      	ldr	r3, [pc, #728]	; (800441c <fusion_V+0x36c>)
 8004142:	edd3 7a00 	vldr	s15, [r3]
 8004146:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800414a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800414e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
//	float bn = pole_pairs / inertia ;
	float cn = damping / inertia;
 8004152:	4bb3      	ldr	r3, [pc, #716]	; (8004420 <fusion_V+0x370>)
 8004154:	edd3 6a00 	vldr	s13, [r3]
 8004158:	4bb0      	ldr	r3, [pc, #704]	; (800441c <fusion_V+0x36c>)
 800415a:	ed93 7a00 	vldr	s14, [r3]
 800415e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004162:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	//Calculate PID-----------------------------------------------------------------------------------------------------------

	//output mode---------------------------------------------------------------------------------------------------------------

	if ((1.5 * (fabs(shaft_angle)) < (fabs(Command_setpoint)))) {
 8004166:	4baf      	ldr	r3, [pc, #700]	; (8004424 <fusion_V+0x374>)
 8004168:	edd3 7a00 	vldr	s15, [r3]
 800416c:	eef0 7ae7 	vabs.f32	s15, s15
 8004170:	ee17 0a90 	vmov	r0, s15
 8004174:	f7fc f9b4 	bl	80004e0 <__aeabi_f2d>
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	4baa      	ldr	r3, [pc, #680]	; (8004428 <fusion_V+0x378>)
 800417e:	f7fc fa07 	bl	8000590 <__aeabi_dmul>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4614      	mov	r4, r2
 8004188:	461d      	mov	r5, r3
 800418a:	4ba8      	ldr	r3, [pc, #672]	; (800442c <fusion_V+0x37c>)
 800418c:	edd3 7a00 	vldr	s15, [r3]
 8004190:	eef0 7ae7 	vabs.f32	s15, s15
 8004194:	ee17 0a90 	vmov	r0, s15
 8004198:	f7fc f9a2 	bl	80004e0 <__aeabi_f2d>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4620      	mov	r0, r4
 80041a2:	4629      	mov	r1, r5
 80041a4:	f7fc fc66 	bl	8000a74 <__aeabi_dcmplt>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 81a6 	beq.w	80044fc <fusion_V+0x44c>
		float sliding_surface = fusion.error ;
 80041b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80041b4:	647b      	str	r3, [r7, #68]	; 0x44
		float sliding_surface_est = fusion.error_est ;
 80041b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041ba:	643b      	str	r3, [r7, #64]	; 0x40
		//ESDMO
		//input_SM_observer = neta * sign(error_estimated)
		float u_smo = fusion.neta * _sign(sliding_surface_est);
 80041bc:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80041c0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80041c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041cc:	d502      	bpl.n	80041d4 <fusion_V+0x124>
 80041ce:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80041d2:	e00b      	b.n	80041ec <fusion_V+0x13c>
 80041d4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80041d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e0:	dd02      	ble.n	80041e8 <fusion_V+0x138>
 80041e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80041e6:	e001      	b.n	80041ec <fusion_V+0x13c>
 80041e8:	eddf 7a98 	vldr	s15, [pc, #608]	; 800444c <fusion_V+0x39c>
 80041ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041f0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		// Dif velocity estimated
		float dw_est = (an * current.q) - (cn * fusion.w_est_prev) + (fusion.r_est_prev) + u_smo;
 80041f4:	4b8e      	ldr	r3, [pc, #568]	; (8004430 <fusion_V+0x380>)
 80041f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80041fa:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80041fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004202:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8004206:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800420a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800420e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004212:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800421a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800421e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004222:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		// Dif error estimated
		float dr_est = fusion.g * u_smo;
 8004226:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800422a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800422e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004232:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		// Tustin transform of the integral part
		// u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
		float w_est = fusion.w_est_prev + Ts * 0.5f * (dw_est + fusion.dw_est_prev);
 8004236:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800423a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800423e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004242:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004246:	ed97 6a2e 	vldr	s12, [r7, #184]	; 0xb8
 800424a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800424e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800425a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		float r_est = fusion.r_est_prev + Ts * 0.5f * (dr_est + fusion.dr_est_prev);
 800425e:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8004262:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004266:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800426a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800426e:	ed97 6a2d 	vldr	s12, [r7, #180]	; 0xb4
 8004272:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004276:	ee76 7a27 	vadd.f32	s15, s12, s15
 800427a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800427e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004282:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		LPF_w_est.x = w_est;
 8004286:	4a6b      	ldr	r2, [pc, #428]	; (8004434 <fusion_V+0x384>)
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	6013      	str	r3, [r2, #0]
		LPF_w_est = LowPassFilter(LPF_w_est);
 800428c:	4e69      	ldr	r6, [pc, #420]	; (8004434 <fusion_V+0x384>)
 800428e:	463c      	mov	r4, r7
 8004290:	4b68      	ldr	r3, [pc, #416]	; (8004434 <fusion_V+0x384>)
 8004292:	466d      	mov	r5, sp
 8004294:	f103 020c 	add.w	r2, r3, #12
 8004298:	e892 0003 	ldmia.w	r2, {r0, r1}
 800429c:	e885 0003 	stmia.w	r5, {r0, r1}
 80042a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042a2:	4620      	mov	r0, r4
 80042a4:	f7ff fab2 	bl	800380c <LowPassFilter>
 80042a8:	4635      	mov	r5, r6
 80042aa:	463c      	mov	r4, r7
 80042ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	602b      	str	r3, [r5, #0]
		w_est = LPF_w_est.y_prev;  // filter values
 80042b4:	4b5f      	ldr	r3, [pc, #380]	; (8004434 <fusion_V+0x384>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	633b      	str	r3, [r7, #48]	; 0x30
		LPF_r_est.x = r_est;
 80042ba:	4a5f      	ldr	r2, [pc, #380]	; (8004438 <fusion_V+0x388>)
 80042bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042be:	6013      	str	r3, [r2, #0]
		LPF_r_est = LowPassFilter(LPF_r_est);
 80042c0:	4e5d      	ldr	r6, [pc, #372]	; (8004438 <fusion_V+0x388>)
 80042c2:	463c      	mov	r4, r7
 80042c4:	4b5c      	ldr	r3, [pc, #368]	; (8004438 <fusion_V+0x388>)
 80042c6:	466d      	mov	r5, sp
 80042c8:	f103 020c 	add.w	r2, r3, #12
 80042cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80042d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042d6:	4620      	mov	r0, r4
 80042d8:	f7ff fa98 	bl	800380c <LowPassFilter>
 80042dc:	4635      	mov	r5, r6
 80042de:	463c      	mov	r4, r7
 80042e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	602b      	str	r3, [r5, #0]
		r_est = LPF_r_est.y_prev;  // filter values
 80042e8:	4b53      	ldr	r3, [pc, #332]	; (8004438 <fusion_V+0x388>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		float eq_s = fusion.k/ (fusion.ep + (1 + 1 / (fabs(fusion.error)) - fusion.ep)* expf(-fusion.delta * fabs(sliding_surface)));
 80042ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fc f8f4 	bl	80004e0 <__aeabi_f2d>
 80042f8:	4604      	mov	r4, r0
 80042fa:	460d      	mov	r5, r1
 80042fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004300:	4618      	mov	r0, r3
 8004302:	f7fc f8ed 	bl	80004e0 <__aeabi_f2d>
 8004306:	4680      	mov	r8, r0
 8004308:	4689      	mov	r9, r1
 800430a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800430e:	eef0 7ae7 	vabs.f32	s15, s15
 8004312:	ee17 0a90 	vmov	r0, s15
 8004316:	f7fc f8e3 	bl	80004e0 <__aeabi_f2d>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	f04f 0000 	mov.w	r0, #0
 8004322:	4946      	ldr	r1, [pc, #280]	; (800443c <fusion_V+0x38c>)
 8004324:	f7fc fa5e 	bl	80007e4 <__aeabi_ddiv>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4610      	mov	r0, r2
 800432e:	4619      	mov	r1, r3
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	4b41      	ldr	r3, [pc, #260]	; (800443c <fusion_V+0x38c>)
 8004336:	f7fb ff75 	bl	8000224 <__adddf3>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4692      	mov	sl, r2
 8004340:	469b      	mov	fp, r3
 8004342:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004346:	4618      	mov	r0, r3
 8004348:	f7fc f8ca 	bl	80004e0 <__aeabi_f2d>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4650      	mov	r0, sl
 8004352:	4659      	mov	r1, fp
 8004354:	f7fb ff64 	bl	8000220 <__aeabi_dsub>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4692      	mov	sl, r2
 800435e:	469b      	mov	fp, r3
 8004360:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8004364:	eeb1 7a67 	vneg.f32	s14, s15
 8004368:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800436c:	eef0 7ae7 	vabs.f32	s15, s15
 8004370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004374:	eeb0 0a67 	vmov.f32	s0, s15
 8004378:	f006 fdbc 	bl	800aef4 <expf>
 800437c:	ee10 3a10 	vmov	r3, s0
 8004380:	4618      	mov	r0, r3
 8004382:	f7fc f8ad 	bl	80004e0 <__aeabi_f2d>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4650      	mov	r0, sl
 800438c:	4659      	mov	r1, fp
 800438e:	f7fc f8ff 	bl	8000590 <__aeabi_dmul>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4640      	mov	r0, r8
 8004398:	4649      	mov	r1, r9
 800439a:	f7fb ff43 	bl	8000224 <__adddf3>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4620      	mov	r0, r4
 80043a4:	4629      	mov	r1, r5
 80043a6:	f7fc fa1d 	bl	80007e4 <__aeabi_ddiv>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	4610      	mov	r0, r2
 80043b0:	4619      	mov	r1, r3
 80043b2:	f7fc fbc5 	bl	8000b40 <__aeabi_d2f>
 80043b6:	4603      	mov	r3, r0
 80043b8:	62bb      	str	r3, [r7, #40]	; 0x28
		float output_SMC = (1 / an)* ((cn * shaft_velocity) - r_est+ (eq_s * _sign(sliding_surface)));
 80043ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043be:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80043c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043c6:	4b1e      	ldr	r3, [pc, #120]	; (8004440 <fusion_V+0x390>)
 80043c8:	edd3 6a00 	vldr	s13, [r3]
 80043cc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80043d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80043d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80043d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80043dc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80043e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e8:	d502      	bpl.n	80043f0 <fusion_V+0x340>
 80043ea:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80043ee:	e031      	b.n	8004454 <fusion_V+0x3a4>
 80043f0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80043f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043fc:	dd28      	ble.n	8004450 <fusion_V+0x3a0>
 80043fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004402:	e027      	b.n	8004454 <fusion_V+0x3a4>
 8004404:	f3af 8000 	nop.w
 8004408:	3a51b717 	.word	0x3a51b717
 800440c:	3a51b717 	.word	0x3a51b717
 8004410:	20000ce4 	.word	0x20000ce4
 8004414:	20000c5c 	.word	0x20000c5c
 8004418:	20000c54 	.word	0x20000c54
 800441c:	20000c50 	.word	0x20000c50
 8004420:	20000c58 	.word	0x20000c58
 8004424:	20000908 	.word	0x20000908
 8004428:	3ff80000 	.word	0x3ff80000
 800442c:	20000cf4 	.word	0x20000cf4
 8004430:	20000928 	.word	0x20000928
 8004434:	200009a8 	.word	0x200009a8
 8004438:	200009bc 	.word	0x200009bc
 800443c:	3ff00000 	.word	0x3ff00000
 8004440:	20000910 	.word	0x20000910
 8004444:	a0b5ed8d 	.word	0xa0b5ed8d
 8004448:	3eb0c6f7 	.word	0x3eb0c6f7
 800444c:	00000000 	.word	0x00000000
 8004450:	ed5f 7a02 	vldr	s15, [pc, #-8]	; 800444c <fusion_V+0x39c>
 8004454:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8004458:	ee67 7a86 	vmul.f32	s15, s15, s12
 800445c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004464:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		LPF_SMC_out.x = output_SMC;
 8004468:	4a82      	ldr	r2, [pc, #520]	; (8004674 <fusion_V+0x5c4>)
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	6013      	str	r3, [r2, #0]
		LPF_SMC_out = LowPassFilter(LPF_SMC_out);
 800446e:	4e81      	ldr	r6, [pc, #516]	; (8004674 <fusion_V+0x5c4>)
 8004470:	463c      	mov	r4, r7
 8004472:	4b80      	ldr	r3, [pc, #512]	; (8004674 <fusion_V+0x5c4>)
 8004474:	466d      	mov	r5, sp
 8004476:	f103 020c 	add.w	r2, r3, #12
 800447a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800447e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004482:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004484:	4620      	mov	r0, r4
 8004486:	f7ff f9c1 	bl	800380c <LowPassFilter>
 800448a:	4635      	mov	r5, r6
 800448c:	463c      	mov	r4, r7
 800448e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	602b      	str	r3, [r5, #0]
		output_SMC = LPF_SMC_out.y_prev;
 8004496:	4b77      	ldr	r3, [pc, #476]	; (8004674 <fusion_V+0x5c4>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
		output_SMC = _constrain(output_SMC, -fusion.limit, fusion.limit);
 800449c:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 80044a0:	eef1 7a67 	vneg.f32	s15, s15
 80044a4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80044a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b0:	d504      	bpl.n	80044bc <fusion_V+0x40c>
 80044b2:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 80044b6:	eef1 7a67 	vneg.f32	s15, s15
 80044ba:	e00d      	b.n	80044d8 <fusion_V+0x428>
 80044bc:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 80044c0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80044c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044cc:	dd02      	ble.n	80044d4 <fusion_V+0x424>
 80044ce:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 80044d2:	e001      	b.n	80044d8 <fusion_V+0x428>
 80044d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80044d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		fusion.output_prev = output_SMC;
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		fusion.r_est_prev = r_est ;
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		fusion.dr_est_prev = dr_est ;
 80044e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		fusion.w_est_prev = w_est ;
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		fusion.dw_est_prev = dw_est ;
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044fa:	e0a1      	b.n	8004640 <fusion_V+0x590>
	}
	else {
		float proportional = fusion.P * fusion.error;
 80044fc:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8004500:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8004504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004508:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	// Tustin transform of the integral part
	// u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
		float integral = fusion.integral_prev
 800450c:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
				+ fusion.I * Ts * 0.5f * (fusion.error + fusion.error_prev);
 8004510:	edd7 6a39 	vldr	s13, [r7, #228]	; 0xe4
 8004514:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800451c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004520:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004524:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8004528:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800452c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004530:	ee66 7aa7 	vmul.f32	s15, s13, s15
		float integral = fusion.integral_prev
 8004534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004538:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		if ((state_enable == 0) || (integral > 23.5) || (integral < -23.5)) {
 800453c:	4b4e      	ldr	r3, [pc, #312]	; (8004678 <fusion_V+0x5c8>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	f083 0301 	eor.w	r3, r3, #1
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d111      	bne.n	800456e <fusion_V+0x4be>
 800454a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800454e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800467c <fusion_V+0x5cc>
 8004552:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455a:	dc08      	bgt.n	800456e <fusion_V+0x4be>
 800455c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004560:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004680 <fusion_V+0x5d0>
 8004564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800456c:	d502      	bpl.n	8004574 <fusion_V+0x4c4>
			integral = 0.0f;
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	663b      	str	r3, [r7, #96]	; 0x60
		}
	// antiwindup - limit the output
		integral = _constrain(integral, -fusion.anti_windup, fusion.anti_windup);
 8004574:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8004578:	eef1 7a67 	vneg.f32	s15, s15
 800457c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004580:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004588:	d504      	bpl.n	8004594 <fusion_V+0x4e4>
 800458a:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 800458e:	eef1 7a67 	vneg.f32	s15, s15
 8004592:	e00d      	b.n	80045b0 <fusion_V+0x500>
 8004594:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8004598:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800459c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a4:	dd02      	ble.n	80045ac <fusion_V+0x4fc>
 80045a6:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 80045aa:	e001      	b.n	80045b0 <fusion_V+0x500>
 80045ac:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80045b0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	// Discrete derivation
	// u_dk = D(ek - ek_1)/Ts
		float derivative = fusion.D * (fusion.error - fusion.error_prev) / Ts;
 80045b4:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
 80045b8:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80045bc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80045c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80045c4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80045c8:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80045cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045d0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		float output_PID = proportional + integral + derivative;
 80045d4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80045d8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80045dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80045e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	// antiwindup - limit the output variable
		output_PID = _constrain(output_PID, -fusion.limit, fusion.limit);
 80045ec:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 80045f0:	eef1 7a67 	vneg.f32	s15, s15
 80045f4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80045f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004600:	d504      	bpl.n	800460c <fusion_V+0x55c>
 8004602:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8004606:	eef1 7a67 	vneg.f32	s15, s15
 800460a:	e00d      	b.n	8004628 <fusion_V+0x578>
 800460c:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8004610:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004614:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461c:	dd02      	ble.n	8004624 <fusion_V+0x574>
 800461e:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8004622:	e001      	b.n	8004628 <fusion_V+0x578>
 8004624:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004628:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		fusion.output_prev = output_PID;
 800462c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800462e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		fusion.error_prev = fusion.error ;
 8004632:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004636:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		fusion.integral_prev = integral;
 800463a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800463c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	}

	fusion.error_est_prev = fusion.error_est ;
 8004640:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004644:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	fusion.timestamp_prev = timestamp_now;
 8004648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800464a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	fusion.dtx = dtx ;
 800464e:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <fusion_V+0x5d4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	return fusion;
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4618      	mov	r0, r3
 800465a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800465e:	2274      	movs	r2, #116	; 0x74
 8004660:	4619      	mov	r1, r3
 8004662:	f006 fb93 	bl	800ad8c <memcpy>
}
 8004666:	69f8      	ldr	r0, [r7, #28]
 8004668:	376c      	adds	r7, #108	; 0x6c
 800466a:	46bd      	mov	sp, r7
 800466c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004670:	b004      	add	sp, #16
 8004672:	4770      	bx	lr
 8004674:	200009d0 	.word	0x200009d0
 8004678:	20000d24 	.word	0x20000d24
 800467c:	41bc0000 	.word	0x41bc0000
 8004680:	c1bc0000 	.word	0xc1bc0000
 8004684:	20000ce4 	.word	0x20000ce4

08004688 <fusion_angle>:

void fusion_angle(float new_target) {
 8004688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800468a:	b0cb      	sub	sp, #300	; 0x12c
 800468c:	af1a      	add	r7, sp, #104	; 0x68
 800468e:	ed87 0a2f 	vstr	s0, [r7, #188]	; 0xbc

	shaft_angle = shaftAngle();
 8004692:	f7fe f841 	bl	8002718 <shaftAngle>
 8004696:	eef0 7a40 	vmov.f32	s15, s0
 800469a:	4b5c      	ldr	r3, [pc, #368]	; (800480c <fusion_angle+0x184>)
 800469c:	edc3 7a00 	vstr	s15, [r3]
	shaft_velocity = shaftVelocity();
 80046a0:	f7fe f874 	bl	800278c <shaftVelocity>
 80046a4:	eef0 7a40 	vmov.f32	s15, s0
 80046a8:	4b59      	ldr	r3, [pc, #356]	; (8004810 <fusion_angle+0x188>)
 80046aa:	edc3 7a00 	vstr	s15, [r3]
	electrical_angle = electricalAngle();
 80046ae:	f7fe f8d1 	bl	8002854 <electricalAngle>
 80046b2:	eef0 7a40 	vmov.f32	s15, s0
 80046b6:	4b57      	ldr	r3, [pc, #348]	; (8004814 <fusion_angle+0x18c>)
 80046b8:	edc3 7a00 	vstr	s15, [r3]
	current = getFOCCurrents(electrical_angle);
 80046bc:	4b55      	ldr	r3, [pc, #340]	; (8004814 <fusion_angle+0x18c>)
 80046be:	edd3 7a00 	vldr	s15, [r3]
 80046c2:	eeb0 0a67 	vmov.f32	s0, s15
 80046c6:	f7fd fa8b 	bl	8001be0 <getFOCCurrents>
 80046ca:	eeb0 7a40 	vmov.f32	s14, s0
 80046ce:	eef0 7a60 	vmov.f32	s15, s1
 80046d2:	4b51      	ldr	r3, [pc, #324]	; (8004818 <fusion_angle+0x190>)
 80046d4:	ed83 7a00 	vstr	s14, [r3]
 80046d8:	edc3 7a01 	vstr	s15, [r3, #4]

	//PID - SMC -----------------------------------------------------------------------
	if (_isset(new_target))
 80046dc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80046e0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800481c <fusion_angle+0x194>
 80046e4:	eef4 7a47 	vcmp.f32	s15, s14
 80046e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ec:	d003      	beq.n	80046f6 <fusion_angle+0x6e>
		target = new_target;
 80046ee:	4a4c      	ldr	r2, [pc, #304]	; (8004820 <fusion_angle+0x198>)
 80046f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80046f4:	6013      	str	r3, [r2, #0]

// angle set point
	shaft_angle_sp = target;
 80046f6:	4b4a      	ldr	r3, [pc, #296]	; (8004820 <fusion_angle+0x198>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a4a      	ldr	r2, [pc, #296]	; (8004824 <fusion_angle+0x19c>)
 80046fc:	6013      	str	r3, [r2, #0]
// calculate velocity set point
	angle.error = shaft_angle_sp - shaft_angle;
 80046fe:	4b49      	ldr	r3, [pc, #292]	; (8004824 <fusion_angle+0x19c>)
 8004700:	ed93 7a00 	vldr	s14, [r3]
 8004704:	4b41      	ldr	r3, [pc, #260]	; (800480c <fusion_angle+0x184>)
 8004706:	edd3 7a00 	vldr	s15, [r3]
 800470a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800470e:	4b46      	ldr	r3, [pc, #280]	; (8004828 <fusion_angle+0x1a0>)
 8004710:	edc3 7a00 	vstr	s15, [r3]
	angle = PID(angle);
 8004714:	4b44      	ldr	r3, [pc, #272]	; (8004828 <fusion_angle+0x1a0>)
 8004716:	607b      	str	r3, [r7, #4]
 8004718:	f107 0c80 	add.w	ip, r7, #128	; 0x80
 800471c:	4e42      	ldr	r6, [pc, #264]	; (8004828 <fusion_angle+0x1a0>)
 800471e:	466d      	mov	r5, sp
 8004720:	f106 0408 	add.w	r4, r6, #8
 8004724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800472a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800472c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004730:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004734:	e896 000c 	ldmia.w	r6, {r2, r3}
 8004738:	4660      	mov	r0, ip
 800473a:	f7ff f8dd 	bl	80038f8 <PID>
 800473e:	687d      	ldr	r5, [r7, #4]
 8004740:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8004744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800474a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800474c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800474e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004750:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004754:	e885 0003 	stmia.w	r5, {r0, r1}

	shaft_angle = shaftAngle();
 8004758:	f7fd ffde 	bl	8002718 <shaftAngle>
 800475c:	eef0 7a40 	vmov.f32	s15, s0
 8004760:	4b2a      	ldr	r3, [pc, #168]	; (800480c <fusion_angle+0x184>)
 8004762:	edc3 7a00 	vstr	s15, [r3]
	shaft_velocity = shaftVelocity();
 8004766:	f7fe f811 	bl	800278c <shaftVelocity>
 800476a:	eef0 7a40 	vmov.f32	s15, s0
 800476e:	4b28      	ldr	r3, [pc, #160]	; (8004810 <fusion_angle+0x188>)
 8004770:	edc3 7a00 	vstr	s15, [r3]
	electrical_angle = electricalAngle();
 8004774:	f7fe f86e 	bl	8002854 <electricalAngle>
 8004778:	eef0 7a40 	vmov.f32	s15, s0
 800477c:	4b25      	ldr	r3, [pc, #148]	; (8004814 <fusion_angle+0x18c>)
 800477e:	edc3 7a00 	vstr	s15, [r3]
	current = getFOCCurrents(electrical_angle);
 8004782:	4b24      	ldr	r3, [pc, #144]	; (8004814 <fusion_angle+0x18c>)
 8004784:	edd3 7a00 	vldr	s15, [r3]
 8004788:	eeb0 0a67 	vmov.f32	s0, s15
 800478c:	f7fd fa28 	bl	8001be0 <getFOCCurrents>
 8004790:	eeb0 7a40 	vmov.f32	s14, s0
 8004794:	eef0 7a60 	vmov.f32	s15, s1
 8004798:	4b1f      	ldr	r3, [pc, #124]	; (8004818 <fusion_angle+0x190>)
 800479a:	ed83 7a00 	vstr	s14, [r3]
 800479e:	edc3 7a01 	vstr	s15, [r3, #4]

	fusion_vel.error = angle.output_prev - shaft_velocity;
 80047a2:	4b21      	ldr	r3, [pc, #132]	; (8004828 <fusion_angle+0x1a0>)
 80047a4:	ed93 7a06 	vldr	s14, [r3, #24]
 80047a8:	4b19      	ldr	r3, [pc, #100]	; (8004810 <fusion_angle+0x188>)
 80047aa:	edd3 7a00 	vldr	s15, [r3]
 80047ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047b2:	4b1e      	ldr	r3, [pc, #120]	; (800482c <fusion_angle+0x1a4>)
 80047b4:	edc3 7a00 	vstr	s15, [r3]
	fusion_vel.error_est = fusion_vel.w_est_prev - shaft_velocity;
 80047b8:	4b1c      	ldr	r3, [pc, #112]	; (800482c <fusion_angle+0x1a4>)
 80047ba:	ed93 7a06 	vldr	s14, [r3, #24]
 80047be:	4b14      	ldr	r3, [pc, #80]	; (8004810 <fusion_angle+0x188>)
 80047c0:	edd3 7a00 	vldr	s15, [r3]
 80047c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047c8:	4b18      	ldr	r3, [pc, #96]	; (800482c <fusion_angle+0x1a4>)
 80047ca:	edc3 7a02 	vstr	s15, [r3, #8]
	fusion_vel = fusion_V(fusion_vel);
 80047ce:	4e17      	ldr	r6, [pc, #92]	; (800482c <fusion_angle+0x1a4>)
 80047d0:	f107 0508 	add.w	r5, r7, #8
 80047d4:	4c15      	ldr	r4, [pc, #84]	; (800482c <fusion_angle+0x1a4>)
 80047d6:	4668      	mov	r0, sp
 80047d8:	f104 030c 	add.w	r3, r4, #12
 80047dc:	2268      	movs	r2, #104	; 0x68
 80047de:	4619      	mov	r1, r3
 80047e0:	f006 fad4 	bl	800ad8c <memcpy>
 80047e4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80047e8:	4628      	mov	r0, r5
 80047ea:	f7ff fc61 	bl	80040b0 <fusion_V>
 80047ee:	4630      	mov	r0, r6
 80047f0:	f107 0308 	add.w	r3, r7, #8
 80047f4:	2274      	movs	r2, #116	; 0x74
 80047f6:	4619      	mov	r1, r3
 80047f8:	f006 fac8 	bl	800ad8c <memcpy>
	current_sp = fusion_vel.output_prev;
 80047fc:	4b0b      	ldr	r3, [pc, #44]	; (800482c <fusion_angle+0x1a4>)
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	4a0b      	ldr	r2, [pc, #44]	; (8004830 <fusion_angle+0x1a8>)
 8004802:	6013      	str	r3, [r2, #0]
}
 8004804:	bf00      	nop
 8004806:	37c4      	adds	r7, #196	; 0xc4
 8004808:	46bd      	mov	sp, r7
 800480a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800480c:	20000908 	.word	0x20000908
 8004810:	20000910 	.word	0x20000910
 8004814:	2000090c 	.word	0x2000090c
 8004818:	20000928 	.word	0x20000928
 800481c:	c640e400 	.word	0xc640e400
 8004820:	20000904 	.word	0x20000904
 8004824:	2000091c 	.word	0x2000091c
 8004828:	20000a90 	.word	0x20000a90
 800482c:	20000bc8 	.word	0x20000bc8
 8004830:	20000914 	.word	0x20000914

08004834 <move_angle>:
//  voltage.q = current_sp*phase_resistance;
//  voltage.d = 0;

}

void move_angle(float new_target) {
 8004834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004836:	b09f      	sub	sp, #124	; 0x7c
 8004838:	af0c      	add	r7, sp, #48	; 0x30
 800483a:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
// get angular velocity
	shaft_velocity = shaftVelocity(); // read value even if motor is disabled to keep the monitoring updated
 800483e:	f7fd ffa5 	bl	800278c <shaftVelocity>
 8004842:	eef0 7a40 	vmov.f32	s15, s0
 8004846:	4b3c      	ldr	r3, [pc, #240]	; (8004938 <move_angle+0x104>)
 8004848:	edc3 7a00 	vstr	s15, [r3]

// downsampling (optional)
// if(motion_cnt++ < motion_downsample) return;
// motion_cnt = 0;
// set internal target variable
	if (_isset(new_target))
 800484c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004850:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800493c <move_angle+0x108>
 8004854:	eef4 7a47 	vcmp.f32	s15, s14
 8004858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485c:	d002      	beq.n	8004864 <move_angle+0x30>
		target = new_target;
 800485e:	4a38      	ldr	r2, [pc, #224]	; (8004940 <move_angle+0x10c>)
 8004860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004862:	6013      	str	r3, [r2, #0]

// angle set point
	shaft_angle_sp = target;
 8004864:	4b36      	ldr	r3, [pc, #216]	; (8004940 <move_angle+0x10c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a36      	ldr	r2, [pc, #216]	; (8004944 <move_angle+0x110>)
 800486a:	6013      	str	r3, [r2, #0]
// calculate velocity set point
	angle.error = shaft_angle_sp - shaft_angle;
 800486c:	4b35      	ldr	r3, [pc, #212]	; (8004944 <move_angle+0x110>)
 800486e:	ed93 7a00 	vldr	s14, [r3]
 8004872:	4b35      	ldr	r3, [pc, #212]	; (8004948 <move_angle+0x114>)
 8004874:	edd3 7a00 	vldr	s15, [r3]
 8004878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800487c:	4b33      	ldr	r3, [pc, #204]	; (800494c <move_angle+0x118>)
 800487e:	edc3 7a00 	vstr	s15, [r3]
	angle = PID(angle);
 8004882:	4b32      	ldr	r3, [pc, #200]	; (800494c <move_angle+0x118>)
 8004884:	607b      	str	r3, [r7, #4]
 8004886:	f107 0c08 	add.w	ip, r7, #8
 800488a:	4e30      	ldr	r6, [pc, #192]	; (800494c <move_angle+0x118>)
 800488c:	466d      	mov	r5, sp
 800488e:	f106 0408 	add.w	r4, r6, #8
 8004892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800489a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800489e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80048a2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80048a6:	4660      	mov	r0, ip
 80048a8:	f7ff f826 	bl	80038f8 <PID>
 80048ac:	687d      	ldr	r5, [r7, #4]
 80048ae:	f107 0408 	add.w	r4, r7, #8
 80048b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048c2:	e885 0003 	stmia.w	r5, {r0, r1}
	shaft_velocity_sp = angle.output_prev;
 80048c6:	4b21      	ldr	r3, [pc, #132]	; (800494c <move_angle+0x118>)
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	4a21      	ldr	r2, [pc, #132]	; (8004950 <move_angle+0x11c>)
 80048cc:	6013      	str	r3, [r2, #0]
// calculate the torque command
	velocity.error = shaft_velocity_sp - shaft_velocity;
 80048ce:	4b20      	ldr	r3, [pc, #128]	; (8004950 <move_angle+0x11c>)
 80048d0:	ed93 7a00 	vldr	s14, [r3]
 80048d4:	4b18      	ldr	r3, [pc, #96]	; (8004938 <move_angle+0x104>)
 80048d6:	edd3 7a00 	vldr	s15, [r3]
 80048da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048de:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <move_angle+0x120>)
 80048e0:	edc3 7a00 	vstr	s15, [r3]
	velocity = PID(velocity);
 80048e4:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <move_angle+0x120>)
 80048e6:	607b      	str	r3, [r7, #4]
 80048e8:	f107 0c08 	add.w	ip, r7, #8
 80048ec:	4e19      	ldr	r6, [pc, #100]	; (8004954 <move_angle+0x120>)
 80048ee:	466d      	mov	r5, sp
 80048f0:	f106 0408 	add.w	r4, r6, #8
 80048f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004900:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004904:	e896 000c 	ldmia.w	r6, {r2, r3}
 8004908:	4660      	mov	r0, ip
 800490a:	f7fe fff5 	bl	80038f8 <PID>
 800490e:	687d      	ldr	r5, [r7, #4]
 8004910:	f107 0408 	add.w	r4, r7, #8
 8004914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004916:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800491a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800491c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800491e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004920:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004924:	e885 0003 	stmia.w	r5, {r0, r1}
	current_sp = velocity.output_prev;
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <move_angle+0x120>)
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	4a0a      	ldr	r2, [pc, #40]	; (8004958 <move_angle+0x124>)
 800492e:	6013      	str	r3, [r2, #0]

//  voltage.q = current_sp*phase_resistance;
//  voltage.d = 0;
}
 8004930:	bf00      	nop
 8004932:	374c      	adds	r7, #76	; 0x4c
 8004934:	46bd      	mov	sp, r7
 8004936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004938:	20000910 	.word	0x20000910
 800493c:	c640e400 	.word	0xc640e400
 8004940:	20000904 	.word	0x20000904
 8004944:	2000091c 	.word	0x2000091c
 8004948:	20000908 	.word	0x20000908
 800494c:	20000a90 	.word	0x20000a90
 8004950:	20000918 	.word	0x20000918
 8004954:	20000a58 	.word	0x20000a58
 8004958:	20000914 	.word	0x20000914
 800495c:	00000000 	.word	0x00000000

08004960 <angleOpenloop>:
}

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float angleOpenloop(float target_angle) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long now_us = micros();
 800496a:	f7fc ffe9 	bl	8001940 <micros>
 800496e:	6138      	str	r0, [r7, #16]
// calculate the sample time from last call
	float Ts = (now_us - open_loop_timestamp) * 1e-6;
 8004970:	4b59      	ldr	r3, [pc, #356]	; (8004ad8 <angleOpenloop+0x178>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	461a      	mov	r2, r3
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	4618      	mov	r0, r3
 800497c:	f7fb fd8e 	bl	800049c <__aeabi_ui2d>
 8004980:	a353      	add	r3, pc, #332	; (adr r3, 8004ad0 <angleOpenloop+0x170>)
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	f7fb fe03 	bl	8000590 <__aeabi_dmul>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4610      	mov	r0, r2
 8004990:	4619      	mov	r1, r3
 8004992:	f7fc f8d5 	bl	8000b40 <__aeabi_d2f>
 8004996:	4603      	mov	r3, r0
 8004998:	617b      	str	r3, [r7, #20]
// quick fix for strange cases (micros overflow + timestamp not defined)
	if (Ts <= 0 || Ts > 0.5)
 800499a:	edd7 7a05 	vldr	s15, [r7, #20]
 800499e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a6:	d908      	bls.n	80049ba <angleOpenloop+0x5a>
 80049a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80049ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80049b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b8:	dd01      	ble.n	80049be <angleOpenloop+0x5e>
		Ts = 1e-3;
 80049ba:	4b48      	ldr	r3, [pc, #288]	; (8004adc <angleOpenloop+0x17c>)
 80049bc:	617b      	str	r3, [r7, #20]

// calculate the necessary angle to move from current position towards target angle
// with maximal velocity (velocity_limit)
	if (abs(target_angle - shaft_angle) > abs(velocity_limit * Ts)) {
 80049be:	4b48      	ldr	r3, [pc, #288]	; (8004ae0 <angleOpenloop+0x180>)
 80049c0:	edd3 7a00 	vldr	s15, [r3]
 80049c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80049c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049d0:	ee17 3a90 	vmov	r3, s15
 80049d4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80049d8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80049dc:	4b41      	ldr	r3, [pc, #260]	; (8004ae4 <angleOpenloop+0x184>)
 80049de:	ed93 7a00 	vldr	s14, [r3]
 80049e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80049e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049ee:	ee17 3a90 	vmov	r3, s15
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	bfb8      	it	lt
 80049f6:	425b      	neglt	r3, r3
 80049f8:	429a      	cmp	r2, r3
 80049fa:	dd3f      	ble.n	8004a7c <angleOpenloop+0x11c>
		shaft_angle += _sign(target_angle - shaft_angle) * abs(velocity_limit)
 80049fc:	4b38      	ldr	r3, [pc, #224]	; (8004ae0 <angleOpenloop+0x180>)
 80049fe:	edd3 7a00 	vldr	s15, [r3]
 8004a02:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a12:	d502      	bpl.n	8004a1a <angleOpenloop+0xba>
 8004a14:	f04f 32ff 	mov.w	r2, #4294967295
 8004a18:	e00f      	b.n	8004a3a <angleOpenloop+0xda>
 8004a1a:	4b31      	ldr	r3, [pc, #196]	; (8004ae0 <angleOpenloop+0x180>)
 8004a1c:	edd3 7a00 	vldr	s15, [r3]
 8004a20:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a30:	bfcc      	ite	gt
 8004a32:	2301      	movgt	r3, #1
 8004a34:	2300      	movle	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ae4 <angleOpenloop+0x184>)
 8004a3c:	edd3 7a00 	vldr	s15, [r3]
 8004a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a44:	ee17 3a90 	vmov	r3, s15
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bfb8      	it	lt
 8004a4c:	425b      	neglt	r3, r3
 8004a4e:	fb02 f303 	mul.w	r3, r2, r3
				* Ts;
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
		shaft_angle += _sign(target_angle - shaft_angle) * abs(velocity_limit)
 8004a62:	4b1f      	ldr	r3, [pc, #124]	; (8004ae0 <angleOpenloop+0x180>)
 8004a64:	edd3 7a00 	vldr	s15, [r3]
 8004a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a6c:	4b1c      	ldr	r3, [pc, #112]	; (8004ae0 <angleOpenloop+0x180>)
 8004a6e:	edc3 7a00 	vstr	s15, [r3]
		shaft_velocity = velocity_limit;
 8004a72:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <angleOpenloop+0x184>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1c      	ldr	r2, [pc, #112]	; (8004ae8 <angleOpenloop+0x188>)
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	e006      	b.n	8004a8a <angleOpenloop+0x12a>
	} else {
		shaft_angle = target_angle;
 8004a7c:	4a18      	ldr	r2, [pc, #96]	; (8004ae0 <angleOpenloop+0x180>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6013      	str	r3, [r2, #0]
		shaft_velocity = 0;
 8004a82:	4b19      	ldr	r3, [pc, #100]	; (8004ae8 <angleOpenloop+0x188>)
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]
	}

// use voltage limit or current limit
	float Uq = voltage_limit;
 8004a8a:	4b18      	ldr	r3, [pc, #96]	; (8004aec <angleOpenloop+0x18c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60fb      	str	r3, [r7, #12]
//  if(_isset(phase_resistance))
//	  Uq =  current_limit*phase_resistance;

// set the maximal allowed voltage (voltage_limit) with the necessary angle
	setPhaseVoltage(Uq, 0, _electricalAngle(shaft_angle, pole_pairs));
 8004a90:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <angleOpenloop+0x180>)
 8004a92:	edd3 7a00 	vldr	s15, [r3]
 8004a96:	4b16      	ldr	r3, [pc, #88]	; (8004af0 <angleOpenloop+0x190>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8004aa0:	f7fd fb0a 	bl	80020b8 <_electricalAngle>
 8004aa4:	eef0 7a40 	vmov.f32	s15, s0
 8004aa8:	eeb0 1a67 	vmov.f32	s2, s15
 8004aac:	eddf 0a11 	vldr	s1, [pc, #68]	; 8004af4 <angleOpenloop+0x194>
 8004ab0:	ed97 0a03 	vldr	s0, [r7, #12]
 8004ab4:	f7fd ff8c 	bl	80029d0 <setPhaseVoltage>

	open_loop_timestamp = now_us;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	4a07      	ldr	r2, [pc, #28]	; (8004ad8 <angleOpenloop+0x178>)
 8004abc:	6013      	str	r3, [r2, #0]
	return Uq;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	ee07 3a90 	vmov	s15, r3
}
 8004ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	a0b5ed8d 	.word	0xa0b5ed8d
 8004ad4:	3eb0c6f7 	.word	0x3eb0c6f7
 8004ad8:	20000ce0 	.word	0x20000ce0
 8004adc:	3a83126f 	.word	0x3a83126f
 8004ae0:	20000908 	.word	0x20000908
 8004ae4:	20000c68 	.word	0x20000c68
 8004ae8:	20000910 	.word	0x20000910
 8004aec:	20000c60 	.word	0x20000c60
 8004af0:	20000c5c 	.word	0x20000c5c
 8004af4:	00000000 	.word	0x00000000

08004af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004afc:	b672      	cpsid	i
}
 8004afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004b00:	e7fe      	b.n	8004b00 <Error_Handler+0x8>
	...

08004b04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b0a:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <HAL_MspInit+0x44>)
 8004b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0e:	4a0e      	ldr	r2, [pc, #56]	; (8004b48 <HAL_MspInit+0x44>)
 8004b10:	f043 0301 	orr.w	r3, r3, #1
 8004b14:	6613      	str	r3, [r2, #96]	; 0x60
 8004b16:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <HAL_MspInit+0x44>)
 8004b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	607b      	str	r3, [r7, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b22:	4b09      	ldr	r3, [pc, #36]	; (8004b48 <HAL_MspInit+0x44>)
 8004b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b26:	4a08      	ldr	r2, [pc, #32]	; (8004b48 <HAL_MspInit+0x44>)
 8004b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b2e:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <HAL_MspInit+0x44>)
 8004b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004b3a:	f003 f9f5 	bl	8007f28 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b3e:	bf00      	nop
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40021000 	.word	0x40021000

08004b4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b0a0      	sub	sp, #128	; 0x80
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b54:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	609a      	str	r2, [r3, #8]
 8004b60:	60da      	str	r2, [r3, #12]
 8004b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b64:	f107 031c 	add.w	r3, r7, #28
 8004b68:	2250      	movs	r2, #80	; 0x50
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f006 f91b 	bl	800ada8 <memset>
  if(hadc->Instance==ADC1)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b7a:	d169      	bne.n	8004c50 <HAL_ADC_MspInit+0x104>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b80:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004b82:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004b86:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b88:	f107 031c 	add.w	r3, r7, #28
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f003 fed7 	bl	8008940 <HAL_RCCEx_PeriphCLKConfig>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004b98:	f7ff ffae 	bl	8004af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004b9c:	4b65      	ldr	r3, [pc, #404]	; (8004d34 <HAL_ADC_MspInit+0x1e8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	4a64      	ldr	r2, [pc, #400]	; (8004d34 <HAL_ADC_MspInit+0x1e8>)
 8004ba4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004ba6:	4b63      	ldr	r3, [pc, #396]	; (8004d34 <HAL_ADC_MspInit+0x1e8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d10b      	bne.n	8004bc6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004bae:	4b62      	ldr	r3, [pc, #392]	; (8004d38 <HAL_ADC_MspInit+0x1ec>)
 8004bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb2:	4a61      	ldr	r2, [pc, #388]	; (8004d38 <HAL_ADC_MspInit+0x1ec>)
 8004bb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bba:	4b5f      	ldr	r3, [pc, #380]	; (8004d38 <HAL_ADC_MspInit+0x1ec>)
 8004bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bc2:	61bb      	str	r3, [r7, #24]
 8004bc4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bc6:	4b5c      	ldr	r3, [pc, #368]	; (8004d38 <HAL_ADC_MspInit+0x1ec>)
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bca:	4a5b      	ldr	r2, [pc, #364]	; (8004d38 <HAL_ADC_MspInit+0x1ec>)
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bd2:	4b59      	ldr	r3, [pc, #356]	; (8004d38 <HAL_ADC_MspInit+0x1ec>)
 8004bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CSOA_Pin;
 8004bde:	2301      	movs	r3, #1
 8004be0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004be2:	2303      	movs	r3, #3
 8004be4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(CSOA_GPIO_Port, &GPIO_InitStruct);
 8004bea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004bee:	4619      	mov	r1, r3
 8004bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bf4:	f002 ff5a 	bl	8007aac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004bf8:	4b50      	ldr	r3, [pc, #320]	; (8004d3c <HAL_ADC_MspInit+0x1f0>)
 8004bfa:	4a51      	ldr	r2, [pc, #324]	; (8004d40 <HAL_ADC_MspInit+0x1f4>)
 8004bfc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004bfe:	4b4f      	ldr	r3, [pc, #316]	; (8004d3c <HAL_ADC_MspInit+0x1f0>)
 8004c00:	2205      	movs	r2, #5
 8004c02:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c04:	4b4d      	ldr	r3, [pc, #308]	; (8004d3c <HAL_ADC_MspInit+0x1f0>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c0a:	4b4c      	ldr	r3, [pc, #304]	; (8004d3c <HAL_ADC_MspInit+0x1f0>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004c10:	4b4a      	ldr	r3, [pc, #296]	; (8004d3c <HAL_ADC_MspInit+0x1f0>)
 8004c12:	2280      	movs	r2, #128	; 0x80
 8004c14:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c16:	4b49      	ldr	r3, [pc, #292]	; (8004d3c <HAL_ADC_MspInit+0x1f0>)
 8004c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c1c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c1e:	4b47      	ldr	r3, [pc, #284]	; (8004d3c <HAL_ADC_MspInit+0x1f0>)
 8004c20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004c26:	4b45      	ldr	r3, [pc, #276]	; (8004d3c <HAL_ADC_MspInit+0x1f0>)
 8004c28:	2220      	movs	r2, #32
 8004c2a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004c2c:	4b43      	ldr	r3, [pc, #268]	; (8004d3c <HAL_ADC_MspInit+0x1f0>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004c32:	4842      	ldr	r0, [pc, #264]	; (8004d3c <HAL_ADC_MspInit+0x1f0>)
 8004c34:	f002 f828 	bl	8006c88 <HAL_DMA_Init>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8004c3e:	f7ff ff5b 	bl	8004af8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a3d      	ldr	r2, [pc, #244]	; (8004d3c <HAL_ADC_MspInit+0x1f0>)
 8004c46:	655a      	str	r2, [r3, #84]	; 0x54
 8004c48:	4a3c      	ldr	r2, [pc, #240]	; (8004d3c <HAL_ADC_MspInit+0x1f0>)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004c4e:	e06d      	b.n	8004d2c <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a3b      	ldr	r2, [pc, #236]	; (8004d44 <HAL_ADC_MspInit+0x1f8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d168      	bne.n	8004d2c <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c5e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004c60:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004c64:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c66:	f107 031c 	add.w	r3, r7, #28
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f003 fe68 	bl	8008940 <HAL_RCCEx_PeriphCLKConfig>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8004c76:	f7ff ff3f 	bl	8004af8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004c7a:	4b2e      	ldr	r3, [pc, #184]	; (8004d34 <HAL_ADC_MspInit+0x1e8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	4a2c      	ldr	r2, [pc, #176]	; (8004d34 <HAL_ADC_MspInit+0x1e8>)
 8004c82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004c84:	4b2b      	ldr	r3, [pc, #172]	; (8004d34 <HAL_ADC_MspInit+0x1e8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d10b      	bne.n	8004ca4 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004c8c:	4b2a      	ldr	r3, [pc, #168]	; (8004d38 <HAL_ADC_MspInit+0x1ec>)
 8004c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c90:	4a29      	ldr	r2, [pc, #164]	; (8004d38 <HAL_ADC_MspInit+0x1ec>)
 8004c92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c98:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <HAL_ADC_MspInit+0x1ec>)
 8004c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ca4:	4b24      	ldr	r3, [pc, #144]	; (8004d38 <HAL_ADC_MspInit+0x1ec>)
 8004ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca8:	4a23      	ldr	r2, [pc, #140]	; (8004d38 <HAL_ADC_MspInit+0x1ec>)
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cb0:	4b21      	ldr	r3, [pc, #132]	; (8004d38 <HAL_ADC_MspInit+0x1ec>)
 8004cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CSOB_Pin;
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(CSOB_GPIO_Port, &GPIO_InitStruct);
 8004cc8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004ccc:	4619      	mov	r1, r3
 8004cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cd2:	f002 feeb 	bl	8007aac <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8004cd6:	4b1c      	ldr	r3, [pc, #112]	; (8004d48 <HAL_ADC_MspInit+0x1fc>)
 8004cd8:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <HAL_ADC_MspInit+0x200>)
 8004cda:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004cdc:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <HAL_ADC_MspInit+0x1fc>)
 8004cde:	2224      	movs	r2, #36	; 0x24
 8004ce0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ce2:	4b19      	ldr	r3, [pc, #100]	; (8004d48 <HAL_ADC_MspInit+0x1fc>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ce8:	4b17      	ldr	r3, [pc, #92]	; (8004d48 <HAL_ADC_MspInit+0x1fc>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004cee:	4b16      	ldr	r3, [pc, #88]	; (8004d48 <HAL_ADC_MspInit+0x1fc>)
 8004cf0:	2280      	movs	r2, #128	; 0x80
 8004cf2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004cf4:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <HAL_ADC_MspInit+0x1fc>)
 8004cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cfa:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004cfc:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <HAL_ADC_MspInit+0x1fc>)
 8004cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d02:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004d04:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <HAL_ADC_MspInit+0x1fc>)
 8004d06:	2220      	movs	r2, #32
 8004d08:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004d0a:	4b0f      	ldr	r3, [pc, #60]	; (8004d48 <HAL_ADC_MspInit+0x1fc>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004d10:	480d      	ldr	r0, [pc, #52]	; (8004d48 <HAL_ADC_MspInit+0x1fc>)
 8004d12:	f001 ffb9 	bl	8006c88 <HAL_DMA_Init>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8004d1c:	f7ff feec 	bl	8004af8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a09      	ldr	r2, [pc, #36]	; (8004d48 <HAL_ADC_MspInit+0x1fc>)
 8004d24:	655a      	str	r2, [r3, #84]	; 0x54
 8004d26:	4a08      	ldr	r2, [pc, #32]	; (8004d48 <HAL_ADC_MspInit+0x1fc>)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004d2c:	bf00      	nop
 8004d2e:	3780      	adds	r7, #128	; 0x80
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	20000d2c 	.word	0x20000d2c
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	2000060c 	.word	0x2000060c
 8004d40:	40020008 	.word	0x40020008
 8004d44:	50000100 	.word	0x50000100
 8004d48:	2000066c 	.word	0x2000066c
 8004d4c:	4002001c 	.word	0x4002001c

08004d50 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a0a      	ldr	r2, [pc, #40]	; (8004d88 <HAL_CORDIC_MspInit+0x38>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d10b      	bne.n	8004d7a <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004d62:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <HAL_CORDIC_MspInit+0x3c>)
 8004d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d66:	4a09      	ldr	r2, [pc, #36]	; (8004d8c <HAL_CORDIC_MspInit+0x3c>)
 8004d68:	f043 0308 	orr.w	r3, r3, #8
 8004d6c:	6493      	str	r3, [r2, #72]	; 0x48
 8004d6e:	4b07      	ldr	r3, [pc, #28]	; (8004d8c <HAL_CORDIC_MspInit+0x3c>)
 8004d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40020c00 	.word	0x40020c00
 8004d8c:	40021000 	.word	0x40021000

08004d90 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <HAL_CRC_MspInit+0x38>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d10b      	bne.n	8004dba <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004da2:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <HAL_CRC_MspInit+0x3c>)
 8004da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da6:	4a09      	ldr	r2, [pc, #36]	; (8004dcc <HAL_CRC_MspInit+0x3c>)
 8004da8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004dac:	6493      	str	r3, [r2, #72]	; 0x48
 8004dae:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <HAL_CRC_MspInit+0x3c>)
 8004db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40023000 	.word	0x40023000
 8004dcc:	40021000 	.word	0x40021000

08004dd0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b09e      	sub	sp, #120	; 0x78
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	605a      	str	r2, [r3, #4]
 8004de2:	609a      	str	r2, [r3, #8]
 8004de4:	60da      	str	r2, [r3, #12]
 8004de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004de8:	f107 0314 	add.w	r3, r7, #20
 8004dec:	2250      	movs	r2, #80	; 0x50
 8004dee:	2100      	movs	r1, #0
 8004df0:	4618      	mov	r0, r3
 8004df2:	f005 ffd9 	bl	800ada8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a24      	ldr	r2, [pc, #144]	; (8004e8c <HAL_FDCAN_MspInit+0xbc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d141      	bne.n	8004e84 <HAL_FDCAN_MspInit+0xb4>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e04:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004e06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e0a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	4618      	mov	r0, r3
 8004e12:	f003 fd95 	bl	8008940 <HAL_RCCEx_PeriphCLKConfig>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004e1c:	f7ff fe6c 	bl	8004af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004e20:	4b1b      	ldr	r3, [pc, #108]	; (8004e90 <HAL_FDCAN_MspInit+0xc0>)
 8004e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e24:	4a1a      	ldr	r2, [pc, #104]	; (8004e90 <HAL_FDCAN_MspInit+0xc0>)
 8004e26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e2c:	4b18      	ldr	r3, [pc, #96]	; (8004e90 <HAL_FDCAN_MspInit+0xc0>)
 8004e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e38:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <HAL_FDCAN_MspInit+0xc0>)
 8004e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3c:	4a14      	ldr	r2, [pc, #80]	; (8004e90 <HAL_FDCAN_MspInit+0xc0>)
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e44:	4b12      	ldr	r3, [pc, #72]	; (8004e90 <HAL_FDCAN_MspInit+0xc0>)
 8004e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004e50:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004e54:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e56:	2302      	movs	r3, #2
 8004e58:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004e62:	2309      	movs	r3, #9
 8004e64:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e66:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e70:	f002 fe1c 	bl	8007aac <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004e74:	2200      	movs	r2, #0
 8004e76:	2100      	movs	r1, #0
 8004e78:	2015      	movs	r0, #21
 8004e7a:	f001 fde6 	bl	8006a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004e7e:	2015      	movs	r0, #21
 8004e80:	f001 fdfd 	bl	8006a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8004e84:	bf00      	nop
 8004e86:	3778      	adds	r7, #120	; 0x78
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40006400 	.word	0x40006400
 8004e90:	40021000 	.word	0x40021000

08004e94 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a0a      	ldr	r2, [pc, #40]	; (8004ecc <HAL_FMAC_MspInit+0x38>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d10b      	bne.n	8004ebe <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8004ea6:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <HAL_FMAC_MspInit+0x3c>)
 8004ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eaa:	4a09      	ldr	r2, [pc, #36]	; (8004ed0 <HAL_FMAC_MspInit+0x3c>)
 8004eac:	f043 0310 	orr.w	r3, r3, #16
 8004eb0:	6493      	str	r3, [r2, #72]	; 0x48
 8004eb2:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <HAL_FMAC_MspInit+0x3c>)
 8004eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8004ebe:	bf00      	nop
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40021400 	.word	0x40021400
 8004ed0:	40021000 	.word	0x40021000

08004ed4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08a      	sub	sp, #40	; 0x28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004edc:	f107 0314 	add.w	r3, r7, #20
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	605a      	str	r2, [r3, #4]
 8004ee6:	609a      	str	r2, [r3, #8]
 8004ee8:	60da      	str	r2, [r3, #12]
 8004eea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a17      	ldr	r2, [pc, #92]	; (8004f50 <HAL_SPI_MspInit+0x7c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d128      	bne.n	8004f48 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ef6:	4b17      	ldr	r3, [pc, #92]	; (8004f54 <HAL_SPI_MspInit+0x80>)
 8004ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efa:	4a16      	ldr	r2, [pc, #88]	; (8004f54 <HAL_SPI_MspInit+0x80>)
 8004efc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f00:	6613      	str	r3, [r2, #96]	; 0x60
 8004f02:	4b14      	ldr	r3, [pc, #80]	; (8004f54 <HAL_SPI_MspInit+0x80>)
 8004f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f0e:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <HAL_SPI_MspInit+0x80>)
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	4a10      	ldr	r2, [pc, #64]	; (8004f54 <HAL_SPI_MspInit+0x80>)
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f1a:	4b0e      	ldr	r3, [pc, #56]	; (8004f54 <HAL_SPI_MspInit+0x80>)
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = CLK_CON_Pin|MISO_CON_Pin|MOSI_CON_Pin;
 8004f26:	23e0      	movs	r3, #224	; 0xe0
 8004f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f32:	2300      	movs	r3, #0
 8004f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004f36:	2305      	movs	r3, #5
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f3a:	f107 0314 	add.w	r3, r7, #20
 8004f3e:	4619      	mov	r1, r3
 8004f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f44:	f002 fdb2 	bl	8007aac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004f48:	bf00      	nop
 8004f4a:	3728      	adds	r7, #40	; 0x28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40013000 	.word	0x40013000
 8004f54:	40021000 	.word	0x40021000

08004f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <HAL_TIM_Base_MspInit+0x44>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d113      	bne.n	8004f92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <HAL_TIM_Base_MspInit+0x48>)
 8004f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f6e:	4a0c      	ldr	r2, [pc, #48]	; (8004fa0 <HAL_TIM_Base_MspInit+0x48>)
 8004f70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f74:	6613      	str	r3, [r2, #96]	; 0x60
 8004f76:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <HAL_TIM_Base_MspInit+0x48>)
 8004f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004f82:	2200      	movs	r2, #0
 8004f84:	2100      	movs	r1, #0
 8004f86:	2019      	movs	r0, #25
 8004f88:	f001 fd5f 	bl	8006a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004f8c:	2019      	movs	r0, #25
 8004f8e:	f001 fd76 	bl	8006a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40012c00 	.word	0x40012c00
 8004fa0:	40021000 	.word	0x40021000

08004fa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fac:	f107 030c 	add.w	r3, r7, #12
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	605a      	str	r2, [r3, #4]
 8004fb6:	609a      	str	r2, [r3, #8]
 8004fb8:	60da      	str	r2, [r3, #12]
 8004fba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a12      	ldr	r2, [pc, #72]	; (800500c <HAL_TIM_MspPostInit+0x68>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d11d      	bne.n	8005002 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fc6:	4b12      	ldr	r3, [pc, #72]	; (8005010 <HAL_TIM_MspPostInit+0x6c>)
 8004fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fca:	4a11      	ldr	r2, [pc, #68]	; (8005010 <HAL_TIM_MspPostInit+0x6c>)
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fd2:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <HAL_TIM_MspPostInit+0x6c>)
 8004fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	60bb      	str	r3, [r7, #8]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWMC_Pin|PWMB_Pin|PWMA_Pin;
 8004fde:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004fe2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fec:	2303      	movs	r3, #3
 8004fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004ff0:	2306      	movs	r3, #6
 8004ff2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ff4:	f107 030c 	add.w	r3, r7, #12
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ffe:	f002 fd55 	bl	8007aac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005002:	bf00      	nop
 8005004:	3720      	adds	r7, #32
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40021000 	.word	0x40021000

08005014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005018:	e7fe      	b.n	8005018 <NMI_Handler+0x4>

0800501a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800501a:	b480      	push	{r7}
 800501c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800501e:	e7fe      	b.n	800501e <HardFault_Handler+0x4>

08005020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005024:	e7fe      	b.n	8005024 <MemManage_Handler+0x4>

08005026 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005026:	b480      	push	{r7}
 8005028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800502a:	e7fe      	b.n	800502a <BusFault_Handler+0x4>

0800502c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005030:	e7fe      	b.n	8005030 <UsageFault_Handler+0x4>

08005032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005032:	b480      	push	{r7}
 8005034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005036:	bf00      	nop
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005044:	bf00      	nop
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800504e:	b480      	push	{r7}
 8005050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005052:	bf00      	nop
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005060:	f000 f8b8 	bl	80051d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005064:	bf00      	nop
 8005066:	bd80      	pop	{r7, pc}

08005068 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800506c:	4802      	ldr	r0, [pc, #8]	; (8005078 <DMA1_Channel1_IRQHandler+0x10>)
 800506e:	f001 ff2e 	bl	8006ece <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005072:	bf00      	nop
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	2000060c 	.word	0x2000060c

0800507c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005080:	4802      	ldr	r0, [pc, #8]	; (800508c <DMA1_Channel2_IRQHandler+0x10>)
 8005082:	f001 ff24 	bl	8006ece <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005086:	bf00      	nop
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	2000066c 	.word	0x2000066c

08005090 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005094:	4802      	ldr	r0, [pc, #8]	; (80050a0 <FDCAN1_IT0_IRQHandler+0x10>)
 8005096:	f002 fa4e 	bl	8007536 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800509a:	bf00      	nop
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000718 	.word	0x20000718

080050a4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050a8:	4802      	ldr	r0, [pc, #8]	; (80050b4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80050aa:	f004 fc6b 	bl	8009984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80050ae:	bf00      	nop
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000818 	.word	0x20000818

080050b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80050bc:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <SystemInit+0x20>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	4a05      	ldr	r2, [pc, #20]	; (80050d8 <SystemInit+0x20>)
 80050c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050cc:	bf00      	nop
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	e000ed00 	.word	0xe000ed00

080050dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80050dc:	480d      	ldr	r0, [pc, #52]	; (8005114 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80050de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050e0:	480d      	ldr	r0, [pc, #52]	; (8005118 <LoopForever+0x6>)
  ldr r1, =_edata
 80050e2:	490e      	ldr	r1, [pc, #56]	; (800511c <LoopForever+0xa>)
  ldr r2, =_sidata
 80050e4:	4a0e      	ldr	r2, [pc, #56]	; (8005120 <LoopForever+0xe>)
  movs r3, #0
 80050e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80050e8:	e002      	b.n	80050f0 <LoopCopyDataInit>

080050ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050ee:	3304      	adds	r3, #4

080050f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050f4:	d3f9      	bcc.n	80050ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050f6:	4a0b      	ldr	r2, [pc, #44]	; (8005124 <LoopForever+0x12>)
  ldr r4, =_ebss
 80050f8:	4c0b      	ldr	r4, [pc, #44]	; (8005128 <LoopForever+0x16>)
  movs r3, #0
 80050fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050fc:	e001      	b.n	8005102 <LoopFillZerobss>

080050fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005100:	3204      	adds	r2, #4

08005102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005104:	d3fb      	bcc.n	80050fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005106:	f7ff ffd7 	bl	80050b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800510a:	f005 fe1b 	bl	800ad44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800510e:	f7fb fe77 	bl	8000e00 <main>

08005112 <LoopForever>:

LoopForever:
    b LoopForever
 8005112:	e7fe      	b.n	8005112 <LoopForever>
  ldr   r0, =_estack
 8005114:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8005118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800511c:	20000518 	.word	0x20000518
  ldr r2, =_sidata
 8005120:	0800c480 	.word	0x0800c480
  ldr r2, =_sbss
 8005124:	20000518 	.word	0x20000518
  ldr r4, =_ebss
 8005128:	20000d34 	.word	0x20000d34

0800512c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800512c:	e7fe      	b.n	800512c <ADC1_2_IRQHandler>

0800512e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005138:	2003      	movs	r0, #3
 800513a:	f001 fc7b 	bl	8006a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800513e:	200f      	movs	r0, #15
 8005140:	f000 f80e 	bl	8005160 <HAL_InitTick>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	71fb      	strb	r3, [r7, #7]
 800514e:	e001      	b.n	8005154 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005150:	f7ff fcd8 	bl	8004b04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005154:	79fb      	ldrb	r3, [r7, #7]

}
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800516c:	4b16      	ldr	r3, [pc, #88]	; (80051c8 <HAL_InitTick+0x68>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d022      	beq.n	80051ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005174:	4b15      	ldr	r3, [pc, #84]	; (80051cc <HAL_InitTick+0x6c>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <HAL_InitTick+0x68>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005180:	fbb1 f3f3 	udiv	r3, r1, r3
 8005184:	fbb2 f3f3 	udiv	r3, r2, r3
 8005188:	4618      	mov	r0, r3
 800518a:	f001 fc86 	bl	8006a9a <HAL_SYSTICK_Config>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10f      	bne.n	80051b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b0f      	cmp	r3, #15
 8005198:	d809      	bhi.n	80051ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800519a:	2200      	movs	r2, #0
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	f04f 30ff 	mov.w	r0, #4294967295
 80051a2:	f001 fc52 	bl	8006a4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80051a6:	4a0a      	ldr	r2, [pc, #40]	; (80051d0 <HAL_InitTick+0x70>)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	e007      	b.n	80051be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	73fb      	strb	r3, [r7, #15]
 80051b2:	e004      	b.n	80051be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]
 80051b8:	e001      	b.n	80051be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80051be:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	200004b0 	.word	0x200004b0
 80051cc:	200004a8 	.word	0x200004a8
 80051d0:	200004ac 	.word	0x200004ac

080051d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051d8:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <HAL_IncTick+0x1c>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <HAL_IncTick+0x20>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4413      	add	r3, r2
 80051e2:	4a03      	ldr	r2, [pc, #12]	; (80051f0 <HAL_IncTick+0x1c>)
 80051e4:	6013      	str	r3, [r2, #0]
}
 80051e6:	bf00      	nop
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	20000d30 	.word	0x20000d30
 80051f4:	200004b0 	.word	0x200004b0

080051f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  return uwTick;
 80051fc:	4b03      	ldr	r3, [pc, #12]	; (800520c <HAL_GetTick+0x14>)
 80051fe:	681b      	ldr	r3, [r3, #0]
}
 8005200:	4618      	mov	r0, r3
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	20000d30 	.word	0x20000d30

08005210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005218:	f7ff ffee 	bl	80051f8 <HAL_GetTick>
 800521c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005228:	d004      	beq.n	8005234 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800522a:	4b09      	ldr	r3, [pc, #36]	; (8005250 <HAL_Delay+0x40>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4413      	add	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005234:	bf00      	nop
 8005236:	f7ff ffdf 	bl	80051f8 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	429a      	cmp	r2, r3
 8005244:	d8f7      	bhi.n	8005236 <HAL_Delay+0x26>
  {
  }
}
 8005246:	bf00      	nop
 8005248:	bf00      	nop
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	200004b0 	.word	0x200004b0

08005254 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	609a      	str	r2, [r3, #8]
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	609a      	str	r2, [r3, #8]
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3360      	adds	r3, #96	; 0x60
 80052ce:	461a      	mov	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4b08      	ldr	r3, [pc, #32]	; (8005300 <LL_ADC_SetOffset+0x44>)
 80052de:	4013      	ands	r3, r2
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80052f4:	bf00      	nop
 80052f6:	371c      	adds	r7, #28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	03fff000 	.word	0x03fff000

08005304 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3360      	adds	r3, #96	; 0x60
 8005312:	461a      	mov	r2, r3
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3360      	adds	r3, #96	; 0x60
 8005340:	461a      	mov	r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	431a      	orrs	r2, r3
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005366:	b480      	push	{r7}
 8005368:	b087      	sub	sp, #28
 800536a:	af00      	add	r7, sp, #0
 800536c:	60f8      	str	r0, [r7, #12]
 800536e:	60b9      	str	r1, [r7, #8]
 8005370:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	3360      	adds	r3, #96	; 0x60
 8005376:	461a      	mov	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	431a      	orrs	r2, r3
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005390:	bf00      	nop
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3360      	adds	r3, #96	; 0x60
 80053ac:	461a      	mov	r2, r3
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	431a      	orrs	r2, r3
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80053c6:	bf00      	nop
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	615a      	str	r2, [r3, #20]
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800541e:	b480      	push	{r7}
 8005420:	b087      	sub	sp, #28
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3330      	adds	r3, #48	; 0x30
 800542e:	461a      	mov	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	0a1b      	lsrs	r3, r3, #8
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	f003 030c 	and.w	r3, r3, #12
 800543a:	4413      	add	r3, r2
 800543c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f003 031f 	and.w	r3, r3, #31
 8005448:	211f      	movs	r1, #31
 800544a:	fa01 f303 	lsl.w	r3, r1, r3
 800544e:	43db      	mvns	r3, r3
 8005450:	401a      	ands	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	0e9b      	lsrs	r3, r3, #26
 8005456:	f003 011f 	and.w	r1, r3, #31
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f003 031f 	and.w	r3, r3, #31
 8005460:	fa01 f303 	lsl.w	r3, r1, r3
 8005464:	431a      	orrs	r2, r3
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800546a:	bf00      	nop
 800546c:	371c      	adds	r7, #28
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005476:	b480      	push	{r7}
 8005478:	b087      	sub	sp, #28
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3314      	adds	r3, #20
 8005486:	461a      	mov	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	0e5b      	lsrs	r3, r3, #25
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	4413      	add	r3, r2
 8005494:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	0d1b      	lsrs	r3, r3, #20
 800549e:	f003 031f 	and.w	r3, r3, #31
 80054a2:	2107      	movs	r1, #7
 80054a4:	fa01 f303 	lsl.w	r3, r1, r3
 80054a8:	43db      	mvns	r3, r3
 80054aa:	401a      	ands	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	0d1b      	lsrs	r3, r3, #20
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ba:	431a      	orrs	r2, r3
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80054c0:	bf00      	nop
 80054c2:	371c      	adds	r7, #28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a0f      	ldr	r2, [pc, #60]	; (8005518 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d10a      	bne.n	80054f6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ec:	431a      	orrs	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80054f4:	e00a      	b.n	800550c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005502:	43db      	mvns	r3, r3
 8005504:	401a      	ands	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800550c:	bf00      	nop
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	407f0000 	.word	0x407f0000

0800551c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f003 031f 	and.w	r3, r3, #31
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005548:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6093      	str	r3, [r2, #8]
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800556c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005570:	d101      	bne.n	8005576 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005594:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005598:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055c0:	d101      	bne.n	80055c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055e8:	f043 0201 	orr.w	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <LL_ADC_IsEnabled+0x18>
 8005610:	2301      	movs	r3, #1
 8005612:	e000      	b.n	8005616 <LL_ADC_IsEnabled+0x1a>
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005632:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005636:	f043 0204 	orr.w	r2, r3, #4
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 0304 	and.w	r3, r3, #4
 800565a:	2b04      	cmp	r3, #4
 800565c:	d101      	bne.n	8005662 <LL_ADC_REG_IsConversionOngoing+0x18>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b08      	cmp	r3, #8
 8005682:	d101      	bne.n	8005688 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005684:	2301      	movs	r3, #1
 8005686:	e000      	b.n	800568a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005698:	b590      	push	{r4, r7, lr}
 800569a:	b089      	sub	sp, #36	; 0x24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e1a1      	b.n	80059f6 <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d109      	bne.n	80056d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff fa43 	bl	8004b4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff ff3f 	bl	800555c <LL_ADC_IsDeepPowerDownEnabled>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d004      	beq.n	80056ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7ff ff25 	bl	8005538 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff ff5a 	bl	80055ac <LL_ADC_IsInternalRegulatorEnabled>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d115      	bne.n	800572a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff ff3e 	bl	8005584 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005708:	4b9a      	ldr	r3, [pc, #616]	; (8005974 <HAL_ADC_Init+0x2dc>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	099b      	lsrs	r3, r3, #6
 800570e:	4a9a      	ldr	r2, [pc, #616]	; (8005978 <HAL_ADC_Init+0x2e0>)
 8005710:	fba2 2303 	umull	r2, r3, r2, r3
 8005714:	099b      	lsrs	r3, r3, #6
 8005716:	3301      	adds	r3, #1
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800571c:	e002      	b.n	8005724 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	3b01      	subs	r3, #1
 8005722:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f9      	bne.n	800571e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff ff3c 	bl	80055ac <LL_ADC_IsInternalRegulatorEnabled>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10d      	bne.n	8005756 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573e:	f043 0210 	orr.w	r2, r3, #16
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574a:	f043 0201 	orr.w	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff ff75 	bl	800564a <LL_ADC_REG_IsConversionOngoing>
 8005760:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b00      	cmp	r3, #0
 800576c:	f040 813a 	bne.w	80059e4 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	2b00      	cmp	r3, #0
 8005774:	f040 8136 	bne.w	80059e4 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005780:	f043 0202 	orr.w	r2, r3, #2
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff ff35 	bl	80055fc <LL_ADC_IsEnabled>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d137      	bne.n	8005808 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057a0:	d004      	beq.n	80057ac <HAL_ADC_Init+0x114>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a75      	ldr	r2, [pc, #468]	; (800597c <HAL_ADC_Init+0x2e4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d10f      	bne.n	80057cc <HAL_ADC_Init+0x134>
 80057ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80057b0:	f7ff ff24 	bl	80055fc <LL_ADC_IsEnabled>
 80057b4:	4604      	mov	r4, r0
 80057b6:	4871      	ldr	r0, [pc, #452]	; (800597c <HAL_ADC_Init+0x2e4>)
 80057b8:	f7ff ff20 	bl	80055fc <LL_ADC_IsEnabled>
 80057bc:	4603      	mov	r3, r0
 80057be:	4323      	orrs	r3, r4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	bf0c      	ite	eq
 80057c4:	2301      	moveq	r3, #1
 80057c6:	2300      	movne	r3, #0
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	e008      	b.n	80057de <HAL_ADC_Init+0x146>
 80057cc:	486c      	ldr	r0, [pc, #432]	; (8005980 <HAL_ADC_Init+0x2e8>)
 80057ce:	f7ff ff15 	bl	80055fc <LL_ADC_IsEnabled>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	bf0c      	ite	eq
 80057d8:	2301      	moveq	r3, #1
 80057da:	2300      	movne	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d012      	beq.n	8005808 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057ea:	d004      	beq.n	80057f6 <HAL_ADC_Init+0x15e>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a62      	ldr	r2, [pc, #392]	; (800597c <HAL_ADC_Init+0x2e4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d101      	bne.n	80057fa <HAL_ADC_Init+0x162>
 80057f6:	4a63      	ldr	r2, [pc, #396]	; (8005984 <HAL_ADC_Init+0x2ec>)
 80057f8:	e000      	b.n	80057fc <HAL_ADC_Init+0x164>
 80057fa:	4a63      	ldr	r2, [pc, #396]	; (8005988 <HAL_ADC_Init+0x2f0>)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	4619      	mov	r1, r3
 8005802:	4610      	mov	r0, r2
 8005804:	f7ff fd26 	bl	8005254 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	7f5b      	ldrb	r3, [r3, #29]
 800580c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005812:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005818:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800581e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005826:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005828:	4313      	orrs	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005832:	2b01      	cmp	r3, #1
 8005834:	d106      	bne.n	8005844 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	3b01      	subs	r3, #1
 800583c:	045b      	lsls	r3, r3, #17
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4313      	orrs	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	2b00      	cmp	r3, #0
 800584a:	d009      	beq.n	8005860 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005850:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	4313      	orrs	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	4b49      	ldr	r3, [pc, #292]	; (800598c <HAL_ADC_Init+0x2f4>)
 8005868:	4013      	ands	r3, r2
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6812      	ldr	r2, [r2, #0]
 800586e:	69b9      	ldr	r1, [r7, #24]
 8005870:	430b      	orrs	r3, r1
 8005872:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f7ff fedb 	bl	800564a <LL_ADC_REG_IsConversionOngoing>
 8005894:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f7ff fee8 	bl	8005670 <LL_ADC_INJ_IsConversionOngoing>
 80058a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d17b      	bne.n	80059a0 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d178      	bne.n	80059a0 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80058b2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058ba:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80058bc:	4313      	orrs	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058ca:	f023 0302 	bic.w	r3, r3, #2
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6812      	ldr	r2, [r2, #0]
 80058d2:	69b9      	ldr	r1, [r7, #24]
 80058d4:	430b      	orrs	r3, r1
 80058d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d017      	beq.n	8005910 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80058ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80058f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80058fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6911      	ldr	r1, [r2, #16]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6812      	ldr	r2, [r2, #0]
 8005908:	430b      	orrs	r3, r1
 800590a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800590e:	e013      	b.n	8005938 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800591e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6812      	ldr	r2, [r2, #0]
 800592c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005930:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005934:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800593e:	2b01      	cmp	r3, #1
 8005940:	d126      	bne.n	8005990 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800594c:	f023 0304 	bic.w	r3, r3, #4
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005958:	4311      	orrs	r1, r2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800595e:	4311      	orrs	r1, r2
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005964:	430a      	orrs	r2, r1
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0201 	orr.w	r2, r2, #1
 8005970:	611a      	str	r2, [r3, #16]
 8005972:	e015      	b.n	80059a0 <HAL_ADC_Init+0x308>
 8005974:	200004a8 	.word	0x200004a8
 8005978:	053e2d63 	.word	0x053e2d63
 800597c:	50000100 	.word	0x50000100
 8005980:	50000400 	.word	0x50000400
 8005984:	50000300 	.word	0x50000300
 8005988:	50000700 	.word	0x50000700
 800598c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0201 	bic.w	r2, r2, #1
 800599e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d10c      	bne.n	80059c2 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	f023 010f 	bic.w	r1, r3, #15
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	1e5a      	subs	r2, r3, #1
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	631a      	str	r2, [r3, #48]	; 0x30
 80059c0:	e007      	b.n	80059d2 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 020f 	bic.w	r2, r2, #15
 80059d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d6:	f023 0303 	bic.w	r3, r3, #3
 80059da:	f043 0201 	orr.w	r2, r3, #1
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80059e2:	e007      	b.n	80059f4 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e8:	f043 0210 	orr.w	r2, r3, #16
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80059f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3724      	adds	r7, #36	; 0x24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd90      	pop	{r4, r7, pc}
 80059fe:	bf00      	nop

08005a00 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a14:	d004      	beq.n	8005a20 <HAL_ADC_Start_DMA+0x20>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a57      	ldr	r2, [pc, #348]	; (8005b78 <HAL_ADC_Start_DMA+0x178>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d101      	bne.n	8005a24 <HAL_ADC_Start_DMA+0x24>
 8005a20:	4b56      	ldr	r3, [pc, #344]	; (8005b7c <HAL_ADC_Start_DMA+0x17c>)
 8005a22:	e000      	b.n	8005a26 <HAL_ADC_Start_DMA+0x26>
 8005a24:	4b56      	ldr	r3, [pc, #344]	; (8005b80 <HAL_ADC_Start_DMA+0x180>)
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7ff fd78 	bl	800551c <LL_ADC_GetMultimode>
 8005a2c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff fe09 	bl	800564a <LL_ADC_REG_IsConversionOngoing>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f040 8094 	bne.w	8005b68 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d101      	bne.n	8005a4e <HAL_ADC_Start_DMA+0x4e>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	e08f      	b.n	8005b6e <HAL_ADC_Start_DMA+0x16e>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a4a      	ldr	r2, [pc, #296]	; (8005b84 <HAL_ADC_Start_DMA+0x184>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d008      	beq.n	8005a72 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b05      	cmp	r3, #5
 8005a6a:	d002      	beq.n	8005a72 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b09      	cmp	r3, #9
 8005a70:	d173      	bne.n	8005b5a <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 fcd8 	bl	8006428 <ADC_Enable>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005a7c:	7dfb      	ldrb	r3, [r7, #23]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d166      	bne.n	8005b50 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a8a:	f023 0301 	bic.w	r3, r3, #1
 8005a8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a37      	ldr	r2, [pc, #220]	; (8005b78 <HAL_ADC_Start_DMA+0x178>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d002      	beq.n	8005aa6 <HAL_ADC_Start_DMA+0xa6>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	e001      	b.n	8005aaa <HAL_ADC_Start_DMA+0xaa>
 8005aa6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d002      	beq.n	8005ab8 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005abc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d006      	beq.n	8005ade <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad4:	f023 0206 	bic.w	r2, r3, #6
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	661a      	str	r2, [r3, #96]	; 0x60
 8005adc:	e002      	b.n	8005ae4 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae8:	4a27      	ldr	r2, [pc, #156]	; (8005b88 <HAL_ADC_Start_DMA+0x188>)
 8005aea:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af0:	4a26      	ldr	r2, [pc, #152]	; (8005b8c <HAL_ADC_Start_DMA+0x18c>)
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af8:	4a25      	ldr	r2, [pc, #148]	; (8005b90 <HAL_ADC_Start_DMA+0x190>)
 8005afa:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	221c      	movs	r2, #28
 8005b02:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0210 	orr.w	r2, r2, #16
 8005b1a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3340      	adds	r3, #64	; 0x40
 8005b36:	4619      	mov	r1, r3
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f001 f94c 	bl	8006dd8 <HAL_DMA_Start_IT>
 8005b40:	4603      	mov	r3, r0
 8005b42:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff fd6a 	bl	8005622 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005b4e:	e00d      	b.n	8005b6c <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8005b58:	e008      	b.n	8005b6c <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005b66:	e001      	b.n	8005b6c <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005b68:	2302      	movs	r3, #2
 8005b6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	50000100 	.word	0x50000100
 8005b7c:	50000300 	.word	0x50000300
 8005b80:	50000700 	.word	0x50000700
 8005b84:	50000400 	.word	0x50000400
 8005b88:	080064ed 	.word	0x080064ed
 8005b8c:	080065c5 	.word	0x080065c5
 8005b90:	080065e1 	.word	0x080065e1

08005b94 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b0b6      	sub	sp, #216	; 0xd8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d102      	bne.n	8005bf4 <HAL_ADC_ConfigChannel+0x24>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	f000 bc04 	b.w	80063fc <HAL_ADC_ConfigChannel+0x82c>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff fd22 	bl	800564a <LL_ADC_REG_IsConversionOngoing>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f040 83e8 	bne.w	80063de <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6818      	ldr	r0, [r3, #0]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	6859      	ldr	r1, [r3, #4]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f7ff fbff 	bl	800541e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff fd10 	bl	800564a <LL_ADC_REG_IsConversionOngoing>
 8005c2a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff fd1c 	bl	8005670 <LL_ADC_INJ_IsConversionOngoing>
 8005c38:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005c3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f040 81d9 	bne.w	8005ff8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005c46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f040 81d4 	bne.w	8005ff8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c58:	d10f      	bne.n	8005c7a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2200      	movs	r2, #0
 8005c64:	4619      	mov	r1, r3
 8005c66:	f7ff fc06 	bl	8005476 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff fbad 	bl	80053d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8005c78:	e00e      	b.n	8005c98 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6819      	ldr	r1, [r3, #0]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	461a      	mov	r2, r3
 8005c88:	f7ff fbf5 	bl	8005476 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2100      	movs	r1, #0
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff fb9d 	bl	80053d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	695a      	ldr	r2, [r3, #20]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	08db      	lsrs	r3, r3, #3
 8005ca4:	f003 0303 	and.w	r3, r3, #3
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d022      	beq.n	8005d00 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6818      	ldr	r0, [r3, #0]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	6919      	ldr	r1, [r3, #16]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cca:	f7ff faf7 	bl	80052bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	6919      	ldr	r1, [r3, #16]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f7ff fb43 	bl	8005366 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6818      	ldr	r0, [r3, #0]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	6919      	ldr	r1, [r3, #16]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	7f1b      	ldrb	r3, [r3, #28]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d102      	bne.n	8005cf6 <HAL_ADC_ConfigChannel+0x126>
 8005cf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cf4:	e000      	b.n	8005cf8 <HAL_ADC_ConfigChannel+0x128>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f7ff fb4f 	bl	800539c <LL_ADC_SetOffsetSaturation>
 8005cfe:	e17b      	b.n	8005ff8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2100      	movs	r1, #0
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff fafc 	bl	8005304 <LL_ADC_GetOffsetChannel>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10a      	bne.n	8005d2c <HAL_ADC_ConfigChannel+0x15c>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff faf1 	bl	8005304 <LL_ADC_GetOffsetChannel>
 8005d22:	4603      	mov	r3, r0
 8005d24:	0e9b      	lsrs	r3, r3, #26
 8005d26:	f003 021f 	and.w	r2, r3, #31
 8005d2a:	e01e      	b.n	8005d6a <HAL_ADC_ConfigChannel+0x19a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2100      	movs	r1, #0
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff fae6 	bl	8005304 <LL_ADC_GetOffsetChannel>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d42:	fa93 f3a3 	rbit	r3, r3
 8005d46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005d4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005d52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005d5a:	2320      	movs	r3, #32
 8005d5c:	e004      	b.n	8005d68 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005d5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d62:	fab3 f383 	clz	r3, r3
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d105      	bne.n	8005d82 <HAL_ADC_ConfigChannel+0x1b2>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	0e9b      	lsrs	r3, r3, #26
 8005d7c:	f003 031f 	and.w	r3, r3, #31
 8005d80:	e018      	b.n	8005db4 <HAL_ADC_ConfigChannel+0x1e4>
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005d8e:	fa93 f3a3 	rbit	r3, r3
 8005d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005d9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005da6:	2320      	movs	r3, #32
 8005da8:	e004      	b.n	8005db4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005daa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005dae:	fab3 f383 	clz	r3, r3
 8005db2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d106      	bne.n	8005dc6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fab5 	bl	8005330 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2101      	movs	r1, #1
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff fa99 	bl	8005304 <LL_ADC_GetOffsetChannel>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <HAL_ADC_ConfigChannel+0x222>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2101      	movs	r1, #1
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff fa8e 	bl	8005304 <LL_ADC_GetOffsetChannel>
 8005de8:	4603      	mov	r3, r0
 8005dea:	0e9b      	lsrs	r3, r3, #26
 8005dec:	f003 021f 	and.w	r2, r3, #31
 8005df0:	e01e      	b.n	8005e30 <HAL_ADC_ConfigChannel+0x260>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2101      	movs	r1, #1
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff fa83 	bl	8005304 <LL_ADC_GetOffsetChannel>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e08:	fa93 f3a3 	rbit	r3, r3
 8005e0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005e10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005e18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005e20:	2320      	movs	r3, #32
 8005e22:	e004      	b.n	8005e2e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005e24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e28:	fab3 f383 	clz	r3, r3
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d105      	bne.n	8005e48 <HAL_ADC_ConfigChannel+0x278>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	0e9b      	lsrs	r3, r3, #26
 8005e42:	f003 031f 	and.w	r3, r3, #31
 8005e46:	e018      	b.n	8005e7a <HAL_ADC_ConfigChannel+0x2aa>
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e54:	fa93 f3a3 	rbit	r3, r3
 8005e58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005e5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005e6c:	2320      	movs	r3, #32
 8005e6e:	e004      	b.n	8005e7a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005e70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e74:	fab3 f383 	clz	r3, r3
 8005e78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d106      	bne.n	8005e8c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2200      	movs	r2, #0
 8005e84:	2101      	movs	r1, #1
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7ff fa52 	bl	8005330 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2102      	movs	r1, #2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff fa36 	bl	8005304 <LL_ADC_GetOffsetChannel>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <HAL_ADC_ConfigChannel+0x2e8>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2102      	movs	r1, #2
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff fa2b 	bl	8005304 <LL_ADC_GetOffsetChannel>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	0e9b      	lsrs	r3, r3, #26
 8005eb2:	f003 021f 	and.w	r2, r3, #31
 8005eb6:	e01e      	b.n	8005ef6 <HAL_ADC_ConfigChannel+0x326>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2102      	movs	r1, #2
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7ff fa20 	bl	8005304 <LL_ADC_GetOffsetChannel>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ece:	fa93 f3a3 	rbit	r3, r3
 8005ed2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005ed6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005eda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005ede:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005ee6:	2320      	movs	r3, #32
 8005ee8:	e004      	b.n	8005ef4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005eea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005eee:	fab3 f383 	clz	r3, r3
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d105      	bne.n	8005f0e <HAL_ADC_ConfigChannel+0x33e>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	0e9b      	lsrs	r3, r3, #26
 8005f08:	f003 031f 	and.w	r3, r3, #31
 8005f0c:	e016      	b.n	8005f3c <HAL_ADC_ConfigChannel+0x36c>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f1a:	fa93 f3a3 	rbit	r3, r3
 8005f1e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005f20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005f26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005f2e:	2320      	movs	r3, #32
 8005f30:	e004      	b.n	8005f3c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005f32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f36:	fab3 f383 	clz	r3, r3
 8005f3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d106      	bne.n	8005f4e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2200      	movs	r2, #0
 8005f46:	2102      	movs	r1, #2
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff f9f1 	bl	8005330 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2103      	movs	r1, #3
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7ff f9d5 	bl	8005304 <LL_ADC_GetOffsetChannel>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <HAL_ADC_ConfigChannel+0x3aa>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2103      	movs	r1, #3
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff f9ca 	bl	8005304 <LL_ADC_GetOffsetChannel>
 8005f70:	4603      	mov	r3, r0
 8005f72:	0e9b      	lsrs	r3, r3, #26
 8005f74:	f003 021f 	and.w	r2, r3, #31
 8005f78:	e017      	b.n	8005faa <HAL_ADC_ConfigChannel+0x3da>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2103      	movs	r1, #3
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff f9bf 	bl	8005304 <LL_ADC_GetOffsetChannel>
 8005f86:	4603      	mov	r3, r0
 8005f88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f8c:	fa93 f3a3 	rbit	r3, r3
 8005f90:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f94:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005f96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005f9c:	2320      	movs	r3, #32
 8005f9e:	e003      	b.n	8005fa8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fa2:	fab3 f383 	clz	r3, r3
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d105      	bne.n	8005fc2 <HAL_ADC_ConfigChannel+0x3f2>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	0e9b      	lsrs	r3, r3, #26
 8005fbc:	f003 031f 	and.w	r3, r3, #31
 8005fc0:	e011      	b.n	8005fe6 <HAL_ADC_ConfigChannel+0x416>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fca:	fa93 f3a3 	rbit	r3, r3
 8005fce:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005fda:	2320      	movs	r3, #32
 8005fdc:	e003      	b.n	8005fe6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe0:	fab3 f383 	clz	r3, r3
 8005fe4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d106      	bne.n	8005ff8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2103      	movs	r1, #3
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff f99c 	bl	8005330 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff fafd 	bl	80055fc <LL_ADC_IsEnabled>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	f040 813d 	bne.w	8006284 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6818      	ldr	r0, [r3, #0]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	6819      	ldr	r1, [r3, #0]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	461a      	mov	r2, r3
 8006018:	f7ff fa58 	bl	80054cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	4aa2      	ldr	r2, [pc, #648]	; (80062ac <HAL_ADC_ConfigChannel+0x6dc>)
 8006022:	4293      	cmp	r3, r2
 8006024:	f040 812e 	bne.w	8006284 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10b      	bne.n	8006050 <HAL_ADC_ConfigChannel+0x480>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	0e9b      	lsrs	r3, r3, #26
 800603e:	3301      	adds	r3, #1
 8006040:	f003 031f 	and.w	r3, r3, #31
 8006044:	2b09      	cmp	r3, #9
 8006046:	bf94      	ite	ls
 8006048:	2301      	movls	r3, #1
 800604a:	2300      	movhi	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	e019      	b.n	8006084 <HAL_ADC_ConfigChannel+0x4b4>
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006058:	fa93 f3a3 	rbit	r3, r3
 800605c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800605e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006060:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006068:	2320      	movs	r3, #32
 800606a:	e003      	b.n	8006074 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800606c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800606e:	fab3 f383 	clz	r3, r3
 8006072:	b2db      	uxtb	r3, r3
 8006074:	3301      	adds	r3, #1
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	2b09      	cmp	r3, #9
 800607c:	bf94      	ite	ls
 800607e:	2301      	movls	r3, #1
 8006080:	2300      	movhi	r3, #0
 8006082:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006084:	2b00      	cmp	r3, #0
 8006086:	d079      	beq.n	800617c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006090:	2b00      	cmp	r3, #0
 8006092:	d107      	bne.n	80060a4 <HAL_ADC_ConfigChannel+0x4d4>
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	0e9b      	lsrs	r3, r3, #26
 800609a:	3301      	adds	r3, #1
 800609c:	069b      	lsls	r3, r3, #26
 800609e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060a2:	e015      	b.n	80060d0 <HAL_ADC_ConfigChannel+0x500>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ac:	fa93 f3a3 	rbit	r3, r3
 80060b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80060b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80060b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80060bc:	2320      	movs	r3, #32
 80060be:	e003      	b.n	80060c8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80060c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c2:	fab3 f383 	clz	r3, r3
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	3301      	adds	r3, #1
 80060ca:	069b      	lsls	r3, r3, #26
 80060cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d109      	bne.n	80060f0 <HAL_ADC_ConfigChannel+0x520>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	0e9b      	lsrs	r3, r3, #26
 80060e2:	3301      	adds	r3, #1
 80060e4:	f003 031f 	and.w	r3, r3, #31
 80060e8:	2101      	movs	r1, #1
 80060ea:	fa01 f303 	lsl.w	r3, r1, r3
 80060ee:	e017      	b.n	8006120 <HAL_ADC_ConfigChannel+0x550>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f8:	fa93 f3a3 	rbit	r3, r3
 80060fc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80060fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006100:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006108:	2320      	movs	r3, #32
 800610a:	e003      	b.n	8006114 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800610c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800610e:	fab3 f383 	clz	r3, r3
 8006112:	b2db      	uxtb	r3, r3
 8006114:	3301      	adds	r3, #1
 8006116:	f003 031f 	and.w	r3, r3, #31
 800611a:	2101      	movs	r1, #1
 800611c:	fa01 f303 	lsl.w	r3, r1, r3
 8006120:	ea42 0103 	orr.w	r1, r2, r3
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10a      	bne.n	8006146 <HAL_ADC_ConfigChannel+0x576>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	0e9b      	lsrs	r3, r3, #26
 8006136:	3301      	adds	r3, #1
 8006138:	f003 021f 	and.w	r2, r3, #31
 800613c:	4613      	mov	r3, r2
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	4413      	add	r3, r2
 8006142:	051b      	lsls	r3, r3, #20
 8006144:	e018      	b.n	8006178 <HAL_ADC_ConfigChannel+0x5a8>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614e:	fa93 f3a3 	rbit	r3, r3
 8006152:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006156:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800615e:	2320      	movs	r3, #32
 8006160:	e003      	b.n	800616a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006164:	fab3 f383 	clz	r3, r3
 8006168:	b2db      	uxtb	r3, r3
 800616a:	3301      	adds	r3, #1
 800616c:	f003 021f 	and.w	r2, r3, #31
 8006170:	4613      	mov	r3, r2
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	4413      	add	r3, r2
 8006176:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006178:	430b      	orrs	r3, r1
 800617a:	e07e      	b.n	800627a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006184:	2b00      	cmp	r3, #0
 8006186:	d107      	bne.n	8006198 <HAL_ADC_ConfigChannel+0x5c8>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	0e9b      	lsrs	r3, r3, #26
 800618e:	3301      	adds	r3, #1
 8006190:	069b      	lsls	r3, r3, #26
 8006192:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006196:	e015      	b.n	80061c4 <HAL_ADC_ConfigChannel+0x5f4>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	fa93 f3a3 	rbit	r3, r3
 80061a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80061b0:	2320      	movs	r3, #32
 80061b2:	e003      	b.n	80061bc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	fab3 f383 	clz	r3, r3
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	3301      	adds	r3, #1
 80061be:	069b      	lsls	r3, r3, #26
 80061c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d109      	bne.n	80061e4 <HAL_ADC_ConfigChannel+0x614>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	0e9b      	lsrs	r3, r3, #26
 80061d6:	3301      	adds	r3, #1
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	2101      	movs	r1, #1
 80061de:	fa01 f303 	lsl.w	r3, r1, r3
 80061e2:	e017      	b.n	8006214 <HAL_ADC_ConfigChannel+0x644>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	fa93 f3a3 	rbit	r3, r3
 80061f0:	61fb      	str	r3, [r7, #28]
  return result;
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80061fc:	2320      	movs	r3, #32
 80061fe:	e003      	b.n	8006208 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	fab3 f383 	clz	r3, r3
 8006206:	b2db      	uxtb	r3, r3
 8006208:	3301      	adds	r3, #1
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	2101      	movs	r1, #1
 8006210:	fa01 f303 	lsl.w	r3, r1, r3
 8006214:	ea42 0103 	orr.w	r1, r2, r3
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10d      	bne.n	8006240 <HAL_ADC_ConfigChannel+0x670>
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	0e9b      	lsrs	r3, r3, #26
 800622a:	3301      	adds	r3, #1
 800622c:	f003 021f 	and.w	r2, r3, #31
 8006230:	4613      	mov	r3, r2
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	4413      	add	r3, r2
 8006236:	3b1e      	subs	r3, #30
 8006238:	051b      	lsls	r3, r3, #20
 800623a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800623e:	e01b      	b.n	8006278 <HAL_ADC_ConfigChannel+0x6a8>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	fa93 f3a3 	rbit	r3, r3
 800624c:	613b      	str	r3, [r7, #16]
  return result;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006258:	2320      	movs	r3, #32
 800625a:	e003      	b.n	8006264 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	fab3 f383 	clz	r3, r3
 8006262:	b2db      	uxtb	r3, r3
 8006264:	3301      	adds	r3, #1
 8006266:	f003 021f 	and.w	r2, r3, #31
 800626a:	4613      	mov	r3, r2
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	4413      	add	r3, r2
 8006270:	3b1e      	subs	r3, #30
 8006272:	051b      	lsls	r3, r3, #20
 8006274:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006278:	430b      	orrs	r3, r1
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	6892      	ldr	r2, [r2, #8]
 800627e:	4619      	mov	r1, r3
 8006280:	f7ff f8f9 	bl	8005476 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	4b09      	ldr	r3, [pc, #36]	; (80062b0 <HAL_ADC_ConfigChannel+0x6e0>)
 800628a:	4013      	ands	r3, r2
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 80af 	beq.w	80063f0 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800629a:	d004      	beq.n	80062a6 <HAL_ADC_ConfigChannel+0x6d6>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a04      	ldr	r2, [pc, #16]	; (80062b4 <HAL_ADC_ConfigChannel+0x6e4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d10a      	bne.n	80062bc <HAL_ADC_ConfigChannel+0x6ec>
 80062a6:	4b04      	ldr	r3, [pc, #16]	; (80062b8 <HAL_ADC_ConfigChannel+0x6e8>)
 80062a8:	e009      	b.n	80062be <HAL_ADC_ConfigChannel+0x6ee>
 80062aa:	bf00      	nop
 80062ac:	407f0000 	.word	0x407f0000
 80062b0:	80080000 	.word	0x80080000
 80062b4:	50000100 	.word	0x50000100
 80062b8:	50000300 	.word	0x50000300
 80062bc:	4b51      	ldr	r3, [pc, #324]	; (8006404 <HAL_ADC_ConfigChannel+0x834>)
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fe ffee 	bl	80052a0 <LL_ADC_GetCommonPathInternalCh>
 80062c4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a4e      	ldr	r2, [pc, #312]	; (8006408 <HAL_ADC_ConfigChannel+0x838>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d004      	beq.n	80062dc <HAL_ADC_ConfigChannel+0x70c>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a4d      	ldr	r2, [pc, #308]	; (800640c <HAL_ADC_ConfigChannel+0x83c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d134      	bne.n	8006346 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80062dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d12e      	bne.n	8006346 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062f0:	d17e      	bne.n	80063f0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062fa:	d004      	beq.n	8006306 <HAL_ADC_ConfigChannel+0x736>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a43      	ldr	r2, [pc, #268]	; (8006410 <HAL_ADC_ConfigChannel+0x840>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d101      	bne.n	800630a <HAL_ADC_ConfigChannel+0x73a>
 8006306:	4a43      	ldr	r2, [pc, #268]	; (8006414 <HAL_ADC_ConfigChannel+0x844>)
 8006308:	e000      	b.n	800630c <HAL_ADC_ConfigChannel+0x73c>
 800630a:	4a3e      	ldr	r2, [pc, #248]	; (8006404 <HAL_ADC_ConfigChannel+0x834>)
 800630c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006310:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006314:	4619      	mov	r1, r3
 8006316:	4610      	mov	r0, r2
 8006318:	f7fe ffaf 	bl	800527a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800631c:	4b3e      	ldr	r3, [pc, #248]	; (8006418 <HAL_ADC_ConfigChannel+0x848>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	099b      	lsrs	r3, r3, #6
 8006322:	4a3e      	ldr	r2, [pc, #248]	; (800641c <HAL_ADC_ConfigChannel+0x84c>)
 8006324:	fba2 2303 	umull	r2, r3, r2, r3
 8006328:	099b      	lsrs	r3, r3, #6
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	4613      	mov	r3, r2
 800632e:	005b      	lsls	r3, r3, #1
 8006330:	4413      	add	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006336:	e002      	b.n	800633e <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3b01      	subs	r3, #1
 800633c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1f9      	bne.n	8006338 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006344:	e054      	b.n	80063f0 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a35      	ldr	r2, [pc, #212]	; (8006420 <HAL_ADC_ConfigChannel+0x850>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d120      	bne.n	8006392 <HAL_ADC_ConfigChannel+0x7c2>
 8006350:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d11a      	bne.n	8006392 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006364:	d144      	bne.n	80063f0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800636e:	d004      	beq.n	800637a <HAL_ADC_ConfigChannel+0x7aa>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a26      	ldr	r2, [pc, #152]	; (8006410 <HAL_ADC_ConfigChannel+0x840>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d101      	bne.n	800637e <HAL_ADC_ConfigChannel+0x7ae>
 800637a:	4a26      	ldr	r2, [pc, #152]	; (8006414 <HAL_ADC_ConfigChannel+0x844>)
 800637c:	e000      	b.n	8006380 <HAL_ADC_ConfigChannel+0x7b0>
 800637e:	4a21      	ldr	r2, [pc, #132]	; (8006404 <HAL_ADC_ConfigChannel+0x834>)
 8006380:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006388:	4619      	mov	r1, r3
 800638a:	4610      	mov	r0, r2
 800638c:	f7fe ff75 	bl	800527a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006390:	e02e      	b.n	80063f0 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a23      	ldr	r2, [pc, #140]	; (8006424 <HAL_ADC_ConfigChannel+0x854>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d129      	bne.n	80063f0 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800639c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d123      	bne.n	80063f0 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a18      	ldr	r2, [pc, #96]	; (8006410 <HAL_ADC_ConfigChannel+0x840>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d01e      	beq.n	80063f0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063ba:	d004      	beq.n	80063c6 <HAL_ADC_ConfigChannel+0x7f6>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a13      	ldr	r2, [pc, #76]	; (8006410 <HAL_ADC_ConfigChannel+0x840>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d101      	bne.n	80063ca <HAL_ADC_ConfigChannel+0x7fa>
 80063c6:	4a13      	ldr	r2, [pc, #76]	; (8006414 <HAL_ADC_ConfigChannel+0x844>)
 80063c8:	e000      	b.n	80063cc <HAL_ADC_ConfigChannel+0x7fc>
 80063ca:	4a0e      	ldr	r2, [pc, #56]	; (8006404 <HAL_ADC_ConfigChannel+0x834>)
 80063cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80063d4:	4619      	mov	r1, r3
 80063d6:	4610      	mov	r0, r2
 80063d8:	f7fe ff4f 	bl	800527a <LL_ADC_SetCommonPathInternalCh>
 80063dc:	e008      	b.n	80063f0 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e2:	f043 0220 	orr.w	r2, r3, #32
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80063f8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	37d8      	adds	r7, #216	; 0xd8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	50000700 	.word	0x50000700
 8006408:	c3210000 	.word	0xc3210000
 800640c:	90c00010 	.word	0x90c00010
 8006410:	50000100 	.word	0x50000100
 8006414:	50000300 	.word	0x50000300
 8006418:	200004a8 	.word	0x200004a8
 800641c:	053e2d63 	.word	0x053e2d63
 8006420:	c7520000 	.word	0xc7520000
 8006424:	cb840000 	.word	0xcb840000

08006428 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff f8e1 	bl	80055fc <LL_ADC_IsEnabled>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d14d      	bne.n	80064dc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689a      	ldr	r2, [r3, #8]
 8006446:	4b28      	ldr	r3, [pc, #160]	; (80064e8 <ADC_Enable+0xc0>)
 8006448:	4013      	ands	r3, r2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00d      	beq.n	800646a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006452:	f043 0210 	orr.w	r2, r3, #16
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645e:	f043 0201 	orr.w	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e039      	b.n	80064de <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff f8b0 	bl	80055d4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006474:	f7fe fec0 	bl	80051f8 <HAL_GetTick>
 8006478:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800647a:	e028      	b.n	80064ce <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff f8bb 	bl	80055fc <LL_ADC_IsEnabled>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d104      	bne.n	8006496 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff f89f 	bl	80055d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006496:	f7fe feaf 	bl	80051f8 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d914      	bls.n	80064ce <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d00d      	beq.n	80064ce <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b6:	f043 0210 	orr.w	r2, r3, #16
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c2:	f043 0201 	orr.w	r2, r3, #1
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e007      	b.n	80064de <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d1cf      	bne.n	800647c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	8000003f 	.word	0x8000003f

080064ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006502:	2b00      	cmp	r3, #0
 8006504:	d14b      	bne.n	800659e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b00      	cmp	r3, #0
 800651e:	d021      	beq.n	8006564 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4618      	mov	r0, r3
 8006526:	f7fe ff67 	bl	80053f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d032      	beq.n	8006596 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d12b      	bne.n	8006596 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006542:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800654e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d11f      	bne.n	8006596 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800655a:	f043 0201 	orr.w	r2, r3, #1
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	65da      	str	r2, [r3, #92]	; 0x5c
 8006562:	e018      	b.n	8006596 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d111      	bne.n	8006596 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006576:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d105      	bne.n	8006596 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658e:	f043 0201 	orr.w	r2, r3, #1
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f7ff fafc 	bl	8005b94 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800659c:	e00e      	b.n	80065bc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a2:	f003 0310 	and.w	r3, r3, #16
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7ff fb06 	bl	8005bbc <HAL_ADC_ErrorCallback>
}
 80065b0:	e004      	b.n	80065bc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	4798      	blx	r3
}
 80065bc:	bf00      	nop
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f7ff fae8 	bl	8005ba8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80065d8:	bf00      	nop
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065fe:	f043 0204 	orr.w	r2, r3, #4
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f7ff fad8 	bl	8005bbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800660c:	bf00      	nop
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <LL_ADC_IsEnabled>:
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <LL_ADC_IsEnabled+0x18>
 8006628:	2301      	movs	r3, #1
 800662a:	e000      	b.n	800662e <LL_ADC_IsEnabled+0x1a>
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <LL_ADC_REG_IsConversionOngoing>:
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b04      	cmp	r3, #4
 800664c:	d101      	bne.n	8006652 <LL_ADC_REG_IsConversionOngoing+0x18>
 800664e:	2301      	movs	r3, #1
 8006650:	e000      	b.n	8006654 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006660:	b590      	push	{r4, r7, lr}
 8006662:	b0a1      	sub	sp, #132	; 0x84
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006676:	2b01      	cmp	r3, #1
 8006678:	d101      	bne.n	800667e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800667a:	2302      	movs	r3, #2
 800667c:	e0cb      	b.n	8006816 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006686:	2300      	movs	r3, #0
 8006688:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800668a:	2300      	movs	r3, #0
 800668c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006696:	d102      	bne.n	800669e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006698:	4b61      	ldr	r3, [pc, #388]	; (8006820 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800669a:	60bb      	str	r3, [r7, #8]
 800669c:	e001      	b.n	80066a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800669e:	2300      	movs	r3, #0
 80066a0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10b      	bne.n	80066c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ac:	f043 0220 	orr.w	r2, r3, #32
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e0aa      	b.n	8006816 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7ff ffb9 	bl	800663a <LL_ADC_REG_IsConversionOngoing>
 80066c8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff ffb3 	bl	800663a <LL_ADC_REG_IsConversionOngoing>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f040 808c 	bne.w	80067f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80066dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f040 8088 	bne.w	80067f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066ec:	d004      	beq.n	80066f8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a4b      	ldr	r2, [pc, #300]	; (8006820 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d101      	bne.n	80066fc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80066f8:	4b4a      	ldr	r3, [pc, #296]	; (8006824 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 80066fa:	e000      	b.n	80066fe <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80066fc:	4b4a      	ldr	r3, [pc, #296]	; (8006828 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80066fe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d041      	beq.n	800678c <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	6859      	ldr	r1, [r3, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800671a:	035b      	lsls	r3, r3, #13
 800671c:	430b      	orrs	r3, r1
 800671e:	431a      	orrs	r2, r3
 8006720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006722:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800672c:	d004      	beq.n	8006738 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a3b      	ldr	r2, [pc, #236]	; (8006820 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d10f      	bne.n	8006758 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8006738:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800673c:	f7ff ff6a 	bl	8006614 <LL_ADC_IsEnabled>
 8006740:	4604      	mov	r4, r0
 8006742:	4837      	ldr	r0, [pc, #220]	; (8006820 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006744:	f7ff ff66 	bl	8006614 <LL_ADC_IsEnabled>
 8006748:	4603      	mov	r3, r0
 800674a:	4323      	orrs	r3, r4
 800674c:	2b00      	cmp	r3, #0
 800674e:	bf0c      	ite	eq
 8006750:	2301      	moveq	r3, #1
 8006752:	2300      	movne	r3, #0
 8006754:	b2db      	uxtb	r3, r3
 8006756:	e008      	b.n	800676a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8006758:	4834      	ldr	r0, [pc, #208]	; (800682c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800675a:	f7ff ff5b 	bl	8006614 <LL_ADC_IsEnabled>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	bf0c      	ite	eq
 8006764:	2301      	moveq	r3, #1
 8006766:	2300      	movne	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d04c      	beq.n	8006808 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800676e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006776:	f023 030f 	bic.w	r3, r3, #15
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	6811      	ldr	r1, [r2, #0]
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	6892      	ldr	r2, [r2, #8]
 8006782:	430a      	orrs	r2, r1
 8006784:	431a      	orrs	r2, r3
 8006786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006788:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800678a:	e03d      	b.n	8006808 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800678c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006796:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067a0:	d004      	beq.n	80067ac <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a1e      	ldr	r2, [pc, #120]	; (8006820 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d10f      	bne.n	80067cc <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80067ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80067b0:	f7ff ff30 	bl	8006614 <LL_ADC_IsEnabled>
 80067b4:	4604      	mov	r4, r0
 80067b6:	481a      	ldr	r0, [pc, #104]	; (8006820 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80067b8:	f7ff ff2c 	bl	8006614 <LL_ADC_IsEnabled>
 80067bc:	4603      	mov	r3, r0
 80067be:	4323      	orrs	r3, r4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	bf0c      	ite	eq
 80067c4:	2301      	moveq	r3, #1
 80067c6:	2300      	movne	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	e008      	b.n	80067de <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 80067cc:	4817      	ldr	r0, [pc, #92]	; (800682c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80067ce:	f7ff ff21 	bl	8006614 <LL_ADC_IsEnabled>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	bf0c      	ite	eq
 80067d8:	2301      	moveq	r3, #1
 80067da:	2300      	movne	r3, #0
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d012      	beq.n	8006808 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80067e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80067ea:	f023 030f 	bic.w	r3, r3, #15
 80067ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80067f0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80067f2:	e009      	b.n	8006808 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f8:	f043 0220 	orr.w	r2, r3, #32
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006806:	e000      	b.n	800680a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006808:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006812:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006816:	4618      	mov	r0, r3
 8006818:	3784      	adds	r7, #132	; 0x84
 800681a:	46bd      	mov	sp, r7
 800681c:	bd90      	pop	{r4, r7, pc}
 800681e:	bf00      	nop
 8006820:	50000100 	.word	0x50000100
 8006824:	50000300 	.word	0x50000300
 8006828:	50000700 	.word	0x50000700
 800682c:	50000400 	.word	0x50000400

08006830 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e023      	b.n	800688a <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d106      	bne.n	800685c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fe fa7a 	bl	8004d50 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f003 0307 	and.w	r3, r3, #7
 80068a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068a4:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <__NVIC_SetPriorityGrouping+0x44>)
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80068b0:	4013      	ands	r3, r2
 80068b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80068bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80068c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068c6:	4a04      	ldr	r2, [pc, #16]	; (80068d8 <__NVIC_SetPriorityGrouping+0x44>)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	60d3      	str	r3, [r2, #12]
}
 80068cc:	bf00      	nop
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	e000ed00 	.word	0xe000ed00

080068dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80068e0:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <__NVIC_GetPriorityGrouping+0x18>)
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	0a1b      	lsrs	r3, r3, #8
 80068e6:	f003 0307 	and.w	r3, r3, #7
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	e000ed00 	.word	0xe000ed00

080068f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4603      	mov	r3, r0
 8006900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006906:	2b00      	cmp	r3, #0
 8006908:	db0b      	blt.n	8006922 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800690a:	79fb      	ldrb	r3, [r7, #7]
 800690c:	f003 021f 	and.w	r2, r3, #31
 8006910:	4907      	ldr	r1, [pc, #28]	; (8006930 <__NVIC_EnableIRQ+0x38>)
 8006912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006916:	095b      	lsrs	r3, r3, #5
 8006918:	2001      	movs	r0, #1
 800691a:	fa00 f202 	lsl.w	r2, r0, r2
 800691e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006922:	bf00      	nop
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	e000e100 	.word	0xe000e100

08006934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	4603      	mov	r3, r0
 800693c:	6039      	str	r1, [r7, #0]
 800693e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006944:	2b00      	cmp	r3, #0
 8006946:	db0a      	blt.n	800695e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	b2da      	uxtb	r2, r3
 800694c:	490c      	ldr	r1, [pc, #48]	; (8006980 <__NVIC_SetPriority+0x4c>)
 800694e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006952:	0112      	lsls	r2, r2, #4
 8006954:	b2d2      	uxtb	r2, r2
 8006956:	440b      	add	r3, r1
 8006958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800695c:	e00a      	b.n	8006974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	4908      	ldr	r1, [pc, #32]	; (8006984 <__NVIC_SetPriority+0x50>)
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	3b04      	subs	r3, #4
 800696c:	0112      	lsls	r2, r2, #4
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	440b      	add	r3, r1
 8006972:	761a      	strb	r2, [r3, #24]
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	e000e100 	.word	0xe000e100
 8006984:	e000ed00 	.word	0xe000ed00

08006988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006988:	b480      	push	{r7}
 800698a:	b089      	sub	sp, #36	; 0x24
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	f1c3 0307 	rsb	r3, r3, #7
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	bf28      	it	cs
 80069a6:	2304      	movcs	r3, #4
 80069a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	3304      	adds	r3, #4
 80069ae:	2b06      	cmp	r3, #6
 80069b0:	d902      	bls.n	80069b8 <NVIC_EncodePriority+0x30>
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	3b03      	subs	r3, #3
 80069b6:	e000      	b.n	80069ba <NVIC_EncodePriority+0x32>
 80069b8:	2300      	movs	r3, #0
 80069ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069bc:	f04f 32ff 	mov.w	r2, #4294967295
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	fa02 f303 	lsl.w	r3, r2, r3
 80069c6:	43da      	mvns	r2, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	401a      	ands	r2, r3
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069d0:	f04f 31ff 	mov.w	r1, #4294967295
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	fa01 f303 	lsl.w	r3, r1, r3
 80069da:	43d9      	mvns	r1, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069e0:	4313      	orrs	r3, r2
         );
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3724      	adds	r7, #36	; 0x24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
	...

080069f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3b01      	subs	r3, #1
 80069fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a00:	d301      	bcc.n	8006a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a02:	2301      	movs	r3, #1
 8006a04:	e00f      	b.n	8006a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a06:	4a0a      	ldr	r2, [pc, #40]	; (8006a30 <SysTick_Config+0x40>)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a0e:	210f      	movs	r1, #15
 8006a10:	f04f 30ff 	mov.w	r0, #4294967295
 8006a14:	f7ff ff8e 	bl	8006934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a18:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <SysTick_Config+0x40>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a1e:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <SysTick_Config+0x40>)
 8006a20:	2207      	movs	r2, #7
 8006a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	e000e010 	.word	0xe000e010

08006a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff ff29 	bl	8006894 <__NVIC_SetPriorityGrouping>
}
 8006a42:	bf00      	nop
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b086      	sub	sp, #24
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	4603      	mov	r3, r0
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
 8006a56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006a58:	f7ff ff40 	bl	80068dc <__NVIC_GetPriorityGrouping>
 8006a5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	6978      	ldr	r0, [r7, #20]
 8006a64:	f7ff ff90 	bl	8006988 <NVIC_EncodePriority>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a6e:	4611      	mov	r1, r2
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7ff ff5f 	bl	8006934 <__NVIC_SetPriority>
}
 8006a76:	bf00      	nop
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b082      	sub	sp, #8
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	4603      	mov	r3, r0
 8006a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff ff33 	bl	80068f8 <__NVIC_EnableIRQ>
}
 8006a92:	bf00      	nop
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff ffa4 	bl	80069f0 <SysTick_Config>
 8006aa8:	4603      	mov	r3, r0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e054      	b.n	8006b70 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	7f5b      	ldrb	r3, [r3, #29]
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d105      	bne.n	8006adc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7fe f95a 	bl	8004d90 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	791b      	ldrb	r3, [r3, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10c      	bne.n	8006b04 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a22      	ldr	r2, [pc, #136]	; (8006b78 <HAL_CRC_Init+0xc4>)
 8006af0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0218 	bic.w	r2, r2, #24
 8006b00:	609a      	str	r2, [r3, #8]
 8006b02:	e00c      	b.n	8006b1e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6899      	ldr	r1, [r3, #8]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f834 	bl	8006b7c <HAL_CRCEx_Polynomial_Set>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e028      	b.n	8006b70 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	795b      	ldrb	r3, [r3, #5]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d105      	bne.n	8006b32 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2e:	611a      	str	r2, [r3, #16]
 8006b30:	e004      	b.n	8006b3c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6912      	ldr	r2, [r2, #16]
 8006b3a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695a      	ldr	r2, [r3, #20]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699a      	ldr	r2, [r3, #24]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	04c11db7 	.word	0x04c11db7

08006b7c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006b8c:	231f      	movs	r3, #31
 8006b8e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006b90:	bf00      	nop
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1e5a      	subs	r2, r3, #1
 8006b96:	613a      	str	r2, [r7, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d009      	beq.n	8006bb0 <HAL_CRCEx_Polynomial_Set+0x34>
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f003 031f 	and.w	r3, r3, #31
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0f0      	beq.n	8006b92 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b18      	cmp	r3, #24
 8006bb4:	d846      	bhi.n	8006c44 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006bb6:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <HAL_CRCEx_Polynomial_Set+0x40>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006c4b 	.word	0x08006c4b
 8006bc0:	08006c45 	.word	0x08006c45
 8006bc4:	08006c45 	.word	0x08006c45
 8006bc8:	08006c45 	.word	0x08006c45
 8006bcc:	08006c45 	.word	0x08006c45
 8006bd0:	08006c45 	.word	0x08006c45
 8006bd4:	08006c45 	.word	0x08006c45
 8006bd8:	08006c45 	.word	0x08006c45
 8006bdc:	08006c39 	.word	0x08006c39
 8006be0:	08006c45 	.word	0x08006c45
 8006be4:	08006c45 	.word	0x08006c45
 8006be8:	08006c45 	.word	0x08006c45
 8006bec:	08006c45 	.word	0x08006c45
 8006bf0:	08006c45 	.word	0x08006c45
 8006bf4:	08006c45 	.word	0x08006c45
 8006bf8:	08006c45 	.word	0x08006c45
 8006bfc:	08006c2d 	.word	0x08006c2d
 8006c00:	08006c45 	.word	0x08006c45
 8006c04:	08006c45 	.word	0x08006c45
 8006c08:	08006c45 	.word	0x08006c45
 8006c0c:	08006c45 	.word	0x08006c45
 8006c10:	08006c45 	.word	0x08006c45
 8006c14:	08006c45 	.word	0x08006c45
 8006c18:	08006c45 	.word	0x08006c45
 8006c1c:	08006c21 	.word	0x08006c21
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	2b06      	cmp	r3, #6
 8006c24:	d913      	bls.n	8006c4e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c2a:	e010      	b.n	8006c4e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	2b07      	cmp	r3, #7
 8006c30:	d90f      	bls.n	8006c52 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c36:	e00c      	b.n	8006c52 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2b0f      	cmp	r3, #15
 8006c3c:	d90b      	bls.n	8006c56 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c42:	e008      	b.n	8006c56 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	75fb      	strb	r3, [r7, #23]
      break;
 8006c48:	e006      	b.n	8006c58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c4a:	bf00      	nop
 8006c4c:	e004      	b.n	8006c58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c4e:	bf00      	nop
 8006c50:	e002      	b.n	8006c58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c52:	bf00      	nop
 8006c54:	e000      	b.n	8006c58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c56:	bf00      	nop
  }
  if (status == HAL_OK)
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10d      	bne.n	8006c7a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f023 0118 	bic.w	r1, r3, #24
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e08d      	b.n	8006db6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	4b47      	ldr	r3, [pc, #284]	; (8006dc0 <HAL_DMA_Init+0x138>)
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d80f      	bhi.n	8006cc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	4b45      	ldr	r3, [pc, #276]	; (8006dc4 <HAL_DMA_Init+0x13c>)
 8006cae:	4413      	add	r3, r2
 8006cb0:	4a45      	ldr	r2, [pc, #276]	; (8006dc8 <HAL_DMA_Init+0x140>)
 8006cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb6:	091b      	lsrs	r3, r3, #4
 8006cb8:	009a      	lsls	r2, r3, #2
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a42      	ldr	r2, [pc, #264]	; (8006dcc <HAL_DMA_Init+0x144>)
 8006cc2:	641a      	str	r2, [r3, #64]	; 0x40
 8006cc4:	e00e      	b.n	8006ce4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	4b40      	ldr	r3, [pc, #256]	; (8006dd0 <HAL_DMA_Init+0x148>)
 8006cce:	4413      	add	r3, r2
 8006cd0:	4a3d      	ldr	r2, [pc, #244]	; (8006dc8 <HAL_DMA_Init+0x140>)
 8006cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd6:	091b      	lsrs	r3, r3, #4
 8006cd8:	009a      	lsls	r2, r3, #2
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a3c      	ldr	r2, [pc, #240]	; (8006dd4 <HAL_DMA_Init+0x14c>)
 8006ce2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f9b6 	bl	80070a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d44:	d102      	bne.n	8006d4c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006d60:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d010      	beq.n	8006d8c <HAL_DMA_Init+0x104>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	d80c      	bhi.n	8006d8c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f9d6 	bl	8007124 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006d88:	605a      	str	r2, [r3, #4]
 8006d8a:	e008      	b.n	8006d9e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	40020407 	.word	0x40020407
 8006dc4:	bffdfff8 	.word	0xbffdfff8
 8006dc8:	cccccccd 	.word	0xcccccccd
 8006dcc:	40020000 	.word	0x40020000
 8006dd0:	bffdfbf8 	.word	0xbffdfbf8
 8006dd4:	40020400 	.word	0x40020400

08006dd8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d101      	bne.n	8006df8 <HAL_DMA_Start_IT+0x20>
 8006df4:	2302      	movs	r3, #2
 8006df6:	e066      	b.n	8006ec6 <HAL_DMA_Start_IT+0xee>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d155      	bne.n	8006eb8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f022 0201 	bic.w	r2, r2, #1
 8006e28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	68b9      	ldr	r1, [r7, #8]
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 f8fb 	bl	800702c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d008      	beq.n	8006e50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f042 020e 	orr.w	r2, r2, #14
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	e00f      	b.n	8006e70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0204 	bic.w	r2, r2, #4
 8006e5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 020a 	orr.w	r2, r2, #10
 8006e6e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d007      	beq.n	8006e8e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e8c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d007      	beq.n	8006ea6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ea4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f042 0201 	orr.w	r2, r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	e005      	b.n	8006ec4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eea:	f003 031f 	and.w	r3, r3, #31
 8006eee:	2204      	movs	r2, #4
 8006ef0:	409a      	lsls	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d026      	beq.n	8006f48 <HAL_DMA_IRQHandler+0x7a>
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d021      	beq.n	8006f48 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d107      	bne.n	8006f22 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0204 	bic.w	r2, r2, #4
 8006f20:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f26:	f003 021f 	and.w	r2, r3, #31
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	2104      	movs	r1, #4
 8006f30:	fa01 f202 	lsl.w	r2, r1, r2
 8006f34:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d071      	beq.n	8007022 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006f46:	e06c      	b.n	8007022 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4c:	f003 031f 	and.w	r3, r3, #31
 8006f50:	2202      	movs	r2, #2
 8006f52:	409a      	lsls	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4013      	ands	r3, r2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d02e      	beq.n	8006fba <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d029      	beq.n	8006fba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0320 	and.w	r3, r3, #32
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10b      	bne.n	8006f8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 020a 	bic.w	r2, r2, #10
 8006f82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f90:	f003 021f 	and.w	r2, r3, #31
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	2102      	movs	r1, #2
 8006f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8006f9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d038      	beq.n	8007022 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006fb8:	e033      	b.n	8007022 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fbe:	f003 031f 	and.w	r3, r3, #31
 8006fc2:	2208      	movs	r2, #8
 8006fc4:	409a      	lsls	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d02a      	beq.n	8007024 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	f003 0308 	and.w	r3, r3, #8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d025      	beq.n	8007024 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 020e 	bic.w	r2, r2, #14
 8006fe6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fec:	f003 021f 	and.w	r2, r3, #31
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8006ffa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007016:	2b00      	cmp	r3, #0
 8007018:	d004      	beq.n	8007024 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007022:	bf00      	nop
 8007024:	bf00      	nop
}
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007042:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007048:	2b00      	cmp	r3, #0
 800704a:	d004      	beq.n	8007056 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007054:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705a:	f003 021f 	and.w	r2, r3, #31
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	2101      	movs	r1, #1
 8007064:	fa01 f202 	lsl.w	r2, r1, r2
 8007068:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	2b10      	cmp	r3, #16
 8007078:	d108      	bne.n	800708c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800708a:	e007      	b.n	800709c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	60da      	str	r2, [r3, #12]
}
 800709c:	bf00      	nop
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	461a      	mov	r2, r3
 80070b6:	4b16      	ldr	r3, [pc, #88]	; (8007110 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d802      	bhi.n	80070c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80070bc:	4b15      	ldr	r3, [pc, #84]	; (8007114 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	e001      	b.n	80070c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80070c2:	4b15      	ldr	r3, [pc, #84]	; (8007118 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80070c4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	3b08      	subs	r3, #8
 80070d2:	4a12      	ldr	r2, [pc, #72]	; (800711c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80070d4:	fba2 2303 	umull	r2, r3, r2, r3
 80070d8:	091b      	lsrs	r3, r3, #4
 80070da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e0:	089b      	lsrs	r3, r3, #2
 80070e2:	009a      	lsls	r2, r3, #2
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	4413      	add	r3, r2
 80070e8:	461a      	mov	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a0b      	ldr	r2, [pc, #44]	; (8007120 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80070f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f003 031f 	and.w	r3, r3, #31
 80070fa:	2201      	movs	r2, #1
 80070fc:	409a      	lsls	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007102:	bf00      	nop
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40020407 	.word	0x40020407
 8007114:	40020800 	.word	0x40020800
 8007118:	40020820 	.word	0x40020820
 800711c:	cccccccd 	.word	0xcccccccd
 8007120:	40020880 	.word	0x40020880

08007124 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	b2db      	uxtb	r3, r3
 8007132:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007138:	4413      	add	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	461a      	mov	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a08      	ldr	r2, [pc, #32]	; (8007168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007146:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3b01      	subs	r3, #1
 800714c:	f003 031f 	and.w	r3, r3, #31
 8007150:	2201      	movs	r2, #1
 8007152:	409a      	lsls	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007158:	bf00      	nop
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	1000823f 	.word	0x1000823f
 8007168:	40020940 	.word	0x40020940

0800716c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e147      	b.n	800740e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d106      	bne.n	8007198 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7fd fe1c 	bl	8004dd0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699a      	ldr	r2, [r3, #24]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0210 	bic.w	r2, r2, #16
 80071a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071a8:	f7fe f826 	bl	80051f8 <HAL_GetTick>
 80071ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80071ae:	e012      	b.n	80071d6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80071b0:	f7fe f822 	bl	80051f8 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b0a      	cmp	r3, #10
 80071bc:	d90b      	bls.n	80071d6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c2:	f043 0201 	orr.w	r2, r3, #1
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2203      	movs	r2, #3
 80071ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e11b      	b.n	800740e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f003 0308 	and.w	r3, r3, #8
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d0e5      	beq.n	80071b0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699a      	ldr	r2, [r3, #24]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0201 	orr.w	r2, r2, #1
 80071f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071f4:	f7fe f800 	bl	80051f8 <HAL_GetTick>
 80071f8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80071fa:	e012      	b.n	8007222 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80071fc:	f7fd fffc 	bl	80051f8 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b0a      	cmp	r3, #10
 8007208:	d90b      	bls.n	8007222 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800720e:	f043 0201 	orr.w	r2, r3, #1
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2203      	movs	r2, #3
 800721a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e0f5      	b.n	800740e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	d0e5      	beq.n	80071fc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699a      	ldr	r2, [r3, #24]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f042 0202 	orr.w	r2, r2, #2
 800723e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a74      	ldr	r2, [pc, #464]	; (8007418 <HAL_FDCAN_Init+0x2ac>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d103      	bne.n	8007252 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800724a:	4a74      	ldr	r2, [pc, #464]	; (800741c <HAL_FDCAN_Init+0x2b0>)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	7c1b      	ldrb	r3, [r3, #16]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d108      	bne.n	800726c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	699a      	ldr	r2, [r3, #24]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007268:	619a      	str	r2, [r3, #24]
 800726a:	e007      	b.n	800727c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800727a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	7c5b      	ldrb	r3, [r3, #17]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d108      	bne.n	8007296 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699a      	ldr	r2, [r3, #24]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007292:	619a      	str	r2, [r3, #24]
 8007294:	e007      	b.n	80072a6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	699a      	ldr	r2, [r3, #24]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072a4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	7c9b      	ldrb	r3, [r3, #18]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d108      	bne.n	80072c0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	699a      	ldr	r2, [r3, #24]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072bc:	619a      	str	r2, [r3, #24]
 80072be:	e007      	b.n	80072d0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	699a      	ldr	r2, [r3, #24]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072ce:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689a      	ldr	r2, [r3, #8]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	699a      	ldr	r2, [r3, #24]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80072f4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	691a      	ldr	r2, [r3, #16]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0210 	bic.w	r2, r2, #16
 8007304:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d108      	bne.n	8007320 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	699a      	ldr	r2, [r3, #24]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 0204 	orr.w	r2, r2, #4
 800731c:	619a      	str	r2, [r3, #24]
 800731e:	e02c      	b.n	800737a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d028      	beq.n	800737a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	2b02      	cmp	r3, #2
 800732e:	d01c      	beq.n	800736a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	699a      	ldr	r2, [r3, #24]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800733e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	691a      	ldr	r2, [r3, #16]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0210 	orr.w	r2, r2, #16
 800734e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	2b03      	cmp	r3, #3
 8007356:	d110      	bne.n	800737a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699a      	ldr	r2, [r3, #24]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0220 	orr.w	r2, r2, #32
 8007366:	619a      	str	r2, [r3, #24]
 8007368:	e007      	b.n	800737a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	699a      	ldr	r2, [r3, #24]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0220 	orr.w	r2, r2, #32
 8007378:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	3b01      	subs	r3, #1
 8007380:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	3b01      	subs	r3, #1
 8007388:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800738a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007392:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	3b01      	subs	r3, #1
 800739c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80073a2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80073a4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073ae:	d115      	bne.n	80073dc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	3b01      	subs	r3, #1
 80073bc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80073be:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c4:	3b01      	subs	r3, #1
 80073c6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80073c8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	3b01      	subs	r3, #1
 80073d2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80073d8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80073da:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fa4c 	bl	8007890 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	40006400 	.word	0x40006400
 800741c:	40006500 	.word	0x40006500

08007420 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007430:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007432:	7dfb      	ldrb	r3, [r7, #23]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d002      	beq.n	800743e <HAL_FDCAN_ConfigFilter+0x1e>
 8007438:	7dfb      	ldrb	r3, [r7, #23]
 800743a:	2b02      	cmp	r3, #2
 800743c:	d13d      	bne.n	80074ba <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d119      	bne.n	800747a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007452:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800745a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007460:	4313      	orrs	r3, r2
 8007462:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	e01d      	b.n	80074b6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	075a      	lsls	r2, r3, #29
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	4313      	orrs	r3, r2
 8007486:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	079a      	lsls	r2, r3, #30
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	4413      	add	r3, r2
 80074a2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	3304      	adds	r3, #4
 80074ae:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	e006      	b.n	80074c8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074be:	f043 0202 	orr.w	r2, r3, #2
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
  }
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	371c      	adds	r7, #28
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d116      	bne.n	800751c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074f6:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	011a      	lsls	r2, r3, #4
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	431a      	orrs	r2, r3
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	431a      	orrs	r2, r3
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	431a      	orrs	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	e006      	b.n	800752a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007520:	f043 0204 	orr.w	r2, r3, #4
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
  }
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b08a      	sub	sp, #40	; 0x28
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007544:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007548:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007552:	4013      	ands	r3, r2
 8007554:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800755c:	f003 0307 	and.w	r3, r3, #7
 8007560:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007568:	6a3a      	ldr	r2, [r7, #32]
 800756a:	4013      	ands	r3, r2
 800756c:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007574:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007578:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007580:	69fa      	ldr	r2, [r7, #28]
 8007582:	4013      	ands	r3, r2
 8007584:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758c:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8007590:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	4013      	ands	r3, r2
 800759c:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80075a8:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	4013      	ands	r3, r2
 80075b4:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00d      	beq.n	80075e0 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d006      	beq.n	80075e0 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2240      	movs	r2, #64	; 0x40
 80075d8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f939 	bl	8007852 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d01b      	beq.n	8007626 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d014      	beq.n	8007626 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007604:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	4013      	ands	r3, r2
 8007612:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800761c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800761e:	6939      	ldr	r1, [r7, #16]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f8f7 	bl	8007814 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	2b00      	cmp	r3, #0
 800762a:	d007      	beq.n	800763c <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007632:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f8b6 	bl	80077a8 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	6a3a      	ldr	r2, [r7, #32]
 8007648:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800764a:	6a39      	ldr	r1, [r7, #32]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f8b6 	bl	80077be <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d007      	beq.n	8007668 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007660:	69f9      	ldr	r1, [r7, #28]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f8b6 	bl	80077d4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800766e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00e      	beq.n	8007694 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007680:	2b00      	cmp	r3, #0
 8007682:	d007      	beq.n	8007694 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800768c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f8ab 	bl	80077ea <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800769a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d01a      	beq.n	80076d8 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d013      	beq.n	80076d8 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80076b8:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	4013      	ands	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2280      	movs	r2, #128	; 0x80
 80076ce:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80076d0:	68f9      	ldr	r1, [r7, #12]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f893 	bl	80077fe <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00e      	beq.n	8007704 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d007      	beq.n	8007704 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80076fc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f893 	bl	800782a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800770a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00e      	beq.n	8007730 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d007      	beq.n	8007730 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007728:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f887 	bl	800783e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d011      	beq.n	8007762 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00a      	beq.n	8007762 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007754:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800775a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d007      	beq.n	8007778 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007770:	6979      	ldr	r1, [r7, #20]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f881 	bl	800787a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d009      	beq.n	8007792 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	431a      	orrs	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f863 	bl	8007866 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80077a0:	bf00      	nop
 80077a2:	3728      	adds	r7, #40	; 0x28
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80077f2:	bf00      	nop
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800781e:	bf00      	nop
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007832:	bf00      	nop
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800783e:	b480      	push	{r7}
 8007840:	b083      	sub	sp, #12
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007846:	bf00      	nop
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800785a:	bf00      	nop
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007866:	b480      	push	{r7}
 8007868:	b083      	sub	sp, #12
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800786e:	bf00      	nop
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007898:	4b2c      	ldr	r3, [pc, #176]	; (800794c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800789a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a2b      	ldr	r2, [pc, #172]	; (8007950 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d103      	bne.n	80078ae <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80078ac:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078bc:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c4:	041a      	lsls	r2, r3, #16
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078e2:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ea:	061a      	lsls	r2, r3, #24
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	430a      	orrs	r2, r1
 80078f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	60fb      	str	r3, [r7, #12]
 8007922:	e005      	b.n	8007930 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	3304      	adds	r3, #4
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	429a      	cmp	r2, r3
 800793a:	d3f3      	bcc.n	8007924 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	4000a400 	.word	0x4000a400
 8007950:	40006800 	.word	0x40006800

08007954 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e033      	b.n	80079ce <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d106      	bne.n	8007980 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7fd fa8a 	bl	8004e94 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f854 	bl	8007a34 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f822 	bl	80079d6 <FMAC_Reset>
 8007992:	4603      	mov	r3, r0
 8007994:	2b01      	cmp	r3, #1
 8007996:	d10c      	bne.n	80079b2 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799c:	f043 0210 	orr.w	r2, r3, #16
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	22a0      	movs	r2, #160	; 0xa0
 80079a8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	73fb      	strb	r3, [r7, #15]
 80079b0:	e008      	b.n	80079c4 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2220      	movs	r2, #32
 80079bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079de:	f7fd fc0b 	bl	80051f8 <HAL_GetTick>
 80079e2:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	691a      	ldr	r2, [r3, #16]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80079f2:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80079f4:	e00f      	b.n	8007a16 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80079f6:	f7fd fbff 	bl	80051f8 <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007a04:	d907      	bls.n	8007a16 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e00a      	b.n	8007a2c <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e8      	bne.n	80079f6 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f807 	bl	8007a50 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f81b 	bl	8007a7e <FMAC_ResetOutputStateAndDataPointers>
}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007aba:	e15a      	b.n	8007d72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac8:	4013      	ands	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 814c 	beq.w	8007d6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f003 0303 	and.w	r3, r3, #3
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d005      	beq.n	8007aec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d130      	bne.n	8007b4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	2203      	movs	r2, #3
 8007af8:	fa02 f303 	lsl.w	r3, r2, r3
 8007afc:	43db      	mvns	r3, r3
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	4013      	ands	r3, r2
 8007b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b22:	2201      	movs	r2, #1
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2a:	43db      	mvns	r3, r3
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	4013      	ands	r3, r2
 8007b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	091b      	lsrs	r3, r3, #4
 8007b38:	f003 0201 	and.w	r2, r3, #1
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f003 0303 	and.w	r3, r3, #3
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	d017      	beq.n	8007b8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	2203      	movs	r2, #3
 8007b66:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6a:	43db      	mvns	r3, r3
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	4013      	ands	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f003 0303 	and.w	r3, r3, #3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d123      	bne.n	8007bde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	08da      	lsrs	r2, r3, #3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	3208      	adds	r2, #8
 8007b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	220f      	movs	r2, #15
 8007bae:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb2:	43db      	mvns	r3, r3
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	691a      	ldr	r2, [r3, #16]
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f003 0307 	and.w	r3, r3, #7
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	08da      	lsrs	r2, r3, #3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3208      	adds	r2, #8
 8007bd8:	6939      	ldr	r1, [r7, #16]
 8007bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	2203      	movs	r2, #3
 8007bea:	fa02 f303 	lsl.w	r3, r2, r3
 8007bee:	43db      	mvns	r3, r3
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f003 0203 	and.w	r2, r3, #3
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	fa02 f303 	lsl.w	r3, r2, r3
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 80a6 	beq.w	8007d6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c20:	4b5b      	ldr	r3, [pc, #364]	; (8007d90 <HAL_GPIO_Init+0x2e4>)
 8007c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c24:	4a5a      	ldr	r2, [pc, #360]	; (8007d90 <HAL_GPIO_Init+0x2e4>)
 8007c26:	f043 0301 	orr.w	r3, r3, #1
 8007c2a:	6613      	str	r3, [r2, #96]	; 0x60
 8007c2c:	4b58      	ldr	r3, [pc, #352]	; (8007d90 <HAL_GPIO_Init+0x2e4>)
 8007c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	60bb      	str	r3, [r7, #8]
 8007c36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c38:	4a56      	ldr	r2, [pc, #344]	; (8007d94 <HAL_GPIO_Init+0x2e8>)
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	089b      	lsrs	r3, r3, #2
 8007c3e:	3302      	adds	r3, #2
 8007c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f003 0303 	and.w	r3, r3, #3
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	220f      	movs	r2, #15
 8007c50:	fa02 f303 	lsl.w	r3, r2, r3
 8007c54:	43db      	mvns	r3, r3
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	4013      	ands	r3, r2
 8007c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007c62:	d01f      	beq.n	8007ca4 <HAL_GPIO_Init+0x1f8>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a4c      	ldr	r2, [pc, #304]	; (8007d98 <HAL_GPIO_Init+0x2ec>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d019      	beq.n	8007ca0 <HAL_GPIO_Init+0x1f4>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a4b      	ldr	r2, [pc, #300]	; (8007d9c <HAL_GPIO_Init+0x2f0>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d013      	beq.n	8007c9c <HAL_GPIO_Init+0x1f0>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a4a      	ldr	r2, [pc, #296]	; (8007da0 <HAL_GPIO_Init+0x2f4>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d00d      	beq.n	8007c98 <HAL_GPIO_Init+0x1ec>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a49      	ldr	r2, [pc, #292]	; (8007da4 <HAL_GPIO_Init+0x2f8>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d007      	beq.n	8007c94 <HAL_GPIO_Init+0x1e8>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a48      	ldr	r2, [pc, #288]	; (8007da8 <HAL_GPIO_Init+0x2fc>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d101      	bne.n	8007c90 <HAL_GPIO_Init+0x1e4>
 8007c8c:	2305      	movs	r3, #5
 8007c8e:	e00a      	b.n	8007ca6 <HAL_GPIO_Init+0x1fa>
 8007c90:	2306      	movs	r3, #6
 8007c92:	e008      	b.n	8007ca6 <HAL_GPIO_Init+0x1fa>
 8007c94:	2304      	movs	r3, #4
 8007c96:	e006      	b.n	8007ca6 <HAL_GPIO_Init+0x1fa>
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e004      	b.n	8007ca6 <HAL_GPIO_Init+0x1fa>
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	e002      	b.n	8007ca6 <HAL_GPIO_Init+0x1fa>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e000      	b.n	8007ca6 <HAL_GPIO_Init+0x1fa>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	f002 0203 	and.w	r2, r2, #3
 8007cac:	0092      	lsls	r2, r2, #2
 8007cae:	4093      	lsls	r3, r2
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007cb6:	4937      	ldr	r1, [pc, #220]	; (8007d94 <HAL_GPIO_Init+0x2e8>)
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	089b      	lsrs	r3, r3, #2
 8007cbc:	3302      	adds	r3, #2
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007cc4:	4b39      	ldr	r3, [pc, #228]	; (8007dac <HAL_GPIO_Init+0x300>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	43db      	mvns	r3, r3
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007ce8:	4a30      	ldr	r2, [pc, #192]	; (8007dac <HAL_GPIO_Init+0x300>)
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007cee:	4b2f      	ldr	r3, [pc, #188]	; (8007dac <HAL_GPIO_Init+0x300>)
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	43db      	mvns	r3, r3
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007d12:	4a26      	ldr	r2, [pc, #152]	; (8007dac <HAL_GPIO_Init+0x300>)
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007d18:	4b24      	ldr	r3, [pc, #144]	; (8007dac <HAL_GPIO_Init+0x300>)
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	43db      	mvns	r3, r3
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4013      	ands	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d003      	beq.n	8007d3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007d3c:	4a1b      	ldr	r2, [pc, #108]	; (8007dac <HAL_GPIO_Init+0x300>)
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007d42:	4b1a      	ldr	r3, [pc, #104]	; (8007dac <HAL_GPIO_Init+0x300>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	43db      	mvns	r3, r3
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007d66:	4a11      	ldr	r2, [pc, #68]	; (8007dac <HAL_GPIO_Init+0x300>)
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f47f ae9d 	bne.w	8007abc <HAL_GPIO_Init+0x10>
  }
}
 8007d82:	bf00      	nop
 8007d84:	bf00      	nop
 8007d86:	371c      	adds	r7, #28
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	40021000 	.word	0x40021000
 8007d94:	40010000 	.word	0x40010000
 8007d98:	48000400 	.word	0x48000400
 8007d9c:	48000800 	.word	0x48000800
 8007da0:	48000c00 	.word	0x48000c00
 8007da4:	48001000 	.word	0x48001000
 8007da8:	48001400 	.word	0x48001400
 8007dac:	40010400 	.word	0x40010400

08007db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	460b      	mov	r3, r1
 8007dba:	807b      	strh	r3, [r7, #2]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007dc0:	787b      	ldrb	r3, [r7, #1]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007dc6:	887a      	ldrh	r2, [r7, #2]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007dcc:	e002      	b.n	8007dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007dce:	887a      	ldrh	r2, [r7, #2]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d141      	bne.n	8007e72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007dee:	4b4b      	ldr	r3, [pc, #300]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dfa:	d131      	bne.n	8007e60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007dfc:	4b47      	ldr	r3, [pc, #284]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e02:	4a46      	ldr	r2, [pc, #280]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e0c:	4b43      	ldr	r3, [pc, #268]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007e14:	4a41      	ldr	r2, [pc, #260]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e1c:	4b40      	ldr	r3, [pc, #256]	; (8007f20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2232      	movs	r2, #50	; 0x32
 8007e22:	fb02 f303 	mul.w	r3, r2, r3
 8007e26:	4a3f      	ldr	r2, [pc, #252]	; (8007f24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007e28:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2c:	0c9b      	lsrs	r3, r3, #18
 8007e2e:	3301      	adds	r3, #1
 8007e30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e32:	e002      	b.n	8007e3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e3a:	4b38      	ldr	r3, [pc, #224]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e46:	d102      	bne.n	8007e4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1f2      	bne.n	8007e34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e4e:	4b33      	ldr	r3, [pc, #204]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e5a:	d158      	bne.n	8007f0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e057      	b.n	8007f10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e60:	4b2e      	ldr	r3, [pc, #184]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e66:	4a2d      	ldr	r2, [pc, #180]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007e70:	e04d      	b.n	8007f0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e78:	d141      	bne.n	8007efe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007e7a:	4b28      	ldr	r3, [pc, #160]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e86:	d131      	bne.n	8007eec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e88:	4b24      	ldr	r3, [pc, #144]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e8e:	4a23      	ldr	r2, [pc, #140]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e98:	4b20      	ldr	r3, [pc, #128]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007ea0:	4a1e      	ldr	r2, [pc, #120]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ea6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007ea8:	4b1d      	ldr	r3, [pc, #116]	; (8007f20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2232      	movs	r2, #50	; 0x32
 8007eae:	fb02 f303 	mul.w	r3, r2, r3
 8007eb2:	4a1c      	ldr	r2, [pc, #112]	; (8007f24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb8:	0c9b      	lsrs	r3, r3, #18
 8007eba:	3301      	adds	r3, #1
 8007ebc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ebe:	e002      	b.n	8007ec6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ec6:	4b15      	ldr	r3, [pc, #84]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed2:	d102      	bne.n	8007eda <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1f2      	bne.n	8007ec0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007eda:	4b10      	ldr	r3, [pc, #64]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ee6:	d112      	bne.n	8007f0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e011      	b.n	8007f10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007eec:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ef2:	4a0a      	ldr	r2, [pc, #40]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ef8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007efc:	e007      	b.n	8007f0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007efe:	4b07      	ldr	r3, [pc, #28]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007f06:	4a05      	ldr	r2, [pc, #20]	; (8007f1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	40007000 	.word	0x40007000
 8007f20:	200004a8 	.word	0x200004a8
 8007f24:	431bde83 	.word	0x431bde83

08007f28 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007f2c:	4b05      	ldr	r3, [pc, #20]	; (8007f44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	4a04      	ldr	r2, [pc, #16]	; (8007f44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007f32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f36:	6093      	str	r3, [r2, #8]
}
 8007f38:	bf00      	nop
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	40007000 	.word	0x40007000

08007f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e306      	b.n	8008568 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d075      	beq.n	8008052 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f66:	4b97      	ldr	r3, [pc, #604]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 030c 	and.w	r3, r3, #12
 8007f6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f70:	4b94      	ldr	r3, [pc, #592]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	2b0c      	cmp	r3, #12
 8007f7e:	d102      	bne.n	8007f86 <HAL_RCC_OscConfig+0x3e>
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	d002      	beq.n	8007f8c <HAL_RCC_OscConfig+0x44>
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	2b08      	cmp	r3, #8
 8007f8a:	d10b      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f8c:	4b8d      	ldr	r3, [pc, #564]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d05b      	beq.n	8008050 <HAL_RCC_OscConfig+0x108>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d157      	bne.n	8008050 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e2e1      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fac:	d106      	bne.n	8007fbc <HAL_RCC_OscConfig+0x74>
 8007fae:	4b85      	ldr	r3, [pc, #532]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a84      	ldr	r2, [pc, #528]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8007fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fb8:	6013      	str	r3, [r2, #0]
 8007fba:	e01d      	b.n	8007ff8 <HAL_RCC_OscConfig+0xb0>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fc4:	d10c      	bne.n	8007fe0 <HAL_RCC_OscConfig+0x98>
 8007fc6:	4b7f      	ldr	r3, [pc, #508]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a7e      	ldr	r2, [pc, #504]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8007fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	4b7c      	ldr	r3, [pc, #496]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a7b      	ldr	r2, [pc, #492]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8007fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	e00b      	b.n	8007ff8 <HAL_RCC_OscConfig+0xb0>
 8007fe0:	4b78      	ldr	r3, [pc, #480]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a77      	ldr	r2, [pc, #476]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8007fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	4b75      	ldr	r3, [pc, #468]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a74      	ldr	r2, [pc, #464]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8007ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d013      	beq.n	8008028 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008000:	f7fd f8fa 	bl	80051f8 <HAL_GetTick>
 8008004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008006:	e008      	b.n	800801a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008008:	f7fd f8f6 	bl	80051f8 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2b64      	cmp	r3, #100	; 0x64
 8008014:	d901      	bls.n	800801a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e2a6      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800801a:	4b6a      	ldr	r3, [pc, #424]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0f0      	beq.n	8008008 <HAL_RCC_OscConfig+0xc0>
 8008026:	e014      	b.n	8008052 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008028:	f7fd f8e6 	bl	80051f8 <HAL_GetTick>
 800802c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800802e:	e008      	b.n	8008042 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008030:	f7fd f8e2 	bl	80051f8 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	2b64      	cmp	r3, #100	; 0x64
 800803c:	d901      	bls.n	8008042 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e292      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008042:	4b60      	ldr	r3, [pc, #384]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1f0      	bne.n	8008030 <HAL_RCC_OscConfig+0xe8>
 800804e:	e000      	b.n	8008052 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	2b00      	cmp	r3, #0
 800805c:	d075      	beq.n	800814a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800805e:	4b59      	ldr	r3, [pc, #356]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f003 030c 	and.w	r3, r3, #12
 8008066:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008068:	4b56      	ldr	r3, [pc, #344]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f003 0303 	and.w	r3, r3, #3
 8008070:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	2b0c      	cmp	r3, #12
 8008076:	d102      	bne.n	800807e <HAL_RCC_OscConfig+0x136>
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2b02      	cmp	r3, #2
 800807c:	d002      	beq.n	8008084 <HAL_RCC_OscConfig+0x13c>
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	2b04      	cmp	r3, #4
 8008082:	d11f      	bne.n	80080c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008084:	4b4f      	ldr	r3, [pc, #316]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800808c:	2b00      	cmp	r3, #0
 800808e:	d005      	beq.n	800809c <HAL_RCC_OscConfig+0x154>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d101      	bne.n	800809c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e265      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800809c:	4b49      	ldr	r3, [pc, #292]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	061b      	lsls	r3, r3, #24
 80080aa:	4946      	ldr	r1, [pc, #280]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 80080ac:	4313      	orrs	r3, r2
 80080ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80080b0:	4b45      	ldr	r3, [pc, #276]	; (80081c8 <HAL_RCC_OscConfig+0x280>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fd f853 	bl	8005160 <HAL_InitTick>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d043      	beq.n	8008148 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e251      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d023      	beq.n	8008114 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080cc:	4b3d      	ldr	r3, [pc, #244]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a3c      	ldr	r2, [pc, #240]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 80080d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d8:	f7fd f88e 	bl	80051f8 <HAL_GetTick>
 80080dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080de:	e008      	b.n	80080f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080e0:	f7fd f88a 	bl	80051f8 <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d901      	bls.n	80080f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e23a      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080f2:	4b34      	ldr	r3, [pc, #208]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d0f0      	beq.n	80080e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080fe:	4b31      	ldr	r3, [pc, #196]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	061b      	lsls	r3, r3, #24
 800810c:	492d      	ldr	r1, [pc, #180]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 800810e:	4313      	orrs	r3, r2
 8008110:	604b      	str	r3, [r1, #4]
 8008112:	e01a      	b.n	800814a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008114:	4b2b      	ldr	r3, [pc, #172]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a2a      	ldr	r2, [pc, #168]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 800811a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800811e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008120:	f7fd f86a 	bl	80051f8 <HAL_GetTick>
 8008124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008126:	e008      	b.n	800813a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008128:	f7fd f866 	bl	80051f8 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b02      	cmp	r3, #2
 8008134:	d901      	bls.n	800813a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e216      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800813a:	4b22      	ldr	r3, [pc, #136]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1f0      	bne.n	8008128 <HAL_RCC_OscConfig+0x1e0>
 8008146:	e000      	b.n	800814a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008148:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0308 	and.w	r3, r3, #8
 8008152:	2b00      	cmp	r3, #0
 8008154:	d041      	beq.n	80081da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d01c      	beq.n	8008198 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800815e:	4b19      	ldr	r3, [pc, #100]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8008160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008164:	4a17      	ldr	r2, [pc, #92]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 8008166:	f043 0301 	orr.w	r3, r3, #1
 800816a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800816e:	f7fd f843 	bl	80051f8 <HAL_GetTick>
 8008172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008174:	e008      	b.n	8008188 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008176:	f7fd f83f 	bl	80051f8 <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	2b02      	cmp	r3, #2
 8008182:	d901      	bls.n	8008188 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e1ef      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008188:	4b0e      	ldr	r3, [pc, #56]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 800818a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d0ef      	beq.n	8008176 <HAL_RCC_OscConfig+0x22e>
 8008196:	e020      	b.n	80081da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008198:	4b0a      	ldr	r3, [pc, #40]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 800819a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800819e:	4a09      	ldr	r2, [pc, #36]	; (80081c4 <HAL_RCC_OscConfig+0x27c>)
 80081a0:	f023 0301 	bic.w	r3, r3, #1
 80081a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081a8:	f7fd f826 	bl	80051f8 <HAL_GetTick>
 80081ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80081ae:	e00d      	b.n	80081cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081b0:	f7fd f822 	bl	80051f8 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d906      	bls.n	80081cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e1d2      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
 80081c2:	bf00      	nop
 80081c4:	40021000 	.word	0x40021000
 80081c8:	200004ac 	.word	0x200004ac
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80081cc:	4b8c      	ldr	r3, [pc, #560]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 80081ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081d2:	f003 0302 	and.w	r3, r3, #2
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1ea      	bne.n	80081b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0304 	and.w	r3, r3, #4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 80a6 	beq.w	8008334 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081e8:	2300      	movs	r3, #0
 80081ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80081ec:	4b84      	ldr	r3, [pc, #528]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 80081ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <HAL_RCC_OscConfig+0x2b4>
 80081f8:	2301      	movs	r3, #1
 80081fa:	e000      	b.n	80081fe <HAL_RCC_OscConfig+0x2b6>
 80081fc:	2300      	movs	r3, #0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00d      	beq.n	800821e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008202:	4b7f      	ldr	r3, [pc, #508]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 8008204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008206:	4a7e      	ldr	r2, [pc, #504]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 8008208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800820c:	6593      	str	r3, [r2, #88]	; 0x58
 800820e:	4b7c      	ldr	r3, [pc, #496]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 8008210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800821a:	2301      	movs	r3, #1
 800821c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800821e:	4b79      	ldr	r3, [pc, #484]	; (8008404 <HAL_RCC_OscConfig+0x4bc>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008226:	2b00      	cmp	r3, #0
 8008228:	d118      	bne.n	800825c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800822a:	4b76      	ldr	r3, [pc, #472]	; (8008404 <HAL_RCC_OscConfig+0x4bc>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a75      	ldr	r2, [pc, #468]	; (8008404 <HAL_RCC_OscConfig+0x4bc>)
 8008230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008236:	f7fc ffdf 	bl	80051f8 <HAL_GetTick>
 800823a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800823c:	e008      	b.n	8008250 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800823e:	f7fc ffdb 	bl	80051f8 <HAL_GetTick>
 8008242:	4602      	mov	r2, r0
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d901      	bls.n	8008250 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e18b      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008250:	4b6c      	ldr	r3, [pc, #432]	; (8008404 <HAL_RCC_OscConfig+0x4bc>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008258:	2b00      	cmp	r3, #0
 800825a:	d0f0      	beq.n	800823e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d108      	bne.n	8008276 <HAL_RCC_OscConfig+0x32e>
 8008264:	4b66      	ldr	r3, [pc, #408]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 8008266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800826a:	4a65      	ldr	r2, [pc, #404]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 800826c:	f043 0301 	orr.w	r3, r3, #1
 8008270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008274:	e024      	b.n	80082c0 <HAL_RCC_OscConfig+0x378>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	2b05      	cmp	r3, #5
 800827c:	d110      	bne.n	80082a0 <HAL_RCC_OscConfig+0x358>
 800827e:	4b60      	ldr	r3, [pc, #384]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 8008280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008284:	4a5e      	ldr	r2, [pc, #376]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 8008286:	f043 0304 	orr.w	r3, r3, #4
 800828a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800828e:	4b5c      	ldr	r3, [pc, #368]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 8008290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008294:	4a5a      	ldr	r2, [pc, #360]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 8008296:	f043 0301 	orr.w	r3, r3, #1
 800829a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800829e:	e00f      	b.n	80082c0 <HAL_RCC_OscConfig+0x378>
 80082a0:	4b57      	ldr	r3, [pc, #348]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 80082a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082a6:	4a56      	ldr	r2, [pc, #344]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 80082a8:	f023 0301 	bic.w	r3, r3, #1
 80082ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80082b0:	4b53      	ldr	r3, [pc, #332]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 80082b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b6:	4a52      	ldr	r2, [pc, #328]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 80082b8:	f023 0304 	bic.w	r3, r3, #4
 80082bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d016      	beq.n	80082f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082c8:	f7fc ff96 	bl	80051f8 <HAL_GetTick>
 80082cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082ce:	e00a      	b.n	80082e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082d0:	f7fc ff92 	bl	80051f8 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	f241 3288 	movw	r2, #5000	; 0x1388
 80082de:	4293      	cmp	r3, r2
 80082e0:	d901      	bls.n	80082e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e140      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082e6:	4b46      	ldr	r3, [pc, #280]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 80082e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ec:	f003 0302 	and.w	r3, r3, #2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d0ed      	beq.n	80082d0 <HAL_RCC_OscConfig+0x388>
 80082f4:	e015      	b.n	8008322 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082f6:	f7fc ff7f 	bl	80051f8 <HAL_GetTick>
 80082fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80082fc:	e00a      	b.n	8008314 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082fe:	f7fc ff7b 	bl	80051f8 <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	f241 3288 	movw	r2, #5000	; 0x1388
 800830c:	4293      	cmp	r3, r2
 800830e:	d901      	bls.n	8008314 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e129      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008314:	4b3a      	ldr	r3, [pc, #232]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 8008316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1ed      	bne.n	80082fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008322:	7ffb      	ldrb	r3, [r7, #31]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d105      	bne.n	8008334 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008328:	4b35      	ldr	r3, [pc, #212]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 800832a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800832c:	4a34      	ldr	r2, [pc, #208]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 800832e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008332:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0320 	and.w	r3, r3, #32
 800833c:	2b00      	cmp	r3, #0
 800833e:	d03c      	beq.n	80083ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d01c      	beq.n	8008382 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008348:	4b2d      	ldr	r3, [pc, #180]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 800834a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800834e:	4a2c      	ldr	r2, [pc, #176]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 8008350:	f043 0301 	orr.w	r3, r3, #1
 8008354:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008358:	f7fc ff4e 	bl	80051f8 <HAL_GetTick>
 800835c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800835e:	e008      	b.n	8008372 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008360:	f7fc ff4a 	bl	80051f8 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	2b02      	cmp	r3, #2
 800836c:	d901      	bls.n	8008372 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e0fa      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008372:	4b23      	ldr	r3, [pc, #140]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 8008374:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008378:	f003 0302 	and.w	r3, r3, #2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d0ef      	beq.n	8008360 <HAL_RCC_OscConfig+0x418>
 8008380:	e01b      	b.n	80083ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008382:	4b1f      	ldr	r3, [pc, #124]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 8008384:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008388:	4a1d      	ldr	r2, [pc, #116]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 800838a:	f023 0301 	bic.w	r3, r3, #1
 800838e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008392:	f7fc ff31 	bl	80051f8 <HAL_GetTick>
 8008396:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008398:	e008      	b.n	80083ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800839a:	f7fc ff2d 	bl	80051f8 <HAL_GetTick>
 800839e:	4602      	mov	r2, r0
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d901      	bls.n	80083ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e0dd      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80083ac:	4b14      	ldr	r3, [pc, #80]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 80083ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1ef      	bne.n	800839a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f000 80d1 	beq.w	8008566 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083c4:	4b0e      	ldr	r3, [pc, #56]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f003 030c 	and.w	r3, r3, #12
 80083cc:	2b0c      	cmp	r3, #12
 80083ce:	f000 808b 	beq.w	80084e8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d15e      	bne.n	8008498 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083da:	4b09      	ldr	r3, [pc, #36]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a08      	ldr	r2, [pc, #32]	; (8008400 <HAL_RCC_OscConfig+0x4b8>)
 80083e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e6:	f7fc ff07 	bl	80051f8 <HAL_GetTick>
 80083ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083ec:	e00c      	b.n	8008408 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083ee:	f7fc ff03 	bl	80051f8 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d905      	bls.n	8008408 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e0b3      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
 8008400:	40021000 	.word	0x40021000
 8008404:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008408:	4b59      	ldr	r3, [pc, #356]	; (8008570 <HAL_RCC_OscConfig+0x628>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1ec      	bne.n	80083ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008414:	4b56      	ldr	r3, [pc, #344]	; (8008570 <HAL_RCC_OscConfig+0x628>)
 8008416:	68da      	ldr	r2, [r3, #12]
 8008418:	4b56      	ldr	r3, [pc, #344]	; (8008574 <HAL_RCC_OscConfig+0x62c>)
 800841a:	4013      	ands	r3, r2
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	6a11      	ldr	r1, [r2, #32]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008424:	3a01      	subs	r2, #1
 8008426:	0112      	lsls	r2, r2, #4
 8008428:	4311      	orrs	r1, r2
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800842e:	0212      	lsls	r2, r2, #8
 8008430:	4311      	orrs	r1, r2
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008436:	0852      	lsrs	r2, r2, #1
 8008438:	3a01      	subs	r2, #1
 800843a:	0552      	lsls	r2, r2, #21
 800843c:	4311      	orrs	r1, r2
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008442:	0852      	lsrs	r2, r2, #1
 8008444:	3a01      	subs	r2, #1
 8008446:	0652      	lsls	r2, r2, #25
 8008448:	4311      	orrs	r1, r2
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800844e:	06d2      	lsls	r2, r2, #27
 8008450:	430a      	orrs	r2, r1
 8008452:	4947      	ldr	r1, [pc, #284]	; (8008570 <HAL_RCC_OscConfig+0x628>)
 8008454:	4313      	orrs	r3, r2
 8008456:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008458:	4b45      	ldr	r3, [pc, #276]	; (8008570 <HAL_RCC_OscConfig+0x628>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a44      	ldr	r2, [pc, #272]	; (8008570 <HAL_RCC_OscConfig+0x628>)
 800845e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008462:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008464:	4b42      	ldr	r3, [pc, #264]	; (8008570 <HAL_RCC_OscConfig+0x628>)
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	4a41      	ldr	r2, [pc, #260]	; (8008570 <HAL_RCC_OscConfig+0x628>)
 800846a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800846e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008470:	f7fc fec2 	bl	80051f8 <HAL_GetTick>
 8008474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008476:	e008      	b.n	800848a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008478:	f7fc febe 	bl	80051f8 <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	2b02      	cmp	r3, #2
 8008484:	d901      	bls.n	800848a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e06e      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800848a:	4b39      	ldr	r3, [pc, #228]	; (8008570 <HAL_RCC_OscConfig+0x628>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d0f0      	beq.n	8008478 <HAL_RCC_OscConfig+0x530>
 8008496:	e066      	b.n	8008566 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008498:	4b35      	ldr	r3, [pc, #212]	; (8008570 <HAL_RCC_OscConfig+0x628>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a34      	ldr	r2, [pc, #208]	; (8008570 <HAL_RCC_OscConfig+0x628>)
 800849e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084a2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80084a4:	4b32      	ldr	r3, [pc, #200]	; (8008570 <HAL_RCC_OscConfig+0x628>)
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	4a31      	ldr	r2, [pc, #196]	; (8008570 <HAL_RCC_OscConfig+0x628>)
 80084aa:	f023 0303 	bic.w	r3, r3, #3
 80084ae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80084b0:	4b2f      	ldr	r3, [pc, #188]	; (8008570 <HAL_RCC_OscConfig+0x628>)
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	4a2e      	ldr	r2, [pc, #184]	; (8008570 <HAL_RCC_OscConfig+0x628>)
 80084b6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80084ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c0:	f7fc fe9a 	bl	80051f8 <HAL_GetTick>
 80084c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084c6:	e008      	b.n	80084da <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084c8:	f7fc fe96 	bl	80051f8 <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d901      	bls.n	80084da <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e046      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084da:	4b25      	ldr	r3, [pc, #148]	; (8008570 <HAL_RCC_OscConfig+0x628>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1f0      	bne.n	80084c8 <HAL_RCC_OscConfig+0x580>
 80084e6:	e03e      	b.n	8008566 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d101      	bne.n	80084f4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e039      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80084f4:	4b1e      	ldr	r3, [pc, #120]	; (8008570 <HAL_RCC_OscConfig+0x628>)
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f003 0203 	and.w	r2, r3, #3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a1b      	ldr	r3, [r3, #32]
 8008504:	429a      	cmp	r2, r3
 8008506:	d12c      	bne.n	8008562 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	3b01      	subs	r3, #1
 8008514:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008516:	429a      	cmp	r2, r3
 8008518:	d123      	bne.n	8008562 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008524:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008526:	429a      	cmp	r2, r3
 8008528:	d11b      	bne.n	8008562 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008536:	429a      	cmp	r2, r3
 8008538:	d113      	bne.n	8008562 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008544:	085b      	lsrs	r3, r3, #1
 8008546:	3b01      	subs	r3, #1
 8008548:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800854a:	429a      	cmp	r2, r3
 800854c:	d109      	bne.n	8008562 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008558:	085b      	lsrs	r3, r3, #1
 800855a:	3b01      	subs	r3, #1
 800855c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800855e:	429a      	cmp	r2, r3
 8008560:	d001      	beq.n	8008566 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e000      	b.n	8008568 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3720      	adds	r7, #32
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	40021000 	.word	0x40021000
 8008574:	019f800c 	.word	0x019f800c

08008578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008582:	2300      	movs	r3, #0
 8008584:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e11e      	b.n	80087ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008590:	4b91      	ldr	r3, [pc, #580]	; (80087d8 <HAL_RCC_ClockConfig+0x260>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 030f 	and.w	r3, r3, #15
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	d910      	bls.n	80085c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800859e:	4b8e      	ldr	r3, [pc, #568]	; (80087d8 <HAL_RCC_ClockConfig+0x260>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f023 020f 	bic.w	r2, r3, #15
 80085a6:	498c      	ldr	r1, [pc, #560]	; (80087d8 <HAL_RCC_ClockConfig+0x260>)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085ae:	4b8a      	ldr	r3, [pc, #552]	; (80087d8 <HAL_RCC_ClockConfig+0x260>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 030f 	and.w	r3, r3, #15
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d001      	beq.n	80085c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e106      	b.n	80087ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d073      	beq.n	80086b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	2b03      	cmp	r3, #3
 80085d2:	d129      	bne.n	8008628 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80085d4:	4b81      	ldr	r3, [pc, #516]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e0f4      	b.n	80087ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80085e4:	f000 f966 	bl	80088b4 <RCC_GetSysClockFreqFromPLLSource>
 80085e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	4a7c      	ldr	r2, [pc, #496]	; (80087e0 <HAL_RCC_ClockConfig+0x268>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d93f      	bls.n	8008672 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80085f2:	4b7a      	ldr	r3, [pc, #488]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d009      	beq.n	8008612 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008606:	2b00      	cmp	r3, #0
 8008608:	d033      	beq.n	8008672 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800860e:	2b00      	cmp	r3, #0
 8008610:	d12f      	bne.n	8008672 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008612:	4b72      	ldr	r3, [pc, #456]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800861a:	4a70      	ldr	r2, [pc, #448]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 800861c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008620:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008622:	2380      	movs	r3, #128	; 0x80
 8008624:	617b      	str	r3, [r7, #20]
 8008626:	e024      	b.n	8008672 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	2b02      	cmp	r3, #2
 800862e:	d107      	bne.n	8008640 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008630:	4b6a      	ldr	r3, [pc, #424]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d109      	bne.n	8008650 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e0c6      	b.n	80087ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008640:	4b66      	ldr	r3, [pc, #408]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008648:	2b00      	cmp	r3, #0
 800864a:	d101      	bne.n	8008650 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e0be      	b.n	80087ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008650:	f000 f8ce 	bl	80087f0 <HAL_RCC_GetSysClockFreq>
 8008654:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	4a61      	ldr	r2, [pc, #388]	; (80087e0 <HAL_RCC_ClockConfig+0x268>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d909      	bls.n	8008672 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800865e:	4b5f      	ldr	r3, [pc, #380]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008666:	4a5d      	ldr	r2, [pc, #372]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 8008668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800866c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800866e:	2380      	movs	r3, #128	; 0x80
 8008670:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008672:	4b5a      	ldr	r3, [pc, #360]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f023 0203 	bic.w	r2, r3, #3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	4957      	ldr	r1, [pc, #348]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 8008680:	4313      	orrs	r3, r2
 8008682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008684:	f7fc fdb8 	bl	80051f8 <HAL_GetTick>
 8008688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800868a:	e00a      	b.n	80086a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800868c:	f7fc fdb4 	bl	80051f8 <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	f241 3288 	movw	r2, #5000	; 0x1388
 800869a:	4293      	cmp	r3, r2
 800869c:	d901      	bls.n	80086a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e095      	b.n	80087ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086a2:	4b4e      	ldr	r3, [pc, #312]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f003 020c 	and.w	r2, r3, #12
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d1eb      	bne.n	800868c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0302 	and.w	r3, r3, #2
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d023      	beq.n	8008708 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0304 	and.w	r3, r3, #4
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d005      	beq.n	80086d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80086cc:	4b43      	ldr	r3, [pc, #268]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	4a42      	ldr	r2, [pc, #264]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 80086d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80086d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0308 	and.w	r3, r3, #8
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d007      	beq.n	80086f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80086e4:	4b3d      	ldr	r3, [pc, #244]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80086ec:	4a3b      	ldr	r2, [pc, #236]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 80086ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80086f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086f4:	4b39      	ldr	r3, [pc, #228]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	4936      	ldr	r1, [pc, #216]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 8008702:	4313      	orrs	r3, r2
 8008704:	608b      	str	r3, [r1, #8]
 8008706:	e008      	b.n	800871a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	2b80      	cmp	r3, #128	; 0x80
 800870c:	d105      	bne.n	800871a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800870e:	4b33      	ldr	r3, [pc, #204]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	4a32      	ldr	r2, [pc, #200]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 8008714:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008718:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800871a:	4b2f      	ldr	r3, [pc, #188]	; (80087d8 <HAL_RCC_ClockConfig+0x260>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 030f 	and.w	r3, r3, #15
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	429a      	cmp	r2, r3
 8008726:	d21d      	bcs.n	8008764 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008728:	4b2b      	ldr	r3, [pc, #172]	; (80087d8 <HAL_RCC_ClockConfig+0x260>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f023 020f 	bic.w	r2, r3, #15
 8008730:	4929      	ldr	r1, [pc, #164]	; (80087d8 <HAL_RCC_ClockConfig+0x260>)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	4313      	orrs	r3, r2
 8008736:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008738:	f7fc fd5e 	bl	80051f8 <HAL_GetTick>
 800873c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800873e:	e00a      	b.n	8008756 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008740:	f7fc fd5a 	bl	80051f8 <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	f241 3288 	movw	r2, #5000	; 0x1388
 800874e:	4293      	cmp	r3, r2
 8008750:	d901      	bls.n	8008756 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e03b      	b.n	80087ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008756:	4b20      	ldr	r3, [pc, #128]	; (80087d8 <HAL_RCC_ClockConfig+0x260>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 030f 	and.w	r3, r3, #15
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	429a      	cmp	r2, r3
 8008762:	d1ed      	bne.n	8008740 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0304 	and.w	r3, r3, #4
 800876c:	2b00      	cmp	r3, #0
 800876e:	d008      	beq.n	8008782 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008770:	4b1a      	ldr	r3, [pc, #104]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	4917      	ldr	r1, [pc, #92]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 800877e:	4313      	orrs	r3, r2
 8008780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0308 	and.w	r3, r3, #8
 800878a:	2b00      	cmp	r3, #0
 800878c:	d009      	beq.n	80087a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800878e:	4b13      	ldr	r3, [pc, #76]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	490f      	ldr	r1, [pc, #60]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80087a2:	f000 f825 	bl	80087f0 <HAL_RCC_GetSysClockFreq>
 80087a6:	4602      	mov	r2, r0
 80087a8:	4b0c      	ldr	r3, [pc, #48]	; (80087dc <HAL_RCC_ClockConfig+0x264>)
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	091b      	lsrs	r3, r3, #4
 80087ae:	f003 030f 	and.w	r3, r3, #15
 80087b2:	490c      	ldr	r1, [pc, #48]	; (80087e4 <HAL_RCC_ClockConfig+0x26c>)
 80087b4:	5ccb      	ldrb	r3, [r1, r3]
 80087b6:	f003 031f 	and.w	r3, r3, #31
 80087ba:	fa22 f303 	lsr.w	r3, r2, r3
 80087be:	4a0a      	ldr	r2, [pc, #40]	; (80087e8 <HAL_RCC_ClockConfig+0x270>)
 80087c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80087c2:	4b0a      	ldr	r3, [pc, #40]	; (80087ec <HAL_RCC_ClockConfig+0x274>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fc fcca 	bl	8005160 <HAL_InitTick>
 80087cc:	4603      	mov	r3, r0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	40022000 	.word	0x40022000
 80087dc:	40021000 	.word	0x40021000
 80087e0:	04c4b400 	.word	0x04c4b400
 80087e4:	0800c410 	.word	0x0800c410
 80087e8:	200004a8 	.word	0x200004a8
 80087ec:	200004ac 	.word	0x200004ac

080087f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80087f6:	4b2c      	ldr	r3, [pc, #176]	; (80088a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f003 030c 	and.w	r3, r3, #12
 80087fe:	2b04      	cmp	r3, #4
 8008800:	d102      	bne.n	8008808 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008802:	4b2a      	ldr	r3, [pc, #168]	; (80088ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8008804:	613b      	str	r3, [r7, #16]
 8008806:	e047      	b.n	8008898 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008808:	4b27      	ldr	r3, [pc, #156]	; (80088a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	f003 030c 	and.w	r3, r3, #12
 8008810:	2b08      	cmp	r3, #8
 8008812:	d102      	bne.n	800881a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008814:	4b26      	ldr	r3, [pc, #152]	; (80088b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008816:	613b      	str	r3, [r7, #16]
 8008818:	e03e      	b.n	8008898 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800881a:	4b23      	ldr	r3, [pc, #140]	; (80088a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	f003 030c 	and.w	r3, r3, #12
 8008822:	2b0c      	cmp	r3, #12
 8008824:	d136      	bne.n	8008894 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008826:	4b20      	ldr	r3, [pc, #128]	; (80088a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	f003 0303 	and.w	r3, r3, #3
 800882e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008830:	4b1d      	ldr	r3, [pc, #116]	; (80088a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	091b      	lsrs	r3, r3, #4
 8008836:	f003 030f 	and.w	r3, r3, #15
 800883a:	3301      	adds	r3, #1
 800883c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b03      	cmp	r3, #3
 8008842:	d10c      	bne.n	800885e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008844:	4a1a      	ldr	r2, [pc, #104]	; (80088b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	fbb2 f3f3 	udiv	r3, r2, r3
 800884c:	4a16      	ldr	r2, [pc, #88]	; (80088a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800884e:	68d2      	ldr	r2, [r2, #12]
 8008850:	0a12      	lsrs	r2, r2, #8
 8008852:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008856:	fb02 f303 	mul.w	r3, r2, r3
 800885a:	617b      	str	r3, [r7, #20]
      break;
 800885c:	e00c      	b.n	8008878 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800885e:	4a13      	ldr	r2, [pc, #76]	; (80088ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	fbb2 f3f3 	udiv	r3, r2, r3
 8008866:	4a10      	ldr	r2, [pc, #64]	; (80088a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008868:	68d2      	ldr	r2, [r2, #12]
 800886a:	0a12      	lsrs	r2, r2, #8
 800886c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008870:	fb02 f303 	mul.w	r3, r2, r3
 8008874:	617b      	str	r3, [r7, #20]
      break;
 8008876:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008878:	4b0b      	ldr	r3, [pc, #44]	; (80088a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	0e5b      	lsrs	r3, r3, #25
 800887e:	f003 0303 	and.w	r3, r3, #3
 8008882:	3301      	adds	r3, #1
 8008884:	005b      	lsls	r3, r3, #1
 8008886:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008890:	613b      	str	r3, [r7, #16]
 8008892:	e001      	b.n	8008898 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008898:	693b      	ldr	r3, [r7, #16]
}
 800889a:	4618      	mov	r0, r3
 800889c:	371c      	adds	r7, #28
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	40021000 	.word	0x40021000
 80088ac:	00f42400 	.word	0x00f42400
 80088b0:	007a1200 	.word	0x007a1200

080088b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80088ba:	4b1e      	ldr	r3, [pc, #120]	; (8008934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	f003 0303 	and.w	r3, r3, #3
 80088c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80088c4:	4b1b      	ldr	r3, [pc, #108]	; (8008934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	091b      	lsrs	r3, r3, #4
 80088ca:	f003 030f 	and.w	r3, r3, #15
 80088ce:	3301      	adds	r3, #1
 80088d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	d10c      	bne.n	80088f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80088d8:	4a17      	ldr	r2, [pc, #92]	; (8008938 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e0:	4a14      	ldr	r2, [pc, #80]	; (8008934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088e2:	68d2      	ldr	r2, [r2, #12]
 80088e4:	0a12      	lsrs	r2, r2, #8
 80088e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80088ea:	fb02 f303 	mul.w	r3, r2, r3
 80088ee:	617b      	str	r3, [r7, #20]
    break;
 80088f0:	e00c      	b.n	800890c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80088f2:	4a12      	ldr	r2, [pc, #72]	; (800893c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088fa:	4a0e      	ldr	r2, [pc, #56]	; (8008934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088fc:	68d2      	ldr	r2, [r2, #12]
 80088fe:	0a12      	lsrs	r2, r2, #8
 8008900:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008904:	fb02 f303 	mul.w	r3, r2, r3
 8008908:	617b      	str	r3, [r7, #20]
    break;
 800890a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800890c:	4b09      	ldr	r3, [pc, #36]	; (8008934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	0e5b      	lsrs	r3, r3, #25
 8008912:	f003 0303 	and.w	r3, r3, #3
 8008916:	3301      	adds	r3, #1
 8008918:	005b      	lsls	r3, r3, #1
 800891a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	fbb2 f3f3 	udiv	r3, r2, r3
 8008924:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008926:	687b      	ldr	r3, [r7, #4]
}
 8008928:	4618      	mov	r0, r3
 800892a:	371c      	adds	r7, #28
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	40021000 	.word	0x40021000
 8008938:	007a1200 	.word	0x007a1200
 800893c:	00f42400 	.word	0x00f42400

08008940 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008948:	2300      	movs	r3, #0
 800894a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800894c:	2300      	movs	r3, #0
 800894e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 8098 	beq.w	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800895e:	2300      	movs	r3, #0
 8008960:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008962:	4b43      	ldr	r3, [pc, #268]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10d      	bne.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800896e:	4b40      	ldr	r3, [pc, #256]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008972:	4a3f      	ldr	r2, [pc, #252]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008978:	6593      	str	r3, [r2, #88]	; 0x58
 800897a:	4b3d      	ldr	r3, [pc, #244]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800897c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800897e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008982:	60bb      	str	r3, [r7, #8]
 8008984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008986:	2301      	movs	r3, #1
 8008988:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800898a:	4b3a      	ldr	r3, [pc, #232]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a39      	ldr	r2, [pc, #228]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008994:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008996:	f7fc fc2f 	bl	80051f8 <HAL_GetTick>
 800899a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800899c:	e009      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800899e:	f7fc fc2b 	bl	80051f8 <HAL_GetTick>
 80089a2:	4602      	mov	r2, r0
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d902      	bls.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	74fb      	strb	r3, [r7, #19]
        break;
 80089b0:	e005      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089b2:	4b30      	ldr	r3, [pc, #192]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0ef      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80089be:	7cfb      	ldrb	r3, [r7, #19]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d159      	bne.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80089c4:	4b2a      	ldr	r3, [pc, #168]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d01e      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d019      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80089e0:	4b23      	ldr	r3, [pc, #140]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089ec:	4b20      	ldr	r3, [pc, #128]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f2:	4a1f      	ldr	r2, [pc, #124]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089fc:	4b1c      	ldr	r3, [pc, #112]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a02:	4a1b      	ldr	r2, [pc, #108]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008a0c:	4a18      	ldr	r2, [pc, #96]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d016      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a1e:	f7fc fbeb 	bl	80051f8 <HAL_GetTick>
 8008a22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a24:	e00b      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a26:	f7fc fbe7 	bl	80051f8 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d902      	bls.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	74fb      	strb	r3, [r7, #19]
            break;
 8008a3c:	e006      	b.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a3e:	4b0c      	ldr	r3, [pc, #48]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a44:	f003 0302 	and.w	r3, r3, #2
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d0ec      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008a4c:	7cfb      	ldrb	r3, [r7, #19]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10b      	bne.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a52:	4b07      	ldr	r3, [pc, #28]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a60:	4903      	ldr	r1, [pc, #12]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008a68:	e008      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a6a:	7cfb      	ldrb	r3, [r7, #19]
 8008a6c:	74bb      	strb	r3, [r7, #18]
 8008a6e:	e005      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008a70:	40021000 	.word	0x40021000
 8008a74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a78:	7cfb      	ldrb	r3, [r7, #19]
 8008a7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a7c:	7c7b      	ldrb	r3, [r7, #17]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d105      	bne.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a82:	4ba7      	ldr	r3, [pc, #668]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a86:	4aa6      	ldr	r2, [pc, #664]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a8c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00a      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a9a:	4ba1      	ldr	r3, [pc, #644]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa0:	f023 0203 	bic.w	r2, r3, #3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	499d      	ldr	r1, [pc, #628]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0302 	and.w	r3, r3, #2
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00a      	beq.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008abc:	4b98      	ldr	r3, [pc, #608]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ac2:	f023 020c 	bic.w	r2, r3, #12
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	4995      	ldr	r1, [pc, #596]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008acc:	4313      	orrs	r3, r2
 8008ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0304 	and.w	r3, r3, #4
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00a      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008ade:	4b90      	ldr	r3, [pc, #576]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ae4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	498c      	ldr	r1, [pc, #560]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0308 	and.w	r3, r3, #8
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00a      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008b00:	4b87      	ldr	r3, [pc, #540]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	4984      	ldr	r1, [pc, #528]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0310 	and.w	r3, r3, #16
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00a      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008b22:	4b7f      	ldr	r3, [pc, #508]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	497b      	ldr	r1, [pc, #492]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00a      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b44:	4b76      	ldr	r3, [pc, #472]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	4973      	ldr	r1, [pc, #460]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b54:	4313      	orrs	r3, r2
 8008b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b66:	4b6e      	ldr	r3, [pc, #440]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	69db      	ldr	r3, [r3, #28]
 8008b74:	496a      	ldr	r1, [pc, #424]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b76:	4313      	orrs	r3, r2
 8008b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00a      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008b88:	4b65      	ldr	r3, [pc, #404]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	4962      	ldr	r1, [pc, #392]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008baa:	4b5d      	ldr	r3, [pc, #372]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	4959      	ldr	r1, [pc, #356]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00a      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008bcc:	4b54      	ldr	r3, [pc, #336]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bd2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bda:	4951      	ldr	r1, [pc, #324]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d015      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008bee:	4b4c      	ldr	r3, [pc, #304]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfc:	4948      	ldr	r1, [pc, #288]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c0c:	d105      	bne.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c0e:	4b44      	ldr	r3, [pc, #272]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	4a43      	ldr	r2, [pc, #268]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c18:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d015      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008c26:	4b3e      	ldr	r3, [pc, #248]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c34:	493a      	ldr	r1, [pc, #232]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c36:	4313      	orrs	r3, r2
 8008c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c44:	d105      	bne.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c46:	4b36      	ldr	r3, [pc, #216]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	4a35      	ldr	r2, [pc, #212]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c50:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d015      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c5e:	4b30      	ldr	r3, [pc, #192]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c64:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c6c:	492c      	ldr	r1, [pc, #176]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c7c:	d105      	bne.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c7e:	4b28      	ldr	r3, [pc, #160]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	4a27      	ldr	r2, [pc, #156]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c88:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d015      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c96:	4b22      	ldr	r3, [pc, #136]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca4:	491e      	ldr	r1, [pc, #120]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cb4:	d105      	bne.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008cb6:	4b1a      	ldr	r3, [pc, #104]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	4a19      	ldr	r2, [pc, #100]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cc0:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d015      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008cce:	4b14      	ldr	r3, [pc, #80]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cdc:	4910      	ldr	r1, [pc, #64]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cec:	d105      	bne.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008cee:	4b0c      	ldr	r3, [pc, #48]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	4a0b      	ldr	r2, [pc, #44]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cf8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d018      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008d06:	4b06      	ldr	r3, [pc, #24]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d14:	4902      	ldr	r1, [pc, #8]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	e001      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008d20:	40021000 	.word	0x40021000
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d2a:	d105      	bne.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008d2c:	4b21      	ldr	r3, [pc, #132]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	4a20      	ldr	r2, [pc, #128]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d36:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d015      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008d44:	4b1b      	ldr	r3, [pc, #108]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d4a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d52:	4918      	ldr	r1, [pc, #96]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d54:	4313      	orrs	r3, r2
 8008d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d62:	d105      	bne.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008d64:	4b13      	ldr	r3, [pc, #76]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	4a12      	ldr	r2, [pc, #72]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d6e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d015      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008d7c:	4b0d      	ldr	r3, [pc, #52]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d8a:	490a      	ldr	r1, [pc, #40]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d9a:	d105      	bne.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d9c:	4b05      	ldr	r3, [pc, #20]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	4a04      	ldr	r2, [pc, #16]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008da6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008da8:	7cbb      	ldrb	r3, [r7, #18]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	40021000 	.word	0x40021000

08008db8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e09d      	b.n	8008f06 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d108      	bne.n	8008de4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dda:	d009      	beq.n	8008df0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	61da      	str	r2, [r3, #28]
 8008de2:	e005      	b.n	8008df0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d106      	bne.n	8008e10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7fc f862 	bl	8004ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2202      	movs	r2, #2
 8008e14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e30:	d902      	bls.n	8008e38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008e32:	2300      	movs	r3, #0
 8008e34:	60fb      	str	r3, [r7, #12]
 8008e36:	e002      	b.n	8008e3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008e46:	d007      	beq.n	8008e58 <HAL_SPI_Init+0xa0>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e50:	d002      	beq.n	8008e58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	691b      	ldr	r3, [r3, #16]
 8008e6e:	f003 0302 	and.w	r3, r3, #2
 8008e72:	431a      	orrs	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	431a      	orrs	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e86:	431a      	orrs	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	69db      	ldr	r3, [r3, #28]
 8008e8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e90:	431a      	orrs	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e9a:	ea42 0103 	orr.w	r1, r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	0c1b      	lsrs	r3, r3, #16
 8008eb4:	f003 0204 	and.w	r2, r3, #4
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebc:	f003 0310 	and.w	r3, r3, #16
 8008ec0:	431a      	orrs	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec6:	f003 0308 	and.w	r3, r3, #8
 8008eca:	431a      	orrs	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008ed4:	ea42 0103 	orr.w	r1, r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	430a      	orrs	r2, r1
 8008ee4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	69da      	ldr	r2, [r3, #28]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ef4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b08a      	sub	sp, #40	; 0x28
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	607a      	str	r2, [r7, #4]
 8008f1a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d101      	bne.n	8008f34 <HAL_SPI_TransmitReceive+0x26>
 8008f30:	2302      	movs	r3, #2
 8008f32:	e1fb      	b.n	800932c <HAL_SPI_TransmitReceive+0x41e>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f3c:	f7fc f95c 	bl	80051f8 <HAL_GetTick>
 8008f40:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f48:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008f50:	887b      	ldrh	r3, [r7, #2]
 8008f52:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008f54:	887b      	ldrh	r3, [r7, #2]
 8008f56:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008f58:	7efb      	ldrb	r3, [r7, #27]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d00e      	beq.n	8008f7c <HAL_SPI_TransmitReceive+0x6e>
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f64:	d106      	bne.n	8008f74 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d102      	bne.n	8008f74 <HAL_SPI_TransmitReceive+0x66>
 8008f6e:	7efb      	ldrb	r3, [r7, #27]
 8008f70:	2b04      	cmp	r3, #4
 8008f72:	d003      	beq.n	8008f7c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008f74:	2302      	movs	r3, #2
 8008f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008f7a:	e1cd      	b.n	8009318 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d005      	beq.n	8008f8e <HAL_SPI_TransmitReceive+0x80>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <HAL_SPI_TransmitReceive+0x80>
 8008f88:	887b      	ldrh	r3, [r7, #2]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d103      	bne.n	8008f96 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008f94:	e1c0      	b.n	8009318 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d003      	beq.n	8008faa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2205      	movs	r2, #5
 8008fa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2200      	movs	r2, #0
 8008fae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	887a      	ldrh	r2, [r7, #2]
 8008fba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	887a      	ldrh	r2, [r7, #2]
 8008fc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	887a      	ldrh	r2, [r7, #2]
 8008fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	887a      	ldrh	r2, [r7, #2]
 8008fd6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fec:	d802      	bhi.n	8008ff4 <HAL_SPI_TransmitReceive+0xe6>
 8008fee:	8a3b      	ldrh	r3, [r7, #16]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d908      	bls.n	8009006 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	685a      	ldr	r2, [r3, #4]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009002:	605a      	str	r2, [r3, #4]
 8009004:	e007      	b.n	8009016 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009014:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009020:	2b40      	cmp	r3, #64	; 0x40
 8009022:	d007      	beq.n	8009034 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009032:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800903c:	d97c      	bls.n	8009138 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d002      	beq.n	800904c <HAL_SPI_TransmitReceive+0x13e>
 8009046:	8a7b      	ldrh	r3, [r7, #18]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d169      	bne.n	8009120 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009050:	881a      	ldrh	r2, [r3, #0]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905c:	1c9a      	adds	r2, r3, #2
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009066:	b29b      	uxth	r3, r3
 8009068:	3b01      	subs	r3, #1
 800906a:	b29a      	uxth	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009070:	e056      	b.n	8009120 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	f003 0302 	and.w	r3, r3, #2
 800907c:	2b02      	cmp	r3, #2
 800907e:	d11b      	bne.n	80090b8 <HAL_SPI_TransmitReceive+0x1aa>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009084:	b29b      	uxth	r3, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d016      	beq.n	80090b8 <HAL_SPI_TransmitReceive+0x1aa>
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	2b01      	cmp	r3, #1
 800908e:	d113      	bne.n	80090b8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009094:	881a      	ldrh	r2, [r3, #0]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a0:	1c9a      	adds	r2, r3, #2
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	3b01      	subs	r3, #1
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090b4:	2300      	movs	r3, #0
 80090b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d11c      	bne.n	8009100 <HAL_SPI_TransmitReceive+0x1f2>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d016      	beq.n	8009100 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68da      	ldr	r2, [r3, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090dc:	b292      	uxth	r2, r2
 80090de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e4:	1c9a      	adds	r2, r3, #2
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	3b01      	subs	r3, #1
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80090fc:	2301      	movs	r3, #1
 80090fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009100:	f7fc f87a 	bl	80051f8 <HAL_GetTick>
 8009104:	4602      	mov	r2, r0
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800910c:	429a      	cmp	r2, r3
 800910e:	d807      	bhi.n	8009120 <HAL_SPI_TransmitReceive+0x212>
 8009110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009116:	d003      	beq.n	8009120 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800911e:	e0fb      	b.n	8009318 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009124:	b29b      	uxth	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1a3      	bne.n	8009072 <HAL_SPI_TransmitReceive+0x164>
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009130:	b29b      	uxth	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	d19d      	bne.n	8009072 <HAL_SPI_TransmitReceive+0x164>
 8009136:	e0df      	b.n	80092f8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d003      	beq.n	8009148 <HAL_SPI_TransmitReceive+0x23a>
 8009140:	8a7b      	ldrh	r3, [r7, #18]
 8009142:	2b01      	cmp	r3, #1
 8009144:	f040 80cb 	bne.w	80092de <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800914c:	b29b      	uxth	r3, r3
 800914e:	2b01      	cmp	r3, #1
 8009150:	d912      	bls.n	8009178 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009156:	881a      	ldrh	r2, [r3, #0]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009162:	1c9a      	adds	r2, r3, #2
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800916c:	b29b      	uxth	r3, r3
 800916e:	3b02      	subs	r3, #2
 8009170:	b29a      	uxth	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009176:	e0b2      	b.n	80092de <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	330c      	adds	r3, #12
 8009182:	7812      	ldrb	r2, [r2, #0]
 8009184:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918a:	1c5a      	adds	r2, r3, #1
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009194:	b29b      	uxth	r3, r3
 8009196:	3b01      	subs	r3, #1
 8009198:	b29a      	uxth	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800919e:	e09e      	b.n	80092de <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f003 0302 	and.w	r3, r3, #2
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d134      	bne.n	8009218 <HAL_SPI_TransmitReceive+0x30a>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d02f      	beq.n	8009218 <HAL_SPI_TransmitReceive+0x30a>
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d12c      	bne.n	8009218 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d912      	bls.n	80091ee <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091cc:	881a      	ldrh	r2, [r3, #0]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d8:	1c9a      	adds	r2, r3, #2
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	3b02      	subs	r3, #2
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80091ec:	e012      	b.n	8009214 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	330c      	adds	r3, #12
 80091f8:	7812      	ldrb	r2, [r2, #0]
 80091fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009200:	1c5a      	adds	r2, r3, #1
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800920a:	b29b      	uxth	r3, r3
 800920c:	3b01      	subs	r3, #1
 800920e:	b29a      	uxth	r2, r3
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009214:	2300      	movs	r3, #0
 8009216:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	2b01      	cmp	r3, #1
 8009224:	d148      	bne.n	80092b8 <HAL_SPI_TransmitReceive+0x3aa>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800922c:	b29b      	uxth	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d042      	beq.n	80092b8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009238:	b29b      	uxth	r3, r3
 800923a:	2b01      	cmp	r3, #1
 800923c:	d923      	bls.n	8009286 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68da      	ldr	r2, [r3, #12]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009248:	b292      	uxth	r2, r2
 800924a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009250:	1c9a      	adds	r2, r3, #2
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800925c:	b29b      	uxth	r3, r3
 800925e:	3b02      	subs	r3, #2
 8009260:	b29a      	uxth	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800926e:	b29b      	uxth	r3, r3
 8009270:	2b01      	cmp	r3, #1
 8009272:	d81f      	bhi.n	80092b4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	685a      	ldr	r2, [r3, #4]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009282:	605a      	str	r2, [r3, #4]
 8009284:	e016      	b.n	80092b4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f103 020c 	add.w	r2, r3, #12
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009292:	7812      	ldrb	r2, [r2, #0]
 8009294:	b2d2      	uxtb	r2, r2
 8009296:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929c:	1c5a      	adds	r2, r3, #1
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	3b01      	subs	r3, #1
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80092b4:	2301      	movs	r3, #1
 80092b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80092b8:	f7fb ff9e 	bl	80051f8 <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d803      	bhi.n	80092d0 <HAL_SPI_TransmitReceive+0x3c2>
 80092c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ce:	d102      	bne.n	80092d6 <HAL_SPI_TransmitReceive+0x3c8>
 80092d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d103      	bne.n	80092de <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80092dc:	e01c      	b.n	8009318 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f47f af5b 	bne.w	80091a0 <HAL_SPI_TransmitReceive+0x292>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f47f af54 	bne.w	80091a0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092f8:	69fa      	ldr	r2, [r7, #28]
 80092fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f000 f937 	bl	8009570 <SPI_EndRxTxTransaction>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d006      	beq.n	8009316 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2220      	movs	r2, #32
 8009312:	661a      	str	r2, [r3, #96]	; 0x60
 8009314:	e000      	b.n	8009318 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009316:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009328:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800932c:	4618      	mov	r0, r3
 800932e:	3728      	adds	r7, #40	; 0x28
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b088      	sub	sp, #32
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	603b      	str	r3, [r7, #0]
 8009340:	4613      	mov	r3, r2
 8009342:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009344:	f7fb ff58 	bl	80051f8 <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934c:	1a9b      	subs	r3, r3, r2
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	4413      	add	r3, r2
 8009352:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009354:	f7fb ff50 	bl	80051f8 <HAL_GetTick>
 8009358:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800935a:	4b39      	ldr	r3, [pc, #228]	; (8009440 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	015b      	lsls	r3, r3, #5
 8009360:	0d1b      	lsrs	r3, r3, #20
 8009362:	69fa      	ldr	r2, [r7, #28]
 8009364:	fb02 f303 	mul.w	r3, r2, r3
 8009368:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800936a:	e054      	b.n	8009416 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009372:	d050      	beq.n	8009416 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009374:	f7fb ff40 	bl	80051f8 <HAL_GetTick>
 8009378:	4602      	mov	r2, r0
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	69fa      	ldr	r2, [r7, #28]
 8009380:	429a      	cmp	r2, r3
 8009382:	d902      	bls.n	800938a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d13d      	bne.n	8009406 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009398:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093a2:	d111      	bne.n	80093c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093ac:	d004      	beq.n	80093b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093b6:	d107      	bne.n	80093c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093d0:	d10f      	bne.n	80093f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093e0:	601a      	str	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	e017      	b.n	8009436 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d101      	bne.n	8009410 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800940c:	2300      	movs	r3, #0
 800940e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	3b01      	subs	r3, #1
 8009414:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	4013      	ands	r3, r2
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	429a      	cmp	r2, r3
 8009424:	bf0c      	ite	eq
 8009426:	2301      	moveq	r3, #1
 8009428:	2300      	movne	r3, #0
 800942a:	b2db      	uxtb	r3, r3
 800942c:	461a      	mov	r2, r3
 800942e:	79fb      	ldrb	r3, [r7, #7]
 8009430:	429a      	cmp	r2, r3
 8009432:	d19b      	bne.n	800936c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3720      	adds	r7, #32
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	200004a8 	.word	0x200004a8

08009444 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b08a      	sub	sp, #40	; 0x28
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009456:	f7fb fecf 	bl	80051f8 <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945e:	1a9b      	subs	r3, r3, r2
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	4413      	add	r3, r2
 8009464:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009466:	f7fb fec7 	bl	80051f8 <HAL_GetTick>
 800946a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	330c      	adds	r3, #12
 8009472:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009474:	4b3d      	ldr	r3, [pc, #244]	; (800956c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	4613      	mov	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4413      	add	r3, r2
 800947e:	00da      	lsls	r2, r3, #3
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	0d1b      	lsrs	r3, r3, #20
 8009484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009486:	fb02 f303 	mul.w	r3, r2, r3
 800948a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800948c:	e060      	b.n	8009550 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009494:	d107      	bne.n	80094a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d104      	bne.n	80094a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80094a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ac:	d050      	beq.n	8009550 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094ae:	f7fb fea3 	bl	80051f8 <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	6a3b      	ldr	r3, [r7, #32]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d902      	bls.n	80094c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80094be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d13d      	bne.n	8009540 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	685a      	ldr	r2, [r3, #4]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80094d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094dc:	d111      	bne.n	8009502 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094e6:	d004      	beq.n	80094f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094f0:	d107      	bne.n	8009502 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009500:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800950a:	d10f      	bne.n	800952c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800952a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e010      	b.n	8009562 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	3b01      	subs	r3, #1
 800954e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	689a      	ldr	r2, [r3, #8]
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	4013      	ands	r3, r2
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	429a      	cmp	r2, r3
 800955e:	d196      	bne.n	800948e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3728      	adds	r7, #40	; 0x28
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	200004a8 	.word	0x200004a8

08009570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af02      	add	r7, sp, #8
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	2200      	movs	r2, #0
 8009584:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f7ff ff5b 	bl	8009444 <SPI_WaitFifoStateUntilTimeout>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d007      	beq.n	80095a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009598:	f043 0220 	orr.w	r2, r3, #32
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	e027      	b.n	80095f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2200      	movs	r2, #0
 80095ac:	2180      	movs	r1, #128	; 0x80
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f7ff fec0 	bl	8009334 <SPI_WaitFlagStateUntilTimeout>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d007      	beq.n	80095ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095be:	f043 0220 	orr.w	r2, r3, #32
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e014      	b.n	80095f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f7ff ff34 	bl	8009444 <SPI_WaitFifoStateUntilTimeout>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d007      	beq.n	80095f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095e6:	f043 0220 	orr.w	r2, r3, #32
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80095ee:	2303      	movs	r3, #3
 80095f0:	e000      	b.n	80095f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e049      	b.n	80096a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009614:	b2db      	uxtb	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	d106      	bne.n	8009628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f7fb fc98 	bl	8004f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2202      	movs	r2, #2
 800962c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	3304      	adds	r3, #4
 8009638:	4619      	mov	r1, r3
 800963a:	4610      	mov	r0, r2
 800963c:	f000 fd6c 	bl	800a118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d101      	bne.n	80096bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	e049      	b.n	8009750 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d106      	bne.n	80096d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f841 	bl	8009758 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2202      	movs	r2, #2
 80096da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	3304      	adds	r3, #4
 80096e6:	4619      	mov	r1, r3
 80096e8:	4610      	mov	r0, r2
 80096ea:	f000 fd15 	bl	800a118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2201      	movs	r2, #1
 800970a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2201      	movs	r2, #1
 800971a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2201      	movs	r2, #1
 800972a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2201      	movs	r2, #1
 800974a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d109      	bne.n	8009790 <HAL_TIM_PWM_Start+0x24>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b01      	cmp	r3, #1
 8009786:	bf14      	ite	ne
 8009788:	2301      	movne	r3, #1
 800978a:	2300      	moveq	r3, #0
 800978c:	b2db      	uxtb	r3, r3
 800978e:	e03c      	b.n	800980a <HAL_TIM_PWM_Start+0x9e>
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2b04      	cmp	r3, #4
 8009794:	d109      	bne.n	80097aa <HAL_TIM_PWM_Start+0x3e>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b01      	cmp	r3, #1
 80097a0:	bf14      	ite	ne
 80097a2:	2301      	movne	r3, #1
 80097a4:	2300      	moveq	r3, #0
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	e02f      	b.n	800980a <HAL_TIM_PWM_Start+0x9e>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2b08      	cmp	r3, #8
 80097ae:	d109      	bne.n	80097c4 <HAL_TIM_PWM_Start+0x58>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	bf14      	ite	ne
 80097bc:	2301      	movne	r3, #1
 80097be:	2300      	moveq	r3, #0
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	e022      	b.n	800980a <HAL_TIM_PWM_Start+0x9e>
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	2b0c      	cmp	r3, #12
 80097c8:	d109      	bne.n	80097de <HAL_TIM_PWM_Start+0x72>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	bf14      	ite	ne
 80097d6:	2301      	movne	r3, #1
 80097d8:	2300      	moveq	r3, #0
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	e015      	b.n	800980a <HAL_TIM_PWM_Start+0x9e>
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	2b10      	cmp	r3, #16
 80097e2:	d109      	bne.n	80097f8 <HAL_TIM_PWM_Start+0x8c>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	bf14      	ite	ne
 80097f0:	2301      	movne	r3, #1
 80097f2:	2300      	moveq	r3, #0
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	e008      	b.n	800980a <HAL_TIM_PWM_Start+0x9e>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	2b01      	cmp	r3, #1
 8009802:	bf14      	ite	ne
 8009804:	2301      	movne	r3, #1
 8009806:	2300      	moveq	r3, #0
 8009808:	b2db      	uxtb	r3, r3
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e0a1      	b.n	8009956 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d104      	bne.n	8009822 <HAL_TIM_PWM_Start+0xb6>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2202      	movs	r2, #2
 800981c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009820:	e023      	b.n	800986a <HAL_TIM_PWM_Start+0xfe>
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	2b04      	cmp	r3, #4
 8009826:	d104      	bne.n	8009832 <HAL_TIM_PWM_Start+0xc6>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2202      	movs	r2, #2
 800982c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009830:	e01b      	b.n	800986a <HAL_TIM_PWM_Start+0xfe>
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	2b08      	cmp	r3, #8
 8009836:	d104      	bne.n	8009842 <HAL_TIM_PWM_Start+0xd6>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2202      	movs	r2, #2
 800983c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009840:	e013      	b.n	800986a <HAL_TIM_PWM_Start+0xfe>
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	2b0c      	cmp	r3, #12
 8009846:	d104      	bne.n	8009852 <HAL_TIM_PWM_Start+0xe6>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2202      	movs	r2, #2
 800984c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009850:	e00b      	b.n	800986a <HAL_TIM_PWM_Start+0xfe>
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b10      	cmp	r3, #16
 8009856:	d104      	bne.n	8009862 <HAL_TIM_PWM_Start+0xf6>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2202      	movs	r2, #2
 800985c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009860:	e003      	b.n	800986a <HAL_TIM_PWM_Start+0xfe>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2202      	movs	r2, #2
 8009866:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2201      	movs	r2, #1
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	4618      	mov	r0, r3
 8009874:	f001 f8b4 	bl	800a9e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a38      	ldr	r2, [pc, #224]	; (8009960 <HAL_TIM_PWM_Start+0x1f4>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d018      	beq.n	80098b4 <HAL_TIM_PWM_Start+0x148>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a37      	ldr	r2, [pc, #220]	; (8009964 <HAL_TIM_PWM_Start+0x1f8>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d013      	beq.n	80098b4 <HAL_TIM_PWM_Start+0x148>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a35      	ldr	r2, [pc, #212]	; (8009968 <HAL_TIM_PWM_Start+0x1fc>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d00e      	beq.n	80098b4 <HAL_TIM_PWM_Start+0x148>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a34      	ldr	r2, [pc, #208]	; (800996c <HAL_TIM_PWM_Start+0x200>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d009      	beq.n	80098b4 <HAL_TIM_PWM_Start+0x148>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a32      	ldr	r2, [pc, #200]	; (8009970 <HAL_TIM_PWM_Start+0x204>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d004      	beq.n	80098b4 <HAL_TIM_PWM_Start+0x148>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a31      	ldr	r2, [pc, #196]	; (8009974 <HAL_TIM_PWM_Start+0x208>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d101      	bne.n	80098b8 <HAL_TIM_PWM_Start+0x14c>
 80098b4:	2301      	movs	r3, #1
 80098b6:	e000      	b.n	80098ba <HAL_TIM_PWM_Start+0x14e>
 80098b8:	2300      	movs	r3, #0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d007      	beq.n	80098ce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a23      	ldr	r2, [pc, #140]	; (8009960 <HAL_TIM_PWM_Start+0x1f4>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d01d      	beq.n	8009914 <HAL_TIM_PWM_Start+0x1a8>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098e0:	d018      	beq.n	8009914 <HAL_TIM_PWM_Start+0x1a8>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a24      	ldr	r2, [pc, #144]	; (8009978 <HAL_TIM_PWM_Start+0x20c>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d013      	beq.n	8009914 <HAL_TIM_PWM_Start+0x1a8>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a22      	ldr	r2, [pc, #136]	; (800997c <HAL_TIM_PWM_Start+0x210>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d00e      	beq.n	8009914 <HAL_TIM_PWM_Start+0x1a8>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a1a      	ldr	r2, [pc, #104]	; (8009964 <HAL_TIM_PWM_Start+0x1f8>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d009      	beq.n	8009914 <HAL_TIM_PWM_Start+0x1a8>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a18      	ldr	r2, [pc, #96]	; (8009968 <HAL_TIM_PWM_Start+0x1fc>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d004      	beq.n	8009914 <HAL_TIM_PWM_Start+0x1a8>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a19      	ldr	r2, [pc, #100]	; (8009974 <HAL_TIM_PWM_Start+0x208>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d115      	bne.n	8009940 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	689a      	ldr	r2, [r3, #8]
 800991a:	4b19      	ldr	r3, [pc, #100]	; (8009980 <HAL_TIM_PWM_Start+0x214>)
 800991c:	4013      	ands	r3, r2
 800991e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2b06      	cmp	r3, #6
 8009924:	d015      	beq.n	8009952 <HAL_TIM_PWM_Start+0x1e6>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800992c:	d011      	beq.n	8009952 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f042 0201 	orr.w	r2, r2, #1
 800993c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800993e:	e008      	b.n	8009952 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f042 0201 	orr.w	r2, r2, #1
 800994e:	601a      	str	r2, [r3, #0]
 8009950:	e000      	b.n	8009954 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009952:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	40012c00 	.word	0x40012c00
 8009964:	40013400 	.word	0x40013400
 8009968:	40014000 	.word	0x40014000
 800996c:	40014400 	.word	0x40014400
 8009970:	40014800 	.word	0x40014800
 8009974:	40015000 	.word	0x40015000
 8009978:	40000400 	.word	0x40000400
 800997c:	40000800 	.word	0x40000800
 8009980:	00010007 	.word	0x00010007

08009984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	f003 0302 	and.w	r3, r3, #2
 8009996:	2b02      	cmp	r3, #2
 8009998:	d122      	bne.n	80099e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	f003 0302 	and.w	r3, r3, #2
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d11b      	bne.n	80099e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f06f 0202 	mvn.w	r2, #2
 80099b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	f003 0303 	and.w	r3, r3, #3
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d003      	beq.n	80099ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fb88 	bl	800a0dc <HAL_TIM_IC_CaptureCallback>
 80099cc:	e005      	b.n	80099da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fb7a 	bl	800a0c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fb8b 	bl	800a0f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	f003 0304 	and.w	r3, r3, #4
 80099ea:	2b04      	cmp	r3, #4
 80099ec:	d122      	bne.n	8009a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	f003 0304 	and.w	r3, r3, #4
 80099f8:	2b04      	cmp	r3, #4
 80099fa:	d11b      	bne.n	8009a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f06f 0204 	mvn.w	r2, #4
 8009a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2202      	movs	r2, #2
 8009a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d003      	beq.n	8009a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fb5e 	bl	800a0dc <HAL_TIM_IC_CaptureCallback>
 8009a20:	e005      	b.n	8009a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fb50 	bl	800a0c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fb61 	bl	800a0f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	f003 0308 	and.w	r3, r3, #8
 8009a3e:	2b08      	cmp	r3, #8
 8009a40:	d122      	bne.n	8009a88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	f003 0308 	and.w	r3, r3, #8
 8009a4c:	2b08      	cmp	r3, #8
 8009a4e:	d11b      	bne.n	8009a88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f06f 0208 	mvn.w	r2, #8
 8009a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2204      	movs	r2, #4
 8009a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	f003 0303 	and.w	r3, r3, #3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d003      	beq.n	8009a76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fb34 	bl	800a0dc <HAL_TIM_IC_CaptureCallback>
 8009a74:	e005      	b.n	8009a82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fb26 	bl	800a0c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 fb37 	bl	800a0f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	f003 0310 	and.w	r3, r3, #16
 8009a92:	2b10      	cmp	r3, #16
 8009a94:	d122      	bne.n	8009adc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	f003 0310 	and.w	r3, r3, #16
 8009aa0:	2b10      	cmp	r3, #16
 8009aa2:	d11b      	bne.n	8009adc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f06f 0210 	mvn.w	r2, #16
 8009aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2208      	movs	r2, #8
 8009ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	69db      	ldr	r3, [r3, #28]
 8009aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d003      	beq.n	8009aca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 fb0a 	bl	800a0dc <HAL_TIM_IC_CaptureCallback>
 8009ac8:	e005      	b.n	8009ad6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fafc 	bl	800a0c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fb0d 	bl	800a0f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	f003 0301 	and.w	r3, r3, #1
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d10e      	bne.n	8009b08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	f003 0301 	and.w	r3, r3, #1
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d107      	bne.n	8009b08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f06f 0201 	mvn.w	r2, #1
 8009b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 fad6 	bl	800a0b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b12:	2b80      	cmp	r3, #128	; 0x80
 8009b14:	d10e      	bne.n	8009b34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b20:	2b80      	cmp	r3, #128	; 0x80
 8009b22:	d107      	bne.n	8009b34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f001 f8c6 	bl	800acc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b42:	d10e      	bne.n	8009b62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b4e:	2b80      	cmp	r3, #128	; 0x80
 8009b50:	d107      	bne.n	8009b62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f001 f8b9 	bl	800acd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b6c:	2b40      	cmp	r3, #64	; 0x40
 8009b6e:	d10e      	bne.n	8009b8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b7a:	2b40      	cmp	r3, #64	; 0x40
 8009b7c:	d107      	bne.n	8009b8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fabb 	bl	800a104 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	f003 0320 	and.w	r3, r3, #32
 8009b98:	2b20      	cmp	r3, #32
 8009b9a:	d10e      	bne.n	8009bba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	f003 0320 	and.w	r3, r3, #32
 8009ba6:	2b20      	cmp	r3, #32
 8009ba8:	d107      	bne.n	8009bba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f06f 0220 	mvn.w	r2, #32
 8009bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f001 f879 	bl	800acac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bc8:	d10f      	bne.n	8009bea <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bd8:	d107      	bne.n	8009bea <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f001 f87f 	bl	800ace8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bf8:	d10f      	bne.n	8009c1a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c08:	d107      	bne.n	8009c1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f001 f871 	bl	800acfc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c28:	d10f      	bne.n	8009c4a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c38:	d107      	bne.n	8009c4a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f001 f863 	bl	800ad10 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c58:	d10f      	bne.n	8009c7a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c68:	d107      	bne.n	8009c7a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f001 f855 	bl	800ad24 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c7a:	bf00      	nop
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
	...

08009c84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d101      	bne.n	8009ca2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	e0ff      	b.n	8009ea2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b14      	cmp	r3, #20
 8009cae:	f200 80f0 	bhi.w	8009e92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009cb2:	a201      	add	r2, pc, #4	; (adr r2, 8009cb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb8:	08009d0d 	.word	0x08009d0d
 8009cbc:	08009e93 	.word	0x08009e93
 8009cc0:	08009e93 	.word	0x08009e93
 8009cc4:	08009e93 	.word	0x08009e93
 8009cc8:	08009d4d 	.word	0x08009d4d
 8009ccc:	08009e93 	.word	0x08009e93
 8009cd0:	08009e93 	.word	0x08009e93
 8009cd4:	08009e93 	.word	0x08009e93
 8009cd8:	08009d8f 	.word	0x08009d8f
 8009cdc:	08009e93 	.word	0x08009e93
 8009ce0:	08009e93 	.word	0x08009e93
 8009ce4:	08009e93 	.word	0x08009e93
 8009ce8:	08009dcf 	.word	0x08009dcf
 8009cec:	08009e93 	.word	0x08009e93
 8009cf0:	08009e93 	.word	0x08009e93
 8009cf4:	08009e93 	.word	0x08009e93
 8009cf8:	08009e11 	.word	0x08009e11
 8009cfc:	08009e93 	.word	0x08009e93
 8009d00:	08009e93 	.word	0x08009e93
 8009d04:	08009e93 	.word	0x08009e93
 8009d08:	08009e51 	.word	0x08009e51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68b9      	ldr	r1, [r7, #8]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f000 fa9e 	bl	800a254 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	699a      	ldr	r2, [r3, #24]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f042 0208 	orr.w	r2, r2, #8
 8009d26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	699a      	ldr	r2, [r3, #24]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f022 0204 	bic.w	r2, r2, #4
 8009d36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	6999      	ldr	r1, [r3, #24]
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	691a      	ldr	r2, [r3, #16]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	430a      	orrs	r2, r1
 8009d48:	619a      	str	r2, [r3, #24]
      break;
 8009d4a:	e0a5      	b.n	8009e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68b9      	ldr	r1, [r7, #8]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f000 fb18 	bl	800a388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	699a      	ldr	r2, [r3, #24]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	699a      	ldr	r2, [r3, #24]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	6999      	ldr	r1, [r3, #24]
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	021a      	lsls	r2, r3, #8
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	430a      	orrs	r2, r1
 8009d8a:	619a      	str	r2, [r3, #24]
      break;
 8009d8c:	e084      	b.n	8009e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68b9      	ldr	r1, [r7, #8]
 8009d94:	4618      	mov	r0, r3
 8009d96:	f000 fb8b 	bl	800a4b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	69da      	ldr	r2, [r3, #28]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f042 0208 	orr.w	r2, r2, #8
 8009da8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	69da      	ldr	r2, [r3, #28]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f022 0204 	bic.w	r2, r2, #4
 8009db8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	69d9      	ldr	r1, [r3, #28]
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	691a      	ldr	r2, [r3, #16]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	430a      	orrs	r2, r1
 8009dca:	61da      	str	r2, [r3, #28]
      break;
 8009dcc:	e064      	b.n	8009e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68b9      	ldr	r1, [r7, #8]
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f000 fbfd 	bl	800a5d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	69da      	ldr	r2, [r3, #28]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	69da      	ldr	r2, [r3, #28]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	69d9      	ldr	r1, [r3, #28]
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	021a      	lsls	r2, r3, #8
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	61da      	str	r2, [r3, #28]
      break;
 8009e0e:	e043      	b.n	8009e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68b9      	ldr	r1, [r7, #8]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 fc70 	bl	800a6fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f042 0208 	orr.w	r2, r2, #8
 8009e2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f022 0204 	bic.w	r2, r2, #4
 8009e3a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	691a      	ldr	r2, [r3, #16]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009e4e:	e023      	b.n	8009e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68b9      	ldr	r1, [r7, #8]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 fcba 	bl	800a7d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e7a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	021a      	lsls	r2, r3, #8
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009e90:	e002      	b.n	8009e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	75fb      	strb	r3, [r7, #23]
      break;
 8009e96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3718      	adds	r7, #24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop

08009eac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d101      	bne.n	8009ec8 <HAL_TIM_ConfigClockSource+0x1c>
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	e0e6      	b.n	800a096 <HAL_TIM_ConfigClockSource+0x1ea>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009ee6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009eea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ef2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a67      	ldr	r2, [pc, #412]	; (800a0a0 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	f000 80b1 	beq.w	800a06a <HAL_TIM_ConfigClockSource+0x1be>
 8009f08:	4a65      	ldr	r2, [pc, #404]	; (800a0a0 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	f200 80b6 	bhi.w	800a07c <HAL_TIM_ConfigClockSource+0x1d0>
 8009f10:	4a64      	ldr	r2, [pc, #400]	; (800a0a4 <HAL_TIM_ConfigClockSource+0x1f8>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	f000 80a9 	beq.w	800a06a <HAL_TIM_ConfigClockSource+0x1be>
 8009f18:	4a62      	ldr	r2, [pc, #392]	; (800a0a4 <HAL_TIM_ConfigClockSource+0x1f8>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	f200 80ae 	bhi.w	800a07c <HAL_TIM_ConfigClockSource+0x1d0>
 8009f20:	4a61      	ldr	r2, [pc, #388]	; (800a0a8 <HAL_TIM_ConfigClockSource+0x1fc>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	f000 80a1 	beq.w	800a06a <HAL_TIM_ConfigClockSource+0x1be>
 8009f28:	4a5f      	ldr	r2, [pc, #380]	; (800a0a8 <HAL_TIM_ConfigClockSource+0x1fc>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	f200 80a6 	bhi.w	800a07c <HAL_TIM_ConfigClockSource+0x1d0>
 8009f30:	4a5e      	ldr	r2, [pc, #376]	; (800a0ac <HAL_TIM_ConfigClockSource+0x200>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	f000 8099 	beq.w	800a06a <HAL_TIM_ConfigClockSource+0x1be>
 8009f38:	4a5c      	ldr	r2, [pc, #368]	; (800a0ac <HAL_TIM_ConfigClockSource+0x200>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	f200 809e 	bhi.w	800a07c <HAL_TIM_ConfigClockSource+0x1d0>
 8009f40:	4a5b      	ldr	r2, [pc, #364]	; (800a0b0 <HAL_TIM_ConfigClockSource+0x204>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	f000 8091 	beq.w	800a06a <HAL_TIM_ConfigClockSource+0x1be>
 8009f48:	4a59      	ldr	r2, [pc, #356]	; (800a0b0 <HAL_TIM_ConfigClockSource+0x204>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	f200 8096 	bhi.w	800a07c <HAL_TIM_ConfigClockSource+0x1d0>
 8009f50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f54:	f000 8089 	beq.w	800a06a <HAL_TIM_ConfigClockSource+0x1be>
 8009f58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f5c:	f200 808e 	bhi.w	800a07c <HAL_TIM_ConfigClockSource+0x1d0>
 8009f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f64:	d03e      	beq.n	8009fe4 <HAL_TIM_ConfigClockSource+0x138>
 8009f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f6a:	f200 8087 	bhi.w	800a07c <HAL_TIM_ConfigClockSource+0x1d0>
 8009f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f72:	f000 8086 	beq.w	800a082 <HAL_TIM_ConfigClockSource+0x1d6>
 8009f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f7a:	d87f      	bhi.n	800a07c <HAL_TIM_ConfigClockSource+0x1d0>
 8009f7c:	2b70      	cmp	r3, #112	; 0x70
 8009f7e:	d01a      	beq.n	8009fb6 <HAL_TIM_ConfigClockSource+0x10a>
 8009f80:	2b70      	cmp	r3, #112	; 0x70
 8009f82:	d87b      	bhi.n	800a07c <HAL_TIM_ConfigClockSource+0x1d0>
 8009f84:	2b60      	cmp	r3, #96	; 0x60
 8009f86:	d050      	beq.n	800a02a <HAL_TIM_ConfigClockSource+0x17e>
 8009f88:	2b60      	cmp	r3, #96	; 0x60
 8009f8a:	d877      	bhi.n	800a07c <HAL_TIM_ConfigClockSource+0x1d0>
 8009f8c:	2b50      	cmp	r3, #80	; 0x50
 8009f8e:	d03c      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x15e>
 8009f90:	2b50      	cmp	r3, #80	; 0x50
 8009f92:	d873      	bhi.n	800a07c <HAL_TIM_ConfigClockSource+0x1d0>
 8009f94:	2b40      	cmp	r3, #64	; 0x40
 8009f96:	d058      	beq.n	800a04a <HAL_TIM_ConfigClockSource+0x19e>
 8009f98:	2b40      	cmp	r3, #64	; 0x40
 8009f9a:	d86f      	bhi.n	800a07c <HAL_TIM_ConfigClockSource+0x1d0>
 8009f9c:	2b30      	cmp	r3, #48	; 0x30
 8009f9e:	d064      	beq.n	800a06a <HAL_TIM_ConfigClockSource+0x1be>
 8009fa0:	2b30      	cmp	r3, #48	; 0x30
 8009fa2:	d86b      	bhi.n	800a07c <HAL_TIM_ConfigClockSource+0x1d0>
 8009fa4:	2b20      	cmp	r3, #32
 8009fa6:	d060      	beq.n	800a06a <HAL_TIM_ConfigClockSource+0x1be>
 8009fa8:	2b20      	cmp	r3, #32
 8009faa:	d867      	bhi.n	800a07c <HAL_TIM_ConfigClockSource+0x1d0>
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d05c      	beq.n	800a06a <HAL_TIM_ConfigClockSource+0x1be>
 8009fb0:	2b10      	cmp	r3, #16
 8009fb2:	d05a      	beq.n	800a06a <HAL_TIM_ConfigClockSource+0x1be>
 8009fb4:	e062      	b.n	800a07c <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6818      	ldr	r0, [r3, #0]
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	6899      	ldr	r1, [r3, #8]
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	685a      	ldr	r2, [r3, #4]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	f000 fceb 	bl	800a9a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009fd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	609a      	str	r2, [r3, #8]
      break;
 8009fe2:	e04f      	b.n	800a084 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6818      	ldr	r0, [r3, #0]
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	6899      	ldr	r1, [r3, #8]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	685a      	ldr	r2, [r3, #4]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	f000 fcd4 	bl	800a9a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	689a      	ldr	r2, [r3, #8]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a006:	609a      	str	r2, [r3, #8]
      break;
 800a008:	e03c      	b.n	800a084 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6818      	ldr	r0, [r3, #0]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	6859      	ldr	r1, [r3, #4]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	461a      	mov	r2, r3
 800a018:	f000 fc46 	bl	800a8a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2150      	movs	r1, #80	; 0x50
 800a022:	4618      	mov	r0, r3
 800a024:	f000 fc9f 	bl	800a966 <TIM_ITRx_SetConfig>
      break;
 800a028:	e02c      	b.n	800a084 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6818      	ldr	r0, [r3, #0]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	6859      	ldr	r1, [r3, #4]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	461a      	mov	r2, r3
 800a038:	f000 fc65 	bl	800a906 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2160      	movs	r1, #96	; 0x60
 800a042:	4618      	mov	r0, r3
 800a044:	f000 fc8f 	bl	800a966 <TIM_ITRx_SetConfig>
      break;
 800a048:	e01c      	b.n	800a084 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6818      	ldr	r0, [r3, #0]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	6859      	ldr	r1, [r3, #4]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	461a      	mov	r2, r3
 800a058:	f000 fc26 	bl	800a8a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2140      	movs	r1, #64	; 0x40
 800a062:	4618      	mov	r0, r3
 800a064:	f000 fc7f 	bl	800a966 <TIM_ITRx_SetConfig>
      break;
 800a068:	e00c      	b.n	800a084 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4619      	mov	r1, r3
 800a074:	4610      	mov	r0, r2
 800a076:	f000 fc76 	bl	800a966 <TIM_ITRx_SetConfig>
      break;
 800a07a:	e003      	b.n	800a084 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	73fb      	strb	r3, [r7, #15]
      break;
 800a080:	e000      	b.n	800a084 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800a082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a094:	7bfb      	ldrb	r3, [r7, #15]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	00100070 	.word	0x00100070
 800a0a4:	00100050 	.word	0x00100050
 800a0a8:	00100040 	.word	0x00100040
 800a0ac:	00100030 	.word	0x00100030
 800a0b0:	00100020 	.word	0x00100020

0800a0b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4a42      	ldr	r2, [pc, #264]	; (800a234 <TIM_Base_SetConfig+0x11c>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d013      	beq.n	800a158 <TIM_Base_SetConfig+0x40>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a136:	d00f      	beq.n	800a158 <TIM_Base_SetConfig+0x40>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4a3f      	ldr	r2, [pc, #252]	; (800a238 <TIM_Base_SetConfig+0x120>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d00b      	beq.n	800a158 <TIM_Base_SetConfig+0x40>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a3e      	ldr	r2, [pc, #248]	; (800a23c <TIM_Base_SetConfig+0x124>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d007      	beq.n	800a158 <TIM_Base_SetConfig+0x40>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4a3d      	ldr	r2, [pc, #244]	; (800a240 <TIM_Base_SetConfig+0x128>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d003      	beq.n	800a158 <TIM_Base_SetConfig+0x40>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a3c      	ldr	r2, [pc, #240]	; (800a244 <TIM_Base_SetConfig+0x12c>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d108      	bne.n	800a16a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a15e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	4313      	orrs	r3, r2
 800a168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a31      	ldr	r2, [pc, #196]	; (800a234 <TIM_Base_SetConfig+0x11c>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d01f      	beq.n	800a1b2 <TIM_Base_SetConfig+0x9a>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a178:	d01b      	beq.n	800a1b2 <TIM_Base_SetConfig+0x9a>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4a2e      	ldr	r2, [pc, #184]	; (800a238 <TIM_Base_SetConfig+0x120>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d017      	beq.n	800a1b2 <TIM_Base_SetConfig+0x9a>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a2d      	ldr	r2, [pc, #180]	; (800a23c <TIM_Base_SetConfig+0x124>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d013      	beq.n	800a1b2 <TIM_Base_SetConfig+0x9a>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a2c      	ldr	r2, [pc, #176]	; (800a240 <TIM_Base_SetConfig+0x128>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d00f      	beq.n	800a1b2 <TIM_Base_SetConfig+0x9a>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a2c      	ldr	r2, [pc, #176]	; (800a248 <TIM_Base_SetConfig+0x130>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d00b      	beq.n	800a1b2 <TIM_Base_SetConfig+0x9a>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a2b      	ldr	r2, [pc, #172]	; (800a24c <TIM_Base_SetConfig+0x134>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d007      	beq.n	800a1b2 <TIM_Base_SetConfig+0x9a>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a2a      	ldr	r2, [pc, #168]	; (800a250 <TIM_Base_SetConfig+0x138>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d003      	beq.n	800a1b2 <TIM_Base_SetConfig+0x9a>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a25      	ldr	r2, [pc, #148]	; (800a244 <TIM_Base_SetConfig+0x12c>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d108      	bne.n	800a1c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	695b      	ldr	r3, [r3, #20]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	689a      	ldr	r2, [r3, #8]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a12      	ldr	r2, [pc, #72]	; (800a234 <TIM_Base_SetConfig+0x11c>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d013      	beq.n	800a218 <TIM_Base_SetConfig+0x100>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a13      	ldr	r2, [pc, #76]	; (800a240 <TIM_Base_SetConfig+0x128>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d00f      	beq.n	800a218 <TIM_Base_SetConfig+0x100>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a13      	ldr	r2, [pc, #76]	; (800a248 <TIM_Base_SetConfig+0x130>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d00b      	beq.n	800a218 <TIM_Base_SetConfig+0x100>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a12      	ldr	r2, [pc, #72]	; (800a24c <TIM_Base_SetConfig+0x134>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d007      	beq.n	800a218 <TIM_Base_SetConfig+0x100>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a11      	ldr	r2, [pc, #68]	; (800a250 <TIM_Base_SetConfig+0x138>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d003      	beq.n	800a218 <TIM_Base_SetConfig+0x100>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a0c      	ldr	r2, [pc, #48]	; (800a244 <TIM_Base_SetConfig+0x12c>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d103      	bne.n	800a220 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	691a      	ldr	r2, [r3, #16]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	615a      	str	r2, [r3, #20]
}
 800a226:	bf00      	nop
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	40012c00 	.word	0x40012c00
 800a238:	40000400 	.word	0x40000400
 800a23c:	40000800 	.word	0x40000800
 800a240:	40013400 	.word	0x40013400
 800a244:	40015000 	.word	0x40015000
 800a248:	40014000 	.word	0x40014000
 800a24c:	40014400 	.word	0x40014400
 800a250:	40014800 	.word	0x40014800

0800a254 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a254:	b480      	push	{r7}
 800a256:	b087      	sub	sp, #28
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	f023 0201 	bic.w	r2, r3, #1
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f023 0303 	bic.w	r3, r3, #3
 800a28e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	4313      	orrs	r3, r2
 800a298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f023 0302 	bic.w	r3, r3, #2
 800a2a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a30      	ldr	r2, [pc, #192]	; (800a370 <TIM_OC1_SetConfig+0x11c>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d013      	beq.n	800a2dc <TIM_OC1_SetConfig+0x88>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a2f      	ldr	r2, [pc, #188]	; (800a374 <TIM_OC1_SetConfig+0x120>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d00f      	beq.n	800a2dc <TIM_OC1_SetConfig+0x88>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a2e      	ldr	r2, [pc, #184]	; (800a378 <TIM_OC1_SetConfig+0x124>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d00b      	beq.n	800a2dc <TIM_OC1_SetConfig+0x88>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a2d      	ldr	r2, [pc, #180]	; (800a37c <TIM_OC1_SetConfig+0x128>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d007      	beq.n	800a2dc <TIM_OC1_SetConfig+0x88>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4a2c      	ldr	r2, [pc, #176]	; (800a380 <TIM_OC1_SetConfig+0x12c>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d003      	beq.n	800a2dc <TIM_OC1_SetConfig+0x88>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4a2b      	ldr	r2, [pc, #172]	; (800a384 <TIM_OC1_SetConfig+0x130>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d10c      	bne.n	800a2f6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	f023 0308 	bic.w	r3, r3, #8
 800a2e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	697a      	ldr	r2, [r7, #20]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f023 0304 	bic.w	r3, r3, #4
 800a2f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a1d      	ldr	r2, [pc, #116]	; (800a370 <TIM_OC1_SetConfig+0x11c>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d013      	beq.n	800a326 <TIM_OC1_SetConfig+0xd2>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a1c      	ldr	r2, [pc, #112]	; (800a374 <TIM_OC1_SetConfig+0x120>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d00f      	beq.n	800a326 <TIM_OC1_SetConfig+0xd2>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a1b      	ldr	r2, [pc, #108]	; (800a378 <TIM_OC1_SetConfig+0x124>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d00b      	beq.n	800a326 <TIM_OC1_SetConfig+0xd2>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a1a      	ldr	r2, [pc, #104]	; (800a37c <TIM_OC1_SetConfig+0x128>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d007      	beq.n	800a326 <TIM_OC1_SetConfig+0xd2>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a19      	ldr	r2, [pc, #100]	; (800a380 <TIM_OC1_SetConfig+0x12c>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d003      	beq.n	800a326 <TIM_OC1_SetConfig+0xd2>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a18      	ldr	r2, [pc, #96]	; (800a384 <TIM_OC1_SetConfig+0x130>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d111      	bne.n	800a34a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a32c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	695b      	ldr	r3, [r3, #20]
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	4313      	orrs	r3, r2
 800a348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	693a      	ldr	r2, [r7, #16]
 800a34e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	685a      	ldr	r2, [r3, #4]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	621a      	str	r2, [r3, #32]
}
 800a364:	bf00      	nop
 800a366:	371c      	adds	r7, #28
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	40012c00 	.word	0x40012c00
 800a374:	40013400 	.word	0x40013400
 800a378:	40014000 	.word	0x40014000
 800a37c:	40014400 	.word	0x40014400
 800a380:	40014800 	.word	0x40014800
 800a384:	40015000 	.word	0x40015000

0800a388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a388:	b480      	push	{r7}
 800a38a:	b087      	sub	sp, #28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	f023 0210 	bic.w	r2, r3, #16
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a3b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	021b      	lsls	r3, r3, #8
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	f023 0320 	bic.w	r3, r3, #32
 800a3d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	011b      	lsls	r3, r3, #4
 800a3de:	697a      	ldr	r2, [r7, #20]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a2c      	ldr	r2, [pc, #176]	; (800a498 <TIM_OC2_SetConfig+0x110>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d007      	beq.n	800a3fc <TIM_OC2_SetConfig+0x74>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a2b      	ldr	r2, [pc, #172]	; (800a49c <TIM_OC2_SetConfig+0x114>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d003      	beq.n	800a3fc <TIM_OC2_SetConfig+0x74>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a2a      	ldr	r2, [pc, #168]	; (800a4a0 <TIM_OC2_SetConfig+0x118>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d10d      	bne.n	800a418 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	011b      	lsls	r3, r3, #4
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a416:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a1f      	ldr	r2, [pc, #124]	; (800a498 <TIM_OC2_SetConfig+0x110>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d013      	beq.n	800a448 <TIM_OC2_SetConfig+0xc0>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a1e      	ldr	r2, [pc, #120]	; (800a49c <TIM_OC2_SetConfig+0x114>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d00f      	beq.n	800a448 <TIM_OC2_SetConfig+0xc0>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	4a1e      	ldr	r2, [pc, #120]	; (800a4a4 <TIM_OC2_SetConfig+0x11c>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d00b      	beq.n	800a448 <TIM_OC2_SetConfig+0xc0>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4a1d      	ldr	r2, [pc, #116]	; (800a4a8 <TIM_OC2_SetConfig+0x120>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d007      	beq.n	800a448 <TIM_OC2_SetConfig+0xc0>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4a1c      	ldr	r2, [pc, #112]	; (800a4ac <TIM_OC2_SetConfig+0x124>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d003      	beq.n	800a448 <TIM_OC2_SetConfig+0xc0>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4a17      	ldr	r2, [pc, #92]	; (800a4a0 <TIM_OC2_SetConfig+0x118>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d113      	bne.n	800a470 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a44e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a456:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	695b      	ldr	r3, [r3, #20]
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	693a      	ldr	r2, [r7, #16]
 800a460:	4313      	orrs	r3, r2
 800a462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	693a      	ldr	r2, [r7, #16]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	693a      	ldr	r2, [r7, #16]
 800a474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	685a      	ldr	r2, [r3, #4]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	621a      	str	r2, [r3, #32]
}
 800a48a:	bf00      	nop
 800a48c:	371c      	adds	r7, #28
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	40012c00 	.word	0x40012c00
 800a49c:	40013400 	.word	0x40013400
 800a4a0:	40015000 	.word	0x40015000
 800a4a4:	40014000 	.word	0x40014000
 800a4a8:	40014400 	.word	0x40014400
 800a4ac:	40014800 	.word	0x40014800

0800a4b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b087      	sub	sp, #28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	69db      	ldr	r3, [r3, #28]
 800a4d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f023 0303 	bic.w	r3, r3, #3
 800a4ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a4fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	021b      	lsls	r3, r3, #8
 800a504:	697a      	ldr	r2, [r7, #20]
 800a506:	4313      	orrs	r3, r2
 800a508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a2b      	ldr	r2, [pc, #172]	; (800a5bc <TIM_OC3_SetConfig+0x10c>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d007      	beq.n	800a522 <TIM_OC3_SetConfig+0x72>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a2a      	ldr	r2, [pc, #168]	; (800a5c0 <TIM_OC3_SetConfig+0x110>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d003      	beq.n	800a522 <TIM_OC3_SetConfig+0x72>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a29      	ldr	r2, [pc, #164]	; (800a5c4 <TIM_OC3_SetConfig+0x114>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d10d      	bne.n	800a53e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	021b      	lsls	r3, r3, #8
 800a530:	697a      	ldr	r2, [r7, #20]
 800a532:	4313      	orrs	r3, r2
 800a534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a53c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a1e      	ldr	r2, [pc, #120]	; (800a5bc <TIM_OC3_SetConfig+0x10c>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d013      	beq.n	800a56e <TIM_OC3_SetConfig+0xbe>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a1d      	ldr	r2, [pc, #116]	; (800a5c0 <TIM_OC3_SetConfig+0x110>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d00f      	beq.n	800a56e <TIM_OC3_SetConfig+0xbe>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a1d      	ldr	r2, [pc, #116]	; (800a5c8 <TIM_OC3_SetConfig+0x118>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d00b      	beq.n	800a56e <TIM_OC3_SetConfig+0xbe>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a1c      	ldr	r2, [pc, #112]	; (800a5cc <TIM_OC3_SetConfig+0x11c>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d007      	beq.n	800a56e <TIM_OC3_SetConfig+0xbe>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a1b      	ldr	r2, [pc, #108]	; (800a5d0 <TIM_OC3_SetConfig+0x120>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d003      	beq.n	800a56e <TIM_OC3_SetConfig+0xbe>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a16      	ldr	r2, [pc, #88]	; (800a5c4 <TIM_OC3_SetConfig+0x114>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d113      	bne.n	800a596 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a57c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	011b      	lsls	r3, r3, #4
 800a584:	693a      	ldr	r2, [r7, #16]
 800a586:	4313      	orrs	r3, r2
 800a588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	011b      	lsls	r3, r3, #4
 800a590:	693a      	ldr	r2, [r7, #16]
 800a592:	4313      	orrs	r3, r2
 800a594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	693a      	ldr	r2, [r7, #16]
 800a59a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	685a      	ldr	r2, [r3, #4]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	697a      	ldr	r2, [r7, #20]
 800a5ae:	621a      	str	r2, [r3, #32]
}
 800a5b0:	bf00      	nop
 800a5b2:	371c      	adds	r7, #28
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	40012c00 	.word	0x40012c00
 800a5c0:	40013400 	.word	0x40013400
 800a5c4:	40015000 	.word	0x40015000
 800a5c8:	40014000 	.word	0x40014000
 800a5cc:	40014400 	.word	0x40014400
 800a5d0:	40014800 	.word	0x40014800

0800a5d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b087      	sub	sp, #28
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a1b      	ldr	r3, [r3, #32]
 800a5e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	69db      	ldr	r3, [r3, #28]
 800a5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a60e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	021b      	lsls	r3, r3, #8
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	4313      	orrs	r3, r2
 800a61a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	031b      	lsls	r3, r3, #12
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a2c      	ldr	r2, [pc, #176]	; (800a6e4 <TIM_OC4_SetConfig+0x110>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d007      	beq.n	800a648 <TIM_OC4_SetConfig+0x74>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a2b      	ldr	r2, [pc, #172]	; (800a6e8 <TIM_OC4_SetConfig+0x114>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d003      	beq.n	800a648 <TIM_OC4_SetConfig+0x74>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a2a      	ldr	r2, [pc, #168]	; (800a6ec <TIM_OC4_SetConfig+0x118>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d10d      	bne.n	800a664 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a64e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	031b      	lsls	r3, r3, #12
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	4313      	orrs	r3, r2
 800a65a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a662:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4a1f      	ldr	r2, [pc, #124]	; (800a6e4 <TIM_OC4_SetConfig+0x110>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d013      	beq.n	800a694 <TIM_OC4_SetConfig+0xc0>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	4a1e      	ldr	r2, [pc, #120]	; (800a6e8 <TIM_OC4_SetConfig+0x114>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d00f      	beq.n	800a694 <TIM_OC4_SetConfig+0xc0>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4a1e      	ldr	r2, [pc, #120]	; (800a6f0 <TIM_OC4_SetConfig+0x11c>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d00b      	beq.n	800a694 <TIM_OC4_SetConfig+0xc0>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4a1d      	ldr	r2, [pc, #116]	; (800a6f4 <TIM_OC4_SetConfig+0x120>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d007      	beq.n	800a694 <TIM_OC4_SetConfig+0xc0>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a1c      	ldr	r2, [pc, #112]	; (800a6f8 <TIM_OC4_SetConfig+0x124>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d003      	beq.n	800a694 <TIM_OC4_SetConfig+0xc0>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a17      	ldr	r2, [pc, #92]	; (800a6ec <TIM_OC4_SetConfig+0x118>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d113      	bne.n	800a6bc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a69a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a6a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	695b      	ldr	r3, [r3, #20]
 800a6a8:	019b      	lsls	r3, r3, #6
 800a6aa:	693a      	ldr	r2, [r7, #16]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	019b      	lsls	r3, r3, #6
 800a6b6:	693a      	ldr	r2, [r7, #16]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	693a      	ldr	r2, [r7, #16]
 800a6c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	685a      	ldr	r2, [r3, #4]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	697a      	ldr	r2, [r7, #20]
 800a6d4:	621a      	str	r2, [r3, #32]
}
 800a6d6:	bf00      	nop
 800a6d8:	371c      	adds	r7, #28
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	40012c00 	.word	0x40012c00
 800a6e8:	40013400 	.word	0x40013400
 800a6ec:	40015000 	.word	0x40015000
 800a6f0:	40014000 	.word	0x40014000
 800a6f4:	40014400 	.word	0x40014400
 800a6f8:	40014800 	.word	0x40014800

0800a6fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b087      	sub	sp, #28
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a1b      	ldr	r3, [r3, #32]
 800a70a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6a1b      	ldr	r3, [r3, #32]
 800a716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a72a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a72e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	4313      	orrs	r3, r2
 800a738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a740:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	041b      	lsls	r3, r3, #16
 800a748:	693a      	ldr	r2, [r7, #16]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a19      	ldr	r2, [pc, #100]	; (800a7b8 <TIM_OC5_SetConfig+0xbc>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d013      	beq.n	800a77e <TIM_OC5_SetConfig+0x82>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4a18      	ldr	r2, [pc, #96]	; (800a7bc <TIM_OC5_SetConfig+0xc0>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d00f      	beq.n	800a77e <TIM_OC5_SetConfig+0x82>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a17      	ldr	r2, [pc, #92]	; (800a7c0 <TIM_OC5_SetConfig+0xc4>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d00b      	beq.n	800a77e <TIM_OC5_SetConfig+0x82>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a16      	ldr	r2, [pc, #88]	; (800a7c4 <TIM_OC5_SetConfig+0xc8>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d007      	beq.n	800a77e <TIM_OC5_SetConfig+0x82>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a15      	ldr	r2, [pc, #84]	; (800a7c8 <TIM_OC5_SetConfig+0xcc>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d003      	beq.n	800a77e <TIM_OC5_SetConfig+0x82>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4a14      	ldr	r2, [pc, #80]	; (800a7cc <TIM_OC5_SetConfig+0xd0>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d109      	bne.n	800a792 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a784:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	021b      	lsls	r3, r3, #8
 800a78c:	697a      	ldr	r2, [r7, #20]
 800a78e:	4313      	orrs	r3, r2
 800a790:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	697a      	ldr	r2, [r7, #20]
 800a796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	685a      	ldr	r2, [r3, #4]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	693a      	ldr	r2, [r7, #16]
 800a7aa:	621a      	str	r2, [r3, #32]
}
 800a7ac:	bf00      	nop
 800a7ae:	371c      	adds	r7, #28
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr
 800a7b8:	40012c00 	.word	0x40012c00
 800a7bc:	40013400 	.word	0x40013400
 800a7c0:	40014000 	.word	0x40014000
 800a7c4:	40014400 	.word	0x40014400
 800a7c8:	40014800 	.word	0x40014800
 800a7cc:	40015000 	.word	0x40015000

0800a7d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b087      	sub	sp, #28
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a1b      	ldr	r3, [r3, #32]
 800a7de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a1b      	ldr	r3, [r3, #32]
 800a7ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	021b      	lsls	r3, r3, #8
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	051b      	lsls	r3, r3, #20
 800a81e:	693a      	ldr	r2, [r7, #16]
 800a820:	4313      	orrs	r3, r2
 800a822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a1a      	ldr	r2, [pc, #104]	; (800a890 <TIM_OC6_SetConfig+0xc0>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d013      	beq.n	800a854 <TIM_OC6_SetConfig+0x84>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	4a19      	ldr	r2, [pc, #100]	; (800a894 <TIM_OC6_SetConfig+0xc4>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d00f      	beq.n	800a854 <TIM_OC6_SetConfig+0x84>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a18      	ldr	r2, [pc, #96]	; (800a898 <TIM_OC6_SetConfig+0xc8>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d00b      	beq.n	800a854 <TIM_OC6_SetConfig+0x84>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a17      	ldr	r2, [pc, #92]	; (800a89c <TIM_OC6_SetConfig+0xcc>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d007      	beq.n	800a854 <TIM_OC6_SetConfig+0x84>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a16      	ldr	r2, [pc, #88]	; (800a8a0 <TIM_OC6_SetConfig+0xd0>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d003      	beq.n	800a854 <TIM_OC6_SetConfig+0x84>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a15      	ldr	r2, [pc, #84]	; (800a8a4 <TIM_OC6_SetConfig+0xd4>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d109      	bne.n	800a868 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a85a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	695b      	ldr	r3, [r3, #20]
 800a860:	029b      	lsls	r3, r3, #10
 800a862:	697a      	ldr	r2, [r7, #20]
 800a864:	4313      	orrs	r3, r2
 800a866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	685a      	ldr	r2, [r3, #4]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	693a      	ldr	r2, [r7, #16]
 800a880:	621a      	str	r2, [r3, #32]
}
 800a882:	bf00      	nop
 800a884:	371c      	adds	r7, #28
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	40012c00 	.word	0x40012c00
 800a894:	40013400 	.word	0x40013400
 800a898:	40014000 	.word	0x40014000
 800a89c:	40014400 	.word	0x40014400
 800a8a0:	40014800 	.word	0x40014800
 800a8a4:	40015000 	.word	0x40015000

0800a8a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b087      	sub	sp, #28
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6a1b      	ldr	r3, [r3, #32]
 800a8be:	f023 0201 	bic.w	r2, r3, #1
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	699b      	ldr	r3, [r3, #24]
 800a8ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	011b      	lsls	r3, r3, #4
 800a8d8:	693a      	ldr	r2, [r7, #16]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f023 030a 	bic.w	r3, r3, #10
 800a8e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	697a      	ldr	r2, [r7, #20]
 800a8f8:	621a      	str	r2, [r3, #32]
}
 800a8fa:	bf00      	nop
 800a8fc:	371c      	adds	r7, #28
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a906:	b480      	push	{r7}
 800a908:	b087      	sub	sp, #28
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	60f8      	str	r0, [r7, #12]
 800a90e:	60b9      	str	r1, [r7, #8]
 800a910:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	f023 0210 	bic.w	r2, r3, #16
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6a1b      	ldr	r3, [r3, #32]
 800a928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a930:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	031b      	lsls	r3, r3, #12
 800a936:	697a      	ldr	r2, [r7, #20]
 800a938:	4313      	orrs	r3, r2
 800a93a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a942:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	011b      	lsls	r3, r3, #4
 800a948:	693a      	ldr	r2, [r7, #16]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	697a      	ldr	r2, [r7, #20]
 800a952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	621a      	str	r2, [r3, #32]
}
 800a95a:	bf00      	nop
 800a95c:	371c      	adds	r7, #28
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a966:	b480      	push	{r7}
 800a968:	b085      	sub	sp, #20
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a97c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a982:	683a      	ldr	r2, [r7, #0]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	4313      	orrs	r3, r2
 800a988:	f043 0307 	orr.w	r3, r3, #7
 800a98c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	609a      	str	r2, [r3, #8]
}
 800a994:	bf00      	nop
 800a996:	3714      	adds	r7, #20
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b087      	sub	sp, #28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
 800a9ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	021a      	lsls	r2, r3, #8
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	431a      	orrs	r2, r3
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	697a      	ldr	r2, [r7, #20]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	697a      	ldr	r2, [r7, #20]
 800a9d2:	609a      	str	r2, [r3, #8]
}
 800a9d4:	bf00      	nop
 800a9d6:	371c      	adds	r7, #28
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	f003 031f 	and.w	r3, r3, #31
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6a1a      	ldr	r2, [r3, #32]
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	43db      	mvns	r3, r3
 800aa02:	401a      	ands	r2, r3
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6a1a      	ldr	r2, [r3, #32]
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f003 031f 	and.w	r3, r3, #31
 800aa12:	6879      	ldr	r1, [r7, #4]
 800aa14:	fa01 f303 	lsl.w	r3, r1, r3
 800aa18:	431a      	orrs	r2, r3
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	621a      	str	r2, [r3, #32]
}
 800aa1e:	bf00      	nop
 800aa20:	371c      	adds	r7, #28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
	...

0800aa2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d101      	bne.n	800aa44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa40:	2302      	movs	r3, #2
 800aa42:	e06f      	b.n	800ab24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2202      	movs	r2, #2
 800aa50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a31      	ldr	r2, [pc, #196]	; (800ab30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d009      	beq.n	800aa82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a30      	ldr	r2, [pc, #192]	; (800ab34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d004      	beq.n	800aa82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a2e      	ldr	r2, [pc, #184]	; (800ab38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d108      	bne.n	800aa94 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aa88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800aa9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a1e      	ldr	r2, [pc, #120]	; (800ab30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d01d      	beq.n	800aaf8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aac4:	d018      	beq.n	800aaf8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a1c      	ldr	r2, [pc, #112]	; (800ab3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d013      	beq.n	800aaf8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a1a      	ldr	r2, [pc, #104]	; (800ab40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d00e      	beq.n	800aaf8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a15      	ldr	r2, [pc, #84]	; (800ab34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d009      	beq.n	800aaf8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a16      	ldr	r2, [pc, #88]	; (800ab44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d004      	beq.n	800aaf8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a11      	ldr	r2, [pc, #68]	; (800ab38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d10c      	bne.n	800ab12 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aafe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68ba      	ldr	r2, [r7, #8]
 800ab10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr
 800ab30:	40012c00 	.word	0x40012c00
 800ab34:	40013400 	.word	0x40013400
 800ab38:	40015000 	.word	0x40015000
 800ab3c:	40000400 	.word	0x40000400
 800ab40:	40000800 	.word	0x40000800
 800ab44:	40014000 	.word	0x40014000

0800ab48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ab52:	2300      	movs	r3, #0
 800ab54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d101      	bne.n	800ab64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ab60:	2302      	movs	r3, #2
 800ab62:	e096      	b.n	800ac92 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	4313      	orrs	r3, r2
 800abb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	695b      	ldr	r3, [r3, #20]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abca:	4313      	orrs	r3, r2
 800abcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	699b      	ldr	r3, [r3, #24]
 800abd8:	041b      	lsls	r3, r3, #16
 800abda:	4313      	orrs	r3, r2
 800abdc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a2f      	ldr	r2, [pc, #188]	; (800aca0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d009      	beq.n	800abfc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a2d      	ldr	r2, [pc, #180]	; (800aca4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d004      	beq.n	800abfc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a2c      	ldr	r2, [pc, #176]	; (800aca8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d106      	bne.n	800ac0a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	69db      	ldr	r3, [r3, #28]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a24      	ldr	r2, [pc, #144]	; (800aca0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d009      	beq.n	800ac28 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a22      	ldr	r2, [pc, #136]	; (800aca4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d004      	beq.n	800ac28 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a21      	ldr	r2, [pc, #132]	; (800aca8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d12b      	bne.n	800ac80 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac32:	051b      	lsls	r3, r3, #20
 800ac34:	4313      	orrs	r3, r2
 800ac36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac50:	4313      	orrs	r3, r2
 800ac52:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a11      	ldr	r2, [pc, #68]	; (800aca0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d009      	beq.n	800ac72 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a10      	ldr	r2, [pc, #64]	; (800aca4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d004      	beq.n	800ac72 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a0e      	ldr	r2, [pc, #56]	; (800aca8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d106      	bne.n	800ac80 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3714      	adds	r7, #20
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	40012c00 	.word	0x40012c00
 800aca4:	40013400 	.word	0x40013400
 800aca8:	40015000 	.word	0x40015000

0800acac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acc8:	bf00      	nop
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800acdc:	bf00      	nop
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800acf0:	bf00      	nop
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ad18:	bf00      	nop
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ad2c:	bf00      	nop
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <__errno>:
 800ad38:	4b01      	ldr	r3, [pc, #4]	; (800ad40 <__errno+0x8>)
 800ad3a:	6818      	ldr	r0, [r3, #0]
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	200004b4 	.word	0x200004b4

0800ad44 <__libc_init_array>:
 800ad44:	b570      	push	{r4, r5, r6, lr}
 800ad46:	4d0d      	ldr	r5, [pc, #52]	; (800ad7c <__libc_init_array+0x38>)
 800ad48:	4c0d      	ldr	r4, [pc, #52]	; (800ad80 <__libc_init_array+0x3c>)
 800ad4a:	1b64      	subs	r4, r4, r5
 800ad4c:	10a4      	asrs	r4, r4, #2
 800ad4e:	2600      	movs	r6, #0
 800ad50:	42a6      	cmp	r6, r4
 800ad52:	d109      	bne.n	800ad68 <__libc_init_array+0x24>
 800ad54:	4d0b      	ldr	r5, [pc, #44]	; (800ad84 <__libc_init_array+0x40>)
 800ad56:	4c0c      	ldr	r4, [pc, #48]	; (800ad88 <__libc_init_array+0x44>)
 800ad58:	f001 f9be 	bl	800c0d8 <_init>
 800ad5c:	1b64      	subs	r4, r4, r5
 800ad5e:	10a4      	asrs	r4, r4, #2
 800ad60:	2600      	movs	r6, #0
 800ad62:	42a6      	cmp	r6, r4
 800ad64:	d105      	bne.n	800ad72 <__libc_init_array+0x2e>
 800ad66:	bd70      	pop	{r4, r5, r6, pc}
 800ad68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad6c:	4798      	blx	r3
 800ad6e:	3601      	adds	r6, #1
 800ad70:	e7ee      	b.n	800ad50 <__libc_init_array+0xc>
 800ad72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad76:	4798      	blx	r3
 800ad78:	3601      	adds	r6, #1
 800ad7a:	e7f2      	b.n	800ad62 <__libc_init_array+0x1e>
 800ad7c:	0800c478 	.word	0x0800c478
 800ad80:	0800c478 	.word	0x0800c478
 800ad84:	0800c478 	.word	0x0800c478
 800ad88:	0800c47c 	.word	0x0800c47c

0800ad8c <memcpy>:
 800ad8c:	440a      	add	r2, r1
 800ad8e:	4291      	cmp	r1, r2
 800ad90:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad94:	d100      	bne.n	800ad98 <memcpy+0xc>
 800ad96:	4770      	bx	lr
 800ad98:	b510      	push	{r4, lr}
 800ad9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ada2:	4291      	cmp	r1, r2
 800ada4:	d1f9      	bne.n	800ad9a <memcpy+0xe>
 800ada6:	bd10      	pop	{r4, pc}

0800ada8 <memset>:
 800ada8:	4402      	add	r2, r0
 800adaa:	4603      	mov	r3, r0
 800adac:	4293      	cmp	r3, r2
 800adae:	d100      	bne.n	800adb2 <memset+0xa>
 800adb0:	4770      	bx	lr
 800adb2:	f803 1b01 	strb.w	r1, [r3], #1
 800adb6:	e7f9      	b.n	800adac <memset+0x4>

0800adb8 <fmod>:
 800adb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adba:	ed2d 8b02 	vpush	{d8}
 800adbe:	ec57 6b10 	vmov	r6, r7, d0
 800adc2:	ec55 4b11 	vmov	r4, r5, d1
 800adc6:	f000 f8cb 	bl	800af60 <__ieee754_fmod>
 800adca:	4622      	mov	r2, r4
 800adcc:	462b      	mov	r3, r5
 800adce:	4630      	mov	r0, r6
 800add0:	4639      	mov	r1, r7
 800add2:	eeb0 8a40 	vmov.f32	s16, s0
 800add6:	eef0 8a60 	vmov.f32	s17, s1
 800adda:	f7f5 fe73 	bl	8000ac4 <__aeabi_dcmpun>
 800adde:	b990      	cbnz	r0, 800ae06 <fmod+0x4e>
 800ade0:	2200      	movs	r2, #0
 800ade2:	2300      	movs	r3, #0
 800ade4:	4620      	mov	r0, r4
 800ade6:	4629      	mov	r1, r5
 800ade8:	f7f5 fe3a 	bl	8000a60 <__aeabi_dcmpeq>
 800adec:	b158      	cbz	r0, 800ae06 <fmod+0x4e>
 800adee:	f7ff ffa3 	bl	800ad38 <__errno>
 800adf2:	2321      	movs	r3, #33	; 0x21
 800adf4:	6003      	str	r3, [r0, #0]
 800adf6:	2200      	movs	r2, #0
 800adf8:	2300      	movs	r3, #0
 800adfa:	4610      	mov	r0, r2
 800adfc:	4619      	mov	r1, r3
 800adfe:	f7f5 fcf1 	bl	80007e4 <__aeabi_ddiv>
 800ae02:	ec41 0b18 	vmov	d8, r0, r1
 800ae06:	eeb0 0a48 	vmov.f32	s0, s16
 800ae0a:	eef0 0a68 	vmov.f32	s1, s17
 800ae0e:	ecbd 8b02 	vpop	{d8}
 800ae12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae14 <pow>:
 800ae14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae16:	ed2d 8b02 	vpush	{d8}
 800ae1a:	eeb0 8a40 	vmov.f32	s16, s0
 800ae1e:	eef0 8a60 	vmov.f32	s17, s1
 800ae22:	ec55 4b11 	vmov	r4, r5, d1
 800ae26:	f000 f9af 	bl	800b188 <__ieee754_pow>
 800ae2a:	4622      	mov	r2, r4
 800ae2c:	462b      	mov	r3, r5
 800ae2e:	4620      	mov	r0, r4
 800ae30:	4629      	mov	r1, r5
 800ae32:	ec57 6b10 	vmov	r6, r7, d0
 800ae36:	f7f5 fe45 	bl	8000ac4 <__aeabi_dcmpun>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d13b      	bne.n	800aeb6 <pow+0xa2>
 800ae3e:	ec51 0b18 	vmov	r0, r1, d8
 800ae42:	2200      	movs	r2, #0
 800ae44:	2300      	movs	r3, #0
 800ae46:	f7f5 fe0b 	bl	8000a60 <__aeabi_dcmpeq>
 800ae4a:	b1b8      	cbz	r0, 800ae7c <pow+0x68>
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	2300      	movs	r3, #0
 800ae50:	4620      	mov	r0, r4
 800ae52:	4629      	mov	r1, r5
 800ae54:	f7f5 fe04 	bl	8000a60 <__aeabi_dcmpeq>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d146      	bne.n	800aeea <pow+0xd6>
 800ae5c:	ec45 4b10 	vmov	d0, r4, r5
 800ae60:	f001 f89b 	bl	800bf9a <finite>
 800ae64:	b338      	cbz	r0, 800aeb6 <pow+0xa2>
 800ae66:	2200      	movs	r2, #0
 800ae68:	2300      	movs	r3, #0
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	f7f5 fe01 	bl	8000a74 <__aeabi_dcmplt>
 800ae72:	b300      	cbz	r0, 800aeb6 <pow+0xa2>
 800ae74:	f7ff ff60 	bl	800ad38 <__errno>
 800ae78:	2322      	movs	r3, #34	; 0x22
 800ae7a:	e01b      	b.n	800aeb4 <pow+0xa0>
 800ae7c:	ec47 6b10 	vmov	d0, r6, r7
 800ae80:	f001 f88b 	bl	800bf9a <finite>
 800ae84:	b9e0      	cbnz	r0, 800aec0 <pow+0xac>
 800ae86:	eeb0 0a48 	vmov.f32	s0, s16
 800ae8a:	eef0 0a68 	vmov.f32	s1, s17
 800ae8e:	f001 f884 	bl	800bf9a <finite>
 800ae92:	b1a8      	cbz	r0, 800aec0 <pow+0xac>
 800ae94:	ec45 4b10 	vmov	d0, r4, r5
 800ae98:	f001 f87f 	bl	800bf9a <finite>
 800ae9c:	b180      	cbz	r0, 800aec0 <pow+0xac>
 800ae9e:	4632      	mov	r2, r6
 800aea0:	463b      	mov	r3, r7
 800aea2:	4630      	mov	r0, r6
 800aea4:	4639      	mov	r1, r7
 800aea6:	f7f5 fe0d 	bl	8000ac4 <__aeabi_dcmpun>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d0e2      	beq.n	800ae74 <pow+0x60>
 800aeae:	f7ff ff43 	bl	800ad38 <__errno>
 800aeb2:	2321      	movs	r3, #33	; 0x21
 800aeb4:	6003      	str	r3, [r0, #0]
 800aeb6:	ecbd 8b02 	vpop	{d8}
 800aeba:	ec47 6b10 	vmov	d0, r6, r7
 800aebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aec0:	2200      	movs	r2, #0
 800aec2:	2300      	movs	r3, #0
 800aec4:	4630      	mov	r0, r6
 800aec6:	4639      	mov	r1, r7
 800aec8:	f7f5 fdca 	bl	8000a60 <__aeabi_dcmpeq>
 800aecc:	2800      	cmp	r0, #0
 800aece:	d0f2      	beq.n	800aeb6 <pow+0xa2>
 800aed0:	eeb0 0a48 	vmov.f32	s0, s16
 800aed4:	eef0 0a68 	vmov.f32	s1, s17
 800aed8:	f001 f85f 	bl	800bf9a <finite>
 800aedc:	2800      	cmp	r0, #0
 800aede:	d0ea      	beq.n	800aeb6 <pow+0xa2>
 800aee0:	ec45 4b10 	vmov	d0, r4, r5
 800aee4:	f001 f859 	bl	800bf9a <finite>
 800aee8:	e7c3      	b.n	800ae72 <pow+0x5e>
 800aeea:	4f01      	ldr	r7, [pc, #4]	; (800aef0 <pow+0xdc>)
 800aeec:	2600      	movs	r6, #0
 800aeee:	e7e2      	b.n	800aeb6 <pow+0xa2>
 800aef0:	3ff00000 	.word	0x3ff00000

0800aef4 <expf>:
 800aef4:	b508      	push	{r3, lr}
 800aef6:	ed2d 8b02 	vpush	{d8}
 800aefa:	eef0 8a40 	vmov.f32	s17, s0
 800aefe:	f000 ff23 	bl	800bd48 <__ieee754_expf>
 800af02:	eeb0 8a40 	vmov.f32	s16, s0
 800af06:	eeb0 0a68 	vmov.f32	s0, s17
 800af0a:	f001 f8d7 	bl	800c0bc <finitef>
 800af0e:	b160      	cbz	r0, 800af2a <expf+0x36>
 800af10:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800af50 <expf+0x5c>
 800af14:	eef4 8ae7 	vcmpe.f32	s17, s15
 800af18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af1c:	dd0a      	ble.n	800af34 <expf+0x40>
 800af1e:	f7ff ff0b 	bl	800ad38 <__errno>
 800af22:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800af54 <expf+0x60>
 800af26:	2322      	movs	r3, #34	; 0x22
 800af28:	6003      	str	r3, [r0, #0]
 800af2a:	eeb0 0a48 	vmov.f32	s0, s16
 800af2e:	ecbd 8b02 	vpop	{d8}
 800af32:	bd08      	pop	{r3, pc}
 800af34:	eddf 7a08 	vldr	s15, [pc, #32]	; 800af58 <expf+0x64>
 800af38:	eef4 8ae7 	vcmpe.f32	s17, s15
 800af3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af40:	d5f3      	bpl.n	800af2a <expf+0x36>
 800af42:	f7ff fef9 	bl	800ad38 <__errno>
 800af46:	2322      	movs	r3, #34	; 0x22
 800af48:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800af5c <expf+0x68>
 800af4c:	6003      	str	r3, [r0, #0]
 800af4e:	e7ec      	b.n	800af2a <expf+0x36>
 800af50:	42b17180 	.word	0x42b17180
 800af54:	7f800000 	.word	0x7f800000
 800af58:	c2cff1b5 	.word	0xc2cff1b5
 800af5c:	00000000 	.word	0x00000000

0800af60 <__ieee754_fmod>:
 800af60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af64:	ec53 2b11 	vmov	r2, r3, d1
 800af68:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800af6c:	ea5e 0402 	orrs.w	r4, lr, r2
 800af70:	ec51 0b10 	vmov	r0, r1, d0
 800af74:	ee11 7a10 	vmov	r7, s2
 800af78:	ee11 ca10 	vmov	ip, s2
 800af7c:	461e      	mov	r6, r3
 800af7e:	d00d      	beq.n	800af9c <__ieee754_fmod+0x3c>
 800af80:	4c7a      	ldr	r4, [pc, #488]	; (800b16c <__ieee754_fmod+0x20c>)
 800af82:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800af86:	45a0      	cmp	r8, r4
 800af88:	4689      	mov	r9, r1
 800af8a:	dc07      	bgt.n	800af9c <__ieee754_fmod+0x3c>
 800af8c:	4254      	negs	r4, r2
 800af8e:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 800b178 <__ieee754_fmod+0x218>
 800af92:	4314      	orrs	r4, r2
 800af94:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800af98:	455c      	cmp	r4, fp
 800af9a:	d909      	bls.n	800afb0 <__ieee754_fmod+0x50>
 800af9c:	f7f5 faf8 	bl	8000590 <__aeabi_dmul>
 800afa0:	4602      	mov	r2, r0
 800afa2:	460b      	mov	r3, r1
 800afa4:	f7f5 fc1e 	bl	80007e4 <__aeabi_ddiv>
 800afa8:	ec41 0b10 	vmov	d0, r0, r1
 800afac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb0:	45f0      	cmp	r8, lr
 800afb2:	ee10 aa10 	vmov	sl, s0
 800afb6:	ee10 4a10 	vmov	r4, s0
 800afba:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800afbe:	dc09      	bgt.n	800afd4 <__ieee754_fmod+0x74>
 800afc0:	dbf2      	blt.n	800afa8 <__ieee754_fmod+0x48>
 800afc2:	4290      	cmp	r0, r2
 800afc4:	d3f0      	bcc.n	800afa8 <__ieee754_fmod+0x48>
 800afc6:	d105      	bne.n	800afd4 <__ieee754_fmod+0x74>
 800afc8:	4b69      	ldr	r3, [pc, #420]	; (800b170 <__ieee754_fmod+0x210>)
 800afca:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 800afce:	e9d5 0100 	ldrd	r0, r1, [r5]
 800afd2:	e7e9      	b.n	800afa8 <__ieee754_fmod+0x48>
 800afd4:	ea19 0f0b 	tst.w	r9, fp
 800afd8:	d14a      	bne.n	800b070 <__ieee754_fmod+0x110>
 800afda:	f1b8 0f00 	cmp.w	r8, #0
 800afde:	d13f      	bne.n	800b060 <__ieee754_fmod+0x100>
 800afe0:	4964      	ldr	r1, [pc, #400]	; (800b174 <__ieee754_fmod+0x214>)
 800afe2:	4653      	mov	r3, sl
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	dc38      	bgt.n	800b05a <__ieee754_fmod+0xfa>
 800afe8:	4b63      	ldr	r3, [pc, #396]	; (800b178 <__ieee754_fmod+0x218>)
 800afea:	4033      	ands	r3, r6
 800afec:	2b00      	cmp	r3, #0
 800afee:	d14f      	bne.n	800b090 <__ieee754_fmod+0x130>
 800aff0:	f1be 0f00 	cmp.w	lr, #0
 800aff4:	d144      	bne.n	800b080 <__ieee754_fmod+0x120>
 800aff6:	4a5f      	ldr	r2, [pc, #380]	; (800b174 <__ieee754_fmod+0x214>)
 800aff8:	463b      	mov	r3, r7
 800affa:	2b00      	cmp	r3, #0
 800affc:	dc3d      	bgt.n	800b07a <__ieee754_fmod+0x11a>
 800affe:	4b5f      	ldr	r3, [pc, #380]	; (800b17c <__ieee754_fmod+0x21c>)
 800b000:	4299      	cmp	r1, r3
 800b002:	db4a      	blt.n	800b09a <__ieee754_fmod+0x13a>
 800b004:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b008:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b00c:	485b      	ldr	r0, [pc, #364]	; (800b17c <__ieee754_fmod+0x21c>)
 800b00e:	4282      	cmp	r2, r0
 800b010:	db57      	blt.n	800b0c2 <__ieee754_fmod+0x162>
 800b012:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b016:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800b01a:	1a89      	subs	r1, r1, r2
 800b01c:	1b98      	subs	r0, r3, r6
 800b01e:	eba4 070c 	sub.w	r7, r4, ip
 800b022:	2900      	cmp	r1, #0
 800b024:	d164      	bne.n	800b0f0 <__ieee754_fmod+0x190>
 800b026:	4564      	cmp	r4, ip
 800b028:	bf38      	it	cc
 800b02a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b02e:	2800      	cmp	r0, #0
 800b030:	bfa4      	itt	ge
 800b032:	463c      	movge	r4, r7
 800b034:	4603      	movge	r3, r0
 800b036:	ea53 0104 	orrs.w	r1, r3, r4
 800b03a:	d0c5      	beq.n	800afc8 <__ieee754_fmod+0x68>
 800b03c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b040:	db6b      	blt.n	800b11a <__ieee754_fmod+0x1ba>
 800b042:	494e      	ldr	r1, [pc, #312]	; (800b17c <__ieee754_fmod+0x21c>)
 800b044:	428a      	cmp	r2, r1
 800b046:	db6e      	blt.n	800b126 <__ieee754_fmod+0x1c6>
 800b048:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b04c:	431d      	orrs	r5, r3
 800b04e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800b052:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800b056:	4620      	mov	r0, r4
 800b058:	e7a6      	b.n	800afa8 <__ieee754_fmod+0x48>
 800b05a:	3901      	subs	r1, #1
 800b05c:	005b      	lsls	r3, r3, #1
 800b05e:	e7c1      	b.n	800afe4 <__ieee754_fmod+0x84>
 800b060:	4946      	ldr	r1, [pc, #280]	; (800b17c <__ieee754_fmod+0x21c>)
 800b062:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800b066:	2b00      	cmp	r3, #0
 800b068:	ddbe      	ble.n	800afe8 <__ieee754_fmod+0x88>
 800b06a:	3901      	subs	r1, #1
 800b06c:	005b      	lsls	r3, r3, #1
 800b06e:	e7fa      	b.n	800b066 <__ieee754_fmod+0x106>
 800b070:	ea4f 5128 	mov.w	r1, r8, asr #20
 800b074:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b078:	e7b6      	b.n	800afe8 <__ieee754_fmod+0x88>
 800b07a:	3a01      	subs	r2, #1
 800b07c:	005b      	lsls	r3, r3, #1
 800b07e:	e7bc      	b.n	800affa <__ieee754_fmod+0x9a>
 800b080:	4a3e      	ldr	r2, [pc, #248]	; (800b17c <__ieee754_fmod+0x21c>)
 800b082:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800b086:	2b00      	cmp	r3, #0
 800b088:	ddb9      	ble.n	800affe <__ieee754_fmod+0x9e>
 800b08a:	3a01      	subs	r2, #1
 800b08c:	005b      	lsls	r3, r3, #1
 800b08e:	e7fa      	b.n	800b086 <__ieee754_fmod+0x126>
 800b090:	ea4f 522e 	mov.w	r2, lr, asr #20
 800b094:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b098:	e7b1      	b.n	800affe <__ieee754_fmod+0x9e>
 800b09a:	1a5c      	subs	r4, r3, r1
 800b09c:	2c1f      	cmp	r4, #31
 800b09e:	dc0a      	bgt.n	800b0b6 <__ieee754_fmod+0x156>
 800b0a0:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800b0a4:	fa08 f804 	lsl.w	r8, r8, r4
 800b0a8:	fa2a f303 	lsr.w	r3, sl, r3
 800b0ac:	ea43 0308 	orr.w	r3, r3, r8
 800b0b0:	fa0a f404 	lsl.w	r4, sl, r4
 800b0b4:	e7aa      	b.n	800b00c <__ieee754_fmod+0xac>
 800b0b6:	4b32      	ldr	r3, [pc, #200]	; (800b180 <__ieee754_fmod+0x220>)
 800b0b8:	1a5b      	subs	r3, r3, r1
 800b0ba:	fa0a f303 	lsl.w	r3, sl, r3
 800b0be:	2400      	movs	r4, #0
 800b0c0:	e7a4      	b.n	800b00c <__ieee754_fmod+0xac>
 800b0c2:	eba0 0c02 	sub.w	ip, r0, r2
 800b0c6:	f1bc 0f1f 	cmp.w	ip, #31
 800b0ca:	dc0a      	bgt.n	800b0e2 <__ieee754_fmod+0x182>
 800b0cc:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800b0d0:	fa0e fe0c 	lsl.w	lr, lr, ip
 800b0d4:	fa27 f606 	lsr.w	r6, r7, r6
 800b0d8:	ea46 060e 	orr.w	r6, r6, lr
 800b0dc:	fa07 fc0c 	lsl.w	ip, r7, ip
 800b0e0:	e79b      	b.n	800b01a <__ieee754_fmod+0xba>
 800b0e2:	4e27      	ldr	r6, [pc, #156]	; (800b180 <__ieee754_fmod+0x220>)
 800b0e4:	1ab6      	subs	r6, r6, r2
 800b0e6:	fa07 f606 	lsl.w	r6, r7, r6
 800b0ea:	f04f 0c00 	mov.w	ip, #0
 800b0ee:	e794      	b.n	800b01a <__ieee754_fmod+0xba>
 800b0f0:	4564      	cmp	r4, ip
 800b0f2:	bf38      	it	cc
 800b0f4:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	da05      	bge.n	800b108 <__ieee754_fmod+0x1a8>
 800b0fc:	0fe0      	lsrs	r0, r4, #31
 800b0fe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b102:	0064      	lsls	r4, r4, #1
 800b104:	3901      	subs	r1, #1
 800b106:	e789      	b.n	800b01c <__ieee754_fmod+0xbc>
 800b108:	ea50 0307 	orrs.w	r3, r0, r7
 800b10c:	f43f af5c 	beq.w	800afc8 <__ieee754_fmod+0x68>
 800b110:	0ffb      	lsrs	r3, r7, #31
 800b112:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b116:	007c      	lsls	r4, r7, #1
 800b118:	e7f4      	b.n	800b104 <__ieee754_fmod+0x1a4>
 800b11a:	0fe1      	lsrs	r1, r4, #31
 800b11c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b120:	0064      	lsls	r4, r4, #1
 800b122:	3a01      	subs	r2, #1
 800b124:	e78a      	b.n	800b03c <__ieee754_fmod+0xdc>
 800b126:	1a89      	subs	r1, r1, r2
 800b128:	2914      	cmp	r1, #20
 800b12a:	dc0a      	bgt.n	800b142 <__ieee754_fmod+0x1e2>
 800b12c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b130:	fa03 f202 	lsl.w	r2, r3, r2
 800b134:	40cc      	lsrs	r4, r1
 800b136:	4322      	orrs	r2, r4
 800b138:	410b      	asrs	r3, r1
 800b13a:	ea43 0105 	orr.w	r1, r3, r5
 800b13e:	4610      	mov	r0, r2
 800b140:	e732      	b.n	800afa8 <__ieee754_fmod+0x48>
 800b142:	291f      	cmp	r1, #31
 800b144:	dc07      	bgt.n	800b156 <__ieee754_fmod+0x1f6>
 800b146:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b14a:	40cc      	lsrs	r4, r1
 800b14c:	fa03 f202 	lsl.w	r2, r3, r2
 800b150:	4322      	orrs	r2, r4
 800b152:	462b      	mov	r3, r5
 800b154:	e7f1      	b.n	800b13a <__ieee754_fmod+0x1da>
 800b156:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800b15a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b15e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800b162:	32e2      	adds	r2, #226	; 0xe2
 800b164:	fa43 f202 	asr.w	r2, r3, r2
 800b168:	e7f3      	b.n	800b152 <__ieee754_fmod+0x1f2>
 800b16a:	bf00      	nop
 800b16c:	7fefffff 	.word	0x7fefffff
 800b170:	0800c420 	.word	0x0800c420
 800b174:	fffffbed 	.word	0xfffffbed
 800b178:	7ff00000 	.word	0x7ff00000
 800b17c:	fffffc02 	.word	0xfffffc02
 800b180:	fffffbe2 	.word	0xfffffbe2
 800b184:	00000000 	.word	0x00000000

0800b188 <__ieee754_pow>:
 800b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18c:	ed2d 8b06 	vpush	{d8-d10}
 800b190:	b089      	sub	sp, #36	; 0x24
 800b192:	ed8d 1b00 	vstr	d1, [sp]
 800b196:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b19a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b19e:	ea58 0102 	orrs.w	r1, r8, r2
 800b1a2:	ec57 6b10 	vmov	r6, r7, d0
 800b1a6:	d115      	bne.n	800b1d4 <__ieee754_pow+0x4c>
 800b1a8:	19b3      	adds	r3, r6, r6
 800b1aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b1ae:	4152      	adcs	r2, r2
 800b1b0:	4299      	cmp	r1, r3
 800b1b2:	4b89      	ldr	r3, [pc, #548]	; (800b3d8 <__ieee754_pow+0x250>)
 800b1b4:	4193      	sbcs	r3, r2
 800b1b6:	f080 84d2 	bcs.w	800bb5e <__ieee754_pow+0x9d6>
 800b1ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1be:	4630      	mov	r0, r6
 800b1c0:	4639      	mov	r1, r7
 800b1c2:	f7f5 f82f 	bl	8000224 <__adddf3>
 800b1c6:	ec41 0b10 	vmov	d0, r0, r1
 800b1ca:	b009      	add	sp, #36	; 0x24
 800b1cc:	ecbd 8b06 	vpop	{d8-d10}
 800b1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d4:	4b81      	ldr	r3, [pc, #516]	; (800b3dc <__ieee754_pow+0x254>)
 800b1d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b1da:	429c      	cmp	r4, r3
 800b1dc:	ee10 aa10 	vmov	sl, s0
 800b1e0:	463d      	mov	r5, r7
 800b1e2:	dc06      	bgt.n	800b1f2 <__ieee754_pow+0x6a>
 800b1e4:	d101      	bne.n	800b1ea <__ieee754_pow+0x62>
 800b1e6:	2e00      	cmp	r6, #0
 800b1e8:	d1e7      	bne.n	800b1ba <__ieee754_pow+0x32>
 800b1ea:	4598      	cmp	r8, r3
 800b1ec:	dc01      	bgt.n	800b1f2 <__ieee754_pow+0x6a>
 800b1ee:	d10f      	bne.n	800b210 <__ieee754_pow+0x88>
 800b1f0:	b172      	cbz	r2, 800b210 <__ieee754_pow+0x88>
 800b1f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b1f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b1fa:	ea55 050a 	orrs.w	r5, r5, sl
 800b1fe:	d1dc      	bne.n	800b1ba <__ieee754_pow+0x32>
 800b200:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b204:	18db      	adds	r3, r3, r3
 800b206:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b20a:	4152      	adcs	r2, r2
 800b20c:	429d      	cmp	r5, r3
 800b20e:	e7d0      	b.n	800b1b2 <__ieee754_pow+0x2a>
 800b210:	2d00      	cmp	r5, #0
 800b212:	da3b      	bge.n	800b28c <__ieee754_pow+0x104>
 800b214:	4b72      	ldr	r3, [pc, #456]	; (800b3e0 <__ieee754_pow+0x258>)
 800b216:	4598      	cmp	r8, r3
 800b218:	dc51      	bgt.n	800b2be <__ieee754_pow+0x136>
 800b21a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b21e:	4598      	cmp	r8, r3
 800b220:	f340 84ac 	ble.w	800bb7c <__ieee754_pow+0x9f4>
 800b224:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b228:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b22c:	2b14      	cmp	r3, #20
 800b22e:	dd0f      	ble.n	800b250 <__ieee754_pow+0xc8>
 800b230:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b234:	fa22 f103 	lsr.w	r1, r2, r3
 800b238:	fa01 f303 	lsl.w	r3, r1, r3
 800b23c:	4293      	cmp	r3, r2
 800b23e:	f040 849d 	bne.w	800bb7c <__ieee754_pow+0x9f4>
 800b242:	f001 0101 	and.w	r1, r1, #1
 800b246:	f1c1 0302 	rsb	r3, r1, #2
 800b24a:	9304      	str	r3, [sp, #16]
 800b24c:	b182      	cbz	r2, 800b270 <__ieee754_pow+0xe8>
 800b24e:	e05f      	b.n	800b310 <__ieee754_pow+0x188>
 800b250:	2a00      	cmp	r2, #0
 800b252:	d15b      	bne.n	800b30c <__ieee754_pow+0x184>
 800b254:	f1c3 0314 	rsb	r3, r3, #20
 800b258:	fa48 f103 	asr.w	r1, r8, r3
 800b25c:	fa01 f303 	lsl.w	r3, r1, r3
 800b260:	4543      	cmp	r3, r8
 800b262:	f040 8488 	bne.w	800bb76 <__ieee754_pow+0x9ee>
 800b266:	f001 0101 	and.w	r1, r1, #1
 800b26a:	f1c1 0302 	rsb	r3, r1, #2
 800b26e:	9304      	str	r3, [sp, #16]
 800b270:	4b5c      	ldr	r3, [pc, #368]	; (800b3e4 <__ieee754_pow+0x25c>)
 800b272:	4598      	cmp	r8, r3
 800b274:	d132      	bne.n	800b2dc <__ieee754_pow+0x154>
 800b276:	f1b9 0f00 	cmp.w	r9, #0
 800b27a:	f280 8478 	bge.w	800bb6e <__ieee754_pow+0x9e6>
 800b27e:	4959      	ldr	r1, [pc, #356]	; (800b3e4 <__ieee754_pow+0x25c>)
 800b280:	4632      	mov	r2, r6
 800b282:	463b      	mov	r3, r7
 800b284:	2000      	movs	r0, #0
 800b286:	f7f5 faad 	bl	80007e4 <__aeabi_ddiv>
 800b28a:	e79c      	b.n	800b1c6 <__ieee754_pow+0x3e>
 800b28c:	2300      	movs	r3, #0
 800b28e:	9304      	str	r3, [sp, #16]
 800b290:	2a00      	cmp	r2, #0
 800b292:	d13d      	bne.n	800b310 <__ieee754_pow+0x188>
 800b294:	4b51      	ldr	r3, [pc, #324]	; (800b3dc <__ieee754_pow+0x254>)
 800b296:	4598      	cmp	r8, r3
 800b298:	d1ea      	bne.n	800b270 <__ieee754_pow+0xe8>
 800b29a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b29e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b2a2:	ea53 030a 	orrs.w	r3, r3, sl
 800b2a6:	f000 845a 	beq.w	800bb5e <__ieee754_pow+0x9d6>
 800b2aa:	4b4f      	ldr	r3, [pc, #316]	; (800b3e8 <__ieee754_pow+0x260>)
 800b2ac:	429c      	cmp	r4, r3
 800b2ae:	dd08      	ble.n	800b2c2 <__ieee754_pow+0x13a>
 800b2b0:	f1b9 0f00 	cmp.w	r9, #0
 800b2b4:	f2c0 8457 	blt.w	800bb66 <__ieee754_pow+0x9de>
 800b2b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2bc:	e783      	b.n	800b1c6 <__ieee754_pow+0x3e>
 800b2be:	2302      	movs	r3, #2
 800b2c0:	e7e5      	b.n	800b28e <__ieee754_pow+0x106>
 800b2c2:	f1b9 0f00 	cmp.w	r9, #0
 800b2c6:	f04f 0000 	mov.w	r0, #0
 800b2ca:	f04f 0100 	mov.w	r1, #0
 800b2ce:	f6bf af7a 	bge.w	800b1c6 <__ieee754_pow+0x3e>
 800b2d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b2d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b2da:	e774      	b.n	800b1c6 <__ieee754_pow+0x3e>
 800b2dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b2e0:	d106      	bne.n	800b2f0 <__ieee754_pow+0x168>
 800b2e2:	4632      	mov	r2, r6
 800b2e4:	463b      	mov	r3, r7
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	4639      	mov	r1, r7
 800b2ea:	f7f5 f951 	bl	8000590 <__aeabi_dmul>
 800b2ee:	e76a      	b.n	800b1c6 <__ieee754_pow+0x3e>
 800b2f0:	4b3e      	ldr	r3, [pc, #248]	; (800b3ec <__ieee754_pow+0x264>)
 800b2f2:	4599      	cmp	r9, r3
 800b2f4:	d10c      	bne.n	800b310 <__ieee754_pow+0x188>
 800b2f6:	2d00      	cmp	r5, #0
 800b2f8:	db0a      	blt.n	800b310 <__ieee754_pow+0x188>
 800b2fa:	ec47 6b10 	vmov	d0, r6, r7
 800b2fe:	b009      	add	sp, #36	; 0x24
 800b300:	ecbd 8b06 	vpop	{d8-d10}
 800b304:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b308:	f000 bc6c 	b.w	800bbe4 <__ieee754_sqrt>
 800b30c:	2300      	movs	r3, #0
 800b30e:	9304      	str	r3, [sp, #16]
 800b310:	ec47 6b10 	vmov	d0, r6, r7
 800b314:	f000 fe38 	bl	800bf88 <fabs>
 800b318:	ec51 0b10 	vmov	r0, r1, d0
 800b31c:	f1ba 0f00 	cmp.w	sl, #0
 800b320:	d129      	bne.n	800b376 <__ieee754_pow+0x1ee>
 800b322:	b124      	cbz	r4, 800b32e <__ieee754_pow+0x1a6>
 800b324:	4b2f      	ldr	r3, [pc, #188]	; (800b3e4 <__ieee754_pow+0x25c>)
 800b326:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d123      	bne.n	800b376 <__ieee754_pow+0x1ee>
 800b32e:	f1b9 0f00 	cmp.w	r9, #0
 800b332:	da05      	bge.n	800b340 <__ieee754_pow+0x1b8>
 800b334:	4602      	mov	r2, r0
 800b336:	460b      	mov	r3, r1
 800b338:	2000      	movs	r0, #0
 800b33a:	492a      	ldr	r1, [pc, #168]	; (800b3e4 <__ieee754_pow+0x25c>)
 800b33c:	f7f5 fa52 	bl	80007e4 <__aeabi_ddiv>
 800b340:	2d00      	cmp	r5, #0
 800b342:	f6bf af40 	bge.w	800b1c6 <__ieee754_pow+0x3e>
 800b346:	9b04      	ldr	r3, [sp, #16]
 800b348:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b34c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b350:	4323      	orrs	r3, r4
 800b352:	d108      	bne.n	800b366 <__ieee754_pow+0x1de>
 800b354:	4602      	mov	r2, r0
 800b356:	460b      	mov	r3, r1
 800b358:	4610      	mov	r0, r2
 800b35a:	4619      	mov	r1, r3
 800b35c:	f7f4 ff60 	bl	8000220 <__aeabi_dsub>
 800b360:	4602      	mov	r2, r0
 800b362:	460b      	mov	r3, r1
 800b364:	e78f      	b.n	800b286 <__ieee754_pow+0xfe>
 800b366:	9b04      	ldr	r3, [sp, #16]
 800b368:	2b01      	cmp	r3, #1
 800b36a:	f47f af2c 	bne.w	800b1c6 <__ieee754_pow+0x3e>
 800b36e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b372:	4619      	mov	r1, r3
 800b374:	e727      	b.n	800b1c6 <__ieee754_pow+0x3e>
 800b376:	0feb      	lsrs	r3, r5, #31
 800b378:	3b01      	subs	r3, #1
 800b37a:	9306      	str	r3, [sp, #24]
 800b37c:	9a06      	ldr	r2, [sp, #24]
 800b37e:	9b04      	ldr	r3, [sp, #16]
 800b380:	4313      	orrs	r3, r2
 800b382:	d102      	bne.n	800b38a <__ieee754_pow+0x202>
 800b384:	4632      	mov	r2, r6
 800b386:	463b      	mov	r3, r7
 800b388:	e7e6      	b.n	800b358 <__ieee754_pow+0x1d0>
 800b38a:	4b19      	ldr	r3, [pc, #100]	; (800b3f0 <__ieee754_pow+0x268>)
 800b38c:	4598      	cmp	r8, r3
 800b38e:	f340 80fb 	ble.w	800b588 <__ieee754_pow+0x400>
 800b392:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b396:	4598      	cmp	r8, r3
 800b398:	4b13      	ldr	r3, [pc, #76]	; (800b3e8 <__ieee754_pow+0x260>)
 800b39a:	dd0c      	ble.n	800b3b6 <__ieee754_pow+0x22e>
 800b39c:	429c      	cmp	r4, r3
 800b39e:	dc0f      	bgt.n	800b3c0 <__ieee754_pow+0x238>
 800b3a0:	f1b9 0f00 	cmp.w	r9, #0
 800b3a4:	da0f      	bge.n	800b3c6 <__ieee754_pow+0x23e>
 800b3a6:	2000      	movs	r0, #0
 800b3a8:	b009      	add	sp, #36	; 0x24
 800b3aa:	ecbd 8b06 	vpop	{d8-d10}
 800b3ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b2:	f000 bdbe 	b.w	800bf32 <__math_oflow>
 800b3b6:	429c      	cmp	r4, r3
 800b3b8:	dbf2      	blt.n	800b3a0 <__ieee754_pow+0x218>
 800b3ba:	4b0a      	ldr	r3, [pc, #40]	; (800b3e4 <__ieee754_pow+0x25c>)
 800b3bc:	429c      	cmp	r4, r3
 800b3be:	dd19      	ble.n	800b3f4 <__ieee754_pow+0x26c>
 800b3c0:	f1b9 0f00 	cmp.w	r9, #0
 800b3c4:	dcef      	bgt.n	800b3a6 <__ieee754_pow+0x21e>
 800b3c6:	2000      	movs	r0, #0
 800b3c8:	b009      	add	sp, #36	; 0x24
 800b3ca:	ecbd 8b06 	vpop	{d8-d10}
 800b3ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d2:	f000 bda5 	b.w	800bf20 <__math_uflow>
 800b3d6:	bf00      	nop
 800b3d8:	fff00000 	.word	0xfff00000
 800b3dc:	7ff00000 	.word	0x7ff00000
 800b3e0:	433fffff 	.word	0x433fffff
 800b3e4:	3ff00000 	.word	0x3ff00000
 800b3e8:	3fefffff 	.word	0x3fefffff
 800b3ec:	3fe00000 	.word	0x3fe00000
 800b3f0:	41e00000 	.word	0x41e00000
 800b3f4:	4b60      	ldr	r3, [pc, #384]	; (800b578 <__ieee754_pow+0x3f0>)
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f7f4 ff12 	bl	8000220 <__aeabi_dsub>
 800b3fc:	a354      	add	r3, pc, #336	; (adr r3, 800b550 <__ieee754_pow+0x3c8>)
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	4604      	mov	r4, r0
 800b404:	460d      	mov	r5, r1
 800b406:	f7f5 f8c3 	bl	8000590 <__aeabi_dmul>
 800b40a:	a353      	add	r3, pc, #332	; (adr r3, 800b558 <__ieee754_pow+0x3d0>)
 800b40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b410:	4606      	mov	r6, r0
 800b412:	460f      	mov	r7, r1
 800b414:	4620      	mov	r0, r4
 800b416:	4629      	mov	r1, r5
 800b418:	f7f5 f8ba 	bl	8000590 <__aeabi_dmul>
 800b41c:	4b57      	ldr	r3, [pc, #348]	; (800b57c <__ieee754_pow+0x3f4>)
 800b41e:	4682      	mov	sl, r0
 800b420:	468b      	mov	fp, r1
 800b422:	2200      	movs	r2, #0
 800b424:	4620      	mov	r0, r4
 800b426:	4629      	mov	r1, r5
 800b428:	f7f5 f8b2 	bl	8000590 <__aeabi_dmul>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	a14b      	add	r1, pc, #300	; (adr r1, 800b560 <__ieee754_pow+0x3d8>)
 800b432:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b436:	f7f4 fef3 	bl	8000220 <__aeabi_dsub>
 800b43a:	4622      	mov	r2, r4
 800b43c:	462b      	mov	r3, r5
 800b43e:	f7f5 f8a7 	bl	8000590 <__aeabi_dmul>
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	2000      	movs	r0, #0
 800b448:	494d      	ldr	r1, [pc, #308]	; (800b580 <__ieee754_pow+0x3f8>)
 800b44a:	f7f4 fee9 	bl	8000220 <__aeabi_dsub>
 800b44e:	4622      	mov	r2, r4
 800b450:	4680      	mov	r8, r0
 800b452:	4689      	mov	r9, r1
 800b454:	462b      	mov	r3, r5
 800b456:	4620      	mov	r0, r4
 800b458:	4629      	mov	r1, r5
 800b45a:	f7f5 f899 	bl	8000590 <__aeabi_dmul>
 800b45e:	4602      	mov	r2, r0
 800b460:	460b      	mov	r3, r1
 800b462:	4640      	mov	r0, r8
 800b464:	4649      	mov	r1, r9
 800b466:	f7f5 f893 	bl	8000590 <__aeabi_dmul>
 800b46a:	a33f      	add	r3, pc, #252	; (adr r3, 800b568 <__ieee754_pow+0x3e0>)
 800b46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b470:	f7f5 f88e 	bl	8000590 <__aeabi_dmul>
 800b474:	4602      	mov	r2, r0
 800b476:	460b      	mov	r3, r1
 800b478:	4650      	mov	r0, sl
 800b47a:	4659      	mov	r1, fp
 800b47c:	f7f4 fed0 	bl	8000220 <__aeabi_dsub>
 800b480:	4602      	mov	r2, r0
 800b482:	460b      	mov	r3, r1
 800b484:	4680      	mov	r8, r0
 800b486:	4689      	mov	r9, r1
 800b488:	4630      	mov	r0, r6
 800b48a:	4639      	mov	r1, r7
 800b48c:	f7f4 feca 	bl	8000224 <__adddf3>
 800b490:	2000      	movs	r0, #0
 800b492:	4632      	mov	r2, r6
 800b494:	463b      	mov	r3, r7
 800b496:	4604      	mov	r4, r0
 800b498:	460d      	mov	r5, r1
 800b49a:	f7f4 fec1 	bl	8000220 <__aeabi_dsub>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	4640      	mov	r0, r8
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	f7f4 febb 	bl	8000220 <__aeabi_dsub>
 800b4aa:	9b04      	ldr	r3, [sp, #16]
 800b4ac:	9a06      	ldr	r2, [sp, #24]
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	4682      	mov	sl, r0
 800b4b4:	468b      	mov	fp, r1
 800b4b6:	f040 81e7 	bne.w	800b888 <__ieee754_pow+0x700>
 800b4ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b570 <__ieee754_pow+0x3e8>
 800b4be:	eeb0 8a47 	vmov.f32	s16, s14
 800b4c2:	eef0 8a67 	vmov.f32	s17, s15
 800b4c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b4ca:	2600      	movs	r6, #0
 800b4cc:	4632      	mov	r2, r6
 800b4ce:	463b      	mov	r3, r7
 800b4d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4d4:	f7f4 fea4 	bl	8000220 <__aeabi_dsub>
 800b4d8:	4622      	mov	r2, r4
 800b4da:	462b      	mov	r3, r5
 800b4dc:	f7f5 f858 	bl	8000590 <__aeabi_dmul>
 800b4e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4e4:	4680      	mov	r8, r0
 800b4e6:	4689      	mov	r9, r1
 800b4e8:	4650      	mov	r0, sl
 800b4ea:	4659      	mov	r1, fp
 800b4ec:	f7f5 f850 	bl	8000590 <__aeabi_dmul>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4640      	mov	r0, r8
 800b4f6:	4649      	mov	r1, r9
 800b4f8:	f7f4 fe94 	bl	8000224 <__adddf3>
 800b4fc:	4632      	mov	r2, r6
 800b4fe:	463b      	mov	r3, r7
 800b500:	4680      	mov	r8, r0
 800b502:	4689      	mov	r9, r1
 800b504:	4620      	mov	r0, r4
 800b506:	4629      	mov	r1, r5
 800b508:	f7f5 f842 	bl	8000590 <__aeabi_dmul>
 800b50c:	460b      	mov	r3, r1
 800b50e:	4604      	mov	r4, r0
 800b510:	460d      	mov	r5, r1
 800b512:	4602      	mov	r2, r0
 800b514:	4649      	mov	r1, r9
 800b516:	4640      	mov	r0, r8
 800b518:	f7f4 fe84 	bl	8000224 <__adddf3>
 800b51c:	4b19      	ldr	r3, [pc, #100]	; (800b584 <__ieee754_pow+0x3fc>)
 800b51e:	4299      	cmp	r1, r3
 800b520:	ec45 4b19 	vmov	d9, r4, r5
 800b524:	4606      	mov	r6, r0
 800b526:	460f      	mov	r7, r1
 800b528:	468b      	mov	fp, r1
 800b52a:	f340 82f1 	ble.w	800bb10 <__ieee754_pow+0x988>
 800b52e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b532:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b536:	4303      	orrs	r3, r0
 800b538:	f000 81e4 	beq.w	800b904 <__ieee754_pow+0x77c>
 800b53c:	ec51 0b18 	vmov	r0, r1, d8
 800b540:	2200      	movs	r2, #0
 800b542:	2300      	movs	r3, #0
 800b544:	f7f5 fa96 	bl	8000a74 <__aeabi_dcmplt>
 800b548:	3800      	subs	r0, #0
 800b54a:	bf18      	it	ne
 800b54c:	2001      	movne	r0, #1
 800b54e:	e72b      	b.n	800b3a8 <__ieee754_pow+0x220>
 800b550:	60000000 	.word	0x60000000
 800b554:	3ff71547 	.word	0x3ff71547
 800b558:	f85ddf44 	.word	0xf85ddf44
 800b55c:	3e54ae0b 	.word	0x3e54ae0b
 800b560:	55555555 	.word	0x55555555
 800b564:	3fd55555 	.word	0x3fd55555
 800b568:	652b82fe 	.word	0x652b82fe
 800b56c:	3ff71547 	.word	0x3ff71547
 800b570:	00000000 	.word	0x00000000
 800b574:	bff00000 	.word	0xbff00000
 800b578:	3ff00000 	.word	0x3ff00000
 800b57c:	3fd00000 	.word	0x3fd00000
 800b580:	3fe00000 	.word	0x3fe00000
 800b584:	408fffff 	.word	0x408fffff
 800b588:	4bd5      	ldr	r3, [pc, #852]	; (800b8e0 <__ieee754_pow+0x758>)
 800b58a:	402b      	ands	r3, r5
 800b58c:	2200      	movs	r2, #0
 800b58e:	b92b      	cbnz	r3, 800b59c <__ieee754_pow+0x414>
 800b590:	4bd4      	ldr	r3, [pc, #848]	; (800b8e4 <__ieee754_pow+0x75c>)
 800b592:	f7f4 fffd 	bl	8000590 <__aeabi_dmul>
 800b596:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b59a:	460c      	mov	r4, r1
 800b59c:	1523      	asrs	r3, r4, #20
 800b59e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b5a2:	4413      	add	r3, r2
 800b5a4:	9305      	str	r3, [sp, #20]
 800b5a6:	4bd0      	ldr	r3, [pc, #832]	; (800b8e8 <__ieee754_pow+0x760>)
 800b5a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b5ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b5b0:	429c      	cmp	r4, r3
 800b5b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b5b6:	dd08      	ble.n	800b5ca <__ieee754_pow+0x442>
 800b5b8:	4bcc      	ldr	r3, [pc, #816]	; (800b8ec <__ieee754_pow+0x764>)
 800b5ba:	429c      	cmp	r4, r3
 800b5bc:	f340 8162 	ble.w	800b884 <__ieee754_pow+0x6fc>
 800b5c0:	9b05      	ldr	r3, [sp, #20]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	9305      	str	r3, [sp, #20]
 800b5c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b5ca:	2400      	movs	r4, #0
 800b5cc:	00e3      	lsls	r3, r4, #3
 800b5ce:	9307      	str	r3, [sp, #28]
 800b5d0:	4bc7      	ldr	r3, [pc, #796]	; (800b8f0 <__ieee754_pow+0x768>)
 800b5d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5d6:	ed93 7b00 	vldr	d7, [r3]
 800b5da:	4629      	mov	r1, r5
 800b5dc:	ec53 2b17 	vmov	r2, r3, d7
 800b5e0:	eeb0 9a47 	vmov.f32	s18, s14
 800b5e4:	eef0 9a67 	vmov.f32	s19, s15
 800b5e8:	4682      	mov	sl, r0
 800b5ea:	f7f4 fe19 	bl	8000220 <__aeabi_dsub>
 800b5ee:	4652      	mov	r2, sl
 800b5f0:	4606      	mov	r6, r0
 800b5f2:	460f      	mov	r7, r1
 800b5f4:	462b      	mov	r3, r5
 800b5f6:	ec51 0b19 	vmov	r0, r1, d9
 800b5fa:	f7f4 fe13 	bl	8000224 <__adddf3>
 800b5fe:	4602      	mov	r2, r0
 800b600:	460b      	mov	r3, r1
 800b602:	2000      	movs	r0, #0
 800b604:	49bb      	ldr	r1, [pc, #748]	; (800b8f4 <__ieee754_pow+0x76c>)
 800b606:	f7f5 f8ed 	bl	80007e4 <__aeabi_ddiv>
 800b60a:	ec41 0b1a 	vmov	d10, r0, r1
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	4630      	mov	r0, r6
 800b614:	4639      	mov	r1, r7
 800b616:	f7f4 ffbb 	bl	8000590 <__aeabi_dmul>
 800b61a:	2300      	movs	r3, #0
 800b61c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b620:	9302      	str	r3, [sp, #8]
 800b622:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b626:	46ab      	mov	fp, r5
 800b628:	106d      	asrs	r5, r5, #1
 800b62a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b62e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b632:	ec41 0b18 	vmov	d8, r0, r1
 800b636:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b63a:	2200      	movs	r2, #0
 800b63c:	4640      	mov	r0, r8
 800b63e:	4649      	mov	r1, r9
 800b640:	4614      	mov	r4, r2
 800b642:	461d      	mov	r5, r3
 800b644:	f7f4 ffa4 	bl	8000590 <__aeabi_dmul>
 800b648:	4602      	mov	r2, r0
 800b64a:	460b      	mov	r3, r1
 800b64c:	4630      	mov	r0, r6
 800b64e:	4639      	mov	r1, r7
 800b650:	f7f4 fde6 	bl	8000220 <__aeabi_dsub>
 800b654:	ec53 2b19 	vmov	r2, r3, d9
 800b658:	4606      	mov	r6, r0
 800b65a:	460f      	mov	r7, r1
 800b65c:	4620      	mov	r0, r4
 800b65e:	4629      	mov	r1, r5
 800b660:	f7f4 fdde 	bl	8000220 <__aeabi_dsub>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	4650      	mov	r0, sl
 800b66a:	4659      	mov	r1, fp
 800b66c:	f7f4 fdd8 	bl	8000220 <__aeabi_dsub>
 800b670:	4642      	mov	r2, r8
 800b672:	464b      	mov	r3, r9
 800b674:	f7f4 ff8c 	bl	8000590 <__aeabi_dmul>
 800b678:	4602      	mov	r2, r0
 800b67a:	460b      	mov	r3, r1
 800b67c:	4630      	mov	r0, r6
 800b67e:	4639      	mov	r1, r7
 800b680:	f7f4 fdce 	bl	8000220 <__aeabi_dsub>
 800b684:	ec53 2b1a 	vmov	r2, r3, d10
 800b688:	f7f4 ff82 	bl	8000590 <__aeabi_dmul>
 800b68c:	ec53 2b18 	vmov	r2, r3, d8
 800b690:	ec41 0b19 	vmov	d9, r0, r1
 800b694:	ec51 0b18 	vmov	r0, r1, d8
 800b698:	f7f4 ff7a 	bl	8000590 <__aeabi_dmul>
 800b69c:	a37c      	add	r3, pc, #496	; (adr r3, 800b890 <__ieee754_pow+0x708>)
 800b69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	460d      	mov	r5, r1
 800b6a6:	f7f4 ff73 	bl	8000590 <__aeabi_dmul>
 800b6aa:	a37b      	add	r3, pc, #492	; (adr r3, 800b898 <__ieee754_pow+0x710>)
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	f7f4 fdb8 	bl	8000224 <__adddf3>
 800b6b4:	4622      	mov	r2, r4
 800b6b6:	462b      	mov	r3, r5
 800b6b8:	f7f4 ff6a 	bl	8000590 <__aeabi_dmul>
 800b6bc:	a378      	add	r3, pc, #480	; (adr r3, 800b8a0 <__ieee754_pow+0x718>)
 800b6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c2:	f7f4 fdaf 	bl	8000224 <__adddf3>
 800b6c6:	4622      	mov	r2, r4
 800b6c8:	462b      	mov	r3, r5
 800b6ca:	f7f4 ff61 	bl	8000590 <__aeabi_dmul>
 800b6ce:	a376      	add	r3, pc, #472	; (adr r3, 800b8a8 <__ieee754_pow+0x720>)
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	f7f4 fda6 	bl	8000224 <__adddf3>
 800b6d8:	4622      	mov	r2, r4
 800b6da:	462b      	mov	r3, r5
 800b6dc:	f7f4 ff58 	bl	8000590 <__aeabi_dmul>
 800b6e0:	a373      	add	r3, pc, #460	; (adr r3, 800b8b0 <__ieee754_pow+0x728>)
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	f7f4 fd9d 	bl	8000224 <__adddf3>
 800b6ea:	4622      	mov	r2, r4
 800b6ec:	462b      	mov	r3, r5
 800b6ee:	f7f4 ff4f 	bl	8000590 <__aeabi_dmul>
 800b6f2:	a371      	add	r3, pc, #452	; (adr r3, 800b8b8 <__ieee754_pow+0x730>)
 800b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f8:	f7f4 fd94 	bl	8000224 <__adddf3>
 800b6fc:	4622      	mov	r2, r4
 800b6fe:	4606      	mov	r6, r0
 800b700:	460f      	mov	r7, r1
 800b702:	462b      	mov	r3, r5
 800b704:	4620      	mov	r0, r4
 800b706:	4629      	mov	r1, r5
 800b708:	f7f4 ff42 	bl	8000590 <__aeabi_dmul>
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	4630      	mov	r0, r6
 800b712:	4639      	mov	r1, r7
 800b714:	f7f4 ff3c 	bl	8000590 <__aeabi_dmul>
 800b718:	4642      	mov	r2, r8
 800b71a:	4604      	mov	r4, r0
 800b71c:	460d      	mov	r5, r1
 800b71e:	464b      	mov	r3, r9
 800b720:	ec51 0b18 	vmov	r0, r1, d8
 800b724:	f7f4 fd7e 	bl	8000224 <__adddf3>
 800b728:	ec53 2b19 	vmov	r2, r3, d9
 800b72c:	f7f4 ff30 	bl	8000590 <__aeabi_dmul>
 800b730:	4622      	mov	r2, r4
 800b732:	462b      	mov	r3, r5
 800b734:	f7f4 fd76 	bl	8000224 <__adddf3>
 800b738:	4642      	mov	r2, r8
 800b73a:	4682      	mov	sl, r0
 800b73c:	468b      	mov	fp, r1
 800b73e:	464b      	mov	r3, r9
 800b740:	4640      	mov	r0, r8
 800b742:	4649      	mov	r1, r9
 800b744:	f7f4 ff24 	bl	8000590 <__aeabi_dmul>
 800b748:	4b6b      	ldr	r3, [pc, #428]	; (800b8f8 <__ieee754_pow+0x770>)
 800b74a:	2200      	movs	r2, #0
 800b74c:	4606      	mov	r6, r0
 800b74e:	460f      	mov	r7, r1
 800b750:	f7f4 fd68 	bl	8000224 <__adddf3>
 800b754:	4652      	mov	r2, sl
 800b756:	465b      	mov	r3, fp
 800b758:	f7f4 fd64 	bl	8000224 <__adddf3>
 800b75c:	2000      	movs	r0, #0
 800b75e:	4604      	mov	r4, r0
 800b760:	460d      	mov	r5, r1
 800b762:	4602      	mov	r2, r0
 800b764:	460b      	mov	r3, r1
 800b766:	4640      	mov	r0, r8
 800b768:	4649      	mov	r1, r9
 800b76a:	f7f4 ff11 	bl	8000590 <__aeabi_dmul>
 800b76e:	4b62      	ldr	r3, [pc, #392]	; (800b8f8 <__ieee754_pow+0x770>)
 800b770:	4680      	mov	r8, r0
 800b772:	4689      	mov	r9, r1
 800b774:	2200      	movs	r2, #0
 800b776:	4620      	mov	r0, r4
 800b778:	4629      	mov	r1, r5
 800b77a:	f7f4 fd51 	bl	8000220 <__aeabi_dsub>
 800b77e:	4632      	mov	r2, r6
 800b780:	463b      	mov	r3, r7
 800b782:	f7f4 fd4d 	bl	8000220 <__aeabi_dsub>
 800b786:	4602      	mov	r2, r0
 800b788:	460b      	mov	r3, r1
 800b78a:	4650      	mov	r0, sl
 800b78c:	4659      	mov	r1, fp
 800b78e:	f7f4 fd47 	bl	8000220 <__aeabi_dsub>
 800b792:	ec53 2b18 	vmov	r2, r3, d8
 800b796:	f7f4 fefb 	bl	8000590 <__aeabi_dmul>
 800b79a:	4622      	mov	r2, r4
 800b79c:	4606      	mov	r6, r0
 800b79e:	460f      	mov	r7, r1
 800b7a0:	462b      	mov	r3, r5
 800b7a2:	ec51 0b19 	vmov	r0, r1, d9
 800b7a6:	f7f4 fef3 	bl	8000590 <__aeabi_dmul>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	4630      	mov	r0, r6
 800b7b0:	4639      	mov	r1, r7
 800b7b2:	f7f4 fd37 	bl	8000224 <__adddf3>
 800b7b6:	4606      	mov	r6, r0
 800b7b8:	460f      	mov	r7, r1
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4640      	mov	r0, r8
 800b7c0:	4649      	mov	r1, r9
 800b7c2:	f7f4 fd2f 	bl	8000224 <__adddf3>
 800b7c6:	a33e      	add	r3, pc, #248	; (adr r3, 800b8c0 <__ieee754_pow+0x738>)
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	460d      	mov	r5, r1
 800b7d2:	f7f4 fedd 	bl	8000590 <__aeabi_dmul>
 800b7d6:	4642      	mov	r2, r8
 800b7d8:	ec41 0b18 	vmov	d8, r0, r1
 800b7dc:	464b      	mov	r3, r9
 800b7de:	4620      	mov	r0, r4
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	f7f4 fd1d 	bl	8000220 <__aeabi_dsub>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	4639      	mov	r1, r7
 800b7ee:	f7f4 fd17 	bl	8000220 <__aeabi_dsub>
 800b7f2:	a335      	add	r3, pc, #212	; (adr r3, 800b8c8 <__ieee754_pow+0x740>)
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	f7f4 feca 	bl	8000590 <__aeabi_dmul>
 800b7fc:	a334      	add	r3, pc, #208	; (adr r3, 800b8d0 <__ieee754_pow+0x748>)
 800b7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b802:	4606      	mov	r6, r0
 800b804:	460f      	mov	r7, r1
 800b806:	4620      	mov	r0, r4
 800b808:	4629      	mov	r1, r5
 800b80a:	f7f4 fec1 	bl	8000590 <__aeabi_dmul>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	4630      	mov	r0, r6
 800b814:	4639      	mov	r1, r7
 800b816:	f7f4 fd05 	bl	8000224 <__adddf3>
 800b81a:	9a07      	ldr	r2, [sp, #28]
 800b81c:	4b37      	ldr	r3, [pc, #220]	; (800b8fc <__ieee754_pow+0x774>)
 800b81e:	4413      	add	r3, r2
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	f7f4 fcfe 	bl	8000224 <__adddf3>
 800b828:	4682      	mov	sl, r0
 800b82a:	9805      	ldr	r0, [sp, #20]
 800b82c:	468b      	mov	fp, r1
 800b82e:	f7f4 fe45 	bl	80004bc <__aeabi_i2d>
 800b832:	9a07      	ldr	r2, [sp, #28]
 800b834:	4b32      	ldr	r3, [pc, #200]	; (800b900 <__ieee754_pow+0x778>)
 800b836:	4413      	add	r3, r2
 800b838:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b83c:	4606      	mov	r6, r0
 800b83e:	460f      	mov	r7, r1
 800b840:	4652      	mov	r2, sl
 800b842:	465b      	mov	r3, fp
 800b844:	ec51 0b18 	vmov	r0, r1, d8
 800b848:	f7f4 fcec 	bl	8000224 <__adddf3>
 800b84c:	4642      	mov	r2, r8
 800b84e:	464b      	mov	r3, r9
 800b850:	f7f4 fce8 	bl	8000224 <__adddf3>
 800b854:	4632      	mov	r2, r6
 800b856:	463b      	mov	r3, r7
 800b858:	f7f4 fce4 	bl	8000224 <__adddf3>
 800b85c:	2000      	movs	r0, #0
 800b85e:	4632      	mov	r2, r6
 800b860:	463b      	mov	r3, r7
 800b862:	4604      	mov	r4, r0
 800b864:	460d      	mov	r5, r1
 800b866:	f7f4 fcdb 	bl	8000220 <__aeabi_dsub>
 800b86a:	4642      	mov	r2, r8
 800b86c:	464b      	mov	r3, r9
 800b86e:	f7f4 fcd7 	bl	8000220 <__aeabi_dsub>
 800b872:	ec53 2b18 	vmov	r2, r3, d8
 800b876:	f7f4 fcd3 	bl	8000220 <__aeabi_dsub>
 800b87a:	4602      	mov	r2, r0
 800b87c:	460b      	mov	r3, r1
 800b87e:	4650      	mov	r0, sl
 800b880:	4659      	mov	r1, fp
 800b882:	e610      	b.n	800b4a6 <__ieee754_pow+0x31e>
 800b884:	2401      	movs	r4, #1
 800b886:	e6a1      	b.n	800b5cc <__ieee754_pow+0x444>
 800b888:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b8d8 <__ieee754_pow+0x750>
 800b88c:	e617      	b.n	800b4be <__ieee754_pow+0x336>
 800b88e:	bf00      	nop
 800b890:	4a454eef 	.word	0x4a454eef
 800b894:	3fca7e28 	.word	0x3fca7e28
 800b898:	93c9db65 	.word	0x93c9db65
 800b89c:	3fcd864a 	.word	0x3fcd864a
 800b8a0:	a91d4101 	.word	0xa91d4101
 800b8a4:	3fd17460 	.word	0x3fd17460
 800b8a8:	518f264d 	.word	0x518f264d
 800b8ac:	3fd55555 	.word	0x3fd55555
 800b8b0:	db6fabff 	.word	0xdb6fabff
 800b8b4:	3fdb6db6 	.word	0x3fdb6db6
 800b8b8:	33333303 	.word	0x33333303
 800b8bc:	3fe33333 	.word	0x3fe33333
 800b8c0:	e0000000 	.word	0xe0000000
 800b8c4:	3feec709 	.word	0x3feec709
 800b8c8:	dc3a03fd 	.word	0xdc3a03fd
 800b8cc:	3feec709 	.word	0x3feec709
 800b8d0:	145b01f5 	.word	0x145b01f5
 800b8d4:	be3e2fe0 	.word	0xbe3e2fe0
 800b8d8:	00000000 	.word	0x00000000
 800b8dc:	3ff00000 	.word	0x3ff00000
 800b8e0:	7ff00000 	.word	0x7ff00000
 800b8e4:	43400000 	.word	0x43400000
 800b8e8:	0003988e 	.word	0x0003988e
 800b8ec:	000bb679 	.word	0x000bb679
 800b8f0:	0800c430 	.word	0x0800c430
 800b8f4:	3ff00000 	.word	0x3ff00000
 800b8f8:	40080000 	.word	0x40080000
 800b8fc:	0800c450 	.word	0x0800c450
 800b900:	0800c440 	.word	0x0800c440
 800b904:	a3b5      	add	r3, pc, #724	; (adr r3, 800bbdc <__ieee754_pow+0xa54>)
 800b906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90a:	4640      	mov	r0, r8
 800b90c:	4649      	mov	r1, r9
 800b90e:	f7f4 fc89 	bl	8000224 <__adddf3>
 800b912:	4622      	mov	r2, r4
 800b914:	ec41 0b1a 	vmov	d10, r0, r1
 800b918:	462b      	mov	r3, r5
 800b91a:	4630      	mov	r0, r6
 800b91c:	4639      	mov	r1, r7
 800b91e:	f7f4 fc7f 	bl	8000220 <__aeabi_dsub>
 800b922:	4602      	mov	r2, r0
 800b924:	460b      	mov	r3, r1
 800b926:	ec51 0b1a 	vmov	r0, r1, d10
 800b92a:	f7f5 f8c1 	bl	8000ab0 <__aeabi_dcmpgt>
 800b92e:	2800      	cmp	r0, #0
 800b930:	f47f ae04 	bne.w	800b53c <__ieee754_pow+0x3b4>
 800b934:	4aa4      	ldr	r2, [pc, #656]	; (800bbc8 <__ieee754_pow+0xa40>)
 800b936:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b93a:	4293      	cmp	r3, r2
 800b93c:	f340 8108 	ble.w	800bb50 <__ieee754_pow+0x9c8>
 800b940:	151b      	asrs	r3, r3, #20
 800b942:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b946:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b94a:	fa4a f303 	asr.w	r3, sl, r3
 800b94e:	445b      	add	r3, fp
 800b950:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b954:	4e9d      	ldr	r6, [pc, #628]	; (800bbcc <__ieee754_pow+0xa44>)
 800b956:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b95a:	4116      	asrs	r6, r2
 800b95c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b960:	2000      	movs	r0, #0
 800b962:	ea23 0106 	bic.w	r1, r3, r6
 800b966:	f1c2 0214 	rsb	r2, r2, #20
 800b96a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b96e:	fa4a fa02 	asr.w	sl, sl, r2
 800b972:	f1bb 0f00 	cmp.w	fp, #0
 800b976:	4602      	mov	r2, r0
 800b978:	460b      	mov	r3, r1
 800b97a:	4620      	mov	r0, r4
 800b97c:	4629      	mov	r1, r5
 800b97e:	bfb8      	it	lt
 800b980:	f1ca 0a00 	rsblt	sl, sl, #0
 800b984:	f7f4 fc4c 	bl	8000220 <__aeabi_dsub>
 800b988:	ec41 0b19 	vmov	d9, r0, r1
 800b98c:	4642      	mov	r2, r8
 800b98e:	464b      	mov	r3, r9
 800b990:	ec51 0b19 	vmov	r0, r1, d9
 800b994:	f7f4 fc46 	bl	8000224 <__adddf3>
 800b998:	a37b      	add	r3, pc, #492	; (adr r3, 800bb88 <__ieee754_pow+0xa00>)
 800b99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99e:	2000      	movs	r0, #0
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	460d      	mov	r5, r1
 800b9a4:	f7f4 fdf4 	bl	8000590 <__aeabi_dmul>
 800b9a8:	ec53 2b19 	vmov	r2, r3, d9
 800b9ac:	4606      	mov	r6, r0
 800b9ae:	460f      	mov	r7, r1
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	f7f4 fc34 	bl	8000220 <__aeabi_dsub>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	4640      	mov	r0, r8
 800b9be:	4649      	mov	r1, r9
 800b9c0:	f7f4 fc2e 	bl	8000220 <__aeabi_dsub>
 800b9c4:	a372      	add	r3, pc, #456	; (adr r3, 800bb90 <__ieee754_pow+0xa08>)
 800b9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ca:	f7f4 fde1 	bl	8000590 <__aeabi_dmul>
 800b9ce:	a372      	add	r3, pc, #456	; (adr r3, 800bb98 <__ieee754_pow+0xa10>)
 800b9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d4:	4680      	mov	r8, r0
 800b9d6:	4689      	mov	r9, r1
 800b9d8:	4620      	mov	r0, r4
 800b9da:	4629      	mov	r1, r5
 800b9dc:	f7f4 fdd8 	bl	8000590 <__aeabi_dmul>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4640      	mov	r0, r8
 800b9e6:	4649      	mov	r1, r9
 800b9e8:	f7f4 fc1c 	bl	8000224 <__adddf3>
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	460d      	mov	r5, r1
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	4639      	mov	r1, r7
 800b9f8:	f7f4 fc14 	bl	8000224 <__adddf3>
 800b9fc:	4632      	mov	r2, r6
 800b9fe:	463b      	mov	r3, r7
 800ba00:	4680      	mov	r8, r0
 800ba02:	4689      	mov	r9, r1
 800ba04:	f7f4 fc0c 	bl	8000220 <__aeabi_dsub>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	4629      	mov	r1, r5
 800ba10:	f7f4 fc06 	bl	8000220 <__aeabi_dsub>
 800ba14:	4642      	mov	r2, r8
 800ba16:	4606      	mov	r6, r0
 800ba18:	460f      	mov	r7, r1
 800ba1a:	464b      	mov	r3, r9
 800ba1c:	4640      	mov	r0, r8
 800ba1e:	4649      	mov	r1, r9
 800ba20:	f7f4 fdb6 	bl	8000590 <__aeabi_dmul>
 800ba24:	a35e      	add	r3, pc, #376	; (adr r3, 800bba0 <__ieee754_pow+0xa18>)
 800ba26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2a:	4604      	mov	r4, r0
 800ba2c:	460d      	mov	r5, r1
 800ba2e:	f7f4 fdaf 	bl	8000590 <__aeabi_dmul>
 800ba32:	a35d      	add	r3, pc, #372	; (adr r3, 800bba8 <__ieee754_pow+0xa20>)
 800ba34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba38:	f7f4 fbf2 	bl	8000220 <__aeabi_dsub>
 800ba3c:	4622      	mov	r2, r4
 800ba3e:	462b      	mov	r3, r5
 800ba40:	f7f4 fda6 	bl	8000590 <__aeabi_dmul>
 800ba44:	a35a      	add	r3, pc, #360	; (adr r3, 800bbb0 <__ieee754_pow+0xa28>)
 800ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4a:	f7f4 fbeb 	bl	8000224 <__adddf3>
 800ba4e:	4622      	mov	r2, r4
 800ba50:	462b      	mov	r3, r5
 800ba52:	f7f4 fd9d 	bl	8000590 <__aeabi_dmul>
 800ba56:	a358      	add	r3, pc, #352	; (adr r3, 800bbb8 <__ieee754_pow+0xa30>)
 800ba58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5c:	f7f4 fbe0 	bl	8000220 <__aeabi_dsub>
 800ba60:	4622      	mov	r2, r4
 800ba62:	462b      	mov	r3, r5
 800ba64:	f7f4 fd94 	bl	8000590 <__aeabi_dmul>
 800ba68:	a355      	add	r3, pc, #340	; (adr r3, 800bbc0 <__ieee754_pow+0xa38>)
 800ba6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6e:	f7f4 fbd9 	bl	8000224 <__adddf3>
 800ba72:	4622      	mov	r2, r4
 800ba74:	462b      	mov	r3, r5
 800ba76:	f7f4 fd8b 	bl	8000590 <__aeabi_dmul>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	4640      	mov	r0, r8
 800ba80:	4649      	mov	r1, r9
 800ba82:	f7f4 fbcd 	bl	8000220 <__aeabi_dsub>
 800ba86:	4604      	mov	r4, r0
 800ba88:	460d      	mov	r5, r1
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	4640      	mov	r0, r8
 800ba90:	4649      	mov	r1, r9
 800ba92:	f7f4 fd7d 	bl	8000590 <__aeabi_dmul>
 800ba96:	2200      	movs	r2, #0
 800ba98:	ec41 0b19 	vmov	d9, r0, r1
 800ba9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800baa0:	4620      	mov	r0, r4
 800baa2:	4629      	mov	r1, r5
 800baa4:	f7f4 fbbc 	bl	8000220 <__aeabi_dsub>
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	ec51 0b19 	vmov	r0, r1, d9
 800bab0:	f7f4 fe98 	bl	80007e4 <__aeabi_ddiv>
 800bab4:	4632      	mov	r2, r6
 800bab6:	4604      	mov	r4, r0
 800bab8:	460d      	mov	r5, r1
 800baba:	463b      	mov	r3, r7
 800babc:	4640      	mov	r0, r8
 800babe:	4649      	mov	r1, r9
 800bac0:	f7f4 fd66 	bl	8000590 <__aeabi_dmul>
 800bac4:	4632      	mov	r2, r6
 800bac6:	463b      	mov	r3, r7
 800bac8:	f7f4 fbac 	bl	8000224 <__adddf3>
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	4620      	mov	r0, r4
 800bad2:	4629      	mov	r1, r5
 800bad4:	f7f4 fba4 	bl	8000220 <__aeabi_dsub>
 800bad8:	4642      	mov	r2, r8
 800bada:	464b      	mov	r3, r9
 800badc:	f7f4 fba0 	bl	8000220 <__aeabi_dsub>
 800bae0:	460b      	mov	r3, r1
 800bae2:	4602      	mov	r2, r0
 800bae4:	493a      	ldr	r1, [pc, #232]	; (800bbd0 <__ieee754_pow+0xa48>)
 800bae6:	2000      	movs	r0, #0
 800bae8:	f7f4 fb9a 	bl	8000220 <__aeabi_dsub>
 800baec:	ec41 0b10 	vmov	d0, r0, r1
 800baf0:	ee10 3a90 	vmov	r3, s1
 800baf4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800baf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bafc:	da2b      	bge.n	800bb56 <__ieee754_pow+0x9ce>
 800bafe:	4650      	mov	r0, sl
 800bb00:	f000 fa56 	bl	800bfb0 <scalbn>
 800bb04:	ec51 0b10 	vmov	r0, r1, d0
 800bb08:	ec53 2b18 	vmov	r2, r3, d8
 800bb0c:	f7ff bbed 	b.w	800b2ea <__ieee754_pow+0x162>
 800bb10:	4b30      	ldr	r3, [pc, #192]	; (800bbd4 <__ieee754_pow+0xa4c>)
 800bb12:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bb16:	429e      	cmp	r6, r3
 800bb18:	f77f af0c 	ble.w	800b934 <__ieee754_pow+0x7ac>
 800bb1c:	4b2e      	ldr	r3, [pc, #184]	; (800bbd8 <__ieee754_pow+0xa50>)
 800bb1e:	440b      	add	r3, r1
 800bb20:	4303      	orrs	r3, r0
 800bb22:	d009      	beq.n	800bb38 <__ieee754_pow+0x9b0>
 800bb24:	ec51 0b18 	vmov	r0, r1, d8
 800bb28:	2200      	movs	r2, #0
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	f7f4 ffa2 	bl	8000a74 <__aeabi_dcmplt>
 800bb30:	3800      	subs	r0, #0
 800bb32:	bf18      	it	ne
 800bb34:	2001      	movne	r0, #1
 800bb36:	e447      	b.n	800b3c8 <__ieee754_pow+0x240>
 800bb38:	4622      	mov	r2, r4
 800bb3a:	462b      	mov	r3, r5
 800bb3c:	f7f4 fb70 	bl	8000220 <__aeabi_dsub>
 800bb40:	4642      	mov	r2, r8
 800bb42:	464b      	mov	r3, r9
 800bb44:	f7f4 ffaa 	bl	8000a9c <__aeabi_dcmpge>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	f43f aef3 	beq.w	800b934 <__ieee754_pow+0x7ac>
 800bb4e:	e7e9      	b.n	800bb24 <__ieee754_pow+0x99c>
 800bb50:	f04f 0a00 	mov.w	sl, #0
 800bb54:	e71a      	b.n	800b98c <__ieee754_pow+0x804>
 800bb56:	ec51 0b10 	vmov	r0, r1, d0
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	e7d4      	b.n	800bb08 <__ieee754_pow+0x980>
 800bb5e:	491c      	ldr	r1, [pc, #112]	; (800bbd0 <__ieee754_pow+0xa48>)
 800bb60:	2000      	movs	r0, #0
 800bb62:	f7ff bb30 	b.w	800b1c6 <__ieee754_pow+0x3e>
 800bb66:	2000      	movs	r0, #0
 800bb68:	2100      	movs	r1, #0
 800bb6a:	f7ff bb2c 	b.w	800b1c6 <__ieee754_pow+0x3e>
 800bb6e:	4630      	mov	r0, r6
 800bb70:	4639      	mov	r1, r7
 800bb72:	f7ff bb28 	b.w	800b1c6 <__ieee754_pow+0x3e>
 800bb76:	9204      	str	r2, [sp, #16]
 800bb78:	f7ff bb7a 	b.w	800b270 <__ieee754_pow+0xe8>
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	f7ff bb64 	b.w	800b24a <__ieee754_pow+0xc2>
 800bb82:	bf00      	nop
 800bb84:	f3af 8000 	nop.w
 800bb88:	00000000 	.word	0x00000000
 800bb8c:	3fe62e43 	.word	0x3fe62e43
 800bb90:	fefa39ef 	.word	0xfefa39ef
 800bb94:	3fe62e42 	.word	0x3fe62e42
 800bb98:	0ca86c39 	.word	0x0ca86c39
 800bb9c:	be205c61 	.word	0xbe205c61
 800bba0:	72bea4d0 	.word	0x72bea4d0
 800bba4:	3e663769 	.word	0x3e663769
 800bba8:	c5d26bf1 	.word	0xc5d26bf1
 800bbac:	3ebbbd41 	.word	0x3ebbbd41
 800bbb0:	af25de2c 	.word	0xaf25de2c
 800bbb4:	3f11566a 	.word	0x3f11566a
 800bbb8:	16bebd93 	.word	0x16bebd93
 800bbbc:	3f66c16c 	.word	0x3f66c16c
 800bbc0:	5555553e 	.word	0x5555553e
 800bbc4:	3fc55555 	.word	0x3fc55555
 800bbc8:	3fe00000 	.word	0x3fe00000
 800bbcc:	000fffff 	.word	0x000fffff
 800bbd0:	3ff00000 	.word	0x3ff00000
 800bbd4:	4090cbff 	.word	0x4090cbff
 800bbd8:	3f6f3400 	.word	0x3f6f3400
 800bbdc:	652b82fe 	.word	0x652b82fe
 800bbe0:	3c971547 	.word	0x3c971547

0800bbe4 <__ieee754_sqrt>:
 800bbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe8:	ec55 4b10 	vmov	r4, r5, d0
 800bbec:	4e55      	ldr	r6, [pc, #340]	; (800bd44 <__ieee754_sqrt+0x160>)
 800bbee:	43ae      	bics	r6, r5
 800bbf0:	ee10 0a10 	vmov	r0, s0
 800bbf4:	ee10 3a10 	vmov	r3, s0
 800bbf8:	462a      	mov	r2, r5
 800bbfa:	4629      	mov	r1, r5
 800bbfc:	d110      	bne.n	800bc20 <__ieee754_sqrt+0x3c>
 800bbfe:	ee10 2a10 	vmov	r2, s0
 800bc02:	462b      	mov	r3, r5
 800bc04:	f7f4 fcc4 	bl	8000590 <__aeabi_dmul>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	4629      	mov	r1, r5
 800bc10:	f7f4 fb08 	bl	8000224 <__adddf3>
 800bc14:	4604      	mov	r4, r0
 800bc16:	460d      	mov	r5, r1
 800bc18:	ec45 4b10 	vmov	d0, r4, r5
 800bc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc20:	2d00      	cmp	r5, #0
 800bc22:	dc10      	bgt.n	800bc46 <__ieee754_sqrt+0x62>
 800bc24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bc28:	4330      	orrs	r0, r6
 800bc2a:	d0f5      	beq.n	800bc18 <__ieee754_sqrt+0x34>
 800bc2c:	b15d      	cbz	r5, 800bc46 <__ieee754_sqrt+0x62>
 800bc2e:	ee10 2a10 	vmov	r2, s0
 800bc32:	462b      	mov	r3, r5
 800bc34:	ee10 0a10 	vmov	r0, s0
 800bc38:	f7f4 faf2 	bl	8000220 <__aeabi_dsub>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	f7f4 fdd0 	bl	80007e4 <__aeabi_ddiv>
 800bc44:	e7e6      	b.n	800bc14 <__ieee754_sqrt+0x30>
 800bc46:	1512      	asrs	r2, r2, #20
 800bc48:	d074      	beq.n	800bd34 <__ieee754_sqrt+0x150>
 800bc4a:	07d4      	lsls	r4, r2, #31
 800bc4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bc50:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800bc54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bc58:	bf5e      	ittt	pl
 800bc5a:	0fda      	lsrpl	r2, r3, #31
 800bc5c:	005b      	lslpl	r3, r3, #1
 800bc5e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800bc62:	2400      	movs	r4, #0
 800bc64:	0fda      	lsrs	r2, r3, #31
 800bc66:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bc6a:	107f      	asrs	r7, r7, #1
 800bc6c:	005b      	lsls	r3, r3, #1
 800bc6e:	2516      	movs	r5, #22
 800bc70:	4620      	mov	r0, r4
 800bc72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bc76:	1886      	adds	r6, r0, r2
 800bc78:	428e      	cmp	r6, r1
 800bc7a:	bfde      	ittt	le
 800bc7c:	1b89      	suble	r1, r1, r6
 800bc7e:	18b0      	addle	r0, r6, r2
 800bc80:	18a4      	addle	r4, r4, r2
 800bc82:	0049      	lsls	r1, r1, #1
 800bc84:	3d01      	subs	r5, #1
 800bc86:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800bc8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bc8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc92:	d1f0      	bne.n	800bc76 <__ieee754_sqrt+0x92>
 800bc94:	462a      	mov	r2, r5
 800bc96:	f04f 0e20 	mov.w	lr, #32
 800bc9a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bc9e:	4281      	cmp	r1, r0
 800bca0:	eb06 0c05 	add.w	ip, r6, r5
 800bca4:	dc02      	bgt.n	800bcac <__ieee754_sqrt+0xc8>
 800bca6:	d113      	bne.n	800bcd0 <__ieee754_sqrt+0xec>
 800bca8:	459c      	cmp	ip, r3
 800bcaa:	d811      	bhi.n	800bcd0 <__ieee754_sqrt+0xec>
 800bcac:	f1bc 0f00 	cmp.w	ip, #0
 800bcb0:	eb0c 0506 	add.w	r5, ip, r6
 800bcb4:	da43      	bge.n	800bd3e <__ieee754_sqrt+0x15a>
 800bcb6:	2d00      	cmp	r5, #0
 800bcb8:	db41      	blt.n	800bd3e <__ieee754_sqrt+0x15a>
 800bcba:	f100 0801 	add.w	r8, r0, #1
 800bcbe:	1a09      	subs	r1, r1, r0
 800bcc0:	459c      	cmp	ip, r3
 800bcc2:	bf88      	it	hi
 800bcc4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800bcc8:	eba3 030c 	sub.w	r3, r3, ip
 800bccc:	4432      	add	r2, r6
 800bcce:	4640      	mov	r0, r8
 800bcd0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bcd4:	f1be 0e01 	subs.w	lr, lr, #1
 800bcd8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800bcdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bce0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bce4:	d1db      	bne.n	800bc9e <__ieee754_sqrt+0xba>
 800bce6:	430b      	orrs	r3, r1
 800bce8:	d006      	beq.n	800bcf8 <__ieee754_sqrt+0x114>
 800bcea:	1c50      	adds	r0, r2, #1
 800bcec:	bf13      	iteet	ne
 800bcee:	3201      	addne	r2, #1
 800bcf0:	3401      	addeq	r4, #1
 800bcf2:	4672      	moveq	r2, lr
 800bcf4:	f022 0201 	bicne.w	r2, r2, #1
 800bcf8:	1063      	asrs	r3, r4, #1
 800bcfa:	0852      	lsrs	r2, r2, #1
 800bcfc:	07e1      	lsls	r1, r4, #31
 800bcfe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bd02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bd06:	bf48      	it	mi
 800bd08:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bd0c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bd10:	4614      	mov	r4, r2
 800bd12:	e781      	b.n	800bc18 <__ieee754_sqrt+0x34>
 800bd14:	0ad9      	lsrs	r1, r3, #11
 800bd16:	3815      	subs	r0, #21
 800bd18:	055b      	lsls	r3, r3, #21
 800bd1a:	2900      	cmp	r1, #0
 800bd1c:	d0fa      	beq.n	800bd14 <__ieee754_sqrt+0x130>
 800bd1e:	02cd      	lsls	r5, r1, #11
 800bd20:	d50a      	bpl.n	800bd38 <__ieee754_sqrt+0x154>
 800bd22:	f1c2 0420 	rsb	r4, r2, #32
 800bd26:	fa23 f404 	lsr.w	r4, r3, r4
 800bd2a:	1e55      	subs	r5, r2, #1
 800bd2c:	4093      	lsls	r3, r2
 800bd2e:	4321      	orrs	r1, r4
 800bd30:	1b42      	subs	r2, r0, r5
 800bd32:	e78a      	b.n	800bc4a <__ieee754_sqrt+0x66>
 800bd34:	4610      	mov	r0, r2
 800bd36:	e7f0      	b.n	800bd1a <__ieee754_sqrt+0x136>
 800bd38:	0049      	lsls	r1, r1, #1
 800bd3a:	3201      	adds	r2, #1
 800bd3c:	e7ef      	b.n	800bd1e <__ieee754_sqrt+0x13a>
 800bd3e:	4680      	mov	r8, r0
 800bd40:	e7bd      	b.n	800bcbe <__ieee754_sqrt+0xda>
 800bd42:	bf00      	nop
 800bd44:	7ff00000 	.word	0x7ff00000

0800bd48 <__ieee754_expf>:
 800bd48:	ee10 2a10 	vmov	r2, s0
 800bd4c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800bd50:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bd54:	d902      	bls.n	800bd5c <__ieee754_expf+0x14>
 800bd56:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bd5a:	4770      	bx	lr
 800bd5c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800bd60:	d106      	bne.n	800bd70 <__ieee754_expf+0x28>
 800bd62:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800be9c <__ieee754_expf+0x154>
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	bf18      	it	ne
 800bd6a:	eeb0 0a67 	vmovne.f32	s0, s15
 800bd6e:	4770      	bx	lr
 800bd70:	484b      	ldr	r0, [pc, #300]	; (800bea0 <__ieee754_expf+0x158>)
 800bd72:	4282      	cmp	r2, r0
 800bd74:	dd02      	ble.n	800bd7c <__ieee754_expf+0x34>
 800bd76:	2000      	movs	r0, #0
 800bd78:	f000 b900 	b.w	800bf7c <__math_oflowf>
 800bd7c:	2a00      	cmp	r2, #0
 800bd7e:	da05      	bge.n	800bd8c <__ieee754_expf+0x44>
 800bd80:	4a48      	ldr	r2, [pc, #288]	; (800bea4 <__ieee754_expf+0x15c>)
 800bd82:	4291      	cmp	r1, r2
 800bd84:	d902      	bls.n	800bd8c <__ieee754_expf+0x44>
 800bd86:	2000      	movs	r0, #0
 800bd88:	f000 b8f2 	b.w	800bf70 <__math_uflowf>
 800bd8c:	4a46      	ldr	r2, [pc, #280]	; (800bea8 <__ieee754_expf+0x160>)
 800bd8e:	4291      	cmp	r1, r2
 800bd90:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800bd94:	d952      	bls.n	800be3c <__ieee754_expf+0xf4>
 800bd96:	4a45      	ldr	r2, [pc, #276]	; (800beac <__ieee754_expf+0x164>)
 800bd98:	4291      	cmp	r1, r2
 800bd9a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800bd9e:	d834      	bhi.n	800be0a <__ieee754_expf+0xc2>
 800bda0:	4943      	ldr	r1, [pc, #268]	; (800beb0 <__ieee754_expf+0x168>)
 800bda2:	4411      	add	r1, r2
 800bda4:	ed91 7a00 	vldr	s14, [r1]
 800bda8:	4942      	ldr	r1, [pc, #264]	; (800beb4 <__ieee754_expf+0x16c>)
 800bdaa:	440a      	add	r2, r1
 800bdac:	edd2 7a00 	vldr	s15, [r2]
 800bdb0:	ee30 7a47 	vsub.f32	s14, s0, s14
 800bdb4:	f1c3 0201 	rsb	r2, r3, #1
 800bdb8:	1ad2      	subs	r2, r2, r3
 800bdba:	ee37 0a67 	vsub.f32	s0, s14, s15
 800bdbe:	ee20 6a00 	vmul.f32	s12, s0, s0
 800bdc2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800beb8 <__ieee754_expf+0x170>
 800bdc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bebc <__ieee754_expf+0x174>
 800bdca:	eee6 6a05 	vfma.f32	s13, s12, s10
 800bdce:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800bec0 <__ieee754_expf+0x178>
 800bdd2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800bdd6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bec4 <__ieee754_expf+0x17c>
 800bdda:	eee5 6a06 	vfma.f32	s13, s10, s12
 800bdde:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800bec8 <__ieee754_expf+0x180>
 800bde2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800bde6:	eef0 6a40 	vmov.f32	s13, s0
 800bdea:	eee5 6a46 	vfms.f32	s13, s10, s12
 800bdee:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800bdf2:	ee20 5a26 	vmul.f32	s10, s0, s13
 800bdf6:	bb92      	cbnz	r2, 800be5e <__ieee754_expf+0x116>
 800bdf8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800bdfc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800be00:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800be04:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800be08:	4770      	bx	lr
 800be0a:	4b30      	ldr	r3, [pc, #192]	; (800becc <__ieee754_expf+0x184>)
 800be0c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800bed0 <__ieee754_expf+0x188>
 800be10:	eddf 6a30 	vldr	s13, [pc, #192]	; 800bed4 <__ieee754_expf+0x18c>
 800be14:	4413      	add	r3, r2
 800be16:	edd3 7a00 	vldr	s15, [r3]
 800be1a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800be1e:	eeb0 7a40 	vmov.f32	s14, s0
 800be22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be26:	ee17 2a90 	vmov	r2, s15
 800be2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be2e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800be32:	eddf 6a29 	vldr	s13, [pc, #164]	; 800bed8 <__ieee754_expf+0x190>
 800be36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800be3a:	e7be      	b.n	800bdba <__ieee754_expf+0x72>
 800be3c:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800be40:	d20b      	bcs.n	800be5a <__ieee754_expf+0x112>
 800be42:	eddf 6a26 	vldr	s13, [pc, #152]	; 800bedc <__ieee754_expf+0x194>
 800be46:	ee70 6a26 	vadd.f32	s13, s0, s13
 800be4a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800be4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be52:	dd02      	ble.n	800be5a <__ieee754_expf+0x112>
 800be54:	ee30 0a25 	vadd.f32	s0, s0, s11
 800be58:	4770      	bx	lr
 800be5a:	2200      	movs	r2, #0
 800be5c:	e7af      	b.n	800bdbe <__ieee754_expf+0x76>
 800be5e:	ee76 6a66 	vsub.f32	s13, s12, s13
 800be62:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800be66:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800be6a:	bfb8      	it	lt
 800be6c:	3264      	addlt	r2, #100	; 0x64
 800be6e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800be72:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800be76:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800be7a:	ee17 3a90 	vmov	r3, s15
 800be7e:	bfab      	itete	ge
 800be80:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800be84:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800be88:	ee00 3a10 	vmovge	s0, r3
 800be8c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800bee0 <__ieee754_expf+0x198>
 800be90:	bfbc      	itt	lt
 800be92:	ee00 3a10 	vmovlt	s0, r3
 800be96:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800be9a:	4770      	bx	lr
 800be9c:	00000000 	.word	0x00000000
 800bea0:	42b17217 	.word	0x42b17217
 800bea4:	42cff1b5 	.word	0x42cff1b5
 800bea8:	3eb17218 	.word	0x3eb17218
 800beac:	3f851591 	.word	0x3f851591
 800beb0:	0800c468 	.word	0x0800c468
 800beb4:	0800c470 	.word	0x0800c470
 800beb8:	3331bb4c 	.word	0x3331bb4c
 800bebc:	b5ddea0e 	.word	0xb5ddea0e
 800bec0:	388ab355 	.word	0x388ab355
 800bec4:	bb360b61 	.word	0xbb360b61
 800bec8:	3e2aaaab 	.word	0x3e2aaaab
 800becc:	0800c460 	.word	0x0800c460
 800bed0:	3fb8aa3b 	.word	0x3fb8aa3b
 800bed4:	3f317180 	.word	0x3f317180
 800bed8:	3717f7d1 	.word	0x3717f7d1
 800bedc:	7149f2ca 	.word	0x7149f2ca
 800bee0:	0d800000 	.word	0x0d800000

0800bee4 <with_errno>:
 800bee4:	b570      	push	{r4, r5, r6, lr}
 800bee6:	4604      	mov	r4, r0
 800bee8:	460d      	mov	r5, r1
 800beea:	4616      	mov	r6, r2
 800beec:	f7fe ff24 	bl	800ad38 <__errno>
 800bef0:	4629      	mov	r1, r5
 800bef2:	6006      	str	r6, [r0, #0]
 800bef4:	4620      	mov	r0, r4
 800bef6:	bd70      	pop	{r4, r5, r6, pc}

0800bef8 <xflow>:
 800bef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800befa:	4614      	mov	r4, r2
 800befc:	461d      	mov	r5, r3
 800befe:	b108      	cbz	r0, 800bf04 <xflow+0xc>
 800bf00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bf04:	e9cd 2300 	strd	r2, r3, [sp]
 800bf08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	4629      	mov	r1, r5
 800bf10:	f7f4 fb3e 	bl	8000590 <__aeabi_dmul>
 800bf14:	2222      	movs	r2, #34	; 0x22
 800bf16:	b003      	add	sp, #12
 800bf18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf1c:	f7ff bfe2 	b.w	800bee4 <with_errno>

0800bf20 <__math_uflow>:
 800bf20:	b508      	push	{r3, lr}
 800bf22:	2200      	movs	r2, #0
 800bf24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bf28:	f7ff ffe6 	bl	800bef8 <xflow>
 800bf2c:	ec41 0b10 	vmov	d0, r0, r1
 800bf30:	bd08      	pop	{r3, pc}

0800bf32 <__math_oflow>:
 800bf32:	b508      	push	{r3, lr}
 800bf34:	2200      	movs	r2, #0
 800bf36:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bf3a:	f7ff ffdd 	bl	800bef8 <xflow>
 800bf3e:	ec41 0b10 	vmov	d0, r0, r1
 800bf42:	bd08      	pop	{r3, pc}

0800bf44 <with_errnof>:
 800bf44:	b513      	push	{r0, r1, r4, lr}
 800bf46:	4604      	mov	r4, r0
 800bf48:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bf4c:	f7fe fef4 	bl	800ad38 <__errno>
 800bf50:	ed9d 0a01 	vldr	s0, [sp, #4]
 800bf54:	6004      	str	r4, [r0, #0]
 800bf56:	b002      	add	sp, #8
 800bf58:	bd10      	pop	{r4, pc}

0800bf5a <xflowf>:
 800bf5a:	b130      	cbz	r0, 800bf6a <xflowf+0x10>
 800bf5c:	eef1 7a40 	vneg.f32	s15, s0
 800bf60:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bf64:	2022      	movs	r0, #34	; 0x22
 800bf66:	f7ff bfed 	b.w	800bf44 <with_errnof>
 800bf6a:	eef0 7a40 	vmov.f32	s15, s0
 800bf6e:	e7f7      	b.n	800bf60 <xflowf+0x6>

0800bf70 <__math_uflowf>:
 800bf70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bf78 <__math_uflowf+0x8>
 800bf74:	f7ff bff1 	b.w	800bf5a <xflowf>
 800bf78:	10000000 	.word	0x10000000

0800bf7c <__math_oflowf>:
 800bf7c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bf84 <__math_oflowf+0x8>
 800bf80:	f7ff bfeb 	b.w	800bf5a <xflowf>
 800bf84:	70000000 	.word	0x70000000

0800bf88 <fabs>:
 800bf88:	ec51 0b10 	vmov	r0, r1, d0
 800bf8c:	ee10 2a10 	vmov	r2, s0
 800bf90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf94:	ec43 2b10 	vmov	d0, r2, r3
 800bf98:	4770      	bx	lr

0800bf9a <finite>:
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	ed8d 0b00 	vstr	d0, [sp]
 800bfa0:	9801      	ldr	r0, [sp, #4]
 800bfa2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bfa6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bfaa:	0fc0      	lsrs	r0, r0, #31
 800bfac:	b002      	add	sp, #8
 800bfae:	4770      	bx	lr

0800bfb0 <scalbn>:
 800bfb0:	b570      	push	{r4, r5, r6, lr}
 800bfb2:	ec55 4b10 	vmov	r4, r5, d0
 800bfb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bfba:	4606      	mov	r6, r0
 800bfbc:	462b      	mov	r3, r5
 800bfbe:	b99a      	cbnz	r2, 800bfe8 <scalbn+0x38>
 800bfc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bfc4:	4323      	orrs	r3, r4
 800bfc6:	d036      	beq.n	800c036 <scalbn+0x86>
 800bfc8:	4b39      	ldr	r3, [pc, #228]	; (800c0b0 <scalbn+0x100>)
 800bfca:	4629      	mov	r1, r5
 800bfcc:	ee10 0a10 	vmov	r0, s0
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f7f4 fadd 	bl	8000590 <__aeabi_dmul>
 800bfd6:	4b37      	ldr	r3, [pc, #220]	; (800c0b4 <scalbn+0x104>)
 800bfd8:	429e      	cmp	r6, r3
 800bfda:	4604      	mov	r4, r0
 800bfdc:	460d      	mov	r5, r1
 800bfde:	da10      	bge.n	800c002 <scalbn+0x52>
 800bfe0:	a32b      	add	r3, pc, #172	; (adr r3, 800c090 <scalbn+0xe0>)
 800bfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe6:	e03a      	b.n	800c05e <scalbn+0xae>
 800bfe8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bfec:	428a      	cmp	r2, r1
 800bfee:	d10c      	bne.n	800c00a <scalbn+0x5a>
 800bff0:	ee10 2a10 	vmov	r2, s0
 800bff4:	4620      	mov	r0, r4
 800bff6:	4629      	mov	r1, r5
 800bff8:	f7f4 f914 	bl	8000224 <__adddf3>
 800bffc:	4604      	mov	r4, r0
 800bffe:	460d      	mov	r5, r1
 800c000:	e019      	b.n	800c036 <scalbn+0x86>
 800c002:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c006:	460b      	mov	r3, r1
 800c008:	3a36      	subs	r2, #54	; 0x36
 800c00a:	4432      	add	r2, r6
 800c00c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c010:	428a      	cmp	r2, r1
 800c012:	dd08      	ble.n	800c026 <scalbn+0x76>
 800c014:	2d00      	cmp	r5, #0
 800c016:	a120      	add	r1, pc, #128	; (adr r1, 800c098 <scalbn+0xe8>)
 800c018:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c01c:	da1c      	bge.n	800c058 <scalbn+0xa8>
 800c01e:	a120      	add	r1, pc, #128	; (adr r1, 800c0a0 <scalbn+0xf0>)
 800c020:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c024:	e018      	b.n	800c058 <scalbn+0xa8>
 800c026:	2a00      	cmp	r2, #0
 800c028:	dd08      	ble.n	800c03c <scalbn+0x8c>
 800c02a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c02e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c032:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c036:	ec45 4b10 	vmov	d0, r4, r5
 800c03a:	bd70      	pop	{r4, r5, r6, pc}
 800c03c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c040:	da19      	bge.n	800c076 <scalbn+0xc6>
 800c042:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c046:	429e      	cmp	r6, r3
 800c048:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c04c:	dd0a      	ble.n	800c064 <scalbn+0xb4>
 800c04e:	a112      	add	r1, pc, #72	; (adr r1, 800c098 <scalbn+0xe8>)
 800c050:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1e2      	bne.n	800c01e <scalbn+0x6e>
 800c058:	a30f      	add	r3, pc, #60	; (adr r3, 800c098 <scalbn+0xe8>)
 800c05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05e:	f7f4 fa97 	bl	8000590 <__aeabi_dmul>
 800c062:	e7cb      	b.n	800bffc <scalbn+0x4c>
 800c064:	a10a      	add	r1, pc, #40	; (adr r1, 800c090 <scalbn+0xe0>)
 800c066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d0b8      	beq.n	800bfe0 <scalbn+0x30>
 800c06e:	a10e      	add	r1, pc, #56	; (adr r1, 800c0a8 <scalbn+0xf8>)
 800c070:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c074:	e7b4      	b.n	800bfe0 <scalbn+0x30>
 800c076:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c07a:	3236      	adds	r2, #54	; 0x36
 800c07c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c080:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c084:	4620      	mov	r0, r4
 800c086:	4b0c      	ldr	r3, [pc, #48]	; (800c0b8 <scalbn+0x108>)
 800c088:	2200      	movs	r2, #0
 800c08a:	e7e8      	b.n	800c05e <scalbn+0xae>
 800c08c:	f3af 8000 	nop.w
 800c090:	c2f8f359 	.word	0xc2f8f359
 800c094:	01a56e1f 	.word	0x01a56e1f
 800c098:	8800759c 	.word	0x8800759c
 800c09c:	7e37e43c 	.word	0x7e37e43c
 800c0a0:	8800759c 	.word	0x8800759c
 800c0a4:	fe37e43c 	.word	0xfe37e43c
 800c0a8:	c2f8f359 	.word	0xc2f8f359
 800c0ac:	81a56e1f 	.word	0x81a56e1f
 800c0b0:	43500000 	.word	0x43500000
 800c0b4:	ffff3cb0 	.word	0xffff3cb0
 800c0b8:	3c900000 	.word	0x3c900000

0800c0bc <finitef>:
 800c0bc:	b082      	sub	sp, #8
 800c0be:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c0c2:	9801      	ldr	r0, [sp, #4]
 800c0c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c0c8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c0cc:	bfac      	ite	ge
 800c0ce:	2000      	movge	r0, #0
 800c0d0:	2001      	movlt	r0, #1
 800c0d2:	b002      	add	sp, #8
 800c0d4:	4770      	bx	lr
	...

0800c0d8 <_init>:
 800c0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0da:	bf00      	nop
 800c0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0de:	bc08      	pop	{r3}
 800c0e0:	469e      	mov	lr, r3
 800c0e2:	4770      	bx	lr

0800c0e4 <_fini>:
 800c0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e6:	bf00      	nop
 800c0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ea:	bc08      	pop	{r3}
 800c0ec:	469e      	mov	lr, r3
 800c0ee:	4770      	bx	lr
