
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd38  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  0800de48  0800de48  0000ee48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e670  0800e670  00010208  2**0
                  CONTENTS
  4 .ARM          00000008  0800e670  0800e670  0000f670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e678  0800e678  00010208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e678  0800e678  0000f678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e67c  0800e67c  0000f67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800e680  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  20000208  0800e888  00010208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000768  0800e888  00010768  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010df8  00000000  00000000  00010231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f1  00000000  00000000  00021029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00023920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ecd  00000000  00000000  00024c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ebb  00000000  00000000  00025add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013348  00000000  00000000  0003f998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000966a7  00000000  00000000  00052ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9387  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b0c  00000000  00000000  000e93cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000efed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800de30 	.word	0x0800de30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800de30 	.word	0x0800de30

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__aeabi_d2lz>:
 800119c:	b538      	push	{r3, r4, r5, lr}
 800119e:	2200      	movs	r2, #0
 80011a0:	2300      	movs	r3, #0
 80011a2:	4604      	mov	r4, r0
 80011a4:	460d      	mov	r5, r1
 80011a6:	f7ff fc09 	bl	80009bc <__aeabi_dcmplt>
 80011aa:	b928      	cbnz	r0, 80011b8 <__aeabi_d2lz+0x1c>
 80011ac:	4620      	mov	r0, r4
 80011ae:	4629      	mov	r1, r5
 80011b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b4:	f000 b80a 	b.w	80011cc <__aeabi_d2ulz>
 80011b8:	4620      	mov	r0, r4
 80011ba:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011be:	f000 f805 	bl	80011cc <__aeabi_d2ulz>
 80011c2:	4240      	negs	r0, r0
 80011c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011c8:	bd38      	pop	{r3, r4, r5, pc}
 80011ca:	bf00      	nop

080011cc <__aeabi_d2ulz>:
 80011cc:	b5d0      	push	{r4, r6, r7, lr}
 80011ce:	2200      	movs	r2, #0
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <__aeabi_d2ulz+0x34>)
 80011d2:	4606      	mov	r6, r0
 80011d4:	460f      	mov	r7, r1
 80011d6:	f7ff f97f 	bl	80004d8 <__aeabi_dmul>
 80011da:	f7ff fc55 	bl	8000a88 <__aeabi_d2uiz>
 80011de:	4604      	mov	r4, r0
 80011e0:	f7ff f900 	bl	80003e4 <__aeabi_ui2d>
 80011e4:	2200      	movs	r2, #0
 80011e6:	4b07      	ldr	r3, [pc, #28]	@ (8001204 <__aeabi_d2ulz+0x38>)
 80011e8:	f7ff f976 	bl	80004d8 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4630      	mov	r0, r6
 80011f2:	4639      	mov	r1, r7
 80011f4:	f7fe ffb8 	bl	8000168 <__aeabi_dsub>
 80011f8:	f7ff fc46 	bl	8000a88 <__aeabi_d2uiz>
 80011fc:	4621      	mov	r1, r4
 80011fe:	bdd0      	pop	{r4, r6, r7, pc}
 8001200:	3df00000 	.word	0x3df00000
 8001204:	41f00000 	.word	0x41f00000

08001208 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001210:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001214:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b00      	cmp	r3, #0
 800121e:	d013      	beq.n	8001248 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001220:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001224:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001228:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00b      	beq.n	8001248 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001230:	e000      	b.n	8001234 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001232:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001234:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0f9      	beq.n	8001232 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800123e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001248:	687b      	ldr	r3, [r7, #4]
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <_write>:
float angleOpenloop(float target_angle);					//


//Serial Write
int _write(int file, char *ptr, int len)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	e009      	b.n	800127e <_write+0x2a>
    ITM_SendChar((*ptr++));
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	60ba      	str	r2, [r7, #8]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ffc8 	bl	8001208 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3301      	adds	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	429a      	cmp	r2, r3
 8001284:	dbf1      	blt.n	800126a <_write+0x16>
  return len;
 8001286:	687b      	ldr	r3, [r7, #4]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_CAN_RxFifo0MsgPendingCallback>:
float float_final = 0.0f;
uint32_t CAN_error;
int count1,count2;
//CAN:446
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	  count2++;
 8001298:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	4a1b      	ldr	r2, [pc, #108]	@ (800130c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80012a0:	6013      	str	r3, [r2, #0]
	  if (HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &RxHeader, RxData) != HAL_OK)
 80012a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001310 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80012a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001314 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80012a6:	2100      	movs	r1, #0
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f003 ff72 	bl	8005192 <HAL_CAN_GetRxMessage>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d007      	beq.n	80012c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	  {
		  CAN_error = HAL_CAN_GetError(hcan);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f004 fac5 	bl	8005844 <HAL_CAN_GetError>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a16      	ldr	r2, [pc, #88]	@ (8001318 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80012be:	6013      	str	r3, [r2, #0]
		  Error_Handler();
 80012c0:	f002 fcd8 	bl	8003c74 <Error_Handler>
	  }

	  if ((RxHeader.StdId == 0x103) && RxHeader.DLC == 4)
 80012c4:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f240 1203 	movw	r2, #259	@ 0x103
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d119      	bne.n	8001304 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 80012d0:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d115      	bne.n	8001304 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
	  {
		  bytes[0] = RxData[0];
 80012d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80012da:	781a      	ldrb	r2, [r3, #0]
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80012de:	701a      	strb	r2, [r3, #0]
		  bytes[1] = RxData[1];
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80012e2:	785a      	ldrb	r2, [r3, #1]
 80012e4:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80012e6:	705a      	strb	r2, [r3, #1]
		  bytes[2] = RxData[2];
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80012ea:	789a      	ldrb	r2, [r3, #2]
 80012ec:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80012ee:	709a      	strb	r2, [r3, #2]
		  bytes[3] = RxData[3];
 80012f0:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80012f2:	78da      	ldrb	r2, [r3, #3]
 80012f4:	4b09      	ldr	r3, [pc, #36]	@ (800131c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80012f6:	70da      	strb	r2, [r3, #3]
		  float_final = Bytes2float(bytes);
 80012f8:	4808      	ldr	r0, [pc, #32]	@ (800131c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80012fa:	f000 fd0c 	bl	8001d16 <Bytes2float>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a07      	ldr	r2, [pc, #28]	@ (8001320 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001302:	6013      	str	r3, [r2, #0]
	  if (RxHeader.RTR == 0x01) // Request data
	  {

	  }

}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200005f4 	.word	0x200005f4
 8001310:	200005d8 	.word	0x200005d8
 8001314:	200005b4 	.word	0x200005b4
 8001318:	200005f0 	.word	0x200005f0
 800131c:	200005e8 	.word	0x200005e8
 8001320:	200005ec 	.word	0x200005ec

08001324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132a:	f002 ffff 	bl	800432c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132e:	f000 f99d 	bl	800166c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001332:	f000 fbe3 	bl	8001afc <MX_GPIO_Init>
  MX_SPI1_Init();
 8001336:	f000 fa87 	bl	8001848 <MX_SPI1_Init>
  MX_DMA_Init();
 800133a:	f000 fbc1 	bl	8001ac0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800133e:	f000 fb95 	bl	8001a6c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001342:	f000 f9ef 	bl	8001724 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001346:	f000 fab7 	bl	80018b8 <MX_TIM2_Init>
  MX_CAN_Init();
 800134a:	f000 fa47 	bl	80017dc <MX_CAN_Init>
  MX_TIM4_Init();
 800134e:	f000 fb3f 	bl	80019d0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //Delay SETUP
  DWT_Init();
 8001352:	f000 fc57 	bl	8001c04 <DWT_Init>

  //Timer Interrupt tim2,tim4

  HAL_TIM_Base_Start_IT(&htim4);
 8001356:	4891      	ldr	r0, [pc, #580]	@ (800159c <main+0x278>)
 8001358:	f005 ff04 	bl	8007164 <HAL_TIM_Base_Start_IT>



  //Driver SETUP

    voltage_sensor_align = 3; // aligning voltage [V]
 800135c:	4b90      	ldr	r3, [pc, #576]	@ (80015a0 <main+0x27c>)
 800135e:	4a91      	ldr	r2, [pc, #580]	@ (80015a4 <main+0x280>)
 8001360:	601a      	str	r2, [r3, #0]
    velocity_index_search = 3;// index search velocity [rad/s]
 8001362:	4b91      	ldr	r3, [pc, #580]	@ (80015a8 <main+0x284>)
 8001364:	4a8f      	ldr	r2, [pc, #572]	@ (80015a4 <main+0x280>)
 8001366:	601a      	str	r2, [r3, #0]

	voltage_power_supply = 24.0;
 8001368:	4b90      	ldr	r3, [pc, #576]	@ (80015ac <main+0x288>)
 800136a:	4a91      	ldr	r2, [pc, #580]	@ (80015b0 <main+0x28c>)
 800136c:	601a      	str	r2, [r3, #0]

    voltage_limit = 24.0;
 800136e:	4b91      	ldr	r3, [pc, #580]	@ (80015b4 <main+0x290>)
 8001370:	4a8f      	ldr	r2, [pc, #572]	@ (80015b0 <main+0x28c>)
 8001372:	601a      	str	r2, [r3, #0]
    current_limit = 20.0;		// current_sp maximum
 8001374:	4b90      	ldr	r3, [pc, #576]	@ (80015b8 <main+0x294>)
 8001376:	4a91      	ldr	r2, [pc, #580]	@ (80015bc <main+0x298>)
 8001378:	601a      	str	r2, [r3, #0]
    velocity_limit = 20.0;       // maximal velocity of the position control
 800137a:	4b91      	ldr	r3, [pc, #580]	@ (80015c0 <main+0x29c>)
 800137c:	4a8f      	ldr	r2, [pc, #572]	@ (80015bc <main+0x298>)
 800137e:	601a      	str	r2, [r3, #0]

    //Control system configuration
//====Motor====
      LPF_current_d_s.y_prev = 0.0;
 8001380:	4b90      	ldr	r3, [pc, #576]	@ (80015c4 <main+0x2a0>)
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
      LPF_current_d_s.Tf = 0.001;
 8001388:	4b8e      	ldr	r3, [pc, #568]	@ (80015c4 <main+0x2a0>)
 800138a:	4a8f      	ldr	r2, [pc, #572]	@ (80015c8 <main+0x2a4>)
 800138c:	60da      	str	r2, [r3, #12]
      PID_current_d_s.P = 1.0 ;  //1.0
 800138e:	4b8f      	ldr	r3, [pc, #572]	@ (80015cc <main+0x2a8>)
 8001390:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001394:	61da      	str	r2, [r3, #28]
      PID_current_d_s.I = 0.0; //713.0
 8001396:	4b8d      	ldr	r3, [pc, #564]	@ (80015cc <main+0x2a8>)
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
      PID_current_d_s.D = 0.0;
 800139e:	4b8b      	ldr	r3, [pc, #556]	@ (80015cc <main+0x2a8>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	@ 0x24
      PID_current_d_s.output_ramp = 1000.0;
 80013a6:	4b89      	ldr	r3, [pc, #548]	@ (80015cc <main+0x2a8>)
 80013a8:	4a89      	ldr	r2, [pc, #548]	@ (80015d0 <main+0x2ac>)
 80013aa:	615a      	str	r2, [r3, #20]
      PID_current_d_s.limit = voltage_limit;
 80013ac:	4b81      	ldr	r3, [pc, #516]	@ (80015b4 <main+0x290>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a86      	ldr	r2, [pc, #536]	@ (80015cc <main+0x2a8>)
 80013b2:	6193      	str	r3, [r2, #24]

      LPF_current_q_s.y_prev = 0.0;
 80013b4:	4b87      	ldr	r3, [pc, #540]	@ (80015d4 <main+0x2b0>)
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
      LPF_current_q_s.Tf = 0.001;
 80013bc:	4b85      	ldr	r3, [pc, #532]	@ (80015d4 <main+0x2b0>)
 80013be:	4a82      	ldr	r2, [pc, #520]	@ (80015c8 <main+0x2a4>)
 80013c0:	60da      	str	r2, [r3, #12]
      PID_current_q_s.P = 1.0;  // 1.0
 80013c2:	4b85      	ldr	r3, [pc, #532]	@ (80015d8 <main+0x2b4>)
 80013c4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80013c8:	61da      	str	r2, [r3, #28]
      PID_current_q_s.I = 0.0; //10.0
 80013ca:	4b83      	ldr	r3, [pc, #524]	@ (80015d8 <main+0x2b4>)
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	621a      	str	r2, [r3, #32]
      PID_current_q_s.D = 0.0;
 80013d2:	4b81      	ldr	r3, [pc, #516]	@ (80015d8 <main+0x2b4>)
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	@ 0x24
      PID_current_q_s.output_ramp = 1000.0;
 80013da:	4b7f      	ldr	r3, [pc, #508]	@ (80015d8 <main+0x2b4>)
 80013dc:	4a7c      	ldr	r2, [pc, #496]	@ (80015d0 <main+0x2ac>)
 80013de:	615a      	str	r2, [r3, #20]
      PID_current_q_s.limit = voltage_limit;
 80013e0:	4b74      	ldr	r3, [pc, #464]	@ (80015b4 <main+0x290>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a7c      	ldr	r2, [pc, #496]	@ (80015d8 <main+0x2b4>)
 80013e6:	6193      	str	r3, [r2, #24]

      LPF_velocity_s.y_prev = 0.0;
 80013e8:	4b7c      	ldr	r3, [pc, #496]	@ (80015dc <main+0x2b8>)
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
      LPF_velocity_s.Tf = 0.01;
 80013f0:	4b7a      	ldr	r3, [pc, #488]	@ (80015dc <main+0x2b8>)
 80013f2:	4a7b      	ldr	r2, [pc, #492]	@ (80015e0 <main+0x2bc>)
 80013f4:	60da      	str	r2, [r3, #12]
      PID_velocity_s.P = 0.5;   // P > 0.5 oscillate
 80013f6:	4b7b      	ldr	r3, [pc, #492]	@ (80015e4 <main+0x2c0>)
 80013f8:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80013fc:	61da      	str	r2, [r3, #28]
      PID_velocity_s.I = 55.0;  // I > 55 under-overshoot
 80013fe:	4b79      	ldr	r3, [pc, #484]	@ (80015e4 <main+0x2c0>)
 8001400:	4a79      	ldr	r2, [pc, #484]	@ (80015e8 <main+0x2c4>)
 8001402:	621a      	str	r2, [r3, #32]
      PID_velocity_s.D = 0.0;
 8001404:	4b77      	ldr	r3, [pc, #476]	@ (80015e4 <main+0x2c0>)
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	@ 0x24
      PID_velocity_s.output_ramp = 1000;
 800140c:	4b75      	ldr	r3, [pc, #468]	@ (80015e4 <main+0x2c0>)
 800140e:	4a70      	ldr	r2, [pc, #448]	@ (80015d0 <main+0x2ac>)
 8001410:	615a      	str	r2, [r3, #20]
      PID_velocity_s.limit = current_limit;  // current_limit
 8001412:	4b69      	ldr	r3, [pc, #420]	@ (80015b8 <main+0x294>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a73      	ldr	r2, [pc, #460]	@ (80015e4 <main+0x2c0>)
 8001418:	6193      	str	r3, [r2, #24]

      LPF_angle_s.y_prev = 0.0;
 800141a:	4b74      	ldr	r3, [pc, #464]	@ (80015ec <main+0x2c8>)
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
      LPF_angle_s.Tf = 0.01;
 8001422:	4b72      	ldr	r3, [pc, #456]	@ (80015ec <main+0x2c8>)
 8001424:	4a6e      	ldr	r2, [pc, #440]	@ (80015e0 <main+0x2bc>)
 8001426:	60da      	str	r2, [r3, #12]
      PID_angle_s.P = 50.0;
 8001428:	4b71      	ldr	r3, [pc, #452]	@ (80015f0 <main+0x2cc>)
 800142a:	4a72      	ldr	r2, [pc, #456]	@ (80015f4 <main+0x2d0>)
 800142c:	61da      	str	r2, [r3, #28]
      PID_angle_s.I = 0.0;
 800142e:	4b70      	ldr	r3, [pc, #448]	@ (80015f0 <main+0x2cc>)
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	621a      	str	r2, [r3, #32]
      PID_angle_s.D = 0.2;
 8001436:	4b6e      	ldr	r3, [pc, #440]	@ (80015f0 <main+0x2cc>)
 8001438:	4a6f      	ldr	r2, [pc, #444]	@ (80015f8 <main+0x2d4>)
 800143a:	625a      	str	r2, [r3, #36]	@ 0x24
      PID_angle_s.output_ramp = 0;
 800143c:	4b6c      	ldr	r3, [pc, #432]	@ (80015f0 <main+0x2cc>)
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	615a      	str	r2, [r3, #20]
      PID_angle_s.limit = velocity_limit;
 8001444:	4b5e      	ldr	r3, [pc, #376]	@ (80015c0 <main+0x29c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a69      	ldr	r2, [pc, #420]	@ (80015f0 <main+0x2cc>)
 800144a:	6193      	str	r3, [r2, #24]

 	  PID_haptic_s.P = 40.0;
 800144c:	4b6b      	ldr	r3, [pc, #428]	@ (80015fc <main+0x2d8>)
 800144e:	4a6c      	ldr	r2, [pc, #432]	@ (8001600 <main+0x2dc>)
 8001450:	61da      	str	r2, [r3, #28]
	  PID_haptic_s.I = 0.1;
 8001452:	4b6a      	ldr	r3, [pc, #424]	@ (80015fc <main+0x2d8>)
 8001454:	4a6b      	ldr	r2, [pc, #428]	@ (8001604 <main+0x2e0>)
 8001456:	621a      	str	r2, [r3, #32]
	  PID_haptic_s.D = 0.4;
 8001458:	4b68      	ldr	r3, [pc, #416]	@ (80015fc <main+0x2d8>)
 800145a:	4a6b      	ldr	r2, [pc, #428]	@ (8001608 <main+0x2e4>)
 800145c:	625a      	str	r2, [r3, #36]	@ 0x24
	  PID_haptic_s.output_ramp = 0;
 800145e:	4b67      	ldr	r3, [pc, #412]	@ (80015fc <main+0x2d8>)
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
	  PID_haptic_s.limit = velocity_limit;
 8001466:	4b56      	ldr	r3, [pc, #344]	@ (80015c0 <main+0x29c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a64      	ldr	r2, [pc, #400]	@ (80015fc <main+0x2d8>)
 800146c:	6193      	str	r3, [r2, #24]
      passivity_gain = -0.2 ;
 800146e:	4b67      	ldr	r3, [pc, #412]	@ (800160c <main+0x2e8>)
 8001470:	4a67      	ldr	r2, [pc, #412]	@ (8001610 <main+0x2ec>)
 8001472:	601a      	str	r2, [r3, #0]


  //SPI SETUP
  MagneticSensorSPI_init(AS5048A_SPI);
 8001474:	4b67      	ldr	r3, [pc, #412]	@ (8001614 <main+0x2f0>)
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	9200      	str	r2, [sp, #0]
 800147a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800147c:	f000 ffae 	bl	80023dc <MagneticSensorSPI_init>
  //POSITION SENSOR SETUP
  Sensor_init();
 8001480:	f001 f8dc 	bl	800263c <Sensor_init>

  //CURRENT SENSE SETUP
  HAL_ADC_Start_DMA(&hadc1, adcResultDMA, 3);
 8001484:	2203      	movs	r2, #3
 8001486:	4964      	ldr	r1, [pc, #400]	@ (8001618 <main+0x2f4>)
 8001488:	4864      	ldr	r0, [pc, #400]	@ (800161c <main+0x2f8>)
 800148a:	f003 f8ad 	bl	80045e8 <HAL_ADC_Start_DMA>
  initCurrentsense(CurrentSense_resistance, CurrentSense_gain);
 800148e:	4964      	ldr	r1, [pc, #400]	@ (8001620 <main+0x2fc>)
 8001490:	485c      	ldr	r0, [pc, #368]	@ (8001604 <main+0x2e0>)
 8001492:	f000 fc5b 	bl	8001d4c <initCurrentsense>
//  calibrateOffsets();

  //PWM SETUP
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);    //pinMode
 8001496:	2100      	movs	r1, #0
 8001498:	4862      	ldr	r0, [pc, #392]	@ (8001624 <main+0x300>)
 800149a:	f005 ff0d 	bl	80072b8 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	//pinMode
 800149e:	2104      	movs	r1, #4
 80014a0:	4860      	ldr	r0, [pc, #384]	@ (8001624 <main+0x300>)
 80014a2:	f005 ff09 	bl	80072b8 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	//pinMode
 80014a6:	2108      	movs	r1, #8
 80014a8:	485e      	ldr	r0, [pc, #376]	@ (8001624 <main+0x300>)
 80014aa:	f005 ff05 	bl	80072b8 <HAL_TIM_PWM_Start>

   HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);  		//Enable
 80014ae:	2201      	movs	r2, #1
 80014b0:	2120      	movs	r1, #32
 80014b2:	485d      	ldr	r0, [pc, #372]	@ (8001628 <main+0x304>)
 80014b4:	f004 fe52 	bl	800615c <HAL_GPIO_WritePin>
//   HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET); 	//Disable

   //FOC SETUP
   zero_electric_angle = 1.89523315;
 80014b8:	4b5c      	ldr	r3, [pc, #368]	@ (800162c <main+0x308>)
 80014ba:	4a5d      	ldr	r2, [pc, #372]	@ (8001630 <main+0x30c>)
 80014bc:	601a      	str	r2, [r3, #0]
   initFOC(zero_electric_angle, CW);  //M2 0.632764339
 80014be:	4b5b      	ldr	r3, [pc, #364]	@ (800162c <main+0x308>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2101      	movs	r1, #1
 80014c4:	4618      	mov	r0, r3
 80014c6:	f001 ff93 	bl	80033f0 <initFOC>
//   initFOC(zero_electric_angle, UNKNOWN); //Not yet calibrate find the best init value
//while(1);
//   CAN SETUP ID: 0x446
   CAN_init_446();
 80014ca:	f000 fbd1 	bl	8001c70 <CAN_init_446>
   t1 = micros();
 80014ce:	f000 fbaf 	bl	8001c30 <micros>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a57      	ldr	r2, [pc, #348]	@ (8001634 <main+0x310>)
 80014d6:	6013      	str	r3, [r2, #0]
   t2 = micros();
 80014d8:	f000 fbaa 	bl	8001c30 <micros>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a56      	ldr	r2, [pc, #344]	@ (8001638 <main+0x314>)
 80014e0:	6013      	str	r3, [r2, #0]
//	  LPF_current_q_s = LowPassFilter(LPF_current_q_s);
//	  sprintf(MSG, "%.3f,%.3f,%.3f \n",sensortest.a,sensortest.b,sensortest.c);
//	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);

		//Position sensor testing
	    updateSensor();
 80014e2:	f001 f8d5 	bl	8002690 <updateSensor>
//	  sprintf(MSG, " %d \n", );
//	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);

	  //=================CAN BUS=================
		//CAN:446 TX
		float2Bytes(shaft_angle, &bytes[0]);
 80014e6:	4b55      	ldr	r3, [pc, #340]	@ (800163c <main+0x318>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4955      	ldr	r1, [pc, #340]	@ (8001640 <main+0x31c>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fc03 	bl	8001cf8 <float2Bytes>
		TxData[0] = bytes[0];
 80014f2:	4b53      	ldr	r3, [pc, #332]	@ (8001640 <main+0x31c>)
 80014f4:	781a      	ldrb	r2, [r3, #0]
 80014f6:	4b53      	ldr	r3, [pc, #332]	@ (8001644 <main+0x320>)
 80014f8:	701a      	strb	r2, [r3, #0]
		TxData[1] = bytes[1];
 80014fa:	4b51      	ldr	r3, [pc, #324]	@ (8001640 <main+0x31c>)
 80014fc:	785a      	ldrb	r2, [r3, #1]
 80014fe:	4b51      	ldr	r3, [pc, #324]	@ (8001644 <main+0x320>)
 8001500:	705a      	strb	r2, [r3, #1]
		TxData[2] = bytes[2];
 8001502:	4b4f      	ldr	r3, [pc, #316]	@ (8001640 <main+0x31c>)
 8001504:	789a      	ldrb	r2, [r3, #2]
 8001506:	4b4f      	ldr	r3, [pc, #316]	@ (8001644 <main+0x320>)
 8001508:	709a      	strb	r2, [r3, #2]
		TxData[3] = bytes[3];
 800150a:	4b4d      	ldr	r3, [pc, #308]	@ (8001640 <main+0x31c>)
 800150c:	78da      	ldrb	r2, [r3, #3]
 800150e:	4b4d      	ldr	r3, [pc, #308]	@ (8001644 <main+0x320>)
 8001510:	70da      	strb	r2, [r3, #3]
		if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001512:	4b4d      	ldr	r3, [pc, #308]	@ (8001648 <main+0x324>)
 8001514:	4a4b      	ldr	r2, [pc, #300]	@ (8001644 <main+0x320>)
 8001516:	494d      	ldr	r1, [pc, #308]	@ (800164c <main+0x328>)
 8001518:	484d      	ldr	r0, [pc, #308]	@ (8001650 <main+0x32c>)
 800151a:	f003 fd60 	bl	8004fde <HAL_CAN_AddTxMessage>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <main+0x210>
		{
			CAN_error = HAL_CAN_GetError(&hcan);
 8001524:	484a      	ldr	r0, [pc, #296]	@ (8001650 <main+0x32c>)
 8001526:	f004 f98d 	bl	8005844 <HAL_CAN_GetError>
 800152a:	4603      	mov	r3, r0
 800152c:	4a49      	ldr	r2, [pc, #292]	@ (8001654 <main+0x330>)
 800152e:	6013      	str	r3, [r2, #0]
		    Error_Handler ();
 8001530:	f002 fba0 	bl	8003c74 <Error_Handler>
		}


//	  =====Haptic Control=====
		if (t2 - t1 >= 3000000)
 8001534:	4b40      	ldr	r3, [pc, #256]	@ (8001638 <main+0x314>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b3e      	ldr	r3, [pc, #248]	@ (8001634 <main+0x310>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	4a46      	ldr	r2, [pc, #280]	@ (8001658 <main+0x334>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d90d      	bls.n	8001560 <main+0x23c>
		{
			do_sethome = 1;
 8001544:	4b45      	ldr	r3, [pc, #276]	@ (800165c <main+0x338>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]
			move_haptic(float_final,passivity_gain);
 800154a:	4b45      	ldr	r3, [pc, #276]	@ (8001660 <main+0x33c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a2f      	ldr	r2, [pc, #188]	@ (800160c <main+0x2e8>)
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f002 fa59 	bl	8003a0c <move_haptic>
			loopFOC(); 						//1190us --> 495 us
 800155a:	f001 ff7d 	bl	8003458 <loopFOC>
 800155e:	e00e      	b.n	800157e <main+0x25a>
		}
		else
		{
			//Set Home
			if (do_sethome == 0)
 8001560:	4b3e      	ldr	r3, [pc, #248]	@ (800165c <main+0x338>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10a      	bne.n	800157e <main+0x25a>
			{
				t2 = micros();
 8001568:	f000 fb62 	bl	8001c30 <micros>
 800156c:	4603      	mov	r3, r0
 800156e:	4a32      	ldr	r2, [pc, #200]	@ (8001638 <main+0x314>)
 8001570:	6013      	str	r3, [r2, #0]
				move_angle(0.0f); 	//161 us --> 112 us
 8001572:	f04f 0000 	mov.w	r0, #0
 8001576:	f002 f9bf 	bl	80038f8 <move_angle>
				loopFOC(); 			//1190us --> 495 us
 800157a:	f001 ff6d 	bl	8003458 <loopFOC>
			}
		}
		t5 = micros() - t4;
 800157e:	f000 fb57 	bl	8001c30 <micros>
 8001582:	4602      	mov	r2, r0
 8001584:	4b37      	ldr	r3, [pc, #220]	@ (8001664 <main+0x340>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	4a37      	ldr	r2, [pc, #220]	@ (8001668 <main+0x344>)
 800158c:	6013      	str	r3, [r2, #0]
		t4 = micros();
 800158e:	f000 fb4f 	bl	8001c30 <micros>
 8001592:	4603      	mov	r3, r0
 8001594:	4a33      	ldr	r2, [pc, #204]	@ (8001664 <main+0x340>)
 8001596:	6013      	str	r3, [r2, #0]
	    updateSensor();
 8001598:	e7a3      	b.n	80014e2 <main+0x1be>
 800159a:	bf00      	nop
 800159c:	20000360 	.word	0x20000360
 80015a0:	2000057c 	.word	0x2000057c
 80015a4:	40400000 	.word	0x40400000
 80015a8:	20000580 	.word	0x20000580
 80015ac:	20000584 	.word	0x20000584
 80015b0:	41c00000 	.word	0x41c00000
 80015b4:	20000588 	.word	0x20000588
 80015b8:	2000058c 	.word	0x2000058c
 80015bc:	41a00000 	.word	0x41a00000
 80015c0:	20000590 	.word	0x20000590
 80015c4:	200004a0 	.word	0x200004a0
 80015c8:	3a83126f 	.word	0x3a83126f
 80015cc:	200004b0 	.word	0x200004b0
 80015d0:	447a0000 	.word	0x447a0000
 80015d4:	20000490 	.word	0x20000490
 80015d8:	200004d8 	.word	0x200004d8
 80015dc:	20000480 	.word	0x20000480
 80015e0:	3c23d70a 	.word	0x3c23d70a
 80015e4:	20000500 	.word	0x20000500
 80015e8:	425c0000 	.word	0x425c0000
 80015ec:	20000470 	.word	0x20000470
 80015f0:	20000528 	.word	0x20000528
 80015f4:	42480000 	.word	0x42480000
 80015f8:	3e4ccccd 	.word	0x3e4ccccd
 80015fc:	20000550 	.word	0x20000550
 8001600:	42200000 	.word	0x42200000
 8001604:	3dcccccd 	.word	0x3dcccccd
 8001608:	3ecccccd 	.word	0x3ecccccd
 800160c:	20000578 	.word	0x20000578
 8001610:	be4ccccd 	.word	0xbe4ccccd
 8001614:	20000000 	.word	0x20000000
 8001618:	2000042c 	.word	0x2000042c
 800161c:	20000224 	.word	0x20000224
 8001620:	41200000 	.word	0x41200000
 8001624:	20000318 	.word	0x20000318
 8001628:	40010c00 	.word	0x40010c00
 800162c:	20000018 	.word	0x20000018
 8001630:	3ff29700 	.word	0x3ff29700
 8001634:	20000604 	.word	0x20000604
 8001638:	20000608 	.word	0x20000608
 800163c:	20000448 	.word	0x20000448
 8001640:	200005e8 	.word	0x200005e8
 8001644:	200005d0 	.word	0x200005d0
 8001648:	200005e0 	.word	0x200005e0
 800164c:	2000059c 	.word	0x2000059c
 8001650:	20000298 	.word	0x20000298
 8001654:	200005f0 	.word	0x200005f0
 8001658:	002dc6bf 	.word	0x002dc6bf
 800165c:	200005e4 	.word	0x200005e4
 8001660:	200005ec 	.word	0x200005ec
 8001664:	2000060c 	.word	0x2000060c
 8001668:	20000610 	.word	0x20000610

0800166c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b094      	sub	sp, #80	@ 0x50
 8001670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001672:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001676:	2228      	movs	r2, #40	@ 0x28
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f007 fced 	bl	800905a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800169c:	2301      	movs	r3, #1
 800169e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016aa:	2301      	movs	r3, #1
 80016ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ae:	2302      	movs	r3, #2
 80016b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016b8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80016bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 fd62 	bl	800618c <HAL_RCC_OscConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016ce:	f002 fad1 	bl	8003c74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d2:	230f      	movs	r3, #15
 80016d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d6:	2302      	movs	r3, #2
 80016d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2102      	movs	r1, #2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 ffce 	bl	8006690 <HAL_RCC_ClockConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80016fa:	f002 fabb 	bl	8003c74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016fe:	2302      	movs	r3, #2
 8001700:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001706:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	4618      	mov	r0, r3
 800170c:	f005 f958 	bl	80069c0 <HAL_RCCEx_PeriphCLKConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001716:	f002 faad 	bl	8003c74 <Error_Handler>
  }
}
 800171a:	bf00      	nop
 800171c:	3750      	adds	r7, #80	@ 0x50
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001734:	4b27      	ldr	r3, [pc, #156]	@ (80017d4 <MX_ADC1_Init+0xb0>)
 8001736:	4a28      	ldr	r2, [pc, #160]	@ (80017d8 <MX_ADC1_Init+0xb4>)
 8001738:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800173a:	4b26      	ldr	r3, [pc, #152]	@ (80017d4 <MX_ADC1_Init+0xb0>)
 800173c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001740:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001742:	4b24      	ldr	r3, [pc, #144]	@ (80017d4 <MX_ADC1_Init+0xb0>)
 8001744:	2201      	movs	r2, #1
 8001746:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001748:	4b22      	ldr	r3, [pc, #136]	@ (80017d4 <MX_ADC1_Init+0xb0>)
 800174a:	2200      	movs	r2, #0
 800174c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800174e:	4b21      	ldr	r3, [pc, #132]	@ (80017d4 <MX_ADC1_Init+0xb0>)
 8001750:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001754:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001756:	4b1f      	ldr	r3, [pc, #124]	@ (80017d4 <MX_ADC1_Init+0xb0>)
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 800175c:	4b1d      	ldr	r3, [pc, #116]	@ (80017d4 <MX_ADC1_Init+0xb0>)
 800175e:	2203      	movs	r2, #3
 8001760:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001762:	481c      	ldr	r0, [pc, #112]	@ (80017d4 <MX_ADC1_Init+0xb0>)
 8001764:	f002 fe68 	bl	8004438 <HAL_ADC_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800176e:	f002 fa81 	bl	8003c74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001772:	2303      	movs	r3, #3
 8001774:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001776:	2301      	movs	r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800177a:	2307      	movs	r3, #7
 800177c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	4619      	mov	r1, r3
 8001782:	4814      	ldr	r0, [pc, #80]	@ (80017d4 <MX_ADC1_Init+0xb0>)
 8001784:	f003 f82a 	bl	80047dc <HAL_ADC_ConfigChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800178e:	f002 fa71 	bl	8003c74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001792:	2308      	movs	r3, #8
 8001794:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001796:	2302      	movs	r3, #2
 8001798:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	4619      	mov	r1, r3
 800179e:	480d      	ldr	r0, [pc, #52]	@ (80017d4 <MX_ADC1_Init+0xb0>)
 80017a0:	f003 f81c 	bl	80047dc <HAL_ADC_ConfigChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80017aa:	f002 fa63 	bl	8003c74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80017ae:	2309      	movs	r3, #9
 80017b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80017b2:	2303      	movs	r3, #3
 80017b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	4619      	mov	r1, r3
 80017ba:	4806      	ldr	r0, [pc, #24]	@ (80017d4 <MX_ADC1_Init+0xb0>)
 80017bc:	f003 f80e 	bl	80047dc <HAL_ADC_ConfigChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80017c6:	f002 fa55 	bl	8003c74 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */

  //DRV8323RH Unity Gain Bandwidth = 1MHz
  /* USER CODE END ADC1_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000224 	.word	0x20000224
 80017d8:	40012400 	.word	0x40012400

080017dc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80017e0:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <MX_CAN_Init+0x64>)
 80017e2:	4a18      	ldr	r2, [pc, #96]	@ (8001844 <MX_CAN_Init+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 80017e6:	4b16      	ldr	r3, [pc, #88]	@ (8001840 <MX_CAN_Init+0x64>)
 80017e8:	2206      	movs	r2, #6
 80017ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80017ec:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <MX_CAN_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017f2:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <MX_CAN_Init+0x64>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 80017f8:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <MX_CAN_Init+0x64>)
 80017fa:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80017fe:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001800:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <MX_CAN_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001806:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <MX_CAN_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <MX_CAN_Init+0x64>)
 800180e:	2201      	movs	r2, #1
 8001810:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001812:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <MX_CAN_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8001818:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <MX_CAN_Init+0x64>)
 800181a:	2201      	movs	r2, #1
 800181c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800181e:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <MX_CAN_Init+0x64>)
 8001820:	2200      	movs	r2, #0
 8001822:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <MX_CAN_Init+0x64>)
 8001826:	2200      	movs	r2, #0
 8001828:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800182a:	4805      	ldr	r0, [pc, #20]	@ (8001840 <MX_CAN_Init+0x64>)
 800182c:	f003 f9cf 	bl	8004bce <HAL_CAN_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8001836:	f002 fa1d 	bl	8003c74 <Error_Handler>
  /* USER CODE BEGIN CAN_Init 2 */


  /* USER CODE END CAN_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000298 	.word	0x20000298
 8001844:	40006400 	.word	0x40006400

08001848 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800184c:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <MX_SPI1_Init+0x68>)
 800184e:	4a19      	ldr	r2, [pc, #100]	@ (80018b4 <MX_SPI1_Init+0x6c>)
 8001850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001852:	4b17      	ldr	r3, [pc, #92]	@ (80018b0 <MX_SPI1_Init+0x68>)
 8001854:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <MX_SPI1_Init+0x68>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001860:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <MX_SPI1_Init+0x68>)
 8001862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001866:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001868:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <MX_SPI1_Init+0x68>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <MX_SPI1_Init+0x68>)
 8001870:	2201      	movs	r2, #1
 8001872:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001874:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <MX_SPI1_Init+0x68>)
 8001876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800187a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800187c:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <MX_SPI1_Init+0x68>)
 800187e:	2228      	movs	r2, #40	@ 0x28
 8001880:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001882:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <MX_SPI1_Init+0x68>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001888:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <MX_SPI1_Init+0x68>)
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800188e:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <MX_SPI1_Init+0x68>)
 8001890:	2200      	movs	r2, #0
 8001892:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <MX_SPI1_Init+0x68>)
 8001896:	220a      	movs	r2, #10
 8001898:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <MX_SPI1_Init+0x68>)
 800189c:	f005 f946 	bl	8006b2c <HAL_SPI_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80018a6:	f002 f9e5 	bl	8003c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200002c0 	.word	0x200002c0
 80018b4:	40013000 	.word	0x40013000

080018b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08e      	sub	sp, #56	@ 0x38
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	f107 0320 	add.w	r3, r7, #32
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
 80018e4:	615a      	str	r2, [r3, #20]
 80018e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e8:	4b38      	ldr	r3, [pc, #224]	@ (80019cc <MX_TIM2_Init+0x114>)
 80018ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018f0:	4b36      	ldr	r3, [pc, #216]	@ (80019cc <MX_TIM2_Init+0x114>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80018f6:	4b35      	ldr	r3, [pc, #212]	@ (80019cc <MX_TIM2_Init+0x114>)
 80018f8:	2220      	movs	r2, #32
 80018fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = ARR_MAX_CA;
 80018fc:	4b33      	ldr	r3, [pc, #204]	@ (80019cc <MX_TIM2_Init+0x114>)
 80018fe:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8001902:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	4b31      	ldr	r3, [pc, #196]	@ (80019cc <MX_TIM2_Init+0x114>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800190a:	4b30      	ldr	r3, [pc, #192]	@ (80019cc <MX_TIM2_Init+0x114>)
 800190c:	2280      	movs	r2, #128	@ 0x80
 800190e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001910:	482e      	ldr	r0, [pc, #184]	@ (80019cc <MX_TIM2_Init+0x114>)
 8001912:	f005 fbd7 	bl	80070c4 <HAL_TIM_Base_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800191c:	f002 f9aa 	bl	8003c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001924:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001926:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800192a:	4619      	mov	r1, r3
 800192c:	4827      	ldr	r0, [pc, #156]	@ (80019cc <MX_TIM2_Init+0x114>)
 800192e:	f005 ff2b 	bl	8007788 <HAL_TIM_ConfigClockSource>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001938:	f002 f99c 	bl	8003c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800193c:	4823      	ldr	r0, [pc, #140]	@ (80019cc <MX_TIM2_Init+0x114>)
 800193e:	f005 fc63 	bl	8007208 <HAL_TIM_PWM_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001948:	f002 f994 	bl	8003c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800194c:	2320      	movs	r3, #32
 800194e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001954:	f107 0320 	add.w	r3, r7, #32
 8001958:	4619      	mov	r1, r3
 800195a:	481c      	ldr	r0, [pc, #112]	@ (80019cc <MX_TIM2_Init+0x114>)
 800195c:	f006 faa0 	bl	8007ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001966:	f002 f985 	bl	8003c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196a:	2360      	movs	r3, #96	@ 0x60
 800196c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2200      	movs	r2, #0
 800197e:	4619      	mov	r1, r3
 8001980:	4812      	ldr	r0, [pc, #72]	@ (80019cc <MX_TIM2_Init+0x114>)
 8001982:	f005 fe43 	bl	800760c <HAL_TIM_PWM_ConfigChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800198c:	f002 f972 	bl	8003c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	2204      	movs	r2, #4
 8001994:	4619      	mov	r1, r3
 8001996:	480d      	ldr	r0, [pc, #52]	@ (80019cc <MX_TIM2_Init+0x114>)
 8001998:	f005 fe38 	bl	800760c <HAL_TIM_PWM_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80019a2:	f002 f967 	bl	8003c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2208      	movs	r2, #8
 80019aa:	4619      	mov	r1, r3
 80019ac:	4807      	ldr	r0, [pc, #28]	@ (80019cc <MX_TIM2_Init+0x114>)
 80019ae:	f005 fe2d 	bl	800760c <HAL_TIM_PWM_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80019b8:	f002 f95c 	bl	8003c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019bc:	4803      	ldr	r0, [pc, #12]	@ (80019cc <MX_TIM2_Init+0x114>)
 80019be:	f002 faff 	bl	8003fc0 <HAL_TIM_MspPostInit>

}
 80019c2:	bf00      	nop
 80019c4:	3738      	adds	r7, #56	@ 0x38
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000318 	.word	0x20000318

080019d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e4:	463b      	mov	r3, r7
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001a64 <MX_TIM4_Init+0x94>)
 80019ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001a68 <MX_TIM4_Init+0x98>)
 80019f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 65-1;
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <MX_TIM4_Init+0x94>)
 80019f4:	2240      	movs	r2, #64	@ 0x40
 80019f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <MX_TIM4_Init+0x94>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5625;
 80019fe:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <MX_TIM4_Init+0x94>)
 8001a00:	f241 52f9 	movw	r2, #5625	@ 0x15f9
 8001a04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <MX_TIM4_Init+0x94>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <MX_TIM4_Init+0x94>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a12:	4814      	ldr	r0, [pc, #80]	@ (8001a64 <MX_TIM4_Init+0x94>)
 8001a14:	f005 fb56 	bl	80070c4 <HAL_TIM_Base_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001a1e:	f002 f929 	bl	8003c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480d      	ldr	r0, [pc, #52]	@ (8001a64 <MX_TIM4_Init+0x94>)
 8001a30:	f005 feaa 	bl	8007788 <HAL_TIM_ConfigClockSource>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001a3a:	f002 f91b 	bl	8003c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a46:	463b      	mov	r3, r7
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4806      	ldr	r0, [pc, #24]	@ (8001a64 <MX_TIM4_Init+0x94>)
 8001a4c:	f006 fa28 	bl	8007ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001a56:	f002 f90d 	bl	8003c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000360 	.word	0x20000360
 8001a68:	40000800 	.word	0x40000800

08001a6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a70:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <MX_USART1_UART_Init+0x48>)
 8001a72:	4a11      	ldr	r2, [pc, #68]	@ (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001a76:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <MX_USART1_UART_Init+0x48>)
 8001a78:	4a10      	ldr	r2, [pc, #64]	@ (8001abc <MX_USART1_UART_Init+0x50>)
 8001a7a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <MX_USART1_UART_Init+0x48>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a82:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <MX_USART1_UART_Init+0x48>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab4 <MX_USART1_UART_Init+0x48>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a8e:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <MX_USART1_UART_Init+0x48>)
 8001a90:	220c      	movs	r2, #12
 8001a92:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a94:	4b07      	ldr	r3, [pc, #28]	@ (8001ab4 <MX_USART1_UART_Init+0x48>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <MX_USART1_UART_Init+0x48>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	@ (8001ab4 <MX_USART1_UART_Init+0x48>)
 8001aa2:	f006 fa6d 	bl	8007f80 <HAL_UART_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001aac:	f002 f8e2 	bl	8003c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	200003a8 	.word	0x200003a8
 8001ab8:	40013800 	.word	0x40013800
 8001abc:	001e8480 	.word	0x001e8480

08001ac0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <MX_DMA_Init+0x38>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	4a0b      	ldr	r2, [pc, #44]	@ (8001af8 <MX_DMA_Init+0x38>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6153      	str	r3, [r2, #20]
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <MX_DMA_Init+0x38>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	200b      	movs	r0, #11
 8001ae4:	f003 ff91 	bl	8005a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ae8:	200b      	movs	r0, #11
 8001aea:	f003 ffaa 	bl	8005a42 <HAL_NVIC_EnableIRQ>

}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000

08001afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b10:	4b38      	ldr	r3, [pc, #224]	@ (8001bf4 <MX_GPIO_Init+0xf8>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a37      	ldr	r2, [pc, #220]	@ (8001bf4 <MX_GPIO_Init+0xf8>)
 8001b16:	f043 0310 	orr.w	r3, r3, #16
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b35      	ldr	r3, [pc, #212]	@ (8001bf4 <MX_GPIO_Init+0xf8>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b28:	4b32      	ldr	r3, [pc, #200]	@ (8001bf4 <MX_GPIO_Init+0xf8>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a31      	ldr	r2, [pc, #196]	@ (8001bf4 <MX_GPIO_Init+0xf8>)
 8001b2e:	f043 0320 	orr.w	r3, r3, #32
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf4 <MX_GPIO_Init+0xf8>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0320 	and.w	r3, r3, #32
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b40:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <MX_GPIO_Init+0xf8>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a2b      	ldr	r2, [pc, #172]	@ (8001bf4 <MX_GPIO_Init+0xf8>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b29      	ldr	r3, [pc, #164]	@ (8001bf4 <MX_GPIO_Init+0xf8>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b58:	4b26      	ldr	r3, [pc, #152]	@ (8001bf4 <MX_GPIO_Init+0xf8>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a25      	ldr	r2, [pc, #148]	@ (8001bf4 <MX_GPIO_Init+0xf8>)
 8001b5e:	f043 0308 	orr.w	r3, r3, #8
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b23      	ldr	r3, [pc, #140]	@ (8001bf4 <MX_GPIO_Init+0xf8>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b70:	2200      	movs	r2, #0
 8001b72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b76:	4820      	ldr	r0, [pc, #128]	@ (8001bf8 <MX_GPIO_Init+0xfc>)
 8001b78:	f004 faf0 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2110      	movs	r1, #16
 8001b80:	481e      	ldr	r0, [pc, #120]	@ (8001bfc <MX_GPIO_Init+0x100>)
 8001b82:	f004 faeb 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|EN_Pin, GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8001b8c:	481c      	ldr	r0, [pc, #112]	@ (8001c00 <MX_GPIO_Init+0x104>)
 8001b8e:	f004 fae5 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba4:	f107 0310 	add.w	r3, r7, #16
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4813      	ldr	r0, [pc, #76]	@ (8001bf8 <MX_GPIO_Init+0xfc>)
 8001bac:	f004 f952 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001bb0:	2310      	movs	r3, #16
 8001bb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480d      	ldr	r0, [pc, #52]	@ (8001bfc <MX_GPIO_Init+0x100>)
 8001bc8:	f004 f944 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 EN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|EN_Pin;
 8001bcc:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bde:	f107 0310 	add.w	r3, r7, #16
 8001be2:	4619      	mov	r1, r3
 8001be4:	4806      	ldr	r0, [pc, #24]	@ (8001c00 <MX_GPIO_Init+0x104>)
 8001be6:	f004 f935 	bl	8005e54 <HAL_GPIO_Init>

}
 8001bea:	bf00      	nop
 8001bec:	3720      	adds	r7, #32
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40011000 	.word	0x40011000
 8001bfc:	40010800 	.word	0x40010800
 8001c00:	40010c00 	.word	0x40010c00

08001c04 <DWT_Init>:
/* USER CODE BEGIN 4 */


//Delay function
__STATIC_INLINE void DWT_Init(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001c08:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <DWT_Init+0x24>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4a06      	ldr	r2, [pc, #24]	@ (8001c28 <DWT_Init+0x24>)
 8001c0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c12:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Data watchpoint trigger(DWT)
 8001c14:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <DWT_Init+0x28>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a04      	ldr	r2, [pc, #16]	@ (8001c2c <DWT_Init+0x28>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	e000edf0 	.word	0xe000edf0
 8001c2c:	e0001000 	.word	0xe0001000

08001c30 <micros>:
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001c34:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <micros+0x20>)
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <micros+0x24>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4906      	ldr	r1, [pc, #24]	@ (8001c58 <micros+0x28>)
 8001c3e:	fba1 1303 	umull	r1, r3, r1, r3
 8001c42:	0c9b      	lsrs	r3, r3, #18
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	e0001000 	.word	0xe0001000
 8001c54:	20000020 	.word	0x20000020
 8001c58:	431bde83 	.word	0x431bde83

08001c5c <HAL_TIM_PeriodElapsedCallback>:

//Timer interrupt routine
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	if(htim == &htim4) //interrupt every 1ms
	{
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
	...

08001c70 <CAN_init_446>:

//CAN function
void CAN_init_446()
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af00      	add	r7, sp, #0
	if(HAL_CAN_Start(&hcan) != HAL_OK)
 8001c76:	481e      	ldr	r0, [pc, #120]	@ (8001cf0 <CAN_init_446+0x80>)
 8001c78:	f003 f96d 	bl	8004f56 <HAL_CAN_Start>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <CAN_init_446+0x16>
	 {
	 	Error_Handler();
 8001c82:	f001 fff7 	bl	8003c74 <Error_Handler>
	 }

	   CAN_FilterTypeDef canfilterconfig;
	   canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001c86:	2301      	movs	r3, #1
 8001c88:	623b      	str	r3, [r7, #32]
	   canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
	   canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
	   canfilterconfig.FilterIdHigh = 0x103<<5;
 8001c92:	f242 0360 	movw	r3, #8288	@ 0x2060
 8001c96:	603b      	str	r3, [r7, #0]
	   canfilterconfig.FilterIdLow = 0x0000;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	607b      	str	r3, [r7, #4]
	   canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 8001c9c:	f242 0360 	movw	r3, #8288	@ 0x2060
 8001ca0:	60bb      	str	r3, [r7, #8]
	   canfilterconfig.FilterMaskIdLow = 0x0000;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
	   canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
	   canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001caa:	2301      	movs	r3, #1
 8001cac:	61fb      	str	r3, [r7, #28]
	   canfilterconfig.SlaveStartFilterBank = 14;  // doesn't matter in single can controllers
 8001cae:	230e      	movs	r3, #14
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24

	   if(HAL_CAN_ConfigFilter(&hcan, &canfilterconfig) != HAL_OK)
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480e      	ldr	r0, [pc, #56]	@ (8001cf0 <CAN_init_446+0x80>)
 8001cb8:	f003 f884 	bl	8004dc4 <HAL_CAN_ConfigFilter>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <CAN_init_446+0x56>
	   {
	 	  Error_Handler();
 8001cc2:	f001 ffd7 	bl	8003c74 <Error_Handler>
	   }

	   HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001cc6:	2102      	movs	r1, #2
 8001cc8:	4809      	ldr	r0, [pc, #36]	@ (8001cf0 <CAN_init_446+0x80>)
 8001cca:	f003 fb73 	bl	80053b4 <HAL_CAN_ActivateNotification>

	   TxHeader.DLC = 4;  // data length
 8001cce:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <CAN_init_446+0x84>)
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	611a      	str	r2, [r3, #16]
	   TxHeader.IDE = CAN_ID_STD;
 8001cd4:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <CAN_init_446+0x84>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
	   TxHeader.RTR = CAN_RTR_DATA;
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <CAN_init_446+0x84>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
	   TxHeader.StdId = 0x446;  // ID
 8001ce0:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <CAN_init_446+0x84>)
 8001ce2:	f240 4246 	movw	r2, #1094	@ 0x446
 8001ce6:	601a      	str	r2, [r3, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	3728      	adds	r7, #40	@ 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000298 	.word	0x20000298
 8001cf4:	2000059c 	.word	0x2000059c

08001cf8 <float2Bytes>:
	   TxHeader.IDE = CAN_ID_STD;
	   TxHeader.RTR = CAN_RTR_DATA;
	   TxHeader.StdId = 0x103;  // ID
}
void float2Bytes(float val, uint8_t* bytes_array)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  {
    float float_variable;
    uint8_t temp_array[4];
  } u;
  // Overite bytes of union with float variable
  u.float_variable = val;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60fb      	str	r3, [r7, #12]
  // Assign bytes to input array
  memcpy(bytes_array, u.temp_array, 4);
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	601a      	str	r2, [r3, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <Bytes2float>:

float Bytes2float(uint8_t* bytes_array)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  uint8_t temp_array[4] = {bytes_array[0], bytes_array[1], bytes_array[2], bytes_array[3]};
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	723b      	strb	r3, [r7, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	785b      	ldrb	r3, [r3, #1]
 8001d28:	727b      	strb	r3, [r7, #9]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	789b      	ldrb	r3, [r3, #2]
 8001d2e:	72bb      	strb	r3, [r7, #10]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	78db      	ldrb	r3, [r3, #3]
 8001d34:	72fb      	strb	r3, [r7, #11]
  float f = *(float *)&temp_array;
 8001d36:	f107 0308 	add.w	r3, r7, #8
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  return f;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
	...

08001d4c <initCurrentsense>:
	return val;
}

//Initialize Current Sensor
void initCurrentsense(float _shunt_resistor,float _gain)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  R_sense = _shunt_resistor;
 8001d56:	4a08      	ldr	r2, [pc, #32]	@ (8001d78 <initCurrentsense+0x2c>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6013      	str	r3, [r2, #0]
  gain_a = _gain;
 8001d5c:	4a07      	ldr	r2, [pc, #28]	@ (8001d7c <initCurrentsense+0x30>)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6013      	str	r3, [r2, #0]
  gain_b = _gain;
 8001d62:	4a07      	ldr	r2, [pc, #28]	@ (8001d80 <initCurrentsense+0x34>)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	6013      	str	r3, [r2, #0]
  gain_c = _gain;
 8001d68:	4a06      	ldr	r2, [pc, #24]	@ (8001d84 <initCurrentsense+0x38>)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	6013      	str	r3, [r2, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	20000428 	.word	0x20000428
 8001d7c:	2000041c 	.word	0x2000041c
 8001d80:	20000420 	.word	0x20000420
 8001d84:	20000424 	.word	0x20000424

08001d88 <getPhaseCurrents>:
    offset_ic = offset_ic / calibration_rounds;
}

//// read all three phase currents (if possible 2 or 3)
struct PhaseCurrent_s getPhaseCurrents()
{
 8001d88:	b5b0      	push	{r4, r5, r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
    struct PhaseCurrent_s current;
    current.a = ((3.3 / 2) - (adcResultDMA[0] - 0) * ((3.05 - 0.25) / (3785.0 - 311.0))) / (R_sense * gain_a);
 8001d90:	4b51      	ldr	r3, [pc, #324]	@ (8001ed8 <getPhaseCurrents+0x150>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fb25 	bl	80003e4 <__aeabi_ui2d>
 8001d9a:	a34b      	add	r3, pc, #300	@ (adr r3, 8001ec8 <getPhaseCurrents+0x140>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fb9a 	bl	80004d8 <__aeabi_dmul>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	a149      	add	r1, pc, #292	@ (adr r1, 8001ed0 <getPhaseCurrents+0x148>)
 8001daa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dae:	f7fe f9db 	bl	8000168 <__aeabi_dsub>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4614      	mov	r4, r2
 8001db8:	461d      	mov	r5, r3
 8001dba:	4b48      	ldr	r3, [pc, #288]	@ (8001edc <getPhaseCurrents+0x154>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a48      	ldr	r2, [pc, #288]	@ (8001ee0 <getPhaseCurrents+0x158>)
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe ffdd 	bl	8000d84 <__aeabi_fmul>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fb2b 	bl	8000428 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	4629      	mov	r1, r5
 8001dda:	f7fe fca7 	bl	800072c <__aeabi_ddiv>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	f7fe fe6f 	bl	8000ac8 <__aeabi_d2f>
 8001dea:	4603      	mov	r3, r0
 8001dec:	60fb      	str	r3, [r7, #12]
    current.b = ((3.3 / 2) - (adcResultDMA[1] - 0) * ((3.05 - 0.25) / (3785.0 - 311.0))) / (R_sense * gain_b);
 8001dee:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed8 <getPhaseCurrents+0x150>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe faf6 	bl	80003e4 <__aeabi_ui2d>
 8001df8:	a333      	add	r3, pc, #204	@ (adr r3, 8001ec8 <getPhaseCurrents+0x140>)
 8001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfe:	f7fe fb6b 	bl	80004d8 <__aeabi_dmul>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	a132      	add	r1, pc, #200	@ (adr r1, 8001ed0 <getPhaseCurrents+0x148>)
 8001e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e0c:	f7fe f9ac 	bl	8000168 <__aeabi_dsub>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4614      	mov	r4, r2
 8001e16:	461d      	mov	r5, r3
 8001e18:	4b30      	ldr	r3, [pc, #192]	@ (8001edc <getPhaseCurrents+0x154>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a31      	ldr	r2, [pc, #196]	@ (8001ee4 <getPhaseCurrents+0x15c>)
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	4611      	mov	r1, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe ffae 	bl	8000d84 <__aeabi_fmul>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fafc 	bl	8000428 <__aeabi_f2d>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4620      	mov	r0, r4
 8001e36:	4629      	mov	r1, r5
 8001e38:	f7fe fc78 	bl	800072c <__aeabi_ddiv>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	f7fe fe40 	bl	8000ac8 <__aeabi_d2f>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	613b      	str	r3, [r7, #16]
    current.c = ((3.3 / 2) - (adcResultDMA[2] - 0) * ((3.05 - 0.25) / (3785.0 - 311.0))) / (R_sense * gain_c);
 8001e4c:	4b22      	ldr	r3, [pc, #136]	@ (8001ed8 <getPhaseCurrents+0x150>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fac7 	bl	80003e4 <__aeabi_ui2d>
 8001e56:	a31c      	add	r3, pc, #112	@ (adr r3, 8001ec8 <getPhaseCurrents+0x140>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	f7fe fb3c 	bl	80004d8 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	a11a      	add	r1, pc, #104	@ (adr r1, 8001ed0 <getPhaseCurrents+0x148>)
 8001e66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e6a:	f7fe f97d 	bl	8000168 <__aeabi_dsub>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4614      	mov	r4, r2
 8001e74:	461d      	mov	r5, r3
 8001e76:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <getPhaseCurrents+0x154>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee8 <getPhaseCurrents+0x160>)
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe ff7f 	bl	8000d84 <__aeabi_fmul>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe facd 	bl	8000428 <__aeabi_f2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4620      	mov	r0, r4
 8001e94:	4629      	mov	r1, r5
 8001e96:	f7fe fc49 	bl	800072c <__aeabi_ddiv>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7fe fe11 	bl	8000ac8 <__aeabi_d2f>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	617b      	str	r3, [r7, #20]
//    current.b = -current.a-current.c;
    return current;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	461c      	mov	r4, r3
 8001eae:	f107 030c 	add.w	r3, r7, #12
 8001eb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001eb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	f3af 8000 	nop.w
 8001ec8:	9f0d96a7 	.word	0x9f0d96a7
 8001ecc:	3f4a691c 	.word	0x3f4a691c
 8001ed0:	66666666 	.word	0x66666666
 8001ed4:	3ffa6666 	.word	0x3ffa6666
 8001ed8:	2000042c 	.word	0x2000042c
 8001edc:	20000428 	.word	0x20000428
 8001ee0:	2000041c 	.word	0x2000041c
 8001ee4:	20000420 	.word	0x20000420
 8001ee8:	20000424 	.word	0x20000424
 8001eec:	00000000 	.word	0x00000000

08001ef0 <getFOCCurrents>:
// function used with the foc algorihtm
//   calculating DQ currents from phase currents
//   - function calculating park and clarke transform of the phase currents
//   - using getPhaseCurrents internally
struct DQCurrent_s getFOCCurrents(float angle_el)
{
 8001ef0:	b5b0      	push	{r4, r5, r7, lr}
 8001ef2:	b08c      	sub	sp, #48	@ 0x30
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
    // read current phase currents
    struct PhaseCurrent_s current = getPhaseCurrents(); //Ia,Ib,Ic
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ff42 	bl	8001d88 <getPhaseCurrents>
    // calculate clarke transform
    float i_alpha, i_beta;
//    if(!current.c)
//    {
        // if only two measured currents
        i_alpha = current.a;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        i_beta = (-(_1_SQRT3) * current.a) + (-(_2_SQRT3) * current.c);
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fa8c 	bl	8000428 <__aeabi_f2d>
 8001f10:	a32b      	add	r3, pc, #172	@ (adr r3, 8001fc0 <getFOCCurrents+0xd0>)
 8001f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f16:	f7fe fadf 	bl	80004d8 <__aeabi_dmul>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4614      	mov	r4, r2
 8001f20:	461d      	mov	r5, r3
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fa7f 	bl	8000428 <__aeabi_f2d>
 8001f2a:	a327      	add	r3, pc, #156	@ (adr r3, 8001fc8 <getFOCCurrents+0xd8>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	f7fe fad2 	bl	80004d8 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4620      	mov	r0, r4
 8001f3a:	4629      	mov	r1, r5
 8001f3c:	f7fe f916 	bl	800016c <__adddf3>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	f7fe fdbe 	bl	8000ac8 <__aeabi_d2f>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
//        i_alpha = a;
//        i_beta = _1_SQRT3 * a + _2_SQRT3 * b;
//    }

    // calculate park transform
    float ct = _cos(angle_el);
 8001f50:	6838      	ldr	r0, [r7, #0]
 8001f52:	f000 f995 	bl	8002280 <_cos>
 8001f56:	6278      	str	r0, [r7, #36]	@ 0x24
    float st = _sin(angle_el);
 8001f58:	6838      	ldr	r0, [r7, #0]
 8001f5a:	f000 f839 	bl	8001fd0 <_sin>
 8001f5e:	6238      	str	r0, [r7, #32]
    struct DQCurrent_s return_current;
    return_current.d = i_alpha * ct + i_beta * st;
 8001f60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f64:	f7fe ff0e 	bl	8000d84 <__aeabi_fmul>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	461c      	mov	r4, r3
 8001f6c:	6a39      	ldr	r1, [r7, #32]
 8001f6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001f70:	f7fe ff08 	bl	8000d84 <__aeabi_fmul>
 8001f74:	4603      	mov	r3, r0
 8001f76:	4619      	mov	r1, r3
 8001f78:	4620      	mov	r0, r4
 8001f7a:	f7fe fdfb 	bl	8000b74 <__addsf3>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	60fb      	str	r3, [r7, #12]
    return_current.q = i_beta * ct - i_alpha * st;
 8001f82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001f86:	f7fe fefd 	bl	8000d84 <__aeabi_fmul>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	461c      	mov	r4, r3
 8001f8e:	6a39      	ldr	r1, [r7, #32]
 8001f90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f92:	f7fe fef7 	bl	8000d84 <__aeabi_fmul>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f7fe fde8 	bl	8000b70 <__aeabi_fsub>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	613b      	str	r3, [r7, #16]
    return return_current;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f107 030c 	add.w	r3, r7, #12
 8001fac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fb0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	3730      	adds	r7, #48	@ 0x30
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bdb0      	pop	{r4, r5, r7, pc}
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	45904047 	.word	0x45904047
 8001fc4:	bfe279a7 	.word	0xbfe279a7
 8001fc8:	45904047 	.word	0x45904047
 8001fcc:	bff279a7 	.word	0xbff279a7

08001fd0 <_sin>:
// ~40us (float array)
// ~50us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _sin(float a)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if(a < _PI_2)
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7fe fa25 	bl	8000428 <__aeabi_f2d>
 8001fde:	a39c      	add	r3, pc, #624	@ (adr r3, 8002250 <_sin+0x280>)
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	f7fe fcea 	bl	80009bc <__aeabi_dcmplt>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d042      	beq.n	8002074 <_sin+0xa4>
  {
 //return sine_array[(int)(199.0*( a / (_PI/2.0)))];
    //return sine_array[(int)(126.6873* a)];           // float array optimized
    return 0.0001f*sine_array[_round(126.6873f* a)];      // int array optimized
 8001fee:	499e      	ldr	r1, [pc, #632]	@ (8002268 <_sin+0x298>)
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7fe fec7 	bl	8000d84 <__aeabi_fmul>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f04f 0100 	mov.w	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff f873 	bl	80010e8 <__aeabi_fcmpge>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d014      	beq.n	8002032 <_sin+0x62>
 8002008:	4997      	ldr	r1, [pc, #604]	@ (8002268 <_sin+0x298>)
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe feba 	bl	8000d84 <__aeabi_fmul>
 8002010:	4603      	mov	r3, r0
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fa08 	bl	8000428 <__aeabi_f2d>
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	4b93      	ldr	r3, [pc, #588]	@ (800226c <_sin+0x29c>)
 800201e:	f7fe f8a5 	bl	800016c <__adddf3>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	f7fe fd05 	bl	8000a38 <__aeabi_d2iz>
 800202e:	4603      	mov	r3, r0
 8002030:	e013      	b.n	800205a <_sin+0x8a>
 8002032:	498d      	ldr	r1, [pc, #564]	@ (8002268 <_sin+0x298>)
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7fe fea5 	bl	8000d84 <__aeabi_fmul>
 800203a:	4603      	mov	r3, r0
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe f9f3 	bl	8000428 <__aeabi_f2d>
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	4b89      	ldr	r3, [pc, #548]	@ (800226c <_sin+0x29c>)
 8002048:	f7fe f88e 	bl	8000168 <__aeabi_dsub>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	f7fe fcf0 	bl	8000a38 <__aeabi_d2iz>
 8002058:	4603      	mov	r3, r0
 800205a:	4a85      	ldr	r2, [pc, #532]	@ (8002270 <_sin+0x2a0>)
 800205c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fe3b 	bl	8000cdc <__aeabi_i2f>
 8002066:	4603      	mov	r3, r0
 8002068:	4982      	ldr	r1, [pc, #520]	@ (8002274 <_sin+0x2a4>)
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fe8a 	bl	8000d84 <__aeabi_fmul>
 8002070:	4603      	mov	r3, r0
 8002072:	e0e9      	b.n	8002248 <_sin+0x278>
  }
  else if(a < _PI)
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7fe f9d7 	bl	8000428 <__aeabi_f2d>
 800207a:	a377      	add	r3, pc, #476	@ (adr r3, 8002258 <_sin+0x288>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	f7fe fc9c 	bl	80009bc <__aeabi_dcmplt>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d046      	beq.n	8002118 <_sin+0x148>
  {
    // return sine_array[(int)(199.0*(1.0 - (a-_PI/2.0) / (_PI/2.0)))];
    //return sine_array[398 - (int)(126.6873*a)];          // float array optimized
    return 0.0001f*sine_array[398 - _round(126.6873f*a)];     // int array optimized
 800208a:	4977      	ldr	r1, [pc, #476]	@ (8002268 <_sin+0x298>)
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7fe fe79 	bl	8000d84 <__aeabi_fmul>
 8002092:	4603      	mov	r3, r0
 8002094:	f04f 0100 	mov.w	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f825 	bl	80010e8 <__aeabi_fcmpge>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d016      	beq.n	80020d2 <_sin+0x102>
 80020a4:	4970      	ldr	r1, [pc, #448]	@ (8002268 <_sin+0x298>)
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fe6c 	bl	8000d84 <__aeabi_fmul>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe f9ba 	bl	8000428 <__aeabi_f2d>
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	4b6c      	ldr	r3, [pc, #432]	@ (800226c <_sin+0x29c>)
 80020ba:	f7fe f857 	bl	800016c <__adddf3>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	f7fe fcb7 	bl	8000a38 <__aeabi_d2iz>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 80020d0:	e015      	b.n	80020fe <_sin+0x12e>
 80020d2:	4965      	ldr	r1, [pc, #404]	@ (8002268 <_sin+0x298>)
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7fe fe55 	bl	8000d84 <__aeabi_fmul>
 80020da:	4603      	mov	r3, r0
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe f9a3 	bl	8000428 <__aeabi_f2d>
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	4b61      	ldr	r3, [pc, #388]	@ (800226c <_sin+0x29c>)
 80020e8:	f7fe f83e 	bl	8000168 <__aeabi_dsub>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	f7fe fca0 	bl	8000a38 <__aeabi_d2iz>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 80020fe:	4a5c      	ldr	r2, [pc, #368]	@ (8002270 <_sin+0x2a0>)
 8002100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fde9 	bl	8000cdc <__aeabi_i2f>
 800210a:	4603      	mov	r3, r0
 800210c:	4959      	ldr	r1, [pc, #356]	@ (8002274 <_sin+0x2a4>)
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fe38 	bl	8000d84 <__aeabi_fmul>
 8002114:	4603      	mov	r3, r0
 8002116:	e097      	b.n	8002248 <_sin+0x278>
  }
  else if(a < _3PI_2)
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7fe f985 	bl	8000428 <__aeabi_f2d>
 800211e:	a350      	add	r3, pc, #320	@ (adr r3, 8002260 <_sin+0x290>)
 8002120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002124:	f7fe fc4a 	bl	80009bc <__aeabi_dcmplt>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d046      	beq.n	80021bc <_sin+0x1ec>
  {
    // return -sine_array[(int)(199.0*((a - _PI) / (_PI/2.0)))];
    //return -sine_array[-398 + (int)(126.6873*a)];           // float array optimized
    return -0.0001f*sine_array[-398 + _round(126.6873f*a)];      // int array optimized
 800212e:	494e      	ldr	r1, [pc, #312]	@ (8002268 <_sin+0x298>)
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7fe fe27 	bl	8000d84 <__aeabi_fmul>
 8002136:	4603      	mov	r3, r0
 8002138:	f04f 0100 	mov.w	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe ffd3 	bl	80010e8 <__aeabi_fcmpge>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d016      	beq.n	8002176 <_sin+0x1a6>
 8002148:	4947      	ldr	r1, [pc, #284]	@ (8002268 <_sin+0x298>)
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe fe1a 	bl	8000d84 <__aeabi_fmul>
 8002150:	4603      	mov	r3, r0
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe f968 	bl	8000428 <__aeabi_f2d>
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	4b43      	ldr	r3, [pc, #268]	@ (800226c <_sin+0x29c>)
 800215e:	f7fe f805 	bl	800016c <__adddf3>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	f7fe fc65 	bl	8000a38 <__aeabi_d2iz>
 800216e:	4603      	mov	r3, r0
 8002170:	f5a3 73c7 	sub.w	r3, r3, #398	@ 0x18e
 8002174:	e015      	b.n	80021a2 <_sin+0x1d2>
 8002176:	493c      	ldr	r1, [pc, #240]	@ (8002268 <_sin+0x298>)
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7fe fe03 	bl	8000d84 <__aeabi_fmul>
 800217e:	4603      	mov	r3, r0
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f951 	bl	8000428 <__aeabi_f2d>
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	4b38      	ldr	r3, [pc, #224]	@ (800226c <_sin+0x29c>)
 800218c:	f7fd ffec 	bl	8000168 <__aeabi_dsub>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f7fe fc4e 	bl	8000a38 <__aeabi_d2iz>
 800219c:	4603      	mov	r3, r0
 800219e:	f5a3 73c7 	sub.w	r3, r3, #398	@ 0x18e
 80021a2:	4a33      	ldr	r2, [pc, #204]	@ (8002270 <_sin+0x2a0>)
 80021a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe fd97 	bl	8000cdc <__aeabi_i2f>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4931      	ldr	r1, [pc, #196]	@ (8002278 <_sin+0x2a8>)
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fde6 	bl	8000d84 <__aeabi_fmul>
 80021b8:	4603      	mov	r3, r0
 80021ba:	e045      	b.n	8002248 <_sin+0x278>
  }
  else
  {
    // return -sine_array[(int)(199.0*(1.0 - (a - 3*_PI/2) / (_PI/2.0)))];
    //return -sine_array[796 - (int)(126.6873*a)];           // float array optimized
    return -0.0001f*sine_array[796 - _round(126.6873f*a)];      // int array optimized
 80021bc:	492a      	ldr	r1, [pc, #168]	@ (8002268 <_sin+0x298>)
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe fde0 	bl	8000d84 <__aeabi_fmul>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f04f 0100 	mov.w	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe ff8c 	bl	80010e8 <__aeabi_fcmpge>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d016      	beq.n	8002204 <_sin+0x234>
 80021d6:	4924      	ldr	r1, [pc, #144]	@ (8002268 <_sin+0x298>)
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7fe fdd3 	bl	8000d84 <__aeabi_fmul>
 80021de:	4603      	mov	r3, r0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe f921 	bl	8000428 <__aeabi_f2d>
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	4b20      	ldr	r3, [pc, #128]	@ (800226c <_sin+0x29c>)
 80021ec:	f7fd ffbe 	bl	800016c <__adddf3>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	f7fe fc1e 	bl	8000a38 <__aeabi_d2iz>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f5c3 7347 	rsb	r3, r3, #796	@ 0x31c
 8002202:	e015      	b.n	8002230 <_sin+0x260>
 8002204:	4918      	ldr	r1, [pc, #96]	@ (8002268 <_sin+0x298>)
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe fdbc 	bl	8000d84 <__aeabi_fmul>
 800220c:	4603      	mov	r3, r0
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f90a 	bl	8000428 <__aeabi_f2d>
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	4b14      	ldr	r3, [pc, #80]	@ (800226c <_sin+0x29c>)
 800221a:	f7fd ffa5 	bl	8000168 <__aeabi_dsub>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	f7fe fc07 	bl	8000a38 <__aeabi_d2iz>
 800222a:	4603      	mov	r3, r0
 800222c:	f5c3 7347 	rsb	r3, r3, #796	@ 0x31c
 8002230:	4a0f      	ldr	r2, [pc, #60]	@ (8002270 <_sin+0x2a0>)
 8002232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fd50 	bl	8000cdc <__aeabi_i2f>
 800223c:	4603      	mov	r3, r0
 800223e:	490e      	ldr	r1, [pc, #56]	@ (8002278 <_sin+0x2a8>)
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe fd9f 	bl	8000d84 <__aeabi_fmul>
 8002246:	4603      	mov	r3, r0
  }
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	5443d6f4 	.word	0x5443d6f4
 8002254:	3ff921fb 	.word	0x3ff921fb
 8002258:	54442eea 	.word	0x54442eea
 800225c:	400921fb 	.word	0x400921fb
 8002260:	7f330d32 	.word	0x7f330d32
 8002264:	4012d97c 	.word	0x4012d97c
 8002268:	42fd5fe6 	.word	0x42fd5fe6
 800226c:	3fe00000 	.word	0x3fe00000
 8002270:	0800de58 	.word	0x0800de58
 8002274:	38d1b717 	.word	0x38d1b717
 8002278:	b8d1b717 	.word	0xb8d1b717
 800227c:	00000000 	.word	0x00000000

08002280 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _cos(float a)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  float a_sin = a + _PI_2;
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7fe f8cd 	bl	8000428 <__aeabi_f2d>
 800228e:	a31a      	add	r3, pc, #104	@ (adr r3, 80022f8 <_cos+0x78>)
 8002290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002294:	f7fd ff6a 	bl	800016c <__adddf3>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	f7fe fc12 	bl	8000ac8 <__aeabi_d2f>
 80022a4:	4603      	mov	r3, r0
 80022a6:	60fb      	str	r3, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f7fe f8bd 	bl	8000428 <__aeabi_f2d>
 80022ae:	a314      	add	r3, pc, #80	@ (adr r3, 8002300 <_cos+0x80>)
 80022b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b4:	f7fe fba0 	bl	80009f8 <__aeabi_dcmpgt>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00f      	beq.n	80022de <_cos+0x5e>
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f7fe f8b2 	bl	8000428 <__aeabi_f2d>
 80022c4:	a30e      	add	r3, pc, #56	@ (adr r3, 8002300 <_cos+0x80>)
 80022c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ca:	f7fd ff4d 	bl	8000168 <__aeabi_dsub>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	f7fe fbf7 	bl	8000ac8 <__aeabi_d2f>
 80022da:	4603      	mov	r3, r0
 80022dc:	e000      	b.n	80022e0 <_cos+0x60>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	60fb      	str	r3, [r7, #12]
  return _sin(a_sin);
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f7ff fe74 	bl	8001fd0 <_sin>
 80022e8:	4603      	mov	r3, r0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	f3af 8000 	nop.w
 80022f8:	5443d6f4 	.word	0x5443d6f4
 80022fc:	3ff921fb 	.word	0x3ff921fb
 8002300:	54442eea 	.word	0x54442eea
 8002304:	401921fb 	.word	0x401921fb

08002308 <_normalizeAngle>:

//normalizing radian angle to [0,2PI]
float _normalizeAngle(float angle)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  float a = fmod(angle, _2PI);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7fe f889 	bl	8000428 <__aeabi_f2d>
 8002316:	a316      	add	r3, pc, #88	@ (adr r3, 8002370 <_normalizeAngle+0x68>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f00a fa68 	bl	800c7f0 <fmod>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fbce 	bl	8000ac8 <__aeabi_d2f>
 800232c:	4603      	mov	r3, r0
 800232e:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);//always project from 0 degree
 8002330:	f04f 0100 	mov.w	r1, #0
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f7fe fed7 	bl	80010e8 <__aeabi_fcmpge>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <_normalizeAngle+0x3c>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	e00e      	b.n	8002362 <_normalizeAngle+0x5a>
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f7fe f86f 	bl	8000428 <__aeabi_f2d>
 800234a:	a309      	add	r3, pc, #36	@ (adr r3, 8002370 <_normalizeAngle+0x68>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f7fd ff0c 	bl	800016c <__adddf3>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f7fe fbb4 	bl	8000ac8 <__aeabi_d2f>
 8002360:	4603      	mov	r3, r0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	f3af 8000 	nop.w
 8002370:	54442eea 	.word	0x54442eea
 8002374:	401921fb 	.word	0x401921fb

08002378 <_electricalAngle>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  return (shaft_angle * pole_pairs);
 8002382:	6838      	ldr	r0, [r7, #0]
 8002384:	f7fe fcaa 	bl	8000cdc <__aeabi_i2f>
 8002388:	4603      	mov	r3, r0
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe fcf9 	bl	8000d84 <__aeabi_fmul>
 8002392:	4603      	mov	r3, r0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <_sqrtApprox>:

// square root approximation function using
// https://reprap.org/forum/read.php?147,219210
// https://en.wikipedia.org/wiki/Fast_inverse_square_root
float _sqrtApprox(float number)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  float y;
  // float x;
  // const float f = 1.5F; // better precision

  // x = number * 0.5F;
  y = number;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	60bb      	str	r3, [r7, #8]
  i = * ( long * ) &y;
 80023a8:	f107 0308 	add.w	r3, r7, #8
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	60fb      	str	r3, [r7, #12]
  i = 0x5f375a86 - ( i >> 1 );
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	105a      	asrs	r2, r3, #1
 80023b4:	4b08      	ldr	r3, [pc, #32]	@ (80023d8 <_sqrtApprox+0x3c>)
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  y = * ( float * ) &i;
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60bb      	str	r3, [r7, #8]
  // y = y * ( f - ( x * y * y ) ); // better precision
  return number * y;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe fcdc 	bl	8000d84 <__aeabi_fmul>
 80023cc:	4603      	mov	r3, r0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	5f375a86 	.word	0x5f375a86

080023dc <MagneticSensorSPI_init>:

// initialize SPI for Magnetic Sensor
void MagneticSensorSPI_init(struct MagneticSensorSPIConfig_s config)
{
 80023dc:	b084      	sub	sp, #16
 80023de:	b580      	push	{r7, lr}
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	f107 0c08 	add.w	ip, r7, #8
 80023e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  // angle read register of the magnetic sensor
  angle_register = config.angle_registers ? config.angle_registers : DEF_ANGLE_REGISTER;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MagneticSensorSPI_init+0x18>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	e001      	b.n	80023f8 <MagneticSensorSPI_init+0x1c>
 80023f4:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 80023f8:	4a16      	ldr	r2, [pc, #88]	@ (8002454 <MagneticSensorSPI_init+0x78>)
 80023fa:	6013      	str	r3, [r2, #0]
  // register maximum value (counts per revolution)
  cpr = pow(2, config.bit_resolution);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe f800 	bl	8000404 <__aeabi_i2d>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	f04f 0000 	mov.w	r0, #0
 800240c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002410:	f00a fa16 	bl	800c840 <pow>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	f7fe fb54 	bl	8000ac8 <__aeabi_d2f>
 8002420:	4603      	mov	r3, r0
 8002422:	4a0d      	ldr	r2, [pc, #52]	@ (8002458 <MagneticSensorSPI_init+0x7c>)
 8002424:	6013      	str	r3, [r2, #0]
  bit_resolution = config.bit_resolution;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	4a0c      	ldr	r2, [pc, #48]	@ (800245c <MagneticSensorSPI_init+0x80>)
 800242a:	6013      	str	r3, [r2, #0]

  command_parity_bit = config.command_parity_bit; // for backwards compatibility
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	4a0c      	ldr	r2, [pc, #48]	@ (8002460 <MagneticSensorSPI_init+0x84>)
 8002430:	6013      	str	r3, [r2, #0]
  command_rw_bit = config.command_rw_bit; // for backwards compatibility
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	4a0b      	ldr	r2, [pc, #44]	@ (8002464 <MagneticSensorSPI_init+0x88>)
 8002436:	6013      	str	r3, [r2, #0]
  data_start_bit = config.data_start_bit; // for backwards compatibility
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4a0b      	ldr	r2, [pc, #44]	@ (8002468 <MagneticSensorSPI_init+0x8c>)
 800243c:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800243e:	2201      	movs	r2, #1
 8002440:	2110      	movs	r1, #16
 8002442:	480a      	ldr	r0, [pc, #40]	@ (800246c <MagneticSensorSPI_init+0x90>)
 8002444:	f003 fe8a 	bl	800615c <HAL_GPIO_WritePin>
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002450:	b004      	add	sp, #16
 8002452:	4770      	bx	lr
 8002454:	20000400 	.word	0x20000400
 8002458:	200003ec 	.word	0x200003ec
 800245c:	200003f0 	.word	0x200003f0
 8002460:	200003f4 	.word	0x200003f4
 8002464:	200003f8 	.word	0x200003f8
 8002468:	200003fc 	.word	0x200003fc
 800246c:	40010800 	.word	0x40010800

08002470 <spiCalcEvenParity>:

/**
 * Utility function used to calculate even parity of word
 */
uint8_t spiCalcEvenParity(uint16_t value)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for (i = 0; i < 16; i++)
 800247e:	2300      	movs	r3, #0
 8002480:	73bb      	strb	r3, [r7, #14]
 8002482:	e00d      	b.n	80024a0 <spiCalcEvenParity+0x30>
	{
		if (value & 0x1)
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <spiCalcEvenParity+0x24>
			cnt++;
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	3301      	adds	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
		value >>= 1;
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	085b      	lsrs	r3, r3, #1
 8002498:	80fb      	strh	r3, [r7, #6]
	for (i = 0; i < 16; i++)
 800249a:	7bbb      	ldrb	r3, [r7, #14]
 800249c:	3301      	adds	r3, #1
 800249e:	73bb      	strb	r3, [r7, #14]
 80024a0:	7bbb      	ldrb	r3, [r7, #14]
 80024a2:	2b0f      	cmp	r3, #15
 80024a4:	d9ee      	bls.n	8002484 <spiCalcEvenParity+0x14>
	}
	return cnt & 0x1;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	b2db      	uxtb	r3, r3
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <read>:
  * Read a register from the sensor
  * Takes the address of the register as a 16 bit word
  * Returns the value of the register
  */
uint16_t read(uint16_t angle_register)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af02      	add	r7, sp, #8
 80024be:	4603      	mov	r3, r0
 80024c0:	80fb      	strh	r3, [r7, #6]
  uint16_t register_value;
  uint16_t command = angle_register;
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	817b      	strh	r3, [r7, #10]


  if (command_rw_bit > 0)
 80024c6:	4b39      	ldr	r3, [pc, #228]	@ (80025ac <read+0xf4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	dd0b      	ble.n	80024e6 <read+0x2e>
  {
    command = angle_register | (1 << command_rw_bit);
 80024ce:	4b37      	ldr	r3, [pc, #220]	@ (80025ac <read+0xf4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2201      	movs	r2, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	b21a      	sxth	r2, r3
 80024da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024de:	4313      	orrs	r3, r2
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	817b      	strh	r3, [r7, #10]
  }
  if (command_parity_bit > 0)
 80024e6:	4b32      	ldr	r3, [pc, #200]	@ (80025b0 <read+0xf8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	dd10      	ble.n	8002510 <read+0x58>
  {
   	//Add a parity bit on the the MSB
  	command |= ((uint16_t)spiCalcEvenParity(command) << command_parity_bit);
 80024ee:	897b      	ldrh	r3, [r7, #10]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ffbd 	bl	8002470 <spiCalcEvenParity>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b2d      	ldr	r3, [pc, #180]	@ (80025b0 <read+0xf8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	b21a      	sxth	r2, r3
 8002504:	897b      	ldrh	r3, [r7, #10]
 8002506:	b21b      	sxth	r3, r3
 8002508:	4313      	orrs	r3, r2
 800250a:	b21b      	sxth	r3, r3
 800250c:	b29b      	uxth	r3, r3
 800250e:	817b      	strh	r3, [r7, #10]

  //SPI - begin transaction

  //Send the command
  //  spi->transfer16(command);
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8002510:	2200      	movs	r2, #0
 8002512:	2110      	movs	r1, #16
 8002514:	4827      	ldr	r0, [pc, #156]	@ (80025b4 <read+0xfc>)
 8002516:	f003 fe21 	bl	800615c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&command, (uint8_t *)&register_value, sizeof(register_value)/sizeof(uint16_t), 100);
 800251a:	f107 020c 	add.w	r2, r7, #12
 800251e:	f107 010a 	add.w	r1, r7, #10
 8002522:	2364      	movs	r3, #100	@ 0x64
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	2301      	movs	r3, #1
 8002528:	4823      	ldr	r0, [pc, #140]	@ (80025b8 <read+0x100>)
 800252a:	f004 fb83 	bl	8006c34 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800252e:	2201      	movs	r2, #1
 8002530:	2110      	movs	r1, #16
 8002532:	4820      	ldr	r0, [pc, #128]	@ (80025b4 <read+0xfc>)
 8002534:	f003 fe12 	bl	800615c <HAL_GPIO_WritePin>

//  delay_us(1);

  command = 0x0000;
 8002538:	2300      	movs	r3, #0
 800253a:	817b      	strh	r3, [r7, #10]
  //Now read the response (NO_OPERATION_COMMAND = 0x0000)
  //  uint16_t register_value = spi->transfer16(0x00);
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 800253c:	2200      	movs	r2, #0
 800253e:	2110      	movs	r1, #16
 8002540:	481c      	ldr	r0, [pc, #112]	@ (80025b4 <read+0xfc>)
 8002542:	f003 fe0b 	bl	800615c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&command, (uint8_t *)&register_value, sizeof(register_value)/sizeof(uint16_t), 100);
 8002546:	f107 020c 	add.w	r2, r7, #12
 800254a:	f107 010a 	add.w	r1, r7, #10
 800254e:	2364      	movs	r3, #100	@ 0x64
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2301      	movs	r3, #1
 8002554:	4818      	ldr	r0, [pc, #96]	@ (80025b8 <read+0x100>)
 8002556:	f004 fb6d 	bl	8006c34 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800255a:	2201      	movs	r2, #1
 800255c:	2110      	movs	r1, #16
 800255e:	4815      	ldr	r0, [pc, #84]	@ (80025b4 <read+0xfc>)
 8002560:	f003 fdfc 	bl	800615c <HAL_GPIO_WritePin>

  //SPI - end transaction

  register_value = register_value >> (1 + data_start_bit - bit_resolution);  //this should shift data to the rightmost bits of the word
 8002564:	89bb      	ldrh	r3, [r7, #12]
 8002566:	4619      	mov	r1, r3
 8002568:	4b14      	ldr	r3, [pc, #80]	@ (80025bc <read+0x104>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	4b14      	ldr	r3, [pc, #80]	@ (80025c0 <read+0x108>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	fa41 f303 	asr.w	r3, r1, r3
 8002578:	b29b      	uxth	r3, r3
 800257a:	81bb      	strh	r3, [r7, #12]
  uint16_t data_mask = 0xFFFF >> (16 - bit_resolution);
 800257c:	4b10      	ldr	r3, [pc, #64]	@ (80025c0 <read+0x108>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f1c3 0310 	rsb	r3, r3, #16
 8002584:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002588:	fa42 f303 	asr.w	r3, r2, r3
 800258c:	81fb      	strh	r3, [r7, #14]
  temp = register_value & data_mask;
 800258e:	89ba      	ldrh	r2, [r7, #12]
 8002590:	89fb      	ldrh	r3, [r7, #14]
 8002592:	4013      	ands	r3, r2
 8002594:	b29a      	uxth	r2, r3
 8002596:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <read+0x10c>)
 8002598:	801a      	strh	r2, [r3, #0]
  return register_value & data_mask; // Return the data, stripping the non data (e.g parity) bits
 800259a:	89ba      	ldrh	r2, [r7, #12]
 800259c:	89fb      	ldrh	r3, [r7, #14]
 800259e:	4013      	ands	r3, r2
 80025a0:	b29b      	uxth	r3, r3
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200003f8 	.word	0x200003f8
 80025b0:	200003f4 	.word	0x200003f4
 80025b4:	40010800 	.word	0x40010800
 80025b8:	200002c0 	.word	0x200002c0
 80025bc:	200003fc 	.word	0x200003fc
 80025c0:	200003f0 	.word	0x200003f0
 80025c4:	200005fc 	.word	0x200005fc

080025c8 <getRawCount>:

// function reading the raw counter of the magnetic sensor
int getRawCount()
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
	return (int)read(angle_register);
 80025cc:	4b04      	ldr	r3, [pc, #16]	@ (80025e0 <getRawCount+0x18>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff ff70 	bl	80024b8 <read>
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000400 	.word	0x20000400
 80025e4:	00000000 	.word	0x00000000

080025e8 <getSensorAngle>:

//  Shaft angle calculation
//  angle is in radians [rad]
float getSensorAngle()
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  return (getRawCount() / (float)cpr) * _2PI;
 80025ec:	f7ff ffec 	bl	80025c8 <getRawCount>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fb72 	bl	8000cdc <__aeabi_i2f>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002638 <getSensorAngle+0x50>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4619      	mov	r1, r3
 8002600:	4610      	mov	r0, r2
 8002602:	f7fe fc73 	bl	8000eec <__aeabi_fdiv>
 8002606:	4603      	mov	r3, r0
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ff0d 	bl	8000428 <__aeabi_f2d>
 800260e:	a308      	add	r3, pc, #32	@ (adr r3, 8002630 <getSensorAngle+0x48>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	f7fd ff60 	bl	80004d8 <__aeabi_dmul>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	f7fe fa52 	bl	8000ac8 <__aeabi_d2f>
 8002624:	4603      	mov	r3, r0
}
 8002626:	4618      	mov	r0, r3
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	f3af 8000 	nop.w
 8002630:	54442eea 	.word	0x54442eea
 8002634:	401921fb 	.word	0x401921fb
 8002638:	200003ec 	.word	0x200003ec

0800263c <Sensor_init>:

void Sensor_init()
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
    // initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
    getSensorAngle(); // call once
 8002640:	f7ff ffd2 	bl	80025e8 <getSensorAngle>

    vel_angle_prev = getSensorAngle(); // call again
 8002644:	f7ff ffd0 	bl	80025e8 <getSensorAngle>
 8002648:	4603      	mov	r3, r0
 800264a:	4a0d      	ldr	r2, [pc, #52]	@ (8002680 <Sensor_init+0x44>)
 800264c:	6013      	str	r3, [r2, #0]
    vel_angle_prev_ts = micros();
 800264e:	f7ff faef 	bl	8001c30 <micros>
 8002652:	4603      	mov	r3, r0
 8002654:	461a      	mov	r2, r3
 8002656:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <Sensor_init+0x48>)
 8002658:	601a      	str	r2, [r3, #0]
    HAL_Delay(1);
 800265a:	2001      	movs	r0, #1
 800265c:	f001 fec8 	bl	80043f0 <HAL_Delay>
    getSensorAngle(); // call once
 8002660:	f7ff ffc2 	bl	80025e8 <getSensorAngle>

    angle_prev = getSensorAngle(); // call again
 8002664:	f7ff ffc0 	bl	80025e8 <getSensorAngle>
 8002668:	4603      	mov	r3, r0
 800266a:	4a07      	ldr	r2, [pc, #28]	@ (8002688 <Sensor_init+0x4c>)
 800266c:	6013      	str	r3, [r2, #0]
    angle_prev_ts = micros();
 800266e:	f7ff fadf 	bl	8001c30 <micros>
 8002672:	4603      	mov	r3, r0
 8002674:	461a      	mov	r2, r3
 8002676:	4b05      	ldr	r3, [pc, #20]	@ (800268c <Sensor_init+0x50>)
 8002678:	601a      	str	r2, [r3, #0]
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	2000040c 	.word	0x2000040c
 8002684:	20000410 	.word	0x20000410
 8002688:	20000404 	.word	0x20000404
 800268c:	20000408 	.word	0x20000408

08002690 <updateSensor>:

void updateSensor()
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
    float val = getSensorAngle();
 8002696:	f7ff ffa7 	bl	80025e8 <getSensorAngle>
 800269a:	6078      	str	r0, [r7, #4]
    angle_prev_ts = micros();
 800269c:	f7ff fac8 	bl	8001c30 <micros>
 80026a0:	4603      	mov	r3, r0
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <updateSensor+0x6c>)
 80026a6:	601a      	str	r2, [r3, #0]
    float d_angle = val - angle_prev;
 80026a8:	4b15      	ldr	r3, [pc, #84]	@ (8002700 <updateSensor+0x70>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4619      	mov	r1, r3
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fe fa5e 	bl	8000b70 <__aeabi_fsub>
 80026b4:	4603      	mov	r3, r0
 80026b6:	603b      	str	r3, [r7, #0]
    // if overflow happened track it as full rotation
    if(abs(d_angle) > (0.8f*_2PI))
 80026b8:	6838      	ldr	r0, [r7, #0]
 80026ba:	f7fe fd29 	bl	8001110 <__aeabi_f2iz>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bfb8      	it	lt
 80026c4:	425b      	neglt	r3, r3
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	dd10      	ble.n	80026ec <updateSensor+0x5c>
      full_rotations += ( d_angle > 0 ) ? -1 : 1;
 80026ca:	f04f 0100 	mov.w	r1, #0
 80026ce:	6838      	ldr	r0, [r7, #0]
 80026d0:	f7fe fd14 	bl	80010fc <__aeabi_fcmpgt>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <updateSensor+0x50>
 80026da:	f04f 32ff 	mov.w	r2, #4294967295
 80026de:	e000      	b.n	80026e2 <updateSensor+0x52>
 80026e0:	2201      	movs	r2, #1
 80026e2:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <updateSensor+0x74>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	4a06      	ldr	r2, [pc, #24]	@ (8002704 <updateSensor+0x74>)
 80026ea:	6013      	str	r3, [r2, #0]
    angle_prev = val;
 80026ec:	4a04      	ldr	r2, [pc, #16]	@ (8002700 <updateSensor+0x70>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6013      	str	r3, [r2, #0]
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000408 	.word	0x20000408
 8002700:	20000404 	.word	0x20000404
 8002704:	20000414 	.word	0x20000414

08002708 <getMechanicalAngle>:

float getMechanicalAngle()
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
    return angle_prev;
 800270c:	4b02      	ldr	r3, [pc, #8]	@ (8002718 <getMechanicalAngle+0x10>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	20000404 	.word	0x20000404
 800271c:	00000000 	.word	0x00000000

08002720 <getAngle>:

float getAngle()
{
 8002720:	b5b0      	push	{r4, r5, r7, lr}
 8002722:	af00      	add	r7, sp, #0
    return (float)full_rotations * _2PI + angle_prev;
 8002724:	4b14      	ldr	r3, [pc, #80]	@ (8002778 <getAngle+0x58>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fe fad7 	bl	8000cdc <__aeabi_i2f>
 800272e:	4603      	mov	r3, r0
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd fe79 	bl	8000428 <__aeabi_f2d>
 8002736:	a30e      	add	r3, pc, #56	@ (adr r3, 8002770 <getAngle+0x50>)
 8002738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273c:	f7fd fecc 	bl	80004d8 <__aeabi_dmul>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4614      	mov	r4, r2
 8002746:	461d      	mov	r5, r3
 8002748:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <getAngle+0x5c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fe6b 	bl	8000428 <__aeabi_f2d>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4620      	mov	r0, r4
 8002758:	4629      	mov	r1, r5
 800275a:	f7fd fd07 	bl	800016c <__adddf3>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4610      	mov	r0, r2
 8002764:	4619      	mov	r1, r3
 8002766:	f7fe f9af 	bl	8000ac8 <__aeabi_d2f>
 800276a:	4603      	mov	r3, r0
}
 800276c:	4618      	mov	r0, r3
 800276e:	bdb0      	pop	{r4, r5, r7, pc}
 8002770:	54442eea 	.word	0x54442eea
 8002774:	401921fb 	.word	0x401921fb
 8002778:	20000414 	.word	0x20000414
 800277c:	20000404 	.word	0x20000404

08002780 <getvelocity>:
    return full_rotations;
}


float getvelocity()
{
 8002780:	b5b0      	push	{r4, r5, r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
    // calculate sample time
    float Ts = (angle_prev_ts - vel_angle_prev_ts)*1e-6;
 8002786:	4b3a      	ldr	r3, [pc, #232]	@ (8002870 <getvelocity+0xf0>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b3a      	ldr	r3, [pc, #232]	@ (8002874 <getvelocity+0xf4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	4618      	mov	r0, r3
 8002792:	f7fd fe37 	bl	8000404 <__aeabi_i2d>
 8002796:	a332      	add	r3, pc, #200	@ (adr r3, 8002860 <getvelocity+0xe0>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	f7fd fe9c 	bl	80004d8 <__aeabi_dmul>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	f7fe f98e 	bl	8000ac8 <__aeabi_d2f>
 80027ac:	4603      	mov	r3, r0
 80027ae:	607b      	str	r3, [r7, #4]
    // quick fix for strange cases (micros overflow)
    if(Ts <= 0)
 80027b0:	f04f 0100 	mov.w	r1, #0
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7fe fc8d 	bl	80010d4 <__aeabi_fcmple>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <getvelocity+0x44>
    	Ts = 1e-3f;
 80027c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002878 <getvelocity+0xf8>)
 80027c2:	607b      	str	r3, [r7, #4]
    // velocity calculation
    float vel = ( (float)(full_rotations - vel_full_rotations)*_2PI + (angle_prev - vel_angle_prev) ) / Ts;
 80027c4:	4b2d      	ldr	r3, [pc, #180]	@ (800287c <getvelocity+0xfc>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002880 <getvelocity+0x100>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fa84 	bl	8000cdc <__aeabi_i2f>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fe26 	bl	8000428 <__aeabi_f2d>
 80027dc:	a322      	add	r3, pc, #136	@ (adr r3, 8002868 <getvelocity+0xe8>)
 80027de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e2:	f7fd fe79 	bl	80004d8 <__aeabi_dmul>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4614      	mov	r4, r2
 80027ec:	461d      	mov	r5, r3
 80027ee:	4b25      	ldr	r3, [pc, #148]	@ (8002884 <getvelocity+0x104>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a25      	ldr	r2, [pc, #148]	@ (8002888 <getvelocity+0x108>)
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe f9b9 	bl	8000b70 <__aeabi_fsub>
 80027fe:	4603      	mov	r3, r0
 8002800:	4618      	mov	r0, r3
 8002802:	f7fd fe11 	bl	8000428 <__aeabi_f2d>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4620      	mov	r0, r4
 800280c:	4629      	mov	r1, r5
 800280e:	f7fd fcad 	bl	800016c <__adddf3>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4614      	mov	r4, r2
 8002818:	461d      	mov	r5, r3
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fd fe04 	bl	8000428 <__aeabi_f2d>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4620      	mov	r0, r4
 8002826:	4629      	mov	r1, r5
 8002828:	f7fd ff80 	bl	800072c <__aeabi_ddiv>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	f7fe f948 	bl	8000ac8 <__aeabi_d2f>
 8002838:	4603      	mov	r3, r0
 800283a:	603b      	str	r3, [r7, #0]
    // save variables for future pass
    vel_angle_prev = angle_prev;
 800283c:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <getvelocity+0x104>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a11      	ldr	r2, [pc, #68]	@ (8002888 <getvelocity+0x108>)
 8002842:	6013      	str	r3, [r2, #0]
    vel_full_rotations = full_rotations;
 8002844:	4b0d      	ldr	r3, [pc, #52]	@ (800287c <getvelocity+0xfc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0d      	ldr	r2, [pc, #52]	@ (8002880 <getvelocity+0x100>)
 800284a:	6013      	str	r3, [r2, #0]
    vel_angle_prev_ts = angle_prev_ts;
 800284c:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <getvelocity+0xf0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a08      	ldr	r2, [pc, #32]	@ (8002874 <getvelocity+0xf4>)
 8002852:	6013      	str	r3, [r2, #0]
    return vel;
 8002854:	683b      	ldr	r3, [r7, #0]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bdb0      	pop	{r4, r5, r7, pc}
 800285e:	bf00      	nop
 8002860:	a0b5ed8d 	.word	0xa0b5ed8d
 8002864:	3eb0c6f7 	.word	0x3eb0c6f7
 8002868:	54442eea 	.word	0x54442eea
 800286c:	401921fb 	.word	0x401921fb
 8002870:	20000408 	.word	0x20000408
 8002874:	20000410 	.word	0x20000410
 8002878:	3a83126f 	.word	0x3a83126f
 800287c:	20000414 	.word	0x20000414
 8002880:	20000418 	.word	0x20000418
 8002884:	20000404 	.word	0x20000404
 8002888:	2000040c 	.word	0x2000040c

0800288c <shaftAngle>:

// shaft angle calculation
float shaftAngle()
{
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b087      	sub	sp, #28
 8002890:	af02      	add	r7, sp, #8
  LPF_angle_s.x = getAngle();
 8002892:	f7ff ff45 	bl	8002720 <getAngle>
 8002896:	4603      	mov	r3, r0
 8002898:	4a13      	ldr	r2, [pc, #76]	@ (80028e8 <shaftAngle+0x5c>)
 800289a:	6013      	str	r3, [r2, #0]
  LPF_angle_s = LowPassFilter(LPF_angle_s);
 800289c:	4c12      	ldr	r4, [pc, #72]	@ (80028e8 <shaftAngle+0x5c>)
 800289e:	4638      	mov	r0, r7
 80028a0:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <shaftAngle+0x5c>)
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	9200      	str	r2, [sp, #0]
 80028a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028a8:	f000 fe9c 	bl	80035e4 <LowPassFilter>
 80028ac:	463b      	mov	r3, r7
 80028ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return sensor_direction*LPF_angle_s.y_prev - sensor_offset;
 80028b4:	4b0d      	ldr	r3, [pc, #52]	@ (80028ec <shaftAngle+0x60>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe fa0f 	bl	8000cdc <__aeabi_i2f>
 80028be:	4602      	mov	r2, r0
 80028c0:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <shaftAngle+0x5c>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4619      	mov	r1, r3
 80028c6:	4610      	mov	r0, r2
 80028c8:	f7fe fa5c 	bl	8000d84 <__aeabi_fmul>
 80028cc:	4603      	mov	r3, r0
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b07      	ldr	r3, [pc, #28]	@ (80028f0 <shaftAngle+0x64>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f7fe f94a 	bl	8000b70 <__aeabi_fsub>
 80028dc:	4603      	mov	r3, r0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd90      	pop	{r4, r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000470 	.word	0x20000470
 80028ec:	2000001c 	.word	0x2000001c
 80028f0:	20000594 	.word	0x20000594

080028f4 <shaftVelocity>:
// shaft velocity calculation
float shaftVelocity()
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af02      	add	r7, sp, #8
  LPF_velocity_s.x = getvelocity();
 80028fa:	f7ff ff41 	bl	8002780 <getvelocity>
 80028fe:	4603      	mov	r3, r0
 8002900:	4a0f      	ldr	r2, [pc, #60]	@ (8002940 <shaftVelocity+0x4c>)
 8002902:	6013      	str	r3, [r2, #0]
  LPF_velocity_s = LowPassFilter(LPF_velocity_s);
 8002904:	4c0e      	ldr	r4, [pc, #56]	@ (8002940 <shaftVelocity+0x4c>)
 8002906:	4638      	mov	r0, r7
 8002908:	4b0d      	ldr	r3, [pc, #52]	@ (8002940 <shaftVelocity+0x4c>)
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	9200      	str	r2, [sp, #0]
 800290e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002910:	f000 fe68 	bl	80035e4 <LowPassFilter>
 8002914:	463b      	mov	r3, r7
 8002916:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return sensor_direction*LPF_velocity_s.y_prev;
 800291c:	4b09      	ldr	r3, [pc, #36]	@ (8002944 <shaftVelocity+0x50>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe f9db 	bl	8000cdc <__aeabi_i2f>
 8002926:	4602      	mov	r2, r0
 8002928:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <shaftVelocity+0x4c>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4619      	mov	r1, r3
 800292e:	4610      	mov	r0, r2
 8002930:	f7fe fa28 	bl	8000d84 <__aeabi_fmul>
 8002934:	4603      	mov	r3, r0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bd90      	pop	{r4, r7, pc}
 800293e:	bf00      	nop
 8002940:	20000480 	.word	0x20000480
 8002944:	2000001c 	.word	0x2000001c

08002948 <electricalAngle>:

//Conversion shaft angle to elec angle
float electricalAngle()
{
 8002948:	b598      	push	{r3, r4, r7, lr}
 800294a:	af00      	add	r7, sp, #0
  return  _normalizeAngle( (float)(sensor_direction * pole_pairs) * getMechanicalAngle()  - zero_electric_angle);
 800294c:	4b0f      	ldr	r3, [pc, #60]	@ (800298c <electricalAngle+0x44>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0f      	ldr	r2, [pc, #60]	@ (8002990 <electricalAngle+0x48>)
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	fb02 f303 	mul.w	r3, r2, r3
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe f9bf 	bl	8000cdc <__aeabi_i2f>
 800295e:	4604      	mov	r4, r0
 8002960:	f7ff fed2 	bl	8002708 <getMechanicalAngle>
 8002964:	4603      	mov	r3, r0
 8002966:	4619      	mov	r1, r3
 8002968:	4620      	mov	r0, r4
 800296a:	f7fe fa0b 	bl	8000d84 <__aeabi_fmul>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <electricalAngle+0x4c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4619      	mov	r1, r3
 8002978:	4610      	mov	r0, r2
 800297a:	f7fe f8f9 	bl	8000b70 <__aeabi_fsub>
 800297e:	4603      	mov	r3, r0
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fcc1 	bl	8002308 <_normalizeAngle>
 8002986:	4603      	mov	r3, r0
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd98      	pop	{r3, r4, r7, pc}
 800298c:	2000001c 	.word	0x2000001c
 8002990:	20000014 	.word	0x20000014
 8002994:	20000018 	.word	0x20000018

08002998 <writeDutyCycle3PWM>:



//Write PWM fsw = 25kHzfloat Ts
void writeDutyCycle3PWM(float dc_a,float dc_b,float dc_c)
{
 8002998:	b590      	push	{r4, r7, lr}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ARR_MAX_CA*dc_a );
 80029a4:	4915      	ldr	r1, [pc, #84]	@ (80029fc <writeDutyCycle3PWM+0x64>)
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f7fe f9ec 	bl	8000d84 <__aeabi_fmul>
 80029ac:	4603      	mov	r3, r0
 80029ae:	461a      	mov	r2, r3
 80029b0:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <writeDutyCycle3PWM+0x68>)
 80029b2:	681c      	ldr	r4, [r3, #0]
 80029b4:	4610      	mov	r0, r2
 80029b6:	f7fe fbd1 	bl	800115c <__aeabi_f2uiz>
 80029ba:	4603      	mov	r3, r0
 80029bc:	6363      	str	r3, [r4, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ARR_MAX_CA*dc_b );
 80029be:	490f      	ldr	r1, [pc, #60]	@ (80029fc <writeDutyCycle3PWM+0x64>)
 80029c0:	68b8      	ldr	r0, [r7, #8]
 80029c2:	f7fe f9df 	bl	8000d84 <__aeabi_fmul>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461a      	mov	r2, r3
 80029ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002a00 <writeDutyCycle3PWM+0x68>)
 80029cc:	681c      	ldr	r4, [r3, #0]
 80029ce:	4610      	mov	r0, r2
 80029d0:	f7fe fbc4 	bl	800115c <__aeabi_f2uiz>
 80029d4:	4603      	mov	r3, r0
 80029d6:	63a3      	str	r3, [r4, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, ARR_MAX_CA*dc_c );
 80029d8:	4908      	ldr	r1, [pc, #32]	@ (80029fc <writeDutyCycle3PWM+0x64>)
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fe f9d2 	bl	8000d84 <__aeabi_fmul>
 80029e0:	4603      	mov	r3, r0
 80029e2:	461a      	mov	r2, r3
 80029e4:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <writeDutyCycle3PWM+0x68>)
 80029e6:	681c      	ldr	r4, [r3, #0]
 80029e8:	4610      	mov	r0, r2
 80029ea:	f7fe fbb7 	bl	800115c <__aeabi_f2uiz>
 80029ee:	4603      	mov	r3, r0
 80029f0:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd90      	pop	{r4, r7, pc}
 80029fa:	bf00      	nop
 80029fc:	44b40000 	.word	0x44b40000
 8002a00:	20000318 	.word	0x20000318
 8002a04:	00000000 	.word	0x00000000

08002a08 <setPhaseVoltage>:

// Method using FOC to set Uq and Ud to the motor at the optimal angle
// Function implementing Space Vector PWM and Sine PWM algorithms
void setPhaseVoltage(float Uq, float Ud, float angle_el)
{
 8002a08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a0c:	b090      	sub	sp, #64	@ 0x40
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
  float Uout;
  // a bit of optitmisation
  if(Ud)
 8002a16:	f04f 0100 	mov.w	r1, #0
 8002a1a:	68b8      	ldr	r0, [r7, #8]
 8002a1c:	f7fe fb46 	bl	80010ac <__aeabi_fcmpeq>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d140      	bne.n	8002aa8 <setPhaseVoltage+0xa0>
  {
	// only if Ud and Uq set
    // _sqrt is an approx of sqrt (3-4% error)
    Uout = _sqrt(Ud*Ud + Uq*Uq) / voltage_limit;
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	68b8      	ldr	r0, [r7, #8]
 8002a2a:	f7fe f9ab 	bl	8000d84 <__aeabi_fmul>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	461c      	mov	r4, r3
 8002a32:	68f9      	ldr	r1, [r7, #12]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f7fe f9a5 	bl	8000d84 <__aeabi_fmul>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7fe f898 	bl	8000b74 <__addsf3>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fca8 	bl	800239c <_sqrtApprox>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	4bbe      	ldr	r3, [pc, #760]	@ (8002d48 <setPhaseVoltage+0x340>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4619      	mov	r1, r3
 8002a54:	4610      	mov	r0, r2
 8002a56:	f7fe fa49 	bl	8000eec <__aeabi_fdiv>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    // angle normalisation in between 0 and 2pi
    // only necessary if using _sin and _cos - approximation functions
    angle_el = _normalizeAngle(angle_el + atan2(Uq, Ud));
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fd fce2 	bl	8000428 <__aeabi_f2d>
 8002a64:	4604      	mov	r4, r0
 8002a66:	460d      	mov	r5, r1
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7fd fcdd 	bl	8000428 <__aeabi_f2d>
 8002a6e:	4680      	mov	r8, r0
 8002a70:	4689      	mov	r9, r1
 8002a72:	68b8      	ldr	r0, [r7, #8]
 8002a74:	f7fd fcd8 	bl	8000428 <__aeabi_f2d>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4640      	mov	r0, r8
 8002a7e:	4649      	mov	r1, r9
 8002a80:	f009 feb4 	bl	800c7ec <atan2>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4620      	mov	r0, r4
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	f7fd fb6e 	bl	800016c <__adddf3>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	f7fe f816 	bl	8000ac8 <__aeabi_d2f>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fc32 	bl	8002308 <_normalizeAngle>
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	e01a      	b.n	8002ade <setPhaseVoltage+0xd6>
  }
  else
  {
	// only Uq available - no need for atan2 and sqrt
    Uout = Uq / voltage_limit;
 8002aa8:	4ba7      	ldr	r3, [pc, #668]	@ (8002d48 <setPhaseVoltage+0x340>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4619      	mov	r1, r3
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f7fe fa1c 	bl	8000eec <__aeabi_fdiv>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    // angle normalisation in between 0 and 2pi
    // only necessary if using _sin and _cos - approximation functions
    angle_el = _normalizeAngle(angle_el + _PI_2);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7fd fcb5 	bl	8000428 <__aeabi_f2d>
 8002abe:	a39c      	add	r3, pc, #624	@ (adr r3, 8002d30 <setPhaseVoltage+0x328>)
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f7fd fb52 	bl	800016c <__adddf3>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f7fd fffa 	bl	8000ac8 <__aeabi_d2f>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fc16 	bl	8002308 <_normalizeAngle>
 8002adc:	6078      	str	r0, [r7, #4]
  }
  // find the sector we are in currently
  int sector = floor(angle_el / _PI_3) + 1;
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fd fca2 	bl	8000428 <__aeabi_f2d>
 8002ae4:	a394      	add	r3, pc, #592	@ (adr r3, 8002d38 <setPhaseVoltage+0x330>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fe1f 	bl	800072c <__aeabi_ddiv>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	f009 ff13 	bl	800c920 <floor>
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	4b93      	ldr	r3, [pc, #588]	@ (8002d4c <setPhaseVoltage+0x344>)
 8002b00:	f7fd fb34 	bl	800016c <__adddf3>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f7fd ff94 	bl	8000a38 <__aeabi_d2iz>
 8002b10:	4603      	mov	r3, r0
 8002b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  // calculate the duty cycles
  float T1 = _SQRT3*_sin(sector*_PI_3 - angle_el) * Uout;
 8002b14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b16:	f7fd fc75 	bl	8000404 <__aeabi_i2d>
 8002b1a:	a387      	add	r3, pc, #540	@ (adr r3, 8002d38 <setPhaseVoltage+0x330>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f7fd fcda 	bl	80004d8 <__aeabi_dmul>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4614      	mov	r4, r2
 8002b2a:	461d      	mov	r5, r3
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7fd fc7b 	bl	8000428 <__aeabi_f2d>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4620      	mov	r0, r4
 8002b38:	4629      	mov	r1, r5
 8002b3a:	f7fd fb15 	bl	8000168 <__aeabi_dsub>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	f7fd ffbf 	bl	8000ac8 <__aeabi_d2f>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fa3f 	bl	8001fd0 <_sin>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fc67 	bl	8000428 <__aeabi_f2d>
 8002b5a:	a379      	add	r3, pc, #484	@ (adr r3, 8002d40 <setPhaseVoltage+0x338>)
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	f7fd fcba 	bl	80004d8 <__aeabi_dmul>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4614      	mov	r4, r2
 8002b6a:	461d      	mov	r5, r3
 8002b6c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002b6e:	f7fd fc5b 	bl	8000428 <__aeabi_f2d>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4620      	mov	r0, r4
 8002b78:	4629      	mov	r1, r5
 8002b7a:	f7fd fcad 	bl	80004d8 <__aeabi_dmul>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4610      	mov	r0, r2
 8002b84:	4619      	mov	r1, r3
 8002b86:	f7fd ff9f 	bl	8000ac8 <__aeabi_d2f>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  float T2 = _SQRT3*_sin(angle_el - (sector-1.0f)*_PI_3) * Uout;
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fd fc4a 	bl	8000428 <__aeabi_f2d>
 8002b94:	4604      	mov	r4, r0
 8002b96:	460d      	mov	r5, r1
 8002b98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b9a:	f7fe f89f 	bl	8000cdc <__aeabi_i2f>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fd ffe3 	bl	8000b70 <__aeabi_fsub>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fd fc3b 	bl	8000428 <__aeabi_f2d>
 8002bb2:	a361      	add	r3, pc, #388	@ (adr r3, 8002d38 <setPhaseVoltage+0x330>)
 8002bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb8:	f7fd fc8e 	bl	80004d8 <__aeabi_dmul>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	f7fd fad0 	bl	8000168 <__aeabi_dsub>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4619      	mov	r1, r3
 8002bd0:	f7fd ff7a 	bl	8000ac8 <__aeabi_d2f>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff f9fa 	bl	8001fd0 <_sin>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd fc22 	bl	8000428 <__aeabi_f2d>
 8002be4:	a356      	add	r3, pc, #344	@ (adr r3, 8002d40 <setPhaseVoltage+0x338>)
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	f7fd fc75 	bl	80004d8 <__aeabi_dmul>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4614      	mov	r4, r2
 8002bf4:	461d      	mov	r5, r3
 8002bf6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002bf8:	f7fd fc16 	bl	8000428 <__aeabi_f2d>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4620      	mov	r0, r4
 8002c02:	4629      	mov	r1, r5
 8002c04:	f7fd fc68 	bl	80004d8 <__aeabi_dmul>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f7fd ff5a 	bl	8000ac8 <__aeabi_d2f>
 8002c14:	4603      	mov	r3, r0
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24
//  float T0 = 1 - T1 - T2; // modulation_centered around driver->voltage_limit/2
  float T0 = 0; // pulled to 0 - better for low power supply voltage
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	623b      	str	r3, [r7, #32]


  // calculate the duty cycles(times)
  float Ta, Tb, Tc;
  switch (sector)
 8002c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c20:	3b01      	subs	r3, #1
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	f200 8106 	bhi.w	8002e34 <setPhaseVoltage+0x42c>
 8002c28:	a201      	add	r2, pc, #4	@ (adr r2, 8002c30 <setPhaseVoltage+0x228>)
 8002c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2e:	bf00      	nop
 8002c30:	08002c49 	.word	0x08002c49
 8002c34:	08002c95 	.word	0x08002c95
 8002c38:	08002ce1 	.word	0x08002ce1
 8002c3c:	08002d51 	.word	0x08002d51
 8002c40:	08002d9d 	.word	0x08002d9d
 8002c44:	08002de9 	.word	0x08002de9
  {
    case 1:
      Ta = T1 + T2 + T0 / 2;
 8002c48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c4c:	f7fd ff92 	bl	8000b74 <__addsf3>
 8002c50:	4603      	mov	r3, r0
 8002c52:	461c      	mov	r4, r3
 8002c54:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002c58:	6a38      	ldr	r0, [r7, #32]
 8002c5a:	f7fe f947 	bl	8000eec <__aeabi_fdiv>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4619      	mov	r1, r3
 8002c62:	4620      	mov	r0, r4
 8002c64:	f7fd ff86 	bl	8000b74 <__addsf3>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      Tb = T2 + T0 / 2;
 8002c6c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002c70:	6a38      	ldr	r0, [r7, #32]
 8002c72:	f7fe f93b 	bl	8000eec <__aeabi_fdiv>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4619      	mov	r1, r3
 8002c7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c7c:	f7fd ff7a 	bl	8000b74 <__addsf3>
 8002c80:	4603      	mov	r3, r0
 8002c82:	637b      	str	r3, [r7, #52]	@ 0x34
      Tc = T0 / 2;
 8002c84:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002c88:	6a38      	ldr	r0, [r7, #32]
 8002c8a:	f7fe f92f 	bl	8000eec <__aeabi_fdiv>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002c92:	e0d8      	b.n	8002e46 <setPhaseVoltage+0x43e>
    case 2:
      Ta = T1 +  T0 / 2;
 8002c94:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002c98:	6a38      	ldr	r0, [r7, #32]
 8002c9a:	f7fe f927 	bl	8000eec <__aeabi_fdiv>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ca4:	f7fd ff66 	bl	8000b74 <__addsf3>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	63bb      	str	r3, [r7, #56]	@ 0x38
      Tb = T1 + T2 + T0 / 2;
 8002cac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cb0:	f7fd ff60 	bl	8000b74 <__addsf3>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	461c      	mov	r4, r3
 8002cb8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002cbc:	6a38      	ldr	r0, [r7, #32]
 8002cbe:	f7fe f915 	bl	8000eec <__aeabi_fdiv>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f7fd ff54 	bl	8000b74 <__addsf3>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	637b      	str	r3, [r7, #52]	@ 0x34
      Tc = T0 / 2;
 8002cd0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002cd4:	6a38      	ldr	r0, [r7, #32]
 8002cd6:	f7fe f909 	bl	8000eec <__aeabi_fdiv>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002cde:	e0b2      	b.n	8002e46 <setPhaseVoltage+0x43e>
    case 3:
      Ta = T0 / 2;
 8002ce0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002ce4:	6a38      	ldr	r0, [r7, #32]
 8002ce6:	f7fe f901 	bl	8000eec <__aeabi_fdiv>
 8002cea:	4603      	mov	r3, r0
 8002cec:	63bb      	str	r3, [r7, #56]	@ 0x38
      Tb = T1 + T2 + T0 / 2;
 8002cee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cf2:	f7fd ff3f 	bl	8000b74 <__addsf3>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461c      	mov	r4, r3
 8002cfa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002cfe:	6a38      	ldr	r0, [r7, #32]
 8002d00:	f7fe f8f4 	bl	8000eec <__aeabi_fdiv>
 8002d04:	4603      	mov	r3, r0
 8002d06:	4619      	mov	r1, r3
 8002d08:	4620      	mov	r0, r4
 8002d0a:	f7fd ff33 	bl	8000b74 <__addsf3>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	637b      	str	r3, [r7, #52]	@ 0x34
      Tc = T2 + T0 / 2;
 8002d12:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002d16:	6a38      	ldr	r0, [r7, #32]
 8002d18:	f7fe f8e8 	bl	8000eec <__aeabi_fdiv>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4619      	mov	r1, r3
 8002d20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d22:	f7fd ff27 	bl	8000b74 <__addsf3>
 8002d26:	4603      	mov	r3, r0
 8002d28:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002d2a:	e08c      	b.n	8002e46 <setPhaseVoltage+0x43e>
 8002d2c:	f3af 8000 	nop.w
 8002d30:	5443d6f4 	.word	0x5443d6f4
 8002d34:	3ff921fb 	.word	0x3ff921fb
 8002d38:	382daf40 	.word	0x382daf40
 8002d3c:	3ff0c152 	.word	0x3ff0c152
 8002d40:	e858606b 	.word	0xe858606b
 8002d44:	3ffbb67a 	.word	0x3ffbb67a
 8002d48:	20000588 	.word	0x20000588
 8002d4c:	3ff00000 	.word	0x3ff00000
    case 4:
      Ta = T0 / 2;
 8002d50:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002d54:	6a38      	ldr	r0, [r7, #32]
 8002d56:	f7fe f8c9 	bl	8000eec <__aeabi_fdiv>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      Tb = T1 + T0 / 2;
 8002d5e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002d62:	6a38      	ldr	r0, [r7, #32]
 8002d64:	f7fe f8c2 	bl	8000eec <__aeabi_fdiv>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d6e:	f7fd ff01 	bl	8000b74 <__addsf3>
 8002d72:	4603      	mov	r3, r0
 8002d74:	637b      	str	r3, [r7, #52]	@ 0x34
      Tc = T1 + T2 + T0 / 2;
 8002d76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d7a:	f7fd fefb 	bl	8000b74 <__addsf3>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461c      	mov	r4, r3
 8002d82:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002d86:	6a38      	ldr	r0, [r7, #32]
 8002d88:	f7fe f8b0 	bl	8000eec <__aeabi_fdiv>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4620      	mov	r0, r4
 8002d92:	f7fd feef 	bl	8000b74 <__addsf3>
 8002d96:	4603      	mov	r3, r0
 8002d98:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002d9a:	e054      	b.n	8002e46 <setPhaseVoltage+0x43e>
    case 5:
      Ta = T2 + T0 / 2;
 8002d9c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002da0:	6a38      	ldr	r0, [r7, #32]
 8002da2:	f7fe f8a3 	bl	8000eec <__aeabi_fdiv>
 8002da6:	4603      	mov	r3, r0
 8002da8:	4619      	mov	r1, r3
 8002daa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002dac:	f7fd fee2 	bl	8000b74 <__addsf3>
 8002db0:	4603      	mov	r3, r0
 8002db2:	63bb      	str	r3, [r7, #56]	@ 0x38
      Tb = T0 / 2;
 8002db4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002db8:	6a38      	ldr	r0, [r7, #32]
 8002dba:	f7fe f897 	bl	8000eec <__aeabi_fdiv>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	637b      	str	r3, [r7, #52]	@ 0x34
      Tc = T1 + T2 + T0 / 2;
 8002dc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002dc6:	f7fd fed5 	bl	8000b74 <__addsf3>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461c      	mov	r4, r3
 8002dce:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002dd2:	6a38      	ldr	r0, [r7, #32]
 8002dd4:	f7fe f88a 	bl	8000eec <__aeabi_fdiv>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f7fd fec9 	bl	8000b74 <__addsf3>
 8002de2:	4603      	mov	r3, r0
 8002de4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002de6:	e02e      	b.n	8002e46 <setPhaseVoltage+0x43e>
    case 6:
      Ta = T1 + T2 + T0 / 2;
 8002de8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002dec:	f7fd fec2 	bl	8000b74 <__addsf3>
 8002df0:	4603      	mov	r3, r0
 8002df2:	461c      	mov	r4, r3
 8002df4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002df8:	6a38      	ldr	r0, [r7, #32]
 8002dfa:	f7fe f877 	bl	8000eec <__aeabi_fdiv>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	4619      	mov	r1, r3
 8002e02:	4620      	mov	r0, r4
 8002e04:	f7fd feb6 	bl	8000b74 <__addsf3>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      Tb = T0 / 2;
 8002e0c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002e10:	6a38      	ldr	r0, [r7, #32]
 8002e12:	f7fe f86b 	bl	8000eec <__aeabi_fdiv>
 8002e16:	4603      	mov	r3, r0
 8002e18:	637b      	str	r3, [r7, #52]	@ 0x34
      Tc = T1 + T0 / 2;
 8002e1a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002e1e:	6a38      	ldr	r0, [r7, #32]
 8002e20:	f7fe f864 	bl	8000eec <__aeabi_fdiv>
 8002e24:	4603      	mov	r3, r0
 8002e26:	4619      	mov	r1, r3
 8002e28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e2a:	f7fd fea3 	bl	8000b74 <__addsf3>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002e32:	e008      	b.n	8002e46 <setPhaseVoltage+0x43e>
    default:
      // possible error state
      Ta = 0;
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	63bb      	str	r3, [r7, #56]	@ 0x38
      Tb = 0;
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	637b      	str	r3, [r7, #52]	@ 0x34
      Tc = 0;
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  // calculate the phase voltages
  Ua = Ta * voltage_limit;
 8002e46:	4b8d      	ldr	r3, [pc, #564]	@ (800307c <setPhaseVoltage+0x674>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fd ff99 	bl	8000d84 <__aeabi_fmul>
 8002e52:	4603      	mov	r3, r0
 8002e54:	461a      	mov	r2, r3
 8002e56:	4b8a      	ldr	r3, [pc, #552]	@ (8003080 <setPhaseVoltage+0x678>)
 8002e58:	601a      	str	r2, [r3, #0]
  Ub = Tb * voltage_limit;
 8002e5a:	4b88      	ldr	r3, [pc, #544]	@ (800307c <setPhaseVoltage+0x674>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd ff8f 	bl	8000d84 <__aeabi_fmul>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4b86      	ldr	r3, [pc, #536]	@ (8003084 <setPhaseVoltage+0x67c>)
 8002e6c:	601a      	str	r2, [r3, #0]
  Uc = Tc * voltage_limit;
 8002e6e:	4b83      	ldr	r3, [pc, #524]	@ (800307c <setPhaseVoltage+0x674>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd ff85 	bl	8000d84 <__aeabi_fmul>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b82      	ldr	r3, [pc, #520]	@ (8003088 <setPhaseVoltage+0x680>)
 8002e80:	601a      	str	r2, [r3, #0]

  // set the voltages in hardware
  // limit the voltage in driver
  Ua = _constrain(Ua, 0.0f, voltage_limit);
 8002e82:	4b7f      	ldr	r3, [pc, #508]	@ (8003080 <setPhaseVoltage+0x678>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe f918 	bl	80010c0 <__aeabi_fcmplt>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <setPhaseVoltage+0x494>
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	e00f      	b.n	8002ebc <setPhaseVoltage+0x4b4>
 8002e9c:	4b78      	ldr	r3, [pc, #480]	@ (8003080 <setPhaseVoltage+0x678>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a76      	ldr	r2, [pc, #472]	@ (800307c <setPhaseVoltage+0x674>)
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe f928 	bl	80010fc <__aeabi_fcmpgt>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <setPhaseVoltage+0x4b0>
 8002eb2:	4b72      	ldr	r3, [pc, #456]	@ (800307c <setPhaseVoltage+0x674>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	e001      	b.n	8002ebc <setPhaseVoltage+0x4b4>
 8002eb8:	4b71      	ldr	r3, [pc, #452]	@ (8003080 <setPhaseVoltage+0x678>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a70      	ldr	r2, [pc, #448]	@ (8003080 <setPhaseVoltage+0x678>)
 8002ebe:	6013      	str	r3, [r2, #0]
  Ub = _constrain(Ub, 0.0f, voltage_limit);
 8002ec0:	4b70      	ldr	r3, [pc, #448]	@ (8003084 <setPhaseVoltage+0x67c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f04f 0100 	mov.w	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe f8f9 	bl	80010c0 <__aeabi_fcmplt>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <setPhaseVoltage+0x4d2>
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	e00f      	b.n	8002efa <setPhaseVoltage+0x4f2>
 8002eda:	4b6a      	ldr	r3, [pc, #424]	@ (8003084 <setPhaseVoltage+0x67c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a67      	ldr	r2, [pc, #412]	@ (800307c <setPhaseVoltage+0x674>)
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe f909 	bl	80010fc <__aeabi_fcmpgt>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <setPhaseVoltage+0x4ee>
 8002ef0:	4b62      	ldr	r3, [pc, #392]	@ (800307c <setPhaseVoltage+0x674>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	e001      	b.n	8002efa <setPhaseVoltage+0x4f2>
 8002ef6:	4b63      	ldr	r3, [pc, #396]	@ (8003084 <setPhaseVoltage+0x67c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a62      	ldr	r2, [pc, #392]	@ (8003084 <setPhaseVoltage+0x67c>)
 8002efc:	6013      	str	r3, [r2, #0]
  Uc = _constrain(Uc, 0.0f, voltage_limit);
 8002efe:	4b62      	ldr	r3, [pc, #392]	@ (8003088 <setPhaseVoltage+0x680>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f04f 0100 	mov.w	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe f8da 	bl	80010c0 <__aeabi_fcmplt>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <setPhaseVoltage+0x510>
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	e00f      	b.n	8002f38 <setPhaseVoltage+0x530>
 8002f18:	4b5b      	ldr	r3, [pc, #364]	@ (8003088 <setPhaseVoltage+0x680>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a57      	ldr	r2, [pc, #348]	@ (800307c <setPhaseVoltage+0x674>)
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe f8ea 	bl	80010fc <__aeabi_fcmpgt>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <setPhaseVoltage+0x52c>
 8002f2e:	4b53      	ldr	r3, [pc, #332]	@ (800307c <setPhaseVoltage+0x674>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	e001      	b.n	8002f38 <setPhaseVoltage+0x530>
 8002f34:	4b54      	ldr	r3, [pc, #336]	@ (8003088 <setPhaseVoltage+0x680>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a53      	ldr	r2, [pc, #332]	@ (8003088 <setPhaseVoltage+0x680>)
 8002f3a:	6013      	str	r3, [r2, #0]
  // calculate duty cycle
  float dc_a;  //duty cycle phase A [0, 1]
  float dc_b;  //duty cycle phase B [0, 1]
  float dc_c;  //duty cycle phase C [0, 1]
  // limited in [0,1]
  dc_a = _constrain(Ua / voltage_power_supply, 0.0f , 1.0f );
 8002f3c:	4b50      	ldr	r3, [pc, #320]	@ (8003080 <setPhaseVoltage+0x678>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a52      	ldr	r2, [pc, #328]	@ (800308c <setPhaseVoltage+0x684>)
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd ffd0 	bl	8000eec <__aeabi_fdiv>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f04f 0100 	mov.w	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe f8b4 	bl	80010c0 <__aeabi_fcmplt>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <setPhaseVoltage+0x55c>
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e01c      	b.n	8002f9e <setPhaseVoltage+0x596>
 8002f64:	4b46      	ldr	r3, [pc, #280]	@ (8003080 <setPhaseVoltage+0x678>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a48      	ldr	r2, [pc, #288]	@ (800308c <setPhaseVoltage+0x684>)
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd ffbc 	bl	8000eec <__aeabi_fdiv>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe f8be 	bl	80010fc <__aeabi_fcmpgt>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <setPhaseVoltage+0x584>
 8002f86:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002f8a:	e008      	b.n	8002f9e <setPhaseVoltage+0x596>
 8002f8c:	4b3c      	ldr	r3, [pc, #240]	@ (8003080 <setPhaseVoltage+0x678>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a3e      	ldr	r2, [pc, #248]	@ (800308c <setPhaseVoltage+0x684>)
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd ffa8 	bl	8000eec <__aeabi_fdiv>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	61fb      	str	r3, [r7, #28]
  dc_b = _constrain(Ub / voltage_power_supply, 0.0f , 1.0f );
 8002fa0:	4b38      	ldr	r3, [pc, #224]	@ (8003084 <setPhaseVoltage+0x67c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a39      	ldr	r2, [pc, #228]	@ (800308c <setPhaseVoltage+0x684>)
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd ff9e 	bl	8000eec <__aeabi_fdiv>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f04f 0100 	mov.w	r1, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe f882 	bl	80010c0 <__aeabi_fcmplt>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <setPhaseVoltage+0x5c0>
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	e01c      	b.n	8003002 <setPhaseVoltage+0x5fa>
 8002fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8003084 <setPhaseVoltage+0x67c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2f      	ldr	r2, [pc, #188]	@ (800308c <setPhaseVoltage+0x684>)
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd ff8a 	bl	8000eec <__aeabi_fdiv>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe f88c 	bl	80010fc <__aeabi_fcmpgt>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <setPhaseVoltage+0x5e8>
 8002fea:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002fee:	e008      	b.n	8003002 <setPhaseVoltage+0x5fa>
 8002ff0:	4b24      	ldr	r3, [pc, #144]	@ (8003084 <setPhaseVoltage+0x67c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a25      	ldr	r2, [pc, #148]	@ (800308c <setPhaseVoltage+0x684>)
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd ff76 	bl	8000eec <__aeabi_fdiv>
 8003000:	4603      	mov	r3, r0
 8003002:	61bb      	str	r3, [r7, #24]
  dc_c = _constrain(Uc / voltage_power_supply, 0.0f , 1.0f );
 8003004:	4b20      	ldr	r3, [pc, #128]	@ (8003088 <setPhaseVoltage+0x680>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a20      	ldr	r2, [pc, #128]	@ (800308c <setPhaseVoltage+0x684>)
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd ff6c 	bl	8000eec <__aeabi_fdiv>
 8003014:	4603      	mov	r3, r0
 8003016:	f04f 0100 	mov.w	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe f850 	bl	80010c0 <__aeabi_fcmplt>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <setPhaseVoltage+0x624>
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	e01c      	b.n	8003066 <setPhaseVoltage+0x65e>
 800302c:	4b16      	ldr	r3, [pc, #88]	@ (8003088 <setPhaseVoltage+0x680>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a16      	ldr	r2, [pc, #88]	@ (800308c <setPhaseVoltage+0x684>)
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd ff58 	bl	8000eec <__aeabi_fdiv>
 800303c:	4603      	mov	r3, r0
 800303e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe f85a 	bl	80010fc <__aeabi_fcmpgt>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <setPhaseVoltage+0x64c>
 800304e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003052:	e008      	b.n	8003066 <setPhaseVoltage+0x65e>
 8003054:	4b0c      	ldr	r3, [pc, #48]	@ (8003088 <setPhaseVoltage+0x680>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0c      	ldr	r2, [pc, #48]	@ (800308c <setPhaseVoltage+0x684>)
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd ff44 	bl	8000eec <__aeabi_fdiv>
 8003064:	4603      	mov	r3, r0
 8003066:	617b      	str	r3, [r7, #20]
  writeDutyCycle3PWM(dc_a, dc_b, dc_c);
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	69b9      	ldr	r1, [r7, #24]
 800306c:	69f8      	ldr	r0, [r7, #28]
 800306e:	f7ff fc93 	bl	8002998 <writeDutyCycle3PWM>
}
 8003072:	bf00      	nop
 8003074:	3740      	adds	r7, #64	@ 0x40
 8003076:	46bd      	mov	sp, r7
 8003078:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800307c:	20000588 	.word	0x20000588
 8003080:	20000438 	.word	0x20000438
 8003084:	2000043c 	.word	0x2000043c
 8003088:	20000440 	.word	0x20000440
 800308c:	20000584 	.word	0x20000584

08003090 <needsSearch>:

// returns 0 if it does need search for absolute zero
// 0 - magnetic sensor (& encoder with index which is found)
// 1 - encoder with index (with index not found yet)
int needsSearch()
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
    return 0;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr
	...

080030a0 <absoluteZeroSearch>:
// Encoder alignment the absolute zero angle
// - to the index
int absoluteZeroSearch()
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
  // search the absolute zero with small velocity
  float limit_vel = velocity_limit;
 80030a6:	4b24      	ldr	r3, [pc, #144]	@ (8003138 <absoluteZeroSearch+0x98>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	607b      	str	r3, [r7, #4]
  float limit_volt = voltage_limit;
 80030ac:	4b23      	ldr	r3, [pc, #140]	@ (800313c <absoluteZeroSearch+0x9c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	603b      	str	r3, [r7, #0]
  velocity_limit = velocity_index_search;
 80030b2:	4b23      	ldr	r3, [pc, #140]	@ (8003140 <absoluteZeroSearch+0xa0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a20      	ldr	r2, [pc, #128]	@ (8003138 <absoluteZeroSearch+0x98>)
 80030b8:	6013      	str	r3, [r2, #0]
  voltage_limit = voltage_sensor_align;
 80030ba:	4b22      	ldr	r3, [pc, #136]	@ (8003144 <absoluteZeroSearch+0xa4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1f      	ldr	r2, [pc, #124]	@ (800313c <absoluteZeroSearch+0x9c>)
 80030c0:	6013      	str	r3, [r2, #0]
  shaft_angle = 0;
 80030c2:	4b21      	ldr	r3, [pc, #132]	@ (8003148 <absoluteZeroSearch+0xa8>)
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
  while(needsSearch() && shaft_angle < _2PI)
 80030ca:	e004      	b.n	80030d6 <absoluteZeroSearch+0x36>
  {
    angleOpenloop(1.5*_2PI);
 80030cc:	481f      	ldr	r0, [pc, #124]	@ (800314c <absoluteZeroSearch+0xac>)
 80030ce:	f000 fd03 	bl	8003ad8 <angleOpenloop>
    // call important for some sensors not to loose count
    // not needed for the search
    getAngle();
 80030d2:	f7ff fb25 	bl	8002720 <getAngle>
  while(needsSearch() && shaft_angle < _2PI)
 80030d6:	f7ff ffdb 	bl	8003090 <needsSearch>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00c      	beq.n	80030fa <absoluteZeroSearch+0x5a>
 80030e0:	4b19      	ldr	r3, [pc, #100]	@ (8003148 <absoluteZeroSearch+0xa8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd f99f 	bl	8000428 <__aeabi_f2d>
 80030ea:	a311      	add	r3, pc, #68	@ (adr r3, 8003130 <absoluteZeroSearch+0x90>)
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	f7fd fc64 	bl	80009bc <__aeabi_dcmplt>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1e8      	bne.n	80030cc <absoluteZeroSearch+0x2c>
  }
  setPhaseVoltage(0, 0, 0);
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0100 	mov.w	r1, #0
 8003102:	f04f 0000 	mov.w	r0, #0
 8003106:	f7ff fc7f 	bl	8002a08 <setPhaseVoltage>

  // re-init the limits
  velocity_limit = limit_vel;
 800310a:	4a0b      	ldr	r2, [pc, #44]	@ (8003138 <absoluteZeroSearch+0x98>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6013      	str	r3, [r2, #0]
  voltage_limit = limit_volt;
 8003110:	4a0a      	ldr	r2, [pc, #40]	@ (800313c <absoluteZeroSearch+0x9c>)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	6013      	str	r3, [r2, #0]
  return !needsSearch();
 8003116:	f7ff ffbb 	bl	8003090 <needsSearch>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	54442eea 	.word	0x54442eea
 8003134:	401921fb 	.word	0x401921fb
 8003138:	20000590 	.word	0x20000590
 800313c:	20000588 	.word	0x20000588
 8003140:	20000580 	.word	0x20000580
 8003144:	2000057c 	.word	0x2000057c
 8003148:	20000448 	.word	0x20000448
 800314c:	4116cbe4 	.word	0x4116cbe4

08003150 <alignSensor>:
// Encoder alignment to electrical 0 angle
int alignSensor()
{
 8003150:	b5b0      	push	{r4, r5, r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
  int exit_flag = 1; //success
 8003156:	2301      	movs	r3, #1
 8003158:	61fb      	str	r3, [r7, #28]
  // if unknown natural direction
  if(!_isset(sensor_direction)) //sensor_direction == -12345.0
 800315a:	4b9b      	ldr	r3, [pc, #620]	@ (80033c8 <alignSensor+0x278>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a9b      	ldr	r2, [pc, #620]	@ (80033cc <alignSensor+0x27c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	f040 80e5 	bne.w	8003330 <alignSensor+0x1e0>
  {
    // check if sensor needs zero search
    if(needsSearch()) //needSearch == 0 because use Magnetic sensor
 8003166:	f7ff ff93 	bl	8003090 <needsSearch>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <alignSensor+0x26>
      exit_flag = absoluteZeroSearch(); // o
 8003170:	f7ff ff96 	bl	80030a0 <absoluteZeroSearch>
 8003174:	61f8      	str	r0, [r7, #28]
    if(!exit_flag)
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <alignSensor+0x30>
      return exit_flag;
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	e117      	b.n	80033b0 <alignSensor+0x260>

    // find natural direction
    // move one electrical revolution forward
    for (int i = 0; i <=500; i++ )
 8003180:	2300      	movs	r3, #0
 8003182:	61bb      	str	r3, [r7, #24]
 8003184:	e02f      	b.n	80031e6 <alignSensor+0x96>
    {
      float angle = _3PI_2 + _2PI * i / 500.0;
 8003186:	69b8      	ldr	r0, [r7, #24]
 8003188:	f7fd f93c 	bl	8000404 <__aeabi_i2d>
 800318c:	a38a      	add	r3, pc, #552	@ (adr r3, 80033b8 <alignSensor+0x268>)
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	f7fd f9a1 	bl	80004d8 <__aeabi_dmul>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	4b8b      	ldr	r3, [pc, #556]	@ (80033d0 <alignSensor+0x280>)
 80031a4:	f7fd fac2 	bl	800072c <__aeabi_ddiv>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	a383      	add	r3, pc, #524	@ (adr r3, 80033c0 <alignSensor+0x270>)
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	f7fc ffd9 	bl	800016c <__adddf3>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	f7fd fc81 	bl	8000ac8 <__aeabi_d2f>
 80031c6:	4603      	mov	r3, r0
 80031c8:	603b      	str	r3, [r7, #0]
      setPhaseVoltage(voltage_sensor_align, 0,  angle);
 80031ca:	4b82      	ldr	r3, [pc, #520]	@ (80033d4 <alignSensor+0x284>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	f04f 0100 	mov.w	r1, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fc17 	bl	8002a08 <setPhaseVoltage>
      HAL_Delay(2);
 80031da:	2002      	movs	r0, #2
 80031dc:	f001 f908 	bl	80043f0 <HAL_Delay>
    for (int i = 0; i <=500; i++ )
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	3301      	adds	r3, #1
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80031ec:	ddcb      	ble.n	8003186 <alignSensor+0x36>
    }
    updateSensor();
 80031ee:	f7ff fa4f 	bl	8002690 <updateSensor>
    // take and angle in the middle
    float mid_angle = getAngle();
 80031f2:	f7ff fa95 	bl	8002720 <getAngle>
 80031f6:	6138      	str	r0, [r7, #16]
    // move one electrical revolution backwards
    for (int i = 500; i >=0; i-- )
 80031f8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	e02f      	b.n	8003260 <alignSensor+0x110>
    {
      float angle = _3PI_2 + _2PI * i / 500.0 ;
 8003200:	6978      	ldr	r0, [r7, #20]
 8003202:	f7fd f8ff 	bl	8000404 <__aeabi_i2d>
 8003206:	a36c      	add	r3, pc, #432	@ (adr r3, 80033b8 <alignSensor+0x268>)
 8003208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320c:	f7fd f964 	bl	80004d8 <__aeabi_dmul>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4610      	mov	r0, r2
 8003216:	4619      	mov	r1, r3
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	4b6c      	ldr	r3, [pc, #432]	@ (80033d0 <alignSensor+0x280>)
 800321e:	f7fd fa85 	bl	800072c <__aeabi_ddiv>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	a365      	add	r3, pc, #404	@ (adr r3, 80033c0 <alignSensor+0x270>)
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f7fc ff9c 	bl	800016c <__adddf3>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	f7fd fc44 	bl	8000ac8 <__aeabi_d2f>
 8003240:	4603      	mov	r3, r0
 8003242:	607b      	str	r3, [r7, #4]
      setPhaseVoltage(voltage_sensor_align, 0,  angle);
 8003244:	4b63      	ldr	r3, [pc, #396]	@ (80033d4 <alignSensor+0x284>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	f04f 0100 	mov.w	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fbda 	bl	8002a08 <setPhaseVoltage>
      HAL_Delay(2);
 8003254:	2002      	movs	r0, #2
 8003256:	f001 f8cb 	bl	80043f0 <HAL_Delay>
    for (int i = 500; i >=0; i-- )
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	3b01      	subs	r3, #1
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	dacc      	bge.n	8003200 <alignSensor+0xb0>
    }
    updateSensor();
 8003266:	f7ff fa13 	bl	8002690 <updateSensor>
    float end_angle = getAngle();
 800326a:	f7ff fa59 	bl	8002720 <getAngle>
 800326e:	60f8      	str	r0, [r7, #12]
    setPhaseVoltage(0, 0, 0);
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 0100 	mov.w	r1, #0
 8003278:	f04f 0000 	mov.w	r0, #0
 800327c:	f7ff fbc4 	bl	8002a08 <setPhaseVoltage>
    HAL_Delay(200);
 8003280:	20c8      	movs	r0, #200	@ 0xc8
 8003282:	f001 f8b5 	bl	80043f0 <HAL_Delay>
    // determine the direction the sensor moved
    if (mid_angle == end_angle)
 8003286:	68f9      	ldr	r1, [r7, #12]
 8003288:	6938      	ldr	r0, [r7, #16]
 800328a:	f7fd ff0f 	bl	80010ac <__aeabi_fcmpeq>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <alignSensor+0x148>
    {
      return 0; // failed calibration
 8003294:	2300      	movs	r3, #0
 8003296:	e08b      	b.n	80033b0 <alignSensor+0x260>
    }
    else if (mid_angle < end_angle)
 8003298:	68f9      	ldr	r1, [r7, #12]
 800329a:	6938      	ldr	r0, [r7, #16]
 800329c:	f7fd ff10 	bl	80010c0 <__aeabi_fcmplt>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d004      	beq.n	80032b0 <alignSensor+0x160>
    {
      sensor_direction = CCW;
 80032a6:	4b48      	ldr	r3, [pc, #288]	@ (80033c8 <alignSensor+0x278>)
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e002      	b.n	80032b6 <alignSensor+0x166>
    }
    else
    {
      sensor_direction = CW;
 80032b0:	4b45      	ldr	r3, [pc, #276]	@ (80033c8 <alignSensor+0x278>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
    }
    // check pole pair number

    float moved =  fabs(mid_angle - end_angle);
 80032b6:	68f9      	ldr	r1, [r7, #12]
 80032b8:	6938      	ldr	r0, [r7, #16]
 80032ba:	f7fd fc59 	bl	8000b70 <__aeabi_fsub>
 80032be:	4603      	mov	r3, r0
 80032c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032c4:	60bb      	str	r3, [r7, #8]
    if( fabs(moved*pole_pairs - _2PI) > 0.5 )
 80032c6:	4b44      	ldr	r3, [pc, #272]	@ (80033d8 <alignSensor+0x288>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fd fd06 	bl	8000cdc <__aeabi_i2f>
 80032d0:	4603      	mov	r3, r0
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fd fd55 	bl	8000d84 <__aeabi_fmul>
 80032da:	4603      	mov	r3, r0
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd f8a3 	bl	8000428 <__aeabi_f2d>
 80032e2:	a335      	add	r3, pc, #212	@ (adr r3, 80033b8 <alignSensor+0x268>)
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f7fc ff3e 	bl	8000168 <__aeabi_dsub>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4614      	mov	r4, r2
 80032f2:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	4b38      	ldr	r3, [pc, #224]	@ (80033dc <alignSensor+0x28c>)
 80032fc:	4620      	mov	r0, r4
 80032fe:	4629      	mov	r1, r5
 8003300:	f7fd fb7a 	bl	80009f8 <__aeabi_dcmpgt>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d012      	beq.n	8003330 <alignSensor+0x1e0>
    { // 0.5 is arbitrary number it can be lower or higher!
    	pp_check = _2PI/moved;
 800330a:	68b8      	ldr	r0, [r7, #8]
 800330c:	f7fd f88c 	bl	8000428 <__aeabi_f2d>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	a128      	add	r1, pc, #160	@ (adr r1, 80033b8 <alignSensor+0x268>)
 8003316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800331a:	f7fd fa07 	bl	800072c <__aeabi_ddiv>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4610      	mov	r0, r2
 8003324:	4619      	mov	r1, r3
 8003326:	f7fd fbcf 	bl	8000ac8 <__aeabi_d2f>
 800332a:	4603      	mov	r3, r0
 800332c:	4a2c      	ldr	r2, [pc, #176]	@ (80033e0 <alignSensor+0x290>)
 800332e:	6013      	str	r3, [r2, #0]
    }
  }

  // zero electric angle not known
  if(!_isset(zero_electric_angle))
 8003330:	4b2c      	ldr	r3, [pc, #176]	@ (80033e4 <alignSensor+0x294>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	492c      	ldr	r1, [pc, #176]	@ (80033e8 <alignSensor+0x298>)
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd feb8 	bl	80010ac <__aeabi_fcmpeq>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d035      	beq.n	80033ae <alignSensor+0x25e>
  {
    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    setPhaseVoltage(voltage_sensor_align, 0,  _3PI_2);
 8003342:	4b24      	ldr	r3, [pc, #144]	@ (80033d4 <alignSensor+0x284>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a29      	ldr	r2, [pc, #164]	@ (80033ec <alignSensor+0x29c>)
 8003348:	f04f 0100 	mov.w	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fb5b 	bl	8002a08 <setPhaseVoltage>
    HAL_Delay(700);
 8003352:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8003356:	f001 f84b 	bl	80043f0 <HAL_Delay>
    zero_electric_angle = _normalizeAngle(_electricalAngle(sensor_direction*getAngle(), pole_pairs));
 800335a:	4b1b      	ldr	r3, [pc, #108]	@ (80033c8 <alignSensor+0x278>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd fcbc 	bl	8000cdc <__aeabi_i2f>
 8003364:	4604      	mov	r4, r0
 8003366:	f7ff f9db 	bl	8002720 <getAngle>
 800336a:	4603      	mov	r3, r0
 800336c:	4619      	mov	r1, r3
 800336e:	4620      	mov	r0, r4
 8003370:	f7fd fd08 	bl	8000d84 <__aeabi_fmul>
 8003374:	4603      	mov	r3, r0
 8003376:	461a      	mov	r2, r3
 8003378:	4b17      	ldr	r3, [pc, #92]	@ (80033d8 <alignSensor+0x288>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4619      	mov	r1, r3
 800337e:	4610      	mov	r0, r2
 8003380:	f7fe fffa 	bl	8002378 <_electricalAngle>
 8003384:	4603      	mov	r3, r0
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe ffbe 	bl	8002308 <_normalizeAngle>
 800338c:	4603      	mov	r3, r0
 800338e:	4a15      	ldr	r2, [pc, #84]	@ (80033e4 <alignSensor+0x294>)
 8003390:	6013      	str	r3, [r2, #0]
    HAL_Delay(20);
 8003392:	2014      	movs	r0, #20
 8003394:	f001 f82c 	bl	80043f0 <HAL_Delay>
    // stop everything
    setPhaseVoltage(0, 0, 0);
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0100 	mov.w	r1, #0
 80033a0:	f04f 0000 	mov.w	r0, #0
 80033a4:	f7ff fb30 	bl	8002a08 <setPhaseVoltage>
    HAL_Delay(200);
 80033a8:	20c8      	movs	r0, #200	@ 0xc8
 80033aa:	f001 f821 	bl	80043f0 <HAL_Delay>
  }
  return exit_flag;
 80033ae:	69fb      	ldr	r3, [r7, #28]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3720      	adds	r7, #32
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bdb0      	pop	{r4, r5, r7, pc}
 80033b8:	54442eea 	.word	0x54442eea
 80033bc:	401921fb 	.word	0x401921fb
 80033c0:	7f330d32 	.word	0x7f330d32
 80033c4:	4012d97c 	.word	0x4012d97c
 80033c8:	2000001c 	.word	0x2000001c
 80033cc:	ffffcfc7 	.word	0xffffcfc7
 80033d0:	407f4000 	.word	0x407f4000
 80033d4:	2000057c 	.word	0x2000057c
 80033d8:	20000014 	.word	0x20000014
 80033dc:	3fe00000 	.word	0x3fe00000
 80033e0:	20000600 	.word	0x20000600
 80033e4:	20000018 	.word	0x20000018
 80033e8:	c640e400 	.word	0xc640e400
 80033ec:	4096cbe4 	.word	0x4096cbe4

080033f0 <initFOC>:

// zero_electric_offset , _sensor_direction : from Run code "find_sensor_offset_and_direction"
// sensor : Encoder , Hall sensor , Magnetic encoder
int initFOC( float zero_electric_offset, enum Direction _sensor_direction)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	70fb      	strb	r3, [r7, #3]
  int exit_flag = 1;
 80033fc:	2301      	movs	r3, #1
 80033fe:	60fb      	str	r3, [r7, #12]
  // align motor if necessary
  // alignment necessary for encoders.
  if(_isset(zero_electric_offset))
 8003400:	4911      	ldr	r1, [pc, #68]	@ (8003448 <initFOC+0x58>)
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fd fe52 	bl	80010ac <__aeabi_fcmpeq>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <initFOC+0x2c>
  {
    // absolute zero offset provided - no need to align
    zero_electric_angle = zero_electric_offset;
 800340e:	4a0f      	ldr	r2, [pc, #60]	@ (800344c <initFOC+0x5c>)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6013      	str	r3, [r2, #0]
    // set the sensor direction - default CW
    sensor_direction = _sensor_direction;
 8003414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003418:	4a0d      	ldr	r2, [pc, #52]	@ (8003450 <initFOC+0x60>)
 800341a:	6013      	str	r3, [r2, #0]
  }
  // sensor and motor alignment - can be skipped
  // by setting motor.sensor_direction and motor.zero_electric_angle
  exit_flag *= alignSensor();
 800341c:	f7ff fe98 	bl	8003150 <alignSensor>
 8003420:	4602      	mov	r2, r0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	fb02 f303 	mul.w	r3, r2, r3
 8003428:	60fb      	str	r3, [r7, #12]
  // added the shaft_angle update
  shaft_angle = getAngle();
 800342a:	f7ff f979 	bl	8002720 <getAngle>
 800342e:	4603      	mov	r3, r0
 8003430:	4a08      	ldr	r2, [pc, #32]	@ (8003454 <initFOC+0x64>)
 8003432:	6013      	str	r3, [r2, #0]
  HAL_Delay(500);
 8003434:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003438:	f000 ffda 	bl	80043f0 <HAL_Delay>

  return exit_flag;
 800343c:	68fb      	ldr	r3, [r7, #12]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	c640e400 	.word	0xc640e400
 800344c:	20000018 	.word	0x20000018
 8003450:	2000001c 	.word	0x2000001c
 8003454:	20000448 	.word	0x20000448

08003458 <loopFOC>:

void loopFOC()
{
 8003458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345a:	b09b      	sub	sp, #108	@ 0x6c
 800345c:	af08      	add	r7, sp, #32
  updateSensor();
 800345e:	f7ff f917 	bl	8002690 <updateSensor>
  // shaft angle/velocity need the update() to be called first
  // get shaft angle
  shaft_angle = shaftAngle();
 8003462:	f7ff fa13 	bl	800288c <shaftAngle>
 8003466:	4603      	mov	r3, r0
 8003468:	4a55      	ldr	r2, [pc, #340]	@ (80035c0 <loopFOC+0x168>)
 800346a:	6013      	str	r3, [r2, #0]
  // electrical angle - need shaftAngle to be called first
  electrical_angle = electricalAngle();
 800346c:	f7ff fa6c 	bl	8002948 <electricalAngle>
 8003470:	4603      	mov	r3, r0
 8003472:	4a54      	ldr	r2, [pc, #336]	@ (80035c4 <loopFOC+0x16c>)
 8003474:	6013      	str	r3, [r2, #0]

  // Chosen TorqueControlType::foc_current
  // read dq currents
  current = getFOCCurrents(electrical_angle);
 8003476:	4b53      	ldr	r3, [pc, #332]	@ (80035c4 <loopFOC+0x16c>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4c53      	ldr	r4, [pc, #332]	@ (80035c8 <loopFOC+0x170>)
 800347c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe fd34 	bl	8001ef0 <getFOCCurrents>
 8003488:	4622      	mov	r2, r4
 800348a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800348e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003492:	e882 0003 	stmia.w	r2, {r0, r1}
  LPF_current_q_s.x = current.q;
 8003496:	4b4c      	ldr	r3, [pc, #304]	@ (80035c8 <loopFOC+0x170>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4a4c      	ldr	r2, [pc, #304]	@ (80035cc <loopFOC+0x174>)
 800349c:	6013      	str	r3, [r2, #0]
  LPF_current_q_s = LowPassFilter(LPF_current_q_s);
 800349e:	4c4b      	ldr	r4, [pc, #300]	@ (80035cc <loopFOC+0x174>)
 80034a0:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80034a4:	4b49      	ldr	r3, [pc, #292]	@ (80035cc <loopFOC+0x174>)
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	9200      	str	r2, [sp, #0]
 80034aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ac:	f000 f89a 	bl	80035e4 <LowPassFilter>
 80034b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80034b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  current.q = LPF_current_q_s.y_prev;   // filter values
 80034ba:	4b44      	ldr	r3, [pc, #272]	@ (80035cc <loopFOC+0x174>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	4a42      	ldr	r2, [pc, #264]	@ (80035c8 <loopFOC+0x170>)
 80034c0:	6053      	str	r3, [r2, #4]

  LPF_current_d_s.x = current.d;
 80034c2:	4b41      	ldr	r3, [pc, #260]	@ (80035c8 <loopFOC+0x170>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a42      	ldr	r2, [pc, #264]	@ (80035d0 <loopFOC+0x178>)
 80034c8:	6013      	str	r3, [r2, #0]
  LPF_current_d_s = LowPassFilter(LPF_current_d_s);
 80034ca:	4c41      	ldr	r4, [pc, #260]	@ (80035d0 <loopFOC+0x178>)
 80034cc:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80034d0:	4b3f      	ldr	r3, [pc, #252]	@ (80035d0 <loopFOC+0x178>)
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	9200      	str	r2, [sp, #0]
 80034d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034d8:	f000 f884 	bl	80035e4 <LowPassFilter>
 80034dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80034e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  current.d = LPF_current_d_s.y_prev;   // filter values
 80034e6:	4b3a      	ldr	r3, [pc, #232]	@ (80035d0 <loopFOC+0x178>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	4a37      	ldr	r2, [pc, #220]	@ (80035c8 <loopFOC+0x170>)
 80034ec:	6013      	str	r3, [r2, #0]



  // calculate the phase voltages
  PID_current_q_s.error = current_sp - current.q;
 80034ee:	4b39      	ldr	r3, [pc, #228]	@ (80035d4 <loopFOC+0x17c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a35      	ldr	r2, [pc, #212]	@ (80035c8 <loopFOC+0x170>)
 80034f4:	6852      	ldr	r2, [r2, #4]
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd fb39 	bl	8000b70 <__aeabi_fsub>
 80034fe:	4603      	mov	r3, r0
 8003500:	461a      	mov	r2, r3
 8003502:	4b35      	ldr	r3, [pc, #212]	@ (80035d8 <loopFOC+0x180>)
 8003504:	601a      	str	r2, [r3, #0]
  PID_current_q_s = PID(PID_current_q_s);
 8003506:	4b34      	ldr	r3, [pc, #208]	@ (80035d8 <loopFOC+0x180>)
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	f107 0c08 	add.w	ip, r7, #8
 800350e:	4e32      	ldr	r6, [pc, #200]	@ (80035d8 <loopFOC+0x180>)
 8003510:	466d      	mov	r5, sp
 8003512:	f106 040c 	add.w	r4, r6, #12
 8003516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800351a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800351e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003522:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003526:	4660      	mov	r0, ip
 8003528:	f000 f8d2 	bl	80036d0 <PID>
 800352c:	687d      	ldr	r5, [r7, #4]
 800352e:	f107 0408 	add.w	r4, r7, #8
 8003532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800353a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800353e:	e885 0003 	stmia.w	r5, {r0, r1}
  voltage.q = PID_current_q_s.output_prev;
 8003542:	4b25      	ldr	r3, [pc, #148]	@ (80035d8 <loopFOC+0x180>)
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	4a25      	ldr	r2, [pc, #148]	@ (80035dc <loopFOC+0x184>)
 8003548:	6053      	str	r3, [r2, #4]

  PID_current_d_s.error = 0 - current.d;
 800354a:	4b1f      	ldr	r3, [pc, #124]	@ (80035c8 <loopFOC+0x170>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4619      	mov	r1, r3
 8003550:	f04f 0000 	mov.w	r0, #0
 8003554:	f7fd fb0c 	bl	8000b70 <__aeabi_fsub>
 8003558:	4603      	mov	r3, r0
 800355a:	461a      	mov	r2, r3
 800355c:	4b20      	ldr	r3, [pc, #128]	@ (80035e0 <loopFOC+0x188>)
 800355e:	601a      	str	r2, [r3, #0]
  PID_current_d_s = PID(PID_current_d_s);
 8003560:	4b1f      	ldr	r3, [pc, #124]	@ (80035e0 <loopFOC+0x188>)
 8003562:	607b      	str	r3, [r7, #4]
 8003564:	f107 0c08 	add.w	ip, r7, #8
 8003568:	4e1d      	ldr	r6, [pc, #116]	@ (80035e0 <loopFOC+0x188>)
 800356a:	466d      	mov	r5, sp
 800356c:	f106 040c 	add.w	r4, r6, #12
 8003570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003574:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003578:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800357c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003580:	4660      	mov	r0, ip
 8003582:	f000 f8a5 	bl	80036d0 <PID>
 8003586:	687d      	ldr	r5, [r7, #4]
 8003588:	f107 0408 	add.w	r4, r7, #8
 800358c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800358e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003594:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003598:	e885 0003 	stmia.w	r5, {r0, r1}
  voltage.d = PID_current_d_s.output_prev;
 800359c:	4b10      	ldr	r3, [pc, #64]	@ (80035e0 <loopFOC+0x188>)
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	4a0e      	ldr	r2, [pc, #56]	@ (80035dc <loopFOC+0x184>)
 80035a2:	6013      	str	r3, [r2, #0]

  // set the phase voltage - FOC heart function :)
  setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
 80035a4:	4b0d      	ldr	r3, [pc, #52]	@ (80035dc <loopFOC+0x184>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4a0c      	ldr	r2, [pc, #48]	@ (80035dc <loopFOC+0x184>)
 80035aa:	6811      	ldr	r1, [r2, #0]
 80035ac:	4a05      	ldr	r2, [pc, #20]	@ (80035c4 <loopFOC+0x16c>)
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fa29 	bl	8002a08 <setPhaseVoltage>
}
 80035b6:	bf00      	nop
 80035b8:	374c      	adds	r7, #76	@ 0x4c
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000448 	.word	0x20000448
 80035c4:	2000044c 	.word	0x2000044c
 80035c8:	20000468 	.word	0x20000468
 80035cc:	20000490 	.word	0x20000490
 80035d0:	200004a0 	.word	0x200004a0
 80035d4:	20000454 	.word	0x20000454
 80035d8:	200004d8 	.word	0x200004d8
 80035dc:	20000460 	.word	0x20000460
 80035e0:	200004b0 	.word	0x200004b0

080035e4 <LowPassFilter>:

//Low-Pass Filter
struct LPF LowPassFilter(struct LPF LPF)
{
 80035e4:	b084      	sub	sp, #16
 80035e6:	b590      	push	{r4, r7, lr}
 80035e8:	b087      	sub	sp, #28
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80035f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    unsigned long timestamp = micros();
 80035f6:	f7fe fb1b 	bl	8001c30 <micros>
 80035fa:	6138      	str	r0, [r7, #16]

    float dt = (timestamp - LPF.timestamp_prev)*1e-6f;
 80035fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd fb66 	bl	8000cd4 <__aeabi_ui2f>
 8003608:	4603      	mov	r3, r0
 800360a:	492e      	ldr	r1, [pc, #184]	@ (80036c4 <LowPassFilter+0xe0>)
 800360c:	4618      	mov	r0, r3
 800360e:	f7fd fbb9 	bl	8000d84 <__aeabi_fmul>
 8003612:	4603      	mov	r3, r0
 8003614:	617b      	str	r3, [r7, #20]


    if (dt < 0.0f )
 8003616:	f04f 0100 	mov.w	r1, #0
 800361a:	6978      	ldr	r0, [r7, #20]
 800361c:	f7fd fd50 	bl	80010c0 <__aeabi_fcmplt>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <LowPassFilter+0x48>
        dt = 1e-3f;
 8003626:	4b28      	ldr	r3, [pc, #160]	@ (80036c8 <LowPassFilter+0xe4>)
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	e012      	b.n	8003652 <LowPassFilter+0x6e>
    else if(dt > 0.3f)
 800362c:	4927      	ldr	r1, [pc, #156]	@ (80036cc <LowPassFilter+0xe8>)
 800362e:	6978      	ldr	r0, [r7, #20]
 8003630:	f7fd fd64 	bl	80010fc <__aeabi_fcmpgt>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00b      	beq.n	8003652 <LowPassFilter+0x6e>
    {
    	LPF.y_prev = LPF.x;
 800363a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363c:	637b      	str	r3, [r7, #52]	@ 0x34
    	LPF.timestamp_prev = timestamp;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	633b      	str	r3, [r7, #48]	@ 0x30
        return LPF;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	461c      	mov	r4, r3
 8003646:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800364a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800364c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003650:	e031      	b.n	80036b6 <LowPassFilter+0xd2>
    }

    float alpha = LPF.Tf/(LPF.Tf + dt);
 8003652:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8003654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003656:	6979      	ldr	r1, [r7, #20]
 8003658:	4618      	mov	r0, r3
 800365a:	f7fd fa8b 	bl	8000b74 <__addsf3>
 800365e:	4603      	mov	r3, r0
 8003660:	4619      	mov	r1, r3
 8003662:	4620      	mov	r0, r4
 8003664:	f7fd fc42 	bl	8000eec <__aeabi_fdiv>
 8003668:	4603      	mov	r3, r0
 800366a:	60fb      	str	r3, [r7, #12]
    float y = alpha*LPF.y_prev + (1.0f - alpha)*LPF.x;
 800366c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366e:	68f9      	ldr	r1, [r7, #12]
 8003670:	4618      	mov	r0, r3
 8003672:	f7fd fb87 	bl	8000d84 <__aeabi_fmul>
 8003676:	4603      	mov	r3, r0
 8003678:	461c      	mov	r4, r3
 800367a:	68f9      	ldr	r1, [r7, #12]
 800367c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003680:	f7fd fa76 	bl	8000b70 <__aeabi_fsub>
 8003684:	4603      	mov	r3, r0
 8003686:	461a      	mov	r2, r3
 8003688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368a:	4619      	mov	r1, r3
 800368c:	4610      	mov	r0, r2
 800368e:	f7fd fb79 	bl	8000d84 <__aeabi_fmul>
 8003692:	4603      	mov	r3, r0
 8003694:	4619      	mov	r1, r3
 8003696:	4620      	mov	r0, r4
 8003698:	f7fd fa6c 	bl	8000b74 <__addsf3>
 800369c:	4603      	mov	r3, r0
 800369e:	60bb      	str	r3, [r7, #8]

    LPF.y_prev = y;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	637b      	str	r3, [r7, #52]	@ 0x34
    LPF.timestamp_prev = timestamp;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	633b      	str	r3, [r7, #48]	@ 0x30

    return LPF;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	461c      	mov	r4, r3
 80036ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80036c0:	b004      	add	sp, #16
 80036c2:	4770      	bx	lr
 80036c4:	358637bd 	.word	0x358637bd
 80036c8:	3a83126f 	.word	0x3a83126f
 80036cc:	3e99999a 	.word	0x3e99999a

080036d0 <PID>:

//float PID(float error,float P, float I, float D, float output_ramp, float limit, unsigned long timestamp_prev, float integral_prev, float error_prev , float output_prev)
struct PID PID(struct PID PID)
{
 80036d0:	b084      	sub	sp, #16
 80036d2:	b5b0      	push	{r4, r5, r7, lr}
 80036d4:	b08a      	sub	sp, #40	@ 0x28
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80036de:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	 // calculate the time from the last call
	    unsigned long timestamp_now = micros();
 80036e2:	f7fe faa5 	bl	8001c30 <micros>
 80036e6:	61f8      	str	r0, [r7, #28]
	    float Ts = (timestamp_now - PID.timestamp_prev) * 1e-6;
 80036e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fc fe78 	bl	80003e4 <__aeabi_ui2d>
 80036f4:	a37c      	add	r3, pc, #496	@ (adr r3, 80038e8 <PID+0x218>)
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	f7fc feed 	bl	80004d8 <__aeabi_dmul>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4610      	mov	r0, r2
 8003704:	4619      	mov	r1, r3
 8003706:	f7fd f9df 	bl	8000ac8 <__aeabi_d2f>
 800370a:	4603      	mov	r3, r0
 800370c:	627b      	str	r3, [r7, #36]	@ 0x24
	    // quick fix for strange cases (micros overflow)
	    if(Ts <= 0 || Ts > 0.5)
 800370e:	f04f 0100 	mov.w	r1, #0
 8003712:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003714:	f7fd fcde 	bl	80010d4 <__aeabi_fcmple>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d107      	bne.n	800372e <PID+0x5e>
 800371e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003722:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003724:	f7fd fcea 	bl	80010fc <__aeabi_fcmpgt>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <PID+0x62>
	    	 Ts = 1e-3;
 800372e:	4b70      	ldr	r3, [pc, #448]	@ (80038f0 <PID+0x220>)
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
	    dtx = Ts;
 8003732:	4a70      	ldr	r2, [pc, #448]	@ (80038f4 <PID+0x224>)
 8003734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003736:	6013      	str	r3, [r2, #0]
	    // u(s) = (P + I/s + Ds)e(s)
	    // Discrete implementations
	    // proportional part
	    // u_p  = P *e(k)
	    float proportional = PID.P * PID.error;
 8003738:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800373a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800373c:	4611      	mov	r1, r2
 800373e:	4618      	mov	r0, r3
 8003740:	f7fd fb20 	bl	8000d84 <__aeabi_fmul>
 8003744:	4603      	mov	r3, r0
 8003746:	61bb      	str	r3, [r7, #24]
	    // Tustin transform of the integral part
	    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
	    float integral = PID.integral_prev + PID.I*Ts*0.5f*(PID.error + PID.error_prev);
 8003748:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800374a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800374c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800374e:	4618      	mov	r0, r3
 8003750:	f7fd fb18 	bl	8000d84 <__aeabi_fmul>
 8003754:	4603      	mov	r3, r0
 8003756:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800375a:	4618      	mov	r0, r3
 800375c:	f7fd fb12 	bl	8000d84 <__aeabi_fmul>
 8003760:	4603      	mov	r3, r0
 8003762:	461d      	mov	r5, r3
 8003764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003766:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003768:	4611      	mov	r1, r2
 800376a:	4618      	mov	r0, r3
 800376c:	f7fd fa02 	bl	8000b74 <__addsf3>
 8003770:	4603      	mov	r3, r0
 8003772:	4619      	mov	r1, r3
 8003774:	4628      	mov	r0, r5
 8003776:	f7fd fb05 	bl	8000d84 <__aeabi_fmul>
 800377a:	4603      	mov	r3, r0
 800377c:	4619      	mov	r1, r3
 800377e:	4620      	mov	r0, r4
 8003780:	f7fd f9f8 	bl	8000b74 <__addsf3>
 8003784:	4603      	mov	r3, r0
 8003786:	617b      	str	r3, [r7, #20]
	    // antiwindup - limit the output
	    integral = _constrain(integral, -PID.limit, PID.limit);
 8003788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800378a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800378e:	4619      	mov	r1, r3
 8003790:	6978      	ldr	r0, [r7, #20]
 8003792:	f7fd fc95 	bl	80010c0 <__aeabi_fcmplt>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <PID+0xd4>
 800379c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80037a2:	e00a      	b.n	80037ba <PID+0xea>
 80037a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a6:	4619      	mov	r1, r3
 80037a8:	6978      	ldr	r0, [r7, #20]
 80037aa:	f7fd fca7 	bl	80010fc <__aeabi_fcmpgt>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <PID+0xe8>
 80037b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b6:	e000      	b.n	80037ba <PID+0xea>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	617b      	str	r3, [r7, #20]
	    // Discrete derivation
	    // u_dk = D(ek - ek_1)/Ts
	    float derivative = PID.D*(PID.error - PID.error_prev)/Ts;
 80037bc:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 80037be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037c2:	4611      	mov	r1, r2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fd f9d3 	bl	8000b70 <__aeabi_fsub>
 80037ca:	4603      	mov	r3, r0
 80037cc:	4619      	mov	r1, r3
 80037ce:	4620      	mov	r0, r4
 80037d0:	f7fd fad8 	bl	8000d84 <__aeabi_fmul>
 80037d4:	4603      	mov	r3, r0
 80037d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fd fb87 	bl	8000eec <__aeabi_fdiv>
 80037de:	4603      	mov	r3, r0
 80037e0:	613b      	str	r3, [r7, #16]

	    // sum all the components
	    float output = proportional + integral + derivative;
 80037e2:	6979      	ldr	r1, [r7, #20]
 80037e4:	69b8      	ldr	r0, [r7, #24]
 80037e6:	f7fd f9c5 	bl	8000b74 <__addsf3>
 80037ea:	4603      	mov	r3, r0
 80037ec:	4619      	mov	r1, r3
 80037ee:	6938      	ldr	r0, [r7, #16]
 80037f0:	f7fd f9c0 	bl	8000b74 <__addsf3>
 80037f4:	4603      	mov	r3, r0
 80037f6:	623b      	str	r3, [r7, #32]
	    // antiwindup - limit the output variable
	    output = _constrain(output, -PID.limit, PID.limit);
 80037f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037fa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80037fe:	4619      	mov	r1, r3
 8003800:	6a38      	ldr	r0, [r7, #32]
 8003802:	f7fd fc5d 	bl	80010c0 <__aeabi_fcmplt>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <PID+0x144>
 800380c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003812:	e00a      	b.n	800382a <PID+0x15a>
 8003814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003816:	4619      	mov	r1, r3
 8003818:	6a38      	ldr	r0, [r7, #32]
 800381a:	f7fd fc6f 	bl	80010fc <__aeabi_fcmpgt>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <PID+0x158>
 8003824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003826:	e000      	b.n	800382a <PID+0x15a>
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	623b      	str	r3, [r7, #32]

	    // if output ramp defined
	    float output_ramp = PID.output_ramp;
 800382c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800382e:	60fb      	str	r3, [r7, #12]
	    if(output_ramp > 0)
 8003830:	f04f 0100 	mov.w	r1, #0
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f7fd fc61 	bl	80010fc <__aeabi_fcmpgt>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d035      	beq.n	80038ac <PID+0x1dc>
	    {
	        // limit the acceleration by ramping the output
	        float output_rate = (output - PID.output_prev)/Ts;
 8003840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003842:	4619      	mov	r1, r3
 8003844:	6a38      	ldr	r0, [r7, #32]
 8003846:	f7fd f993 	bl	8000b70 <__aeabi_fsub>
 800384a:	4603      	mov	r3, r0
 800384c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800384e:	4618      	mov	r0, r3
 8003850:	f7fd fb4c 	bl	8000eec <__aeabi_fdiv>
 8003854:	4603      	mov	r3, r0
 8003856:	60bb      	str	r3, [r7, #8]
	        if (output_rate > output_ramp)
 8003858:	68f9      	ldr	r1, [r7, #12]
 800385a:	68b8      	ldr	r0, [r7, #8]
 800385c:	f7fd fc4e 	bl	80010fc <__aeabi_fcmpgt>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00c      	beq.n	8003880 <PID+0x1b0>
	            output = PID.output_prev + output_ramp*Ts;
 8003866:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8003868:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f7fd fa8a 	bl	8000d84 <__aeabi_fmul>
 8003870:	4603      	mov	r3, r0
 8003872:	4619      	mov	r1, r3
 8003874:	4620      	mov	r0, r4
 8003876:	f7fd f97d 	bl	8000b74 <__addsf3>
 800387a:	4603      	mov	r3, r0
 800387c:	623b      	str	r3, [r7, #32]
 800387e:	e015      	b.n	80038ac <PID+0x1dc>
	        else if (output_rate < -output_ramp)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003886:	4619      	mov	r1, r3
 8003888:	68b8      	ldr	r0, [r7, #8]
 800388a:	f7fd fc19 	bl	80010c0 <__aeabi_fcmplt>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00b      	beq.n	80038ac <PID+0x1dc>
	            output = PID.output_prev - output_ramp*Ts;
 8003894:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8003896:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f7fd fa73 	bl	8000d84 <__aeabi_fmul>
 800389e:	4603      	mov	r3, r0
 80038a0:	4619      	mov	r1, r3
 80038a2:	4620      	mov	r0, r4
 80038a4:	f7fd f964 	bl	8000b70 <__aeabi_fsub>
 80038a8:	4603      	mov	r3, r0
 80038aa:	623b      	str	r3, [r7, #32]
	    }

	    // saving for the next pass
	    PID.integral_prev = integral;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	643b      	str	r3, [r7, #64]	@ 0x40
	    PID.output_prev = output;
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	    PID.error_prev = PID.error;
 80038b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b6:	647b      	str	r3, [r7, #68]	@ 0x44
	    PID.timestamp_prev = timestamp_now;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	64bb      	str	r3, [r7, #72]	@ 0x48
	    return PID;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	461d      	mov	r5, r3
 80038c0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80038c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038d0:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	3728      	adds	r7, #40	@ 0x28
 80038d8:	46bd      	mov	sp, r7
 80038da:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80038de:	b004      	add	sp, #16
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	f3af 8000 	nop.w
 80038e8:	a0b5ed8d 	.word	0xa0b5ed8d
 80038ec:	3eb0c6f7 	.word	0x3eb0c6f7
 80038f0:	3a83126f 	.word	0x3a83126f
 80038f4:	200005f8 	.word	0x200005f8

080038f8 <move_angle>:
//  voltage.d = 0;

}

void move_angle(float new_target)
{
 80038f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fa:	b097      	sub	sp, #92	@ 0x5c
 80038fc:	af08      	add	r7, sp, #32
 80038fe:	6378      	str	r0, [r7, #52]	@ 0x34
  // get angular velocity
  shaft_velocity = shaftVelocity(); // read value even if motor is disabled to keep the monitoring updated
 8003900:	f7fe fff8 	bl	80028f4 <shaftVelocity>
 8003904:	4603      	mov	r3, r0
 8003906:	4a38      	ldr	r2, [pc, #224]	@ (80039e8 <move_angle+0xf0>)
 8003908:	6013      	str	r3, [r2, #0]

  // downsampling (optional)
  // if(motion_cnt++ < motion_downsample) return;
  // motion_cnt = 0;
  // set internal target variable
  if(_isset(new_target))
 800390a:	4938      	ldr	r1, [pc, #224]	@ (80039ec <move_angle+0xf4>)
 800390c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800390e:	f7fd fbcd 	bl	80010ac <__aeabi_fcmpeq>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d102      	bne.n	800391e <move_angle+0x26>
	  target = new_target;
 8003918:	4a35      	ldr	r2, [pc, #212]	@ (80039f0 <move_angle+0xf8>)
 800391a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800391c:	6013      	str	r3, [r2, #0]

  // angle set point
  shaft_angle_sp = target;
 800391e:	4b34      	ldr	r3, [pc, #208]	@ (80039f0 <move_angle+0xf8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a34      	ldr	r2, [pc, #208]	@ (80039f4 <move_angle+0xfc>)
 8003924:	6013      	str	r3, [r2, #0]
  // calculate velocity set point
  PID_angle_s.error = shaft_angle_sp - shaft_angle;
 8003926:	4b33      	ldr	r3, [pc, #204]	@ (80039f4 <move_angle+0xfc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a33      	ldr	r2, [pc, #204]	@ (80039f8 <move_angle+0x100>)
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f7fd f91d 	bl	8000b70 <__aeabi_fsub>
 8003936:	4603      	mov	r3, r0
 8003938:	461a      	mov	r2, r3
 800393a:	4b30      	ldr	r3, [pc, #192]	@ (80039fc <move_angle+0x104>)
 800393c:	601a      	str	r2, [r3, #0]
  PID_angle_s = PID(PID_angle_s);
 800393e:	4b2f      	ldr	r3, [pc, #188]	@ (80039fc <move_angle+0x104>)
 8003940:	607b      	str	r3, [r7, #4]
 8003942:	f107 0c08 	add.w	ip, r7, #8
 8003946:	4e2d      	ldr	r6, [pc, #180]	@ (80039fc <move_angle+0x104>)
 8003948:	466d      	mov	r5, sp
 800394a:	f106 040c 	add.w	r4, r6, #12
 800394e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003952:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003956:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800395a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800395e:	4660      	mov	r0, ip
 8003960:	f7ff feb6 	bl	80036d0 <PID>
 8003964:	687d      	ldr	r5, [r7, #4]
 8003966:	f107 0408 	add.w	r4, r7, #8
 800396a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800396c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800396e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003972:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003976:	e885 0003 	stmia.w	r5, {r0, r1}
  shaft_velocity_sp = PID_angle_s.output_prev;
 800397a:	4b20      	ldr	r3, [pc, #128]	@ (80039fc <move_angle+0x104>)
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	4a20      	ldr	r2, [pc, #128]	@ (8003a00 <move_angle+0x108>)
 8003980:	6013      	str	r3, [r2, #0]
  // calculate the torque command
  PID_velocity_s.error = shaft_velocity_sp - shaft_velocity ;
 8003982:	4b1f      	ldr	r3, [pc, #124]	@ (8003a00 <move_angle+0x108>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a18      	ldr	r2, [pc, #96]	@ (80039e8 <move_angle+0xf0>)
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	4611      	mov	r1, r2
 800398c:	4618      	mov	r0, r3
 800398e:	f7fd f8ef 	bl	8000b70 <__aeabi_fsub>
 8003992:	4603      	mov	r3, r0
 8003994:	461a      	mov	r2, r3
 8003996:	4b1b      	ldr	r3, [pc, #108]	@ (8003a04 <move_angle+0x10c>)
 8003998:	601a      	str	r2, [r3, #0]
  PID_velocity_s = PID(PID_velocity_s);
 800399a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a04 <move_angle+0x10c>)
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	f107 0c08 	add.w	ip, r7, #8
 80039a2:	4e18      	ldr	r6, [pc, #96]	@ (8003a04 <move_angle+0x10c>)
 80039a4:	466d      	mov	r5, sp
 80039a6:	f106 040c 	add.w	r4, r6, #12
 80039aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80039b2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80039b6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80039ba:	4660      	mov	r0, ip
 80039bc:	f7ff fe88 	bl	80036d0 <PID>
 80039c0:	687d      	ldr	r5, [r7, #4]
 80039c2:	f107 0408 	add.w	r4, r7, #8
 80039c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039d2:	e885 0003 	stmia.w	r5, {r0, r1}
  current_sp = PID_velocity_s.output_prev;
 80039d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a04 <move_angle+0x10c>)
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	4a0b      	ldr	r2, [pc, #44]	@ (8003a08 <move_angle+0x110>)
 80039dc:	6013      	str	r3, [r2, #0]

//  voltage.q = current_sp*phase_resistance;
//  voltage.d = 0;
}
 80039de:	bf00      	nop
 80039e0:	373c      	adds	r7, #60	@ 0x3c
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000450 	.word	0x20000450
 80039ec:	c640e400 	.word	0xc640e400
 80039f0:	20000444 	.word	0x20000444
 80039f4:	2000045c 	.word	0x2000045c
 80039f8:	20000448 	.word	0x20000448
 80039fc:	20000528 	.word	0x20000528
 8003a00:	20000458 	.word	0x20000458
 8003a04:	20000500 	.word	0x20000500
 8003a08:	20000454 	.word	0x20000454

08003a0c <move_haptic>:

void move_haptic(float new_target, float passivity_gain)
{
 8003a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a0e:	b097      	sub	sp, #92	@ 0x5c
 8003a10:	af08      	add	r7, sp, #32
 8003a12:	6378      	str	r0, [r7, #52]	@ 0x34
 8003a14:	6339      	str	r1, [r7, #48]	@ 0x30
	// get angular velocity
	  shaft_velocity = shaftVelocity(); // read value even if motor is disabled to keep the monitoring updated
 8003a16:	f7fe ff6d 	bl	80028f4 <shaftVelocity>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4a27      	ldr	r2, [pc, #156]	@ (8003abc <move_haptic+0xb0>)
 8003a1e:	6013      	str	r3, [r2, #0]

	  // downsampling (optional)
	  // if(motion_cnt++ < motion_downsample) return;
	  // motion_cnt = 0;
	  // set internal target variable
	  if(_isset(new_target))
 8003a20:	4927      	ldr	r1, [pc, #156]	@ (8003ac0 <move_haptic+0xb4>)
 8003a22:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003a24:	f7fd fb42 	bl	80010ac <__aeabi_fcmpeq>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d102      	bne.n	8003a34 <move_haptic+0x28>
		  target = new_target;
 8003a2e:	4a25      	ldr	r2, [pc, #148]	@ (8003ac4 <move_haptic+0xb8>)
 8003a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a32:	6013      	str	r3, [r2, #0]
	  // angle set point
	  shaft_angle_sp = target;
 8003a34:	4b23      	ldr	r3, [pc, #140]	@ (8003ac4 <move_haptic+0xb8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a23      	ldr	r2, [pc, #140]	@ (8003ac8 <move_haptic+0xbc>)
 8003a3a:	6013      	str	r3, [r2, #0]
	  // calculate velocity set point
	  PID_haptic_s.error = shaft_angle_sp - shaft_angle;
 8003a3c:	4b22      	ldr	r3, [pc, #136]	@ (8003ac8 <move_haptic+0xbc>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a22      	ldr	r2, [pc, #136]	@ (8003acc <move_haptic+0xc0>)
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	4611      	mov	r1, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fd f892 	bl	8000b70 <__aeabi_fsub>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad0 <move_haptic+0xc4>)
 8003a52:	601a      	str	r2, [r3, #0]
	  PID_haptic_s = PID(PID_haptic_s);
 8003a54:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad0 <move_haptic+0xc4>)
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	f107 0c08 	add.w	ip, r7, #8
 8003a5c:	4e1c      	ldr	r6, [pc, #112]	@ (8003ad0 <move_haptic+0xc4>)
 8003a5e:	466d      	mov	r5, sp
 8003a60:	f106 040c 	add.w	r4, r6, #12
 8003a64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a68:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003a6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003a70:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003a74:	4660      	mov	r0, ip
 8003a76:	f7ff fe2b 	bl	80036d0 <PID>
 8003a7a:	687d      	ldr	r5, [r7, #4]
 8003a7c:	f107 0408 	add.w	r4, r7, #8
 8003a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a8c:	e885 0003 	stmia.w	r5, {r0, r1}
	  current_sp = PID_haptic_s.output_prev - (shaft_velocity * passivity_gain);
 8003a90:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad0 <move_haptic+0xc4>)
 8003a92:	691c      	ldr	r4, [r3, #16]
 8003a94:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <move_haptic+0xb0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fd f972 	bl	8000d84 <__aeabi_fmul>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f7fd f863 	bl	8000b70 <__aeabi_fsub>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	461a      	mov	r2, r3
 8003aae:	4b09      	ldr	r3, [pc, #36]	@ (8003ad4 <move_haptic+0xc8>)
 8003ab0:	601a      	str	r2, [r3, #0]
}
 8003ab2:	bf00      	nop
 8003ab4:	373c      	adds	r7, #60	@ 0x3c
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000450 	.word	0x20000450
 8003ac0:	c640e400 	.word	0xc640e400
 8003ac4:	20000444 	.word	0x20000444
 8003ac8:	2000045c 	.word	0x2000045c
 8003acc:	20000448 	.word	0x20000448
 8003ad0:	20000550 	.word	0x20000550
 8003ad4:	20000454 	.word	0x20000454

08003ad8 <angleOpenloop>:

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float angleOpenloop(float target_angle)
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  unsigned long now_us = micros();
 8003ae0:	f7fe f8a6 	bl	8001c30 <micros>
 8003ae4:	6138      	str	r0, [r7, #16]
  // calculate the sample time from last call
  float Ts = (now_us - open_loop_timestamp) * 1e-6;
 8003ae6:	4b5c      	ldr	r3, [pc, #368]	@ (8003c58 <angleOpenloop+0x180>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fc fc77 	bl	80003e4 <__aeabi_ui2d>
 8003af6:	a356      	add	r3, pc, #344	@ (adr r3, 8003c50 <angleOpenloop+0x178>)
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	f7fc fcec 	bl	80004d8 <__aeabi_dmul>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	f7fc ffde 	bl	8000ac8 <__aeabi_d2f>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	617b      	str	r3, [r7, #20]
  // quick fix for strange cases (micros overflow + timestamp not defined)
  if(Ts <= 0 || Ts > 0.5) Ts = 1e-3;
 8003b10:	f04f 0100 	mov.w	r1, #0
 8003b14:	6978      	ldr	r0, [r7, #20]
 8003b16:	f7fd fadd 	bl	80010d4 <__aeabi_fcmple>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d107      	bne.n	8003b30 <angleOpenloop+0x58>
 8003b20:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003b24:	6978      	ldr	r0, [r7, #20]
 8003b26:	f7fd fae9 	bl	80010fc <__aeabi_fcmpgt>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <angleOpenloop+0x5c>
 8003b30:	4b4a      	ldr	r3, [pc, #296]	@ (8003c5c <angleOpenloop+0x184>)
 8003b32:	617b      	str	r3, [r7, #20]

  // calculate the necessary angle to move from current position towards target angle
  // with maximal velocity (velocity_limit)
  if(abs( target_angle - shaft_angle ) > abs(velocity_limit*Ts))
 8003b34:	4b4a      	ldr	r3, [pc, #296]	@ (8003c60 <angleOpenloop+0x188>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fd f818 	bl	8000b70 <__aeabi_fsub>
 8003b40:	4603      	mov	r3, r0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fd fae4 	bl	8001110 <__aeabi_f2iz>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8003b4e:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8003b52:	4b44      	ldr	r3, [pc, #272]	@ (8003c64 <angleOpenloop+0x18c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6979      	ldr	r1, [r7, #20]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fd f913 	bl	8000d84 <__aeabi_fmul>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fd fad5 	bl	8001110 <__aeabi_f2iz>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bfb8      	it	lt
 8003b6c:	425b      	neglt	r3, r3
 8003b6e:	429c      	cmp	r4, r3
 8003b70:	dd4a      	ble.n	8003c08 <angleOpenloop+0x130>
  {
    shaft_angle += _sign(target_angle - shaft_angle) * abs( velocity_limit )*Ts;
 8003b72:	4b3b      	ldr	r3, [pc, #236]	@ (8003c60 <angleOpenloop+0x188>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4619      	mov	r1, r3
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7fc fff9 	bl	8000b70 <__aeabi_fsub>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f04f 0100 	mov.w	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fd fa9b 	bl	80010c0 <__aeabi_fcmplt>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <angleOpenloop+0xbe>
 8003b90:	f04f 34ff 	mov.w	r4, #4294967295
 8003b94:	e014      	b.n	8003bc0 <angleOpenloop+0xe8>
 8003b96:	4b32      	ldr	r3, [pc, #200]	@ (8003c60 <angleOpenloop+0x188>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7fc ffe7 	bl	8000b70 <__aeabi_fsub>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	4614      	mov	r4, r2
 8003ba8:	f04f 0100 	mov.w	r1, #0
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fd faa5 	bl	80010fc <__aeabi_fcmpgt>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <angleOpenloop+0xe4>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	461c      	mov	r4, r3
 8003bbc:	b2e3      	uxtb	r3, r4
 8003bbe:	461c      	mov	r4, r3
 8003bc0:	4b28      	ldr	r3, [pc, #160]	@ (8003c64 <angleOpenloop+0x18c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fd faa3 	bl	8001110 <__aeabi_f2iz>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bfb8      	it	lt
 8003bd0:	425b      	neglt	r3, r3
 8003bd2:	fb04 f303 	mul.w	r3, r4, r3
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd f880 	bl	8000cdc <__aeabi_i2f>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	6979      	ldr	r1, [r7, #20]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fd f8cf 	bl	8000d84 <__aeabi_fmul>
 8003be6:	4603      	mov	r3, r0
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b1d      	ldr	r3, [pc, #116]	@ (8003c60 <angleOpenloop+0x188>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	f7fc ffbf 	bl	8000b74 <__addsf3>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4b19      	ldr	r3, [pc, #100]	@ (8003c60 <angleOpenloop+0x188>)
 8003bfc:	601a      	str	r2, [r3, #0]
    shaft_velocity = velocity_limit;
 8003bfe:	4b19      	ldr	r3, [pc, #100]	@ (8003c64 <angleOpenloop+0x18c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a19      	ldr	r2, [pc, #100]	@ (8003c68 <angleOpenloop+0x190>)
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e006      	b.n	8003c16 <angleOpenloop+0x13e>
  }
  else
  {
    shaft_angle = target_angle;
 8003c08:	4a15      	ldr	r2, [pc, #84]	@ (8003c60 <angleOpenloop+0x188>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6013      	str	r3, [r2, #0]
    shaft_velocity = 0;
 8003c0e:	4b16      	ldr	r3, [pc, #88]	@ (8003c68 <angleOpenloop+0x190>)
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
  }


  // use voltage limit or current limit
  float Uq = voltage_limit;
 8003c16:	4b15      	ldr	r3, [pc, #84]	@ (8003c6c <angleOpenloop+0x194>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]
//  if(_isset(phase_resistance))
//	  Uq =  current_limit*phase_resistance;

  // set the maximal allowed voltage (voltage_limit) with the necessary angle
  setPhaseVoltage(Uq,  0, _electricalAngle(shaft_angle, pole_pairs));
 8003c1c:	4b10      	ldr	r3, [pc, #64]	@ (8003c60 <angleOpenloop+0x188>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a13      	ldr	r2, [pc, #76]	@ (8003c70 <angleOpenloop+0x198>)
 8003c22:	6812      	ldr	r2, [r2, #0]
 8003c24:	4611      	mov	r1, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe fba6 	bl	8002378 <_electricalAngle>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f04f 0100 	mov.w	r1, #0
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f7fe fee7 	bl	8002a08 <setPhaseVoltage>

  open_loop_timestamp = now_us;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	4a06      	ldr	r2, [pc, #24]	@ (8003c58 <angleOpenloop+0x180>)
 8003c3e:	6013      	str	r3, [r2, #0]
  return Uq;
 8003c40:	68fb      	ldr	r3, [r7, #12]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd90      	pop	{r4, r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	f3af 8000 	nop.w
 8003c50:	a0b5ed8d 	.word	0xa0b5ed8d
 8003c54:	3eb0c6f7 	.word	0x3eb0c6f7
 8003c58:	20000598 	.word	0x20000598
 8003c5c:	3a83126f 	.word	0x3a83126f
 8003c60:	20000448 	.word	0x20000448
 8003c64:	20000590 	.word	0x20000590
 8003c68:	20000450 	.word	0x20000450
 8003c6c:	20000588 	.word	0x20000588
 8003c70:	20000014 	.word	0x20000014

08003c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c78:	b672      	cpsid	i
}
 8003c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c7c:	bf00      	nop
 8003c7e:	e7fd      	b.n	8003c7c <Error_Handler+0x8>

08003c80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003c86:	4b15      	ldr	r3, [pc, #84]	@ (8003cdc <HAL_MspInit+0x5c>)
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	4a14      	ldr	r2, [pc, #80]	@ (8003cdc <HAL_MspInit+0x5c>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	6193      	str	r3, [r2, #24]
 8003c92:	4b12      	ldr	r3, [pc, #72]	@ (8003cdc <HAL_MspInit+0x5c>)
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003cdc <HAL_MspInit+0x5c>)
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8003cdc <HAL_MspInit+0x5c>)
 8003ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ca8:	61d3      	str	r3, [r2, #28]
 8003caa:	4b0c      	ldr	r3, [pc, #48]	@ (8003cdc <HAL_MspInit+0x5c>)
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb2:	607b      	str	r3, [r7, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce0 <HAL_MspInit+0x60>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	4a04      	ldr	r2, [pc, #16]	@ (8003ce0 <HAL_MspInit+0x60>)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40010000 	.word	0x40010000

08003ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08a      	sub	sp, #40	@ 0x28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cec:	f107 0318 	add.w	r3, r7, #24
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	609a      	str	r2, [r3, #8]
 8003cf8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a33      	ldr	r2, [pc, #204]	@ (8003dcc <HAL_ADC_MspInit+0xe8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d15f      	bne.n	8003dc4 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d04:	4b32      	ldr	r3, [pc, #200]	@ (8003dd0 <HAL_ADC_MspInit+0xec>)
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	4a31      	ldr	r2, [pc, #196]	@ (8003dd0 <HAL_ADC_MspInit+0xec>)
 8003d0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d0e:	6193      	str	r3, [r2, #24]
 8003d10:	4b2f      	ldr	r3, [pc, #188]	@ (8003dd0 <HAL_ADC_MspInit+0xec>)
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8003dd0 <HAL_ADC_MspInit+0xec>)
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	4a2b      	ldr	r2, [pc, #172]	@ (8003dd0 <HAL_ADC_MspInit+0xec>)
 8003d22:	f043 0304 	orr.w	r3, r3, #4
 8003d26:	6193      	str	r3, [r2, #24]
 8003d28:	4b29      	ldr	r3, [pc, #164]	@ (8003dd0 <HAL_ADC_MspInit+0xec>)
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d34:	4b26      	ldr	r3, [pc, #152]	@ (8003dd0 <HAL_ADC_MspInit+0xec>)
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	4a25      	ldr	r2, [pc, #148]	@ (8003dd0 <HAL_ADC_MspInit+0xec>)
 8003d3a:	f043 0308 	orr.w	r3, r3, #8
 8003d3e:	6193      	str	r3, [r2, #24]
 8003d40:	4b23      	ldr	r3, [pc, #140]	@ (8003dd0 <HAL_ADC_MspInit+0xec>)
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SOA_Pin;
 8003d4c:	2308      	movs	r3, #8
 8003d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d50:	2303      	movs	r3, #3
 8003d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SOA_GPIO_Port, &GPIO_InitStruct);
 8003d54:	f107 0318 	add.w	r3, r7, #24
 8003d58:	4619      	mov	r1, r3
 8003d5a:	481e      	ldr	r0, [pc, #120]	@ (8003dd4 <HAL_ADC_MspInit+0xf0>)
 8003d5c:	f002 f87a 	bl	8005e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SOB_Pin|SOC_Pin;
 8003d60:	2303      	movs	r3, #3
 8003d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d64:	2303      	movs	r3, #3
 8003d66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d68:	f107 0318 	add.w	r3, r7, #24
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	481a      	ldr	r0, [pc, #104]	@ (8003dd8 <HAL_ADC_MspInit+0xf4>)
 8003d70:	f002 f870 	bl	8005e54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003d74:	4b19      	ldr	r3, [pc, #100]	@ (8003ddc <HAL_ADC_MspInit+0xf8>)
 8003d76:	4a1a      	ldr	r2, [pc, #104]	@ (8003de0 <HAL_ADC_MspInit+0xfc>)
 8003d78:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d7a:	4b18      	ldr	r3, [pc, #96]	@ (8003ddc <HAL_ADC_MspInit+0xf8>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d80:	4b16      	ldr	r3, [pc, #88]	@ (8003ddc <HAL_ADC_MspInit+0xf8>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003d86:	4b15      	ldr	r3, [pc, #84]	@ (8003ddc <HAL_ADC_MspInit+0xf8>)
 8003d88:	2280      	movs	r2, #128	@ 0x80
 8003d8a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d8c:	4b13      	ldr	r3, [pc, #76]	@ (8003ddc <HAL_ADC_MspInit+0xf8>)
 8003d8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d92:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d94:	4b11      	ldr	r3, [pc, #68]	@ (8003ddc <HAL_ADC_MspInit+0xf8>)
 8003d96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d9a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ddc <HAL_ADC_MspInit+0xf8>)
 8003d9e:	2220      	movs	r2, #32
 8003da0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003da2:	4b0e      	ldr	r3, [pc, #56]	@ (8003ddc <HAL_ADC_MspInit+0xf8>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003da8:	480c      	ldr	r0, [pc, #48]	@ (8003ddc <HAL_ADC_MspInit+0xf8>)
 8003daa:	f001 fe65 	bl	8005a78 <HAL_DMA_Init>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8003db4:	f7ff ff5e 	bl	8003c74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a08      	ldr	r2, [pc, #32]	@ (8003ddc <HAL_ADC_MspInit+0xf8>)
 8003dbc:	621a      	str	r2, [r3, #32]
 8003dbe:	4a07      	ldr	r2, [pc, #28]	@ (8003ddc <HAL_ADC_MspInit+0xf8>)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003dc4:	bf00      	nop
 8003dc6:	3728      	adds	r7, #40	@ 0x28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40012400 	.word	0x40012400
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40010800 	.word	0x40010800
 8003dd8:	40010c00 	.word	0x40010c00
 8003ddc:	20000254 	.word	0x20000254
 8003de0:	40020008 	.word	0x40020008

08003de4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dec:	f107 0310 	add.w	r3, r7, #16
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb0 <HAL_CAN_MspInit+0xcc>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d151      	bne.n	8003ea8 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003e04:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb4 <HAL_CAN_MspInit+0xd0>)
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	4a2a      	ldr	r2, [pc, #168]	@ (8003eb4 <HAL_CAN_MspInit+0xd0>)
 8003e0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e0e:	61d3      	str	r3, [r2, #28]
 8003e10:	4b28      	ldr	r3, [pc, #160]	@ (8003eb4 <HAL_CAN_MspInit+0xd0>)
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e1c:	4b25      	ldr	r3, [pc, #148]	@ (8003eb4 <HAL_CAN_MspInit+0xd0>)
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	4a24      	ldr	r2, [pc, #144]	@ (8003eb4 <HAL_CAN_MspInit+0xd0>)
 8003e22:	f043 0304 	orr.w	r3, r3, #4
 8003e26:	6193      	str	r3, [r2, #24]
 8003e28:	4b22      	ldr	r3, [pc, #136]	@ (8003eb4 <HAL_CAN_MspInit+0xd0>)
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003e34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e42:	f107 0310 	add.w	r3, r7, #16
 8003e46:	4619      	mov	r1, r3
 8003e48:	481b      	ldr	r0, [pc, #108]	@ (8003eb8 <HAL_CAN_MspInit+0xd4>)
 8003e4a:	f002 f803 	bl	8005e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003e4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e54:	2302      	movs	r3, #2
 8003e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e5c:	f107 0310 	add.w	r3, r7, #16
 8003e60:	4619      	mov	r1, r3
 8003e62:	4815      	ldr	r0, [pc, #84]	@ (8003eb8 <HAL_CAN_MspInit+0xd4>)
 8003e64:	f001 fff6 	bl	8005e54 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	2013      	movs	r0, #19
 8003e6e:	f001 fdcc 	bl	8005a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8003e72:	2013      	movs	r0, #19
 8003e74:	f001 fde5 	bl	8005a42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	2014      	movs	r0, #20
 8003e7e:	f001 fdc4 	bl	8005a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003e82:	2014      	movs	r0, #20
 8003e84:	f001 fddd 	bl	8005a42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	2015      	movs	r0, #21
 8003e8e:	f001 fdbc 	bl	8005a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003e92:	2015      	movs	r0, #21
 8003e94:	f001 fdd5 	bl	8005a42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	2016      	movs	r0, #22
 8003e9e:	f001 fdb4 	bl	8005a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8003ea2:	2016      	movs	r0, #22
 8003ea4:	f001 fdcd 	bl	8005a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003ea8:	bf00      	nop
 8003eaa:	3720      	adds	r7, #32
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40006400 	.word	0x40006400
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40010800 	.word	0x40010800

08003ebc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec4:	f107 0310 	add.w	r3, r7, #16
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f44 <HAL_SPI_MspInit+0x88>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d12f      	bne.n	8003f3c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003edc:	4b1a      	ldr	r3, [pc, #104]	@ (8003f48 <HAL_SPI_MspInit+0x8c>)
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	4a19      	ldr	r2, [pc, #100]	@ (8003f48 <HAL_SPI_MspInit+0x8c>)
 8003ee2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ee6:	6193      	str	r3, [r2, #24]
 8003ee8:	4b17      	ldr	r3, [pc, #92]	@ (8003f48 <HAL_SPI_MspInit+0x8c>)
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef4:	4b14      	ldr	r3, [pc, #80]	@ (8003f48 <HAL_SPI_MspInit+0x8c>)
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	4a13      	ldr	r2, [pc, #76]	@ (8003f48 <HAL_SPI_MspInit+0x8c>)
 8003efa:	f043 0304 	orr.w	r3, r3, #4
 8003efe:	6193      	str	r3, [r2, #24]
 8003f00:	4b11      	ldr	r3, [pc, #68]	@ (8003f48 <HAL_SPI_MspInit+0x8c>)
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003f0c:	23a0      	movs	r3, #160	@ 0xa0
 8003f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f10:	2302      	movs	r3, #2
 8003f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f14:	2303      	movs	r3, #3
 8003f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f18:	f107 0310 	add.w	r3, r7, #16
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	480b      	ldr	r0, [pc, #44]	@ (8003f4c <HAL_SPI_MspInit+0x90>)
 8003f20:	f001 ff98 	bl	8005e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f24:	2340      	movs	r3, #64	@ 0x40
 8003f26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f30:	f107 0310 	add.w	r3, r7, #16
 8003f34:	4619      	mov	r1, r3
 8003f36:	4805      	ldr	r0, [pc, #20]	@ (8003f4c <HAL_SPI_MspInit+0x90>)
 8003f38:	f001 ff8c 	bl	8005e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f3c:	bf00      	nop
 8003f3e:	3720      	adds	r7, #32
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40013000 	.word	0x40013000
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40010800 	.word	0x40010800

08003f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f60:	d10c      	bne.n	8003f7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f62:	4b15      	ldr	r3, [pc, #84]	@ (8003fb8 <HAL_TIM_Base_MspInit+0x68>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	4a14      	ldr	r2, [pc, #80]	@ (8003fb8 <HAL_TIM_Base_MspInit+0x68>)
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	61d3      	str	r3, [r2, #28]
 8003f6e:	4b12      	ldr	r3, [pc, #72]	@ (8003fb8 <HAL_TIM_Base_MspInit+0x68>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003f7a:	e018      	b.n	8003fae <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0e      	ldr	r2, [pc, #56]	@ (8003fbc <HAL_TIM_Base_MspInit+0x6c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d113      	bne.n	8003fae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f86:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb8 <HAL_TIM_Base_MspInit+0x68>)
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	4a0b      	ldr	r2, [pc, #44]	@ (8003fb8 <HAL_TIM_Base_MspInit+0x68>)
 8003f8c:	f043 0304 	orr.w	r3, r3, #4
 8003f90:	61d3      	str	r3, [r2, #28]
 8003f92:	4b09      	ldr	r3, [pc, #36]	@ (8003fb8 <HAL_TIM_Base_MspInit+0x68>)
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	201e      	movs	r0, #30
 8003fa4:	f001 fd31 	bl	8005a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003fa8:	201e      	movs	r0, #30
 8003faa:	f001 fd4a 	bl	8005a42 <HAL_NVIC_EnableIRQ>
}
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40000800 	.word	0x40000800

08003fc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc8:	f107 0310 	add.w	r3, r7, #16
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fde:	d117      	bne.n	8004010 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <HAL_TIM_MspPostInit+0x58>)
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8004018 <HAL_TIM_MspPostInit+0x58>)
 8003fe6:	f043 0304 	orr.w	r3, r3, #4
 8003fea:	6193      	str	r3, [r2, #24]
 8003fec:	4b0a      	ldr	r3, [pc, #40]	@ (8004018 <HAL_TIM_MspPostInit+0x58>)
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin|PWMC_Pin;
 8003ff8:	2307      	movs	r3, #7
 8003ffa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004000:	2302      	movs	r3, #2
 8004002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004004:	f107 0310 	add.w	r3, r7, #16
 8004008:	4619      	mov	r1, r3
 800400a:	4804      	ldr	r0, [pc, #16]	@ (800401c <HAL_TIM_MspPostInit+0x5c>)
 800400c:	f001 ff22 	bl	8005e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004010:	bf00      	nop
 8004012:	3720      	adds	r7, #32
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40021000 	.word	0x40021000
 800401c:	40010800 	.word	0x40010800

08004020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004028:	f107 0310 	add.w	r3, r7, #16
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1c      	ldr	r2, [pc, #112]	@ (80040ac <HAL_UART_MspInit+0x8c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d131      	bne.n	80040a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004040:	4b1b      	ldr	r3, [pc, #108]	@ (80040b0 <HAL_UART_MspInit+0x90>)
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	4a1a      	ldr	r2, [pc, #104]	@ (80040b0 <HAL_UART_MspInit+0x90>)
 8004046:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800404a:	6193      	str	r3, [r2, #24]
 800404c:	4b18      	ldr	r3, [pc, #96]	@ (80040b0 <HAL_UART_MspInit+0x90>)
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004058:	4b15      	ldr	r3, [pc, #84]	@ (80040b0 <HAL_UART_MspInit+0x90>)
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	4a14      	ldr	r2, [pc, #80]	@ (80040b0 <HAL_UART_MspInit+0x90>)
 800405e:	f043 0304 	orr.w	r3, r3, #4
 8004062:	6193      	str	r3, [r2, #24]
 8004064:	4b12      	ldr	r3, [pc, #72]	@ (80040b0 <HAL_UART_MspInit+0x90>)
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004070:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004074:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004076:	2302      	movs	r3, #2
 8004078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800407a:	2303      	movs	r3, #3
 800407c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800407e:	f107 0310 	add.w	r3, r7, #16
 8004082:	4619      	mov	r1, r3
 8004084:	480b      	ldr	r0, [pc, #44]	@ (80040b4 <HAL_UART_MspInit+0x94>)
 8004086:	f001 fee5 	bl	8005e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800408a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800408e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004094:	2300      	movs	r3, #0
 8004096:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004098:	f107 0310 	add.w	r3, r7, #16
 800409c:	4619      	mov	r1, r3
 800409e:	4805      	ldr	r0, [pc, #20]	@ (80040b4 <HAL_UART_MspInit+0x94>)
 80040a0:	f001 fed8 	bl	8005e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80040a4:	bf00      	nop
 80040a6:	3720      	adds	r7, #32
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40013800 	.word	0x40013800
 80040b0:	40021000 	.word	0x40021000
 80040b4:	40010800 	.word	0x40010800

080040b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040bc:	bf00      	nop
 80040be:	e7fd      	b.n	80040bc <NMI_Handler+0x4>

080040c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040c4:	bf00      	nop
 80040c6:	e7fd      	b.n	80040c4 <HardFault_Handler+0x4>

080040c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040cc:	bf00      	nop
 80040ce:	e7fd      	b.n	80040cc <MemManage_Handler+0x4>

080040d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040d4:	bf00      	nop
 80040d6:	e7fd      	b.n	80040d4 <BusFault_Handler+0x4>

080040d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040dc:	bf00      	nop
 80040de:	e7fd      	b.n	80040dc <UsageFault_Handler+0x4>

080040e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040e4:	bf00      	nop
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr

080040ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040f0:	bf00      	nop
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040fc:	bf00      	nop
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr

08004104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004108:	f000 f956 	bl	80043b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800410c:	bf00      	nop
 800410e:	bd80      	pop	{r7, pc}

08004110 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004114:	4802      	ldr	r0, [pc, #8]	@ (8004120 <DMA1_Channel1_IRQHandler+0x10>)
 8004116:	f001 fd69 	bl	8005bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000254 	.word	0x20000254

08004124 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004128:	4802      	ldr	r0, [pc, #8]	@ (8004134 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800412a:	f001 f968 	bl	80053fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800412e:	bf00      	nop
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000298 	.word	0x20000298

08004138 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800413c:	4802      	ldr	r0, [pc, #8]	@ (8004148 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800413e:	f001 f95e 	bl	80053fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004142:	bf00      	nop
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000298 	.word	0x20000298

0800414c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004150:	4802      	ldr	r0, [pc, #8]	@ (800415c <CAN1_RX1_IRQHandler+0x10>)
 8004152:	f001 f954 	bl	80053fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004156:	bf00      	nop
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000298 	.word	0x20000298

08004160 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004164:	4802      	ldr	r0, [pc, #8]	@ (8004170 <CAN1_SCE_IRQHandler+0x10>)
 8004166:	f001 f94a 	bl	80053fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800416a:	bf00      	nop
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000298 	.word	0x20000298

08004174 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004178:	4802      	ldr	r0, [pc, #8]	@ (8004184 <TIM4_IRQHandler+0x10>)
 800417a:	f003 f93f 	bl	80073fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000360 	.word	0x20000360

08004188 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
	return 1;
 800418c:	2301      	movs	r3, #1
}
 800418e:	4618      	mov	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr

08004196 <_kill>:

int _kill(int pid, int sig)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041a0:	f004 ffae 	bl	8009100 <__errno>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2216      	movs	r2, #22
 80041a8:	601a      	str	r2, [r3, #0]
	return -1;
 80041aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <_exit>:

void _exit (int status)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041be:	f04f 31ff 	mov.w	r1, #4294967295
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ffe7 	bl	8004196 <_kill>
	while (1) {}		/* Make sure we hang here */
 80041c8:	bf00      	nop
 80041ca:	e7fd      	b.n	80041c8 <_exit+0x12>

080041cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e00a      	b.n	80041f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041de:	f3af 8000 	nop.w
 80041e2:	4601      	mov	r1, r0
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	60ba      	str	r2, [r7, #8]
 80041ea:	b2ca      	uxtb	r2, r1
 80041ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	3301      	adds	r3, #1
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	dbf0      	blt.n	80041de <_read+0x12>
	}

return len;
 80041fc:	687b      	ldr	r3, [r7, #4]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
	return -1;
 800420e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004212:	4618      	mov	r0, r3
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr

0800421c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800422c:	605a      	str	r2, [r3, #4]
	return 0;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr

0800423a <_isatty>:

int _isatty(int file)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
	return 1;
 8004242:	2301      	movs	r3, #1
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr

0800424e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
	return 0;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
	...

08004268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004270:	4a14      	ldr	r2, [pc, #80]	@ (80042c4 <_sbrk+0x5c>)
 8004272:	4b15      	ldr	r3, [pc, #84]	@ (80042c8 <_sbrk+0x60>)
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800427c:	4b13      	ldr	r3, [pc, #76]	@ (80042cc <_sbrk+0x64>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d102      	bne.n	800428a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004284:	4b11      	ldr	r3, [pc, #68]	@ (80042cc <_sbrk+0x64>)
 8004286:	4a12      	ldr	r2, [pc, #72]	@ (80042d0 <_sbrk+0x68>)
 8004288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800428a:	4b10      	ldr	r3, [pc, #64]	@ (80042cc <_sbrk+0x64>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4413      	add	r3, r2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	429a      	cmp	r2, r3
 8004296:	d207      	bcs.n	80042a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004298:	f004 ff32 	bl	8009100 <__errno>
 800429c:	4603      	mov	r3, r0
 800429e:	220c      	movs	r2, #12
 80042a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042a2:	f04f 33ff 	mov.w	r3, #4294967295
 80042a6:	e009      	b.n	80042bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042a8:	4b08      	ldr	r3, [pc, #32]	@ (80042cc <_sbrk+0x64>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042ae:	4b07      	ldr	r3, [pc, #28]	@ (80042cc <_sbrk+0x64>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4413      	add	r3, r2
 80042b6:	4a05      	ldr	r2, [pc, #20]	@ (80042cc <_sbrk+0x64>)
 80042b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042ba:	68fb      	ldr	r3, [r7, #12]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20005000 	.word	0x20005000
 80042c8:	00000400 	.word	0x00000400
 80042cc:	20000614 	.word	0x20000614
 80042d0:	20000768 	.word	0x20000768

080042d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */

   ldr r0, =_sdata
 80042e0:	480c      	ldr	r0, [pc, #48]	@ (8004314 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80042e2:	490d      	ldr	r1, [pc, #52]	@ (8004318 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80042e4:	4a0d      	ldr	r2, [pc, #52]	@ (800431c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80042e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042e8:	e002      	b.n	80042f0 <LoopCopyDataInit>

080042ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042ee:	3304      	adds	r3, #4

080042f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042f4:	d3f9      	bcc.n	80042ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004320 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042f8:	4c0a      	ldr	r4, [pc, #40]	@ (8004324 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042fc:	e001      	b.n	8004302 <LoopFillZerobss>

080042fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004300:	3204      	adds	r2, #4

08004302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004304:	d3fb      	bcc.n	80042fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004306:	f7ff ffe5 	bl	80042d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800430a:	f004 feff 	bl	800910c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800430e:	f7fd f809 	bl	8001324 <main>
  bx lr
 8004312:	4770      	bx	lr
   ldr r0, =_sdata
 8004314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004318:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 800431c:	0800e680 	.word	0x0800e680
  ldr r2, =_sbss
 8004320:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004324:	20000768 	.word	0x20000768

08004328 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004328:	e7fe      	b.n	8004328 <ADC1_2_IRQHandler>
	...

0800432c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004330:	4b08      	ldr	r3, [pc, #32]	@ (8004354 <HAL_Init+0x28>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a07      	ldr	r2, [pc, #28]	@ (8004354 <HAL_Init+0x28>)
 8004336:	f043 0310 	orr.w	r3, r3, #16
 800433a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800433c:	2003      	movs	r0, #3
 800433e:	f001 fb59 	bl	80059f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004342:	200f      	movs	r0, #15
 8004344:	f000 f808 	bl	8004358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004348:	f7ff fc9a 	bl	8003c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40022000 	.word	0x40022000

08004358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004360:	4b12      	ldr	r3, [pc, #72]	@ (80043ac <HAL_InitTick+0x54>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b12      	ldr	r3, [pc, #72]	@ (80043b0 <HAL_InitTick+0x58>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	4619      	mov	r1, r3
 800436a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800436e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004372:	fbb2 f3f3 	udiv	r3, r2, r3
 8004376:	4618      	mov	r0, r3
 8004378:	f001 fb71 	bl	8005a5e <HAL_SYSTICK_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e00e      	b.n	80043a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b0f      	cmp	r3, #15
 800438a:	d80a      	bhi.n	80043a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800438c:	2200      	movs	r2, #0
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	f04f 30ff 	mov.w	r0, #4294967295
 8004394:	f001 fb39 	bl	8005a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004398:	4a06      	ldr	r2, [pc, #24]	@ (80043b4 <HAL_InitTick+0x5c>)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e000      	b.n	80043a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000020 	.word	0x20000020
 80043b0:	20000028 	.word	0x20000028
 80043b4:	20000024 	.word	0x20000024

080043b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043bc:	4b05      	ldr	r3, [pc, #20]	@ (80043d4 <HAL_IncTick+0x1c>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	4b05      	ldr	r3, [pc, #20]	@ (80043d8 <HAL_IncTick+0x20>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4413      	add	r3, r2
 80043c8:	4a03      	ldr	r2, [pc, #12]	@ (80043d8 <HAL_IncTick+0x20>)
 80043ca:	6013      	str	r3, [r2, #0]
}
 80043cc:	bf00      	nop
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	20000028 	.word	0x20000028
 80043d8:	20000618 	.word	0x20000618

080043dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return uwTick;
 80043e0:	4b02      	ldr	r3, [pc, #8]	@ (80043ec <HAL_GetTick+0x10>)
 80043e2:	681b      	ldr	r3, [r3, #0]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr
 80043ec:	20000618 	.word	0x20000618

080043f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043f8:	f7ff fff0 	bl	80043dc <HAL_GetTick>
 80043fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004408:	d005      	beq.n	8004416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800440a:	4b0a      	ldr	r3, [pc, #40]	@ (8004434 <HAL_Delay+0x44>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4413      	add	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004416:	bf00      	nop
 8004418:	f7ff ffe0 	bl	80043dc <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	429a      	cmp	r2, r3
 8004426:	d8f7      	bhi.n	8004418 <HAL_Delay+0x28>
  {
  }
}
 8004428:	bf00      	nop
 800442a:	bf00      	nop
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20000028 	.word	0x20000028

08004438 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004440:	2300      	movs	r3, #0
 8004442:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e0be      	b.n	80045d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004464:	2b00      	cmp	r3, #0
 8004466:	d109      	bne.n	800447c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff fc34 	bl	8003ce4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 faff 	bl	8004a80 <ADC_ConversionStop_Disable>
 8004482:	4603      	mov	r3, r0
 8004484:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b00      	cmp	r3, #0
 8004490:	f040 8099 	bne.w	80045c6 <HAL_ADC_Init+0x18e>
 8004494:	7dfb      	ldrb	r3, [r7, #23]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f040 8095 	bne.w	80045c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80044a4:	f023 0302 	bic.w	r3, r3, #2
 80044a8:	f043 0202 	orr.w	r2, r3, #2
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80044b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	7b1b      	ldrb	r3, [r3, #12]
 80044be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80044c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d0:	d003      	beq.n	80044da <HAL_ADC_Init+0xa2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d102      	bne.n	80044e0 <HAL_ADC_Init+0xa8>
 80044da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044de:	e000      	b.n	80044e2 <HAL_ADC_Init+0xaa>
 80044e0:	2300      	movs	r3, #0
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	7d1b      	ldrb	r3, [r3, #20]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d119      	bne.n	8004524 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	7b1b      	ldrb	r3, [r3, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d109      	bne.n	800450c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	035a      	lsls	r2, r3, #13
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	e00b      	b.n	8004524 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004510:	f043 0220 	orr.w	r2, r3, #32
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451c:	f043 0201 	orr.w	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	430a      	orrs	r2, r1
 8004536:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	4b28      	ldr	r3, [pc, #160]	@ (80045e0 <HAL_ADC_Init+0x1a8>)
 8004540:	4013      	ands	r3, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	430b      	orrs	r3, r1
 800454a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004554:	d003      	beq.n	800455e <HAL_ADC_Init+0x126>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d104      	bne.n	8004568 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	3b01      	subs	r3, #1
 8004564:	051b      	lsls	r3, r3, #20
 8004566:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	430a      	orrs	r2, r1
 800457a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	4b18      	ldr	r3, [pc, #96]	@ (80045e4 <HAL_ADC_Init+0x1ac>)
 8004584:	4013      	ands	r3, r2
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	429a      	cmp	r2, r3
 800458a:	d10b      	bne.n	80045a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004596:	f023 0303 	bic.w	r3, r3, #3
 800459a:	f043 0201 	orr.w	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80045a2:	e018      	b.n	80045d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a8:	f023 0312 	bic.w	r3, r3, #18
 80045ac:	f043 0210 	orr.w	r2, r3, #16
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b8:	f043 0201 	orr.w	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80045c4:	e007      	b.n	80045d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ca:	f043 0210 	orr.w	r2, r3, #16
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80045d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	ffe1f7fd 	.word	0xffe1f7fd
 80045e4:	ff1f0efe 	.word	0xff1f0efe

080045e8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a64      	ldr	r2, [pc, #400]	@ (8004790 <HAL_ADC_Start_DMA+0x1a8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <HAL_ADC_Start_DMA+0x24>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a63      	ldr	r2, [pc, #396]	@ (8004794 <HAL_ADC_Start_DMA+0x1ac>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d106      	bne.n	800461a <HAL_ADC_Start_DMA+0x32>
 800460c:	4b60      	ldr	r3, [pc, #384]	@ (8004790 <HAL_ADC_Start_DMA+0x1a8>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004614:	2b00      	cmp	r3, #0
 8004616:	f040 80b3 	bne.w	8004780 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_ADC_Start_DMA+0x40>
 8004624:	2302      	movs	r3, #2
 8004626:	e0ae      	b.n	8004786 <HAL_ADC_Start_DMA+0x19e>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f9cb 	bl	80049cc <ADC_Enable>
 8004636:	4603      	mov	r3, r0
 8004638:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800463a:	7dfb      	ldrb	r3, [r7, #23]
 800463c:	2b00      	cmp	r3, #0
 800463e:	f040 809a 	bne.w	8004776 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004646:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a4e      	ldr	r2, [pc, #312]	@ (8004794 <HAL_ADC_Start_DMA+0x1ac>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d105      	bne.n	800466c <HAL_ADC_Start_DMA+0x84>
 8004660:	4b4b      	ldr	r3, [pc, #300]	@ (8004790 <HAL_ADC_Start_DMA+0x1a8>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d115      	bne.n	8004698 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004670:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004682:	2b00      	cmp	r3, #0
 8004684:	d026      	beq.n	80046d4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800468e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004696:	e01d      	b.n	80046d4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a39      	ldr	r2, [pc, #228]	@ (8004790 <HAL_ADC_Start_DMA+0x1a8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d004      	beq.n	80046b8 <HAL_ADC_Start_DMA+0xd0>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a38      	ldr	r2, [pc, #224]	@ (8004794 <HAL_ADC_Start_DMA+0x1ac>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d10d      	bne.n	80046d4 <HAL_ADC_Start_DMA+0xec>
 80046b8:	4b35      	ldr	r3, [pc, #212]	@ (8004790 <HAL_ADC_Start_DMA+0x1a8>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d007      	beq.n	80046d4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80046cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d006      	beq.n	80046ee <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	f023 0206 	bic.w	r2, r3, #6
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046ec:	e002      	b.n	80046f4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	4a25      	ldr	r2, [pc, #148]	@ (8004798 <HAL_ADC_Start_DMA+0x1b0>)
 8004702:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	4a24      	ldr	r2, [pc, #144]	@ (800479c <HAL_ADC_Start_DMA+0x1b4>)
 800470a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	4a23      	ldr	r2, [pc, #140]	@ (80047a0 <HAL_ADC_Start_DMA+0x1b8>)
 8004712:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0202 	mvn.w	r2, #2
 800471c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800472c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a18      	ldr	r0, [r3, #32]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	334c      	adds	r3, #76	@ 0x4c
 8004738:	4619      	mov	r1, r3
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f001 f9f5 	bl	8005b2c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800474c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004750:	d108      	bne.n	8004764 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004760:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004762:	e00f      	b.n	8004784 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004772:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004774:	e006      	b.n	8004784 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800477e:	e001      	b.n	8004784 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004784:	7dfb      	ldrb	r3, [r7, #23]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40012400 	.word	0x40012400
 8004794:	40012800 	.word	0x40012800
 8004798:	08004b03 	.word	0x08004b03
 800479c:	08004b7f 	.word	0x08004b7f
 80047a0:	08004b9b 	.word	0x08004b9b

080047a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr

080047b6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr

080047c8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr
	...

080047dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x20>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e0dc      	b.n	80049b6 <HAL_ADC_ConfigChannel+0x1da>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b06      	cmp	r3, #6
 800480a:	d81c      	bhi.n	8004846 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	3b05      	subs	r3, #5
 800481e:	221f      	movs	r2, #31
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	4019      	ands	r1, r3
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	3b05      	subs	r3, #5
 8004838:	fa00 f203 	lsl.w	r2, r0, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	635a      	str	r2, [r3, #52]	@ 0x34
 8004844:	e03c      	b.n	80048c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b0c      	cmp	r3, #12
 800484c:	d81c      	bhi.n	8004888 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	3b23      	subs	r3, #35	@ 0x23
 8004860:	221f      	movs	r2, #31
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	4019      	ands	r1, r3
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	3b23      	subs	r3, #35	@ 0x23
 800487a:	fa00 f203 	lsl.w	r2, r0, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	631a      	str	r2, [r3, #48]	@ 0x30
 8004886:	e01b      	b.n	80048c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	3b41      	subs	r3, #65	@ 0x41
 800489a:	221f      	movs	r2, #31
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	4019      	ands	r1, r3
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	3b41      	subs	r3, #65	@ 0x41
 80048b4:	fa00 f203 	lsl.w	r2, r0, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b09      	cmp	r3, #9
 80048c6:	d91c      	bls.n	8004902 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68d9      	ldr	r1, [r3, #12]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4613      	mov	r3, r2
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	4413      	add	r3, r2
 80048d8:	3b1e      	subs	r3, #30
 80048da:	2207      	movs	r2, #7
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	4019      	ands	r1, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	6898      	ldr	r0, [r3, #8]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4613      	mov	r3, r2
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	4413      	add	r3, r2
 80048f2:	3b1e      	subs	r3, #30
 80048f4:	fa00 f203 	lsl.w	r2, r0, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	60da      	str	r2, [r3, #12]
 8004900:	e019      	b.n	8004936 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6919      	ldr	r1, [r3, #16]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	4613      	mov	r3, r2
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	4413      	add	r3, r2
 8004912:	2207      	movs	r2, #7
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	4019      	ands	r1, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6898      	ldr	r0, [r3, #8]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	4613      	mov	r3, r2
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	4413      	add	r3, r2
 800492a:	fa00 f203 	lsl.w	r2, r0, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b10      	cmp	r3, #16
 800493c:	d003      	beq.n	8004946 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004942:	2b11      	cmp	r3, #17
 8004944:	d132      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1d      	ldr	r2, [pc, #116]	@ (80049c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d125      	bne.n	800499c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d126      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800496c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b10      	cmp	r3, #16
 8004974:	d11a      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004976:	4b13      	ldr	r3, [pc, #76]	@ (80049c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a13      	ldr	r2, [pc, #76]	@ (80049c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800497c:	fba2 2303 	umull	r2, r3, r2, r3
 8004980:	0c9a      	lsrs	r2, r3, #18
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800498c:	e002      	b.n	8004994 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	3b01      	subs	r3, #1
 8004992:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f9      	bne.n	800498e <HAL_ADC_ConfigChannel+0x1b2>
 800499a:	e007      	b.n	80049ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a0:	f043 0220 	orr.w	r2, r3, #32
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	40012400 	.word	0x40012400
 80049c4:	20000020 	.word	0x20000020
 80049c8:	431bde83 	.word	0x431bde83

080049cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d040      	beq.n	8004a6c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0201 	orr.w	r2, r2, #1
 80049f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80049fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004a78 <ADC_Enable+0xac>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1f      	ldr	r2, [pc, #124]	@ (8004a7c <ADC_Enable+0xb0>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	0c9b      	lsrs	r3, r3, #18
 8004a06:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004a08:	e002      	b.n	8004a10 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f9      	bne.n	8004a0a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a16:	f7ff fce1 	bl	80043dc <HAL_GetTick>
 8004a1a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004a1c:	e01f      	b.n	8004a5e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a1e:	f7ff fcdd 	bl	80043dc <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d918      	bls.n	8004a5e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d011      	beq.n	8004a5e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3e:	f043 0210 	orr.w	r2, r3, #16
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4a:	f043 0201 	orr.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e007      	b.n	8004a6e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d1d8      	bne.n	8004a1e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000020 	.word	0x20000020
 8004a7c:	431bde83 	.word	0x431bde83

08004a80 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d12e      	bne.n	8004af8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0201 	bic.w	r2, r2, #1
 8004aa8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004aaa:	f7ff fc97 	bl	80043dc <HAL_GetTick>
 8004aae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004ab0:	e01b      	b.n	8004aea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ab2:	f7ff fc93 	bl	80043dc <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d914      	bls.n	8004aea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d10d      	bne.n	8004aea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad2:	f043 0210 	orr.w	r2, r3, #16
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ade:	f043 0201 	orr.w	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e007      	b.n	8004afa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d0dc      	beq.n	8004ab2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b14:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d127      	bne.n	8004b6c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004b32:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004b36:	d115      	bne.n	8004b64 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d111      	bne.n	8004b64 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d105      	bne.n	8004b64 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b5c:	f043 0201 	orr.w	r2, r3, #1
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f7ff fe1d 	bl	80047a4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004b6a:	e004      	b.n	8004b76 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4798      	blx	r3
}
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f7ff fe12 	bl	80047b6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb8:	f043 0204 	orr.w	r2, r3, #4
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f7ff fe01 	bl	80047c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bc6:	bf00      	nop
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0ed      	b.n	8004dbc <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff f8f9 	bl	8003de4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f042 0201 	orr.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c02:	f7ff fbeb 	bl	80043dc <HAL_GetTick>
 8004c06:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c08:	e012      	b.n	8004c30 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c0a:	f7ff fbe7 	bl	80043dc <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b0a      	cmp	r3, #10
 8004c16:	d90b      	bls.n	8004c30 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2205      	movs	r2, #5
 8004c28:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0c5      	b.n	8004dbc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0e5      	beq.n	8004c0a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0202 	bic.w	r2, r2, #2
 8004c4c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c4e:	f7ff fbc5 	bl	80043dc <HAL_GetTick>
 8004c52:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004c54:	e012      	b.n	8004c7c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c56:	f7ff fbc1 	bl	80043dc <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b0a      	cmp	r3, #10
 8004c62:	d90b      	bls.n	8004c7c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c68:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2205      	movs	r2, #5
 8004c74:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e09f      	b.n	8004dbc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e5      	bne.n	8004c56 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	7e1b      	ldrb	r3, [r3, #24]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d108      	bne.n	8004ca4 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	e007      	b.n	8004cb4 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	7e5b      	ldrb	r3, [r3, #25]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d108      	bne.n	8004cce <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e007      	b.n	8004cde <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	7e9b      	ldrb	r3, [r3, #26]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d108      	bne.n	8004cf8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0220 	orr.w	r2, r2, #32
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	e007      	b.n	8004d08 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0220 	bic.w	r2, r2, #32
 8004d06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	7edb      	ldrb	r3, [r3, #27]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d108      	bne.n	8004d22 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0210 	bic.w	r2, r2, #16
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	e007      	b.n	8004d32 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0210 	orr.w	r2, r2, #16
 8004d30:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	7f1b      	ldrb	r3, [r3, #28]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d108      	bne.n	8004d4c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0208 	orr.w	r2, r2, #8
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	e007      	b.n	8004d5c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0208 	bic.w	r2, r2, #8
 8004d5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	7f5b      	ldrb	r3, [r3, #29]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d108      	bne.n	8004d76 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0204 	orr.w	r2, r2, #4
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	e007      	b.n	8004d86 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0204 	bic.w	r2, r2, #4
 8004d84:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	ea42 0103 	orr.w	r1, r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	1e5a      	subs	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dda:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004ddc:	7cfb      	ldrb	r3, [r7, #19]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d003      	beq.n	8004dea <HAL_CAN_ConfigFilter+0x26>
 8004de2:	7cfb      	ldrb	r3, [r7, #19]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	f040 80aa 	bne.w	8004f3e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004df0:	f043 0201 	orr.w	r2, r3, #1
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f003 031f 	and.w	r3, r3, #31
 8004e02:	2201      	movs	r2, #1
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	43db      	mvns	r3, r3
 8004e14:	401a      	ands	r2, r3
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d123      	bne.n	8004e6c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	401a      	ands	r2, r3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004e46:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	3248      	adds	r2, #72	@ 0x48
 8004e4c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e60:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e62:	6979      	ldr	r1, [r7, #20]
 8004e64:	3348      	adds	r3, #72	@ 0x48
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	440b      	add	r3, r1
 8004e6a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d122      	bne.n	8004eba <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e94:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	3248      	adds	r2, #72	@ 0x48
 8004e9a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004eae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004eb0:	6979      	ldr	r1, [r7, #20]
 8004eb2:	3348      	adds	r3, #72	@ 0x48
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	440b      	add	r3, r1
 8004eb8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	401a      	ands	r2, r3
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004ed4:	e007      	b.n	8004ee6 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d109      	bne.n	8004f02 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	401a      	ands	r2, r3
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004f00:	e007      	b.n	8004f12 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d107      	bne.n	8004f2a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	431a      	orrs	r2, r3
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004f30:	f023 0201 	bic.w	r2, r3, #1
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e006      	b.n	8004f4c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f42:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
  }
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	371c      	adds	r7, #28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bc80      	pop	{r7}
 8004f54:	4770      	bx	lr

08004f56 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d12e      	bne.n	8004fc8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0201 	bic.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f82:	f7ff fa2b 	bl	80043dc <HAL_GetTick>
 8004f86:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f88:	e012      	b.n	8004fb0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f8a:	f7ff fa27 	bl	80043dc <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b0a      	cmp	r3, #10
 8004f96:	d90b      	bls.n	8004fb0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2205      	movs	r2, #5
 8004fa8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e012      	b.n	8004fd6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e5      	bne.n	8004f8a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	e006      	b.n	8004fd6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fcc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
  }
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b089      	sub	sp, #36	@ 0x24
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ff2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004ffc:	7ffb      	ldrb	r3, [r7, #31]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d003      	beq.n	800500a <HAL_CAN_AddTxMessage+0x2c>
 8005002:	7ffb      	ldrb	r3, [r7, #31]
 8005004:	2b02      	cmp	r3, #2
 8005006:	f040 80b8 	bne.w	800517a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10a      	bne.n	800502a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800501a:	2b00      	cmp	r3, #0
 800501c:	d105      	bne.n	800502a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80a0 	beq.w	800516a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	0e1b      	lsrs	r3, r3, #24
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d907      	bls.n	800504a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e09e      	b.n	8005188 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800504a:	2201      	movs	r2, #1
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	409a      	lsls	r2, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10d      	bne.n	8005078 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005066:	68f9      	ldr	r1, [r7, #12]
 8005068:	6809      	ldr	r1, [r1, #0]
 800506a:	431a      	orrs	r2, r3
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	3318      	adds	r3, #24
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	440b      	add	r3, r1
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	e00f      	b.n	8005098 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005082:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005088:	68f9      	ldr	r1, [r7, #12]
 800508a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800508c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	3318      	adds	r3, #24
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	440b      	add	r3, r1
 8005096:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6819      	ldr	r1, [r3, #0]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	3318      	adds	r3, #24
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	440b      	add	r3, r1
 80050a8:	3304      	adds	r3, #4
 80050aa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	7d1b      	ldrb	r3, [r3, #20]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d111      	bne.n	80050d8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	3318      	adds	r3, #24
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	4413      	add	r3, r2
 80050c0:	3304      	adds	r3, #4
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	6811      	ldr	r1, [r2, #0]
 80050c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	3318      	adds	r3, #24
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	440b      	add	r3, r1
 80050d4:	3304      	adds	r3, #4
 80050d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3307      	adds	r3, #7
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	061a      	lsls	r2, r3, #24
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3306      	adds	r3, #6
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	041b      	lsls	r3, r3, #16
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3305      	adds	r3, #5
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	4313      	orrs	r3, r2
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	3204      	adds	r2, #4
 80050f8:	7812      	ldrb	r2, [r2, #0]
 80050fa:	4610      	mov	r0, r2
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	6811      	ldr	r1, [r2, #0]
 8005100:	ea43 0200 	orr.w	r2, r3, r0
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	440b      	add	r3, r1
 800510a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800510e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3303      	adds	r3, #3
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	061a      	lsls	r2, r3, #24
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3302      	adds	r3, #2
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	041b      	lsls	r3, r3, #16
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3301      	adds	r3, #1
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	021b      	lsls	r3, r3, #8
 800512a:	4313      	orrs	r3, r2
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	7812      	ldrb	r2, [r2, #0]
 8005130:	4610      	mov	r0, r2
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	6811      	ldr	r1, [r2, #0]
 8005136:	ea43 0200 	orr.w	r2, r3, r0
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	440b      	add	r3, r1
 8005140:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005144:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	3318      	adds	r3, #24
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	4413      	add	r3, r2
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	6811      	ldr	r1, [r2, #0]
 8005158:	f043 0201 	orr.w	r2, r3, #1
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	3318      	adds	r3, #24
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	440b      	add	r3, r1
 8005164:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	e00e      	b.n	8005188 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e006      	b.n	8005188 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
  }
}
 8005188:	4618      	mov	r0, r3
 800518a:	3724      	adds	r7, #36	@ 0x24
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005192:	b480      	push	{r7}
 8005194:	b087      	sub	sp, #28
 8005196:	af00      	add	r7, sp, #0
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	607a      	str	r2, [r7, #4]
 800519e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80051a8:	7dfb      	ldrb	r3, [r7, #23]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d003      	beq.n	80051b6 <HAL_CAN_GetRxMessage+0x24>
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	f040 80f3 	bne.w	800539c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10e      	bne.n	80051da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d116      	bne.n	80051f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e0e7      	b.n	80053aa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d107      	bne.n	80051f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e0d8      	b.n	80053aa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	331b      	adds	r3, #27
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	4413      	add	r3, r2
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0204 	and.w	r2, r3, #4
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10c      	bne.n	8005230 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	331b      	adds	r3, #27
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	4413      	add	r3, r2
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	0d5b      	lsrs	r3, r3, #21
 8005226:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e00b      	b.n	8005248 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	331b      	adds	r3, #27
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	4413      	add	r3, r2
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	08db      	lsrs	r3, r3, #3
 8005240:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	331b      	adds	r3, #27
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	4413      	add	r3, r2
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0202 	and.w	r2, r3, #2
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	331b      	adds	r3, #27
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	4413      	add	r3, r2
 800526a:	3304      	adds	r3, #4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 020f 	and.w	r2, r3, #15
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	331b      	adds	r3, #27
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	4413      	add	r3, r2
 8005282:	3304      	adds	r3, #4
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	0a1b      	lsrs	r3, r3, #8
 8005288:	b2da      	uxtb	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	331b      	adds	r3, #27
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	4413      	add	r3, r2
 800529a:	3304      	adds	r3, #4
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	0c1b      	lsrs	r3, r3, #16
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	0a1a      	lsrs	r2, r3, #8
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	3301      	adds	r3, #1
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	4413      	add	r3, r2
 80052e0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	0c1a      	lsrs	r2, r3, #16
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	3302      	adds	r3, #2
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	0e1a      	lsrs	r2, r3, #24
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	3303      	adds	r3, #3
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	4413      	add	r3, r2
 8005314:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	3304      	adds	r3, #4
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	4413      	add	r3, r2
 800532c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	0a1a      	lsrs	r2, r3, #8
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	3305      	adds	r3, #5
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	4413      	add	r3, r2
 8005346:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	0c1a      	lsrs	r2, r3, #16
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	3306      	adds	r3, #6
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	4413      	add	r3, r2
 8005360:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	0e1a      	lsrs	r2, r3, #24
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	3307      	adds	r3, #7
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d108      	bne.n	8005388 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0220 	orr.w	r2, r2, #32
 8005384:	60da      	str	r2, [r3, #12]
 8005386:	e007      	b.n	8005398 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691a      	ldr	r2, [r3, #16]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0220 	orr.w	r2, r2, #32
 8005396:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	e006      	b.n	80053aa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
  }
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr

080053b4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053c4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d002      	beq.n	80053d2 <HAL_CAN_ActivateNotification+0x1e>
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d109      	bne.n	80053e6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6959      	ldr	r1, [r3, #20]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e006      	b.n	80053f4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
  }
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr

080053fe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b08a      	sub	sp, #40	@ 0x28
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005406:	2300      	movs	r3, #0
 8005408:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d07c      	beq.n	800553e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d023      	beq.n	8005496 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2201      	movs	r2, #1
 8005454:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f983 	bl	800576c <HAL_CAN_TxMailbox0CompleteCallback>
 8005466:	e016      	b.n	8005496 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	d004      	beq.n	800547c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005478:	627b      	str	r3, [r7, #36]	@ 0x24
 800547a:	e00c      	b.n	8005496 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d004      	beq.n	8005490 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800548c:	627b      	str	r3, [r7, #36]	@ 0x24
 800548e:	e002      	b.n	8005496 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f986 	bl	80057a2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d024      	beq.n	80054ea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f962 	bl	800577e <HAL_CAN_TxMailbox1CompleteCallback>
 80054ba:	e016      	b.n	80054ea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d004      	beq.n	80054d0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80054c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80054cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ce:	e00c      	b.n	80054ea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d004      	beq.n	80054e4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80054e2:	e002      	b.n	80054ea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f965 	bl	80057b4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d024      	beq.n	800553e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80054fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d003      	beq.n	8005510 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f941 	bl	8005790 <HAL_CAN_TxMailbox2CompleteCallback>
 800550e:	e016      	b.n	800553e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d004      	beq.n	8005524 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005520:	627b      	str	r3, [r7, #36]	@ 0x24
 8005522:	e00c      	b.n	800553e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d004      	beq.n	8005538 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005534:	627b      	str	r3, [r7, #36]	@ 0x24
 8005536:	e002      	b.n	800553e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f944 	bl	80057c6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00c      	beq.n	8005562 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f003 0310 	and.w	r3, r3, #16
 800554e:	2b00      	cmp	r3, #0
 8005550:	d007      	beq.n	8005562 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005558:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2210      	movs	r2, #16
 8005560:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00b      	beq.n	8005584 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d006      	beq.n	8005584 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2208      	movs	r2, #8
 800557c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f92a 	bl	80057d8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d009      	beq.n	80055a2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7fb fe77 	bl	8001290 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00c      	beq.n	80055c6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80055b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055bc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2210      	movs	r2, #16
 80055c4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00b      	beq.n	80055e8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d006      	beq.n	80055e8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2208      	movs	r2, #8
 80055e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f90a 	bl	80057fc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d009      	beq.n	8005606 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f8f2 	bl	80057ea <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00b      	beq.n	8005628 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b00      	cmp	r3, #0
 8005618:	d006      	beq.n	8005628 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2210      	movs	r2, #16
 8005620:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f8f3 	bl	800580e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00b      	beq.n	800564a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d006      	beq.n	800564a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2208      	movs	r2, #8
 8005642:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f8eb 	bl	8005820 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d07b      	beq.n	800574c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f003 0304 	and.w	r3, r3, #4
 800565a:	2b00      	cmp	r3, #0
 800565c:	d072      	beq.n	8005744 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005664:	2b00      	cmp	r3, #0
 8005666:	d008      	beq.n	800567a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005674:	f043 0301 	orr.w	r3, r3, #1
 8005678:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005690:	f043 0302 	orr.w	r3, r3, #2
 8005694:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800569c:	2b00      	cmp	r3, #0
 800569e:	d008      	beq.n	80056b2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	f043 0304 	orr.w	r3, r3, #4
 80056b0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d043      	beq.n	8005744 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d03e      	beq.n	8005744 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056cc:	2b60      	cmp	r3, #96	@ 0x60
 80056ce:	d02b      	beq.n	8005728 <HAL_CAN_IRQHandler+0x32a>
 80056d0:	2b60      	cmp	r3, #96	@ 0x60
 80056d2:	d82e      	bhi.n	8005732 <HAL_CAN_IRQHandler+0x334>
 80056d4:	2b50      	cmp	r3, #80	@ 0x50
 80056d6:	d022      	beq.n	800571e <HAL_CAN_IRQHandler+0x320>
 80056d8:	2b50      	cmp	r3, #80	@ 0x50
 80056da:	d82a      	bhi.n	8005732 <HAL_CAN_IRQHandler+0x334>
 80056dc:	2b40      	cmp	r3, #64	@ 0x40
 80056de:	d019      	beq.n	8005714 <HAL_CAN_IRQHandler+0x316>
 80056e0:	2b40      	cmp	r3, #64	@ 0x40
 80056e2:	d826      	bhi.n	8005732 <HAL_CAN_IRQHandler+0x334>
 80056e4:	2b30      	cmp	r3, #48	@ 0x30
 80056e6:	d010      	beq.n	800570a <HAL_CAN_IRQHandler+0x30c>
 80056e8:	2b30      	cmp	r3, #48	@ 0x30
 80056ea:	d822      	bhi.n	8005732 <HAL_CAN_IRQHandler+0x334>
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d002      	beq.n	80056f6 <HAL_CAN_IRQHandler+0x2f8>
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d005      	beq.n	8005700 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80056f4:	e01d      	b.n	8005732 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	f043 0308 	orr.w	r3, r3, #8
 80056fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80056fe:	e019      	b.n	8005734 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	f043 0310 	orr.w	r3, r3, #16
 8005706:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005708:	e014      	b.n	8005734 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800570a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570c:	f043 0320 	orr.w	r3, r3, #32
 8005710:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005712:	e00f      	b.n	8005734 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800571a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800571c:	e00a      	b.n	8005734 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005724:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005726:	e005      	b.n	8005734 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800572e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005730:	e000      	b.n	8005734 <HAL_CAN_IRQHandler+0x336>
            break;
 8005732:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699a      	ldr	r2, [r3, #24]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005742:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2204      	movs	r2, #4
 800574a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	2b00      	cmp	r3, #0
 8005750:	d008      	beq.n	8005764 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f867 	bl	8005832 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005764:	bf00      	nop
 8005766:	3728      	adds	r7, #40	@ 0x28
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	bc80      	pop	{r7}
 800577c:	4770      	bx	lr

0800577e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr

08005790 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr

080057a2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr

080057b4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bc80      	pop	{r7}
 80057c4:	4770      	bx	lr

080057c6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr

080057d8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bc80      	pop	{r7}
 80057e8:	4770      	bx	lr

080057ea <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr

080057fc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr

0800580e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr

08005820 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	bc80      	pop	{r7}
 8005830:	4770      	bx	lr

08005832 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr

08005844 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	bc80      	pop	{r7}
 8005858:	4770      	bx	lr
	...

0800585c <__NVIC_SetPriorityGrouping>:
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800586c:	4b0c      	ldr	r3, [pc, #48]	@ (80058a0 <__NVIC_SetPriorityGrouping+0x44>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005878:	4013      	ands	r3, r2
 800587a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005884:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800588c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800588e:	4a04      	ldr	r2, [pc, #16]	@ (80058a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	60d3      	str	r3, [r2, #12]
}
 8005894:	bf00      	nop
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	e000ed00 	.word	0xe000ed00

080058a4 <__NVIC_GetPriorityGrouping>:
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058a8:	4b04      	ldr	r3, [pc, #16]	@ (80058bc <__NVIC_GetPriorityGrouping+0x18>)
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	0a1b      	lsrs	r3, r3, #8
 80058ae:	f003 0307 	and.w	r3, r3, #7
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bc80      	pop	{r7}
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	e000ed00 	.word	0xe000ed00

080058c0 <__NVIC_EnableIRQ>:
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	4603      	mov	r3, r0
 80058c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	db0b      	blt.n	80058ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	f003 021f 	and.w	r2, r3, #31
 80058d8:	4906      	ldr	r1, [pc, #24]	@ (80058f4 <__NVIC_EnableIRQ+0x34>)
 80058da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	2001      	movs	r0, #1
 80058e2:	fa00 f202 	lsl.w	r2, r0, r2
 80058e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr
 80058f4:	e000e100 	.word	0xe000e100

080058f8 <__NVIC_SetPriority>:
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	4603      	mov	r3, r0
 8005900:	6039      	str	r1, [r7, #0]
 8005902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005908:	2b00      	cmp	r3, #0
 800590a:	db0a      	blt.n	8005922 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	b2da      	uxtb	r2, r3
 8005910:	490c      	ldr	r1, [pc, #48]	@ (8005944 <__NVIC_SetPriority+0x4c>)
 8005912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005916:	0112      	lsls	r2, r2, #4
 8005918:	b2d2      	uxtb	r2, r2
 800591a:	440b      	add	r3, r1
 800591c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005920:	e00a      	b.n	8005938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	b2da      	uxtb	r2, r3
 8005926:	4908      	ldr	r1, [pc, #32]	@ (8005948 <__NVIC_SetPriority+0x50>)
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	3b04      	subs	r3, #4
 8005930:	0112      	lsls	r2, r2, #4
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	440b      	add	r3, r1
 8005936:	761a      	strb	r2, [r3, #24]
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	bc80      	pop	{r7}
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	e000e100 	.word	0xe000e100
 8005948:	e000ed00 	.word	0xe000ed00

0800594c <NVIC_EncodePriority>:
{
 800594c:	b480      	push	{r7}
 800594e:	b089      	sub	sp, #36	@ 0x24
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	f1c3 0307 	rsb	r3, r3, #7
 8005966:	2b04      	cmp	r3, #4
 8005968:	bf28      	it	cs
 800596a:	2304      	movcs	r3, #4
 800596c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	3304      	adds	r3, #4
 8005972:	2b06      	cmp	r3, #6
 8005974:	d902      	bls.n	800597c <NVIC_EncodePriority+0x30>
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	3b03      	subs	r3, #3
 800597a:	e000      	b.n	800597e <NVIC_EncodePriority+0x32>
 800597c:	2300      	movs	r3, #0
 800597e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005980:	f04f 32ff 	mov.w	r2, #4294967295
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	43da      	mvns	r2, r3
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	401a      	ands	r2, r3
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005994:	f04f 31ff 	mov.w	r1, #4294967295
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	fa01 f303 	lsl.w	r3, r1, r3
 800599e:	43d9      	mvns	r1, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059a4:	4313      	orrs	r3, r2
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3724      	adds	r7, #36	@ 0x24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr

080059b0 <SysTick_Config>:
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059c0:	d301      	bcc.n	80059c6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80059c2:	2301      	movs	r3, #1
 80059c4:	e00f      	b.n	80059e6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059c6:	4a0a      	ldr	r2, [pc, #40]	@ (80059f0 <SysTick_Config+0x40>)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059ce:	210f      	movs	r1, #15
 80059d0:	f04f 30ff 	mov.w	r0, #4294967295
 80059d4:	f7ff ff90 	bl	80058f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059d8:	4b05      	ldr	r3, [pc, #20]	@ (80059f0 <SysTick_Config+0x40>)
 80059da:	2200      	movs	r2, #0
 80059dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059de:	4b04      	ldr	r3, [pc, #16]	@ (80059f0 <SysTick_Config+0x40>)
 80059e0:	2207      	movs	r2, #7
 80059e2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	e000e010 	.word	0xe000e010

080059f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7ff ff2d 	bl	800585c <__NVIC_SetPriorityGrouping>
}
 8005a02:	bf00      	nop
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b086      	sub	sp, #24
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	4603      	mov	r3, r0
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	607a      	str	r2, [r7, #4]
 8005a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a1c:	f7ff ff42 	bl	80058a4 <__NVIC_GetPriorityGrouping>
 8005a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	6978      	ldr	r0, [r7, #20]
 8005a28:	f7ff ff90 	bl	800594c <NVIC_EncodePriority>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a32:	4611      	mov	r1, r2
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff ff5f 	bl	80058f8 <__NVIC_SetPriority>
}
 8005a3a:	bf00      	nop
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	4603      	mov	r3, r0
 8005a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff ff35 	bl	80058c0 <__NVIC_EnableIRQ>
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b082      	sub	sp, #8
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7ff ffa2 	bl	80059b0 <SysTick_Config>
 8005a6c:	4603      	mov	r3, r0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e043      	b.n	8005b16 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	4b22      	ldr	r3, [pc, #136]	@ (8005b20 <HAL_DMA_Init+0xa8>)
 8005a96:	4413      	add	r3, r2
 8005a98:	4a22      	ldr	r2, [pc, #136]	@ (8005b24 <HAL_DMA_Init+0xac>)
 8005a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9e:	091b      	lsrs	r3, r3, #4
 8005aa0:	009a      	lsls	r2, r3, #2
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8005b28 <HAL_DMA_Init+0xb0>)
 8005aaa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005ac2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005ac6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ae8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr
 8005b20:	bffdfff8 	.word	0xbffdfff8
 8005b24:	cccccccd 	.word	0xcccccccd
 8005b28:	40020000 	.word	0x40020000

08005b2c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d101      	bne.n	8005b4c <HAL_DMA_Start_IT+0x20>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e04a      	b.n	8005be2 <HAL_DMA_Start_IT+0xb6>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d13a      	bne.n	8005bd4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2202      	movs	r2, #2
 8005b62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0201 	bic.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	68b9      	ldr	r1, [r7, #8]
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 f938 	bl	8005df8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 020e 	orr.w	r2, r2, #14
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	e00f      	b.n	8005bc2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0204 	bic.w	r2, r2, #4
 8005bb0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f042 020a 	orr.w	r2, r2, #10
 8005bc0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0201 	orr.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	e005      	b.n	8005be0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005bdc:	2302      	movs	r3, #2
 8005bde:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c08:	2204      	movs	r2, #4
 8005c0a:	409a      	lsls	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d04f      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0xc8>
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f003 0304 	and.w	r3, r3, #4
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d04a      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d107      	bne.n	8005c3c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0204 	bic.w	r2, r2, #4
 8005c3a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a66      	ldr	r2, [pc, #408]	@ (8005ddc <HAL_DMA_IRQHandler+0x1f0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d029      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xae>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a65      	ldr	r2, [pc, #404]	@ (8005de0 <HAL_DMA_IRQHandler+0x1f4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d022      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xaa>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a63      	ldr	r2, [pc, #396]	@ (8005de4 <HAL_DMA_IRQHandler+0x1f8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d01a      	beq.n	8005c90 <HAL_DMA_IRQHandler+0xa4>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a62      	ldr	r2, [pc, #392]	@ (8005de8 <HAL_DMA_IRQHandler+0x1fc>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d012      	beq.n	8005c8a <HAL_DMA_IRQHandler+0x9e>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a60      	ldr	r2, [pc, #384]	@ (8005dec <HAL_DMA_IRQHandler+0x200>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d00a      	beq.n	8005c84 <HAL_DMA_IRQHandler+0x98>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a5f      	ldr	r2, [pc, #380]	@ (8005df0 <HAL_DMA_IRQHandler+0x204>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d102      	bne.n	8005c7e <HAL_DMA_IRQHandler+0x92>
 8005c78:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005c7c:	e00e      	b.n	8005c9c <HAL_DMA_IRQHandler+0xb0>
 8005c7e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005c82:	e00b      	b.n	8005c9c <HAL_DMA_IRQHandler+0xb0>
 8005c84:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005c88:	e008      	b.n	8005c9c <HAL_DMA_IRQHandler+0xb0>
 8005c8a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005c8e:	e005      	b.n	8005c9c <HAL_DMA_IRQHandler+0xb0>
 8005c90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c94:	e002      	b.n	8005c9c <HAL_DMA_IRQHandler+0xb0>
 8005c96:	2340      	movs	r3, #64	@ 0x40
 8005c98:	e000      	b.n	8005c9c <HAL_DMA_IRQHandler+0xb0>
 8005c9a:	2304      	movs	r3, #4
 8005c9c:	4a55      	ldr	r2, [pc, #340]	@ (8005df4 <HAL_DMA_IRQHandler+0x208>)
 8005c9e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 8094 	beq.w	8005dd2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005cb2:	e08e      	b.n	8005dd2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb8:	2202      	movs	r2, #2
 8005cba:	409a      	lsls	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d056      	beq.n	8005d72 <HAL_DMA_IRQHandler+0x186>
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d051      	beq.n	8005d72 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10b      	bne.n	8005cf4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 020a 	bic.w	r2, r2, #10
 8005cea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a38      	ldr	r2, [pc, #224]	@ (8005ddc <HAL_DMA_IRQHandler+0x1f0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d029      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x166>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a37      	ldr	r2, [pc, #220]	@ (8005de0 <HAL_DMA_IRQHandler+0x1f4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d022      	beq.n	8005d4e <HAL_DMA_IRQHandler+0x162>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a35      	ldr	r2, [pc, #212]	@ (8005de4 <HAL_DMA_IRQHandler+0x1f8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d01a      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x15c>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a34      	ldr	r2, [pc, #208]	@ (8005de8 <HAL_DMA_IRQHandler+0x1fc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d012      	beq.n	8005d42 <HAL_DMA_IRQHandler+0x156>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a32      	ldr	r2, [pc, #200]	@ (8005dec <HAL_DMA_IRQHandler+0x200>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00a      	beq.n	8005d3c <HAL_DMA_IRQHandler+0x150>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a31      	ldr	r2, [pc, #196]	@ (8005df0 <HAL_DMA_IRQHandler+0x204>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d102      	bne.n	8005d36 <HAL_DMA_IRQHandler+0x14a>
 8005d30:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005d34:	e00e      	b.n	8005d54 <HAL_DMA_IRQHandler+0x168>
 8005d36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d3a:	e00b      	b.n	8005d54 <HAL_DMA_IRQHandler+0x168>
 8005d3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d40:	e008      	b.n	8005d54 <HAL_DMA_IRQHandler+0x168>
 8005d42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005d46:	e005      	b.n	8005d54 <HAL_DMA_IRQHandler+0x168>
 8005d48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d4c:	e002      	b.n	8005d54 <HAL_DMA_IRQHandler+0x168>
 8005d4e:	2320      	movs	r3, #32
 8005d50:	e000      	b.n	8005d54 <HAL_DMA_IRQHandler+0x168>
 8005d52:	2302      	movs	r3, #2
 8005d54:	4a27      	ldr	r2, [pc, #156]	@ (8005df4 <HAL_DMA_IRQHandler+0x208>)
 8005d56:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d034      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005d70:	e02f      	b.n	8005dd2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d76:	2208      	movs	r2, #8
 8005d78:	409a      	lsls	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d028      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x1e8>
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d023      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 020e 	bic.w	r2, r2, #14
 8005d9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da4:	2101      	movs	r1, #1
 8005da6:	fa01 f202 	lsl.w	r2, r1, r2
 8005daa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d004      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	4798      	blx	r3
    }
  }
  return;
 8005dd2:	bf00      	nop
 8005dd4:	bf00      	nop
}
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40020008 	.word	0x40020008
 8005de0:	4002001c 	.word	0x4002001c
 8005de4:	40020030 	.word	0x40020030
 8005de8:	40020044 	.word	0x40020044
 8005dec:	40020058 	.word	0x40020058
 8005df0:	4002006c 	.word	0x4002006c
 8005df4:	40020000 	.word	0x40020000

08005df8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0e:	2101      	movs	r1, #1
 8005e10:	fa01 f202 	lsl.w	r2, r1, r2
 8005e14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2b10      	cmp	r3, #16
 8005e24:	d108      	bne.n	8005e38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005e36:	e007      	b.n	8005e48 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	60da      	str	r2, [r3, #12]
}
 8005e48:	bf00      	nop
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bc80      	pop	{r7}
 8005e50:	4770      	bx	lr
	...

08005e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b08b      	sub	sp, #44	@ 0x2c
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005e62:	2300      	movs	r3, #0
 8005e64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e66:	e169      	b.n	800613c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005e68:	2201      	movs	r2, #1
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69fa      	ldr	r2, [r7, #28]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	f040 8158 	bne.w	8006136 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	4a9a      	ldr	r2, [pc, #616]	@ (80060f4 <HAL_GPIO_Init+0x2a0>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d05e      	beq.n	8005f4e <HAL_GPIO_Init+0xfa>
 8005e90:	4a98      	ldr	r2, [pc, #608]	@ (80060f4 <HAL_GPIO_Init+0x2a0>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d875      	bhi.n	8005f82 <HAL_GPIO_Init+0x12e>
 8005e96:	4a98      	ldr	r2, [pc, #608]	@ (80060f8 <HAL_GPIO_Init+0x2a4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d058      	beq.n	8005f4e <HAL_GPIO_Init+0xfa>
 8005e9c:	4a96      	ldr	r2, [pc, #600]	@ (80060f8 <HAL_GPIO_Init+0x2a4>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d86f      	bhi.n	8005f82 <HAL_GPIO_Init+0x12e>
 8005ea2:	4a96      	ldr	r2, [pc, #600]	@ (80060fc <HAL_GPIO_Init+0x2a8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d052      	beq.n	8005f4e <HAL_GPIO_Init+0xfa>
 8005ea8:	4a94      	ldr	r2, [pc, #592]	@ (80060fc <HAL_GPIO_Init+0x2a8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d869      	bhi.n	8005f82 <HAL_GPIO_Init+0x12e>
 8005eae:	4a94      	ldr	r2, [pc, #592]	@ (8006100 <HAL_GPIO_Init+0x2ac>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d04c      	beq.n	8005f4e <HAL_GPIO_Init+0xfa>
 8005eb4:	4a92      	ldr	r2, [pc, #584]	@ (8006100 <HAL_GPIO_Init+0x2ac>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d863      	bhi.n	8005f82 <HAL_GPIO_Init+0x12e>
 8005eba:	4a92      	ldr	r2, [pc, #584]	@ (8006104 <HAL_GPIO_Init+0x2b0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d046      	beq.n	8005f4e <HAL_GPIO_Init+0xfa>
 8005ec0:	4a90      	ldr	r2, [pc, #576]	@ (8006104 <HAL_GPIO_Init+0x2b0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d85d      	bhi.n	8005f82 <HAL_GPIO_Init+0x12e>
 8005ec6:	2b12      	cmp	r3, #18
 8005ec8:	d82a      	bhi.n	8005f20 <HAL_GPIO_Init+0xcc>
 8005eca:	2b12      	cmp	r3, #18
 8005ecc:	d859      	bhi.n	8005f82 <HAL_GPIO_Init+0x12e>
 8005ece:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed4 <HAL_GPIO_Init+0x80>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005f4f 	.word	0x08005f4f
 8005ed8:	08005f29 	.word	0x08005f29
 8005edc:	08005f3b 	.word	0x08005f3b
 8005ee0:	08005f7d 	.word	0x08005f7d
 8005ee4:	08005f83 	.word	0x08005f83
 8005ee8:	08005f83 	.word	0x08005f83
 8005eec:	08005f83 	.word	0x08005f83
 8005ef0:	08005f83 	.word	0x08005f83
 8005ef4:	08005f83 	.word	0x08005f83
 8005ef8:	08005f83 	.word	0x08005f83
 8005efc:	08005f83 	.word	0x08005f83
 8005f00:	08005f83 	.word	0x08005f83
 8005f04:	08005f83 	.word	0x08005f83
 8005f08:	08005f83 	.word	0x08005f83
 8005f0c:	08005f83 	.word	0x08005f83
 8005f10:	08005f83 	.word	0x08005f83
 8005f14:	08005f83 	.word	0x08005f83
 8005f18:	08005f31 	.word	0x08005f31
 8005f1c:	08005f45 	.word	0x08005f45
 8005f20:	4a79      	ldr	r2, [pc, #484]	@ (8006108 <HAL_GPIO_Init+0x2b4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d013      	beq.n	8005f4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005f26:	e02c      	b.n	8005f82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	623b      	str	r3, [r7, #32]
          break;
 8005f2e:	e029      	b.n	8005f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	3304      	adds	r3, #4
 8005f36:	623b      	str	r3, [r7, #32]
          break;
 8005f38:	e024      	b.n	8005f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	3308      	adds	r3, #8
 8005f40:	623b      	str	r3, [r7, #32]
          break;
 8005f42:	e01f      	b.n	8005f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	330c      	adds	r3, #12
 8005f4a:	623b      	str	r3, [r7, #32]
          break;
 8005f4c:	e01a      	b.n	8005f84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d102      	bne.n	8005f5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005f56:	2304      	movs	r3, #4
 8005f58:	623b      	str	r3, [r7, #32]
          break;
 8005f5a:	e013      	b.n	8005f84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d105      	bne.n	8005f70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f64:	2308      	movs	r3, #8
 8005f66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	611a      	str	r2, [r3, #16]
          break;
 8005f6e:	e009      	b.n	8005f84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f70:	2308      	movs	r3, #8
 8005f72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	615a      	str	r2, [r3, #20]
          break;
 8005f7a:	e003      	b.n	8005f84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	623b      	str	r3, [r7, #32]
          break;
 8005f80:	e000      	b.n	8005f84 <HAL_GPIO_Init+0x130>
          break;
 8005f82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	2bff      	cmp	r3, #255	@ 0xff
 8005f88:	d801      	bhi.n	8005f8e <HAL_GPIO_Init+0x13a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	e001      	b.n	8005f92 <HAL_GPIO_Init+0x13e>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	3304      	adds	r3, #4
 8005f92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2bff      	cmp	r3, #255	@ 0xff
 8005f98:	d802      	bhi.n	8005fa0 <HAL_GPIO_Init+0x14c>
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	e002      	b.n	8005fa6 <HAL_GPIO_Init+0x152>
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa2:	3b08      	subs	r3, #8
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	210f      	movs	r1, #15
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb4:	43db      	mvns	r3, r3
 8005fb6:	401a      	ands	r2, r3
 8005fb8:	6a39      	ldr	r1, [r7, #32]
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 80b1 	beq.w	8006136 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005fd4:	4b4d      	ldr	r3, [pc, #308]	@ (800610c <HAL_GPIO_Init+0x2b8>)
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	4a4c      	ldr	r2, [pc, #304]	@ (800610c <HAL_GPIO_Init+0x2b8>)
 8005fda:	f043 0301 	orr.w	r3, r3, #1
 8005fde:	6193      	str	r3, [r2, #24]
 8005fe0:	4b4a      	ldr	r3, [pc, #296]	@ (800610c <HAL_GPIO_Init+0x2b8>)
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	60bb      	str	r3, [r7, #8]
 8005fea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005fec:	4a48      	ldr	r2, [pc, #288]	@ (8006110 <HAL_GPIO_Init+0x2bc>)
 8005fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff0:	089b      	lsrs	r3, r3, #2
 8005ff2:	3302      	adds	r3, #2
 8005ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	f003 0303 	and.w	r3, r3, #3
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	220f      	movs	r2, #15
 8006004:	fa02 f303 	lsl.w	r3, r2, r3
 8006008:	43db      	mvns	r3, r3
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4013      	ands	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a40      	ldr	r2, [pc, #256]	@ (8006114 <HAL_GPIO_Init+0x2c0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d013      	beq.n	8006040 <HAL_GPIO_Init+0x1ec>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a3f      	ldr	r2, [pc, #252]	@ (8006118 <HAL_GPIO_Init+0x2c4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00d      	beq.n	800603c <HAL_GPIO_Init+0x1e8>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a3e      	ldr	r2, [pc, #248]	@ (800611c <HAL_GPIO_Init+0x2c8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d007      	beq.n	8006038 <HAL_GPIO_Init+0x1e4>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a3d      	ldr	r2, [pc, #244]	@ (8006120 <HAL_GPIO_Init+0x2cc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d101      	bne.n	8006034 <HAL_GPIO_Init+0x1e0>
 8006030:	2303      	movs	r3, #3
 8006032:	e006      	b.n	8006042 <HAL_GPIO_Init+0x1ee>
 8006034:	2304      	movs	r3, #4
 8006036:	e004      	b.n	8006042 <HAL_GPIO_Init+0x1ee>
 8006038:	2302      	movs	r3, #2
 800603a:	e002      	b.n	8006042 <HAL_GPIO_Init+0x1ee>
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <HAL_GPIO_Init+0x1ee>
 8006040:	2300      	movs	r3, #0
 8006042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006044:	f002 0203 	and.w	r2, r2, #3
 8006048:	0092      	lsls	r2, r2, #2
 800604a:	4093      	lsls	r3, r2
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006052:	492f      	ldr	r1, [pc, #188]	@ (8006110 <HAL_GPIO_Init+0x2bc>)
 8006054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006056:	089b      	lsrs	r3, r3, #2
 8006058:	3302      	adds	r3, #2
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d006      	beq.n	800607a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800606c:	4b2d      	ldr	r3, [pc, #180]	@ (8006124 <HAL_GPIO_Init+0x2d0>)
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	492c      	ldr	r1, [pc, #176]	@ (8006124 <HAL_GPIO_Init+0x2d0>)
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	4313      	orrs	r3, r2
 8006076:	600b      	str	r3, [r1, #0]
 8006078:	e006      	b.n	8006088 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800607a:	4b2a      	ldr	r3, [pc, #168]	@ (8006124 <HAL_GPIO_Init+0x2d0>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	43db      	mvns	r3, r3
 8006082:	4928      	ldr	r1, [pc, #160]	@ (8006124 <HAL_GPIO_Init+0x2d0>)
 8006084:	4013      	ands	r3, r2
 8006086:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d006      	beq.n	80060a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006094:	4b23      	ldr	r3, [pc, #140]	@ (8006124 <HAL_GPIO_Init+0x2d0>)
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	4922      	ldr	r1, [pc, #136]	@ (8006124 <HAL_GPIO_Init+0x2d0>)
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	4313      	orrs	r3, r2
 800609e:	604b      	str	r3, [r1, #4]
 80060a0:	e006      	b.n	80060b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80060a2:	4b20      	ldr	r3, [pc, #128]	@ (8006124 <HAL_GPIO_Init+0x2d0>)
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	43db      	mvns	r3, r3
 80060aa:	491e      	ldr	r1, [pc, #120]	@ (8006124 <HAL_GPIO_Init+0x2d0>)
 80060ac:	4013      	ands	r3, r2
 80060ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d006      	beq.n	80060ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80060bc:	4b19      	ldr	r3, [pc, #100]	@ (8006124 <HAL_GPIO_Init+0x2d0>)
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	4918      	ldr	r1, [pc, #96]	@ (8006124 <HAL_GPIO_Init+0x2d0>)
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	608b      	str	r3, [r1, #8]
 80060c8:	e006      	b.n	80060d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80060ca:	4b16      	ldr	r3, [pc, #88]	@ (8006124 <HAL_GPIO_Init+0x2d0>)
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	43db      	mvns	r3, r3
 80060d2:	4914      	ldr	r1, [pc, #80]	@ (8006124 <HAL_GPIO_Init+0x2d0>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d021      	beq.n	8006128 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80060e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006124 <HAL_GPIO_Init+0x2d0>)
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	490e      	ldr	r1, [pc, #56]	@ (8006124 <HAL_GPIO_Init+0x2d0>)
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60cb      	str	r3, [r1, #12]
 80060f0:	e021      	b.n	8006136 <HAL_GPIO_Init+0x2e2>
 80060f2:	bf00      	nop
 80060f4:	10320000 	.word	0x10320000
 80060f8:	10310000 	.word	0x10310000
 80060fc:	10220000 	.word	0x10220000
 8006100:	10210000 	.word	0x10210000
 8006104:	10120000 	.word	0x10120000
 8006108:	10110000 	.word	0x10110000
 800610c:	40021000 	.word	0x40021000
 8006110:	40010000 	.word	0x40010000
 8006114:	40010800 	.word	0x40010800
 8006118:	40010c00 	.word	0x40010c00
 800611c:	40011000 	.word	0x40011000
 8006120:	40011400 	.word	0x40011400
 8006124:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006128:	4b0b      	ldr	r3, [pc, #44]	@ (8006158 <HAL_GPIO_Init+0x304>)
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	43db      	mvns	r3, r3
 8006130:	4909      	ldr	r1, [pc, #36]	@ (8006158 <HAL_GPIO_Init+0x304>)
 8006132:	4013      	ands	r3, r2
 8006134:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006138:	3301      	adds	r3, #1
 800613a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006142:	fa22 f303 	lsr.w	r3, r2, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	f47f ae8e 	bne.w	8005e68 <HAL_GPIO_Init+0x14>
  }
}
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	372c      	adds	r7, #44	@ 0x2c
 8006152:	46bd      	mov	sp, r7
 8006154:	bc80      	pop	{r7}
 8006156:	4770      	bx	lr
 8006158:	40010400 	.word	0x40010400

0800615c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	807b      	strh	r3, [r7, #2]
 8006168:	4613      	mov	r3, r2
 800616a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800616c:	787b      	ldrb	r3, [r7, #1]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006172:	887a      	ldrh	r2, [r7, #2]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006178:	e003      	b.n	8006182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800617a:	887b      	ldrh	r3, [r7, #2]
 800617c:	041a      	lsls	r2, r3, #16
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	611a      	str	r2, [r3, #16]
}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr

0800618c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e272      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 8087 	beq.w	80062ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061ac:	4b92      	ldr	r3, [pc, #584]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f003 030c 	and.w	r3, r3, #12
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d00c      	beq.n	80061d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061b8:	4b8f      	ldr	r3, [pc, #572]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f003 030c 	and.w	r3, r3, #12
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d112      	bne.n	80061ea <HAL_RCC_OscConfig+0x5e>
 80061c4:	4b8c      	ldr	r3, [pc, #560]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061d0:	d10b      	bne.n	80061ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d2:	4b89      	ldr	r3, [pc, #548]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d06c      	beq.n	80062b8 <HAL_RCC_OscConfig+0x12c>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d168      	bne.n	80062b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e24c      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061f2:	d106      	bne.n	8006202 <HAL_RCC_OscConfig+0x76>
 80061f4:	4b80      	ldr	r3, [pc, #512]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a7f      	ldr	r2, [pc, #508]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80061fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	e02e      	b.n	8006260 <HAL_RCC_OscConfig+0xd4>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10c      	bne.n	8006224 <HAL_RCC_OscConfig+0x98>
 800620a:	4b7b      	ldr	r3, [pc, #492]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a7a      	ldr	r2, [pc, #488]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	4b78      	ldr	r3, [pc, #480]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a77      	ldr	r2, [pc, #476]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 800621c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	e01d      	b.n	8006260 <HAL_RCC_OscConfig+0xd4>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800622c:	d10c      	bne.n	8006248 <HAL_RCC_OscConfig+0xbc>
 800622e:	4b72      	ldr	r3, [pc, #456]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a71      	ldr	r2, [pc, #452]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	4b6f      	ldr	r3, [pc, #444]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a6e      	ldr	r2, [pc, #440]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	e00b      	b.n	8006260 <HAL_RCC_OscConfig+0xd4>
 8006248:	4b6b      	ldr	r3, [pc, #428]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a6a      	ldr	r2, [pc, #424]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 800624e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	4b68      	ldr	r3, [pc, #416]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a67      	ldr	r2, [pc, #412]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 800625a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800625e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d013      	beq.n	8006290 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006268:	f7fe f8b8 	bl	80043dc <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006270:	f7fe f8b4 	bl	80043dc <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b64      	cmp	r3, #100	@ 0x64
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e200      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006282:	4b5d      	ldr	r3, [pc, #372]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0f0      	beq.n	8006270 <HAL_RCC_OscConfig+0xe4>
 800628e:	e014      	b.n	80062ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006290:	f7fe f8a4 	bl	80043dc <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006298:	f7fe f8a0 	bl	80043dc <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b64      	cmp	r3, #100	@ 0x64
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e1ec      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062aa:	4b53      	ldr	r3, [pc, #332]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1f0      	bne.n	8006298 <HAL_RCC_OscConfig+0x10c>
 80062b6:	e000      	b.n	80062ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d063      	beq.n	800638e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062c6:	4b4c      	ldr	r3, [pc, #304]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f003 030c 	and.w	r3, r3, #12
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00b      	beq.n	80062ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80062d2:	4b49      	ldr	r3, [pc, #292]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f003 030c 	and.w	r3, r3, #12
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d11c      	bne.n	8006318 <HAL_RCC_OscConfig+0x18c>
 80062de:	4b46      	ldr	r3, [pc, #280]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d116      	bne.n	8006318 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ea:	4b43      	ldr	r3, [pc, #268]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d005      	beq.n	8006302 <HAL_RCC_OscConfig+0x176>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d001      	beq.n	8006302 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e1c0      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006302:	4b3d      	ldr	r3, [pc, #244]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	4939      	ldr	r1, [pc, #228]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006312:	4313      	orrs	r3, r2
 8006314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006316:	e03a      	b.n	800638e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d020      	beq.n	8006362 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006320:	4b36      	ldr	r3, [pc, #216]	@ (80063fc <HAL_RCC_OscConfig+0x270>)
 8006322:	2201      	movs	r2, #1
 8006324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006326:	f7fe f859 	bl	80043dc <HAL_GetTick>
 800632a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800632c:	e008      	b.n	8006340 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800632e:	f7fe f855 	bl	80043dc <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e1a1      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006340:	4b2d      	ldr	r3, [pc, #180]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0f0      	beq.n	800632e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800634c:	4b2a      	ldr	r3, [pc, #168]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	4927      	ldr	r1, [pc, #156]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 800635c:	4313      	orrs	r3, r2
 800635e:	600b      	str	r3, [r1, #0]
 8006360:	e015      	b.n	800638e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006362:	4b26      	ldr	r3, [pc, #152]	@ (80063fc <HAL_RCC_OscConfig+0x270>)
 8006364:	2200      	movs	r2, #0
 8006366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006368:	f7fe f838 	bl	80043dc <HAL_GetTick>
 800636c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006370:	f7fe f834 	bl	80043dc <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e180      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006382:	4b1d      	ldr	r3, [pc, #116]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1f0      	bne.n	8006370 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0308 	and.w	r3, r3, #8
 8006396:	2b00      	cmp	r3, #0
 8006398:	d03a      	beq.n	8006410 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d019      	beq.n	80063d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063a2:	4b17      	ldr	r3, [pc, #92]	@ (8006400 <HAL_RCC_OscConfig+0x274>)
 80063a4:	2201      	movs	r2, #1
 80063a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063a8:	f7fe f818 	bl	80043dc <HAL_GetTick>
 80063ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063b0:	f7fe f814 	bl	80043dc <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e160      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063c2:	4b0d      	ldr	r3, [pc, #52]	@ (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80063c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0f0      	beq.n	80063b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80063ce:	2001      	movs	r0, #1
 80063d0:	f000 fad8 	bl	8006984 <RCC_Delay>
 80063d4:	e01c      	b.n	8006410 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006400 <HAL_RCC_OscConfig+0x274>)
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063dc:	f7fd fffe 	bl	80043dc <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063e2:	e00f      	b.n	8006404 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063e4:	f7fd fffa 	bl	80043dc <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d908      	bls.n	8006404 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e146      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
 80063f6:	bf00      	nop
 80063f8:	40021000 	.word	0x40021000
 80063fc:	42420000 	.word	0x42420000
 8006400:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006404:	4b92      	ldr	r3, [pc, #584]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e9      	bne.n	80063e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 80a6 	beq.w	800656a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800641e:	2300      	movs	r3, #0
 8006420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006422:	4b8b      	ldr	r3, [pc, #556]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10d      	bne.n	800644a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800642e:	4b88      	ldr	r3, [pc, #544]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	4a87      	ldr	r2, [pc, #540]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006438:	61d3      	str	r3, [r2, #28]
 800643a:	4b85      	ldr	r3, [pc, #532]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006442:	60bb      	str	r3, [r7, #8]
 8006444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006446:	2301      	movs	r3, #1
 8006448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800644a:	4b82      	ldr	r3, [pc, #520]	@ (8006654 <HAL_RCC_OscConfig+0x4c8>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006452:	2b00      	cmp	r3, #0
 8006454:	d118      	bne.n	8006488 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006456:	4b7f      	ldr	r3, [pc, #508]	@ (8006654 <HAL_RCC_OscConfig+0x4c8>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a7e      	ldr	r2, [pc, #504]	@ (8006654 <HAL_RCC_OscConfig+0x4c8>)
 800645c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006462:	f7fd ffbb 	bl	80043dc <HAL_GetTick>
 8006466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006468:	e008      	b.n	800647c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800646a:	f7fd ffb7 	bl	80043dc <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b64      	cmp	r3, #100	@ 0x64
 8006476:	d901      	bls.n	800647c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e103      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800647c:	4b75      	ldr	r3, [pc, #468]	@ (8006654 <HAL_RCC_OscConfig+0x4c8>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0f0      	beq.n	800646a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d106      	bne.n	800649e <HAL_RCC_OscConfig+0x312>
 8006490:	4b6f      	ldr	r3, [pc, #444]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006492:	6a1b      	ldr	r3, [r3, #32]
 8006494:	4a6e      	ldr	r2, [pc, #440]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006496:	f043 0301 	orr.w	r3, r3, #1
 800649a:	6213      	str	r3, [r2, #32]
 800649c:	e02d      	b.n	80064fa <HAL_RCC_OscConfig+0x36e>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10c      	bne.n	80064c0 <HAL_RCC_OscConfig+0x334>
 80064a6:	4b6a      	ldr	r3, [pc, #424]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	4a69      	ldr	r2, [pc, #420]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	6213      	str	r3, [r2, #32]
 80064b2:	4b67      	ldr	r3, [pc, #412]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	4a66      	ldr	r2, [pc, #408]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064b8:	f023 0304 	bic.w	r3, r3, #4
 80064bc:	6213      	str	r3, [r2, #32]
 80064be:	e01c      	b.n	80064fa <HAL_RCC_OscConfig+0x36e>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	2b05      	cmp	r3, #5
 80064c6:	d10c      	bne.n	80064e2 <HAL_RCC_OscConfig+0x356>
 80064c8:	4b61      	ldr	r3, [pc, #388]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	4a60      	ldr	r2, [pc, #384]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064ce:	f043 0304 	orr.w	r3, r3, #4
 80064d2:	6213      	str	r3, [r2, #32]
 80064d4:	4b5e      	ldr	r3, [pc, #376]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	4a5d      	ldr	r2, [pc, #372]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064da:	f043 0301 	orr.w	r3, r3, #1
 80064de:	6213      	str	r3, [r2, #32]
 80064e0:	e00b      	b.n	80064fa <HAL_RCC_OscConfig+0x36e>
 80064e2:	4b5b      	ldr	r3, [pc, #364]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	4a5a      	ldr	r2, [pc, #360]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064e8:	f023 0301 	bic.w	r3, r3, #1
 80064ec:	6213      	str	r3, [r2, #32]
 80064ee:	4b58      	ldr	r3, [pc, #352]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	4a57      	ldr	r2, [pc, #348]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064f4:	f023 0304 	bic.w	r3, r3, #4
 80064f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d015      	beq.n	800652e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006502:	f7fd ff6b 	bl	80043dc <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006508:	e00a      	b.n	8006520 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800650a:	f7fd ff67 	bl	80043dc <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006518:	4293      	cmp	r3, r2
 800651a:	d901      	bls.n	8006520 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e0b1      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006520:	4b4b      	ldr	r3, [pc, #300]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0ee      	beq.n	800650a <HAL_RCC_OscConfig+0x37e>
 800652c:	e014      	b.n	8006558 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800652e:	f7fd ff55 	bl	80043dc <HAL_GetTick>
 8006532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006534:	e00a      	b.n	800654c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006536:	f7fd ff51 	bl	80043dc <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006544:	4293      	cmp	r3, r2
 8006546:	d901      	bls.n	800654c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e09b      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800654c:	4b40      	ldr	r3, [pc, #256]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1ee      	bne.n	8006536 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006558:	7dfb      	ldrb	r3, [r7, #23]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d105      	bne.n	800656a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800655e:	4b3c      	ldr	r3, [pc, #240]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	4a3b      	ldr	r2, [pc, #236]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006564:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006568:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8087 	beq.w	8006682 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006574:	4b36      	ldr	r3, [pc, #216]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f003 030c 	and.w	r3, r3, #12
 800657c:	2b08      	cmp	r3, #8
 800657e:	d061      	beq.n	8006644 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	2b02      	cmp	r3, #2
 8006586:	d146      	bne.n	8006616 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006588:	4b33      	ldr	r3, [pc, #204]	@ (8006658 <HAL_RCC_OscConfig+0x4cc>)
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800658e:	f7fd ff25 	bl	80043dc <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006594:	e008      	b.n	80065a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006596:	f7fd ff21 	bl	80043dc <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d901      	bls.n	80065a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e06d      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065a8:	4b29      	ldr	r3, [pc, #164]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f0      	bne.n	8006596 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065bc:	d108      	bne.n	80065d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80065be:	4b24      	ldr	r3, [pc, #144]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	4921      	ldr	r1, [pc, #132]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065d0:	4b1f      	ldr	r3, [pc, #124]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a19      	ldr	r1, [r3, #32]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e0:	430b      	orrs	r3, r1
 80065e2:	491b      	ldr	r1, [pc, #108]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006658 <HAL_RCC_OscConfig+0x4cc>)
 80065ea:	2201      	movs	r2, #1
 80065ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ee:	f7fd fef5 	bl	80043dc <HAL_GetTick>
 80065f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065f4:	e008      	b.n	8006608 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065f6:	f7fd fef1 	bl	80043dc <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e03d      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006608:	4b11      	ldr	r3, [pc, #68]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0f0      	beq.n	80065f6 <HAL_RCC_OscConfig+0x46a>
 8006614:	e035      	b.n	8006682 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006616:	4b10      	ldr	r3, [pc, #64]	@ (8006658 <HAL_RCC_OscConfig+0x4cc>)
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800661c:	f7fd fede 	bl	80043dc <HAL_GetTick>
 8006620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006624:	f7fd feda 	bl	80043dc <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e026      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006636:	4b06      	ldr	r3, [pc, #24]	@ (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1f0      	bne.n	8006624 <HAL_RCC_OscConfig+0x498>
 8006642:	e01e      	b.n	8006682 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d107      	bne.n	800665c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e019      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
 8006650:	40021000 	.word	0x40021000
 8006654:	40007000 	.word	0x40007000
 8006658:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800665c:	4b0b      	ldr	r3, [pc, #44]	@ (800668c <HAL_RCC_OscConfig+0x500>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	429a      	cmp	r2, r3
 800666e:	d106      	bne.n	800667e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800667a:	429a      	cmp	r2, r3
 800667c:	d001      	beq.n	8006682 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40021000 	.word	0x40021000

08006690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e0d0      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066a4:	4b6a      	ldr	r3, [pc, #424]	@ (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d910      	bls.n	80066d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b2:	4b67      	ldr	r3, [pc, #412]	@ (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f023 0207 	bic.w	r2, r3, #7
 80066ba:	4965      	ldr	r1, [pc, #404]	@ (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	4313      	orrs	r3, r2
 80066c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c2:	4b63      	ldr	r3, [pc, #396]	@ (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d001      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e0b8      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d020      	beq.n	8006722 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066ec:	4b59      	ldr	r3, [pc, #356]	@ (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	4a58      	ldr	r2, [pc, #352]	@ (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 80066f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80066f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0308 	and.w	r3, r3, #8
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006704:	4b53      	ldr	r3, [pc, #332]	@ (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	4a52      	ldr	r2, [pc, #328]	@ (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 800670a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800670e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006710:	4b50      	ldr	r3, [pc, #320]	@ (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	494d      	ldr	r1, [pc, #308]	@ (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 800671e:	4313      	orrs	r3, r2
 8006720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d040      	beq.n	80067b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d107      	bne.n	8006746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006736:	4b47      	ldr	r3, [pc, #284]	@ (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d115      	bne.n	800676e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e07f      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d107      	bne.n	800675e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800674e:	4b41      	ldr	r3, [pc, #260]	@ (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d109      	bne.n	800676e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e073      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800675e:	4b3d      	ldr	r3, [pc, #244]	@ (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e06b      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800676e:	4b39      	ldr	r3, [pc, #228]	@ (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f023 0203 	bic.w	r2, r3, #3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	4936      	ldr	r1, [pc, #216]	@ (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 800677c:	4313      	orrs	r3, r2
 800677e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006780:	f7fd fe2c 	bl	80043dc <HAL_GetTick>
 8006784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006786:	e00a      	b.n	800679e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006788:	f7fd fe28 	bl	80043dc <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006796:	4293      	cmp	r3, r2
 8006798:	d901      	bls.n	800679e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e053      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800679e:	4b2d      	ldr	r3, [pc, #180]	@ (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f003 020c 	and.w	r2, r3, #12
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d1eb      	bne.n	8006788 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067b0:	4b27      	ldr	r3, [pc, #156]	@ (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d210      	bcs.n	80067e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067be:	4b24      	ldr	r3, [pc, #144]	@ (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f023 0207 	bic.w	r2, r3, #7
 80067c6:	4922      	ldr	r1, [pc, #136]	@ (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ce:	4b20      	ldr	r3, [pc, #128]	@ (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0307 	and.w	r3, r3, #7
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d001      	beq.n	80067e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e032      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d008      	beq.n	80067fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067ec:	4b19      	ldr	r3, [pc, #100]	@ (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	4916      	ldr	r1, [pc, #88]	@ (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0308 	and.w	r3, r3, #8
 8006806:	2b00      	cmp	r3, #0
 8006808:	d009      	beq.n	800681e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800680a:	4b12      	ldr	r3, [pc, #72]	@ (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	490e      	ldr	r1, [pc, #56]	@ (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 800681a:	4313      	orrs	r3, r2
 800681c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800681e:	f000 f821 	bl	8006864 <HAL_RCC_GetSysClockFreq>
 8006822:	4602      	mov	r2, r0
 8006824:	4b0b      	ldr	r3, [pc, #44]	@ (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	091b      	lsrs	r3, r3, #4
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	490a      	ldr	r1, [pc, #40]	@ (8006858 <HAL_RCC_ClockConfig+0x1c8>)
 8006830:	5ccb      	ldrb	r3, [r1, r3]
 8006832:	fa22 f303 	lsr.w	r3, r2, r3
 8006836:	4a09      	ldr	r2, [pc, #36]	@ (800685c <HAL_RCC_ClockConfig+0x1cc>)
 8006838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800683a:	4b09      	ldr	r3, [pc, #36]	@ (8006860 <HAL_RCC_ClockConfig+0x1d0>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f7fd fd8a 	bl	8004358 <HAL_InitTick>

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40022000 	.word	0x40022000
 8006854:	40021000 	.word	0x40021000
 8006858:	0800e178 	.word	0x0800e178
 800685c:	20000020 	.word	0x20000020
 8006860:	20000024 	.word	0x20000024

08006864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006864:	b490      	push	{r4, r7}
 8006866:	b08a      	sub	sp, #40	@ 0x28
 8006868:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800686a:	4b29      	ldr	r3, [pc, #164]	@ (8006910 <HAL_RCC_GetSysClockFreq+0xac>)
 800686c:	1d3c      	adds	r4, r7, #4
 800686e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006870:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006874:	f240 2301 	movw	r3, #513	@ 0x201
 8006878:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	61fb      	str	r3, [r7, #28]
 800687e:	2300      	movs	r3, #0
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	2300      	movs	r3, #0
 8006884:	627b      	str	r3, [r7, #36]	@ 0x24
 8006886:	2300      	movs	r3, #0
 8006888:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800688e:	4b21      	ldr	r3, [pc, #132]	@ (8006914 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	f003 030c 	and.w	r3, r3, #12
 800689a:	2b04      	cmp	r3, #4
 800689c:	d002      	beq.n	80068a4 <HAL_RCC_GetSysClockFreq+0x40>
 800689e:	2b08      	cmp	r3, #8
 80068a0:	d003      	beq.n	80068aa <HAL_RCC_GetSysClockFreq+0x46>
 80068a2:	e02b      	b.n	80068fc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006918 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068a6:	623b      	str	r3, [r7, #32]
      break;
 80068a8:	e02b      	b.n	8006902 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	0c9b      	lsrs	r3, r3, #18
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	3328      	adds	r3, #40	@ 0x28
 80068b4:	443b      	add	r3, r7
 80068b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80068ba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d012      	beq.n	80068ec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80068c6:	4b13      	ldr	r3, [pc, #76]	@ (8006914 <HAL_RCC_GetSysClockFreq+0xb0>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	0c5b      	lsrs	r3, r3, #17
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	3328      	adds	r3, #40	@ 0x28
 80068d2:	443b      	add	r3, r7
 80068d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80068d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	4a0e      	ldr	r2, [pc, #56]	@ (8006918 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068de:	fb03 f202 	mul.w	r2, r3, r2
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ea:	e004      	b.n	80068f6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	4a0b      	ldr	r2, [pc, #44]	@ (800691c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068f0:	fb02 f303 	mul.w	r3, r2, r3
 80068f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	623b      	str	r3, [r7, #32]
      break;
 80068fa:	e002      	b.n	8006902 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068fc:	4b06      	ldr	r3, [pc, #24]	@ (8006918 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068fe:	623b      	str	r3, [r7, #32]
      break;
 8006900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006902:	6a3b      	ldr	r3, [r7, #32]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3728      	adds	r7, #40	@ 0x28
 8006908:	46bd      	mov	sp, r7
 800690a:	bc90      	pop	{r4, r7}
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	0800de48 	.word	0x0800de48
 8006914:	40021000 	.word	0x40021000
 8006918:	007a1200 	.word	0x007a1200
 800691c:	003d0900 	.word	0x003d0900

08006920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006924:	4b02      	ldr	r3, [pc, #8]	@ (8006930 <HAL_RCC_GetHCLKFreq+0x10>)
 8006926:	681b      	ldr	r3, [r3, #0]
}
 8006928:	4618      	mov	r0, r3
 800692a:	46bd      	mov	sp, r7
 800692c:	bc80      	pop	{r7}
 800692e:	4770      	bx	lr
 8006930:	20000020 	.word	0x20000020

08006934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006938:	f7ff fff2 	bl	8006920 <HAL_RCC_GetHCLKFreq>
 800693c:	4602      	mov	r2, r0
 800693e:	4b05      	ldr	r3, [pc, #20]	@ (8006954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	4903      	ldr	r1, [pc, #12]	@ (8006958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800694a:	5ccb      	ldrb	r3, [r1, r3]
 800694c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006950:	4618      	mov	r0, r3
 8006952:	bd80      	pop	{r7, pc}
 8006954:	40021000 	.word	0x40021000
 8006958:	0800e188 	.word	0x0800e188

0800695c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006960:	f7ff ffde 	bl	8006920 <HAL_RCC_GetHCLKFreq>
 8006964:	4602      	mov	r2, r0
 8006966:	4b05      	ldr	r3, [pc, #20]	@ (800697c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	0adb      	lsrs	r3, r3, #11
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	4903      	ldr	r1, [pc, #12]	@ (8006980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006972:	5ccb      	ldrb	r3, [r1, r3]
 8006974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006978:	4618      	mov	r0, r3
 800697a:	bd80      	pop	{r7, pc}
 800697c:	40021000 	.word	0x40021000
 8006980:	0800e188 	.word	0x0800e188

08006984 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800698c:	4b0a      	ldr	r3, [pc, #40]	@ (80069b8 <RCC_Delay+0x34>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a0a      	ldr	r2, [pc, #40]	@ (80069bc <RCC_Delay+0x38>)
 8006992:	fba2 2303 	umull	r2, r3, r2, r3
 8006996:	0a5b      	lsrs	r3, r3, #9
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	fb02 f303 	mul.w	r3, r2, r3
 800699e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80069a0:	bf00      	nop
  }
  while (Delay --);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	1e5a      	subs	r2, r3, #1
 80069a6:	60fa      	str	r2, [r7, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1f9      	bne.n	80069a0 <RCC_Delay+0x1c>
}
 80069ac:	bf00      	nop
 80069ae:	bf00      	nop
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr
 80069b8:	20000020 	.word	0x20000020
 80069bc:	10624dd3 	.word	0x10624dd3

080069c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	613b      	str	r3, [r7, #16]
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d07d      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80069dc:	2300      	movs	r3, #0
 80069de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069e0:	4b4f      	ldr	r3, [pc, #316]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10d      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069ec:	4b4c      	ldr	r3, [pc, #304]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	4a4b      	ldr	r2, [pc, #300]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069f6:	61d3      	str	r3, [r2, #28]
 80069f8:	4b49      	ldr	r3, [pc, #292]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a00:	60bb      	str	r3, [r7, #8]
 8006a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a04:	2301      	movs	r3, #1
 8006a06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a08:	4b46      	ldr	r3, [pc, #280]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d118      	bne.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a14:	4b43      	ldr	r3, [pc, #268]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a42      	ldr	r2, [pc, #264]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a20:	f7fd fcdc 	bl	80043dc <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a26:	e008      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a28:	f7fd fcd8 	bl	80043dc <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b64      	cmp	r3, #100	@ 0x64
 8006a34:	d901      	bls.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e06d      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0f0      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a46:	4b36      	ldr	r3, [pc, #216]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d02e      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d027      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a64:	4b2e      	ldr	r3, [pc, #184]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a70:	2201      	movs	r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a74:	4b2c      	ldr	r3, [pc, #176]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a7a:	4a29      	ldr	r2, [pc, #164]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d014      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a8a:	f7fd fca7 	bl	80043dc <HAL_GetTick>
 8006a8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a90:	e00a      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a92:	f7fd fca3 	bl	80043dc <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e036      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0ee      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	4917      	ldr	r1, [pc, #92]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006ac6:	7dfb      	ldrb	r3, [r7, #23]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d105      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006acc:	4b14      	ldr	r3, [pc, #80]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	4a13      	ldr	r2, [pc, #76]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ad2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ad6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d008      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	490b      	ldr	r1, [pc, #44]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0310 	and.w	r3, r3, #16
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d008      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b02:	4b07      	ldr	r3, [pc, #28]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	4904      	ldr	r1, [pc, #16]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	40021000 	.word	0x40021000
 8006b24:	40007000 	.word	0x40007000
 8006b28:	42420440 	.word	0x42420440

08006b2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e076      	b.n	8006c2c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d108      	bne.n	8006b58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b4e:	d009      	beq.n	8006b64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	61da      	str	r2, [r3, #28]
 8006b56:	e005      	b.n	8006b64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fd f99c 	bl	8003ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006be8:	ea42 0103 	orr.w	r1, r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	0c1a      	lsrs	r2, r3, #16
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f002 0204 	and.w	r2, r2, #4
 8006c0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	69da      	ldr	r2, [r3, #28]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08c      	sub	sp, #48	@ 0x30
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c42:	2301      	movs	r3, #1
 8006c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_SPI_TransmitReceive+0x26>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e18a      	b.n	8006f70 <HAL_SPI_TransmitReceive+0x33c>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c62:	f7fd fbbb 	bl	80043dc <HAL_GetTick>
 8006c66:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006c78:	887b      	ldrh	r3, [r7, #2]
 8006c7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d00f      	beq.n	8006ca4 <HAL_SPI_TransmitReceive+0x70>
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c8a:	d107      	bne.n	8006c9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d103      	bne.n	8006c9c <HAL_SPI_TransmitReceive+0x68>
 8006c94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d003      	beq.n	8006ca4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006ca2:	e15b      	b.n	8006f5c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <HAL_SPI_TransmitReceive+0x82>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <HAL_SPI_TransmitReceive+0x82>
 8006cb0:	887b      	ldrh	r3, [r7, #2]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d103      	bne.n	8006cbe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006cbc:	e14e      	b.n	8006f5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d003      	beq.n	8006cd2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2205      	movs	r2, #5
 8006cce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	887a      	ldrh	r2, [r7, #2]
 8006ce2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	887a      	ldrh	r2, [r7, #2]
 8006ce8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	887a      	ldrh	r2, [r7, #2]
 8006cf4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	887a      	ldrh	r2, [r7, #2]
 8006cfa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d12:	2b40      	cmp	r3, #64	@ 0x40
 8006d14:	d007      	beq.n	8006d26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d2e:	d178      	bne.n	8006e22 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <HAL_SPI_TransmitReceive+0x10a>
 8006d38:	8b7b      	ldrh	r3, [r7, #26]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d166      	bne.n	8006e0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d42:	881a      	ldrh	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4e:	1c9a      	adds	r2, r3, #2
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d62:	e053      	b.n	8006e0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d11b      	bne.n	8006daa <HAL_SPI_TransmitReceive+0x176>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d016      	beq.n	8006daa <HAL_SPI_TransmitReceive+0x176>
 8006d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d113      	bne.n	8006daa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d86:	881a      	ldrh	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d92:	1c9a      	adds	r2, r3, #2
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d119      	bne.n	8006dec <HAL_SPI_TransmitReceive+0x1b8>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d014      	beq.n	8006dec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dcc:	b292      	uxth	r2, r2
 8006dce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd4:	1c9a      	adds	r2, r3, #2
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006de8:	2301      	movs	r3, #1
 8006dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006dec:	f7fd faf6 	bl	80043dc <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d807      	bhi.n	8006e0c <HAL_SPI_TransmitReceive+0x1d8>
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e02:	d003      	beq.n	8006e0c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006e0a:	e0a7      	b.n	8006f5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1a6      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x130>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1a1      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x130>
 8006e20:	e07c      	b.n	8006f1c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <HAL_SPI_TransmitReceive+0x1fc>
 8006e2a:	8b7b      	ldrh	r3, [r7, #26]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d16b      	bne.n	8006f08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	7812      	ldrb	r2, [r2, #0]
 8006e3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e56:	e057      	b.n	8006f08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d11c      	bne.n	8006ea0 <HAL_SPI_TransmitReceive+0x26c>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d017      	beq.n	8006ea0 <HAL_SPI_TransmitReceive+0x26c>
 8006e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d114      	bne.n	8006ea0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	330c      	adds	r3, #12
 8006e80:	7812      	ldrb	r2, [r2, #0]
 8006e82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	3b01      	subs	r3, #1
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d119      	bne.n	8006ee2 <HAL_SPI_TransmitReceive+0x2ae>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d014      	beq.n	8006ee2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68da      	ldr	r2, [r3, #12]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec2:	b2d2      	uxtb	r2, r2
 8006ec4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ee2:	f7fd fa7b 	bl	80043dc <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d803      	bhi.n	8006efa <HAL_SPI_TransmitReceive+0x2c6>
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef8:	d102      	bne.n	8006f00 <HAL_SPI_TransmitReceive+0x2cc>
 8006efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d103      	bne.n	8006f08 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006f06:	e029      	b.n	8006f5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1a2      	bne.n	8006e58 <HAL_SPI_TransmitReceive+0x224>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d19d      	bne.n	8006e58 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f8b1 	bl	8007088 <SPI_EndRxTxTransaction>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d006      	beq.n	8006f3a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2220      	movs	r2, #32
 8006f36:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006f38:	e010      	b.n	8006f5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10b      	bne.n	8006f5a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f42:	2300      	movs	r3, #0
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	617b      	str	r3, [r7, #20]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	e000      	b.n	8006f5c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006f5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006f6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3730      	adds	r7, #48	@ 0x30
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	4613      	mov	r3, r2
 8006f86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f88:	f7fd fa28 	bl	80043dc <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f90:	1a9b      	subs	r3, r3, r2
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	4413      	add	r3, r2
 8006f96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f98:	f7fd fa20 	bl	80043dc <HAL_GetTick>
 8006f9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f9e:	4b39      	ldr	r3, [pc, #228]	@ (8007084 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	015b      	lsls	r3, r3, #5
 8006fa4:	0d1b      	lsrs	r3, r3, #20
 8006fa6:	69fa      	ldr	r2, [r7, #28]
 8006fa8:	fb02 f303 	mul.w	r3, r2, r3
 8006fac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fae:	e054      	b.n	800705a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb6:	d050      	beq.n	800705a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fb8:	f7fd fa10 	bl	80043dc <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d902      	bls.n	8006fce <SPI_WaitFlagStateUntilTimeout+0x56>
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d13d      	bne.n	800704a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006fdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fe6:	d111      	bne.n	800700c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ff0:	d004      	beq.n	8006ffc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ffa:	d107      	bne.n	800700c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800700a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007014:	d10f      	bne.n	8007036 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007034:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e017      	b.n	800707a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	3b01      	subs	r3, #1
 8007058:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	4013      	ands	r3, r2
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	429a      	cmp	r2, r3
 8007068:	bf0c      	ite	eq
 800706a:	2301      	moveq	r3, #1
 800706c:	2300      	movne	r3, #0
 800706e:	b2db      	uxtb	r3, r3
 8007070:	461a      	mov	r2, r3
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	429a      	cmp	r2, r3
 8007076:	d19b      	bne.n	8006fb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3720      	adds	r7, #32
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000020 	.word	0x20000020

08007088 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af02      	add	r7, sp, #8
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2200      	movs	r2, #0
 800709c:	2180      	movs	r1, #128	@ 0x80
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7ff ff6a 	bl	8006f78 <SPI_WaitFlagStateUntilTimeout>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d007      	beq.n	80070ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ae:	f043 0220 	orr.w	r2, r3, #32
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e000      	b.n	80070bc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e041      	b.n	800715a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d106      	bne.n	80070f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fc ff30 	bl	8003f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3304      	adds	r3, #4
 8007100:	4619      	mov	r1, r3
 8007102:	4610      	mov	r0, r2
 8007104:	f000 fc28 	bl	8007958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
	...

08007164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b01      	cmp	r3, #1
 8007176:	d001      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e03a      	b.n	80071f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0201 	orr.w	r2, r2, #1
 8007192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a18      	ldr	r2, [pc, #96]	@ (80071fc <HAL_TIM_Base_Start_IT+0x98>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d00e      	beq.n	80071bc <HAL_TIM_Base_Start_IT+0x58>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071a6:	d009      	beq.n	80071bc <HAL_TIM_Base_Start_IT+0x58>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a14      	ldr	r2, [pc, #80]	@ (8007200 <HAL_TIM_Base_Start_IT+0x9c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d004      	beq.n	80071bc <HAL_TIM_Base_Start_IT+0x58>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a13      	ldr	r2, [pc, #76]	@ (8007204 <HAL_TIM_Base_Start_IT+0xa0>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d111      	bne.n	80071e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f003 0307 	and.w	r3, r3, #7
 80071c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b06      	cmp	r3, #6
 80071cc:	d010      	beq.n	80071f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0201 	orr.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071de:	e007      	b.n	80071f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0201 	orr.w	r2, r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bc80      	pop	{r7}
 80071fa:	4770      	bx	lr
 80071fc:	40012c00 	.word	0x40012c00
 8007200:	40000400 	.word	0x40000400
 8007204:	40000800 	.word	0x40000800

08007208 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e041      	b.n	800729e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d106      	bne.n	8007234 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f839 	bl	80072a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3304      	adds	r3, #4
 8007244:	4619      	mov	r1, r3
 8007246:	4610      	mov	r0, r2
 8007248:	f000 fb86 	bl	8007958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80072ae:	bf00      	nop
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bc80      	pop	{r7}
 80072b6:	4770      	bx	lr

080072b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d109      	bne.n	80072dc <HAL_TIM_PWM_Start+0x24>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	bf14      	ite	ne
 80072d4:	2301      	movne	r3, #1
 80072d6:	2300      	moveq	r3, #0
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	e022      	b.n	8007322 <HAL_TIM_PWM_Start+0x6a>
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d109      	bne.n	80072f6 <HAL_TIM_PWM_Start+0x3e>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	bf14      	ite	ne
 80072ee:	2301      	movne	r3, #1
 80072f0:	2300      	moveq	r3, #0
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	e015      	b.n	8007322 <HAL_TIM_PWM_Start+0x6a>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b08      	cmp	r3, #8
 80072fa:	d109      	bne.n	8007310 <HAL_TIM_PWM_Start+0x58>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b01      	cmp	r3, #1
 8007306:	bf14      	ite	ne
 8007308:	2301      	movne	r3, #1
 800730a:	2300      	moveq	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	e008      	b.n	8007322 <HAL_TIM_PWM_Start+0x6a>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b01      	cmp	r3, #1
 800731a:	bf14      	ite	ne
 800731c:	2301      	movne	r3, #1
 800731e:	2300      	moveq	r3, #0
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e05e      	b.n	80073e8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d104      	bne.n	800733a <HAL_TIM_PWM_Start+0x82>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007338:	e013      	b.n	8007362 <HAL_TIM_PWM_Start+0xaa>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b04      	cmp	r3, #4
 800733e:	d104      	bne.n	800734a <HAL_TIM_PWM_Start+0x92>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007348:	e00b      	b.n	8007362 <HAL_TIM_PWM_Start+0xaa>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2b08      	cmp	r3, #8
 800734e:	d104      	bne.n	800735a <HAL_TIM_PWM_Start+0xa2>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007358:	e003      	b.n	8007362 <HAL_TIM_PWM_Start+0xaa>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2202      	movs	r2, #2
 800735e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2201      	movs	r2, #1
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fd74 	bl	8007e58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a1e      	ldr	r2, [pc, #120]	@ (80073f0 <HAL_TIM_PWM_Start+0x138>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d107      	bne.n	800738a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007388:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a18      	ldr	r2, [pc, #96]	@ (80073f0 <HAL_TIM_PWM_Start+0x138>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d00e      	beq.n	80073b2 <HAL_TIM_PWM_Start+0xfa>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800739c:	d009      	beq.n	80073b2 <HAL_TIM_PWM_Start+0xfa>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a14      	ldr	r2, [pc, #80]	@ (80073f4 <HAL_TIM_PWM_Start+0x13c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d004      	beq.n	80073b2 <HAL_TIM_PWM_Start+0xfa>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a12      	ldr	r2, [pc, #72]	@ (80073f8 <HAL_TIM_PWM_Start+0x140>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d111      	bne.n	80073d6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b06      	cmp	r3, #6
 80073c2:	d010      	beq.n	80073e6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0201 	orr.w	r2, r2, #1
 80073d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d4:	e007      	b.n	80073e6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f042 0201 	orr.w	r2, r2, #1
 80073e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	40012c00 	.word	0x40012c00
 80073f4:	40000400 	.word	0x40000400
 80073f8:	40000800 	.word	0x40000800

080073fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b02      	cmp	r3, #2
 8007410:	d122      	bne.n	8007458 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b02      	cmp	r3, #2
 800741e:	d11b      	bne.n	8007458 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f06f 0202 	mvn.w	r2, #2
 8007428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fa6f 	bl	8007922 <HAL_TIM_IC_CaptureCallback>
 8007444:	e005      	b.n	8007452 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fa62 	bl	8007910 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fa71 	bl	8007934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	f003 0304 	and.w	r3, r3, #4
 8007462:	2b04      	cmp	r3, #4
 8007464:	d122      	bne.n	80074ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f003 0304 	and.w	r3, r3, #4
 8007470:	2b04      	cmp	r3, #4
 8007472:	d11b      	bne.n	80074ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f06f 0204 	mvn.w	r2, #4
 800747c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2202      	movs	r2, #2
 8007482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fa45 	bl	8007922 <HAL_TIM_IC_CaptureCallback>
 8007498:	e005      	b.n	80074a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fa38 	bl	8007910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fa47 	bl	8007934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	f003 0308 	and.w	r3, r3, #8
 80074b6:	2b08      	cmp	r3, #8
 80074b8:	d122      	bne.n	8007500 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f003 0308 	and.w	r3, r3, #8
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d11b      	bne.n	8007500 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f06f 0208 	mvn.w	r2, #8
 80074d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2204      	movs	r2, #4
 80074d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	f003 0303 	and.w	r3, r3, #3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fa1b 	bl	8007922 <HAL_TIM_IC_CaptureCallback>
 80074ec:	e005      	b.n	80074fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fa0e 	bl	8007910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fa1d 	bl	8007934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	f003 0310 	and.w	r3, r3, #16
 800750a:	2b10      	cmp	r3, #16
 800750c:	d122      	bne.n	8007554 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f003 0310 	and.w	r3, r3, #16
 8007518:	2b10      	cmp	r3, #16
 800751a:	d11b      	bne.n	8007554 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f06f 0210 	mvn.w	r2, #16
 8007524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2208      	movs	r2, #8
 800752a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f9f1 	bl	8007922 <HAL_TIM_IC_CaptureCallback>
 8007540:	e005      	b.n	800754e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f9e4 	bl	8007910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f9f3 	bl	8007934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b01      	cmp	r3, #1
 8007560:	d10e      	bne.n	8007580 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b01      	cmp	r3, #1
 800756e:	d107      	bne.n	8007580 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f06f 0201 	mvn.w	r2, #1
 8007578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7fa fb6e 	bl	8001c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800758a:	2b80      	cmp	r3, #128	@ 0x80
 800758c:	d10e      	bne.n	80075ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007598:	2b80      	cmp	r3, #128	@ 0x80
 800759a:	d107      	bne.n	80075ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80075a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fce1 	bl	8007f6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b6:	2b40      	cmp	r3, #64	@ 0x40
 80075b8:	d10e      	bne.n	80075d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c4:	2b40      	cmp	r3, #64	@ 0x40
 80075c6:	d107      	bne.n	80075d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80075d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f9b7 	bl	8007946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	f003 0320 	and.w	r3, r3, #32
 80075e2:	2b20      	cmp	r3, #32
 80075e4:	d10e      	bne.n	8007604 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f003 0320 	and.w	r3, r3, #32
 80075f0:	2b20      	cmp	r3, #32
 80075f2:	d107      	bne.n	8007604 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f06f 0220 	mvn.w	r2, #32
 80075fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fcac 	bl	8007f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800761e:	2b01      	cmp	r3, #1
 8007620:	d101      	bne.n	8007626 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007622:	2302      	movs	r3, #2
 8007624:	e0ac      	b.n	8007780 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b0c      	cmp	r3, #12
 8007632:	f200 809f 	bhi.w	8007774 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007636:	a201      	add	r2, pc, #4	@ (adr r2, 800763c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	08007671 	.word	0x08007671
 8007640:	08007775 	.word	0x08007775
 8007644:	08007775 	.word	0x08007775
 8007648:	08007775 	.word	0x08007775
 800764c:	080076b1 	.word	0x080076b1
 8007650:	08007775 	.word	0x08007775
 8007654:	08007775 	.word	0x08007775
 8007658:	08007775 	.word	0x08007775
 800765c:	080076f3 	.word	0x080076f3
 8007660:	08007775 	.word	0x08007775
 8007664:	08007775 	.word	0x08007775
 8007668:	08007775 	.word	0x08007775
 800766c:	08007733 	.word	0x08007733
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68b9      	ldr	r1, [r7, #8]
 8007676:	4618      	mov	r0, r3
 8007678:	f000 f9d0 	bl	8007a1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	699a      	ldr	r2, [r3, #24]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f042 0208 	orr.w	r2, r2, #8
 800768a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699a      	ldr	r2, [r3, #24]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0204 	bic.w	r2, r2, #4
 800769a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6999      	ldr	r1, [r3, #24]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	691a      	ldr	r2, [r3, #16]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	619a      	str	r2, [r3, #24]
      break;
 80076ae:	e062      	b.n	8007776 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68b9      	ldr	r1, [r7, #8]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fa16 	bl	8007ae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	699a      	ldr	r2, [r3, #24]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	699a      	ldr	r2, [r3, #24]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6999      	ldr	r1, [r3, #24]
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	021a      	lsls	r2, r3, #8
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	619a      	str	r2, [r3, #24]
      break;
 80076f0:	e041      	b.n	8007776 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68b9      	ldr	r1, [r7, #8]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 fa5f 	bl	8007bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69da      	ldr	r2, [r3, #28]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f042 0208 	orr.w	r2, r2, #8
 800770c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	69da      	ldr	r2, [r3, #28]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f022 0204 	bic.w	r2, r2, #4
 800771c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	69d9      	ldr	r1, [r3, #28]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	691a      	ldr	r2, [r3, #16]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	61da      	str	r2, [r3, #28]
      break;
 8007730:	e021      	b.n	8007776 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68b9      	ldr	r1, [r7, #8]
 8007738:	4618      	mov	r0, r3
 800773a:	f000 faa9 	bl	8007c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	69da      	ldr	r2, [r3, #28]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800774c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	69da      	ldr	r2, [r3, #28]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800775c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69d9      	ldr	r1, [r3, #28]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	021a      	lsls	r2, r3, #8
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	61da      	str	r2, [r3, #28]
      break;
 8007772:	e000      	b.n	8007776 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007774:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007798:	2b01      	cmp	r3, #1
 800779a:	d101      	bne.n	80077a0 <HAL_TIM_ConfigClockSource+0x18>
 800779c:	2302      	movs	r3, #2
 800779e:	e0b3      	b.n	8007908 <HAL_TIM_ConfigClockSource+0x180>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2202      	movs	r2, #2
 80077ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80077be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077d8:	d03e      	beq.n	8007858 <HAL_TIM_ConfigClockSource+0xd0>
 80077da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077de:	f200 8087 	bhi.w	80078f0 <HAL_TIM_ConfigClockSource+0x168>
 80077e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077e6:	f000 8085 	beq.w	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
 80077ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ee:	d87f      	bhi.n	80078f0 <HAL_TIM_ConfigClockSource+0x168>
 80077f0:	2b70      	cmp	r3, #112	@ 0x70
 80077f2:	d01a      	beq.n	800782a <HAL_TIM_ConfigClockSource+0xa2>
 80077f4:	2b70      	cmp	r3, #112	@ 0x70
 80077f6:	d87b      	bhi.n	80078f0 <HAL_TIM_ConfigClockSource+0x168>
 80077f8:	2b60      	cmp	r3, #96	@ 0x60
 80077fa:	d050      	beq.n	800789e <HAL_TIM_ConfigClockSource+0x116>
 80077fc:	2b60      	cmp	r3, #96	@ 0x60
 80077fe:	d877      	bhi.n	80078f0 <HAL_TIM_ConfigClockSource+0x168>
 8007800:	2b50      	cmp	r3, #80	@ 0x50
 8007802:	d03c      	beq.n	800787e <HAL_TIM_ConfigClockSource+0xf6>
 8007804:	2b50      	cmp	r3, #80	@ 0x50
 8007806:	d873      	bhi.n	80078f0 <HAL_TIM_ConfigClockSource+0x168>
 8007808:	2b40      	cmp	r3, #64	@ 0x40
 800780a:	d058      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x136>
 800780c:	2b40      	cmp	r3, #64	@ 0x40
 800780e:	d86f      	bhi.n	80078f0 <HAL_TIM_ConfigClockSource+0x168>
 8007810:	2b30      	cmp	r3, #48	@ 0x30
 8007812:	d064      	beq.n	80078de <HAL_TIM_ConfigClockSource+0x156>
 8007814:	2b30      	cmp	r3, #48	@ 0x30
 8007816:	d86b      	bhi.n	80078f0 <HAL_TIM_ConfigClockSource+0x168>
 8007818:	2b20      	cmp	r3, #32
 800781a:	d060      	beq.n	80078de <HAL_TIM_ConfigClockSource+0x156>
 800781c:	2b20      	cmp	r3, #32
 800781e:	d867      	bhi.n	80078f0 <HAL_TIM_ConfigClockSource+0x168>
 8007820:	2b00      	cmp	r3, #0
 8007822:	d05c      	beq.n	80078de <HAL_TIM_ConfigClockSource+0x156>
 8007824:	2b10      	cmp	r3, #16
 8007826:	d05a      	beq.n	80078de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007828:	e062      	b.n	80078f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	6899      	ldr	r1, [r3, #8]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f000 faee 	bl	8007e1a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800784c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	609a      	str	r2, [r3, #8]
      break;
 8007856:	e04e      	b.n	80078f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	6899      	ldr	r1, [r3, #8]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f000 fad7 	bl	8007e1a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689a      	ldr	r2, [r3, #8]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800787a:	609a      	str	r2, [r3, #8]
      break;
 800787c:	e03b      	b.n	80078f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	6859      	ldr	r1, [r3, #4]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	461a      	mov	r2, r3
 800788c:	f000 fa4e 	bl	8007d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2150      	movs	r1, #80	@ 0x50
 8007896:	4618      	mov	r0, r3
 8007898:	f000 faa5 	bl	8007de6 <TIM_ITRx_SetConfig>
      break;
 800789c:	e02b      	b.n	80078f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6818      	ldr	r0, [r3, #0]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	6859      	ldr	r1, [r3, #4]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	461a      	mov	r2, r3
 80078ac:	f000 fa6c 	bl	8007d88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2160      	movs	r1, #96	@ 0x60
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 fa95 	bl	8007de6 <TIM_ITRx_SetConfig>
      break;
 80078bc:	e01b      	b.n	80078f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	6859      	ldr	r1, [r3, #4]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	461a      	mov	r2, r3
 80078cc:	f000 fa2e 	bl	8007d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2140      	movs	r1, #64	@ 0x40
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 fa85 	bl	8007de6 <TIM_ITRx_SetConfig>
      break;
 80078dc:	e00b      	b.n	80078f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4619      	mov	r1, r3
 80078e8:	4610      	mov	r0, r2
 80078ea:	f000 fa7c 	bl	8007de6 <TIM_ITRx_SetConfig>
        break;
 80078ee:	e002      	b.n	80078f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078f0:	bf00      	nop
 80078f2:	e000      	b.n	80078f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	bc80      	pop	{r7}
 8007920:	4770      	bx	lr

08007922 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	bc80      	pop	{r7}
 8007932:	4770      	bx	lr

08007934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	bc80      	pop	{r7}
 8007944:	4770      	bx	lr

08007946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800794e:	bf00      	nop
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	bc80      	pop	{r7}
 8007956:	4770      	bx	lr

08007958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a29      	ldr	r2, [pc, #164]	@ (8007a10 <TIM_Base_SetConfig+0xb8>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00b      	beq.n	8007988 <TIM_Base_SetConfig+0x30>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007976:	d007      	beq.n	8007988 <TIM_Base_SetConfig+0x30>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a26      	ldr	r2, [pc, #152]	@ (8007a14 <TIM_Base_SetConfig+0xbc>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d003      	beq.n	8007988 <TIM_Base_SetConfig+0x30>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a25      	ldr	r2, [pc, #148]	@ (8007a18 <TIM_Base_SetConfig+0xc0>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d108      	bne.n	800799a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800798e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	4313      	orrs	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a1c      	ldr	r2, [pc, #112]	@ (8007a10 <TIM_Base_SetConfig+0xb8>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d00b      	beq.n	80079ba <TIM_Base_SetConfig+0x62>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a8:	d007      	beq.n	80079ba <TIM_Base_SetConfig+0x62>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a19      	ldr	r2, [pc, #100]	@ (8007a14 <TIM_Base_SetConfig+0xbc>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d003      	beq.n	80079ba <TIM_Base_SetConfig+0x62>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a18      	ldr	r2, [pc, #96]	@ (8007a18 <TIM_Base_SetConfig+0xc0>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d108      	bne.n	80079cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	689a      	ldr	r2, [r3, #8]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a07      	ldr	r2, [pc, #28]	@ (8007a10 <TIM_Base_SetConfig+0xb8>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d103      	bne.n	8007a00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	691a      	ldr	r2, [r3, #16]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	615a      	str	r2, [r3, #20]
}
 8007a06:	bf00      	nop
 8007a08:	3714      	adds	r7, #20
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bc80      	pop	{r7}
 8007a0e:	4770      	bx	lr
 8007a10:	40012c00 	.word	0x40012c00
 8007a14:	40000400 	.word	0x40000400
 8007a18:	40000800 	.word	0x40000800

08007a1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	f023 0201 	bic.w	r2, r3, #1
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f023 0303 	bic.w	r3, r3, #3
 8007a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f023 0302 	bic.w	r3, r3, #2
 8007a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a1c      	ldr	r2, [pc, #112]	@ (8007ae4 <TIM_OC1_SetConfig+0xc8>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d10c      	bne.n	8007a92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f023 0308 	bic.w	r3, r3, #8
 8007a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f023 0304 	bic.w	r3, r3, #4
 8007a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a13      	ldr	r2, [pc, #76]	@ (8007ae4 <TIM_OC1_SetConfig+0xc8>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d111      	bne.n	8007abe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	621a      	str	r2, [r3, #32]
}
 8007ad8:	bf00      	nop
 8007ada:	371c      	adds	r7, #28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bc80      	pop	{r7}
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	40012c00 	.word	0x40012c00

08007ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	f023 0210 	bic.w	r2, r3, #16
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	021b      	lsls	r3, r3, #8
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f023 0320 	bic.w	r3, r3, #32
 8007b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	011b      	lsls	r3, r3, #4
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb8 <TIM_OC2_SetConfig+0xd0>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d10d      	bne.n	8007b64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	011b      	lsls	r3, r3, #4
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a14      	ldr	r2, [pc, #80]	@ (8007bb8 <TIM_OC2_SetConfig+0xd0>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d113      	bne.n	8007b94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	685a      	ldr	r2, [r3, #4]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	621a      	str	r2, [r3, #32]
}
 8007bae:	bf00      	nop
 8007bb0:	371c      	adds	r7, #28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bc80      	pop	{r7}
 8007bb6:	4770      	bx	lr
 8007bb8:	40012c00 	.word	0x40012c00

08007bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 0303 	bic.w	r3, r3, #3
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	021b      	lsls	r3, r3, #8
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a1d      	ldr	r2, [pc, #116]	@ (8007c8c <TIM_OC3_SetConfig+0xd0>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d10d      	bne.n	8007c36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a14      	ldr	r2, [pc, #80]	@ (8007c8c <TIM_OC3_SetConfig+0xd0>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d113      	bne.n	8007c66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	621a      	str	r2, [r3, #32]
}
 8007c80:	bf00      	nop
 8007c82:	371c      	adds	r7, #28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bc80      	pop	{r7}
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	40012c00 	.word	0x40012c00

08007c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	021b      	lsls	r3, r3, #8
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	031b      	lsls	r3, r3, #12
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a0f      	ldr	r2, [pc, #60]	@ (8007d28 <TIM_OC4_SetConfig+0x98>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d109      	bne.n	8007d04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	019b      	lsls	r3, r3, #6
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	621a      	str	r2, [r3, #32]
}
 8007d1e:	bf00      	nop
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bc80      	pop	{r7}
 8007d26:	4770      	bx	lr
 8007d28:	40012c00 	.word	0x40012c00

08007d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6a1b      	ldr	r3, [r3, #32]
 8007d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	f023 0201 	bic.w	r2, r3, #1
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	011b      	lsls	r3, r3, #4
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f023 030a 	bic.w	r3, r3, #10
 8007d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	621a      	str	r2, [r3, #32]
}
 8007d7e:	bf00      	nop
 8007d80:	371c      	adds	r7, #28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr

08007d88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6a1b      	ldr	r3, [r3, #32]
 8007d98:	f023 0210 	bic.w	r2, r3, #16
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007db2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	031b      	lsls	r3, r3, #12
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007dc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	011b      	lsls	r3, r3, #4
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	621a      	str	r2, [r3, #32]
}
 8007ddc:	bf00      	nop
 8007dde:	371c      	adds	r7, #28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bc80      	pop	{r7}
 8007de4:	4770      	bx	lr

08007de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b085      	sub	sp, #20
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	f043 0307 	orr.w	r3, r3, #7
 8007e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	609a      	str	r2, [r3, #8]
}
 8007e10:	bf00      	nop
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bc80      	pop	{r7}
 8007e18:	4770      	bx	lr

08007e1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b087      	sub	sp, #28
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	60b9      	str	r1, [r7, #8]
 8007e24:	607a      	str	r2, [r7, #4]
 8007e26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	021a      	lsls	r2, r3, #8
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	609a      	str	r2, [r3, #8]
}
 8007e4e:	bf00      	nop
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bc80      	pop	{r7}
 8007e56:	4770      	bx	lr

08007e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f003 031f 	and.w	r3, r3, #31
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a1a      	ldr	r2, [r3, #32]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	43db      	mvns	r3, r3
 8007e7a:	401a      	ands	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6a1a      	ldr	r2, [r3, #32]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	f003 031f 	and.w	r3, r3, #31
 8007e8a:	6879      	ldr	r1, [r7, #4]
 8007e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e90:	431a      	orrs	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	621a      	str	r2, [r3, #32]
}
 8007e96:	bf00      	nop
 8007e98:	371c      	adds	r7, #28
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bc80      	pop	{r7}
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d101      	bne.n	8007eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	e046      	b.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a16      	ldr	r2, [pc, #88]	@ (8007f50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d00e      	beq.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f04:	d009      	beq.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a12      	ldr	r2, [pc, #72]	@ (8007f54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d004      	beq.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a10      	ldr	r2, [pc, #64]	@ (8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d10c      	bne.n	8007f34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bc80      	pop	{r7}
 8007f4e:	4770      	bx	lr
 8007f50:	40012c00 	.word	0x40012c00
 8007f54:	40000400 	.word	0x40000400
 8007f58:	40000800 	.word	0x40000800

08007f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bc80      	pop	{r7}
 8007f6c:	4770      	bx	lr

08007f6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bc80      	pop	{r7}
 8007f7e:	4770      	bx	lr

08007f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e03f      	b.n	8008012 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d106      	bne.n	8007fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7fc f83a 	bl	8004020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2224      	movs	r2, #36	@ 0x24
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68da      	ldr	r2, [r3, #12]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f829 	bl	800801c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	691a      	ldr	r2, [r3, #16]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	695a      	ldr	r2, [r3, #20]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68da      	ldr	r2, [r3, #12]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2220      	movs	r2, #32
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2220      	movs	r2, #32
 800800c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
	...

0800801c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68da      	ldr	r2, [r3, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	431a      	orrs	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	4313      	orrs	r3, r2
 800804a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008056:	f023 030c 	bic.w	r3, r3, #12
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	6812      	ldr	r2, [r2, #0]
 800805e:	68b9      	ldr	r1, [r7, #8]
 8008060:	430b      	orrs	r3, r1
 8008062:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	699a      	ldr	r2, [r3, #24]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	430a      	orrs	r2, r1
 8008078:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a2c      	ldr	r2, [pc, #176]	@ (8008130 <UART_SetConfig+0x114>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d103      	bne.n	800808c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008084:	f7fe fc6a 	bl	800695c <HAL_RCC_GetPCLK2Freq>
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	e002      	b.n	8008092 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800808c:	f7fe fc52 	bl	8006934 <HAL_RCC_GetPCLK1Freq>
 8008090:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	009a      	lsls	r2, r3, #2
 800809c:	441a      	add	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a8:	4a22      	ldr	r2, [pc, #136]	@ (8008134 <UART_SetConfig+0x118>)
 80080aa:	fba2 2303 	umull	r2, r3, r2, r3
 80080ae:	095b      	lsrs	r3, r3, #5
 80080b0:	0119      	lsls	r1, r3, #4
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	4613      	mov	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4413      	add	r3, r2
 80080ba:	009a      	lsls	r2, r3, #2
 80080bc:	441a      	add	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80080c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008134 <UART_SetConfig+0x118>)
 80080ca:	fba3 0302 	umull	r0, r3, r3, r2
 80080ce:	095b      	lsrs	r3, r3, #5
 80080d0:	2064      	movs	r0, #100	@ 0x64
 80080d2:	fb00 f303 	mul.w	r3, r0, r3
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	011b      	lsls	r3, r3, #4
 80080da:	3332      	adds	r3, #50	@ 0x32
 80080dc:	4a15      	ldr	r2, [pc, #84]	@ (8008134 <UART_SetConfig+0x118>)
 80080de:	fba2 2303 	umull	r2, r3, r2, r3
 80080e2:	095b      	lsrs	r3, r3, #5
 80080e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080e8:	4419      	add	r1, r3
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4613      	mov	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	009a      	lsls	r2, r3, #2
 80080f4:	441a      	add	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008100:	4b0c      	ldr	r3, [pc, #48]	@ (8008134 <UART_SetConfig+0x118>)
 8008102:	fba3 0302 	umull	r0, r3, r3, r2
 8008106:	095b      	lsrs	r3, r3, #5
 8008108:	2064      	movs	r0, #100	@ 0x64
 800810a:	fb00 f303 	mul.w	r3, r0, r3
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	011b      	lsls	r3, r3, #4
 8008112:	3332      	adds	r3, #50	@ 0x32
 8008114:	4a07      	ldr	r2, [pc, #28]	@ (8008134 <UART_SetConfig+0x118>)
 8008116:	fba2 2303 	umull	r2, r3, r2, r3
 800811a:	095b      	lsrs	r3, r3, #5
 800811c:	f003 020f 	and.w	r2, r3, #15
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	440a      	add	r2, r1
 8008126:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008128:	bf00      	nop
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	40013800 	.word	0x40013800
 8008134:	51eb851f 	.word	0x51eb851f

08008138 <__cvt>:
 8008138:	2b00      	cmp	r3, #0
 800813a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800813e:	461d      	mov	r5, r3
 8008140:	bfbb      	ittet	lt
 8008142:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008146:	461d      	movlt	r5, r3
 8008148:	2300      	movge	r3, #0
 800814a:	232d      	movlt	r3, #45	@ 0x2d
 800814c:	b088      	sub	sp, #32
 800814e:	4614      	mov	r4, r2
 8008150:	bfb8      	it	lt
 8008152:	4614      	movlt	r4, r2
 8008154:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008156:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008158:	7013      	strb	r3, [r2, #0]
 800815a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800815c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008160:	f023 0820 	bic.w	r8, r3, #32
 8008164:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008168:	d005      	beq.n	8008176 <__cvt+0x3e>
 800816a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800816e:	d100      	bne.n	8008172 <__cvt+0x3a>
 8008170:	3601      	adds	r6, #1
 8008172:	2302      	movs	r3, #2
 8008174:	e000      	b.n	8008178 <__cvt+0x40>
 8008176:	2303      	movs	r3, #3
 8008178:	aa07      	add	r2, sp, #28
 800817a:	9204      	str	r2, [sp, #16]
 800817c:	aa06      	add	r2, sp, #24
 800817e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008182:	e9cd 3600 	strd	r3, r6, [sp]
 8008186:	4622      	mov	r2, r4
 8008188:	462b      	mov	r3, r5
 800818a:	f001 f881 	bl	8009290 <_dtoa_r>
 800818e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008192:	4607      	mov	r7, r0
 8008194:	d119      	bne.n	80081ca <__cvt+0x92>
 8008196:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008198:	07db      	lsls	r3, r3, #31
 800819a:	d50e      	bpl.n	80081ba <__cvt+0x82>
 800819c:	eb00 0906 	add.w	r9, r0, r6
 80081a0:	2200      	movs	r2, #0
 80081a2:	2300      	movs	r3, #0
 80081a4:	4620      	mov	r0, r4
 80081a6:	4629      	mov	r1, r5
 80081a8:	f7f8 fbfe 	bl	80009a8 <__aeabi_dcmpeq>
 80081ac:	b108      	cbz	r0, 80081b2 <__cvt+0x7a>
 80081ae:	f8cd 901c 	str.w	r9, [sp, #28]
 80081b2:	2230      	movs	r2, #48	@ 0x30
 80081b4:	9b07      	ldr	r3, [sp, #28]
 80081b6:	454b      	cmp	r3, r9
 80081b8:	d31e      	bcc.n	80081f8 <__cvt+0xc0>
 80081ba:	4638      	mov	r0, r7
 80081bc:	9b07      	ldr	r3, [sp, #28]
 80081be:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80081c0:	1bdb      	subs	r3, r3, r7
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	b008      	add	sp, #32
 80081c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80081ce:	eb00 0906 	add.w	r9, r0, r6
 80081d2:	d1e5      	bne.n	80081a0 <__cvt+0x68>
 80081d4:	7803      	ldrb	r3, [r0, #0]
 80081d6:	2b30      	cmp	r3, #48	@ 0x30
 80081d8:	d10a      	bne.n	80081f0 <__cvt+0xb8>
 80081da:	2200      	movs	r2, #0
 80081dc:	2300      	movs	r3, #0
 80081de:	4620      	mov	r0, r4
 80081e0:	4629      	mov	r1, r5
 80081e2:	f7f8 fbe1 	bl	80009a8 <__aeabi_dcmpeq>
 80081e6:	b918      	cbnz	r0, 80081f0 <__cvt+0xb8>
 80081e8:	f1c6 0601 	rsb	r6, r6, #1
 80081ec:	f8ca 6000 	str.w	r6, [sl]
 80081f0:	f8da 3000 	ldr.w	r3, [sl]
 80081f4:	4499      	add	r9, r3
 80081f6:	e7d3      	b.n	80081a0 <__cvt+0x68>
 80081f8:	1c59      	adds	r1, r3, #1
 80081fa:	9107      	str	r1, [sp, #28]
 80081fc:	701a      	strb	r2, [r3, #0]
 80081fe:	e7d9      	b.n	80081b4 <__cvt+0x7c>

08008200 <__exponent>:
 8008200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008202:	2900      	cmp	r1, #0
 8008204:	bfb6      	itet	lt
 8008206:	232d      	movlt	r3, #45	@ 0x2d
 8008208:	232b      	movge	r3, #43	@ 0x2b
 800820a:	4249      	neglt	r1, r1
 800820c:	2909      	cmp	r1, #9
 800820e:	7002      	strb	r2, [r0, #0]
 8008210:	7043      	strb	r3, [r0, #1]
 8008212:	dd29      	ble.n	8008268 <__exponent+0x68>
 8008214:	f10d 0307 	add.w	r3, sp, #7
 8008218:	461d      	mov	r5, r3
 800821a:	270a      	movs	r7, #10
 800821c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008220:	461a      	mov	r2, r3
 8008222:	fb07 1416 	mls	r4, r7, r6, r1
 8008226:	3430      	adds	r4, #48	@ 0x30
 8008228:	f802 4c01 	strb.w	r4, [r2, #-1]
 800822c:	460c      	mov	r4, r1
 800822e:	2c63      	cmp	r4, #99	@ 0x63
 8008230:	4631      	mov	r1, r6
 8008232:	f103 33ff 	add.w	r3, r3, #4294967295
 8008236:	dcf1      	bgt.n	800821c <__exponent+0x1c>
 8008238:	3130      	adds	r1, #48	@ 0x30
 800823a:	1e94      	subs	r4, r2, #2
 800823c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008240:	4623      	mov	r3, r4
 8008242:	1c41      	adds	r1, r0, #1
 8008244:	42ab      	cmp	r3, r5
 8008246:	d30a      	bcc.n	800825e <__exponent+0x5e>
 8008248:	f10d 0309 	add.w	r3, sp, #9
 800824c:	1a9b      	subs	r3, r3, r2
 800824e:	42ac      	cmp	r4, r5
 8008250:	bf88      	it	hi
 8008252:	2300      	movhi	r3, #0
 8008254:	3302      	adds	r3, #2
 8008256:	4403      	add	r3, r0
 8008258:	1a18      	subs	r0, r3, r0
 800825a:	b003      	add	sp, #12
 800825c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800825e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008262:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008266:	e7ed      	b.n	8008244 <__exponent+0x44>
 8008268:	2330      	movs	r3, #48	@ 0x30
 800826a:	3130      	adds	r1, #48	@ 0x30
 800826c:	7083      	strb	r3, [r0, #2]
 800826e:	70c1      	strb	r1, [r0, #3]
 8008270:	1d03      	adds	r3, r0, #4
 8008272:	e7f1      	b.n	8008258 <__exponent+0x58>

08008274 <_printf_float>:
 8008274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008278:	b091      	sub	sp, #68	@ 0x44
 800827a:	460c      	mov	r4, r1
 800827c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008280:	4616      	mov	r6, r2
 8008282:	461f      	mov	r7, r3
 8008284:	4605      	mov	r5, r0
 8008286:	f000 fef1 	bl	800906c <_localeconv_r>
 800828a:	6803      	ldr	r3, [r0, #0]
 800828c:	4618      	mov	r0, r3
 800828e:	9308      	str	r3, [sp, #32]
 8008290:	f7f7 ff5e 	bl	8000150 <strlen>
 8008294:	2300      	movs	r3, #0
 8008296:	930e      	str	r3, [sp, #56]	@ 0x38
 8008298:	f8d8 3000 	ldr.w	r3, [r8]
 800829c:	9009      	str	r0, [sp, #36]	@ 0x24
 800829e:	3307      	adds	r3, #7
 80082a0:	f023 0307 	bic.w	r3, r3, #7
 80082a4:	f103 0208 	add.w	r2, r3, #8
 80082a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80082ac:	f8d4 b000 	ldr.w	fp, [r4]
 80082b0:	f8c8 2000 	str.w	r2, [r8]
 80082b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80082bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082be:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80082c2:	f04f 32ff 	mov.w	r2, #4294967295
 80082c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80082ce:	4b9c      	ldr	r3, [pc, #624]	@ (8008540 <_printf_float+0x2cc>)
 80082d0:	f7f8 fb9c 	bl	8000a0c <__aeabi_dcmpun>
 80082d4:	bb70      	cbnz	r0, 8008334 <_printf_float+0xc0>
 80082d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082da:	f04f 32ff 	mov.w	r2, #4294967295
 80082de:	4b98      	ldr	r3, [pc, #608]	@ (8008540 <_printf_float+0x2cc>)
 80082e0:	f7f8 fb76 	bl	80009d0 <__aeabi_dcmple>
 80082e4:	bb30      	cbnz	r0, 8008334 <_printf_float+0xc0>
 80082e6:	2200      	movs	r2, #0
 80082e8:	2300      	movs	r3, #0
 80082ea:	4640      	mov	r0, r8
 80082ec:	4649      	mov	r1, r9
 80082ee:	f7f8 fb65 	bl	80009bc <__aeabi_dcmplt>
 80082f2:	b110      	cbz	r0, 80082fa <_printf_float+0x86>
 80082f4:	232d      	movs	r3, #45	@ 0x2d
 80082f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082fa:	4a92      	ldr	r2, [pc, #584]	@ (8008544 <_printf_float+0x2d0>)
 80082fc:	4b92      	ldr	r3, [pc, #584]	@ (8008548 <_printf_float+0x2d4>)
 80082fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008302:	bf94      	ite	ls
 8008304:	4690      	movls	r8, r2
 8008306:	4698      	movhi	r8, r3
 8008308:	2303      	movs	r3, #3
 800830a:	f04f 0900 	mov.w	r9, #0
 800830e:	6123      	str	r3, [r4, #16]
 8008310:	f02b 0304 	bic.w	r3, fp, #4
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	4633      	mov	r3, r6
 8008318:	4621      	mov	r1, r4
 800831a:	4628      	mov	r0, r5
 800831c:	9700      	str	r7, [sp, #0]
 800831e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008320:	f000 f9d4 	bl	80086cc <_printf_common>
 8008324:	3001      	adds	r0, #1
 8008326:	f040 8090 	bne.w	800844a <_printf_float+0x1d6>
 800832a:	f04f 30ff 	mov.w	r0, #4294967295
 800832e:	b011      	add	sp, #68	@ 0x44
 8008330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008334:	4642      	mov	r2, r8
 8008336:	464b      	mov	r3, r9
 8008338:	4640      	mov	r0, r8
 800833a:	4649      	mov	r1, r9
 800833c:	f7f8 fb66 	bl	8000a0c <__aeabi_dcmpun>
 8008340:	b148      	cbz	r0, 8008356 <_printf_float+0xe2>
 8008342:	464b      	mov	r3, r9
 8008344:	2b00      	cmp	r3, #0
 8008346:	bfb8      	it	lt
 8008348:	232d      	movlt	r3, #45	@ 0x2d
 800834a:	4a80      	ldr	r2, [pc, #512]	@ (800854c <_printf_float+0x2d8>)
 800834c:	bfb8      	it	lt
 800834e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008352:	4b7f      	ldr	r3, [pc, #508]	@ (8008550 <_printf_float+0x2dc>)
 8008354:	e7d3      	b.n	80082fe <_printf_float+0x8a>
 8008356:	6863      	ldr	r3, [r4, #4]
 8008358:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800835c:	1c5a      	adds	r2, r3, #1
 800835e:	d13f      	bne.n	80083e0 <_printf_float+0x16c>
 8008360:	2306      	movs	r3, #6
 8008362:	6063      	str	r3, [r4, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800836a:	6023      	str	r3, [r4, #0]
 800836c:	9206      	str	r2, [sp, #24]
 800836e:	aa0e      	add	r2, sp, #56	@ 0x38
 8008370:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008374:	aa0d      	add	r2, sp, #52	@ 0x34
 8008376:	9203      	str	r2, [sp, #12]
 8008378:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800837c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008380:	6863      	ldr	r3, [r4, #4]
 8008382:	4642      	mov	r2, r8
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	4628      	mov	r0, r5
 8008388:	464b      	mov	r3, r9
 800838a:	910a      	str	r1, [sp, #40]	@ 0x28
 800838c:	f7ff fed4 	bl	8008138 <__cvt>
 8008390:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008392:	4680      	mov	r8, r0
 8008394:	2947      	cmp	r1, #71	@ 0x47
 8008396:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008398:	d128      	bne.n	80083ec <_printf_float+0x178>
 800839a:	1cc8      	adds	r0, r1, #3
 800839c:	db02      	blt.n	80083a4 <_printf_float+0x130>
 800839e:	6863      	ldr	r3, [r4, #4]
 80083a0:	4299      	cmp	r1, r3
 80083a2:	dd40      	ble.n	8008426 <_printf_float+0x1b2>
 80083a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80083a8:	fa5f fa8a 	uxtb.w	sl, sl
 80083ac:	4652      	mov	r2, sl
 80083ae:	3901      	subs	r1, #1
 80083b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80083b4:	910d      	str	r1, [sp, #52]	@ 0x34
 80083b6:	f7ff ff23 	bl	8008200 <__exponent>
 80083ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083bc:	4681      	mov	r9, r0
 80083be:	1813      	adds	r3, r2, r0
 80083c0:	2a01      	cmp	r2, #1
 80083c2:	6123      	str	r3, [r4, #16]
 80083c4:	dc02      	bgt.n	80083cc <_printf_float+0x158>
 80083c6:	6822      	ldr	r2, [r4, #0]
 80083c8:	07d2      	lsls	r2, r2, #31
 80083ca:	d501      	bpl.n	80083d0 <_printf_float+0x15c>
 80083cc:	3301      	adds	r3, #1
 80083ce:	6123      	str	r3, [r4, #16]
 80083d0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d09e      	beq.n	8008316 <_printf_float+0xa2>
 80083d8:	232d      	movs	r3, #45	@ 0x2d
 80083da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083de:	e79a      	b.n	8008316 <_printf_float+0xa2>
 80083e0:	2947      	cmp	r1, #71	@ 0x47
 80083e2:	d1bf      	bne.n	8008364 <_printf_float+0xf0>
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1bd      	bne.n	8008364 <_printf_float+0xf0>
 80083e8:	2301      	movs	r3, #1
 80083ea:	e7ba      	b.n	8008362 <_printf_float+0xee>
 80083ec:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80083f0:	d9dc      	bls.n	80083ac <_printf_float+0x138>
 80083f2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80083f6:	d118      	bne.n	800842a <_printf_float+0x1b6>
 80083f8:	2900      	cmp	r1, #0
 80083fa:	6863      	ldr	r3, [r4, #4]
 80083fc:	dd0b      	ble.n	8008416 <_printf_float+0x1a2>
 80083fe:	6121      	str	r1, [r4, #16]
 8008400:	b913      	cbnz	r3, 8008408 <_printf_float+0x194>
 8008402:	6822      	ldr	r2, [r4, #0]
 8008404:	07d0      	lsls	r0, r2, #31
 8008406:	d502      	bpl.n	800840e <_printf_float+0x19a>
 8008408:	3301      	adds	r3, #1
 800840a:	440b      	add	r3, r1
 800840c:	6123      	str	r3, [r4, #16]
 800840e:	f04f 0900 	mov.w	r9, #0
 8008412:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008414:	e7dc      	b.n	80083d0 <_printf_float+0x15c>
 8008416:	b913      	cbnz	r3, 800841e <_printf_float+0x1aa>
 8008418:	6822      	ldr	r2, [r4, #0]
 800841a:	07d2      	lsls	r2, r2, #31
 800841c:	d501      	bpl.n	8008422 <_printf_float+0x1ae>
 800841e:	3302      	adds	r3, #2
 8008420:	e7f4      	b.n	800840c <_printf_float+0x198>
 8008422:	2301      	movs	r3, #1
 8008424:	e7f2      	b.n	800840c <_printf_float+0x198>
 8008426:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800842a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800842c:	4299      	cmp	r1, r3
 800842e:	db05      	blt.n	800843c <_printf_float+0x1c8>
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	6121      	str	r1, [r4, #16]
 8008434:	07d8      	lsls	r0, r3, #31
 8008436:	d5ea      	bpl.n	800840e <_printf_float+0x19a>
 8008438:	1c4b      	adds	r3, r1, #1
 800843a:	e7e7      	b.n	800840c <_printf_float+0x198>
 800843c:	2900      	cmp	r1, #0
 800843e:	bfcc      	ite	gt
 8008440:	2201      	movgt	r2, #1
 8008442:	f1c1 0202 	rsble	r2, r1, #2
 8008446:	4413      	add	r3, r2
 8008448:	e7e0      	b.n	800840c <_printf_float+0x198>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	055a      	lsls	r2, r3, #21
 800844e:	d407      	bmi.n	8008460 <_printf_float+0x1ec>
 8008450:	6923      	ldr	r3, [r4, #16]
 8008452:	4642      	mov	r2, r8
 8008454:	4631      	mov	r1, r6
 8008456:	4628      	mov	r0, r5
 8008458:	47b8      	blx	r7
 800845a:	3001      	adds	r0, #1
 800845c:	d12b      	bne.n	80084b6 <_printf_float+0x242>
 800845e:	e764      	b.n	800832a <_printf_float+0xb6>
 8008460:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008464:	f240 80dc 	bls.w	8008620 <_printf_float+0x3ac>
 8008468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800846c:	2200      	movs	r2, #0
 800846e:	2300      	movs	r3, #0
 8008470:	f7f8 fa9a 	bl	80009a8 <__aeabi_dcmpeq>
 8008474:	2800      	cmp	r0, #0
 8008476:	d033      	beq.n	80084e0 <_printf_float+0x26c>
 8008478:	2301      	movs	r3, #1
 800847a:	4631      	mov	r1, r6
 800847c:	4628      	mov	r0, r5
 800847e:	4a35      	ldr	r2, [pc, #212]	@ (8008554 <_printf_float+0x2e0>)
 8008480:	47b8      	blx	r7
 8008482:	3001      	adds	r0, #1
 8008484:	f43f af51 	beq.w	800832a <_printf_float+0xb6>
 8008488:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800848c:	4543      	cmp	r3, r8
 800848e:	db02      	blt.n	8008496 <_printf_float+0x222>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	07d8      	lsls	r0, r3, #31
 8008494:	d50f      	bpl.n	80084b6 <_printf_float+0x242>
 8008496:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800849a:	4631      	mov	r1, r6
 800849c:	4628      	mov	r0, r5
 800849e:	47b8      	blx	r7
 80084a0:	3001      	adds	r0, #1
 80084a2:	f43f af42 	beq.w	800832a <_printf_float+0xb6>
 80084a6:	f04f 0900 	mov.w	r9, #0
 80084aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80084ae:	f104 0a1a 	add.w	sl, r4, #26
 80084b2:	45c8      	cmp	r8, r9
 80084b4:	dc09      	bgt.n	80084ca <_printf_float+0x256>
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	079b      	lsls	r3, r3, #30
 80084ba:	f100 8102 	bmi.w	80086c2 <_printf_float+0x44e>
 80084be:	68e0      	ldr	r0, [r4, #12]
 80084c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084c2:	4298      	cmp	r0, r3
 80084c4:	bfb8      	it	lt
 80084c6:	4618      	movlt	r0, r3
 80084c8:	e731      	b.n	800832e <_printf_float+0xba>
 80084ca:	2301      	movs	r3, #1
 80084cc:	4652      	mov	r2, sl
 80084ce:	4631      	mov	r1, r6
 80084d0:	4628      	mov	r0, r5
 80084d2:	47b8      	blx	r7
 80084d4:	3001      	adds	r0, #1
 80084d6:	f43f af28 	beq.w	800832a <_printf_float+0xb6>
 80084da:	f109 0901 	add.w	r9, r9, #1
 80084de:	e7e8      	b.n	80084b2 <_printf_float+0x23e>
 80084e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	dc38      	bgt.n	8008558 <_printf_float+0x2e4>
 80084e6:	2301      	movs	r3, #1
 80084e8:	4631      	mov	r1, r6
 80084ea:	4628      	mov	r0, r5
 80084ec:	4a19      	ldr	r2, [pc, #100]	@ (8008554 <_printf_float+0x2e0>)
 80084ee:	47b8      	blx	r7
 80084f0:	3001      	adds	r0, #1
 80084f2:	f43f af1a 	beq.w	800832a <_printf_float+0xb6>
 80084f6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80084fa:	ea59 0303 	orrs.w	r3, r9, r3
 80084fe:	d102      	bne.n	8008506 <_printf_float+0x292>
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	07d9      	lsls	r1, r3, #31
 8008504:	d5d7      	bpl.n	80084b6 <_printf_float+0x242>
 8008506:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800850a:	4631      	mov	r1, r6
 800850c:	4628      	mov	r0, r5
 800850e:	47b8      	blx	r7
 8008510:	3001      	adds	r0, #1
 8008512:	f43f af0a 	beq.w	800832a <_printf_float+0xb6>
 8008516:	f04f 0a00 	mov.w	sl, #0
 800851a:	f104 0b1a 	add.w	fp, r4, #26
 800851e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008520:	425b      	negs	r3, r3
 8008522:	4553      	cmp	r3, sl
 8008524:	dc01      	bgt.n	800852a <_printf_float+0x2b6>
 8008526:	464b      	mov	r3, r9
 8008528:	e793      	b.n	8008452 <_printf_float+0x1de>
 800852a:	2301      	movs	r3, #1
 800852c:	465a      	mov	r2, fp
 800852e:	4631      	mov	r1, r6
 8008530:	4628      	mov	r0, r5
 8008532:	47b8      	blx	r7
 8008534:	3001      	adds	r0, #1
 8008536:	f43f aef8 	beq.w	800832a <_printf_float+0xb6>
 800853a:	f10a 0a01 	add.w	sl, sl, #1
 800853e:	e7ee      	b.n	800851e <_printf_float+0x2aa>
 8008540:	7fefffff 	.word	0x7fefffff
 8008544:	0800e190 	.word	0x0800e190
 8008548:	0800e194 	.word	0x0800e194
 800854c:	0800e198 	.word	0x0800e198
 8008550:	0800e19c 	.word	0x0800e19c
 8008554:	0800e1a0 	.word	0x0800e1a0
 8008558:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800855a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800855e:	4553      	cmp	r3, sl
 8008560:	bfa8      	it	ge
 8008562:	4653      	movge	r3, sl
 8008564:	2b00      	cmp	r3, #0
 8008566:	4699      	mov	r9, r3
 8008568:	dc36      	bgt.n	80085d8 <_printf_float+0x364>
 800856a:	f04f 0b00 	mov.w	fp, #0
 800856e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008572:	f104 021a 	add.w	r2, r4, #26
 8008576:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008578:	930a      	str	r3, [sp, #40]	@ 0x28
 800857a:	eba3 0309 	sub.w	r3, r3, r9
 800857e:	455b      	cmp	r3, fp
 8008580:	dc31      	bgt.n	80085e6 <_printf_float+0x372>
 8008582:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008584:	459a      	cmp	sl, r3
 8008586:	dc3a      	bgt.n	80085fe <_printf_float+0x38a>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	07da      	lsls	r2, r3, #31
 800858c:	d437      	bmi.n	80085fe <_printf_float+0x38a>
 800858e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008590:	ebaa 0903 	sub.w	r9, sl, r3
 8008594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008596:	ebaa 0303 	sub.w	r3, sl, r3
 800859a:	4599      	cmp	r9, r3
 800859c:	bfa8      	it	ge
 800859e:	4699      	movge	r9, r3
 80085a0:	f1b9 0f00 	cmp.w	r9, #0
 80085a4:	dc33      	bgt.n	800860e <_printf_float+0x39a>
 80085a6:	f04f 0800 	mov.w	r8, #0
 80085aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085ae:	f104 0b1a 	add.w	fp, r4, #26
 80085b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085b4:	ebaa 0303 	sub.w	r3, sl, r3
 80085b8:	eba3 0309 	sub.w	r3, r3, r9
 80085bc:	4543      	cmp	r3, r8
 80085be:	f77f af7a 	ble.w	80084b6 <_printf_float+0x242>
 80085c2:	2301      	movs	r3, #1
 80085c4:	465a      	mov	r2, fp
 80085c6:	4631      	mov	r1, r6
 80085c8:	4628      	mov	r0, r5
 80085ca:	47b8      	blx	r7
 80085cc:	3001      	adds	r0, #1
 80085ce:	f43f aeac 	beq.w	800832a <_printf_float+0xb6>
 80085d2:	f108 0801 	add.w	r8, r8, #1
 80085d6:	e7ec      	b.n	80085b2 <_printf_float+0x33e>
 80085d8:	4642      	mov	r2, r8
 80085da:	4631      	mov	r1, r6
 80085dc:	4628      	mov	r0, r5
 80085de:	47b8      	blx	r7
 80085e0:	3001      	adds	r0, #1
 80085e2:	d1c2      	bne.n	800856a <_printf_float+0x2f6>
 80085e4:	e6a1      	b.n	800832a <_printf_float+0xb6>
 80085e6:	2301      	movs	r3, #1
 80085e8:	4631      	mov	r1, r6
 80085ea:	4628      	mov	r0, r5
 80085ec:	920a      	str	r2, [sp, #40]	@ 0x28
 80085ee:	47b8      	blx	r7
 80085f0:	3001      	adds	r0, #1
 80085f2:	f43f ae9a 	beq.w	800832a <_printf_float+0xb6>
 80085f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085f8:	f10b 0b01 	add.w	fp, fp, #1
 80085fc:	e7bb      	b.n	8008576 <_printf_float+0x302>
 80085fe:	4631      	mov	r1, r6
 8008600:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008604:	4628      	mov	r0, r5
 8008606:	47b8      	blx	r7
 8008608:	3001      	adds	r0, #1
 800860a:	d1c0      	bne.n	800858e <_printf_float+0x31a>
 800860c:	e68d      	b.n	800832a <_printf_float+0xb6>
 800860e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008610:	464b      	mov	r3, r9
 8008612:	4631      	mov	r1, r6
 8008614:	4628      	mov	r0, r5
 8008616:	4442      	add	r2, r8
 8008618:	47b8      	blx	r7
 800861a:	3001      	adds	r0, #1
 800861c:	d1c3      	bne.n	80085a6 <_printf_float+0x332>
 800861e:	e684      	b.n	800832a <_printf_float+0xb6>
 8008620:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008624:	f1ba 0f01 	cmp.w	sl, #1
 8008628:	dc01      	bgt.n	800862e <_printf_float+0x3ba>
 800862a:	07db      	lsls	r3, r3, #31
 800862c:	d536      	bpl.n	800869c <_printf_float+0x428>
 800862e:	2301      	movs	r3, #1
 8008630:	4642      	mov	r2, r8
 8008632:	4631      	mov	r1, r6
 8008634:	4628      	mov	r0, r5
 8008636:	47b8      	blx	r7
 8008638:	3001      	adds	r0, #1
 800863a:	f43f ae76 	beq.w	800832a <_printf_float+0xb6>
 800863e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008642:	4631      	mov	r1, r6
 8008644:	4628      	mov	r0, r5
 8008646:	47b8      	blx	r7
 8008648:	3001      	adds	r0, #1
 800864a:	f43f ae6e 	beq.w	800832a <_printf_float+0xb6>
 800864e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008652:	2200      	movs	r2, #0
 8008654:	2300      	movs	r3, #0
 8008656:	f10a 3aff 	add.w	sl, sl, #4294967295
 800865a:	f7f8 f9a5 	bl	80009a8 <__aeabi_dcmpeq>
 800865e:	b9c0      	cbnz	r0, 8008692 <_printf_float+0x41e>
 8008660:	4653      	mov	r3, sl
 8008662:	f108 0201 	add.w	r2, r8, #1
 8008666:	4631      	mov	r1, r6
 8008668:	4628      	mov	r0, r5
 800866a:	47b8      	blx	r7
 800866c:	3001      	adds	r0, #1
 800866e:	d10c      	bne.n	800868a <_printf_float+0x416>
 8008670:	e65b      	b.n	800832a <_printf_float+0xb6>
 8008672:	2301      	movs	r3, #1
 8008674:	465a      	mov	r2, fp
 8008676:	4631      	mov	r1, r6
 8008678:	4628      	mov	r0, r5
 800867a:	47b8      	blx	r7
 800867c:	3001      	adds	r0, #1
 800867e:	f43f ae54 	beq.w	800832a <_printf_float+0xb6>
 8008682:	f108 0801 	add.w	r8, r8, #1
 8008686:	45d0      	cmp	r8, sl
 8008688:	dbf3      	blt.n	8008672 <_printf_float+0x3fe>
 800868a:	464b      	mov	r3, r9
 800868c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008690:	e6e0      	b.n	8008454 <_printf_float+0x1e0>
 8008692:	f04f 0800 	mov.w	r8, #0
 8008696:	f104 0b1a 	add.w	fp, r4, #26
 800869a:	e7f4      	b.n	8008686 <_printf_float+0x412>
 800869c:	2301      	movs	r3, #1
 800869e:	4642      	mov	r2, r8
 80086a0:	e7e1      	b.n	8008666 <_printf_float+0x3f2>
 80086a2:	2301      	movs	r3, #1
 80086a4:	464a      	mov	r2, r9
 80086a6:	4631      	mov	r1, r6
 80086a8:	4628      	mov	r0, r5
 80086aa:	47b8      	blx	r7
 80086ac:	3001      	adds	r0, #1
 80086ae:	f43f ae3c 	beq.w	800832a <_printf_float+0xb6>
 80086b2:	f108 0801 	add.w	r8, r8, #1
 80086b6:	68e3      	ldr	r3, [r4, #12]
 80086b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80086ba:	1a5b      	subs	r3, r3, r1
 80086bc:	4543      	cmp	r3, r8
 80086be:	dcf0      	bgt.n	80086a2 <_printf_float+0x42e>
 80086c0:	e6fd      	b.n	80084be <_printf_float+0x24a>
 80086c2:	f04f 0800 	mov.w	r8, #0
 80086c6:	f104 0919 	add.w	r9, r4, #25
 80086ca:	e7f4      	b.n	80086b6 <_printf_float+0x442>

080086cc <_printf_common>:
 80086cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d0:	4616      	mov	r6, r2
 80086d2:	4698      	mov	r8, r3
 80086d4:	688a      	ldr	r2, [r1, #8]
 80086d6:	690b      	ldr	r3, [r1, #16]
 80086d8:	4607      	mov	r7, r0
 80086da:	4293      	cmp	r3, r2
 80086dc:	bfb8      	it	lt
 80086de:	4613      	movlt	r3, r2
 80086e0:	6033      	str	r3, [r6, #0]
 80086e2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086e6:	460c      	mov	r4, r1
 80086e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086ec:	b10a      	cbz	r2, 80086f2 <_printf_common+0x26>
 80086ee:	3301      	adds	r3, #1
 80086f0:	6033      	str	r3, [r6, #0]
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	0699      	lsls	r1, r3, #26
 80086f6:	bf42      	ittt	mi
 80086f8:	6833      	ldrmi	r3, [r6, #0]
 80086fa:	3302      	addmi	r3, #2
 80086fc:	6033      	strmi	r3, [r6, #0]
 80086fe:	6825      	ldr	r5, [r4, #0]
 8008700:	f015 0506 	ands.w	r5, r5, #6
 8008704:	d106      	bne.n	8008714 <_printf_common+0x48>
 8008706:	f104 0a19 	add.w	sl, r4, #25
 800870a:	68e3      	ldr	r3, [r4, #12]
 800870c:	6832      	ldr	r2, [r6, #0]
 800870e:	1a9b      	subs	r3, r3, r2
 8008710:	42ab      	cmp	r3, r5
 8008712:	dc2b      	bgt.n	800876c <_printf_common+0xa0>
 8008714:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008718:	6822      	ldr	r2, [r4, #0]
 800871a:	3b00      	subs	r3, #0
 800871c:	bf18      	it	ne
 800871e:	2301      	movne	r3, #1
 8008720:	0692      	lsls	r2, r2, #26
 8008722:	d430      	bmi.n	8008786 <_printf_common+0xba>
 8008724:	4641      	mov	r1, r8
 8008726:	4638      	mov	r0, r7
 8008728:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800872c:	47c8      	blx	r9
 800872e:	3001      	adds	r0, #1
 8008730:	d023      	beq.n	800877a <_printf_common+0xae>
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	6922      	ldr	r2, [r4, #16]
 8008736:	f003 0306 	and.w	r3, r3, #6
 800873a:	2b04      	cmp	r3, #4
 800873c:	bf14      	ite	ne
 800873e:	2500      	movne	r5, #0
 8008740:	6833      	ldreq	r3, [r6, #0]
 8008742:	f04f 0600 	mov.w	r6, #0
 8008746:	bf08      	it	eq
 8008748:	68e5      	ldreq	r5, [r4, #12]
 800874a:	f104 041a 	add.w	r4, r4, #26
 800874e:	bf08      	it	eq
 8008750:	1aed      	subeq	r5, r5, r3
 8008752:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008756:	bf08      	it	eq
 8008758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800875c:	4293      	cmp	r3, r2
 800875e:	bfc4      	itt	gt
 8008760:	1a9b      	subgt	r3, r3, r2
 8008762:	18ed      	addgt	r5, r5, r3
 8008764:	42b5      	cmp	r5, r6
 8008766:	d11a      	bne.n	800879e <_printf_common+0xd2>
 8008768:	2000      	movs	r0, #0
 800876a:	e008      	b.n	800877e <_printf_common+0xb2>
 800876c:	2301      	movs	r3, #1
 800876e:	4652      	mov	r2, sl
 8008770:	4641      	mov	r1, r8
 8008772:	4638      	mov	r0, r7
 8008774:	47c8      	blx	r9
 8008776:	3001      	adds	r0, #1
 8008778:	d103      	bne.n	8008782 <_printf_common+0xb6>
 800877a:	f04f 30ff 	mov.w	r0, #4294967295
 800877e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008782:	3501      	adds	r5, #1
 8008784:	e7c1      	b.n	800870a <_printf_common+0x3e>
 8008786:	2030      	movs	r0, #48	@ 0x30
 8008788:	18e1      	adds	r1, r4, r3
 800878a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800878e:	1c5a      	adds	r2, r3, #1
 8008790:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008794:	4422      	add	r2, r4
 8008796:	3302      	adds	r3, #2
 8008798:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800879c:	e7c2      	b.n	8008724 <_printf_common+0x58>
 800879e:	2301      	movs	r3, #1
 80087a0:	4622      	mov	r2, r4
 80087a2:	4641      	mov	r1, r8
 80087a4:	4638      	mov	r0, r7
 80087a6:	47c8      	blx	r9
 80087a8:	3001      	adds	r0, #1
 80087aa:	d0e6      	beq.n	800877a <_printf_common+0xae>
 80087ac:	3601      	adds	r6, #1
 80087ae:	e7d9      	b.n	8008764 <_printf_common+0x98>

080087b0 <_printf_i>:
 80087b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087b4:	7e0f      	ldrb	r7, [r1, #24]
 80087b6:	4691      	mov	r9, r2
 80087b8:	2f78      	cmp	r7, #120	@ 0x78
 80087ba:	4680      	mov	r8, r0
 80087bc:	460c      	mov	r4, r1
 80087be:	469a      	mov	sl, r3
 80087c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087c6:	d807      	bhi.n	80087d8 <_printf_i+0x28>
 80087c8:	2f62      	cmp	r7, #98	@ 0x62
 80087ca:	d80a      	bhi.n	80087e2 <_printf_i+0x32>
 80087cc:	2f00      	cmp	r7, #0
 80087ce:	f000 80d3 	beq.w	8008978 <_printf_i+0x1c8>
 80087d2:	2f58      	cmp	r7, #88	@ 0x58
 80087d4:	f000 80ba 	beq.w	800894c <_printf_i+0x19c>
 80087d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087e0:	e03a      	b.n	8008858 <_printf_i+0xa8>
 80087e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087e6:	2b15      	cmp	r3, #21
 80087e8:	d8f6      	bhi.n	80087d8 <_printf_i+0x28>
 80087ea:	a101      	add	r1, pc, #4	@ (adr r1, 80087f0 <_printf_i+0x40>)
 80087ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087f0:	08008849 	.word	0x08008849
 80087f4:	0800885d 	.word	0x0800885d
 80087f8:	080087d9 	.word	0x080087d9
 80087fc:	080087d9 	.word	0x080087d9
 8008800:	080087d9 	.word	0x080087d9
 8008804:	080087d9 	.word	0x080087d9
 8008808:	0800885d 	.word	0x0800885d
 800880c:	080087d9 	.word	0x080087d9
 8008810:	080087d9 	.word	0x080087d9
 8008814:	080087d9 	.word	0x080087d9
 8008818:	080087d9 	.word	0x080087d9
 800881c:	0800895f 	.word	0x0800895f
 8008820:	08008887 	.word	0x08008887
 8008824:	08008919 	.word	0x08008919
 8008828:	080087d9 	.word	0x080087d9
 800882c:	080087d9 	.word	0x080087d9
 8008830:	08008981 	.word	0x08008981
 8008834:	080087d9 	.word	0x080087d9
 8008838:	08008887 	.word	0x08008887
 800883c:	080087d9 	.word	0x080087d9
 8008840:	080087d9 	.word	0x080087d9
 8008844:	08008921 	.word	0x08008921
 8008848:	6833      	ldr	r3, [r6, #0]
 800884a:	1d1a      	adds	r2, r3, #4
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	6032      	str	r2, [r6, #0]
 8008850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008854:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008858:	2301      	movs	r3, #1
 800885a:	e09e      	b.n	800899a <_printf_i+0x1ea>
 800885c:	6833      	ldr	r3, [r6, #0]
 800885e:	6820      	ldr	r0, [r4, #0]
 8008860:	1d19      	adds	r1, r3, #4
 8008862:	6031      	str	r1, [r6, #0]
 8008864:	0606      	lsls	r6, r0, #24
 8008866:	d501      	bpl.n	800886c <_printf_i+0xbc>
 8008868:	681d      	ldr	r5, [r3, #0]
 800886a:	e003      	b.n	8008874 <_printf_i+0xc4>
 800886c:	0645      	lsls	r5, r0, #25
 800886e:	d5fb      	bpl.n	8008868 <_printf_i+0xb8>
 8008870:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008874:	2d00      	cmp	r5, #0
 8008876:	da03      	bge.n	8008880 <_printf_i+0xd0>
 8008878:	232d      	movs	r3, #45	@ 0x2d
 800887a:	426d      	negs	r5, r5
 800887c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008880:	230a      	movs	r3, #10
 8008882:	4859      	ldr	r0, [pc, #356]	@ (80089e8 <_printf_i+0x238>)
 8008884:	e011      	b.n	80088aa <_printf_i+0xfa>
 8008886:	6821      	ldr	r1, [r4, #0]
 8008888:	6833      	ldr	r3, [r6, #0]
 800888a:	0608      	lsls	r0, r1, #24
 800888c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008890:	d402      	bmi.n	8008898 <_printf_i+0xe8>
 8008892:	0649      	lsls	r1, r1, #25
 8008894:	bf48      	it	mi
 8008896:	b2ad      	uxthmi	r5, r5
 8008898:	2f6f      	cmp	r7, #111	@ 0x6f
 800889a:	6033      	str	r3, [r6, #0]
 800889c:	bf14      	ite	ne
 800889e:	230a      	movne	r3, #10
 80088a0:	2308      	moveq	r3, #8
 80088a2:	4851      	ldr	r0, [pc, #324]	@ (80089e8 <_printf_i+0x238>)
 80088a4:	2100      	movs	r1, #0
 80088a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80088aa:	6866      	ldr	r6, [r4, #4]
 80088ac:	2e00      	cmp	r6, #0
 80088ae:	bfa8      	it	ge
 80088b0:	6821      	ldrge	r1, [r4, #0]
 80088b2:	60a6      	str	r6, [r4, #8]
 80088b4:	bfa4      	itt	ge
 80088b6:	f021 0104 	bicge.w	r1, r1, #4
 80088ba:	6021      	strge	r1, [r4, #0]
 80088bc:	b90d      	cbnz	r5, 80088c2 <_printf_i+0x112>
 80088be:	2e00      	cmp	r6, #0
 80088c0:	d04b      	beq.n	800895a <_printf_i+0x1aa>
 80088c2:	4616      	mov	r6, r2
 80088c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80088c8:	fb03 5711 	mls	r7, r3, r1, r5
 80088cc:	5dc7      	ldrb	r7, [r0, r7]
 80088ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088d2:	462f      	mov	r7, r5
 80088d4:	42bb      	cmp	r3, r7
 80088d6:	460d      	mov	r5, r1
 80088d8:	d9f4      	bls.n	80088c4 <_printf_i+0x114>
 80088da:	2b08      	cmp	r3, #8
 80088dc:	d10b      	bne.n	80088f6 <_printf_i+0x146>
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	07df      	lsls	r7, r3, #31
 80088e2:	d508      	bpl.n	80088f6 <_printf_i+0x146>
 80088e4:	6923      	ldr	r3, [r4, #16]
 80088e6:	6861      	ldr	r1, [r4, #4]
 80088e8:	4299      	cmp	r1, r3
 80088ea:	bfde      	ittt	le
 80088ec:	2330      	movle	r3, #48	@ 0x30
 80088ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088f6:	1b92      	subs	r2, r2, r6
 80088f8:	6122      	str	r2, [r4, #16]
 80088fa:	464b      	mov	r3, r9
 80088fc:	4621      	mov	r1, r4
 80088fe:	4640      	mov	r0, r8
 8008900:	f8cd a000 	str.w	sl, [sp]
 8008904:	aa03      	add	r2, sp, #12
 8008906:	f7ff fee1 	bl	80086cc <_printf_common>
 800890a:	3001      	adds	r0, #1
 800890c:	d14a      	bne.n	80089a4 <_printf_i+0x1f4>
 800890e:	f04f 30ff 	mov.w	r0, #4294967295
 8008912:	b004      	add	sp, #16
 8008914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	f043 0320 	orr.w	r3, r3, #32
 800891e:	6023      	str	r3, [r4, #0]
 8008920:	2778      	movs	r7, #120	@ 0x78
 8008922:	4832      	ldr	r0, [pc, #200]	@ (80089ec <_printf_i+0x23c>)
 8008924:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	6831      	ldr	r1, [r6, #0]
 800892c:	061f      	lsls	r7, r3, #24
 800892e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008932:	d402      	bmi.n	800893a <_printf_i+0x18a>
 8008934:	065f      	lsls	r7, r3, #25
 8008936:	bf48      	it	mi
 8008938:	b2ad      	uxthmi	r5, r5
 800893a:	6031      	str	r1, [r6, #0]
 800893c:	07d9      	lsls	r1, r3, #31
 800893e:	bf44      	itt	mi
 8008940:	f043 0320 	orrmi.w	r3, r3, #32
 8008944:	6023      	strmi	r3, [r4, #0]
 8008946:	b11d      	cbz	r5, 8008950 <_printf_i+0x1a0>
 8008948:	2310      	movs	r3, #16
 800894a:	e7ab      	b.n	80088a4 <_printf_i+0xf4>
 800894c:	4826      	ldr	r0, [pc, #152]	@ (80089e8 <_printf_i+0x238>)
 800894e:	e7e9      	b.n	8008924 <_printf_i+0x174>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	f023 0320 	bic.w	r3, r3, #32
 8008956:	6023      	str	r3, [r4, #0]
 8008958:	e7f6      	b.n	8008948 <_printf_i+0x198>
 800895a:	4616      	mov	r6, r2
 800895c:	e7bd      	b.n	80088da <_printf_i+0x12a>
 800895e:	6833      	ldr	r3, [r6, #0]
 8008960:	6825      	ldr	r5, [r4, #0]
 8008962:	1d18      	adds	r0, r3, #4
 8008964:	6961      	ldr	r1, [r4, #20]
 8008966:	6030      	str	r0, [r6, #0]
 8008968:	062e      	lsls	r6, r5, #24
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	d501      	bpl.n	8008972 <_printf_i+0x1c2>
 800896e:	6019      	str	r1, [r3, #0]
 8008970:	e002      	b.n	8008978 <_printf_i+0x1c8>
 8008972:	0668      	lsls	r0, r5, #25
 8008974:	d5fb      	bpl.n	800896e <_printf_i+0x1be>
 8008976:	8019      	strh	r1, [r3, #0]
 8008978:	2300      	movs	r3, #0
 800897a:	4616      	mov	r6, r2
 800897c:	6123      	str	r3, [r4, #16]
 800897e:	e7bc      	b.n	80088fa <_printf_i+0x14a>
 8008980:	6833      	ldr	r3, [r6, #0]
 8008982:	2100      	movs	r1, #0
 8008984:	1d1a      	adds	r2, r3, #4
 8008986:	6032      	str	r2, [r6, #0]
 8008988:	681e      	ldr	r6, [r3, #0]
 800898a:	6862      	ldr	r2, [r4, #4]
 800898c:	4630      	mov	r0, r6
 800898e:	f000 fbe4 	bl	800915a <memchr>
 8008992:	b108      	cbz	r0, 8008998 <_printf_i+0x1e8>
 8008994:	1b80      	subs	r0, r0, r6
 8008996:	6060      	str	r0, [r4, #4]
 8008998:	6863      	ldr	r3, [r4, #4]
 800899a:	6123      	str	r3, [r4, #16]
 800899c:	2300      	movs	r3, #0
 800899e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089a2:	e7aa      	b.n	80088fa <_printf_i+0x14a>
 80089a4:	4632      	mov	r2, r6
 80089a6:	4649      	mov	r1, r9
 80089a8:	4640      	mov	r0, r8
 80089aa:	6923      	ldr	r3, [r4, #16]
 80089ac:	47d0      	blx	sl
 80089ae:	3001      	adds	r0, #1
 80089b0:	d0ad      	beq.n	800890e <_printf_i+0x15e>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	079b      	lsls	r3, r3, #30
 80089b6:	d413      	bmi.n	80089e0 <_printf_i+0x230>
 80089b8:	68e0      	ldr	r0, [r4, #12]
 80089ba:	9b03      	ldr	r3, [sp, #12]
 80089bc:	4298      	cmp	r0, r3
 80089be:	bfb8      	it	lt
 80089c0:	4618      	movlt	r0, r3
 80089c2:	e7a6      	b.n	8008912 <_printf_i+0x162>
 80089c4:	2301      	movs	r3, #1
 80089c6:	4632      	mov	r2, r6
 80089c8:	4649      	mov	r1, r9
 80089ca:	4640      	mov	r0, r8
 80089cc:	47d0      	blx	sl
 80089ce:	3001      	adds	r0, #1
 80089d0:	d09d      	beq.n	800890e <_printf_i+0x15e>
 80089d2:	3501      	adds	r5, #1
 80089d4:	68e3      	ldr	r3, [r4, #12]
 80089d6:	9903      	ldr	r1, [sp, #12]
 80089d8:	1a5b      	subs	r3, r3, r1
 80089da:	42ab      	cmp	r3, r5
 80089dc:	dcf2      	bgt.n	80089c4 <_printf_i+0x214>
 80089de:	e7eb      	b.n	80089b8 <_printf_i+0x208>
 80089e0:	2500      	movs	r5, #0
 80089e2:	f104 0619 	add.w	r6, r4, #25
 80089e6:	e7f5      	b.n	80089d4 <_printf_i+0x224>
 80089e8:	0800e1a2 	.word	0x0800e1a2
 80089ec:	0800e1b3 	.word	0x0800e1b3

080089f0 <_scanf_float>:
 80089f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f4:	b087      	sub	sp, #28
 80089f6:	9303      	str	r3, [sp, #12]
 80089f8:	688b      	ldr	r3, [r1, #8]
 80089fa:	4617      	mov	r7, r2
 80089fc:	1e5a      	subs	r2, r3, #1
 80089fe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008a02:	bf82      	ittt	hi
 8008a04:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008a08:	eb03 0b05 	addhi.w	fp, r3, r5
 8008a0c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008a10:	460a      	mov	r2, r1
 8008a12:	f04f 0500 	mov.w	r5, #0
 8008a16:	bf88      	it	hi
 8008a18:	608b      	strhi	r3, [r1, #8]
 8008a1a:	680b      	ldr	r3, [r1, #0]
 8008a1c:	4680      	mov	r8, r0
 8008a1e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008a22:	f842 3b1c 	str.w	r3, [r2], #28
 8008a26:	460c      	mov	r4, r1
 8008a28:	bf98      	it	ls
 8008a2a:	f04f 0b00 	movls.w	fp, #0
 8008a2e:	4616      	mov	r6, r2
 8008a30:	46aa      	mov	sl, r5
 8008a32:	46a9      	mov	r9, r5
 8008a34:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008a38:	9201      	str	r2, [sp, #4]
 8008a3a:	9502      	str	r5, [sp, #8]
 8008a3c:	68a2      	ldr	r2, [r4, #8]
 8008a3e:	b152      	cbz	r2, 8008a56 <_scanf_float+0x66>
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b4e      	cmp	r3, #78	@ 0x4e
 8008a46:	d865      	bhi.n	8008b14 <_scanf_float+0x124>
 8008a48:	2b40      	cmp	r3, #64	@ 0x40
 8008a4a:	d83d      	bhi.n	8008ac8 <_scanf_float+0xd8>
 8008a4c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008a50:	b2c8      	uxtb	r0, r1
 8008a52:	280e      	cmp	r0, #14
 8008a54:	d93b      	bls.n	8008ace <_scanf_float+0xde>
 8008a56:	f1b9 0f00 	cmp.w	r9, #0
 8008a5a:	d003      	beq.n	8008a64 <_scanf_float+0x74>
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a62:	6023      	str	r3, [r4, #0]
 8008a64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a68:	f1ba 0f01 	cmp.w	sl, #1
 8008a6c:	f200 8118 	bhi.w	8008ca0 <_scanf_float+0x2b0>
 8008a70:	9b01      	ldr	r3, [sp, #4]
 8008a72:	429e      	cmp	r6, r3
 8008a74:	f200 8109 	bhi.w	8008c8a <_scanf_float+0x29a>
 8008a78:	2001      	movs	r0, #1
 8008a7a:	b007      	add	sp, #28
 8008a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a80:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008a84:	2a0d      	cmp	r2, #13
 8008a86:	d8e6      	bhi.n	8008a56 <_scanf_float+0x66>
 8008a88:	a101      	add	r1, pc, #4	@ (adr r1, 8008a90 <_scanf_float+0xa0>)
 8008a8a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a8e:	bf00      	nop
 8008a90:	08008bd7 	.word	0x08008bd7
 8008a94:	08008a57 	.word	0x08008a57
 8008a98:	08008a57 	.word	0x08008a57
 8008a9c:	08008a57 	.word	0x08008a57
 8008aa0:	08008c37 	.word	0x08008c37
 8008aa4:	08008c0f 	.word	0x08008c0f
 8008aa8:	08008a57 	.word	0x08008a57
 8008aac:	08008a57 	.word	0x08008a57
 8008ab0:	08008be5 	.word	0x08008be5
 8008ab4:	08008a57 	.word	0x08008a57
 8008ab8:	08008a57 	.word	0x08008a57
 8008abc:	08008a57 	.word	0x08008a57
 8008ac0:	08008a57 	.word	0x08008a57
 8008ac4:	08008b9d 	.word	0x08008b9d
 8008ac8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008acc:	e7da      	b.n	8008a84 <_scanf_float+0x94>
 8008ace:	290e      	cmp	r1, #14
 8008ad0:	d8c1      	bhi.n	8008a56 <_scanf_float+0x66>
 8008ad2:	a001      	add	r0, pc, #4	@ (adr r0, 8008ad8 <_scanf_float+0xe8>)
 8008ad4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ad8:	08008b8d 	.word	0x08008b8d
 8008adc:	08008a57 	.word	0x08008a57
 8008ae0:	08008b8d 	.word	0x08008b8d
 8008ae4:	08008c23 	.word	0x08008c23
 8008ae8:	08008a57 	.word	0x08008a57
 8008aec:	08008b35 	.word	0x08008b35
 8008af0:	08008b73 	.word	0x08008b73
 8008af4:	08008b73 	.word	0x08008b73
 8008af8:	08008b73 	.word	0x08008b73
 8008afc:	08008b73 	.word	0x08008b73
 8008b00:	08008b73 	.word	0x08008b73
 8008b04:	08008b73 	.word	0x08008b73
 8008b08:	08008b73 	.word	0x08008b73
 8008b0c:	08008b73 	.word	0x08008b73
 8008b10:	08008b73 	.word	0x08008b73
 8008b14:	2b6e      	cmp	r3, #110	@ 0x6e
 8008b16:	d809      	bhi.n	8008b2c <_scanf_float+0x13c>
 8008b18:	2b60      	cmp	r3, #96	@ 0x60
 8008b1a:	d8b1      	bhi.n	8008a80 <_scanf_float+0x90>
 8008b1c:	2b54      	cmp	r3, #84	@ 0x54
 8008b1e:	d07b      	beq.n	8008c18 <_scanf_float+0x228>
 8008b20:	2b59      	cmp	r3, #89	@ 0x59
 8008b22:	d198      	bne.n	8008a56 <_scanf_float+0x66>
 8008b24:	2d07      	cmp	r5, #7
 8008b26:	d196      	bne.n	8008a56 <_scanf_float+0x66>
 8008b28:	2508      	movs	r5, #8
 8008b2a:	e02c      	b.n	8008b86 <_scanf_float+0x196>
 8008b2c:	2b74      	cmp	r3, #116	@ 0x74
 8008b2e:	d073      	beq.n	8008c18 <_scanf_float+0x228>
 8008b30:	2b79      	cmp	r3, #121	@ 0x79
 8008b32:	e7f6      	b.n	8008b22 <_scanf_float+0x132>
 8008b34:	6821      	ldr	r1, [r4, #0]
 8008b36:	05c8      	lsls	r0, r1, #23
 8008b38:	d51b      	bpl.n	8008b72 <_scanf_float+0x182>
 8008b3a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008b3e:	6021      	str	r1, [r4, #0]
 8008b40:	f109 0901 	add.w	r9, r9, #1
 8008b44:	f1bb 0f00 	cmp.w	fp, #0
 8008b48:	d003      	beq.n	8008b52 <_scanf_float+0x162>
 8008b4a:	3201      	adds	r2, #1
 8008b4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b50:	60a2      	str	r2, [r4, #8]
 8008b52:	68a3      	ldr	r3, [r4, #8]
 8008b54:	3b01      	subs	r3, #1
 8008b56:	60a3      	str	r3, [r4, #8]
 8008b58:	6923      	ldr	r3, [r4, #16]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	6123      	str	r3, [r4, #16]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	607b      	str	r3, [r7, #4]
 8008b66:	f340 8087 	ble.w	8008c78 <_scanf_float+0x288>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	603b      	str	r3, [r7, #0]
 8008b70:	e764      	b.n	8008a3c <_scanf_float+0x4c>
 8008b72:	eb1a 0105 	adds.w	r1, sl, r5
 8008b76:	f47f af6e 	bne.w	8008a56 <_scanf_float+0x66>
 8008b7a:	460d      	mov	r5, r1
 8008b7c:	468a      	mov	sl, r1
 8008b7e:	6822      	ldr	r2, [r4, #0]
 8008b80:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008b84:	6022      	str	r2, [r4, #0]
 8008b86:	f806 3b01 	strb.w	r3, [r6], #1
 8008b8a:	e7e2      	b.n	8008b52 <_scanf_float+0x162>
 8008b8c:	6822      	ldr	r2, [r4, #0]
 8008b8e:	0610      	lsls	r0, r2, #24
 8008b90:	f57f af61 	bpl.w	8008a56 <_scanf_float+0x66>
 8008b94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b98:	6022      	str	r2, [r4, #0]
 8008b9a:	e7f4      	b.n	8008b86 <_scanf_float+0x196>
 8008b9c:	f1ba 0f00 	cmp.w	sl, #0
 8008ba0:	d10e      	bne.n	8008bc0 <_scanf_float+0x1d0>
 8008ba2:	f1b9 0f00 	cmp.w	r9, #0
 8008ba6:	d10e      	bne.n	8008bc6 <_scanf_float+0x1d6>
 8008ba8:	6822      	ldr	r2, [r4, #0]
 8008baa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008bae:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008bb2:	d108      	bne.n	8008bc6 <_scanf_float+0x1d6>
 8008bb4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008bb8:	f04f 0a01 	mov.w	sl, #1
 8008bbc:	6022      	str	r2, [r4, #0]
 8008bbe:	e7e2      	b.n	8008b86 <_scanf_float+0x196>
 8008bc0:	f1ba 0f02 	cmp.w	sl, #2
 8008bc4:	d055      	beq.n	8008c72 <_scanf_float+0x282>
 8008bc6:	2d01      	cmp	r5, #1
 8008bc8:	d002      	beq.n	8008bd0 <_scanf_float+0x1e0>
 8008bca:	2d04      	cmp	r5, #4
 8008bcc:	f47f af43 	bne.w	8008a56 <_scanf_float+0x66>
 8008bd0:	3501      	adds	r5, #1
 8008bd2:	b2ed      	uxtb	r5, r5
 8008bd4:	e7d7      	b.n	8008b86 <_scanf_float+0x196>
 8008bd6:	f1ba 0f01 	cmp.w	sl, #1
 8008bda:	f47f af3c 	bne.w	8008a56 <_scanf_float+0x66>
 8008bde:	f04f 0a02 	mov.w	sl, #2
 8008be2:	e7d0      	b.n	8008b86 <_scanf_float+0x196>
 8008be4:	b97d      	cbnz	r5, 8008c06 <_scanf_float+0x216>
 8008be6:	f1b9 0f00 	cmp.w	r9, #0
 8008bea:	f47f af37 	bne.w	8008a5c <_scanf_float+0x6c>
 8008bee:	6822      	ldr	r2, [r4, #0]
 8008bf0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008bf4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008bf8:	f040 8103 	bne.w	8008e02 <_scanf_float+0x412>
 8008bfc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c00:	2501      	movs	r5, #1
 8008c02:	6022      	str	r2, [r4, #0]
 8008c04:	e7bf      	b.n	8008b86 <_scanf_float+0x196>
 8008c06:	2d03      	cmp	r5, #3
 8008c08:	d0e2      	beq.n	8008bd0 <_scanf_float+0x1e0>
 8008c0a:	2d05      	cmp	r5, #5
 8008c0c:	e7de      	b.n	8008bcc <_scanf_float+0x1dc>
 8008c0e:	2d02      	cmp	r5, #2
 8008c10:	f47f af21 	bne.w	8008a56 <_scanf_float+0x66>
 8008c14:	2503      	movs	r5, #3
 8008c16:	e7b6      	b.n	8008b86 <_scanf_float+0x196>
 8008c18:	2d06      	cmp	r5, #6
 8008c1a:	f47f af1c 	bne.w	8008a56 <_scanf_float+0x66>
 8008c1e:	2507      	movs	r5, #7
 8008c20:	e7b1      	b.n	8008b86 <_scanf_float+0x196>
 8008c22:	6822      	ldr	r2, [r4, #0]
 8008c24:	0591      	lsls	r1, r2, #22
 8008c26:	f57f af16 	bpl.w	8008a56 <_scanf_float+0x66>
 8008c2a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008c2e:	6022      	str	r2, [r4, #0]
 8008c30:	f8cd 9008 	str.w	r9, [sp, #8]
 8008c34:	e7a7      	b.n	8008b86 <_scanf_float+0x196>
 8008c36:	6822      	ldr	r2, [r4, #0]
 8008c38:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008c3c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008c40:	d006      	beq.n	8008c50 <_scanf_float+0x260>
 8008c42:	0550      	lsls	r0, r2, #21
 8008c44:	f57f af07 	bpl.w	8008a56 <_scanf_float+0x66>
 8008c48:	f1b9 0f00 	cmp.w	r9, #0
 8008c4c:	f000 80d9 	beq.w	8008e02 <_scanf_float+0x412>
 8008c50:	0591      	lsls	r1, r2, #22
 8008c52:	bf58      	it	pl
 8008c54:	9902      	ldrpl	r1, [sp, #8]
 8008c56:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c5a:	bf58      	it	pl
 8008c5c:	eba9 0101 	subpl.w	r1, r9, r1
 8008c60:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008c64:	f04f 0900 	mov.w	r9, #0
 8008c68:	bf58      	it	pl
 8008c6a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008c6e:	6022      	str	r2, [r4, #0]
 8008c70:	e789      	b.n	8008b86 <_scanf_float+0x196>
 8008c72:	f04f 0a03 	mov.w	sl, #3
 8008c76:	e786      	b.n	8008b86 <_scanf_float+0x196>
 8008c78:	4639      	mov	r1, r7
 8008c7a:	4640      	mov	r0, r8
 8008c7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008c80:	4798      	blx	r3
 8008c82:	2800      	cmp	r0, #0
 8008c84:	f43f aeda 	beq.w	8008a3c <_scanf_float+0x4c>
 8008c88:	e6e5      	b.n	8008a56 <_scanf_float+0x66>
 8008c8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c8e:	463a      	mov	r2, r7
 8008c90:	4640      	mov	r0, r8
 8008c92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c96:	4798      	blx	r3
 8008c98:	6923      	ldr	r3, [r4, #16]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	6123      	str	r3, [r4, #16]
 8008c9e:	e6e7      	b.n	8008a70 <_scanf_float+0x80>
 8008ca0:	1e6b      	subs	r3, r5, #1
 8008ca2:	2b06      	cmp	r3, #6
 8008ca4:	d824      	bhi.n	8008cf0 <_scanf_float+0x300>
 8008ca6:	2d02      	cmp	r5, #2
 8008ca8:	d836      	bhi.n	8008d18 <_scanf_float+0x328>
 8008caa:	9b01      	ldr	r3, [sp, #4]
 8008cac:	429e      	cmp	r6, r3
 8008cae:	f67f aee3 	bls.w	8008a78 <_scanf_float+0x88>
 8008cb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cb6:	463a      	mov	r2, r7
 8008cb8:	4640      	mov	r0, r8
 8008cba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cbe:	4798      	blx	r3
 8008cc0:	6923      	ldr	r3, [r4, #16]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	6123      	str	r3, [r4, #16]
 8008cc6:	e7f0      	b.n	8008caa <_scanf_float+0x2ba>
 8008cc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ccc:	463a      	mov	r2, r7
 8008cce:	4640      	mov	r0, r8
 8008cd0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008cd4:	4798      	blx	r3
 8008cd6:	6923      	ldr	r3, [r4, #16]
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	6123      	str	r3, [r4, #16]
 8008cdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ce0:	fa5f fa8a 	uxtb.w	sl, sl
 8008ce4:	f1ba 0f02 	cmp.w	sl, #2
 8008ce8:	d1ee      	bne.n	8008cc8 <_scanf_float+0x2d8>
 8008cea:	3d03      	subs	r5, #3
 8008cec:	b2ed      	uxtb	r5, r5
 8008cee:	1b76      	subs	r6, r6, r5
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	05da      	lsls	r2, r3, #23
 8008cf4:	d530      	bpl.n	8008d58 <_scanf_float+0x368>
 8008cf6:	055b      	lsls	r3, r3, #21
 8008cf8:	d511      	bpl.n	8008d1e <_scanf_float+0x32e>
 8008cfa:	9b01      	ldr	r3, [sp, #4]
 8008cfc:	429e      	cmp	r6, r3
 8008cfe:	f67f aebb 	bls.w	8008a78 <_scanf_float+0x88>
 8008d02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d06:	463a      	mov	r2, r7
 8008d08:	4640      	mov	r0, r8
 8008d0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d0e:	4798      	blx	r3
 8008d10:	6923      	ldr	r3, [r4, #16]
 8008d12:	3b01      	subs	r3, #1
 8008d14:	6123      	str	r3, [r4, #16]
 8008d16:	e7f0      	b.n	8008cfa <_scanf_float+0x30a>
 8008d18:	46aa      	mov	sl, r5
 8008d1a:	46b3      	mov	fp, r6
 8008d1c:	e7de      	b.n	8008cdc <_scanf_float+0x2ec>
 8008d1e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008d22:	6923      	ldr	r3, [r4, #16]
 8008d24:	2965      	cmp	r1, #101	@ 0x65
 8008d26:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d2a:	f106 35ff 	add.w	r5, r6, #4294967295
 8008d2e:	6123      	str	r3, [r4, #16]
 8008d30:	d00c      	beq.n	8008d4c <_scanf_float+0x35c>
 8008d32:	2945      	cmp	r1, #69	@ 0x45
 8008d34:	d00a      	beq.n	8008d4c <_scanf_float+0x35c>
 8008d36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d3a:	463a      	mov	r2, r7
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	4798      	blx	r3
 8008d40:	6923      	ldr	r3, [r4, #16]
 8008d42:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008d46:	3b01      	subs	r3, #1
 8008d48:	1eb5      	subs	r5, r6, #2
 8008d4a:	6123      	str	r3, [r4, #16]
 8008d4c:	463a      	mov	r2, r7
 8008d4e:	4640      	mov	r0, r8
 8008d50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d54:	4798      	blx	r3
 8008d56:	462e      	mov	r6, r5
 8008d58:	6822      	ldr	r2, [r4, #0]
 8008d5a:	f012 0210 	ands.w	r2, r2, #16
 8008d5e:	d001      	beq.n	8008d64 <_scanf_float+0x374>
 8008d60:	2000      	movs	r0, #0
 8008d62:	e68a      	b.n	8008a7a <_scanf_float+0x8a>
 8008d64:	7032      	strb	r2, [r6, #0]
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d70:	d11c      	bne.n	8008dac <_scanf_float+0x3bc>
 8008d72:	9b02      	ldr	r3, [sp, #8]
 8008d74:	454b      	cmp	r3, r9
 8008d76:	eba3 0209 	sub.w	r2, r3, r9
 8008d7a:	d123      	bne.n	8008dc4 <_scanf_float+0x3d4>
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	4640      	mov	r0, r8
 8008d80:	9901      	ldr	r1, [sp, #4]
 8008d82:	f002 fbed 	bl	800b560 <_strtod_r>
 8008d86:	9b03      	ldr	r3, [sp, #12]
 8008d88:	6825      	ldr	r5, [r4, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f015 0f02 	tst.w	r5, #2
 8008d90:	4606      	mov	r6, r0
 8008d92:	460f      	mov	r7, r1
 8008d94:	f103 0204 	add.w	r2, r3, #4
 8008d98:	d01f      	beq.n	8008dda <_scanf_float+0x3ea>
 8008d9a:	9903      	ldr	r1, [sp, #12]
 8008d9c:	600a      	str	r2, [r1, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	e9c3 6700 	strd	r6, r7, [r3]
 8008da4:	68e3      	ldr	r3, [r4, #12]
 8008da6:	3301      	adds	r3, #1
 8008da8:	60e3      	str	r3, [r4, #12]
 8008daa:	e7d9      	b.n	8008d60 <_scanf_float+0x370>
 8008dac:	9b04      	ldr	r3, [sp, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0e4      	beq.n	8008d7c <_scanf_float+0x38c>
 8008db2:	9905      	ldr	r1, [sp, #20]
 8008db4:	230a      	movs	r3, #10
 8008db6:	4640      	mov	r0, r8
 8008db8:	3101      	adds	r1, #1
 8008dba:	f002 fc51 	bl	800b660 <_strtol_r>
 8008dbe:	9b04      	ldr	r3, [sp, #16]
 8008dc0:	9e05      	ldr	r6, [sp, #20]
 8008dc2:	1ac2      	subs	r2, r0, r3
 8008dc4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008dc8:	429e      	cmp	r6, r3
 8008dca:	bf28      	it	cs
 8008dcc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	490d      	ldr	r1, [pc, #52]	@ (8008e08 <_scanf_float+0x418>)
 8008dd4:	f000 f8de 	bl	8008f94 <siprintf>
 8008dd8:	e7d0      	b.n	8008d7c <_scanf_float+0x38c>
 8008dda:	076d      	lsls	r5, r5, #29
 8008ddc:	d4dd      	bmi.n	8008d9a <_scanf_float+0x3aa>
 8008dde:	9d03      	ldr	r5, [sp, #12]
 8008de0:	602a      	str	r2, [r5, #0]
 8008de2:	681d      	ldr	r5, [r3, #0]
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	f7f7 fe10 	bl	8000a0c <__aeabi_dcmpun>
 8008dec:	b120      	cbz	r0, 8008df8 <_scanf_float+0x408>
 8008dee:	4807      	ldr	r0, [pc, #28]	@ (8008e0c <_scanf_float+0x41c>)
 8008df0:	f000 f9c2 	bl	8009178 <nanf>
 8008df4:	6028      	str	r0, [r5, #0]
 8008df6:	e7d5      	b.n	8008da4 <_scanf_float+0x3b4>
 8008df8:	4630      	mov	r0, r6
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	f7f7 fe64 	bl	8000ac8 <__aeabi_d2f>
 8008e00:	e7f8      	b.n	8008df4 <_scanf_float+0x404>
 8008e02:	f04f 0900 	mov.w	r9, #0
 8008e06:	e62d      	b.n	8008a64 <_scanf_float+0x74>
 8008e08:	0800e1c4 	.word	0x0800e1c4
 8008e0c:	0800e55d 	.word	0x0800e55d

08008e10 <std>:
 8008e10:	2300      	movs	r3, #0
 8008e12:	b510      	push	{r4, lr}
 8008e14:	4604      	mov	r4, r0
 8008e16:	e9c0 3300 	strd	r3, r3, [r0]
 8008e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e1e:	6083      	str	r3, [r0, #8]
 8008e20:	8181      	strh	r1, [r0, #12]
 8008e22:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e24:	81c2      	strh	r2, [r0, #14]
 8008e26:	6183      	str	r3, [r0, #24]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	2208      	movs	r2, #8
 8008e2c:	305c      	adds	r0, #92	@ 0x5c
 8008e2e:	f000 f914 	bl	800905a <memset>
 8008e32:	4b0d      	ldr	r3, [pc, #52]	@ (8008e68 <std+0x58>)
 8008e34:	6224      	str	r4, [r4, #32]
 8008e36:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e38:	4b0c      	ldr	r3, [pc, #48]	@ (8008e6c <std+0x5c>)
 8008e3a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8008e70 <std+0x60>)
 8008e3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e40:	4b0c      	ldr	r3, [pc, #48]	@ (8008e74 <std+0x64>)
 8008e42:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e44:	4b0c      	ldr	r3, [pc, #48]	@ (8008e78 <std+0x68>)
 8008e46:	429c      	cmp	r4, r3
 8008e48:	d006      	beq.n	8008e58 <std+0x48>
 8008e4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e4e:	4294      	cmp	r4, r2
 8008e50:	d002      	beq.n	8008e58 <std+0x48>
 8008e52:	33d0      	adds	r3, #208	@ 0xd0
 8008e54:	429c      	cmp	r4, r3
 8008e56:	d105      	bne.n	8008e64 <std+0x54>
 8008e58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e60:	f000 b978 	b.w	8009154 <__retarget_lock_init_recursive>
 8008e64:	bd10      	pop	{r4, pc}
 8008e66:	bf00      	nop
 8008e68:	08008fd5 	.word	0x08008fd5
 8008e6c:	08008ff7 	.word	0x08008ff7
 8008e70:	0800902f 	.word	0x0800902f
 8008e74:	08009053 	.word	0x08009053
 8008e78:	2000061c 	.word	0x2000061c

08008e7c <stdio_exit_handler>:
 8008e7c:	4a02      	ldr	r2, [pc, #8]	@ (8008e88 <stdio_exit_handler+0xc>)
 8008e7e:	4903      	ldr	r1, [pc, #12]	@ (8008e8c <stdio_exit_handler+0x10>)
 8008e80:	4803      	ldr	r0, [pc, #12]	@ (8008e90 <stdio_exit_handler+0x14>)
 8008e82:	f000 b869 	b.w	8008f58 <_fwalk_sglue>
 8008e86:	bf00      	nop
 8008e88:	2000002c 	.word	0x2000002c
 8008e8c:	0800ba15 	.word	0x0800ba15
 8008e90:	2000003c 	.word	0x2000003c

08008e94 <cleanup_stdio>:
 8008e94:	6841      	ldr	r1, [r0, #4]
 8008e96:	4b0c      	ldr	r3, [pc, #48]	@ (8008ec8 <cleanup_stdio+0x34>)
 8008e98:	b510      	push	{r4, lr}
 8008e9a:	4299      	cmp	r1, r3
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	d001      	beq.n	8008ea4 <cleanup_stdio+0x10>
 8008ea0:	f002 fdb8 	bl	800ba14 <_fflush_r>
 8008ea4:	68a1      	ldr	r1, [r4, #8]
 8008ea6:	4b09      	ldr	r3, [pc, #36]	@ (8008ecc <cleanup_stdio+0x38>)
 8008ea8:	4299      	cmp	r1, r3
 8008eaa:	d002      	beq.n	8008eb2 <cleanup_stdio+0x1e>
 8008eac:	4620      	mov	r0, r4
 8008eae:	f002 fdb1 	bl	800ba14 <_fflush_r>
 8008eb2:	68e1      	ldr	r1, [r4, #12]
 8008eb4:	4b06      	ldr	r3, [pc, #24]	@ (8008ed0 <cleanup_stdio+0x3c>)
 8008eb6:	4299      	cmp	r1, r3
 8008eb8:	d004      	beq.n	8008ec4 <cleanup_stdio+0x30>
 8008eba:	4620      	mov	r0, r4
 8008ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ec0:	f002 bda8 	b.w	800ba14 <_fflush_r>
 8008ec4:	bd10      	pop	{r4, pc}
 8008ec6:	bf00      	nop
 8008ec8:	2000061c 	.word	0x2000061c
 8008ecc:	20000684 	.word	0x20000684
 8008ed0:	200006ec 	.word	0x200006ec

08008ed4 <global_stdio_init.part.0>:
 8008ed4:	b510      	push	{r4, lr}
 8008ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8008f04 <global_stdio_init.part.0+0x30>)
 8008ed8:	4c0b      	ldr	r4, [pc, #44]	@ (8008f08 <global_stdio_init.part.0+0x34>)
 8008eda:	4a0c      	ldr	r2, [pc, #48]	@ (8008f0c <global_stdio_init.part.0+0x38>)
 8008edc:	4620      	mov	r0, r4
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	2104      	movs	r1, #4
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f7ff ff94 	bl	8008e10 <std>
 8008ee8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008eec:	2201      	movs	r2, #1
 8008eee:	2109      	movs	r1, #9
 8008ef0:	f7ff ff8e 	bl	8008e10 <std>
 8008ef4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ef8:	2202      	movs	r2, #2
 8008efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008efe:	2112      	movs	r1, #18
 8008f00:	f7ff bf86 	b.w	8008e10 <std>
 8008f04:	20000754 	.word	0x20000754
 8008f08:	2000061c 	.word	0x2000061c
 8008f0c:	08008e7d 	.word	0x08008e7d

08008f10 <__sfp_lock_acquire>:
 8008f10:	4801      	ldr	r0, [pc, #4]	@ (8008f18 <__sfp_lock_acquire+0x8>)
 8008f12:	f000 b920 	b.w	8009156 <__retarget_lock_acquire_recursive>
 8008f16:	bf00      	nop
 8008f18:	2000075d 	.word	0x2000075d

08008f1c <__sfp_lock_release>:
 8008f1c:	4801      	ldr	r0, [pc, #4]	@ (8008f24 <__sfp_lock_release+0x8>)
 8008f1e:	f000 b91b 	b.w	8009158 <__retarget_lock_release_recursive>
 8008f22:	bf00      	nop
 8008f24:	2000075d 	.word	0x2000075d

08008f28 <__sinit>:
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	f7ff fff0 	bl	8008f10 <__sfp_lock_acquire>
 8008f30:	6a23      	ldr	r3, [r4, #32]
 8008f32:	b11b      	cbz	r3, 8008f3c <__sinit+0x14>
 8008f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f38:	f7ff bff0 	b.w	8008f1c <__sfp_lock_release>
 8008f3c:	4b04      	ldr	r3, [pc, #16]	@ (8008f50 <__sinit+0x28>)
 8008f3e:	6223      	str	r3, [r4, #32]
 8008f40:	4b04      	ldr	r3, [pc, #16]	@ (8008f54 <__sinit+0x2c>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1f5      	bne.n	8008f34 <__sinit+0xc>
 8008f48:	f7ff ffc4 	bl	8008ed4 <global_stdio_init.part.0>
 8008f4c:	e7f2      	b.n	8008f34 <__sinit+0xc>
 8008f4e:	bf00      	nop
 8008f50:	08008e95 	.word	0x08008e95
 8008f54:	20000754 	.word	0x20000754

08008f58 <_fwalk_sglue>:
 8008f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f5c:	4607      	mov	r7, r0
 8008f5e:	4688      	mov	r8, r1
 8008f60:	4614      	mov	r4, r2
 8008f62:	2600      	movs	r6, #0
 8008f64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f68:	f1b9 0901 	subs.w	r9, r9, #1
 8008f6c:	d505      	bpl.n	8008f7a <_fwalk_sglue+0x22>
 8008f6e:	6824      	ldr	r4, [r4, #0]
 8008f70:	2c00      	cmp	r4, #0
 8008f72:	d1f7      	bne.n	8008f64 <_fwalk_sglue+0xc>
 8008f74:	4630      	mov	r0, r6
 8008f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f7a:	89ab      	ldrh	r3, [r5, #12]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d907      	bls.n	8008f90 <_fwalk_sglue+0x38>
 8008f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f84:	3301      	adds	r3, #1
 8008f86:	d003      	beq.n	8008f90 <_fwalk_sglue+0x38>
 8008f88:	4629      	mov	r1, r5
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	47c0      	blx	r8
 8008f8e:	4306      	orrs	r6, r0
 8008f90:	3568      	adds	r5, #104	@ 0x68
 8008f92:	e7e9      	b.n	8008f68 <_fwalk_sglue+0x10>

08008f94 <siprintf>:
 8008f94:	b40e      	push	{r1, r2, r3}
 8008f96:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008f9a:	b500      	push	{lr}
 8008f9c:	b09c      	sub	sp, #112	@ 0x70
 8008f9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008fa0:	9002      	str	r0, [sp, #8]
 8008fa2:	9006      	str	r0, [sp, #24]
 8008fa4:	9107      	str	r1, [sp, #28]
 8008fa6:	9104      	str	r1, [sp, #16]
 8008fa8:	4808      	ldr	r0, [pc, #32]	@ (8008fcc <siprintf+0x38>)
 8008faa:	4909      	ldr	r1, [pc, #36]	@ (8008fd0 <siprintf+0x3c>)
 8008fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fb0:	9105      	str	r1, [sp, #20]
 8008fb2:	6800      	ldr	r0, [r0, #0]
 8008fb4:	a902      	add	r1, sp, #8
 8008fb6:	9301      	str	r3, [sp, #4]
 8008fb8:	f002 fbb0 	bl	800b71c <_svfiprintf_r>
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	9b02      	ldr	r3, [sp, #8]
 8008fc0:	701a      	strb	r2, [r3, #0]
 8008fc2:	b01c      	add	sp, #112	@ 0x70
 8008fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fc8:	b003      	add	sp, #12
 8008fca:	4770      	bx	lr
 8008fcc:	20000038 	.word	0x20000038
 8008fd0:	ffff0208 	.word	0xffff0208

08008fd4 <__sread>:
 8008fd4:	b510      	push	{r4, lr}
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fdc:	f000 f86c 	bl	80090b8 <_read_r>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	bfab      	itete	ge
 8008fe4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8008fe8:	181b      	addge	r3, r3, r0
 8008fea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008fee:	bfac      	ite	ge
 8008ff0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008ff2:	81a3      	strhlt	r3, [r4, #12]
 8008ff4:	bd10      	pop	{r4, pc}

08008ff6 <__swrite>:
 8008ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffa:	461f      	mov	r7, r3
 8008ffc:	898b      	ldrh	r3, [r1, #12]
 8008ffe:	4605      	mov	r5, r0
 8009000:	05db      	lsls	r3, r3, #23
 8009002:	460c      	mov	r4, r1
 8009004:	4616      	mov	r6, r2
 8009006:	d505      	bpl.n	8009014 <__swrite+0x1e>
 8009008:	2302      	movs	r3, #2
 800900a:	2200      	movs	r2, #0
 800900c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009010:	f000 f840 	bl	8009094 <_lseek_r>
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	4632      	mov	r2, r6
 8009018:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800901c:	81a3      	strh	r3, [r4, #12]
 800901e:	4628      	mov	r0, r5
 8009020:	463b      	mov	r3, r7
 8009022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800902a:	f000 b857 	b.w	80090dc <_write_r>

0800902e <__sseek>:
 800902e:	b510      	push	{r4, lr}
 8009030:	460c      	mov	r4, r1
 8009032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009036:	f000 f82d 	bl	8009094 <_lseek_r>
 800903a:	1c43      	adds	r3, r0, #1
 800903c:	89a3      	ldrh	r3, [r4, #12]
 800903e:	bf15      	itete	ne
 8009040:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009042:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009046:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800904a:	81a3      	strheq	r3, [r4, #12]
 800904c:	bf18      	it	ne
 800904e:	81a3      	strhne	r3, [r4, #12]
 8009050:	bd10      	pop	{r4, pc}

08009052 <__sclose>:
 8009052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009056:	f000 b80d 	b.w	8009074 <_close_r>

0800905a <memset>:
 800905a:	4603      	mov	r3, r0
 800905c:	4402      	add	r2, r0
 800905e:	4293      	cmp	r3, r2
 8009060:	d100      	bne.n	8009064 <memset+0xa>
 8009062:	4770      	bx	lr
 8009064:	f803 1b01 	strb.w	r1, [r3], #1
 8009068:	e7f9      	b.n	800905e <memset+0x4>
	...

0800906c <_localeconv_r>:
 800906c:	4800      	ldr	r0, [pc, #0]	@ (8009070 <_localeconv_r+0x4>)
 800906e:	4770      	bx	lr
 8009070:	20000178 	.word	0x20000178

08009074 <_close_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	2300      	movs	r3, #0
 8009078:	4d05      	ldr	r5, [pc, #20]	@ (8009090 <_close_r+0x1c>)
 800907a:	4604      	mov	r4, r0
 800907c:	4608      	mov	r0, r1
 800907e:	602b      	str	r3, [r5, #0]
 8009080:	f7fb f8c1 	bl	8004206 <_close>
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	d102      	bne.n	800908e <_close_r+0x1a>
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	b103      	cbz	r3, 800908e <_close_r+0x1a>
 800908c:	6023      	str	r3, [r4, #0]
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	20000758 	.word	0x20000758

08009094 <_lseek_r>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	4604      	mov	r4, r0
 8009098:	4608      	mov	r0, r1
 800909a:	4611      	mov	r1, r2
 800909c:	2200      	movs	r2, #0
 800909e:	4d05      	ldr	r5, [pc, #20]	@ (80090b4 <_lseek_r+0x20>)
 80090a0:	602a      	str	r2, [r5, #0]
 80090a2:	461a      	mov	r2, r3
 80090a4:	f7fb f8d3 	bl	800424e <_lseek>
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	d102      	bne.n	80090b2 <_lseek_r+0x1e>
 80090ac:	682b      	ldr	r3, [r5, #0]
 80090ae:	b103      	cbz	r3, 80090b2 <_lseek_r+0x1e>
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	bd38      	pop	{r3, r4, r5, pc}
 80090b4:	20000758 	.word	0x20000758

080090b8 <_read_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	4604      	mov	r4, r0
 80090bc:	4608      	mov	r0, r1
 80090be:	4611      	mov	r1, r2
 80090c0:	2200      	movs	r2, #0
 80090c2:	4d05      	ldr	r5, [pc, #20]	@ (80090d8 <_read_r+0x20>)
 80090c4:	602a      	str	r2, [r5, #0]
 80090c6:	461a      	mov	r2, r3
 80090c8:	f7fb f880 	bl	80041cc <_read>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_read_r+0x1e>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_read_r+0x1e>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	20000758 	.word	0x20000758

080090dc <_write_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4604      	mov	r4, r0
 80090e0:	4608      	mov	r0, r1
 80090e2:	4611      	mov	r1, r2
 80090e4:	2200      	movs	r2, #0
 80090e6:	4d05      	ldr	r5, [pc, #20]	@ (80090fc <_write_r+0x20>)
 80090e8:	602a      	str	r2, [r5, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	f7f8 f8b2 	bl	8001254 <_write>
 80090f0:	1c43      	adds	r3, r0, #1
 80090f2:	d102      	bne.n	80090fa <_write_r+0x1e>
 80090f4:	682b      	ldr	r3, [r5, #0]
 80090f6:	b103      	cbz	r3, 80090fa <_write_r+0x1e>
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	bd38      	pop	{r3, r4, r5, pc}
 80090fc:	20000758 	.word	0x20000758

08009100 <__errno>:
 8009100:	4b01      	ldr	r3, [pc, #4]	@ (8009108 <__errno+0x8>)
 8009102:	6818      	ldr	r0, [r3, #0]
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	20000038 	.word	0x20000038

0800910c <__libc_init_array>:
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	2600      	movs	r6, #0
 8009110:	4d0c      	ldr	r5, [pc, #48]	@ (8009144 <__libc_init_array+0x38>)
 8009112:	4c0d      	ldr	r4, [pc, #52]	@ (8009148 <__libc_init_array+0x3c>)
 8009114:	1b64      	subs	r4, r4, r5
 8009116:	10a4      	asrs	r4, r4, #2
 8009118:	42a6      	cmp	r6, r4
 800911a:	d109      	bne.n	8009130 <__libc_init_array+0x24>
 800911c:	f004 fe88 	bl	800de30 <_init>
 8009120:	2600      	movs	r6, #0
 8009122:	4d0a      	ldr	r5, [pc, #40]	@ (800914c <__libc_init_array+0x40>)
 8009124:	4c0a      	ldr	r4, [pc, #40]	@ (8009150 <__libc_init_array+0x44>)
 8009126:	1b64      	subs	r4, r4, r5
 8009128:	10a4      	asrs	r4, r4, #2
 800912a:	42a6      	cmp	r6, r4
 800912c:	d105      	bne.n	800913a <__libc_init_array+0x2e>
 800912e:	bd70      	pop	{r4, r5, r6, pc}
 8009130:	f855 3b04 	ldr.w	r3, [r5], #4
 8009134:	4798      	blx	r3
 8009136:	3601      	adds	r6, #1
 8009138:	e7ee      	b.n	8009118 <__libc_init_array+0xc>
 800913a:	f855 3b04 	ldr.w	r3, [r5], #4
 800913e:	4798      	blx	r3
 8009140:	3601      	adds	r6, #1
 8009142:	e7f2      	b.n	800912a <__libc_init_array+0x1e>
 8009144:	0800e678 	.word	0x0800e678
 8009148:	0800e678 	.word	0x0800e678
 800914c:	0800e678 	.word	0x0800e678
 8009150:	0800e67c 	.word	0x0800e67c

08009154 <__retarget_lock_init_recursive>:
 8009154:	4770      	bx	lr

08009156 <__retarget_lock_acquire_recursive>:
 8009156:	4770      	bx	lr

08009158 <__retarget_lock_release_recursive>:
 8009158:	4770      	bx	lr

0800915a <memchr>:
 800915a:	4603      	mov	r3, r0
 800915c:	b510      	push	{r4, lr}
 800915e:	b2c9      	uxtb	r1, r1
 8009160:	4402      	add	r2, r0
 8009162:	4293      	cmp	r3, r2
 8009164:	4618      	mov	r0, r3
 8009166:	d101      	bne.n	800916c <memchr+0x12>
 8009168:	2000      	movs	r0, #0
 800916a:	e003      	b.n	8009174 <memchr+0x1a>
 800916c:	7804      	ldrb	r4, [r0, #0]
 800916e:	3301      	adds	r3, #1
 8009170:	428c      	cmp	r4, r1
 8009172:	d1f6      	bne.n	8009162 <memchr+0x8>
 8009174:	bd10      	pop	{r4, pc}
	...

08009178 <nanf>:
 8009178:	4800      	ldr	r0, [pc, #0]	@ (800917c <nanf+0x4>)
 800917a:	4770      	bx	lr
 800917c:	7fc00000 	.word	0x7fc00000

08009180 <quorem>:
 8009180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009184:	6903      	ldr	r3, [r0, #16]
 8009186:	690c      	ldr	r4, [r1, #16]
 8009188:	4607      	mov	r7, r0
 800918a:	42a3      	cmp	r3, r4
 800918c:	db7e      	blt.n	800928c <quorem+0x10c>
 800918e:	3c01      	subs	r4, #1
 8009190:	00a3      	lsls	r3, r4, #2
 8009192:	f100 0514 	add.w	r5, r0, #20
 8009196:	f101 0814 	add.w	r8, r1, #20
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091a0:	9301      	str	r3, [sp, #4]
 80091a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80091a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091aa:	3301      	adds	r3, #1
 80091ac:	429a      	cmp	r2, r3
 80091ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80091b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80091b6:	d32e      	bcc.n	8009216 <quorem+0x96>
 80091b8:	f04f 0a00 	mov.w	sl, #0
 80091bc:	46c4      	mov	ip, r8
 80091be:	46ae      	mov	lr, r5
 80091c0:	46d3      	mov	fp, sl
 80091c2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80091c6:	b298      	uxth	r0, r3
 80091c8:	fb06 a000 	mla	r0, r6, r0, sl
 80091cc:	0c1b      	lsrs	r3, r3, #16
 80091ce:	0c02      	lsrs	r2, r0, #16
 80091d0:	fb06 2303 	mla	r3, r6, r3, r2
 80091d4:	f8de 2000 	ldr.w	r2, [lr]
 80091d8:	b280      	uxth	r0, r0
 80091da:	b292      	uxth	r2, r2
 80091dc:	1a12      	subs	r2, r2, r0
 80091de:	445a      	add	r2, fp
 80091e0:	f8de 0000 	ldr.w	r0, [lr]
 80091e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80091ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80091f2:	b292      	uxth	r2, r2
 80091f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80091f8:	45e1      	cmp	r9, ip
 80091fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80091fe:	f84e 2b04 	str.w	r2, [lr], #4
 8009202:	d2de      	bcs.n	80091c2 <quorem+0x42>
 8009204:	9b00      	ldr	r3, [sp, #0]
 8009206:	58eb      	ldr	r3, [r5, r3]
 8009208:	b92b      	cbnz	r3, 8009216 <quorem+0x96>
 800920a:	9b01      	ldr	r3, [sp, #4]
 800920c:	3b04      	subs	r3, #4
 800920e:	429d      	cmp	r5, r3
 8009210:	461a      	mov	r2, r3
 8009212:	d32f      	bcc.n	8009274 <quorem+0xf4>
 8009214:	613c      	str	r4, [r7, #16]
 8009216:	4638      	mov	r0, r7
 8009218:	f001 f9c2 	bl	800a5a0 <__mcmp>
 800921c:	2800      	cmp	r0, #0
 800921e:	db25      	blt.n	800926c <quorem+0xec>
 8009220:	4629      	mov	r1, r5
 8009222:	2000      	movs	r0, #0
 8009224:	f858 2b04 	ldr.w	r2, [r8], #4
 8009228:	f8d1 c000 	ldr.w	ip, [r1]
 800922c:	fa1f fe82 	uxth.w	lr, r2
 8009230:	fa1f f38c 	uxth.w	r3, ip
 8009234:	eba3 030e 	sub.w	r3, r3, lr
 8009238:	4403      	add	r3, r0
 800923a:	0c12      	lsrs	r2, r2, #16
 800923c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009240:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009244:	b29b      	uxth	r3, r3
 8009246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800924a:	45c1      	cmp	r9, r8
 800924c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009250:	f841 3b04 	str.w	r3, [r1], #4
 8009254:	d2e6      	bcs.n	8009224 <quorem+0xa4>
 8009256:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800925a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800925e:	b922      	cbnz	r2, 800926a <quorem+0xea>
 8009260:	3b04      	subs	r3, #4
 8009262:	429d      	cmp	r5, r3
 8009264:	461a      	mov	r2, r3
 8009266:	d30b      	bcc.n	8009280 <quorem+0x100>
 8009268:	613c      	str	r4, [r7, #16]
 800926a:	3601      	adds	r6, #1
 800926c:	4630      	mov	r0, r6
 800926e:	b003      	add	sp, #12
 8009270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009274:	6812      	ldr	r2, [r2, #0]
 8009276:	3b04      	subs	r3, #4
 8009278:	2a00      	cmp	r2, #0
 800927a:	d1cb      	bne.n	8009214 <quorem+0x94>
 800927c:	3c01      	subs	r4, #1
 800927e:	e7c6      	b.n	800920e <quorem+0x8e>
 8009280:	6812      	ldr	r2, [r2, #0]
 8009282:	3b04      	subs	r3, #4
 8009284:	2a00      	cmp	r2, #0
 8009286:	d1ef      	bne.n	8009268 <quorem+0xe8>
 8009288:	3c01      	subs	r4, #1
 800928a:	e7ea      	b.n	8009262 <quorem+0xe2>
 800928c:	2000      	movs	r0, #0
 800928e:	e7ee      	b.n	800926e <quorem+0xee>

08009290 <_dtoa_r>:
 8009290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009294:	4614      	mov	r4, r2
 8009296:	461d      	mov	r5, r3
 8009298:	69c7      	ldr	r7, [r0, #28]
 800929a:	b097      	sub	sp, #92	@ 0x5c
 800929c:	4683      	mov	fp, r0
 800929e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80092a2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80092a4:	b97f      	cbnz	r7, 80092c6 <_dtoa_r+0x36>
 80092a6:	2010      	movs	r0, #16
 80092a8:	f000 fe02 	bl	8009eb0 <malloc>
 80092ac:	4602      	mov	r2, r0
 80092ae:	f8cb 001c 	str.w	r0, [fp, #28]
 80092b2:	b920      	cbnz	r0, 80092be <_dtoa_r+0x2e>
 80092b4:	21ef      	movs	r1, #239	@ 0xef
 80092b6:	4ba8      	ldr	r3, [pc, #672]	@ (8009558 <_dtoa_r+0x2c8>)
 80092b8:	48a8      	ldr	r0, [pc, #672]	@ (800955c <_dtoa_r+0x2cc>)
 80092ba:	f002 fc23 	bl	800bb04 <__assert_func>
 80092be:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80092c2:	6007      	str	r7, [r0, #0]
 80092c4:	60c7      	str	r7, [r0, #12]
 80092c6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80092ca:	6819      	ldr	r1, [r3, #0]
 80092cc:	b159      	cbz	r1, 80092e6 <_dtoa_r+0x56>
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	2301      	movs	r3, #1
 80092d2:	4093      	lsls	r3, r2
 80092d4:	604a      	str	r2, [r1, #4]
 80092d6:	608b      	str	r3, [r1, #8]
 80092d8:	4658      	mov	r0, fp
 80092da:	f000 fedf 	bl	800a09c <_Bfree>
 80092de:	2200      	movs	r2, #0
 80092e0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80092e4:	601a      	str	r2, [r3, #0]
 80092e6:	1e2b      	subs	r3, r5, #0
 80092e8:	bfaf      	iteee	ge
 80092ea:	2300      	movge	r3, #0
 80092ec:	2201      	movlt	r2, #1
 80092ee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80092f2:	9303      	strlt	r3, [sp, #12]
 80092f4:	bfa8      	it	ge
 80092f6:	6033      	strge	r3, [r6, #0]
 80092f8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80092fc:	4b98      	ldr	r3, [pc, #608]	@ (8009560 <_dtoa_r+0x2d0>)
 80092fe:	bfb8      	it	lt
 8009300:	6032      	strlt	r2, [r6, #0]
 8009302:	ea33 0308 	bics.w	r3, r3, r8
 8009306:	d112      	bne.n	800932e <_dtoa_r+0x9e>
 8009308:	f242 730f 	movw	r3, #9999	@ 0x270f
 800930c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009314:	4323      	orrs	r3, r4
 8009316:	f000 8550 	beq.w	8009dba <_dtoa_r+0xb2a>
 800931a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800931c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8009564 <_dtoa_r+0x2d4>
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 8552 	beq.w	8009dca <_dtoa_r+0xb3a>
 8009326:	f10a 0303 	add.w	r3, sl, #3
 800932a:	f000 bd4c 	b.w	8009dc6 <_dtoa_r+0xb36>
 800932e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009332:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009336:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800933a:	2200      	movs	r2, #0
 800933c:	2300      	movs	r3, #0
 800933e:	f7f7 fb33 	bl	80009a8 <__aeabi_dcmpeq>
 8009342:	4607      	mov	r7, r0
 8009344:	b158      	cbz	r0, 800935e <_dtoa_r+0xce>
 8009346:	2301      	movs	r3, #1
 8009348:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800934a:	6013      	str	r3, [r2, #0]
 800934c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800934e:	b113      	cbz	r3, 8009356 <_dtoa_r+0xc6>
 8009350:	4b85      	ldr	r3, [pc, #532]	@ (8009568 <_dtoa_r+0x2d8>)
 8009352:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009354:	6013      	str	r3, [r2, #0]
 8009356:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800956c <_dtoa_r+0x2dc>
 800935a:	f000 bd36 	b.w	8009dca <_dtoa_r+0xb3a>
 800935e:	ab14      	add	r3, sp, #80	@ 0x50
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	ab15      	add	r3, sp, #84	@ 0x54
 8009364:	9300      	str	r3, [sp, #0]
 8009366:	4658      	mov	r0, fp
 8009368:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800936c:	f001 fa30 	bl	800a7d0 <__d2b>
 8009370:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009374:	4681      	mov	r9, r0
 8009376:	2e00      	cmp	r6, #0
 8009378:	d077      	beq.n	800946a <_dtoa_r+0x1da>
 800937a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800937e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009380:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009388:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800938c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009390:	9712      	str	r7, [sp, #72]	@ 0x48
 8009392:	4619      	mov	r1, r3
 8009394:	2200      	movs	r2, #0
 8009396:	4b76      	ldr	r3, [pc, #472]	@ (8009570 <_dtoa_r+0x2e0>)
 8009398:	f7f6 fee6 	bl	8000168 <__aeabi_dsub>
 800939c:	a368      	add	r3, pc, #416	@ (adr r3, 8009540 <_dtoa_r+0x2b0>)
 800939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a2:	f7f7 f899 	bl	80004d8 <__aeabi_dmul>
 80093a6:	a368      	add	r3, pc, #416	@ (adr r3, 8009548 <_dtoa_r+0x2b8>)
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	f7f6 fede 	bl	800016c <__adddf3>
 80093b0:	4604      	mov	r4, r0
 80093b2:	4630      	mov	r0, r6
 80093b4:	460d      	mov	r5, r1
 80093b6:	f7f7 f825 	bl	8000404 <__aeabi_i2d>
 80093ba:	a365      	add	r3, pc, #404	@ (adr r3, 8009550 <_dtoa_r+0x2c0>)
 80093bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c0:	f7f7 f88a 	bl	80004d8 <__aeabi_dmul>
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
 80093c8:	4620      	mov	r0, r4
 80093ca:	4629      	mov	r1, r5
 80093cc:	f7f6 fece 	bl	800016c <__adddf3>
 80093d0:	4604      	mov	r4, r0
 80093d2:	460d      	mov	r5, r1
 80093d4:	f7f7 fb30 	bl	8000a38 <__aeabi_d2iz>
 80093d8:	2200      	movs	r2, #0
 80093da:	4607      	mov	r7, r0
 80093dc:	2300      	movs	r3, #0
 80093de:	4620      	mov	r0, r4
 80093e0:	4629      	mov	r1, r5
 80093e2:	f7f7 faeb 	bl	80009bc <__aeabi_dcmplt>
 80093e6:	b140      	cbz	r0, 80093fa <_dtoa_r+0x16a>
 80093e8:	4638      	mov	r0, r7
 80093ea:	f7f7 f80b 	bl	8000404 <__aeabi_i2d>
 80093ee:	4622      	mov	r2, r4
 80093f0:	462b      	mov	r3, r5
 80093f2:	f7f7 fad9 	bl	80009a8 <__aeabi_dcmpeq>
 80093f6:	b900      	cbnz	r0, 80093fa <_dtoa_r+0x16a>
 80093f8:	3f01      	subs	r7, #1
 80093fa:	2f16      	cmp	r7, #22
 80093fc:	d853      	bhi.n	80094a6 <_dtoa_r+0x216>
 80093fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009402:	4b5c      	ldr	r3, [pc, #368]	@ (8009574 <_dtoa_r+0x2e4>)
 8009404:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940c:	f7f7 fad6 	bl	80009bc <__aeabi_dcmplt>
 8009410:	2800      	cmp	r0, #0
 8009412:	d04a      	beq.n	80094aa <_dtoa_r+0x21a>
 8009414:	2300      	movs	r3, #0
 8009416:	3f01      	subs	r7, #1
 8009418:	930f      	str	r3, [sp, #60]	@ 0x3c
 800941a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800941c:	1b9b      	subs	r3, r3, r6
 800941e:	1e5a      	subs	r2, r3, #1
 8009420:	bf46      	itte	mi
 8009422:	f1c3 0801 	rsbmi	r8, r3, #1
 8009426:	2300      	movmi	r3, #0
 8009428:	f04f 0800 	movpl.w	r8, #0
 800942c:	9209      	str	r2, [sp, #36]	@ 0x24
 800942e:	bf48      	it	mi
 8009430:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009432:	2f00      	cmp	r7, #0
 8009434:	db3b      	blt.n	80094ae <_dtoa_r+0x21e>
 8009436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009438:	970e      	str	r7, [sp, #56]	@ 0x38
 800943a:	443b      	add	r3, r7
 800943c:	9309      	str	r3, [sp, #36]	@ 0x24
 800943e:	2300      	movs	r3, #0
 8009440:	930a      	str	r3, [sp, #40]	@ 0x28
 8009442:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009444:	2b09      	cmp	r3, #9
 8009446:	d866      	bhi.n	8009516 <_dtoa_r+0x286>
 8009448:	2b05      	cmp	r3, #5
 800944a:	bfc4      	itt	gt
 800944c:	3b04      	subgt	r3, #4
 800944e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009450:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009452:	bfc8      	it	gt
 8009454:	2400      	movgt	r4, #0
 8009456:	f1a3 0302 	sub.w	r3, r3, #2
 800945a:	bfd8      	it	le
 800945c:	2401      	movle	r4, #1
 800945e:	2b03      	cmp	r3, #3
 8009460:	d864      	bhi.n	800952c <_dtoa_r+0x29c>
 8009462:	e8df f003 	tbb	[pc, r3]
 8009466:	382b      	.short	0x382b
 8009468:	5636      	.short	0x5636
 800946a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800946e:	441e      	add	r6, r3
 8009470:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009474:	2b20      	cmp	r3, #32
 8009476:	bfc1      	itttt	gt
 8009478:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800947c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009480:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009484:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009488:	bfd6      	itet	le
 800948a:	f1c3 0320 	rsble	r3, r3, #32
 800948e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009492:	fa04 f003 	lslle.w	r0, r4, r3
 8009496:	f7f6 ffa5 	bl	80003e4 <__aeabi_ui2d>
 800949a:	2201      	movs	r2, #1
 800949c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80094a0:	3e01      	subs	r6, #1
 80094a2:	9212      	str	r2, [sp, #72]	@ 0x48
 80094a4:	e775      	b.n	8009392 <_dtoa_r+0x102>
 80094a6:	2301      	movs	r3, #1
 80094a8:	e7b6      	b.n	8009418 <_dtoa_r+0x188>
 80094aa:	900f      	str	r0, [sp, #60]	@ 0x3c
 80094ac:	e7b5      	b.n	800941a <_dtoa_r+0x18a>
 80094ae:	427b      	negs	r3, r7
 80094b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80094b2:	2300      	movs	r3, #0
 80094b4:	eba8 0807 	sub.w	r8, r8, r7
 80094b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80094ba:	e7c2      	b.n	8009442 <_dtoa_r+0x1b2>
 80094bc:	2300      	movs	r3, #0
 80094be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	dc35      	bgt.n	8009532 <_dtoa_r+0x2a2>
 80094c6:	2301      	movs	r3, #1
 80094c8:	461a      	mov	r2, r3
 80094ca:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80094ce:	9221      	str	r2, [sp, #132]	@ 0x84
 80094d0:	e00b      	b.n	80094ea <_dtoa_r+0x25a>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e7f3      	b.n	80094be <_dtoa_r+0x22e>
 80094d6:	2300      	movs	r3, #0
 80094d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094dc:	18fb      	adds	r3, r7, r3
 80094de:	9308      	str	r3, [sp, #32]
 80094e0:	3301      	adds	r3, #1
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	9307      	str	r3, [sp, #28]
 80094e6:	bfb8      	it	lt
 80094e8:	2301      	movlt	r3, #1
 80094ea:	2100      	movs	r1, #0
 80094ec:	2204      	movs	r2, #4
 80094ee:	f8db 001c 	ldr.w	r0, [fp, #28]
 80094f2:	f102 0514 	add.w	r5, r2, #20
 80094f6:	429d      	cmp	r5, r3
 80094f8:	d91f      	bls.n	800953a <_dtoa_r+0x2aa>
 80094fa:	6041      	str	r1, [r0, #4]
 80094fc:	4658      	mov	r0, fp
 80094fe:	f000 fd8d 	bl	800a01c <_Balloc>
 8009502:	4682      	mov	sl, r0
 8009504:	2800      	cmp	r0, #0
 8009506:	d139      	bne.n	800957c <_dtoa_r+0x2ec>
 8009508:	4602      	mov	r2, r0
 800950a:	f240 11af 	movw	r1, #431	@ 0x1af
 800950e:	4b1a      	ldr	r3, [pc, #104]	@ (8009578 <_dtoa_r+0x2e8>)
 8009510:	e6d2      	b.n	80092b8 <_dtoa_r+0x28>
 8009512:	2301      	movs	r3, #1
 8009514:	e7e0      	b.n	80094d8 <_dtoa_r+0x248>
 8009516:	2401      	movs	r4, #1
 8009518:	2300      	movs	r3, #0
 800951a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800951c:	9320      	str	r3, [sp, #128]	@ 0x80
 800951e:	f04f 33ff 	mov.w	r3, #4294967295
 8009522:	2200      	movs	r2, #0
 8009524:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009528:	2312      	movs	r3, #18
 800952a:	e7d0      	b.n	80094ce <_dtoa_r+0x23e>
 800952c:	2301      	movs	r3, #1
 800952e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009530:	e7f5      	b.n	800951e <_dtoa_r+0x28e>
 8009532:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009534:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009538:	e7d7      	b.n	80094ea <_dtoa_r+0x25a>
 800953a:	3101      	adds	r1, #1
 800953c:	0052      	lsls	r2, r2, #1
 800953e:	e7d8      	b.n	80094f2 <_dtoa_r+0x262>
 8009540:	636f4361 	.word	0x636f4361
 8009544:	3fd287a7 	.word	0x3fd287a7
 8009548:	8b60c8b3 	.word	0x8b60c8b3
 800954c:	3fc68a28 	.word	0x3fc68a28
 8009550:	509f79fb 	.word	0x509f79fb
 8009554:	3fd34413 	.word	0x3fd34413
 8009558:	0800e1d6 	.word	0x0800e1d6
 800955c:	0800e1ed 	.word	0x0800e1ed
 8009560:	7ff00000 	.word	0x7ff00000
 8009564:	0800e1d2 	.word	0x0800e1d2
 8009568:	0800e1a1 	.word	0x0800e1a1
 800956c:	0800e1a0 	.word	0x0800e1a0
 8009570:	3ff80000 	.word	0x3ff80000
 8009574:	0800e2e8 	.word	0x0800e2e8
 8009578:	0800e245 	.word	0x0800e245
 800957c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009580:	6018      	str	r0, [r3, #0]
 8009582:	9b07      	ldr	r3, [sp, #28]
 8009584:	2b0e      	cmp	r3, #14
 8009586:	f200 80a4 	bhi.w	80096d2 <_dtoa_r+0x442>
 800958a:	2c00      	cmp	r4, #0
 800958c:	f000 80a1 	beq.w	80096d2 <_dtoa_r+0x442>
 8009590:	2f00      	cmp	r7, #0
 8009592:	dd33      	ble.n	80095fc <_dtoa_r+0x36c>
 8009594:	4b86      	ldr	r3, [pc, #536]	@ (80097b0 <_dtoa_r+0x520>)
 8009596:	f007 020f 	and.w	r2, r7, #15
 800959a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800959e:	05f8      	lsls	r0, r7, #23
 80095a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80095a4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80095a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80095ac:	d516      	bpl.n	80095dc <_dtoa_r+0x34c>
 80095ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095b2:	4b80      	ldr	r3, [pc, #512]	@ (80097b4 <_dtoa_r+0x524>)
 80095b4:	2603      	movs	r6, #3
 80095b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80095ba:	f7f7 f8b7 	bl	800072c <__aeabi_ddiv>
 80095be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095c2:	f004 040f 	and.w	r4, r4, #15
 80095c6:	4d7b      	ldr	r5, [pc, #492]	@ (80097b4 <_dtoa_r+0x524>)
 80095c8:	b954      	cbnz	r4, 80095e0 <_dtoa_r+0x350>
 80095ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095d2:	f7f7 f8ab 	bl	800072c <__aeabi_ddiv>
 80095d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095da:	e028      	b.n	800962e <_dtoa_r+0x39e>
 80095dc:	2602      	movs	r6, #2
 80095de:	e7f2      	b.n	80095c6 <_dtoa_r+0x336>
 80095e0:	07e1      	lsls	r1, r4, #31
 80095e2:	d508      	bpl.n	80095f6 <_dtoa_r+0x366>
 80095e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095ec:	f7f6 ff74 	bl	80004d8 <__aeabi_dmul>
 80095f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095f4:	3601      	adds	r6, #1
 80095f6:	1064      	asrs	r4, r4, #1
 80095f8:	3508      	adds	r5, #8
 80095fa:	e7e5      	b.n	80095c8 <_dtoa_r+0x338>
 80095fc:	f000 80d2 	beq.w	80097a4 <_dtoa_r+0x514>
 8009600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009604:	427c      	negs	r4, r7
 8009606:	4b6a      	ldr	r3, [pc, #424]	@ (80097b0 <_dtoa_r+0x520>)
 8009608:	f004 020f 	and.w	r2, r4, #15
 800960c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	f7f6 ff60 	bl	80004d8 <__aeabi_dmul>
 8009618:	2602      	movs	r6, #2
 800961a:	2300      	movs	r3, #0
 800961c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009620:	4d64      	ldr	r5, [pc, #400]	@ (80097b4 <_dtoa_r+0x524>)
 8009622:	1124      	asrs	r4, r4, #4
 8009624:	2c00      	cmp	r4, #0
 8009626:	f040 80b2 	bne.w	800978e <_dtoa_r+0x4fe>
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1d3      	bne.n	80095d6 <_dtoa_r+0x346>
 800962e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009632:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009634:	2b00      	cmp	r3, #0
 8009636:	f000 80b7 	beq.w	80097a8 <_dtoa_r+0x518>
 800963a:	2200      	movs	r2, #0
 800963c:	4620      	mov	r0, r4
 800963e:	4629      	mov	r1, r5
 8009640:	4b5d      	ldr	r3, [pc, #372]	@ (80097b8 <_dtoa_r+0x528>)
 8009642:	f7f7 f9bb 	bl	80009bc <__aeabi_dcmplt>
 8009646:	2800      	cmp	r0, #0
 8009648:	f000 80ae 	beq.w	80097a8 <_dtoa_r+0x518>
 800964c:	9b07      	ldr	r3, [sp, #28]
 800964e:	2b00      	cmp	r3, #0
 8009650:	f000 80aa 	beq.w	80097a8 <_dtoa_r+0x518>
 8009654:	9b08      	ldr	r3, [sp, #32]
 8009656:	2b00      	cmp	r3, #0
 8009658:	dd37      	ble.n	80096ca <_dtoa_r+0x43a>
 800965a:	1e7b      	subs	r3, r7, #1
 800965c:	4620      	mov	r0, r4
 800965e:	9304      	str	r3, [sp, #16]
 8009660:	2200      	movs	r2, #0
 8009662:	4629      	mov	r1, r5
 8009664:	4b55      	ldr	r3, [pc, #340]	@ (80097bc <_dtoa_r+0x52c>)
 8009666:	f7f6 ff37 	bl	80004d8 <__aeabi_dmul>
 800966a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800966e:	9c08      	ldr	r4, [sp, #32]
 8009670:	3601      	adds	r6, #1
 8009672:	4630      	mov	r0, r6
 8009674:	f7f6 fec6 	bl	8000404 <__aeabi_i2d>
 8009678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800967c:	f7f6 ff2c 	bl	80004d8 <__aeabi_dmul>
 8009680:	2200      	movs	r2, #0
 8009682:	4b4f      	ldr	r3, [pc, #316]	@ (80097c0 <_dtoa_r+0x530>)
 8009684:	f7f6 fd72 	bl	800016c <__adddf3>
 8009688:	4605      	mov	r5, r0
 800968a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800968e:	2c00      	cmp	r4, #0
 8009690:	f040 809a 	bne.w	80097c8 <_dtoa_r+0x538>
 8009694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009698:	2200      	movs	r2, #0
 800969a:	4b4a      	ldr	r3, [pc, #296]	@ (80097c4 <_dtoa_r+0x534>)
 800969c:	f7f6 fd64 	bl	8000168 <__aeabi_dsub>
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096a8:	462a      	mov	r2, r5
 80096aa:	4633      	mov	r3, r6
 80096ac:	f7f7 f9a4 	bl	80009f8 <__aeabi_dcmpgt>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	f040 828e 	bne.w	8009bd2 <_dtoa_r+0x942>
 80096b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096ba:	462a      	mov	r2, r5
 80096bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80096c0:	f7f7 f97c 	bl	80009bc <__aeabi_dcmplt>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	f040 8127 	bne.w	8009918 <_dtoa_r+0x688>
 80096ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80096ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80096d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f2c0 8163 	blt.w	80099a0 <_dtoa_r+0x710>
 80096da:	2f0e      	cmp	r7, #14
 80096dc:	f300 8160 	bgt.w	80099a0 <_dtoa_r+0x710>
 80096e0:	4b33      	ldr	r3, [pc, #204]	@ (80097b0 <_dtoa_r+0x520>)
 80096e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80096ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80096ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	da03      	bge.n	80096fc <_dtoa_r+0x46c>
 80096f4:	9b07      	ldr	r3, [sp, #28]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f340 8100 	ble.w	80098fc <_dtoa_r+0x66c>
 80096fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009700:	4656      	mov	r6, sl
 8009702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009706:	4620      	mov	r0, r4
 8009708:	4629      	mov	r1, r5
 800970a:	f7f7 f80f 	bl	800072c <__aeabi_ddiv>
 800970e:	f7f7 f993 	bl	8000a38 <__aeabi_d2iz>
 8009712:	4680      	mov	r8, r0
 8009714:	f7f6 fe76 	bl	8000404 <__aeabi_i2d>
 8009718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800971c:	f7f6 fedc 	bl	80004d8 <__aeabi_dmul>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	4620      	mov	r0, r4
 8009726:	4629      	mov	r1, r5
 8009728:	f7f6 fd1e 	bl	8000168 <__aeabi_dsub>
 800972c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009730:	9d07      	ldr	r5, [sp, #28]
 8009732:	f806 4b01 	strb.w	r4, [r6], #1
 8009736:	eba6 040a 	sub.w	r4, r6, sl
 800973a:	42a5      	cmp	r5, r4
 800973c:	4602      	mov	r2, r0
 800973e:	460b      	mov	r3, r1
 8009740:	f040 8116 	bne.w	8009970 <_dtoa_r+0x6e0>
 8009744:	f7f6 fd12 	bl	800016c <__adddf3>
 8009748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800974c:	4604      	mov	r4, r0
 800974e:	460d      	mov	r5, r1
 8009750:	f7f7 f952 	bl	80009f8 <__aeabi_dcmpgt>
 8009754:	2800      	cmp	r0, #0
 8009756:	f040 80f8 	bne.w	800994a <_dtoa_r+0x6ba>
 800975a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800975e:	4620      	mov	r0, r4
 8009760:	4629      	mov	r1, r5
 8009762:	f7f7 f921 	bl	80009a8 <__aeabi_dcmpeq>
 8009766:	b118      	cbz	r0, 8009770 <_dtoa_r+0x4e0>
 8009768:	f018 0f01 	tst.w	r8, #1
 800976c:	f040 80ed 	bne.w	800994a <_dtoa_r+0x6ba>
 8009770:	4649      	mov	r1, r9
 8009772:	4658      	mov	r0, fp
 8009774:	f000 fc92 	bl	800a09c <_Bfree>
 8009778:	2300      	movs	r3, #0
 800977a:	7033      	strb	r3, [r6, #0]
 800977c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800977e:	3701      	adds	r7, #1
 8009780:	601f      	str	r7, [r3, #0]
 8009782:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 8320 	beq.w	8009dca <_dtoa_r+0xb3a>
 800978a:	601e      	str	r6, [r3, #0]
 800978c:	e31d      	b.n	8009dca <_dtoa_r+0xb3a>
 800978e:	07e2      	lsls	r2, r4, #31
 8009790:	d505      	bpl.n	800979e <_dtoa_r+0x50e>
 8009792:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009796:	f7f6 fe9f 	bl	80004d8 <__aeabi_dmul>
 800979a:	2301      	movs	r3, #1
 800979c:	3601      	adds	r6, #1
 800979e:	1064      	asrs	r4, r4, #1
 80097a0:	3508      	adds	r5, #8
 80097a2:	e73f      	b.n	8009624 <_dtoa_r+0x394>
 80097a4:	2602      	movs	r6, #2
 80097a6:	e742      	b.n	800962e <_dtoa_r+0x39e>
 80097a8:	9c07      	ldr	r4, [sp, #28]
 80097aa:	9704      	str	r7, [sp, #16]
 80097ac:	e761      	b.n	8009672 <_dtoa_r+0x3e2>
 80097ae:	bf00      	nop
 80097b0:	0800e2e8 	.word	0x0800e2e8
 80097b4:	0800e2c0 	.word	0x0800e2c0
 80097b8:	3ff00000 	.word	0x3ff00000
 80097bc:	40240000 	.word	0x40240000
 80097c0:	401c0000 	.word	0x401c0000
 80097c4:	40140000 	.word	0x40140000
 80097c8:	4b70      	ldr	r3, [pc, #448]	@ (800998c <_dtoa_r+0x6fc>)
 80097ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80097cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80097d4:	4454      	add	r4, sl
 80097d6:	2900      	cmp	r1, #0
 80097d8:	d045      	beq.n	8009866 <_dtoa_r+0x5d6>
 80097da:	2000      	movs	r0, #0
 80097dc:	496c      	ldr	r1, [pc, #432]	@ (8009990 <_dtoa_r+0x700>)
 80097de:	f7f6 ffa5 	bl	800072c <__aeabi_ddiv>
 80097e2:	4633      	mov	r3, r6
 80097e4:	462a      	mov	r2, r5
 80097e6:	f7f6 fcbf 	bl	8000168 <__aeabi_dsub>
 80097ea:	4656      	mov	r6, sl
 80097ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80097f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097f4:	f7f7 f920 	bl	8000a38 <__aeabi_d2iz>
 80097f8:	4605      	mov	r5, r0
 80097fa:	f7f6 fe03 	bl	8000404 <__aeabi_i2d>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009806:	f7f6 fcaf 	bl	8000168 <__aeabi_dsub>
 800980a:	4602      	mov	r2, r0
 800980c:	460b      	mov	r3, r1
 800980e:	3530      	adds	r5, #48	@ 0x30
 8009810:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009814:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009818:	f806 5b01 	strb.w	r5, [r6], #1
 800981c:	f7f7 f8ce 	bl	80009bc <__aeabi_dcmplt>
 8009820:	2800      	cmp	r0, #0
 8009822:	d163      	bne.n	80098ec <_dtoa_r+0x65c>
 8009824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009828:	2000      	movs	r0, #0
 800982a:	495a      	ldr	r1, [pc, #360]	@ (8009994 <_dtoa_r+0x704>)
 800982c:	f7f6 fc9c 	bl	8000168 <__aeabi_dsub>
 8009830:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009834:	f7f7 f8c2 	bl	80009bc <__aeabi_dcmplt>
 8009838:	2800      	cmp	r0, #0
 800983a:	f040 8087 	bne.w	800994c <_dtoa_r+0x6bc>
 800983e:	42a6      	cmp	r6, r4
 8009840:	f43f af43 	beq.w	80096ca <_dtoa_r+0x43a>
 8009844:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009848:	2200      	movs	r2, #0
 800984a:	4b53      	ldr	r3, [pc, #332]	@ (8009998 <_dtoa_r+0x708>)
 800984c:	f7f6 fe44 	bl	80004d8 <__aeabi_dmul>
 8009850:	2200      	movs	r2, #0
 8009852:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800985a:	4b4f      	ldr	r3, [pc, #316]	@ (8009998 <_dtoa_r+0x708>)
 800985c:	f7f6 fe3c 	bl	80004d8 <__aeabi_dmul>
 8009860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009864:	e7c4      	b.n	80097f0 <_dtoa_r+0x560>
 8009866:	4631      	mov	r1, r6
 8009868:	4628      	mov	r0, r5
 800986a:	f7f6 fe35 	bl	80004d8 <__aeabi_dmul>
 800986e:	4656      	mov	r6, sl
 8009870:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009874:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800987a:	f7f7 f8dd 	bl	8000a38 <__aeabi_d2iz>
 800987e:	4605      	mov	r5, r0
 8009880:	f7f6 fdc0 	bl	8000404 <__aeabi_i2d>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800988c:	f7f6 fc6c 	bl	8000168 <__aeabi_dsub>
 8009890:	4602      	mov	r2, r0
 8009892:	460b      	mov	r3, r1
 8009894:	3530      	adds	r5, #48	@ 0x30
 8009896:	f806 5b01 	strb.w	r5, [r6], #1
 800989a:	42a6      	cmp	r6, r4
 800989c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098a0:	f04f 0200 	mov.w	r2, #0
 80098a4:	d124      	bne.n	80098f0 <_dtoa_r+0x660>
 80098a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80098aa:	4b39      	ldr	r3, [pc, #228]	@ (8009990 <_dtoa_r+0x700>)
 80098ac:	f7f6 fc5e 	bl	800016c <__adddf3>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098b8:	f7f7 f89e 	bl	80009f8 <__aeabi_dcmpgt>
 80098bc:	2800      	cmp	r0, #0
 80098be:	d145      	bne.n	800994c <_dtoa_r+0x6bc>
 80098c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80098c4:	2000      	movs	r0, #0
 80098c6:	4932      	ldr	r1, [pc, #200]	@ (8009990 <_dtoa_r+0x700>)
 80098c8:	f7f6 fc4e 	bl	8000168 <__aeabi_dsub>
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098d4:	f7f7 f872 	bl	80009bc <__aeabi_dcmplt>
 80098d8:	2800      	cmp	r0, #0
 80098da:	f43f aef6 	beq.w	80096ca <_dtoa_r+0x43a>
 80098de:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80098e0:	1e73      	subs	r3, r6, #1
 80098e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80098e8:	2b30      	cmp	r3, #48	@ 0x30
 80098ea:	d0f8      	beq.n	80098de <_dtoa_r+0x64e>
 80098ec:	9f04      	ldr	r7, [sp, #16]
 80098ee:	e73f      	b.n	8009770 <_dtoa_r+0x4e0>
 80098f0:	4b29      	ldr	r3, [pc, #164]	@ (8009998 <_dtoa_r+0x708>)
 80098f2:	f7f6 fdf1 	bl	80004d8 <__aeabi_dmul>
 80098f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098fa:	e7bc      	b.n	8009876 <_dtoa_r+0x5e6>
 80098fc:	d10c      	bne.n	8009918 <_dtoa_r+0x688>
 80098fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009902:	2200      	movs	r2, #0
 8009904:	4b25      	ldr	r3, [pc, #148]	@ (800999c <_dtoa_r+0x70c>)
 8009906:	f7f6 fde7 	bl	80004d8 <__aeabi_dmul>
 800990a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800990e:	f7f7 f869 	bl	80009e4 <__aeabi_dcmpge>
 8009912:	2800      	cmp	r0, #0
 8009914:	f000 815b 	beq.w	8009bce <_dtoa_r+0x93e>
 8009918:	2400      	movs	r4, #0
 800991a:	4625      	mov	r5, r4
 800991c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800991e:	4656      	mov	r6, sl
 8009920:	43db      	mvns	r3, r3
 8009922:	9304      	str	r3, [sp, #16]
 8009924:	2700      	movs	r7, #0
 8009926:	4621      	mov	r1, r4
 8009928:	4658      	mov	r0, fp
 800992a:	f000 fbb7 	bl	800a09c <_Bfree>
 800992e:	2d00      	cmp	r5, #0
 8009930:	d0dc      	beq.n	80098ec <_dtoa_r+0x65c>
 8009932:	b12f      	cbz	r7, 8009940 <_dtoa_r+0x6b0>
 8009934:	42af      	cmp	r7, r5
 8009936:	d003      	beq.n	8009940 <_dtoa_r+0x6b0>
 8009938:	4639      	mov	r1, r7
 800993a:	4658      	mov	r0, fp
 800993c:	f000 fbae 	bl	800a09c <_Bfree>
 8009940:	4629      	mov	r1, r5
 8009942:	4658      	mov	r0, fp
 8009944:	f000 fbaa 	bl	800a09c <_Bfree>
 8009948:	e7d0      	b.n	80098ec <_dtoa_r+0x65c>
 800994a:	9704      	str	r7, [sp, #16]
 800994c:	4633      	mov	r3, r6
 800994e:	461e      	mov	r6, r3
 8009950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009954:	2a39      	cmp	r2, #57	@ 0x39
 8009956:	d107      	bne.n	8009968 <_dtoa_r+0x6d8>
 8009958:	459a      	cmp	sl, r3
 800995a:	d1f8      	bne.n	800994e <_dtoa_r+0x6be>
 800995c:	9a04      	ldr	r2, [sp, #16]
 800995e:	3201      	adds	r2, #1
 8009960:	9204      	str	r2, [sp, #16]
 8009962:	2230      	movs	r2, #48	@ 0x30
 8009964:	f88a 2000 	strb.w	r2, [sl]
 8009968:	781a      	ldrb	r2, [r3, #0]
 800996a:	3201      	adds	r2, #1
 800996c:	701a      	strb	r2, [r3, #0]
 800996e:	e7bd      	b.n	80098ec <_dtoa_r+0x65c>
 8009970:	2200      	movs	r2, #0
 8009972:	4b09      	ldr	r3, [pc, #36]	@ (8009998 <_dtoa_r+0x708>)
 8009974:	f7f6 fdb0 	bl	80004d8 <__aeabi_dmul>
 8009978:	2200      	movs	r2, #0
 800997a:	2300      	movs	r3, #0
 800997c:	4604      	mov	r4, r0
 800997e:	460d      	mov	r5, r1
 8009980:	f7f7 f812 	bl	80009a8 <__aeabi_dcmpeq>
 8009984:	2800      	cmp	r0, #0
 8009986:	f43f aebc 	beq.w	8009702 <_dtoa_r+0x472>
 800998a:	e6f1      	b.n	8009770 <_dtoa_r+0x4e0>
 800998c:	0800e2e8 	.word	0x0800e2e8
 8009990:	3fe00000 	.word	0x3fe00000
 8009994:	3ff00000 	.word	0x3ff00000
 8009998:	40240000 	.word	0x40240000
 800999c:	40140000 	.word	0x40140000
 80099a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80099a2:	2a00      	cmp	r2, #0
 80099a4:	f000 80db 	beq.w	8009b5e <_dtoa_r+0x8ce>
 80099a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80099aa:	2a01      	cmp	r2, #1
 80099ac:	f300 80bf 	bgt.w	8009b2e <_dtoa_r+0x89e>
 80099b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80099b2:	2a00      	cmp	r2, #0
 80099b4:	f000 80b7 	beq.w	8009b26 <_dtoa_r+0x896>
 80099b8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80099bc:	4646      	mov	r6, r8
 80099be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80099c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099c2:	2101      	movs	r1, #1
 80099c4:	441a      	add	r2, r3
 80099c6:	4658      	mov	r0, fp
 80099c8:	4498      	add	r8, r3
 80099ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80099cc:	f000 fc64 	bl	800a298 <__i2b>
 80099d0:	4605      	mov	r5, r0
 80099d2:	b15e      	cbz	r6, 80099ec <_dtoa_r+0x75c>
 80099d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	dd08      	ble.n	80099ec <_dtoa_r+0x75c>
 80099da:	42b3      	cmp	r3, r6
 80099dc:	bfa8      	it	ge
 80099de:	4633      	movge	r3, r6
 80099e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099e2:	eba8 0803 	sub.w	r8, r8, r3
 80099e6:	1af6      	subs	r6, r6, r3
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ee:	b1f3      	cbz	r3, 8009a2e <_dtoa_r+0x79e>
 80099f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 80b7 	beq.w	8009b66 <_dtoa_r+0x8d6>
 80099f8:	b18c      	cbz	r4, 8009a1e <_dtoa_r+0x78e>
 80099fa:	4629      	mov	r1, r5
 80099fc:	4622      	mov	r2, r4
 80099fe:	4658      	mov	r0, fp
 8009a00:	f000 fd08 	bl	800a414 <__pow5mult>
 8009a04:	464a      	mov	r2, r9
 8009a06:	4601      	mov	r1, r0
 8009a08:	4605      	mov	r5, r0
 8009a0a:	4658      	mov	r0, fp
 8009a0c:	f000 fc5a 	bl	800a2c4 <__multiply>
 8009a10:	4649      	mov	r1, r9
 8009a12:	9004      	str	r0, [sp, #16]
 8009a14:	4658      	mov	r0, fp
 8009a16:	f000 fb41 	bl	800a09c <_Bfree>
 8009a1a:	9b04      	ldr	r3, [sp, #16]
 8009a1c:	4699      	mov	r9, r3
 8009a1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a20:	1b1a      	subs	r2, r3, r4
 8009a22:	d004      	beq.n	8009a2e <_dtoa_r+0x79e>
 8009a24:	4649      	mov	r1, r9
 8009a26:	4658      	mov	r0, fp
 8009a28:	f000 fcf4 	bl	800a414 <__pow5mult>
 8009a2c:	4681      	mov	r9, r0
 8009a2e:	2101      	movs	r1, #1
 8009a30:	4658      	mov	r0, fp
 8009a32:	f000 fc31 	bl	800a298 <__i2b>
 8009a36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a38:	4604      	mov	r4, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f000 81c9 	beq.w	8009dd2 <_dtoa_r+0xb42>
 8009a40:	461a      	mov	r2, r3
 8009a42:	4601      	mov	r1, r0
 8009a44:	4658      	mov	r0, fp
 8009a46:	f000 fce5 	bl	800a414 <__pow5mult>
 8009a4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	f300 808f 	bgt.w	8009b72 <_dtoa_r+0x8e2>
 8009a54:	9b02      	ldr	r3, [sp, #8]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f040 8087 	bne.w	8009b6a <_dtoa_r+0x8da>
 8009a5c:	9b03      	ldr	r3, [sp, #12]
 8009a5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f040 8083 	bne.w	8009b6e <_dtoa_r+0x8de>
 8009a68:	9b03      	ldr	r3, [sp, #12]
 8009a6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a6e:	0d1b      	lsrs	r3, r3, #20
 8009a70:	051b      	lsls	r3, r3, #20
 8009a72:	b12b      	cbz	r3, 8009a80 <_dtoa_r+0x7f0>
 8009a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a76:	f108 0801 	add.w	r8, r8, #1
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a7e:	2301      	movs	r3, #1
 8009a80:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 81aa 	beq.w	8009dde <_dtoa_r+0xb4e>
 8009a8a:	6923      	ldr	r3, [r4, #16]
 8009a8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a90:	6918      	ldr	r0, [r3, #16]
 8009a92:	f000 fbb5 	bl	800a200 <__hi0bits>
 8009a96:	f1c0 0020 	rsb	r0, r0, #32
 8009a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a9c:	4418      	add	r0, r3
 8009a9e:	f010 001f 	ands.w	r0, r0, #31
 8009aa2:	d071      	beq.n	8009b88 <_dtoa_r+0x8f8>
 8009aa4:	f1c0 0320 	rsb	r3, r0, #32
 8009aa8:	2b04      	cmp	r3, #4
 8009aaa:	dd65      	ble.n	8009b78 <_dtoa_r+0x8e8>
 8009aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aae:	f1c0 001c 	rsb	r0, r0, #28
 8009ab2:	4403      	add	r3, r0
 8009ab4:	4480      	add	r8, r0
 8009ab6:	4406      	add	r6, r0
 8009ab8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aba:	f1b8 0f00 	cmp.w	r8, #0
 8009abe:	dd05      	ble.n	8009acc <_dtoa_r+0x83c>
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	4642      	mov	r2, r8
 8009ac4:	4658      	mov	r0, fp
 8009ac6:	f000 fcff 	bl	800a4c8 <__lshift>
 8009aca:	4681      	mov	r9, r0
 8009acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	dd05      	ble.n	8009ade <_dtoa_r+0x84e>
 8009ad2:	4621      	mov	r1, r4
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	4658      	mov	r0, fp
 8009ad8:	f000 fcf6 	bl	800a4c8 <__lshift>
 8009adc:	4604      	mov	r4, r0
 8009ade:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d053      	beq.n	8009b8c <_dtoa_r+0x8fc>
 8009ae4:	4621      	mov	r1, r4
 8009ae6:	4648      	mov	r0, r9
 8009ae8:	f000 fd5a 	bl	800a5a0 <__mcmp>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	da4d      	bge.n	8009b8c <_dtoa_r+0x8fc>
 8009af0:	1e7b      	subs	r3, r7, #1
 8009af2:	4649      	mov	r1, r9
 8009af4:	9304      	str	r3, [sp, #16]
 8009af6:	220a      	movs	r2, #10
 8009af8:	2300      	movs	r3, #0
 8009afa:	4658      	mov	r0, fp
 8009afc:	f000 faf0 	bl	800a0e0 <__multadd>
 8009b00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b02:	4681      	mov	r9, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 816c 	beq.w	8009de2 <_dtoa_r+0xb52>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	220a      	movs	r2, #10
 8009b10:	4658      	mov	r0, fp
 8009b12:	f000 fae5 	bl	800a0e0 <__multadd>
 8009b16:	9b08      	ldr	r3, [sp, #32]
 8009b18:	4605      	mov	r5, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	dc61      	bgt.n	8009be2 <_dtoa_r+0x952>
 8009b1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	dc3b      	bgt.n	8009b9c <_dtoa_r+0x90c>
 8009b24:	e05d      	b.n	8009be2 <_dtoa_r+0x952>
 8009b26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009b28:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009b2c:	e746      	b.n	80099bc <_dtoa_r+0x72c>
 8009b2e:	9b07      	ldr	r3, [sp, #28]
 8009b30:	1e5c      	subs	r4, r3, #1
 8009b32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b34:	42a3      	cmp	r3, r4
 8009b36:	bfbf      	itttt	lt
 8009b38:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009b3a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009b3c:	1ae3      	sublt	r3, r4, r3
 8009b3e:	18d2      	addlt	r2, r2, r3
 8009b40:	bfa8      	it	ge
 8009b42:	1b1c      	subge	r4, r3, r4
 8009b44:	9b07      	ldr	r3, [sp, #28]
 8009b46:	bfbe      	ittt	lt
 8009b48:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009b4a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009b4c:	2400      	movlt	r4, #0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	bfb5      	itete	lt
 8009b52:	eba8 0603 	sublt.w	r6, r8, r3
 8009b56:	4646      	movge	r6, r8
 8009b58:	2300      	movlt	r3, #0
 8009b5a:	9b07      	ldrge	r3, [sp, #28]
 8009b5c:	e730      	b.n	80099c0 <_dtoa_r+0x730>
 8009b5e:	4646      	mov	r6, r8
 8009b60:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b62:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009b64:	e735      	b.n	80099d2 <_dtoa_r+0x742>
 8009b66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b68:	e75c      	b.n	8009a24 <_dtoa_r+0x794>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	e788      	b.n	8009a80 <_dtoa_r+0x7f0>
 8009b6e:	9b02      	ldr	r3, [sp, #8]
 8009b70:	e786      	b.n	8009a80 <_dtoa_r+0x7f0>
 8009b72:	2300      	movs	r3, #0
 8009b74:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b76:	e788      	b.n	8009a8a <_dtoa_r+0x7fa>
 8009b78:	d09f      	beq.n	8009aba <_dtoa_r+0x82a>
 8009b7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b7c:	331c      	adds	r3, #28
 8009b7e:	441a      	add	r2, r3
 8009b80:	4498      	add	r8, r3
 8009b82:	441e      	add	r6, r3
 8009b84:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b86:	e798      	b.n	8009aba <_dtoa_r+0x82a>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	e7f6      	b.n	8009b7a <_dtoa_r+0x8ea>
 8009b8c:	9b07      	ldr	r3, [sp, #28]
 8009b8e:	9704      	str	r7, [sp, #16]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	dc20      	bgt.n	8009bd6 <_dtoa_r+0x946>
 8009b94:	9308      	str	r3, [sp, #32]
 8009b96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	dd1e      	ble.n	8009bda <_dtoa_r+0x94a>
 8009b9c:	9b08      	ldr	r3, [sp, #32]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f47f aebc 	bne.w	800991c <_dtoa_r+0x68c>
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	2205      	movs	r2, #5
 8009ba8:	4658      	mov	r0, fp
 8009baa:	f000 fa99 	bl	800a0e0 <__multadd>
 8009bae:	4601      	mov	r1, r0
 8009bb0:	4604      	mov	r4, r0
 8009bb2:	4648      	mov	r0, r9
 8009bb4:	f000 fcf4 	bl	800a5a0 <__mcmp>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	f77f aeaf 	ble.w	800991c <_dtoa_r+0x68c>
 8009bbe:	2331      	movs	r3, #49	@ 0x31
 8009bc0:	4656      	mov	r6, sl
 8009bc2:	f806 3b01 	strb.w	r3, [r6], #1
 8009bc6:	9b04      	ldr	r3, [sp, #16]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	9304      	str	r3, [sp, #16]
 8009bcc:	e6aa      	b.n	8009924 <_dtoa_r+0x694>
 8009bce:	9c07      	ldr	r4, [sp, #28]
 8009bd0:	9704      	str	r7, [sp, #16]
 8009bd2:	4625      	mov	r5, r4
 8009bd4:	e7f3      	b.n	8009bbe <_dtoa_r+0x92e>
 8009bd6:	9b07      	ldr	r3, [sp, #28]
 8009bd8:	9308      	str	r3, [sp, #32]
 8009bda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 8104 	beq.w	8009dea <_dtoa_r+0xb5a>
 8009be2:	2e00      	cmp	r6, #0
 8009be4:	dd05      	ble.n	8009bf2 <_dtoa_r+0x962>
 8009be6:	4629      	mov	r1, r5
 8009be8:	4632      	mov	r2, r6
 8009bea:	4658      	mov	r0, fp
 8009bec:	f000 fc6c 	bl	800a4c8 <__lshift>
 8009bf0:	4605      	mov	r5, r0
 8009bf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d05a      	beq.n	8009cae <_dtoa_r+0xa1e>
 8009bf8:	4658      	mov	r0, fp
 8009bfa:	6869      	ldr	r1, [r5, #4]
 8009bfc:	f000 fa0e 	bl	800a01c <_Balloc>
 8009c00:	4606      	mov	r6, r0
 8009c02:	b928      	cbnz	r0, 8009c10 <_dtoa_r+0x980>
 8009c04:	4602      	mov	r2, r0
 8009c06:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009c0a:	4b83      	ldr	r3, [pc, #524]	@ (8009e18 <_dtoa_r+0xb88>)
 8009c0c:	f7ff bb54 	b.w	80092b8 <_dtoa_r+0x28>
 8009c10:	692a      	ldr	r2, [r5, #16]
 8009c12:	f105 010c 	add.w	r1, r5, #12
 8009c16:	3202      	adds	r2, #2
 8009c18:	0092      	lsls	r2, r2, #2
 8009c1a:	300c      	adds	r0, #12
 8009c1c:	f001 ff5e 	bl	800badc <memcpy>
 8009c20:	2201      	movs	r2, #1
 8009c22:	4631      	mov	r1, r6
 8009c24:	4658      	mov	r0, fp
 8009c26:	f000 fc4f 	bl	800a4c8 <__lshift>
 8009c2a:	462f      	mov	r7, r5
 8009c2c:	4605      	mov	r5, r0
 8009c2e:	f10a 0301 	add.w	r3, sl, #1
 8009c32:	9307      	str	r3, [sp, #28]
 8009c34:	9b08      	ldr	r3, [sp, #32]
 8009c36:	4453      	add	r3, sl
 8009c38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c3a:	9b02      	ldr	r3, [sp, #8]
 8009c3c:	f003 0301 	and.w	r3, r3, #1
 8009c40:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c42:	9b07      	ldr	r3, [sp, #28]
 8009c44:	4621      	mov	r1, r4
 8009c46:	3b01      	subs	r3, #1
 8009c48:	4648      	mov	r0, r9
 8009c4a:	9302      	str	r3, [sp, #8]
 8009c4c:	f7ff fa98 	bl	8009180 <quorem>
 8009c50:	4639      	mov	r1, r7
 8009c52:	9008      	str	r0, [sp, #32]
 8009c54:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009c58:	4648      	mov	r0, r9
 8009c5a:	f000 fca1 	bl	800a5a0 <__mcmp>
 8009c5e:	462a      	mov	r2, r5
 8009c60:	9009      	str	r0, [sp, #36]	@ 0x24
 8009c62:	4621      	mov	r1, r4
 8009c64:	4658      	mov	r0, fp
 8009c66:	f000 fcb7 	bl	800a5d8 <__mdiff>
 8009c6a:	68c2      	ldr	r2, [r0, #12]
 8009c6c:	4606      	mov	r6, r0
 8009c6e:	bb02      	cbnz	r2, 8009cb2 <_dtoa_r+0xa22>
 8009c70:	4601      	mov	r1, r0
 8009c72:	4648      	mov	r0, r9
 8009c74:	f000 fc94 	bl	800a5a0 <__mcmp>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	4658      	mov	r0, fp
 8009c7e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009c80:	f000 fa0c 	bl	800a09c <_Bfree>
 8009c84:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c86:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009c88:	9e07      	ldr	r6, [sp, #28]
 8009c8a:	ea43 0102 	orr.w	r1, r3, r2
 8009c8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c90:	4319      	orrs	r1, r3
 8009c92:	d110      	bne.n	8009cb6 <_dtoa_r+0xa26>
 8009c94:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c98:	d029      	beq.n	8009cee <_dtoa_r+0xa5e>
 8009c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	dd02      	ble.n	8009ca6 <_dtoa_r+0xa16>
 8009ca0:	9b08      	ldr	r3, [sp, #32]
 8009ca2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009ca6:	9b02      	ldr	r3, [sp, #8]
 8009ca8:	f883 8000 	strb.w	r8, [r3]
 8009cac:	e63b      	b.n	8009926 <_dtoa_r+0x696>
 8009cae:	4628      	mov	r0, r5
 8009cb0:	e7bb      	b.n	8009c2a <_dtoa_r+0x99a>
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	e7e1      	b.n	8009c7a <_dtoa_r+0x9ea>
 8009cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	db04      	blt.n	8009cc6 <_dtoa_r+0xa36>
 8009cbc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009cbe:	430b      	orrs	r3, r1
 8009cc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009cc2:	430b      	orrs	r3, r1
 8009cc4:	d120      	bne.n	8009d08 <_dtoa_r+0xa78>
 8009cc6:	2a00      	cmp	r2, #0
 8009cc8:	dded      	ble.n	8009ca6 <_dtoa_r+0xa16>
 8009cca:	4649      	mov	r1, r9
 8009ccc:	2201      	movs	r2, #1
 8009cce:	4658      	mov	r0, fp
 8009cd0:	f000 fbfa 	bl	800a4c8 <__lshift>
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	4681      	mov	r9, r0
 8009cd8:	f000 fc62 	bl	800a5a0 <__mcmp>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	dc03      	bgt.n	8009ce8 <_dtoa_r+0xa58>
 8009ce0:	d1e1      	bne.n	8009ca6 <_dtoa_r+0xa16>
 8009ce2:	f018 0f01 	tst.w	r8, #1
 8009ce6:	d0de      	beq.n	8009ca6 <_dtoa_r+0xa16>
 8009ce8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009cec:	d1d8      	bne.n	8009ca0 <_dtoa_r+0xa10>
 8009cee:	2339      	movs	r3, #57	@ 0x39
 8009cf0:	9a02      	ldr	r2, [sp, #8]
 8009cf2:	7013      	strb	r3, [r2, #0]
 8009cf4:	4633      	mov	r3, r6
 8009cf6:	461e      	mov	r6, r3
 8009cf8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	2a39      	cmp	r2, #57	@ 0x39
 8009d00:	d052      	beq.n	8009da8 <_dtoa_r+0xb18>
 8009d02:	3201      	adds	r2, #1
 8009d04:	701a      	strb	r2, [r3, #0]
 8009d06:	e60e      	b.n	8009926 <_dtoa_r+0x696>
 8009d08:	2a00      	cmp	r2, #0
 8009d0a:	dd07      	ble.n	8009d1c <_dtoa_r+0xa8c>
 8009d0c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d10:	d0ed      	beq.n	8009cee <_dtoa_r+0xa5e>
 8009d12:	9a02      	ldr	r2, [sp, #8]
 8009d14:	f108 0301 	add.w	r3, r8, #1
 8009d18:	7013      	strb	r3, [r2, #0]
 8009d1a:	e604      	b.n	8009926 <_dtoa_r+0x696>
 8009d1c:	9b07      	ldr	r3, [sp, #28]
 8009d1e:	9a07      	ldr	r2, [sp, #28]
 8009d20:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009d24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d028      	beq.n	8009d7c <_dtoa_r+0xaec>
 8009d2a:	4649      	mov	r1, r9
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	220a      	movs	r2, #10
 8009d30:	4658      	mov	r0, fp
 8009d32:	f000 f9d5 	bl	800a0e0 <__multadd>
 8009d36:	42af      	cmp	r7, r5
 8009d38:	4681      	mov	r9, r0
 8009d3a:	f04f 0300 	mov.w	r3, #0
 8009d3e:	f04f 020a 	mov.w	r2, #10
 8009d42:	4639      	mov	r1, r7
 8009d44:	4658      	mov	r0, fp
 8009d46:	d107      	bne.n	8009d58 <_dtoa_r+0xac8>
 8009d48:	f000 f9ca 	bl	800a0e0 <__multadd>
 8009d4c:	4607      	mov	r7, r0
 8009d4e:	4605      	mov	r5, r0
 8009d50:	9b07      	ldr	r3, [sp, #28]
 8009d52:	3301      	adds	r3, #1
 8009d54:	9307      	str	r3, [sp, #28]
 8009d56:	e774      	b.n	8009c42 <_dtoa_r+0x9b2>
 8009d58:	f000 f9c2 	bl	800a0e0 <__multadd>
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	4607      	mov	r7, r0
 8009d60:	2300      	movs	r3, #0
 8009d62:	220a      	movs	r2, #10
 8009d64:	4658      	mov	r0, fp
 8009d66:	f000 f9bb 	bl	800a0e0 <__multadd>
 8009d6a:	4605      	mov	r5, r0
 8009d6c:	e7f0      	b.n	8009d50 <_dtoa_r+0xac0>
 8009d6e:	9b08      	ldr	r3, [sp, #32]
 8009d70:	2700      	movs	r7, #0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	bfcc      	ite	gt
 8009d76:	461e      	movgt	r6, r3
 8009d78:	2601      	movle	r6, #1
 8009d7a:	4456      	add	r6, sl
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	2201      	movs	r2, #1
 8009d80:	4658      	mov	r0, fp
 8009d82:	f000 fba1 	bl	800a4c8 <__lshift>
 8009d86:	4621      	mov	r1, r4
 8009d88:	4681      	mov	r9, r0
 8009d8a:	f000 fc09 	bl	800a5a0 <__mcmp>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	dcb0      	bgt.n	8009cf4 <_dtoa_r+0xa64>
 8009d92:	d102      	bne.n	8009d9a <_dtoa_r+0xb0a>
 8009d94:	f018 0f01 	tst.w	r8, #1
 8009d98:	d1ac      	bne.n	8009cf4 <_dtoa_r+0xa64>
 8009d9a:	4633      	mov	r3, r6
 8009d9c:	461e      	mov	r6, r3
 8009d9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009da2:	2a30      	cmp	r2, #48	@ 0x30
 8009da4:	d0fa      	beq.n	8009d9c <_dtoa_r+0xb0c>
 8009da6:	e5be      	b.n	8009926 <_dtoa_r+0x696>
 8009da8:	459a      	cmp	sl, r3
 8009daa:	d1a4      	bne.n	8009cf6 <_dtoa_r+0xa66>
 8009dac:	9b04      	ldr	r3, [sp, #16]
 8009dae:	3301      	adds	r3, #1
 8009db0:	9304      	str	r3, [sp, #16]
 8009db2:	2331      	movs	r3, #49	@ 0x31
 8009db4:	f88a 3000 	strb.w	r3, [sl]
 8009db8:	e5b5      	b.n	8009926 <_dtoa_r+0x696>
 8009dba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009dbc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009e1c <_dtoa_r+0xb8c>
 8009dc0:	b11b      	cbz	r3, 8009dca <_dtoa_r+0xb3a>
 8009dc2:	f10a 0308 	add.w	r3, sl, #8
 8009dc6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	4650      	mov	r0, sl
 8009dcc:	b017      	add	sp, #92	@ 0x5c
 8009dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	f77f ae3d 	ble.w	8009a54 <_dtoa_r+0x7c4>
 8009dda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ddc:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dde:	2001      	movs	r0, #1
 8009de0:	e65b      	b.n	8009a9a <_dtoa_r+0x80a>
 8009de2:	9b08      	ldr	r3, [sp, #32]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f77f aed6 	ble.w	8009b96 <_dtoa_r+0x906>
 8009dea:	4656      	mov	r6, sl
 8009dec:	4621      	mov	r1, r4
 8009dee:	4648      	mov	r0, r9
 8009df0:	f7ff f9c6 	bl	8009180 <quorem>
 8009df4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009df8:	9b08      	ldr	r3, [sp, #32]
 8009dfa:	f806 8b01 	strb.w	r8, [r6], #1
 8009dfe:	eba6 020a 	sub.w	r2, r6, sl
 8009e02:	4293      	cmp	r3, r2
 8009e04:	ddb3      	ble.n	8009d6e <_dtoa_r+0xade>
 8009e06:	4649      	mov	r1, r9
 8009e08:	2300      	movs	r3, #0
 8009e0a:	220a      	movs	r2, #10
 8009e0c:	4658      	mov	r0, fp
 8009e0e:	f000 f967 	bl	800a0e0 <__multadd>
 8009e12:	4681      	mov	r9, r0
 8009e14:	e7ea      	b.n	8009dec <_dtoa_r+0xb5c>
 8009e16:	bf00      	nop
 8009e18:	0800e245 	.word	0x0800e245
 8009e1c:	0800e1c9 	.word	0x0800e1c9

08009e20 <_free_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	4605      	mov	r5, r0
 8009e24:	2900      	cmp	r1, #0
 8009e26:	d040      	beq.n	8009eaa <_free_r+0x8a>
 8009e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e2c:	1f0c      	subs	r4, r1, #4
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	bfb8      	it	lt
 8009e32:	18e4      	addlt	r4, r4, r3
 8009e34:	f000 f8e6 	bl	800a004 <__malloc_lock>
 8009e38:	4a1c      	ldr	r2, [pc, #112]	@ (8009eac <_free_r+0x8c>)
 8009e3a:	6813      	ldr	r3, [r2, #0]
 8009e3c:	b933      	cbnz	r3, 8009e4c <_free_r+0x2c>
 8009e3e:	6063      	str	r3, [r4, #4]
 8009e40:	6014      	str	r4, [r2, #0]
 8009e42:	4628      	mov	r0, r5
 8009e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e48:	f000 b8e2 	b.w	800a010 <__malloc_unlock>
 8009e4c:	42a3      	cmp	r3, r4
 8009e4e:	d908      	bls.n	8009e62 <_free_r+0x42>
 8009e50:	6820      	ldr	r0, [r4, #0]
 8009e52:	1821      	adds	r1, r4, r0
 8009e54:	428b      	cmp	r3, r1
 8009e56:	bf01      	itttt	eq
 8009e58:	6819      	ldreq	r1, [r3, #0]
 8009e5a:	685b      	ldreq	r3, [r3, #4]
 8009e5c:	1809      	addeq	r1, r1, r0
 8009e5e:	6021      	streq	r1, [r4, #0]
 8009e60:	e7ed      	b.n	8009e3e <_free_r+0x1e>
 8009e62:	461a      	mov	r2, r3
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	b10b      	cbz	r3, 8009e6c <_free_r+0x4c>
 8009e68:	42a3      	cmp	r3, r4
 8009e6a:	d9fa      	bls.n	8009e62 <_free_r+0x42>
 8009e6c:	6811      	ldr	r1, [r2, #0]
 8009e6e:	1850      	adds	r0, r2, r1
 8009e70:	42a0      	cmp	r0, r4
 8009e72:	d10b      	bne.n	8009e8c <_free_r+0x6c>
 8009e74:	6820      	ldr	r0, [r4, #0]
 8009e76:	4401      	add	r1, r0
 8009e78:	1850      	adds	r0, r2, r1
 8009e7a:	4283      	cmp	r3, r0
 8009e7c:	6011      	str	r1, [r2, #0]
 8009e7e:	d1e0      	bne.n	8009e42 <_free_r+0x22>
 8009e80:	6818      	ldr	r0, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	4408      	add	r0, r1
 8009e86:	6010      	str	r0, [r2, #0]
 8009e88:	6053      	str	r3, [r2, #4]
 8009e8a:	e7da      	b.n	8009e42 <_free_r+0x22>
 8009e8c:	d902      	bls.n	8009e94 <_free_r+0x74>
 8009e8e:	230c      	movs	r3, #12
 8009e90:	602b      	str	r3, [r5, #0]
 8009e92:	e7d6      	b.n	8009e42 <_free_r+0x22>
 8009e94:	6820      	ldr	r0, [r4, #0]
 8009e96:	1821      	adds	r1, r4, r0
 8009e98:	428b      	cmp	r3, r1
 8009e9a:	bf01      	itttt	eq
 8009e9c:	6819      	ldreq	r1, [r3, #0]
 8009e9e:	685b      	ldreq	r3, [r3, #4]
 8009ea0:	1809      	addeq	r1, r1, r0
 8009ea2:	6021      	streq	r1, [r4, #0]
 8009ea4:	6063      	str	r3, [r4, #4]
 8009ea6:	6054      	str	r4, [r2, #4]
 8009ea8:	e7cb      	b.n	8009e42 <_free_r+0x22>
 8009eaa:	bd38      	pop	{r3, r4, r5, pc}
 8009eac:	20000764 	.word	0x20000764

08009eb0 <malloc>:
 8009eb0:	4b02      	ldr	r3, [pc, #8]	@ (8009ebc <malloc+0xc>)
 8009eb2:	4601      	mov	r1, r0
 8009eb4:	6818      	ldr	r0, [r3, #0]
 8009eb6:	f000 b825 	b.w	8009f04 <_malloc_r>
 8009eba:	bf00      	nop
 8009ebc:	20000038 	.word	0x20000038

08009ec0 <sbrk_aligned>:
 8009ec0:	b570      	push	{r4, r5, r6, lr}
 8009ec2:	4e0f      	ldr	r6, [pc, #60]	@ (8009f00 <sbrk_aligned+0x40>)
 8009ec4:	460c      	mov	r4, r1
 8009ec6:	6831      	ldr	r1, [r6, #0]
 8009ec8:	4605      	mov	r5, r0
 8009eca:	b911      	cbnz	r1, 8009ed2 <sbrk_aligned+0x12>
 8009ecc:	f001 fdf6 	bl	800babc <_sbrk_r>
 8009ed0:	6030      	str	r0, [r6, #0]
 8009ed2:	4621      	mov	r1, r4
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	f001 fdf1 	bl	800babc <_sbrk_r>
 8009eda:	1c43      	adds	r3, r0, #1
 8009edc:	d103      	bne.n	8009ee6 <sbrk_aligned+0x26>
 8009ede:	f04f 34ff 	mov.w	r4, #4294967295
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	bd70      	pop	{r4, r5, r6, pc}
 8009ee6:	1cc4      	adds	r4, r0, #3
 8009ee8:	f024 0403 	bic.w	r4, r4, #3
 8009eec:	42a0      	cmp	r0, r4
 8009eee:	d0f8      	beq.n	8009ee2 <sbrk_aligned+0x22>
 8009ef0:	1a21      	subs	r1, r4, r0
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	f001 fde2 	bl	800babc <_sbrk_r>
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d1f2      	bne.n	8009ee2 <sbrk_aligned+0x22>
 8009efc:	e7ef      	b.n	8009ede <sbrk_aligned+0x1e>
 8009efe:	bf00      	nop
 8009f00:	20000760 	.word	0x20000760

08009f04 <_malloc_r>:
 8009f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f08:	1ccd      	adds	r5, r1, #3
 8009f0a:	f025 0503 	bic.w	r5, r5, #3
 8009f0e:	3508      	adds	r5, #8
 8009f10:	2d0c      	cmp	r5, #12
 8009f12:	bf38      	it	cc
 8009f14:	250c      	movcc	r5, #12
 8009f16:	2d00      	cmp	r5, #0
 8009f18:	4606      	mov	r6, r0
 8009f1a:	db01      	blt.n	8009f20 <_malloc_r+0x1c>
 8009f1c:	42a9      	cmp	r1, r5
 8009f1e:	d904      	bls.n	8009f2a <_malloc_r+0x26>
 8009f20:	230c      	movs	r3, #12
 8009f22:	6033      	str	r3, [r6, #0]
 8009f24:	2000      	movs	r0, #0
 8009f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a000 <_malloc_r+0xfc>
 8009f2e:	f000 f869 	bl	800a004 <__malloc_lock>
 8009f32:	f8d8 3000 	ldr.w	r3, [r8]
 8009f36:	461c      	mov	r4, r3
 8009f38:	bb44      	cbnz	r4, 8009f8c <_malloc_r+0x88>
 8009f3a:	4629      	mov	r1, r5
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	f7ff ffbf 	bl	8009ec0 <sbrk_aligned>
 8009f42:	1c43      	adds	r3, r0, #1
 8009f44:	4604      	mov	r4, r0
 8009f46:	d158      	bne.n	8009ffa <_malloc_r+0xf6>
 8009f48:	f8d8 4000 	ldr.w	r4, [r8]
 8009f4c:	4627      	mov	r7, r4
 8009f4e:	2f00      	cmp	r7, #0
 8009f50:	d143      	bne.n	8009fda <_malloc_r+0xd6>
 8009f52:	2c00      	cmp	r4, #0
 8009f54:	d04b      	beq.n	8009fee <_malloc_r+0xea>
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	4639      	mov	r1, r7
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	eb04 0903 	add.w	r9, r4, r3
 8009f60:	f001 fdac 	bl	800babc <_sbrk_r>
 8009f64:	4581      	cmp	r9, r0
 8009f66:	d142      	bne.n	8009fee <_malloc_r+0xea>
 8009f68:	6821      	ldr	r1, [r4, #0]
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	1a6d      	subs	r5, r5, r1
 8009f6e:	4629      	mov	r1, r5
 8009f70:	f7ff ffa6 	bl	8009ec0 <sbrk_aligned>
 8009f74:	3001      	adds	r0, #1
 8009f76:	d03a      	beq.n	8009fee <_malloc_r+0xea>
 8009f78:	6823      	ldr	r3, [r4, #0]
 8009f7a:	442b      	add	r3, r5
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f82:	685a      	ldr	r2, [r3, #4]
 8009f84:	bb62      	cbnz	r2, 8009fe0 <_malloc_r+0xdc>
 8009f86:	f8c8 7000 	str.w	r7, [r8]
 8009f8a:	e00f      	b.n	8009fac <_malloc_r+0xa8>
 8009f8c:	6822      	ldr	r2, [r4, #0]
 8009f8e:	1b52      	subs	r2, r2, r5
 8009f90:	d420      	bmi.n	8009fd4 <_malloc_r+0xd0>
 8009f92:	2a0b      	cmp	r2, #11
 8009f94:	d917      	bls.n	8009fc6 <_malloc_r+0xc2>
 8009f96:	1961      	adds	r1, r4, r5
 8009f98:	42a3      	cmp	r3, r4
 8009f9a:	6025      	str	r5, [r4, #0]
 8009f9c:	bf18      	it	ne
 8009f9e:	6059      	strne	r1, [r3, #4]
 8009fa0:	6863      	ldr	r3, [r4, #4]
 8009fa2:	bf08      	it	eq
 8009fa4:	f8c8 1000 	streq.w	r1, [r8]
 8009fa8:	5162      	str	r2, [r4, r5]
 8009faa:	604b      	str	r3, [r1, #4]
 8009fac:	4630      	mov	r0, r6
 8009fae:	f000 f82f 	bl	800a010 <__malloc_unlock>
 8009fb2:	f104 000b 	add.w	r0, r4, #11
 8009fb6:	1d23      	adds	r3, r4, #4
 8009fb8:	f020 0007 	bic.w	r0, r0, #7
 8009fbc:	1ac2      	subs	r2, r0, r3
 8009fbe:	bf1c      	itt	ne
 8009fc0:	1a1b      	subne	r3, r3, r0
 8009fc2:	50a3      	strne	r3, [r4, r2]
 8009fc4:	e7af      	b.n	8009f26 <_malloc_r+0x22>
 8009fc6:	6862      	ldr	r2, [r4, #4]
 8009fc8:	42a3      	cmp	r3, r4
 8009fca:	bf0c      	ite	eq
 8009fcc:	f8c8 2000 	streq.w	r2, [r8]
 8009fd0:	605a      	strne	r2, [r3, #4]
 8009fd2:	e7eb      	b.n	8009fac <_malloc_r+0xa8>
 8009fd4:	4623      	mov	r3, r4
 8009fd6:	6864      	ldr	r4, [r4, #4]
 8009fd8:	e7ae      	b.n	8009f38 <_malloc_r+0x34>
 8009fda:	463c      	mov	r4, r7
 8009fdc:	687f      	ldr	r7, [r7, #4]
 8009fde:	e7b6      	b.n	8009f4e <_malloc_r+0x4a>
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	42a3      	cmp	r3, r4
 8009fe6:	d1fb      	bne.n	8009fe0 <_malloc_r+0xdc>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	6053      	str	r3, [r2, #4]
 8009fec:	e7de      	b.n	8009fac <_malloc_r+0xa8>
 8009fee:	230c      	movs	r3, #12
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	6033      	str	r3, [r6, #0]
 8009ff4:	f000 f80c 	bl	800a010 <__malloc_unlock>
 8009ff8:	e794      	b.n	8009f24 <_malloc_r+0x20>
 8009ffa:	6005      	str	r5, [r0, #0]
 8009ffc:	e7d6      	b.n	8009fac <_malloc_r+0xa8>
 8009ffe:	bf00      	nop
 800a000:	20000764 	.word	0x20000764

0800a004 <__malloc_lock>:
 800a004:	4801      	ldr	r0, [pc, #4]	@ (800a00c <__malloc_lock+0x8>)
 800a006:	f7ff b8a6 	b.w	8009156 <__retarget_lock_acquire_recursive>
 800a00a:	bf00      	nop
 800a00c:	2000075c 	.word	0x2000075c

0800a010 <__malloc_unlock>:
 800a010:	4801      	ldr	r0, [pc, #4]	@ (800a018 <__malloc_unlock+0x8>)
 800a012:	f7ff b8a1 	b.w	8009158 <__retarget_lock_release_recursive>
 800a016:	bf00      	nop
 800a018:	2000075c 	.word	0x2000075c

0800a01c <_Balloc>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	69c6      	ldr	r6, [r0, #28]
 800a020:	4604      	mov	r4, r0
 800a022:	460d      	mov	r5, r1
 800a024:	b976      	cbnz	r6, 800a044 <_Balloc+0x28>
 800a026:	2010      	movs	r0, #16
 800a028:	f7ff ff42 	bl	8009eb0 <malloc>
 800a02c:	4602      	mov	r2, r0
 800a02e:	61e0      	str	r0, [r4, #28]
 800a030:	b920      	cbnz	r0, 800a03c <_Balloc+0x20>
 800a032:	216b      	movs	r1, #107	@ 0x6b
 800a034:	4b17      	ldr	r3, [pc, #92]	@ (800a094 <_Balloc+0x78>)
 800a036:	4818      	ldr	r0, [pc, #96]	@ (800a098 <_Balloc+0x7c>)
 800a038:	f001 fd64 	bl	800bb04 <__assert_func>
 800a03c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a040:	6006      	str	r6, [r0, #0]
 800a042:	60c6      	str	r6, [r0, #12]
 800a044:	69e6      	ldr	r6, [r4, #28]
 800a046:	68f3      	ldr	r3, [r6, #12]
 800a048:	b183      	cbz	r3, 800a06c <_Balloc+0x50>
 800a04a:	69e3      	ldr	r3, [r4, #28]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a052:	b9b8      	cbnz	r0, 800a084 <_Balloc+0x68>
 800a054:	2101      	movs	r1, #1
 800a056:	fa01 f605 	lsl.w	r6, r1, r5
 800a05a:	1d72      	adds	r2, r6, #5
 800a05c:	4620      	mov	r0, r4
 800a05e:	0092      	lsls	r2, r2, #2
 800a060:	f001 fd6e 	bl	800bb40 <_calloc_r>
 800a064:	b160      	cbz	r0, 800a080 <_Balloc+0x64>
 800a066:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a06a:	e00e      	b.n	800a08a <_Balloc+0x6e>
 800a06c:	2221      	movs	r2, #33	@ 0x21
 800a06e:	2104      	movs	r1, #4
 800a070:	4620      	mov	r0, r4
 800a072:	f001 fd65 	bl	800bb40 <_calloc_r>
 800a076:	69e3      	ldr	r3, [r4, #28]
 800a078:	60f0      	str	r0, [r6, #12]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1e4      	bne.n	800a04a <_Balloc+0x2e>
 800a080:	2000      	movs	r0, #0
 800a082:	bd70      	pop	{r4, r5, r6, pc}
 800a084:	6802      	ldr	r2, [r0, #0]
 800a086:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a08a:	2300      	movs	r3, #0
 800a08c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a090:	e7f7      	b.n	800a082 <_Balloc+0x66>
 800a092:	bf00      	nop
 800a094:	0800e1d6 	.word	0x0800e1d6
 800a098:	0800e256 	.word	0x0800e256

0800a09c <_Bfree>:
 800a09c:	b570      	push	{r4, r5, r6, lr}
 800a09e:	69c6      	ldr	r6, [r0, #28]
 800a0a0:	4605      	mov	r5, r0
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	b976      	cbnz	r6, 800a0c4 <_Bfree+0x28>
 800a0a6:	2010      	movs	r0, #16
 800a0a8:	f7ff ff02 	bl	8009eb0 <malloc>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	61e8      	str	r0, [r5, #28]
 800a0b0:	b920      	cbnz	r0, 800a0bc <_Bfree+0x20>
 800a0b2:	218f      	movs	r1, #143	@ 0x8f
 800a0b4:	4b08      	ldr	r3, [pc, #32]	@ (800a0d8 <_Bfree+0x3c>)
 800a0b6:	4809      	ldr	r0, [pc, #36]	@ (800a0dc <_Bfree+0x40>)
 800a0b8:	f001 fd24 	bl	800bb04 <__assert_func>
 800a0bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0c0:	6006      	str	r6, [r0, #0]
 800a0c2:	60c6      	str	r6, [r0, #12]
 800a0c4:	b13c      	cbz	r4, 800a0d6 <_Bfree+0x3a>
 800a0c6:	69eb      	ldr	r3, [r5, #28]
 800a0c8:	6862      	ldr	r2, [r4, #4]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0d0:	6021      	str	r1, [r4, #0]
 800a0d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}
 800a0d8:	0800e1d6 	.word	0x0800e1d6
 800a0dc:	0800e256 	.word	0x0800e256

0800a0e0 <__multadd>:
 800a0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e4:	4607      	mov	r7, r0
 800a0e6:	460c      	mov	r4, r1
 800a0e8:	461e      	mov	r6, r3
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	690d      	ldr	r5, [r1, #16]
 800a0ee:	f101 0c14 	add.w	ip, r1, #20
 800a0f2:	f8dc 3000 	ldr.w	r3, [ip]
 800a0f6:	3001      	adds	r0, #1
 800a0f8:	b299      	uxth	r1, r3
 800a0fa:	fb02 6101 	mla	r1, r2, r1, r6
 800a0fe:	0c1e      	lsrs	r6, r3, #16
 800a100:	0c0b      	lsrs	r3, r1, #16
 800a102:	fb02 3306 	mla	r3, r2, r6, r3
 800a106:	b289      	uxth	r1, r1
 800a108:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a10c:	4285      	cmp	r5, r0
 800a10e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a112:	f84c 1b04 	str.w	r1, [ip], #4
 800a116:	dcec      	bgt.n	800a0f2 <__multadd+0x12>
 800a118:	b30e      	cbz	r6, 800a15e <__multadd+0x7e>
 800a11a:	68a3      	ldr	r3, [r4, #8]
 800a11c:	42ab      	cmp	r3, r5
 800a11e:	dc19      	bgt.n	800a154 <__multadd+0x74>
 800a120:	6861      	ldr	r1, [r4, #4]
 800a122:	4638      	mov	r0, r7
 800a124:	3101      	adds	r1, #1
 800a126:	f7ff ff79 	bl	800a01c <_Balloc>
 800a12a:	4680      	mov	r8, r0
 800a12c:	b928      	cbnz	r0, 800a13a <__multadd+0x5a>
 800a12e:	4602      	mov	r2, r0
 800a130:	21ba      	movs	r1, #186	@ 0xba
 800a132:	4b0c      	ldr	r3, [pc, #48]	@ (800a164 <__multadd+0x84>)
 800a134:	480c      	ldr	r0, [pc, #48]	@ (800a168 <__multadd+0x88>)
 800a136:	f001 fce5 	bl	800bb04 <__assert_func>
 800a13a:	6922      	ldr	r2, [r4, #16]
 800a13c:	f104 010c 	add.w	r1, r4, #12
 800a140:	3202      	adds	r2, #2
 800a142:	0092      	lsls	r2, r2, #2
 800a144:	300c      	adds	r0, #12
 800a146:	f001 fcc9 	bl	800badc <memcpy>
 800a14a:	4621      	mov	r1, r4
 800a14c:	4638      	mov	r0, r7
 800a14e:	f7ff ffa5 	bl	800a09c <_Bfree>
 800a152:	4644      	mov	r4, r8
 800a154:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a158:	3501      	adds	r5, #1
 800a15a:	615e      	str	r6, [r3, #20]
 800a15c:	6125      	str	r5, [r4, #16]
 800a15e:	4620      	mov	r0, r4
 800a160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a164:	0800e245 	.word	0x0800e245
 800a168:	0800e256 	.word	0x0800e256

0800a16c <__s2b>:
 800a16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a170:	4615      	mov	r5, r2
 800a172:	2209      	movs	r2, #9
 800a174:	461f      	mov	r7, r3
 800a176:	3308      	adds	r3, #8
 800a178:	460c      	mov	r4, r1
 800a17a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a17e:	4606      	mov	r6, r0
 800a180:	2201      	movs	r2, #1
 800a182:	2100      	movs	r1, #0
 800a184:	429a      	cmp	r2, r3
 800a186:	db09      	blt.n	800a19c <__s2b+0x30>
 800a188:	4630      	mov	r0, r6
 800a18a:	f7ff ff47 	bl	800a01c <_Balloc>
 800a18e:	b940      	cbnz	r0, 800a1a2 <__s2b+0x36>
 800a190:	4602      	mov	r2, r0
 800a192:	21d3      	movs	r1, #211	@ 0xd3
 800a194:	4b18      	ldr	r3, [pc, #96]	@ (800a1f8 <__s2b+0x8c>)
 800a196:	4819      	ldr	r0, [pc, #100]	@ (800a1fc <__s2b+0x90>)
 800a198:	f001 fcb4 	bl	800bb04 <__assert_func>
 800a19c:	0052      	lsls	r2, r2, #1
 800a19e:	3101      	adds	r1, #1
 800a1a0:	e7f0      	b.n	800a184 <__s2b+0x18>
 800a1a2:	9b08      	ldr	r3, [sp, #32]
 800a1a4:	2d09      	cmp	r5, #9
 800a1a6:	6143      	str	r3, [r0, #20]
 800a1a8:	f04f 0301 	mov.w	r3, #1
 800a1ac:	6103      	str	r3, [r0, #16]
 800a1ae:	dd16      	ble.n	800a1de <__s2b+0x72>
 800a1b0:	f104 0909 	add.w	r9, r4, #9
 800a1b4:	46c8      	mov	r8, r9
 800a1b6:	442c      	add	r4, r5
 800a1b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a1bc:	4601      	mov	r1, r0
 800a1be:	220a      	movs	r2, #10
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	3b30      	subs	r3, #48	@ 0x30
 800a1c4:	f7ff ff8c 	bl	800a0e0 <__multadd>
 800a1c8:	45a0      	cmp	r8, r4
 800a1ca:	d1f5      	bne.n	800a1b8 <__s2b+0x4c>
 800a1cc:	f1a5 0408 	sub.w	r4, r5, #8
 800a1d0:	444c      	add	r4, r9
 800a1d2:	1b2d      	subs	r5, r5, r4
 800a1d4:	1963      	adds	r3, r4, r5
 800a1d6:	42bb      	cmp	r3, r7
 800a1d8:	db04      	blt.n	800a1e4 <__s2b+0x78>
 800a1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1de:	2509      	movs	r5, #9
 800a1e0:	340a      	adds	r4, #10
 800a1e2:	e7f6      	b.n	800a1d2 <__s2b+0x66>
 800a1e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1e8:	4601      	mov	r1, r0
 800a1ea:	220a      	movs	r2, #10
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	3b30      	subs	r3, #48	@ 0x30
 800a1f0:	f7ff ff76 	bl	800a0e0 <__multadd>
 800a1f4:	e7ee      	b.n	800a1d4 <__s2b+0x68>
 800a1f6:	bf00      	nop
 800a1f8:	0800e245 	.word	0x0800e245
 800a1fc:	0800e256 	.word	0x0800e256

0800a200 <__hi0bits>:
 800a200:	4603      	mov	r3, r0
 800a202:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a206:	bf3a      	itte	cc
 800a208:	0403      	lslcc	r3, r0, #16
 800a20a:	2010      	movcc	r0, #16
 800a20c:	2000      	movcs	r0, #0
 800a20e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a212:	bf3c      	itt	cc
 800a214:	021b      	lslcc	r3, r3, #8
 800a216:	3008      	addcc	r0, #8
 800a218:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a21c:	bf3c      	itt	cc
 800a21e:	011b      	lslcc	r3, r3, #4
 800a220:	3004      	addcc	r0, #4
 800a222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a226:	bf3c      	itt	cc
 800a228:	009b      	lslcc	r3, r3, #2
 800a22a:	3002      	addcc	r0, #2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	db05      	blt.n	800a23c <__hi0bits+0x3c>
 800a230:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a234:	f100 0001 	add.w	r0, r0, #1
 800a238:	bf08      	it	eq
 800a23a:	2020      	moveq	r0, #32
 800a23c:	4770      	bx	lr

0800a23e <__lo0bits>:
 800a23e:	6803      	ldr	r3, [r0, #0]
 800a240:	4602      	mov	r2, r0
 800a242:	f013 0007 	ands.w	r0, r3, #7
 800a246:	d00b      	beq.n	800a260 <__lo0bits+0x22>
 800a248:	07d9      	lsls	r1, r3, #31
 800a24a:	d421      	bmi.n	800a290 <__lo0bits+0x52>
 800a24c:	0798      	lsls	r0, r3, #30
 800a24e:	bf49      	itett	mi
 800a250:	085b      	lsrmi	r3, r3, #1
 800a252:	089b      	lsrpl	r3, r3, #2
 800a254:	2001      	movmi	r0, #1
 800a256:	6013      	strmi	r3, [r2, #0]
 800a258:	bf5c      	itt	pl
 800a25a:	2002      	movpl	r0, #2
 800a25c:	6013      	strpl	r3, [r2, #0]
 800a25e:	4770      	bx	lr
 800a260:	b299      	uxth	r1, r3
 800a262:	b909      	cbnz	r1, 800a268 <__lo0bits+0x2a>
 800a264:	2010      	movs	r0, #16
 800a266:	0c1b      	lsrs	r3, r3, #16
 800a268:	b2d9      	uxtb	r1, r3
 800a26a:	b909      	cbnz	r1, 800a270 <__lo0bits+0x32>
 800a26c:	3008      	adds	r0, #8
 800a26e:	0a1b      	lsrs	r3, r3, #8
 800a270:	0719      	lsls	r1, r3, #28
 800a272:	bf04      	itt	eq
 800a274:	091b      	lsreq	r3, r3, #4
 800a276:	3004      	addeq	r0, #4
 800a278:	0799      	lsls	r1, r3, #30
 800a27a:	bf04      	itt	eq
 800a27c:	089b      	lsreq	r3, r3, #2
 800a27e:	3002      	addeq	r0, #2
 800a280:	07d9      	lsls	r1, r3, #31
 800a282:	d403      	bmi.n	800a28c <__lo0bits+0x4e>
 800a284:	085b      	lsrs	r3, r3, #1
 800a286:	f100 0001 	add.w	r0, r0, #1
 800a28a:	d003      	beq.n	800a294 <__lo0bits+0x56>
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	4770      	bx	lr
 800a290:	2000      	movs	r0, #0
 800a292:	4770      	bx	lr
 800a294:	2020      	movs	r0, #32
 800a296:	4770      	bx	lr

0800a298 <__i2b>:
 800a298:	b510      	push	{r4, lr}
 800a29a:	460c      	mov	r4, r1
 800a29c:	2101      	movs	r1, #1
 800a29e:	f7ff febd 	bl	800a01c <_Balloc>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	b928      	cbnz	r0, 800a2b2 <__i2b+0x1a>
 800a2a6:	f240 1145 	movw	r1, #325	@ 0x145
 800a2aa:	4b04      	ldr	r3, [pc, #16]	@ (800a2bc <__i2b+0x24>)
 800a2ac:	4804      	ldr	r0, [pc, #16]	@ (800a2c0 <__i2b+0x28>)
 800a2ae:	f001 fc29 	bl	800bb04 <__assert_func>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	6144      	str	r4, [r0, #20]
 800a2b6:	6103      	str	r3, [r0, #16]
 800a2b8:	bd10      	pop	{r4, pc}
 800a2ba:	bf00      	nop
 800a2bc:	0800e245 	.word	0x0800e245
 800a2c0:	0800e256 	.word	0x0800e256

0800a2c4 <__multiply>:
 800a2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c8:	4614      	mov	r4, r2
 800a2ca:	690a      	ldr	r2, [r1, #16]
 800a2cc:	6923      	ldr	r3, [r4, #16]
 800a2ce:	460f      	mov	r7, r1
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	bfa2      	ittt	ge
 800a2d4:	4623      	movge	r3, r4
 800a2d6:	460c      	movge	r4, r1
 800a2d8:	461f      	movge	r7, r3
 800a2da:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a2de:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a2e2:	68a3      	ldr	r3, [r4, #8]
 800a2e4:	6861      	ldr	r1, [r4, #4]
 800a2e6:	eb0a 0609 	add.w	r6, sl, r9
 800a2ea:	42b3      	cmp	r3, r6
 800a2ec:	b085      	sub	sp, #20
 800a2ee:	bfb8      	it	lt
 800a2f0:	3101      	addlt	r1, #1
 800a2f2:	f7ff fe93 	bl	800a01c <_Balloc>
 800a2f6:	b930      	cbnz	r0, 800a306 <__multiply+0x42>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a2fe:	4b43      	ldr	r3, [pc, #268]	@ (800a40c <__multiply+0x148>)
 800a300:	4843      	ldr	r0, [pc, #268]	@ (800a410 <__multiply+0x14c>)
 800a302:	f001 fbff 	bl	800bb04 <__assert_func>
 800a306:	f100 0514 	add.w	r5, r0, #20
 800a30a:	462b      	mov	r3, r5
 800a30c:	2200      	movs	r2, #0
 800a30e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a312:	4543      	cmp	r3, r8
 800a314:	d321      	bcc.n	800a35a <__multiply+0x96>
 800a316:	f107 0114 	add.w	r1, r7, #20
 800a31a:	f104 0214 	add.w	r2, r4, #20
 800a31e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a322:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a326:	9302      	str	r3, [sp, #8]
 800a328:	1b13      	subs	r3, r2, r4
 800a32a:	3b15      	subs	r3, #21
 800a32c:	f023 0303 	bic.w	r3, r3, #3
 800a330:	3304      	adds	r3, #4
 800a332:	f104 0715 	add.w	r7, r4, #21
 800a336:	42ba      	cmp	r2, r7
 800a338:	bf38      	it	cc
 800a33a:	2304      	movcc	r3, #4
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	9b02      	ldr	r3, [sp, #8]
 800a340:	9103      	str	r1, [sp, #12]
 800a342:	428b      	cmp	r3, r1
 800a344:	d80c      	bhi.n	800a360 <__multiply+0x9c>
 800a346:	2e00      	cmp	r6, #0
 800a348:	dd03      	ble.n	800a352 <__multiply+0x8e>
 800a34a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d05a      	beq.n	800a408 <__multiply+0x144>
 800a352:	6106      	str	r6, [r0, #16]
 800a354:	b005      	add	sp, #20
 800a356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35a:	f843 2b04 	str.w	r2, [r3], #4
 800a35e:	e7d8      	b.n	800a312 <__multiply+0x4e>
 800a360:	f8b1 a000 	ldrh.w	sl, [r1]
 800a364:	f1ba 0f00 	cmp.w	sl, #0
 800a368:	d023      	beq.n	800a3b2 <__multiply+0xee>
 800a36a:	46a9      	mov	r9, r5
 800a36c:	f04f 0c00 	mov.w	ip, #0
 800a370:	f104 0e14 	add.w	lr, r4, #20
 800a374:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a378:	f8d9 3000 	ldr.w	r3, [r9]
 800a37c:	fa1f fb87 	uxth.w	fp, r7
 800a380:	b29b      	uxth	r3, r3
 800a382:	fb0a 330b 	mla	r3, sl, fp, r3
 800a386:	4463      	add	r3, ip
 800a388:	f8d9 c000 	ldr.w	ip, [r9]
 800a38c:	0c3f      	lsrs	r7, r7, #16
 800a38e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a392:	fb0a c707 	mla	r7, sl, r7, ip
 800a396:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a3a0:	4572      	cmp	r2, lr
 800a3a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a3a6:	f849 3b04 	str.w	r3, [r9], #4
 800a3aa:	d8e3      	bhi.n	800a374 <__multiply+0xb0>
 800a3ac:	9b01      	ldr	r3, [sp, #4]
 800a3ae:	f845 c003 	str.w	ip, [r5, r3]
 800a3b2:	9b03      	ldr	r3, [sp, #12]
 800a3b4:	3104      	adds	r1, #4
 800a3b6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a3ba:	f1b9 0f00 	cmp.w	r9, #0
 800a3be:	d021      	beq.n	800a404 <__multiply+0x140>
 800a3c0:	46ae      	mov	lr, r5
 800a3c2:	f04f 0a00 	mov.w	sl, #0
 800a3c6:	682b      	ldr	r3, [r5, #0]
 800a3c8:	f104 0c14 	add.w	ip, r4, #20
 800a3cc:	f8bc b000 	ldrh.w	fp, [ip]
 800a3d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	fb09 770b 	mla	r7, r9, fp, r7
 800a3da:	4457      	add	r7, sl
 800a3dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a3e0:	f84e 3b04 	str.w	r3, [lr], #4
 800a3e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a3e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3ec:	f8be 3000 	ldrh.w	r3, [lr]
 800a3f0:	4562      	cmp	r2, ip
 800a3f2:	fb09 330a 	mla	r3, r9, sl, r3
 800a3f6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a3fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3fe:	d8e5      	bhi.n	800a3cc <__multiply+0x108>
 800a400:	9f01      	ldr	r7, [sp, #4]
 800a402:	51eb      	str	r3, [r5, r7]
 800a404:	3504      	adds	r5, #4
 800a406:	e79a      	b.n	800a33e <__multiply+0x7a>
 800a408:	3e01      	subs	r6, #1
 800a40a:	e79c      	b.n	800a346 <__multiply+0x82>
 800a40c:	0800e245 	.word	0x0800e245
 800a410:	0800e256 	.word	0x0800e256

0800a414 <__pow5mult>:
 800a414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a418:	4615      	mov	r5, r2
 800a41a:	f012 0203 	ands.w	r2, r2, #3
 800a41e:	4607      	mov	r7, r0
 800a420:	460e      	mov	r6, r1
 800a422:	d007      	beq.n	800a434 <__pow5mult+0x20>
 800a424:	4c25      	ldr	r4, [pc, #148]	@ (800a4bc <__pow5mult+0xa8>)
 800a426:	3a01      	subs	r2, #1
 800a428:	2300      	movs	r3, #0
 800a42a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a42e:	f7ff fe57 	bl	800a0e0 <__multadd>
 800a432:	4606      	mov	r6, r0
 800a434:	10ad      	asrs	r5, r5, #2
 800a436:	d03d      	beq.n	800a4b4 <__pow5mult+0xa0>
 800a438:	69fc      	ldr	r4, [r7, #28]
 800a43a:	b97c      	cbnz	r4, 800a45c <__pow5mult+0x48>
 800a43c:	2010      	movs	r0, #16
 800a43e:	f7ff fd37 	bl	8009eb0 <malloc>
 800a442:	4602      	mov	r2, r0
 800a444:	61f8      	str	r0, [r7, #28]
 800a446:	b928      	cbnz	r0, 800a454 <__pow5mult+0x40>
 800a448:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a44c:	4b1c      	ldr	r3, [pc, #112]	@ (800a4c0 <__pow5mult+0xac>)
 800a44e:	481d      	ldr	r0, [pc, #116]	@ (800a4c4 <__pow5mult+0xb0>)
 800a450:	f001 fb58 	bl	800bb04 <__assert_func>
 800a454:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a458:	6004      	str	r4, [r0, #0]
 800a45a:	60c4      	str	r4, [r0, #12]
 800a45c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a460:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a464:	b94c      	cbnz	r4, 800a47a <__pow5mult+0x66>
 800a466:	f240 2171 	movw	r1, #625	@ 0x271
 800a46a:	4638      	mov	r0, r7
 800a46c:	f7ff ff14 	bl	800a298 <__i2b>
 800a470:	2300      	movs	r3, #0
 800a472:	4604      	mov	r4, r0
 800a474:	f8c8 0008 	str.w	r0, [r8, #8]
 800a478:	6003      	str	r3, [r0, #0]
 800a47a:	f04f 0900 	mov.w	r9, #0
 800a47e:	07eb      	lsls	r3, r5, #31
 800a480:	d50a      	bpl.n	800a498 <__pow5mult+0x84>
 800a482:	4631      	mov	r1, r6
 800a484:	4622      	mov	r2, r4
 800a486:	4638      	mov	r0, r7
 800a488:	f7ff ff1c 	bl	800a2c4 <__multiply>
 800a48c:	4680      	mov	r8, r0
 800a48e:	4631      	mov	r1, r6
 800a490:	4638      	mov	r0, r7
 800a492:	f7ff fe03 	bl	800a09c <_Bfree>
 800a496:	4646      	mov	r6, r8
 800a498:	106d      	asrs	r5, r5, #1
 800a49a:	d00b      	beq.n	800a4b4 <__pow5mult+0xa0>
 800a49c:	6820      	ldr	r0, [r4, #0]
 800a49e:	b938      	cbnz	r0, 800a4b0 <__pow5mult+0x9c>
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	4621      	mov	r1, r4
 800a4a4:	4638      	mov	r0, r7
 800a4a6:	f7ff ff0d 	bl	800a2c4 <__multiply>
 800a4aa:	6020      	str	r0, [r4, #0]
 800a4ac:	f8c0 9000 	str.w	r9, [r0]
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	e7e4      	b.n	800a47e <__pow5mult+0x6a>
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ba:	bf00      	nop
 800a4bc:	0800e2b0 	.word	0x0800e2b0
 800a4c0:	0800e1d6 	.word	0x0800e1d6
 800a4c4:	0800e256 	.word	0x0800e256

0800a4c8 <__lshift>:
 800a4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4cc:	460c      	mov	r4, r1
 800a4ce:	4607      	mov	r7, r0
 800a4d0:	4691      	mov	r9, r2
 800a4d2:	6923      	ldr	r3, [r4, #16]
 800a4d4:	6849      	ldr	r1, [r1, #4]
 800a4d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4da:	68a3      	ldr	r3, [r4, #8]
 800a4dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4e0:	f108 0601 	add.w	r6, r8, #1
 800a4e4:	42b3      	cmp	r3, r6
 800a4e6:	db0b      	blt.n	800a500 <__lshift+0x38>
 800a4e8:	4638      	mov	r0, r7
 800a4ea:	f7ff fd97 	bl	800a01c <_Balloc>
 800a4ee:	4605      	mov	r5, r0
 800a4f0:	b948      	cbnz	r0, 800a506 <__lshift+0x3e>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a4f8:	4b27      	ldr	r3, [pc, #156]	@ (800a598 <__lshift+0xd0>)
 800a4fa:	4828      	ldr	r0, [pc, #160]	@ (800a59c <__lshift+0xd4>)
 800a4fc:	f001 fb02 	bl	800bb04 <__assert_func>
 800a500:	3101      	adds	r1, #1
 800a502:	005b      	lsls	r3, r3, #1
 800a504:	e7ee      	b.n	800a4e4 <__lshift+0x1c>
 800a506:	2300      	movs	r3, #0
 800a508:	f100 0114 	add.w	r1, r0, #20
 800a50c:	f100 0210 	add.w	r2, r0, #16
 800a510:	4618      	mov	r0, r3
 800a512:	4553      	cmp	r3, sl
 800a514:	db33      	blt.n	800a57e <__lshift+0xb6>
 800a516:	6920      	ldr	r0, [r4, #16]
 800a518:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a51c:	f104 0314 	add.w	r3, r4, #20
 800a520:	f019 091f 	ands.w	r9, r9, #31
 800a524:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a528:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a52c:	d02b      	beq.n	800a586 <__lshift+0xbe>
 800a52e:	468a      	mov	sl, r1
 800a530:	2200      	movs	r2, #0
 800a532:	f1c9 0e20 	rsb	lr, r9, #32
 800a536:	6818      	ldr	r0, [r3, #0]
 800a538:	fa00 f009 	lsl.w	r0, r0, r9
 800a53c:	4310      	orrs	r0, r2
 800a53e:	f84a 0b04 	str.w	r0, [sl], #4
 800a542:	f853 2b04 	ldr.w	r2, [r3], #4
 800a546:	459c      	cmp	ip, r3
 800a548:	fa22 f20e 	lsr.w	r2, r2, lr
 800a54c:	d8f3      	bhi.n	800a536 <__lshift+0x6e>
 800a54e:	ebac 0304 	sub.w	r3, ip, r4
 800a552:	3b15      	subs	r3, #21
 800a554:	f023 0303 	bic.w	r3, r3, #3
 800a558:	3304      	adds	r3, #4
 800a55a:	f104 0015 	add.w	r0, r4, #21
 800a55e:	4584      	cmp	ip, r0
 800a560:	bf38      	it	cc
 800a562:	2304      	movcc	r3, #4
 800a564:	50ca      	str	r2, [r1, r3]
 800a566:	b10a      	cbz	r2, 800a56c <__lshift+0xa4>
 800a568:	f108 0602 	add.w	r6, r8, #2
 800a56c:	3e01      	subs	r6, #1
 800a56e:	4638      	mov	r0, r7
 800a570:	4621      	mov	r1, r4
 800a572:	612e      	str	r6, [r5, #16]
 800a574:	f7ff fd92 	bl	800a09c <_Bfree>
 800a578:	4628      	mov	r0, r5
 800a57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a57e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a582:	3301      	adds	r3, #1
 800a584:	e7c5      	b.n	800a512 <__lshift+0x4a>
 800a586:	3904      	subs	r1, #4
 800a588:	f853 2b04 	ldr.w	r2, [r3], #4
 800a58c:	459c      	cmp	ip, r3
 800a58e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a592:	d8f9      	bhi.n	800a588 <__lshift+0xc0>
 800a594:	e7ea      	b.n	800a56c <__lshift+0xa4>
 800a596:	bf00      	nop
 800a598:	0800e245 	.word	0x0800e245
 800a59c:	0800e256 	.word	0x0800e256

0800a5a0 <__mcmp>:
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	690a      	ldr	r2, [r1, #16]
 800a5a4:	6900      	ldr	r0, [r0, #16]
 800a5a6:	b530      	push	{r4, r5, lr}
 800a5a8:	1a80      	subs	r0, r0, r2
 800a5aa:	d10e      	bne.n	800a5ca <__mcmp+0x2a>
 800a5ac:	3314      	adds	r3, #20
 800a5ae:	3114      	adds	r1, #20
 800a5b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a5b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a5b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a5bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5c0:	4295      	cmp	r5, r2
 800a5c2:	d003      	beq.n	800a5cc <__mcmp+0x2c>
 800a5c4:	d205      	bcs.n	800a5d2 <__mcmp+0x32>
 800a5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ca:	bd30      	pop	{r4, r5, pc}
 800a5cc:	42a3      	cmp	r3, r4
 800a5ce:	d3f3      	bcc.n	800a5b8 <__mcmp+0x18>
 800a5d0:	e7fb      	b.n	800a5ca <__mcmp+0x2a>
 800a5d2:	2001      	movs	r0, #1
 800a5d4:	e7f9      	b.n	800a5ca <__mcmp+0x2a>
	...

0800a5d8 <__mdiff>:
 800a5d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5dc:	4689      	mov	r9, r1
 800a5de:	4606      	mov	r6, r0
 800a5e0:	4611      	mov	r1, r2
 800a5e2:	4648      	mov	r0, r9
 800a5e4:	4614      	mov	r4, r2
 800a5e6:	f7ff ffdb 	bl	800a5a0 <__mcmp>
 800a5ea:	1e05      	subs	r5, r0, #0
 800a5ec:	d112      	bne.n	800a614 <__mdiff+0x3c>
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	f7ff fd13 	bl	800a01c <_Balloc>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	b928      	cbnz	r0, 800a606 <__mdiff+0x2e>
 800a5fa:	f240 2137 	movw	r1, #567	@ 0x237
 800a5fe:	4b3e      	ldr	r3, [pc, #248]	@ (800a6f8 <__mdiff+0x120>)
 800a600:	483e      	ldr	r0, [pc, #248]	@ (800a6fc <__mdiff+0x124>)
 800a602:	f001 fa7f 	bl	800bb04 <__assert_func>
 800a606:	2301      	movs	r3, #1
 800a608:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a60c:	4610      	mov	r0, r2
 800a60e:	b003      	add	sp, #12
 800a610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a614:	bfbc      	itt	lt
 800a616:	464b      	movlt	r3, r9
 800a618:	46a1      	movlt	r9, r4
 800a61a:	4630      	mov	r0, r6
 800a61c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a620:	bfba      	itte	lt
 800a622:	461c      	movlt	r4, r3
 800a624:	2501      	movlt	r5, #1
 800a626:	2500      	movge	r5, #0
 800a628:	f7ff fcf8 	bl	800a01c <_Balloc>
 800a62c:	4602      	mov	r2, r0
 800a62e:	b918      	cbnz	r0, 800a638 <__mdiff+0x60>
 800a630:	f240 2145 	movw	r1, #581	@ 0x245
 800a634:	4b30      	ldr	r3, [pc, #192]	@ (800a6f8 <__mdiff+0x120>)
 800a636:	e7e3      	b.n	800a600 <__mdiff+0x28>
 800a638:	f100 0b14 	add.w	fp, r0, #20
 800a63c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a640:	f109 0310 	add.w	r3, r9, #16
 800a644:	60c5      	str	r5, [r0, #12]
 800a646:	f04f 0c00 	mov.w	ip, #0
 800a64a:	f109 0514 	add.w	r5, r9, #20
 800a64e:	46d9      	mov	r9, fp
 800a650:	6926      	ldr	r6, [r4, #16]
 800a652:	f104 0e14 	add.w	lr, r4, #20
 800a656:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a65a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a65e:	9301      	str	r3, [sp, #4]
 800a660:	9b01      	ldr	r3, [sp, #4]
 800a662:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a666:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a66a:	b281      	uxth	r1, r0
 800a66c:	9301      	str	r3, [sp, #4]
 800a66e:	fa1f f38a 	uxth.w	r3, sl
 800a672:	1a5b      	subs	r3, r3, r1
 800a674:	0c00      	lsrs	r0, r0, #16
 800a676:	4463      	add	r3, ip
 800a678:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a67c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a680:	b29b      	uxth	r3, r3
 800a682:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a686:	4576      	cmp	r6, lr
 800a688:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a68c:	f849 3b04 	str.w	r3, [r9], #4
 800a690:	d8e6      	bhi.n	800a660 <__mdiff+0x88>
 800a692:	1b33      	subs	r3, r6, r4
 800a694:	3b15      	subs	r3, #21
 800a696:	f023 0303 	bic.w	r3, r3, #3
 800a69a:	3415      	adds	r4, #21
 800a69c:	3304      	adds	r3, #4
 800a69e:	42a6      	cmp	r6, r4
 800a6a0:	bf38      	it	cc
 800a6a2:	2304      	movcc	r3, #4
 800a6a4:	441d      	add	r5, r3
 800a6a6:	445b      	add	r3, fp
 800a6a8:	461e      	mov	r6, r3
 800a6aa:	462c      	mov	r4, r5
 800a6ac:	4544      	cmp	r4, r8
 800a6ae:	d30e      	bcc.n	800a6ce <__mdiff+0xf6>
 800a6b0:	f108 0103 	add.w	r1, r8, #3
 800a6b4:	1b49      	subs	r1, r1, r5
 800a6b6:	f021 0103 	bic.w	r1, r1, #3
 800a6ba:	3d03      	subs	r5, #3
 800a6bc:	45a8      	cmp	r8, r5
 800a6be:	bf38      	it	cc
 800a6c0:	2100      	movcc	r1, #0
 800a6c2:	440b      	add	r3, r1
 800a6c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6c8:	b199      	cbz	r1, 800a6f2 <__mdiff+0x11a>
 800a6ca:	6117      	str	r7, [r2, #16]
 800a6cc:	e79e      	b.n	800a60c <__mdiff+0x34>
 800a6ce:	46e6      	mov	lr, ip
 800a6d0:	f854 1b04 	ldr.w	r1, [r4], #4
 800a6d4:	fa1f fc81 	uxth.w	ip, r1
 800a6d8:	44f4      	add	ip, lr
 800a6da:	0c08      	lsrs	r0, r1, #16
 800a6dc:	4471      	add	r1, lr
 800a6de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a6e2:	b289      	uxth	r1, r1
 800a6e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a6e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6ec:	f846 1b04 	str.w	r1, [r6], #4
 800a6f0:	e7dc      	b.n	800a6ac <__mdiff+0xd4>
 800a6f2:	3f01      	subs	r7, #1
 800a6f4:	e7e6      	b.n	800a6c4 <__mdiff+0xec>
 800a6f6:	bf00      	nop
 800a6f8:	0800e245 	.word	0x0800e245
 800a6fc:	0800e256 	.word	0x0800e256

0800a700 <__ulp>:
 800a700:	4b0e      	ldr	r3, [pc, #56]	@ (800a73c <__ulp+0x3c>)
 800a702:	400b      	ands	r3, r1
 800a704:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a708:	2b00      	cmp	r3, #0
 800a70a:	dc08      	bgt.n	800a71e <__ulp+0x1e>
 800a70c:	425b      	negs	r3, r3
 800a70e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a712:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a716:	da04      	bge.n	800a722 <__ulp+0x22>
 800a718:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a71c:	4113      	asrs	r3, r2
 800a71e:	2200      	movs	r2, #0
 800a720:	e008      	b.n	800a734 <__ulp+0x34>
 800a722:	f1a2 0314 	sub.w	r3, r2, #20
 800a726:	2b1e      	cmp	r3, #30
 800a728:	bfd6      	itet	le
 800a72a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a72e:	2201      	movgt	r2, #1
 800a730:	40da      	lsrle	r2, r3
 800a732:	2300      	movs	r3, #0
 800a734:	4619      	mov	r1, r3
 800a736:	4610      	mov	r0, r2
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	7ff00000 	.word	0x7ff00000

0800a740 <__b2d>:
 800a740:	6902      	ldr	r2, [r0, #16]
 800a742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a744:	f100 0614 	add.w	r6, r0, #20
 800a748:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a74c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a750:	4f1e      	ldr	r7, [pc, #120]	@ (800a7cc <__b2d+0x8c>)
 800a752:	4620      	mov	r0, r4
 800a754:	f7ff fd54 	bl	800a200 <__hi0bits>
 800a758:	4603      	mov	r3, r0
 800a75a:	f1c0 0020 	rsb	r0, r0, #32
 800a75e:	2b0a      	cmp	r3, #10
 800a760:	f1a2 0504 	sub.w	r5, r2, #4
 800a764:	6008      	str	r0, [r1, #0]
 800a766:	dc12      	bgt.n	800a78e <__b2d+0x4e>
 800a768:	42ae      	cmp	r6, r5
 800a76a:	bf2c      	ite	cs
 800a76c:	2200      	movcs	r2, #0
 800a76e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a772:	f1c3 0c0b 	rsb	ip, r3, #11
 800a776:	3315      	adds	r3, #21
 800a778:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a77c:	fa04 f303 	lsl.w	r3, r4, r3
 800a780:	fa22 f20c 	lsr.w	r2, r2, ip
 800a784:	ea4e 0107 	orr.w	r1, lr, r7
 800a788:	431a      	orrs	r2, r3
 800a78a:	4610      	mov	r0, r2
 800a78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a78e:	42ae      	cmp	r6, r5
 800a790:	bf36      	itet	cc
 800a792:	f1a2 0508 	subcc.w	r5, r2, #8
 800a796:	2200      	movcs	r2, #0
 800a798:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a79c:	3b0b      	subs	r3, #11
 800a79e:	d012      	beq.n	800a7c6 <__b2d+0x86>
 800a7a0:	f1c3 0720 	rsb	r7, r3, #32
 800a7a4:	fa22 f107 	lsr.w	r1, r2, r7
 800a7a8:	409c      	lsls	r4, r3
 800a7aa:	430c      	orrs	r4, r1
 800a7ac:	42b5      	cmp	r5, r6
 800a7ae:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800a7b2:	bf94      	ite	ls
 800a7b4:	2400      	movls	r4, #0
 800a7b6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a7ba:	409a      	lsls	r2, r3
 800a7bc:	40fc      	lsrs	r4, r7
 800a7be:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a7c2:	4322      	orrs	r2, r4
 800a7c4:	e7e1      	b.n	800a78a <__b2d+0x4a>
 800a7c6:	ea44 0107 	orr.w	r1, r4, r7
 800a7ca:	e7de      	b.n	800a78a <__b2d+0x4a>
 800a7cc:	3ff00000 	.word	0x3ff00000

0800a7d0 <__d2b>:
 800a7d0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a7d4:	2101      	movs	r1, #1
 800a7d6:	4690      	mov	r8, r2
 800a7d8:	4699      	mov	r9, r3
 800a7da:	9e08      	ldr	r6, [sp, #32]
 800a7dc:	f7ff fc1e 	bl	800a01c <_Balloc>
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	b930      	cbnz	r0, 800a7f2 <__d2b+0x22>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	f240 310f 	movw	r1, #783	@ 0x30f
 800a7ea:	4b23      	ldr	r3, [pc, #140]	@ (800a878 <__d2b+0xa8>)
 800a7ec:	4823      	ldr	r0, [pc, #140]	@ (800a87c <__d2b+0xac>)
 800a7ee:	f001 f989 	bl	800bb04 <__assert_func>
 800a7f2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7fa:	b10d      	cbz	r5, 800a800 <__d2b+0x30>
 800a7fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a800:	9301      	str	r3, [sp, #4]
 800a802:	f1b8 0300 	subs.w	r3, r8, #0
 800a806:	d024      	beq.n	800a852 <__d2b+0x82>
 800a808:	4668      	mov	r0, sp
 800a80a:	9300      	str	r3, [sp, #0]
 800a80c:	f7ff fd17 	bl	800a23e <__lo0bits>
 800a810:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a814:	b1d8      	cbz	r0, 800a84e <__d2b+0x7e>
 800a816:	f1c0 0320 	rsb	r3, r0, #32
 800a81a:	fa02 f303 	lsl.w	r3, r2, r3
 800a81e:	430b      	orrs	r3, r1
 800a820:	40c2      	lsrs	r2, r0
 800a822:	6163      	str	r3, [r4, #20]
 800a824:	9201      	str	r2, [sp, #4]
 800a826:	9b01      	ldr	r3, [sp, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	bf0c      	ite	eq
 800a82c:	2201      	moveq	r2, #1
 800a82e:	2202      	movne	r2, #2
 800a830:	61a3      	str	r3, [r4, #24]
 800a832:	6122      	str	r2, [r4, #16]
 800a834:	b1ad      	cbz	r5, 800a862 <__d2b+0x92>
 800a836:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a83a:	4405      	add	r5, r0
 800a83c:	6035      	str	r5, [r6, #0]
 800a83e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a844:	6018      	str	r0, [r3, #0]
 800a846:	4620      	mov	r0, r4
 800a848:	b002      	add	sp, #8
 800a84a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a84e:	6161      	str	r1, [r4, #20]
 800a850:	e7e9      	b.n	800a826 <__d2b+0x56>
 800a852:	a801      	add	r0, sp, #4
 800a854:	f7ff fcf3 	bl	800a23e <__lo0bits>
 800a858:	9b01      	ldr	r3, [sp, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	6163      	str	r3, [r4, #20]
 800a85e:	3020      	adds	r0, #32
 800a860:	e7e7      	b.n	800a832 <__d2b+0x62>
 800a862:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a866:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a86a:	6030      	str	r0, [r6, #0]
 800a86c:	6918      	ldr	r0, [r3, #16]
 800a86e:	f7ff fcc7 	bl	800a200 <__hi0bits>
 800a872:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a876:	e7e4      	b.n	800a842 <__d2b+0x72>
 800a878:	0800e245 	.word	0x0800e245
 800a87c:	0800e256 	.word	0x0800e256

0800a880 <__ratio>:
 800a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a884:	b085      	sub	sp, #20
 800a886:	e9cd 1000 	strd	r1, r0, [sp]
 800a88a:	a902      	add	r1, sp, #8
 800a88c:	f7ff ff58 	bl	800a740 <__b2d>
 800a890:	468b      	mov	fp, r1
 800a892:	4606      	mov	r6, r0
 800a894:	460f      	mov	r7, r1
 800a896:	9800      	ldr	r0, [sp, #0]
 800a898:	a903      	add	r1, sp, #12
 800a89a:	f7ff ff51 	bl	800a740 <__b2d>
 800a89e:	460d      	mov	r5, r1
 800a8a0:	9b01      	ldr	r3, [sp, #4]
 800a8a2:	4689      	mov	r9, r1
 800a8a4:	6919      	ldr	r1, [r3, #16]
 800a8a6:	9b00      	ldr	r3, [sp, #0]
 800a8a8:	4604      	mov	r4, r0
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	1ac9      	subs	r1, r1, r3
 800a8b0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a8b4:	1a9b      	subs	r3, r3, r2
 800a8b6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	bfcd      	iteet	gt
 800a8be:	463a      	movgt	r2, r7
 800a8c0:	462a      	movle	r2, r5
 800a8c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a8c6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a8ca:	bfd8      	it	le
 800a8cc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a8d0:	464b      	mov	r3, r9
 800a8d2:	4622      	mov	r2, r4
 800a8d4:	4659      	mov	r1, fp
 800a8d6:	f7f5 ff29 	bl	800072c <__aeabi_ddiv>
 800a8da:	b005      	add	sp, #20
 800a8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8e0 <__copybits>:
 800a8e0:	3901      	subs	r1, #1
 800a8e2:	b570      	push	{r4, r5, r6, lr}
 800a8e4:	1149      	asrs	r1, r1, #5
 800a8e6:	6914      	ldr	r4, [r2, #16]
 800a8e8:	3101      	adds	r1, #1
 800a8ea:	f102 0314 	add.w	r3, r2, #20
 800a8ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a8f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a8f6:	1f05      	subs	r5, r0, #4
 800a8f8:	42a3      	cmp	r3, r4
 800a8fa:	d30c      	bcc.n	800a916 <__copybits+0x36>
 800a8fc:	1aa3      	subs	r3, r4, r2
 800a8fe:	3b11      	subs	r3, #17
 800a900:	f023 0303 	bic.w	r3, r3, #3
 800a904:	3211      	adds	r2, #17
 800a906:	42a2      	cmp	r2, r4
 800a908:	bf88      	it	hi
 800a90a:	2300      	movhi	r3, #0
 800a90c:	4418      	add	r0, r3
 800a90e:	2300      	movs	r3, #0
 800a910:	4288      	cmp	r0, r1
 800a912:	d305      	bcc.n	800a920 <__copybits+0x40>
 800a914:	bd70      	pop	{r4, r5, r6, pc}
 800a916:	f853 6b04 	ldr.w	r6, [r3], #4
 800a91a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a91e:	e7eb      	b.n	800a8f8 <__copybits+0x18>
 800a920:	f840 3b04 	str.w	r3, [r0], #4
 800a924:	e7f4      	b.n	800a910 <__copybits+0x30>

0800a926 <__any_on>:
 800a926:	f100 0214 	add.w	r2, r0, #20
 800a92a:	6900      	ldr	r0, [r0, #16]
 800a92c:	114b      	asrs	r3, r1, #5
 800a92e:	4298      	cmp	r0, r3
 800a930:	b510      	push	{r4, lr}
 800a932:	db11      	blt.n	800a958 <__any_on+0x32>
 800a934:	dd0a      	ble.n	800a94c <__any_on+0x26>
 800a936:	f011 011f 	ands.w	r1, r1, #31
 800a93a:	d007      	beq.n	800a94c <__any_on+0x26>
 800a93c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a940:	fa24 f001 	lsr.w	r0, r4, r1
 800a944:	fa00 f101 	lsl.w	r1, r0, r1
 800a948:	428c      	cmp	r4, r1
 800a94a:	d10b      	bne.n	800a964 <__any_on+0x3e>
 800a94c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a950:	4293      	cmp	r3, r2
 800a952:	d803      	bhi.n	800a95c <__any_on+0x36>
 800a954:	2000      	movs	r0, #0
 800a956:	bd10      	pop	{r4, pc}
 800a958:	4603      	mov	r3, r0
 800a95a:	e7f7      	b.n	800a94c <__any_on+0x26>
 800a95c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a960:	2900      	cmp	r1, #0
 800a962:	d0f5      	beq.n	800a950 <__any_on+0x2a>
 800a964:	2001      	movs	r0, #1
 800a966:	e7f6      	b.n	800a956 <__any_on+0x30>

0800a968 <sulp>:
 800a968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a96c:	460f      	mov	r7, r1
 800a96e:	4690      	mov	r8, r2
 800a970:	f7ff fec6 	bl	800a700 <__ulp>
 800a974:	4604      	mov	r4, r0
 800a976:	460d      	mov	r5, r1
 800a978:	f1b8 0f00 	cmp.w	r8, #0
 800a97c:	d011      	beq.n	800a9a2 <sulp+0x3a>
 800a97e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a982:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a986:	2b00      	cmp	r3, #0
 800a988:	dd0b      	ble.n	800a9a2 <sulp+0x3a>
 800a98a:	2400      	movs	r4, #0
 800a98c:	051b      	lsls	r3, r3, #20
 800a98e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a992:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a996:	4622      	mov	r2, r4
 800a998:	462b      	mov	r3, r5
 800a99a:	f7f5 fd9d 	bl	80004d8 <__aeabi_dmul>
 800a99e:	4604      	mov	r4, r0
 800a9a0:	460d      	mov	r5, r1
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9aa:	0000      	movs	r0, r0
 800a9ac:	0000      	movs	r0, r0
	...

0800a9b0 <_strtod_l>:
 800a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	b09f      	sub	sp, #124	@ 0x7c
 800a9b6:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	921a      	str	r2, [sp, #104]	@ 0x68
 800a9be:	f04f 0a00 	mov.w	sl, #0
 800a9c2:	f04f 0b00 	mov.w	fp, #0
 800a9c6:	460a      	mov	r2, r1
 800a9c8:	9005      	str	r0, [sp, #20]
 800a9ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9cc:	7811      	ldrb	r1, [r2, #0]
 800a9ce:	292b      	cmp	r1, #43	@ 0x2b
 800a9d0:	d048      	beq.n	800aa64 <_strtod_l+0xb4>
 800a9d2:	d836      	bhi.n	800aa42 <_strtod_l+0x92>
 800a9d4:	290d      	cmp	r1, #13
 800a9d6:	d830      	bhi.n	800aa3a <_strtod_l+0x8a>
 800a9d8:	2908      	cmp	r1, #8
 800a9da:	d830      	bhi.n	800aa3e <_strtod_l+0x8e>
 800a9dc:	2900      	cmp	r1, #0
 800a9de:	d039      	beq.n	800aa54 <_strtod_l+0xa4>
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a9e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a9e6:	782a      	ldrb	r2, [r5, #0]
 800a9e8:	2a30      	cmp	r2, #48	@ 0x30
 800a9ea:	f040 80b1 	bne.w	800ab50 <_strtod_l+0x1a0>
 800a9ee:	786a      	ldrb	r2, [r5, #1]
 800a9f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a9f4:	2a58      	cmp	r2, #88	@ 0x58
 800a9f6:	d16c      	bne.n	800aad2 <_strtod_l+0x122>
 800a9f8:	9302      	str	r3, [sp, #8]
 800a9fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9fc:	4a8e      	ldr	r2, [pc, #568]	@ (800ac38 <_strtod_l+0x288>)
 800a9fe:	9301      	str	r3, [sp, #4]
 800aa00:	ab1a      	add	r3, sp, #104	@ 0x68
 800aa02:	9300      	str	r3, [sp, #0]
 800aa04:	9805      	ldr	r0, [sp, #20]
 800aa06:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aa08:	a919      	add	r1, sp, #100	@ 0x64
 800aa0a:	f001 f915 	bl	800bc38 <__gethex>
 800aa0e:	f010 060f 	ands.w	r6, r0, #15
 800aa12:	4604      	mov	r4, r0
 800aa14:	d005      	beq.n	800aa22 <_strtod_l+0x72>
 800aa16:	2e06      	cmp	r6, #6
 800aa18:	d126      	bne.n	800aa68 <_strtod_l+0xb8>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	3501      	adds	r5, #1
 800aa1e:	9519      	str	r5, [sp, #100]	@ 0x64
 800aa20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f040 8584 	bne.w	800b532 <_strtod_l+0xb82>
 800aa2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa2c:	b1bb      	cbz	r3, 800aa5e <_strtod_l+0xae>
 800aa2e:	4650      	mov	r0, sl
 800aa30:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800aa34:	b01f      	add	sp, #124	@ 0x7c
 800aa36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa3a:	2920      	cmp	r1, #32
 800aa3c:	d1d0      	bne.n	800a9e0 <_strtod_l+0x30>
 800aa3e:	3201      	adds	r2, #1
 800aa40:	e7c3      	b.n	800a9ca <_strtod_l+0x1a>
 800aa42:	292d      	cmp	r1, #45	@ 0x2d
 800aa44:	d1cc      	bne.n	800a9e0 <_strtod_l+0x30>
 800aa46:	2101      	movs	r1, #1
 800aa48:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa4a:	1c51      	adds	r1, r2, #1
 800aa4c:	9119      	str	r1, [sp, #100]	@ 0x64
 800aa4e:	7852      	ldrb	r2, [r2, #1]
 800aa50:	2a00      	cmp	r2, #0
 800aa52:	d1c7      	bne.n	800a9e4 <_strtod_l+0x34>
 800aa54:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa56:	9419      	str	r4, [sp, #100]	@ 0x64
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f040 8568 	bne.w	800b52e <_strtod_l+0xb7e>
 800aa5e:	4650      	mov	r0, sl
 800aa60:	4659      	mov	r1, fp
 800aa62:	e7e7      	b.n	800aa34 <_strtod_l+0x84>
 800aa64:	2100      	movs	r1, #0
 800aa66:	e7ef      	b.n	800aa48 <_strtod_l+0x98>
 800aa68:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aa6a:	b13a      	cbz	r2, 800aa7c <_strtod_l+0xcc>
 800aa6c:	2135      	movs	r1, #53	@ 0x35
 800aa6e:	a81c      	add	r0, sp, #112	@ 0x70
 800aa70:	f7ff ff36 	bl	800a8e0 <__copybits>
 800aa74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa76:	9805      	ldr	r0, [sp, #20]
 800aa78:	f7ff fb10 	bl	800a09c <_Bfree>
 800aa7c:	3e01      	subs	r6, #1
 800aa7e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800aa80:	2e04      	cmp	r6, #4
 800aa82:	d806      	bhi.n	800aa92 <_strtod_l+0xe2>
 800aa84:	e8df f006 	tbb	[pc, r6]
 800aa88:	201d0314 	.word	0x201d0314
 800aa8c:	14          	.byte	0x14
 800aa8d:	00          	.byte	0x00
 800aa8e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800aa92:	05e1      	lsls	r1, r4, #23
 800aa94:	bf48      	it	mi
 800aa96:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800aa9a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa9e:	0d1b      	lsrs	r3, r3, #20
 800aaa0:	051b      	lsls	r3, r3, #20
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1bd      	bne.n	800aa22 <_strtod_l+0x72>
 800aaa6:	f7fe fb2b 	bl	8009100 <__errno>
 800aaaa:	2322      	movs	r3, #34	@ 0x22
 800aaac:	6003      	str	r3, [r0, #0]
 800aaae:	e7b8      	b.n	800aa22 <_strtod_l+0x72>
 800aab0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800aab4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800aab8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aabc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aac0:	e7e7      	b.n	800aa92 <_strtod_l+0xe2>
 800aac2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800ac3c <_strtod_l+0x28c>
 800aac6:	e7e4      	b.n	800aa92 <_strtod_l+0xe2>
 800aac8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aacc:	f04f 3aff 	mov.w	sl, #4294967295
 800aad0:	e7df      	b.n	800aa92 <_strtod_l+0xe2>
 800aad2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aad4:	1c5a      	adds	r2, r3, #1
 800aad6:	9219      	str	r2, [sp, #100]	@ 0x64
 800aad8:	785b      	ldrb	r3, [r3, #1]
 800aada:	2b30      	cmp	r3, #48	@ 0x30
 800aadc:	d0f9      	beq.n	800aad2 <_strtod_l+0x122>
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d09f      	beq.n	800aa22 <_strtod_l+0x72>
 800aae2:	2301      	movs	r3, #1
 800aae4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aae6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aae8:	220a      	movs	r2, #10
 800aaea:	930c      	str	r3, [sp, #48]	@ 0x30
 800aaec:	2300      	movs	r3, #0
 800aaee:	461f      	mov	r7, r3
 800aaf0:	9308      	str	r3, [sp, #32]
 800aaf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800aaf4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aaf6:	7805      	ldrb	r5, [r0, #0]
 800aaf8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aafc:	b2d9      	uxtb	r1, r3
 800aafe:	2909      	cmp	r1, #9
 800ab00:	d928      	bls.n	800ab54 <_strtod_l+0x1a4>
 800ab02:	2201      	movs	r2, #1
 800ab04:	494e      	ldr	r1, [pc, #312]	@ (800ac40 <_strtod_l+0x290>)
 800ab06:	f000 ffc7 	bl	800ba98 <strncmp>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d032      	beq.n	800ab74 <_strtod_l+0x1c4>
 800ab0e:	2000      	movs	r0, #0
 800ab10:	462a      	mov	r2, r5
 800ab12:	4681      	mov	r9, r0
 800ab14:	463d      	mov	r5, r7
 800ab16:	4603      	mov	r3, r0
 800ab18:	2a65      	cmp	r2, #101	@ 0x65
 800ab1a:	d001      	beq.n	800ab20 <_strtod_l+0x170>
 800ab1c:	2a45      	cmp	r2, #69	@ 0x45
 800ab1e:	d114      	bne.n	800ab4a <_strtod_l+0x19a>
 800ab20:	b91d      	cbnz	r5, 800ab2a <_strtod_l+0x17a>
 800ab22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab24:	4302      	orrs	r2, r0
 800ab26:	d095      	beq.n	800aa54 <_strtod_l+0xa4>
 800ab28:	2500      	movs	r5, #0
 800ab2a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ab2c:	1c62      	adds	r2, r4, #1
 800ab2e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab30:	7862      	ldrb	r2, [r4, #1]
 800ab32:	2a2b      	cmp	r2, #43	@ 0x2b
 800ab34:	d077      	beq.n	800ac26 <_strtod_l+0x276>
 800ab36:	2a2d      	cmp	r2, #45	@ 0x2d
 800ab38:	d07b      	beq.n	800ac32 <_strtod_l+0x282>
 800ab3a:	f04f 0c00 	mov.w	ip, #0
 800ab3e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ab42:	2909      	cmp	r1, #9
 800ab44:	f240 8082 	bls.w	800ac4c <_strtod_l+0x29c>
 800ab48:	9419      	str	r4, [sp, #100]	@ 0x64
 800ab4a:	f04f 0800 	mov.w	r8, #0
 800ab4e:	e0a2      	b.n	800ac96 <_strtod_l+0x2e6>
 800ab50:	2300      	movs	r3, #0
 800ab52:	e7c7      	b.n	800aae4 <_strtod_l+0x134>
 800ab54:	2f08      	cmp	r7, #8
 800ab56:	bfd5      	itete	le
 800ab58:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ab5a:	9908      	ldrgt	r1, [sp, #32]
 800ab5c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ab60:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ab64:	f100 0001 	add.w	r0, r0, #1
 800ab68:	bfd4      	ite	le
 800ab6a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ab6c:	9308      	strgt	r3, [sp, #32]
 800ab6e:	3701      	adds	r7, #1
 800ab70:	9019      	str	r0, [sp, #100]	@ 0x64
 800ab72:	e7bf      	b.n	800aaf4 <_strtod_l+0x144>
 800ab74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab76:	1c5a      	adds	r2, r3, #1
 800ab78:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab7a:	785a      	ldrb	r2, [r3, #1]
 800ab7c:	b37f      	cbz	r7, 800abde <_strtod_l+0x22e>
 800ab7e:	4681      	mov	r9, r0
 800ab80:	463d      	mov	r5, r7
 800ab82:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ab86:	2b09      	cmp	r3, #9
 800ab88:	d912      	bls.n	800abb0 <_strtod_l+0x200>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e7c4      	b.n	800ab18 <_strtod_l+0x168>
 800ab8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab90:	3001      	adds	r0, #1
 800ab92:	1c5a      	adds	r2, r3, #1
 800ab94:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab96:	785a      	ldrb	r2, [r3, #1]
 800ab98:	2a30      	cmp	r2, #48	@ 0x30
 800ab9a:	d0f8      	beq.n	800ab8e <_strtod_l+0x1de>
 800ab9c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800aba0:	2b08      	cmp	r3, #8
 800aba2:	f200 84cb 	bhi.w	800b53c <_strtod_l+0xb8c>
 800aba6:	4681      	mov	r9, r0
 800aba8:	2000      	movs	r0, #0
 800abaa:	4605      	mov	r5, r0
 800abac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abae:	930c      	str	r3, [sp, #48]	@ 0x30
 800abb0:	3a30      	subs	r2, #48	@ 0x30
 800abb2:	f100 0301 	add.w	r3, r0, #1
 800abb6:	d02a      	beq.n	800ac0e <_strtod_l+0x25e>
 800abb8:	4499      	add	r9, r3
 800abba:	210a      	movs	r1, #10
 800abbc:	462b      	mov	r3, r5
 800abbe:	eb00 0c05 	add.w	ip, r0, r5
 800abc2:	4563      	cmp	r3, ip
 800abc4:	d10d      	bne.n	800abe2 <_strtod_l+0x232>
 800abc6:	1c69      	adds	r1, r5, #1
 800abc8:	4401      	add	r1, r0
 800abca:	4428      	add	r0, r5
 800abcc:	2808      	cmp	r0, #8
 800abce:	dc16      	bgt.n	800abfe <_strtod_l+0x24e>
 800abd0:	230a      	movs	r3, #10
 800abd2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800abd4:	fb03 2300 	mla	r3, r3, r0, r2
 800abd8:	930a      	str	r3, [sp, #40]	@ 0x28
 800abda:	2300      	movs	r3, #0
 800abdc:	e018      	b.n	800ac10 <_strtod_l+0x260>
 800abde:	4638      	mov	r0, r7
 800abe0:	e7da      	b.n	800ab98 <_strtod_l+0x1e8>
 800abe2:	2b08      	cmp	r3, #8
 800abe4:	f103 0301 	add.w	r3, r3, #1
 800abe8:	dc03      	bgt.n	800abf2 <_strtod_l+0x242>
 800abea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800abec:	434e      	muls	r6, r1
 800abee:	960a      	str	r6, [sp, #40]	@ 0x28
 800abf0:	e7e7      	b.n	800abc2 <_strtod_l+0x212>
 800abf2:	2b10      	cmp	r3, #16
 800abf4:	bfde      	ittt	le
 800abf6:	9e08      	ldrle	r6, [sp, #32]
 800abf8:	434e      	mulle	r6, r1
 800abfa:	9608      	strle	r6, [sp, #32]
 800abfc:	e7e1      	b.n	800abc2 <_strtod_l+0x212>
 800abfe:	280f      	cmp	r0, #15
 800ac00:	dceb      	bgt.n	800abda <_strtod_l+0x22a>
 800ac02:	230a      	movs	r3, #10
 800ac04:	9808      	ldr	r0, [sp, #32]
 800ac06:	fb03 2300 	mla	r3, r3, r0, r2
 800ac0a:	9308      	str	r3, [sp, #32]
 800ac0c:	e7e5      	b.n	800abda <_strtod_l+0x22a>
 800ac0e:	4629      	mov	r1, r5
 800ac10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac12:	460d      	mov	r5, r1
 800ac14:	1c50      	adds	r0, r2, #1
 800ac16:	9019      	str	r0, [sp, #100]	@ 0x64
 800ac18:	7852      	ldrb	r2, [r2, #1]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	e7b1      	b.n	800ab82 <_strtod_l+0x1d2>
 800ac1e:	f04f 0900 	mov.w	r9, #0
 800ac22:	2301      	movs	r3, #1
 800ac24:	e77d      	b.n	800ab22 <_strtod_l+0x172>
 800ac26:	f04f 0c00 	mov.w	ip, #0
 800ac2a:	1ca2      	adds	r2, r4, #2
 800ac2c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac2e:	78a2      	ldrb	r2, [r4, #2]
 800ac30:	e785      	b.n	800ab3e <_strtod_l+0x18e>
 800ac32:	f04f 0c01 	mov.w	ip, #1
 800ac36:	e7f8      	b.n	800ac2a <_strtod_l+0x27a>
 800ac38:	0800e3c8 	.word	0x0800e3c8
 800ac3c:	7ff00000 	.word	0x7ff00000
 800ac40:	0800e3b0 	.word	0x0800e3b0
 800ac44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac46:	1c51      	adds	r1, r2, #1
 800ac48:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac4a:	7852      	ldrb	r2, [r2, #1]
 800ac4c:	2a30      	cmp	r2, #48	@ 0x30
 800ac4e:	d0f9      	beq.n	800ac44 <_strtod_l+0x294>
 800ac50:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ac54:	2908      	cmp	r1, #8
 800ac56:	f63f af78 	bhi.w	800ab4a <_strtod_l+0x19a>
 800ac5a:	f04f 080a 	mov.w	r8, #10
 800ac5e:	3a30      	subs	r2, #48	@ 0x30
 800ac60:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac64:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ac66:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac68:	1c56      	adds	r6, r2, #1
 800ac6a:	9619      	str	r6, [sp, #100]	@ 0x64
 800ac6c:	7852      	ldrb	r2, [r2, #1]
 800ac6e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ac72:	f1be 0f09 	cmp.w	lr, #9
 800ac76:	d939      	bls.n	800acec <_strtod_l+0x33c>
 800ac78:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ac7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ac7e:	1a76      	subs	r6, r6, r1
 800ac80:	2e08      	cmp	r6, #8
 800ac82:	dc03      	bgt.n	800ac8c <_strtod_l+0x2dc>
 800ac84:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ac86:	4588      	cmp	r8, r1
 800ac88:	bfa8      	it	ge
 800ac8a:	4688      	movge	r8, r1
 800ac8c:	f1bc 0f00 	cmp.w	ip, #0
 800ac90:	d001      	beq.n	800ac96 <_strtod_l+0x2e6>
 800ac92:	f1c8 0800 	rsb	r8, r8, #0
 800ac96:	2d00      	cmp	r5, #0
 800ac98:	d14e      	bne.n	800ad38 <_strtod_l+0x388>
 800ac9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac9c:	4308      	orrs	r0, r1
 800ac9e:	f47f aec0 	bne.w	800aa22 <_strtod_l+0x72>
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f47f aed6 	bne.w	800aa54 <_strtod_l+0xa4>
 800aca8:	2a69      	cmp	r2, #105	@ 0x69
 800acaa:	d028      	beq.n	800acfe <_strtod_l+0x34e>
 800acac:	dc25      	bgt.n	800acfa <_strtod_l+0x34a>
 800acae:	2a49      	cmp	r2, #73	@ 0x49
 800acb0:	d025      	beq.n	800acfe <_strtod_l+0x34e>
 800acb2:	2a4e      	cmp	r2, #78	@ 0x4e
 800acb4:	f47f aece 	bne.w	800aa54 <_strtod_l+0xa4>
 800acb8:	499a      	ldr	r1, [pc, #616]	@ (800af24 <_strtod_l+0x574>)
 800acba:	a819      	add	r0, sp, #100	@ 0x64
 800acbc:	f001 f9de 	bl	800c07c <__match>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	f43f aec7 	beq.w	800aa54 <_strtod_l+0xa4>
 800acc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	2b28      	cmp	r3, #40	@ 0x28
 800accc:	d12e      	bne.n	800ad2c <_strtod_l+0x37c>
 800acce:	4996      	ldr	r1, [pc, #600]	@ (800af28 <_strtod_l+0x578>)
 800acd0:	aa1c      	add	r2, sp, #112	@ 0x70
 800acd2:	a819      	add	r0, sp, #100	@ 0x64
 800acd4:	f001 f9e6 	bl	800c0a4 <__hexnan>
 800acd8:	2805      	cmp	r0, #5
 800acda:	d127      	bne.n	800ad2c <_strtod_l+0x37c>
 800acdc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800acde:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ace2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ace6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800acea:	e69a      	b.n	800aa22 <_strtod_l+0x72>
 800acec:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800acee:	fb08 2101 	mla	r1, r8, r1, r2
 800acf2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800acf6:	920e      	str	r2, [sp, #56]	@ 0x38
 800acf8:	e7b5      	b.n	800ac66 <_strtod_l+0x2b6>
 800acfa:	2a6e      	cmp	r2, #110	@ 0x6e
 800acfc:	e7da      	b.n	800acb4 <_strtod_l+0x304>
 800acfe:	498b      	ldr	r1, [pc, #556]	@ (800af2c <_strtod_l+0x57c>)
 800ad00:	a819      	add	r0, sp, #100	@ 0x64
 800ad02:	f001 f9bb 	bl	800c07c <__match>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	f43f aea4 	beq.w	800aa54 <_strtod_l+0xa4>
 800ad0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad0e:	4988      	ldr	r1, [pc, #544]	@ (800af30 <_strtod_l+0x580>)
 800ad10:	3b01      	subs	r3, #1
 800ad12:	a819      	add	r0, sp, #100	@ 0x64
 800ad14:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad16:	f001 f9b1 	bl	800c07c <__match>
 800ad1a:	b910      	cbnz	r0, 800ad22 <_strtod_l+0x372>
 800ad1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad1e:	3301      	adds	r3, #1
 800ad20:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad22:	f04f 0a00 	mov.w	sl, #0
 800ad26:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800af34 <_strtod_l+0x584>
 800ad2a:	e67a      	b.n	800aa22 <_strtod_l+0x72>
 800ad2c:	4882      	ldr	r0, [pc, #520]	@ (800af38 <_strtod_l+0x588>)
 800ad2e:	f000 fee3 	bl	800baf8 <nan>
 800ad32:	4682      	mov	sl, r0
 800ad34:	468b      	mov	fp, r1
 800ad36:	e674      	b.n	800aa22 <_strtod_l+0x72>
 800ad38:	eba8 0309 	sub.w	r3, r8, r9
 800ad3c:	2f00      	cmp	r7, #0
 800ad3e:	bf08      	it	eq
 800ad40:	462f      	moveq	r7, r5
 800ad42:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad44:	2d10      	cmp	r5, #16
 800ad46:	462c      	mov	r4, r5
 800ad48:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad4a:	bfa8      	it	ge
 800ad4c:	2410      	movge	r4, #16
 800ad4e:	f7f5 fb49 	bl	80003e4 <__aeabi_ui2d>
 800ad52:	2d09      	cmp	r5, #9
 800ad54:	4682      	mov	sl, r0
 800ad56:	468b      	mov	fp, r1
 800ad58:	dc11      	bgt.n	800ad7e <_strtod_l+0x3ce>
 800ad5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f43f ae60 	beq.w	800aa22 <_strtod_l+0x72>
 800ad62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad64:	dd76      	ble.n	800ae54 <_strtod_l+0x4a4>
 800ad66:	2b16      	cmp	r3, #22
 800ad68:	dc5d      	bgt.n	800ae26 <_strtod_l+0x476>
 800ad6a:	4974      	ldr	r1, [pc, #464]	@ (800af3c <_strtod_l+0x58c>)
 800ad6c:	4652      	mov	r2, sl
 800ad6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad72:	465b      	mov	r3, fp
 800ad74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad78:	f7f5 fbae 	bl	80004d8 <__aeabi_dmul>
 800ad7c:	e7d9      	b.n	800ad32 <_strtod_l+0x382>
 800ad7e:	4b6f      	ldr	r3, [pc, #444]	@ (800af3c <_strtod_l+0x58c>)
 800ad80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ad88:	f7f5 fba6 	bl	80004d8 <__aeabi_dmul>
 800ad8c:	4682      	mov	sl, r0
 800ad8e:	9808      	ldr	r0, [sp, #32]
 800ad90:	468b      	mov	fp, r1
 800ad92:	f7f5 fb27 	bl	80003e4 <__aeabi_ui2d>
 800ad96:	4602      	mov	r2, r0
 800ad98:	460b      	mov	r3, r1
 800ad9a:	4650      	mov	r0, sl
 800ad9c:	4659      	mov	r1, fp
 800ad9e:	f7f5 f9e5 	bl	800016c <__adddf3>
 800ada2:	2d0f      	cmp	r5, #15
 800ada4:	4682      	mov	sl, r0
 800ada6:	468b      	mov	fp, r1
 800ada8:	ddd7      	ble.n	800ad5a <_strtod_l+0x3aa>
 800adaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adac:	1b2c      	subs	r4, r5, r4
 800adae:	441c      	add	r4, r3
 800adb0:	2c00      	cmp	r4, #0
 800adb2:	f340 8096 	ble.w	800aee2 <_strtod_l+0x532>
 800adb6:	f014 030f 	ands.w	r3, r4, #15
 800adba:	d00a      	beq.n	800add2 <_strtod_l+0x422>
 800adbc:	495f      	ldr	r1, [pc, #380]	@ (800af3c <_strtod_l+0x58c>)
 800adbe:	4652      	mov	r2, sl
 800adc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800adc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adc8:	465b      	mov	r3, fp
 800adca:	f7f5 fb85 	bl	80004d8 <__aeabi_dmul>
 800adce:	4682      	mov	sl, r0
 800add0:	468b      	mov	fp, r1
 800add2:	f034 040f 	bics.w	r4, r4, #15
 800add6:	d073      	beq.n	800aec0 <_strtod_l+0x510>
 800add8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800addc:	dd48      	ble.n	800ae70 <_strtod_l+0x4c0>
 800adde:	2400      	movs	r4, #0
 800ade0:	46a0      	mov	r8, r4
 800ade2:	46a1      	mov	r9, r4
 800ade4:	940a      	str	r4, [sp, #40]	@ 0x28
 800ade6:	2322      	movs	r3, #34	@ 0x22
 800ade8:	f04f 0a00 	mov.w	sl, #0
 800adec:	9a05      	ldr	r2, [sp, #20]
 800adee:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800af34 <_strtod_l+0x584>
 800adf2:	6013      	str	r3, [r2, #0]
 800adf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f43f ae13 	beq.w	800aa22 <_strtod_l+0x72>
 800adfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adfe:	9805      	ldr	r0, [sp, #20]
 800ae00:	f7ff f94c 	bl	800a09c <_Bfree>
 800ae04:	4649      	mov	r1, r9
 800ae06:	9805      	ldr	r0, [sp, #20]
 800ae08:	f7ff f948 	bl	800a09c <_Bfree>
 800ae0c:	4641      	mov	r1, r8
 800ae0e:	9805      	ldr	r0, [sp, #20]
 800ae10:	f7ff f944 	bl	800a09c <_Bfree>
 800ae14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae16:	9805      	ldr	r0, [sp, #20]
 800ae18:	f7ff f940 	bl	800a09c <_Bfree>
 800ae1c:	4621      	mov	r1, r4
 800ae1e:	9805      	ldr	r0, [sp, #20]
 800ae20:	f7ff f93c 	bl	800a09c <_Bfree>
 800ae24:	e5fd      	b.n	800aa22 <_strtod_l+0x72>
 800ae26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	dbbc      	blt.n	800adaa <_strtod_l+0x3fa>
 800ae30:	4c42      	ldr	r4, [pc, #264]	@ (800af3c <_strtod_l+0x58c>)
 800ae32:	f1c5 050f 	rsb	r5, r5, #15
 800ae36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ae3a:	4652      	mov	r2, sl
 800ae3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae40:	465b      	mov	r3, fp
 800ae42:	f7f5 fb49 	bl	80004d8 <__aeabi_dmul>
 800ae46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae48:	1b5d      	subs	r5, r3, r5
 800ae4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ae4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ae52:	e791      	b.n	800ad78 <_strtod_l+0x3c8>
 800ae54:	3316      	adds	r3, #22
 800ae56:	dba8      	blt.n	800adaa <_strtod_l+0x3fa>
 800ae58:	4b38      	ldr	r3, [pc, #224]	@ (800af3c <_strtod_l+0x58c>)
 800ae5a:	eba9 0808 	sub.w	r8, r9, r8
 800ae5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ae62:	4650      	mov	r0, sl
 800ae64:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ae68:	4659      	mov	r1, fp
 800ae6a:	f7f5 fc5f 	bl	800072c <__aeabi_ddiv>
 800ae6e:	e760      	b.n	800ad32 <_strtod_l+0x382>
 800ae70:	4b33      	ldr	r3, [pc, #204]	@ (800af40 <_strtod_l+0x590>)
 800ae72:	4650      	mov	r0, sl
 800ae74:	9308      	str	r3, [sp, #32]
 800ae76:	2300      	movs	r3, #0
 800ae78:	4659      	mov	r1, fp
 800ae7a:	461e      	mov	r6, r3
 800ae7c:	1124      	asrs	r4, r4, #4
 800ae7e:	2c01      	cmp	r4, #1
 800ae80:	dc21      	bgt.n	800aec6 <_strtod_l+0x516>
 800ae82:	b10b      	cbz	r3, 800ae88 <_strtod_l+0x4d8>
 800ae84:	4682      	mov	sl, r0
 800ae86:	468b      	mov	fp, r1
 800ae88:	492d      	ldr	r1, [pc, #180]	@ (800af40 <_strtod_l+0x590>)
 800ae8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ae8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ae92:	4652      	mov	r2, sl
 800ae94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae98:	465b      	mov	r3, fp
 800ae9a:	f7f5 fb1d 	bl	80004d8 <__aeabi_dmul>
 800ae9e:	4b25      	ldr	r3, [pc, #148]	@ (800af34 <_strtod_l+0x584>)
 800aea0:	460a      	mov	r2, r1
 800aea2:	400b      	ands	r3, r1
 800aea4:	4927      	ldr	r1, [pc, #156]	@ (800af44 <_strtod_l+0x594>)
 800aea6:	4682      	mov	sl, r0
 800aea8:	428b      	cmp	r3, r1
 800aeaa:	d898      	bhi.n	800adde <_strtod_l+0x42e>
 800aeac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800aeb0:	428b      	cmp	r3, r1
 800aeb2:	bf86      	itte	hi
 800aeb4:	f04f 3aff 	movhi.w	sl, #4294967295
 800aeb8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800af48 <_strtod_l+0x598>
 800aebc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800aec0:	2300      	movs	r3, #0
 800aec2:	9308      	str	r3, [sp, #32]
 800aec4:	e07a      	b.n	800afbc <_strtod_l+0x60c>
 800aec6:	07e2      	lsls	r2, r4, #31
 800aec8:	d505      	bpl.n	800aed6 <_strtod_l+0x526>
 800aeca:	9b08      	ldr	r3, [sp, #32]
 800aecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed0:	f7f5 fb02 	bl	80004d8 <__aeabi_dmul>
 800aed4:	2301      	movs	r3, #1
 800aed6:	9a08      	ldr	r2, [sp, #32]
 800aed8:	3601      	adds	r6, #1
 800aeda:	3208      	adds	r2, #8
 800aedc:	1064      	asrs	r4, r4, #1
 800aede:	9208      	str	r2, [sp, #32]
 800aee0:	e7cd      	b.n	800ae7e <_strtod_l+0x4ce>
 800aee2:	d0ed      	beq.n	800aec0 <_strtod_l+0x510>
 800aee4:	4264      	negs	r4, r4
 800aee6:	f014 020f 	ands.w	r2, r4, #15
 800aeea:	d00a      	beq.n	800af02 <_strtod_l+0x552>
 800aeec:	4b13      	ldr	r3, [pc, #76]	@ (800af3c <_strtod_l+0x58c>)
 800aeee:	4650      	mov	r0, sl
 800aef0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aef4:	4659      	mov	r1, fp
 800aef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefa:	f7f5 fc17 	bl	800072c <__aeabi_ddiv>
 800aefe:	4682      	mov	sl, r0
 800af00:	468b      	mov	fp, r1
 800af02:	1124      	asrs	r4, r4, #4
 800af04:	d0dc      	beq.n	800aec0 <_strtod_l+0x510>
 800af06:	2c1f      	cmp	r4, #31
 800af08:	dd20      	ble.n	800af4c <_strtod_l+0x59c>
 800af0a:	2400      	movs	r4, #0
 800af0c:	46a0      	mov	r8, r4
 800af0e:	46a1      	mov	r9, r4
 800af10:	940a      	str	r4, [sp, #40]	@ 0x28
 800af12:	2322      	movs	r3, #34	@ 0x22
 800af14:	9a05      	ldr	r2, [sp, #20]
 800af16:	f04f 0a00 	mov.w	sl, #0
 800af1a:	f04f 0b00 	mov.w	fp, #0
 800af1e:	6013      	str	r3, [r2, #0]
 800af20:	e768      	b.n	800adf4 <_strtod_l+0x444>
 800af22:	bf00      	nop
 800af24:	0800e19d 	.word	0x0800e19d
 800af28:	0800e3b4 	.word	0x0800e3b4
 800af2c:	0800e195 	.word	0x0800e195
 800af30:	0800e1cc 	.word	0x0800e1cc
 800af34:	7ff00000 	.word	0x7ff00000
 800af38:	0800e55d 	.word	0x0800e55d
 800af3c:	0800e2e8 	.word	0x0800e2e8
 800af40:	0800e2c0 	.word	0x0800e2c0
 800af44:	7ca00000 	.word	0x7ca00000
 800af48:	7fefffff 	.word	0x7fefffff
 800af4c:	f014 0310 	ands.w	r3, r4, #16
 800af50:	bf18      	it	ne
 800af52:	236a      	movne	r3, #106	@ 0x6a
 800af54:	4650      	mov	r0, sl
 800af56:	9308      	str	r3, [sp, #32]
 800af58:	4659      	mov	r1, fp
 800af5a:	2300      	movs	r3, #0
 800af5c:	4ea9      	ldr	r6, [pc, #676]	@ (800b204 <_strtod_l+0x854>)
 800af5e:	07e2      	lsls	r2, r4, #31
 800af60:	d504      	bpl.n	800af6c <_strtod_l+0x5bc>
 800af62:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af66:	f7f5 fab7 	bl	80004d8 <__aeabi_dmul>
 800af6a:	2301      	movs	r3, #1
 800af6c:	1064      	asrs	r4, r4, #1
 800af6e:	f106 0608 	add.w	r6, r6, #8
 800af72:	d1f4      	bne.n	800af5e <_strtod_l+0x5ae>
 800af74:	b10b      	cbz	r3, 800af7a <_strtod_l+0x5ca>
 800af76:	4682      	mov	sl, r0
 800af78:	468b      	mov	fp, r1
 800af7a:	9b08      	ldr	r3, [sp, #32]
 800af7c:	b1b3      	cbz	r3, 800afac <_strtod_l+0x5fc>
 800af7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800af82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800af86:	2b00      	cmp	r3, #0
 800af88:	4659      	mov	r1, fp
 800af8a:	dd0f      	ble.n	800afac <_strtod_l+0x5fc>
 800af8c:	2b1f      	cmp	r3, #31
 800af8e:	dd57      	ble.n	800b040 <_strtod_l+0x690>
 800af90:	2b34      	cmp	r3, #52	@ 0x34
 800af92:	bfd8      	it	le
 800af94:	f04f 33ff 	movle.w	r3, #4294967295
 800af98:	f04f 0a00 	mov.w	sl, #0
 800af9c:	bfcf      	iteee	gt
 800af9e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800afa2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800afa6:	4093      	lslle	r3, r2
 800afa8:	ea03 0b01 	andle.w	fp, r3, r1
 800afac:	2200      	movs	r2, #0
 800afae:	2300      	movs	r3, #0
 800afb0:	4650      	mov	r0, sl
 800afb2:	4659      	mov	r1, fp
 800afb4:	f7f5 fcf8 	bl	80009a8 <__aeabi_dcmpeq>
 800afb8:	2800      	cmp	r0, #0
 800afba:	d1a6      	bne.n	800af0a <_strtod_l+0x55a>
 800afbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afbe:	463a      	mov	r2, r7
 800afc0:	9300      	str	r3, [sp, #0]
 800afc2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800afc4:	462b      	mov	r3, r5
 800afc6:	9805      	ldr	r0, [sp, #20]
 800afc8:	f7ff f8d0 	bl	800a16c <__s2b>
 800afcc:	900a      	str	r0, [sp, #40]	@ 0x28
 800afce:	2800      	cmp	r0, #0
 800afd0:	f43f af05 	beq.w	800adde <_strtod_l+0x42e>
 800afd4:	2400      	movs	r4, #0
 800afd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afd8:	eba9 0308 	sub.w	r3, r9, r8
 800afdc:	2a00      	cmp	r2, #0
 800afde:	bfa8      	it	ge
 800afe0:	2300      	movge	r3, #0
 800afe2:	46a0      	mov	r8, r4
 800afe4:	9312      	str	r3, [sp, #72]	@ 0x48
 800afe6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800afea:	9316      	str	r3, [sp, #88]	@ 0x58
 800afec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afee:	9805      	ldr	r0, [sp, #20]
 800aff0:	6859      	ldr	r1, [r3, #4]
 800aff2:	f7ff f813 	bl	800a01c <_Balloc>
 800aff6:	4681      	mov	r9, r0
 800aff8:	2800      	cmp	r0, #0
 800affa:	f43f aef4 	beq.w	800ade6 <_strtod_l+0x436>
 800affe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b000:	300c      	adds	r0, #12
 800b002:	691a      	ldr	r2, [r3, #16]
 800b004:	f103 010c 	add.w	r1, r3, #12
 800b008:	3202      	adds	r2, #2
 800b00a:	0092      	lsls	r2, r2, #2
 800b00c:	f000 fd66 	bl	800badc <memcpy>
 800b010:	ab1c      	add	r3, sp, #112	@ 0x70
 800b012:	9301      	str	r3, [sp, #4]
 800b014:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	4652      	mov	r2, sl
 800b01a:	465b      	mov	r3, fp
 800b01c:	9805      	ldr	r0, [sp, #20]
 800b01e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b022:	f7ff fbd5 	bl	800a7d0 <__d2b>
 800b026:	901a      	str	r0, [sp, #104]	@ 0x68
 800b028:	2800      	cmp	r0, #0
 800b02a:	f43f aedc 	beq.w	800ade6 <_strtod_l+0x436>
 800b02e:	2101      	movs	r1, #1
 800b030:	9805      	ldr	r0, [sp, #20]
 800b032:	f7ff f931 	bl	800a298 <__i2b>
 800b036:	4680      	mov	r8, r0
 800b038:	b948      	cbnz	r0, 800b04e <_strtod_l+0x69e>
 800b03a:	f04f 0800 	mov.w	r8, #0
 800b03e:	e6d2      	b.n	800ade6 <_strtod_l+0x436>
 800b040:	f04f 32ff 	mov.w	r2, #4294967295
 800b044:	fa02 f303 	lsl.w	r3, r2, r3
 800b048:	ea03 0a0a 	and.w	sl, r3, sl
 800b04c:	e7ae      	b.n	800afac <_strtod_l+0x5fc>
 800b04e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b050:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b052:	2d00      	cmp	r5, #0
 800b054:	bfab      	itete	ge
 800b056:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b058:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b05a:	18ef      	addge	r7, r5, r3
 800b05c:	1b5e      	sublt	r6, r3, r5
 800b05e:	9b08      	ldr	r3, [sp, #32]
 800b060:	bfa8      	it	ge
 800b062:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b064:	eba5 0503 	sub.w	r5, r5, r3
 800b068:	4415      	add	r5, r2
 800b06a:	4b67      	ldr	r3, [pc, #412]	@ (800b208 <_strtod_l+0x858>)
 800b06c:	f105 35ff 	add.w	r5, r5, #4294967295
 800b070:	bfb8      	it	lt
 800b072:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b074:	429d      	cmp	r5, r3
 800b076:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b07a:	da50      	bge.n	800b11e <_strtod_l+0x76e>
 800b07c:	1b5b      	subs	r3, r3, r5
 800b07e:	2b1f      	cmp	r3, #31
 800b080:	f04f 0101 	mov.w	r1, #1
 800b084:	eba2 0203 	sub.w	r2, r2, r3
 800b088:	dc3d      	bgt.n	800b106 <_strtod_l+0x756>
 800b08a:	fa01 f303 	lsl.w	r3, r1, r3
 800b08e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b090:	2300      	movs	r3, #0
 800b092:	9310      	str	r3, [sp, #64]	@ 0x40
 800b094:	18bd      	adds	r5, r7, r2
 800b096:	9b08      	ldr	r3, [sp, #32]
 800b098:	42af      	cmp	r7, r5
 800b09a:	4416      	add	r6, r2
 800b09c:	441e      	add	r6, r3
 800b09e:	463b      	mov	r3, r7
 800b0a0:	bfa8      	it	ge
 800b0a2:	462b      	movge	r3, r5
 800b0a4:	42b3      	cmp	r3, r6
 800b0a6:	bfa8      	it	ge
 800b0a8:	4633      	movge	r3, r6
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	bfc2      	ittt	gt
 800b0ae:	1aed      	subgt	r5, r5, r3
 800b0b0:	1af6      	subgt	r6, r6, r3
 800b0b2:	1aff      	subgt	r7, r7, r3
 800b0b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	dd16      	ble.n	800b0e8 <_strtod_l+0x738>
 800b0ba:	4641      	mov	r1, r8
 800b0bc:	461a      	mov	r2, r3
 800b0be:	9805      	ldr	r0, [sp, #20]
 800b0c0:	f7ff f9a8 	bl	800a414 <__pow5mult>
 800b0c4:	4680      	mov	r8, r0
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d0b7      	beq.n	800b03a <_strtod_l+0x68a>
 800b0ca:	4601      	mov	r1, r0
 800b0cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b0ce:	9805      	ldr	r0, [sp, #20]
 800b0d0:	f7ff f8f8 	bl	800a2c4 <__multiply>
 800b0d4:	900e      	str	r0, [sp, #56]	@ 0x38
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	f43f ae85 	beq.w	800ade6 <_strtod_l+0x436>
 800b0dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0de:	9805      	ldr	r0, [sp, #20]
 800b0e0:	f7fe ffdc 	bl	800a09c <_Bfree>
 800b0e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0e6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0e8:	2d00      	cmp	r5, #0
 800b0ea:	dc1d      	bgt.n	800b128 <_strtod_l+0x778>
 800b0ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	dd23      	ble.n	800b13a <_strtod_l+0x78a>
 800b0f2:	4649      	mov	r1, r9
 800b0f4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b0f6:	9805      	ldr	r0, [sp, #20]
 800b0f8:	f7ff f98c 	bl	800a414 <__pow5mult>
 800b0fc:	4681      	mov	r9, r0
 800b0fe:	b9e0      	cbnz	r0, 800b13a <_strtod_l+0x78a>
 800b100:	f04f 0900 	mov.w	r9, #0
 800b104:	e66f      	b.n	800ade6 <_strtod_l+0x436>
 800b106:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b10a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b10e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b112:	35e2      	adds	r5, #226	@ 0xe2
 800b114:	fa01 f305 	lsl.w	r3, r1, r5
 800b118:	9310      	str	r3, [sp, #64]	@ 0x40
 800b11a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b11c:	e7ba      	b.n	800b094 <_strtod_l+0x6e4>
 800b11e:	2300      	movs	r3, #0
 800b120:	9310      	str	r3, [sp, #64]	@ 0x40
 800b122:	2301      	movs	r3, #1
 800b124:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b126:	e7b5      	b.n	800b094 <_strtod_l+0x6e4>
 800b128:	462a      	mov	r2, r5
 800b12a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b12c:	9805      	ldr	r0, [sp, #20]
 800b12e:	f7ff f9cb 	bl	800a4c8 <__lshift>
 800b132:	901a      	str	r0, [sp, #104]	@ 0x68
 800b134:	2800      	cmp	r0, #0
 800b136:	d1d9      	bne.n	800b0ec <_strtod_l+0x73c>
 800b138:	e655      	b.n	800ade6 <_strtod_l+0x436>
 800b13a:	2e00      	cmp	r6, #0
 800b13c:	dd07      	ble.n	800b14e <_strtod_l+0x79e>
 800b13e:	4649      	mov	r1, r9
 800b140:	4632      	mov	r2, r6
 800b142:	9805      	ldr	r0, [sp, #20]
 800b144:	f7ff f9c0 	bl	800a4c8 <__lshift>
 800b148:	4681      	mov	r9, r0
 800b14a:	2800      	cmp	r0, #0
 800b14c:	d0d8      	beq.n	800b100 <_strtod_l+0x750>
 800b14e:	2f00      	cmp	r7, #0
 800b150:	dd08      	ble.n	800b164 <_strtod_l+0x7b4>
 800b152:	4641      	mov	r1, r8
 800b154:	463a      	mov	r2, r7
 800b156:	9805      	ldr	r0, [sp, #20]
 800b158:	f7ff f9b6 	bl	800a4c8 <__lshift>
 800b15c:	4680      	mov	r8, r0
 800b15e:	2800      	cmp	r0, #0
 800b160:	f43f ae41 	beq.w	800ade6 <_strtod_l+0x436>
 800b164:	464a      	mov	r2, r9
 800b166:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b168:	9805      	ldr	r0, [sp, #20]
 800b16a:	f7ff fa35 	bl	800a5d8 <__mdiff>
 800b16e:	4604      	mov	r4, r0
 800b170:	2800      	cmp	r0, #0
 800b172:	f43f ae38 	beq.w	800ade6 <_strtod_l+0x436>
 800b176:	68c3      	ldr	r3, [r0, #12]
 800b178:	4641      	mov	r1, r8
 800b17a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b17c:	2300      	movs	r3, #0
 800b17e:	60c3      	str	r3, [r0, #12]
 800b180:	f7ff fa0e 	bl	800a5a0 <__mcmp>
 800b184:	2800      	cmp	r0, #0
 800b186:	da45      	bge.n	800b214 <_strtod_l+0x864>
 800b188:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b18a:	ea53 030a 	orrs.w	r3, r3, sl
 800b18e:	d16b      	bne.n	800b268 <_strtod_l+0x8b8>
 800b190:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b194:	2b00      	cmp	r3, #0
 800b196:	d167      	bne.n	800b268 <_strtod_l+0x8b8>
 800b198:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b19c:	0d1b      	lsrs	r3, r3, #20
 800b19e:	051b      	lsls	r3, r3, #20
 800b1a0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b1a4:	d960      	bls.n	800b268 <_strtod_l+0x8b8>
 800b1a6:	6963      	ldr	r3, [r4, #20]
 800b1a8:	b913      	cbnz	r3, 800b1b0 <_strtod_l+0x800>
 800b1aa:	6923      	ldr	r3, [r4, #16]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	dd5b      	ble.n	800b268 <_strtod_l+0x8b8>
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	9805      	ldr	r0, [sp, #20]
 800b1b6:	f7ff f987 	bl	800a4c8 <__lshift>
 800b1ba:	4641      	mov	r1, r8
 800b1bc:	4604      	mov	r4, r0
 800b1be:	f7ff f9ef 	bl	800a5a0 <__mcmp>
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	dd50      	ble.n	800b268 <_strtod_l+0x8b8>
 800b1c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b1ca:	9a08      	ldr	r2, [sp, #32]
 800b1cc:	0d1b      	lsrs	r3, r3, #20
 800b1ce:	051b      	lsls	r3, r3, #20
 800b1d0:	2a00      	cmp	r2, #0
 800b1d2:	d06a      	beq.n	800b2aa <_strtod_l+0x8fa>
 800b1d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b1d8:	d867      	bhi.n	800b2aa <_strtod_l+0x8fa>
 800b1da:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b1de:	f67f ae98 	bls.w	800af12 <_strtod_l+0x562>
 800b1e2:	4650      	mov	r0, sl
 800b1e4:	4659      	mov	r1, fp
 800b1e6:	4b09      	ldr	r3, [pc, #36]	@ (800b20c <_strtod_l+0x85c>)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f7f5 f975 	bl	80004d8 <__aeabi_dmul>
 800b1ee:	4b08      	ldr	r3, [pc, #32]	@ (800b210 <_strtod_l+0x860>)
 800b1f0:	4682      	mov	sl, r0
 800b1f2:	400b      	ands	r3, r1
 800b1f4:	468b      	mov	fp, r1
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f47f ae00 	bne.w	800adfc <_strtod_l+0x44c>
 800b1fc:	2322      	movs	r3, #34	@ 0x22
 800b1fe:	9a05      	ldr	r2, [sp, #20]
 800b200:	6013      	str	r3, [r2, #0]
 800b202:	e5fb      	b.n	800adfc <_strtod_l+0x44c>
 800b204:	0800e3e0 	.word	0x0800e3e0
 800b208:	fffffc02 	.word	0xfffffc02
 800b20c:	39500000 	.word	0x39500000
 800b210:	7ff00000 	.word	0x7ff00000
 800b214:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b218:	d165      	bne.n	800b2e6 <_strtod_l+0x936>
 800b21a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b21c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b220:	b35a      	cbz	r2, 800b27a <_strtod_l+0x8ca>
 800b222:	4a99      	ldr	r2, [pc, #612]	@ (800b488 <_strtod_l+0xad8>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d12b      	bne.n	800b280 <_strtod_l+0x8d0>
 800b228:	9b08      	ldr	r3, [sp, #32]
 800b22a:	4651      	mov	r1, sl
 800b22c:	b303      	cbz	r3, 800b270 <_strtod_l+0x8c0>
 800b22e:	465a      	mov	r2, fp
 800b230:	4b96      	ldr	r3, [pc, #600]	@ (800b48c <_strtod_l+0xadc>)
 800b232:	4013      	ands	r3, r2
 800b234:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b238:	f04f 32ff 	mov.w	r2, #4294967295
 800b23c:	d81b      	bhi.n	800b276 <_strtod_l+0x8c6>
 800b23e:	0d1b      	lsrs	r3, r3, #20
 800b240:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b244:	fa02 f303 	lsl.w	r3, r2, r3
 800b248:	4299      	cmp	r1, r3
 800b24a:	d119      	bne.n	800b280 <_strtod_l+0x8d0>
 800b24c:	4b90      	ldr	r3, [pc, #576]	@ (800b490 <_strtod_l+0xae0>)
 800b24e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b250:	429a      	cmp	r2, r3
 800b252:	d102      	bne.n	800b25a <_strtod_l+0x8aa>
 800b254:	3101      	adds	r1, #1
 800b256:	f43f adc6 	beq.w	800ade6 <_strtod_l+0x436>
 800b25a:	f04f 0a00 	mov.w	sl, #0
 800b25e:	4b8b      	ldr	r3, [pc, #556]	@ (800b48c <_strtod_l+0xadc>)
 800b260:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b262:	401a      	ands	r2, r3
 800b264:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b268:	9b08      	ldr	r3, [sp, #32]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1b9      	bne.n	800b1e2 <_strtod_l+0x832>
 800b26e:	e5c5      	b.n	800adfc <_strtod_l+0x44c>
 800b270:	f04f 33ff 	mov.w	r3, #4294967295
 800b274:	e7e8      	b.n	800b248 <_strtod_l+0x898>
 800b276:	4613      	mov	r3, r2
 800b278:	e7e6      	b.n	800b248 <_strtod_l+0x898>
 800b27a:	ea53 030a 	orrs.w	r3, r3, sl
 800b27e:	d0a2      	beq.n	800b1c6 <_strtod_l+0x816>
 800b280:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b282:	b1db      	cbz	r3, 800b2bc <_strtod_l+0x90c>
 800b284:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b286:	4213      	tst	r3, r2
 800b288:	d0ee      	beq.n	800b268 <_strtod_l+0x8b8>
 800b28a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b28c:	4650      	mov	r0, sl
 800b28e:	4659      	mov	r1, fp
 800b290:	9a08      	ldr	r2, [sp, #32]
 800b292:	b1bb      	cbz	r3, 800b2c4 <_strtod_l+0x914>
 800b294:	f7ff fb68 	bl	800a968 <sulp>
 800b298:	4602      	mov	r2, r0
 800b29a:	460b      	mov	r3, r1
 800b29c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2a0:	f7f4 ff64 	bl	800016c <__adddf3>
 800b2a4:	4682      	mov	sl, r0
 800b2a6:	468b      	mov	fp, r1
 800b2a8:	e7de      	b.n	800b268 <_strtod_l+0x8b8>
 800b2aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b2ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b2b2:	f04f 3aff 	mov.w	sl, #4294967295
 800b2b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b2ba:	e7d5      	b.n	800b268 <_strtod_l+0x8b8>
 800b2bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b2be:	ea13 0f0a 	tst.w	r3, sl
 800b2c2:	e7e1      	b.n	800b288 <_strtod_l+0x8d8>
 800b2c4:	f7ff fb50 	bl	800a968 <sulp>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2d0:	f7f4 ff4a 	bl	8000168 <__aeabi_dsub>
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	4682      	mov	sl, r0
 800b2da:	468b      	mov	fp, r1
 800b2dc:	f7f5 fb64 	bl	80009a8 <__aeabi_dcmpeq>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d0c1      	beq.n	800b268 <_strtod_l+0x8b8>
 800b2e4:	e615      	b.n	800af12 <_strtod_l+0x562>
 800b2e6:	4641      	mov	r1, r8
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f7ff fac9 	bl	800a880 <__ratio>
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b2f4:	4606      	mov	r6, r0
 800b2f6:	460f      	mov	r7, r1
 800b2f8:	f7f5 fb6a 	bl	80009d0 <__aeabi_dcmple>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	d06d      	beq.n	800b3dc <_strtod_l+0xa2c>
 800b300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b302:	2b00      	cmp	r3, #0
 800b304:	d178      	bne.n	800b3f8 <_strtod_l+0xa48>
 800b306:	f1ba 0f00 	cmp.w	sl, #0
 800b30a:	d156      	bne.n	800b3ba <_strtod_l+0xa0a>
 800b30c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b30e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b312:	2b00      	cmp	r3, #0
 800b314:	d158      	bne.n	800b3c8 <_strtod_l+0xa18>
 800b316:	2200      	movs	r2, #0
 800b318:	4630      	mov	r0, r6
 800b31a:	4639      	mov	r1, r7
 800b31c:	4b5d      	ldr	r3, [pc, #372]	@ (800b494 <_strtod_l+0xae4>)
 800b31e:	f7f5 fb4d 	bl	80009bc <__aeabi_dcmplt>
 800b322:	2800      	cmp	r0, #0
 800b324:	d157      	bne.n	800b3d6 <_strtod_l+0xa26>
 800b326:	4630      	mov	r0, r6
 800b328:	4639      	mov	r1, r7
 800b32a:	2200      	movs	r2, #0
 800b32c:	4b5a      	ldr	r3, [pc, #360]	@ (800b498 <_strtod_l+0xae8>)
 800b32e:	f7f5 f8d3 	bl	80004d8 <__aeabi_dmul>
 800b332:	4606      	mov	r6, r0
 800b334:	460f      	mov	r7, r1
 800b336:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b33a:	9606      	str	r6, [sp, #24]
 800b33c:	9307      	str	r3, [sp, #28]
 800b33e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b342:	4d52      	ldr	r5, [pc, #328]	@ (800b48c <_strtod_l+0xadc>)
 800b344:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b34a:	401d      	ands	r5, r3
 800b34c:	4b53      	ldr	r3, [pc, #332]	@ (800b49c <_strtod_l+0xaec>)
 800b34e:	429d      	cmp	r5, r3
 800b350:	f040 80aa 	bne.w	800b4a8 <_strtod_l+0xaf8>
 800b354:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b356:	4650      	mov	r0, sl
 800b358:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b35c:	4659      	mov	r1, fp
 800b35e:	f7ff f9cf 	bl	800a700 <__ulp>
 800b362:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b366:	f7f5 f8b7 	bl	80004d8 <__aeabi_dmul>
 800b36a:	4652      	mov	r2, sl
 800b36c:	465b      	mov	r3, fp
 800b36e:	f7f4 fefd 	bl	800016c <__adddf3>
 800b372:	460b      	mov	r3, r1
 800b374:	4945      	ldr	r1, [pc, #276]	@ (800b48c <_strtod_l+0xadc>)
 800b376:	4a4a      	ldr	r2, [pc, #296]	@ (800b4a0 <_strtod_l+0xaf0>)
 800b378:	4019      	ands	r1, r3
 800b37a:	4291      	cmp	r1, r2
 800b37c:	4682      	mov	sl, r0
 800b37e:	d942      	bls.n	800b406 <_strtod_l+0xa56>
 800b380:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b382:	4b43      	ldr	r3, [pc, #268]	@ (800b490 <_strtod_l+0xae0>)
 800b384:	429a      	cmp	r2, r3
 800b386:	d103      	bne.n	800b390 <_strtod_l+0x9e0>
 800b388:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b38a:	3301      	adds	r3, #1
 800b38c:	f43f ad2b 	beq.w	800ade6 <_strtod_l+0x436>
 800b390:	f04f 3aff 	mov.w	sl, #4294967295
 800b394:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800b490 <_strtod_l+0xae0>
 800b398:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b39a:	9805      	ldr	r0, [sp, #20]
 800b39c:	f7fe fe7e 	bl	800a09c <_Bfree>
 800b3a0:	4649      	mov	r1, r9
 800b3a2:	9805      	ldr	r0, [sp, #20]
 800b3a4:	f7fe fe7a 	bl	800a09c <_Bfree>
 800b3a8:	4641      	mov	r1, r8
 800b3aa:	9805      	ldr	r0, [sp, #20]
 800b3ac:	f7fe fe76 	bl	800a09c <_Bfree>
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	9805      	ldr	r0, [sp, #20]
 800b3b4:	f7fe fe72 	bl	800a09c <_Bfree>
 800b3b8:	e618      	b.n	800afec <_strtod_l+0x63c>
 800b3ba:	f1ba 0f01 	cmp.w	sl, #1
 800b3be:	d103      	bne.n	800b3c8 <_strtod_l+0xa18>
 800b3c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f43f ada5 	beq.w	800af12 <_strtod_l+0x562>
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	4b36      	ldr	r3, [pc, #216]	@ (800b4a4 <_strtod_l+0xaf4>)
 800b3cc:	2600      	movs	r6, #0
 800b3ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b3d2:	4f30      	ldr	r7, [pc, #192]	@ (800b494 <_strtod_l+0xae4>)
 800b3d4:	e7b3      	b.n	800b33e <_strtod_l+0x98e>
 800b3d6:	2600      	movs	r6, #0
 800b3d8:	4f2f      	ldr	r7, [pc, #188]	@ (800b498 <_strtod_l+0xae8>)
 800b3da:	e7ac      	b.n	800b336 <_strtod_l+0x986>
 800b3dc:	4630      	mov	r0, r6
 800b3de:	4639      	mov	r1, r7
 800b3e0:	4b2d      	ldr	r3, [pc, #180]	@ (800b498 <_strtod_l+0xae8>)
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f7f5 f878 	bl	80004d8 <__aeabi_dmul>
 800b3e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ea:	4606      	mov	r6, r0
 800b3ec:	460f      	mov	r7, r1
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d0a1      	beq.n	800b336 <_strtod_l+0x986>
 800b3f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b3f6:	e7a2      	b.n	800b33e <_strtod_l+0x98e>
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	4b26      	ldr	r3, [pc, #152]	@ (800b494 <_strtod_l+0xae4>)
 800b3fc:	4616      	mov	r6, r2
 800b3fe:	461f      	mov	r7, r3
 800b400:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b404:	e79b      	b.n	800b33e <_strtod_l+0x98e>
 800b406:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b40a:	9b08      	ldr	r3, [sp, #32]
 800b40c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1c1      	bne.n	800b398 <_strtod_l+0x9e8>
 800b414:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b418:	0d1b      	lsrs	r3, r3, #20
 800b41a:	051b      	lsls	r3, r3, #20
 800b41c:	429d      	cmp	r5, r3
 800b41e:	d1bb      	bne.n	800b398 <_strtod_l+0x9e8>
 800b420:	4630      	mov	r0, r6
 800b422:	4639      	mov	r1, r7
 800b424:	f7f5 feba 	bl	800119c <__aeabi_d2lz>
 800b428:	f7f5 f828 	bl	800047c <__aeabi_l2d>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	4630      	mov	r0, r6
 800b432:	4639      	mov	r1, r7
 800b434:	f7f4 fe98 	bl	8000168 <__aeabi_dsub>
 800b438:	460b      	mov	r3, r1
 800b43a:	4602      	mov	r2, r0
 800b43c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b440:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b446:	ea46 060a 	orr.w	r6, r6, sl
 800b44a:	431e      	orrs	r6, r3
 800b44c:	d069      	beq.n	800b522 <_strtod_l+0xb72>
 800b44e:	a30a      	add	r3, pc, #40	@ (adr r3, 800b478 <_strtod_l+0xac8>)
 800b450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b454:	f7f5 fab2 	bl	80009bc <__aeabi_dcmplt>
 800b458:	2800      	cmp	r0, #0
 800b45a:	f47f accf 	bne.w	800adfc <_strtod_l+0x44c>
 800b45e:	a308      	add	r3, pc, #32	@ (adr r3, 800b480 <_strtod_l+0xad0>)
 800b460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b464:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b468:	f7f5 fac6 	bl	80009f8 <__aeabi_dcmpgt>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	d093      	beq.n	800b398 <_strtod_l+0x9e8>
 800b470:	e4c4      	b.n	800adfc <_strtod_l+0x44c>
 800b472:	bf00      	nop
 800b474:	f3af 8000 	nop.w
 800b478:	94a03595 	.word	0x94a03595
 800b47c:	3fdfffff 	.word	0x3fdfffff
 800b480:	35afe535 	.word	0x35afe535
 800b484:	3fe00000 	.word	0x3fe00000
 800b488:	000fffff 	.word	0x000fffff
 800b48c:	7ff00000 	.word	0x7ff00000
 800b490:	7fefffff 	.word	0x7fefffff
 800b494:	3ff00000 	.word	0x3ff00000
 800b498:	3fe00000 	.word	0x3fe00000
 800b49c:	7fe00000 	.word	0x7fe00000
 800b4a0:	7c9fffff 	.word	0x7c9fffff
 800b4a4:	bff00000 	.word	0xbff00000
 800b4a8:	9b08      	ldr	r3, [sp, #32]
 800b4aa:	b323      	cbz	r3, 800b4f6 <_strtod_l+0xb46>
 800b4ac:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b4b0:	d821      	bhi.n	800b4f6 <_strtod_l+0xb46>
 800b4b2:	a327      	add	r3, pc, #156	@ (adr r3, 800b550 <_strtod_l+0xba0>)
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	4630      	mov	r0, r6
 800b4ba:	4639      	mov	r1, r7
 800b4bc:	f7f5 fa88 	bl	80009d0 <__aeabi_dcmple>
 800b4c0:	b1a0      	cbz	r0, 800b4ec <_strtod_l+0xb3c>
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	f7f5 fadf 	bl	8000a88 <__aeabi_d2uiz>
 800b4ca:	2801      	cmp	r0, #1
 800b4cc:	bf38      	it	cc
 800b4ce:	2001      	movcc	r0, #1
 800b4d0:	f7f4 ff88 	bl	80003e4 <__aeabi_ui2d>
 800b4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4d6:	4606      	mov	r6, r0
 800b4d8:	460f      	mov	r7, r1
 800b4da:	b9fb      	cbnz	r3, 800b51c <_strtod_l+0xb6c>
 800b4dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b4e0:	9014      	str	r0, [sp, #80]	@ 0x50
 800b4e2:	9315      	str	r3, [sp, #84]	@ 0x54
 800b4e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b4e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b4ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b4ee:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b4f2:	1b5b      	subs	r3, r3, r5
 800b4f4:	9311      	str	r3, [sp, #68]	@ 0x44
 800b4f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4fa:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b4fe:	f7ff f8ff 	bl	800a700 <__ulp>
 800b502:	4602      	mov	r2, r0
 800b504:	460b      	mov	r3, r1
 800b506:	4650      	mov	r0, sl
 800b508:	4659      	mov	r1, fp
 800b50a:	f7f4 ffe5 	bl	80004d8 <__aeabi_dmul>
 800b50e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b512:	f7f4 fe2b 	bl	800016c <__adddf3>
 800b516:	4682      	mov	sl, r0
 800b518:	468b      	mov	fp, r1
 800b51a:	e776      	b.n	800b40a <_strtod_l+0xa5a>
 800b51c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b520:	e7e0      	b.n	800b4e4 <_strtod_l+0xb34>
 800b522:	a30d      	add	r3, pc, #52	@ (adr r3, 800b558 <_strtod_l+0xba8>)
 800b524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b528:	f7f5 fa48 	bl	80009bc <__aeabi_dcmplt>
 800b52c:	e79e      	b.n	800b46c <_strtod_l+0xabc>
 800b52e:	2300      	movs	r3, #0
 800b530:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b532:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b534:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b536:	6013      	str	r3, [r2, #0]
 800b538:	f7ff ba77 	b.w	800aa2a <_strtod_l+0x7a>
 800b53c:	2a65      	cmp	r2, #101	@ 0x65
 800b53e:	f43f ab6e 	beq.w	800ac1e <_strtod_l+0x26e>
 800b542:	2a45      	cmp	r2, #69	@ 0x45
 800b544:	f43f ab6b 	beq.w	800ac1e <_strtod_l+0x26e>
 800b548:	2301      	movs	r3, #1
 800b54a:	f7ff bba6 	b.w	800ac9a <_strtod_l+0x2ea>
 800b54e:	bf00      	nop
 800b550:	ffc00000 	.word	0xffc00000
 800b554:	41dfffff 	.word	0x41dfffff
 800b558:	94a03595 	.word	0x94a03595
 800b55c:	3fcfffff 	.word	0x3fcfffff

0800b560 <_strtod_r>:
 800b560:	4b01      	ldr	r3, [pc, #4]	@ (800b568 <_strtod_r+0x8>)
 800b562:	f7ff ba25 	b.w	800a9b0 <_strtod_l>
 800b566:	bf00      	nop
 800b568:	20000088 	.word	0x20000088

0800b56c <_strtol_l.constprop.0>:
 800b56c:	2b24      	cmp	r3, #36	@ 0x24
 800b56e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b572:	4686      	mov	lr, r0
 800b574:	4690      	mov	r8, r2
 800b576:	d801      	bhi.n	800b57c <_strtol_l.constprop.0+0x10>
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d106      	bne.n	800b58a <_strtol_l.constprop.0+0x1e>
 800b57c:	f7fd fdc0 	bl	8009100 <__errno>
 800b580:	2316      	movs	r3, #22
 800b582:	6003      	str	r3, [r0, #0]
 800b584:	2000      	movs	r0, #0
 800b586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b58a:	460d      	mov	r5, r1
 800b58c:	4833      	ldr	r0, [pc, #204]	@ (800b65c <_strtol_l.constprop.0+0xf0>)
 800b58e:	462a      	mov	r2, r5
 800b590:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b594:	5d06      	ldrb	r6, [r0, r4]
 800b596:	f016 0608 	ands.w	r6, r6, #8
 800b59a:	d1f8      	bne.n	800b58e <_strtol_l.constprop.0+0x22>
 800b59c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b59e:	d12d      	bne.n	800b5fc <_strtol_l.constprop.0+0x90>
 800b5a0:	2601      	movs	r6, #1
 800b5a2:	782c      	ldrb	r4, [r5, #0]
 800b5a4:	1c95      	adds	r5, r2, #2
 800b5a6:	f033 0210 	bics.w	r2, r3, #16
 800b5aa:	d109      	bne.n	800b5c0 <_strtol_l.constprop.0+0x54>
 800b5ac:	2c30      	cmp	r4, #48	@ 0x30
 800b5ae:	d12a      	bne.n	800b606 <_strtol_l.constprop.0+0x9a>
 800b5b0:	782a      	ldrb	r2, [r5, #0]
 800b5b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b5b6:	2a58      	cmp	r2, #88	@ 0x58
 800b5b8:	d125      	bne.n	800b606 <_strtol_l.constprop.0+0x9a>
 800b5ba:	2310      	movs	r3, #16
 800b5bc:	786c      	ldrb	r4, [r5, #1]
 800b5be:	3502      	adds	r5, #2
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b5c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b5ca:	fbbc f9f3 	udiv	r9, ip, r3
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b5d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b5d8:	2f09      	cmp	r7, #9
 800b5da:	d81b      	bhi.n	800b614 <_strtol_l.constprop.0+0xa8>
 800b5dc:	463c      	mov	r4, r7
 800b5de:	42a3      	cmp	r3, r4
 800b5e0:	dd27      	ble.n	800b632 <_strtol_l.constprop.0+0xc6>
 800b5e2:	1c57      	adds	r7, r2, #1
 800b5e4:	d007      	beq.n	800b5f6 <_strtol_l.constprop.0+0x8a>
 800b5e6:	4581      	cmp	r9, r0
 800b5e8:	d320      	bcc.n	800b62c <_strtol_l.constprop.0+0xc0>
 800b5ea:	d101      	bne.n	800b5f0 <_strtol_l.constprop.0+0x84>
 800b5ec:	45a2      	cmp	sl, r4
 800b5ee:	db1d      	blt.n	800b62c <_strtol_l.constprop.0+0xc0>
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	fb00 4003 	mla	r0, r0, r3, r4
 800b5f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5fa:	e7eb      	b.n	800b5d4 <_strtol_l.constprop.0+0x68>
 800b5fc:	2c2b      	cmp	r4, #43	@ 0x2b
 800b5fe:	bf04      	itt	eq
 800b600:	782c      	ldrbeq	r4, [r5, #0]
 800b602:	1c95      	addeq	r5, r2, #2
 800b604:	e7cf      	b.n	800b5a6 <_strtol_l.constprop.0+0x3a>
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1da      	bne.n	800b5c0 <_strtol_l.constprop.0+0x54>
 800b60a:	2c30      	cmp	r4, #48	@ 0x30
 800b60c:	bf0c      	ite	eq
 800b60e:	2308      	moveq	r3, #8
 800b610:	230a      	movne	r3, #10
 800b612:	e7d5      	b.n	800b5c0 <_strtol_l.constprop.0+0x54>
 800b614:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b618:	2f19      	cmp	r7, #25
 800b61a:	d801      	bhi.n	800b620 <_strtol_l.constprop.0+0xb4>
 800b61c:	3c37      	subs	r4, #55	@ 0x37
 800b61e:	e7de      	b.n	800b5de <_strtol_l.constprop.0+0x72>
 800b620:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b624:	2f19      	cmp	r7, #25
 800b626:	d804      	bhi.n	800b632 <_strtol_l.constprop.0+0xc6>
 800b628:	3c57      	subs	r4, #87	@ 0x57
 800b62a:	e7d8      	b.n	800b5de <_strtol_l.constprop.0+0x72>
 800b62c:	f04f 32ff 	mov.w	r2, #4294967295
 800b630:	e7e1      	b.n	800b5f6 <_strtol_l.constprop.0+0x8a>
 800b632:	1c53      	adds	r3, r2, #1
 800b634:	d108      	bne.n	800b648 <_strtol_l.constprop.0+0xdc>
 800b636:	2322      	movs	r3, #34	@ 0x22
 800b638:	4660      	mov	r0, ip
 800b63a:	f8ce 3000 	str.w	r3, [lr]
 800b63e:	f1b8 0f00 	cmp.w	r8, #0
 800b642:	d0a0      	beq.n	800b586 <_strtol_l.constprop.0+0x1a>
 800b644:	1e69      	subs	r1, r5, #1
 800b646:	e006      	b.n	800b656 <_strtol_l.constprop.0+0xea>
 800b648:	b106      	cbz	r6, 800b64c <_strtol_l.constprop.0+0xe0>
 800b64a:	4240      	negs	r0, r0
 800b64c:	f1b8 0f00 	cmp.w	r8, #0
 800b650:	d099      	beq.n	800b586 <_strtol_l.constprop.0+0x1a>
 800b652:	2a00      	cmp	r2, #0
 800b654:	d1f6      	bne.n	800b644 <_strtol_l.constprop.0+0xd8>
 800b656:	f8c8 1000 	str.w	r1, [r8]
 800b65a:	e794      	b.n	800b586 <_strtol_l.constprop.0+0x1a>
 800b65c:	0800e409 	.word	0x0800e409

0800b660 <_strtol_r>:
 800b660:	f7ff bf84 	b.w	800b56c <_strtol_l.constprop.0>

0800b664 <__ssputs_r>:
 800b664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b668:	461f      	mov	r7, r3
 800b66a:	688e      	ldr	r6, [r1, #8]
 800b66c:	4682      	mov	sl, r0
 800b66e:	42be      	cmp	r6, r7
 800b670:	460c      	mov	r4, r1
 800b672:	4690      	mov	r8, r2
 800b674:	680b      	ldr	r3, [r1, #0]
 800b676:	d82d      	bhi.n	800b6d4 <__ssputs_r+0x70>
 800b678:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b67c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b680:	d026      	beq.n	800b6d0 <__ssputs_r+0x6c>
 800b682:	6965      	ldr	r5, [r4, #20]
 800b684:	6909      	ldr	r1, [r1, #16]
 800b686:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b68a:	eba3 0901 	sub.w	r9, r3, r1
 800b68e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b692:	1c7b      	adds	r3, r7, #1
 800b694:	444b      	add	r3, r9
 800b696:	106d      	asrs	r5, r5, #1
 800b698:	429d      	cmp	r5, r3
 800b69a:	bf38      	it	cc
 800b69c:	461d      	movcc	r5, r3
 800b69e:	0553      	lsls	r3, r2, #21
 800b6a0:	d527      	bpl.n	800b6f2 <__ssputs_r+0x8e>
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	f7fe fc2e 	bl	8009f04 <_malloc_r>
 800b6a8:	4606      	mov	r6, r0
 800b6aa:	b360      	cbz	r0, 800b706 <__ssputs_r+0xa2>
 800b6ac:	464a      	mov	r2, r9
 800b6ae:	6921      	ldr	r1, [r4, #16]
 800b6b0:	f000 fa14 	bl	800badc <memcpy>
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b6ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6be:	81a3      	strh	r3, [r4, #12]
 800b6c0:	6126      	str	r6, [r4, #16]
 800b6c2:	444e      	add	r6, r9
 800b6c4:	6026      	str	r6, [r4, #0]
 800b6c6:	463e      	mov	r6, r7
 800b6c8:	6165      	str	r5, [r4, #20]
 800b6ca:	eba5 0509 	sub.w	r5, r5, r9
 800b6ce:	60a5      	str	r5, [r4, #8]
 800b6d0:	42be      	cmp	r6, r7
 800b6d2:	d900      	bls.n	800b6d6 <__ssputs_r+0x72>
 800b6d4:	463e      	mov	r6, r7
 800b6d6:	4632      	mov	r2, r6
 800b6d8:	4641      	mov	r1, r8
 800b6da:	6820      	ldr	r0, [r4, #0]
 800b6dc:	f000 f9c2 	bl	800ba64 <memmove>
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	68a3      	ldr	r3, [r4, #8]
 800b6e4:	1b9b      	subs	r3, r3, r6
 800b6e6:	60a3      	str	r3, [r4, #8]
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	4433      	add	r3, r6
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f2:	462a      	mov	r2, r5
 800b6f4:	f000 fd83 	bl	800c1fe <_realloc_r>
 800b6f8:	4606      	mov	r6, r0
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d1e0      	bne.n	800b6c0 <__ssputs_r+0x5c>
 800b6fe:	4650      	mov	r0, sl
 800b700:	6921      	ldr	r1, [r4, #16]
 800b702:	f7fe fb8d 	bl	8009e20 <_free_r>
 800b706:	230c      	movs	r3, #12
 800b708:	f8ca 3000 	str.w	r3, [sl]
 800b70c:	89a3      	ldrh	r3, [r4, #12]
 800b70e:	f04f 30ff 	mov.w	r0, #4294967295
 800b712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b716:	81a3      	strh	r3, [r4, #12]
 800b718:	e7e9      	b.n	800b6ee <__ssputs_r+0x8a>
	...

0800b71c <_svfiprintf_r>:
 800b71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b720:	4698      	mov	r8, r3
 800b722:	898b      	ldrh	r3, [r1, #12]
 800b724:	4607      	mov	r7, r0
 800b726:	061b      	lsls	r3, r3, #24
 800b728:	460d      	mov	r5, r1
 800b72a:	4614      	mov	r4, r2
 800b72c:	b09d      	sub	sp, #116	@ 0x74
 800b72e:	d510      	bpl.n	800b752 <_svfiprintf_r+0x36>
 800b730:	690b      	ldr	r3, [r1, #16]
 800b732:	b973      	cbnz	r3, 800b752 <_svfiprintf_r+0x36>
 800b734:	2140      	movs	r1, #64	@ 0x40
 800b736:	f7fe fbe5 	bl	8009f04 <_malloc_r>
 800b73a:	6028      	str	r0, [r5, #0]
 800b73c:	6128      	str	r0, [r5, #16]
 800b73e:	b930      	cbnz	r0, 800b74e <_svfiprintf_r+0x32>
 800b740:	230c      	movs	r3, #12
 800b742:	603b      	str	r3, [r7, #0]
 800b744:	f04f 30ff 	mov.w	r0, #4294967295
 800b748:	b01d      	add	sp, #116	@ 0x74
 800b74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74e:	2340      	movs	r3, #64	@ 0x40
 800b750:	616b      	str	r3, [r5, #20]
 800b752:	2300      	movs	r3, #0
 800b754:	9309      	str	r3, [sp, #36]	@ 0x24
 800b756:	2320      	movs	r3, #32
 800b758:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b75c:	2330      	movs	r3, #48	@ 0x30
 800b75e:	f04f 0901 	mov.w	r9, #1
 800b762:	f8cd 800c 	str.w	r8, [sp, #12]
 800b766:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b900 <_svfiprintf_r+0x1e4>
 800b76a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b76e:	4623      	mov	r3, r4
 800b770:	469a      	mov	sl, r3
 800b772:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b776:	b10a      	cbz	r2, 800b77c <_svfiprintf_r+0x60>
 800b778:	2a25      	cmp	r2, #37	@ 0x25
 800b77a:	d1f9      	bne.n	800b770 <_svfiprintf_r+0x54>
 800b77c:	ebba 0b04 	subs.w	fp, sl, r4
 800b780:	d00b      	beq.n	800b79a <_svfiprintf_r+0x7e>
 800b782:	465b      	mov	r3, fp
 800b784:	4622      	mov	r2, r4
 800b786:	4629      	mov	r1, r5
 800b788:	4638      	mov	r0, r7
 800b78a:	f7ff ff6b 	bl	800b664 <__ssputs_r>
 800b78e:	3001      	adds	r0, #1
 800b790:	f000 80a7 	beq.w	800b8e2 <_svfiprintf_r+0x1c6>
 800b794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b796:	445a      	add	r2, fp
 800b798:	9209      	str	r2, [sp, #36]	@ 0x24
 800b79a:	f89a 3000 	ldrb.w	r3, [sl]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f000 809f 	beq.w	800b8e2 <_svfiprintf_r+0x1c6>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7ae:	f10a 0a01 	add.w	sl, sl, #1
 800b7b2:	9304      	str	r3, [sp, #16]
 800b7b4:	9307      	str	r3, [sp, #28]
 800b7b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7bc:	4654      	mov	r4, sl
 800b7be:	2205      	movs	r2, #5
 800b7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c4:	484e      	ldr	r0, [pc, #312]	@ (800b900 <_svfiprintf_r+0x1e4>)
 800b7c6:	f7fd fcc8 	bl	800915a <memchr>
 800b7ca:	9a04      	ldr	r2, [sp, #16]
 800b7cc:	b9d8      	cbnz	r0, 800b806 <_svfiprintf_r+0xea>
 800b7ce:	06d0      	lsls	r0, r2, #27
 800b7d0:	bf44      	itt	mi
 800b7d2:	2320      	movmi	r3, #32
 800b7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7d8:	0711      	lsls	r1, r2, #28
 800b7da:	bf44      	itt	mi
 800b7dc:	232b      	movmi	r3, #43	@ 0x2b
 800b7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7e8:	d015      	beq.n	800b816 <_svfiprintf_r+0xfa>
 800b7ea:	4654      	mov	r4, sl
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	f04f 0c0a 	mov.w	ip, #10
 800b7f2:	9a07      	ldr	r2, [sp, #28]
 800b7f4:	4621      	mov	r1, r4
 800b7f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7fa:	3b30      	subs	r3, #48	@ 0x30
 800b7fc:	2b09      	cmp	r3, #9
 800b7fe:	d94b      	bls.n	800b898 <_svfiprintf_r+0x17c>
 800b800:	b1b0      	cbz	r0, 800b830 <_svfiprintf_r+0x114>
 800b802:	9207      	str	r2, [sp, #28]
 800b804:	e014      	b.n	800b830 <_svfiprintf_r+0x114>
 800b806:	eba0 0308 	sub.w	r3, r0, r8
 800b80a:	fa09 f303 	lsl.w	r3, r9, r3
 800b80e:	4313      	orrs	r3, r2
 800b810:	46a2      	mov	sl, r4
 800b812:	9304      	str	r3, [sp, #16]
 800b814:	e7d2      	b.n	800b7bc <_svfiprintf_r+0xa0>
 800b816:	9b03      	ldr	r3, [sp, #12]
 800b818:	1d19      	adds	r1, r3, #4
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	9103      	str	r1, [sp, #12]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	bfbb      	ittet	lt
 800b822:	425b      	neglt	r3, r3
 800b824:	f042 0202 	orrlt.w	r2, r2, #2
 800b828:	9307      	strge	r3, [sp, #28]
 800b82a:	9307      	strlt	r3, [sp, #28]
 800b82c:	bfb8      	it	lt
 800b82e:	9204      	strlt	r2, [sp, #16]
 800b830:	7823      	ldrb	r3, [r4, #0]
 800b832:	2b2e      	cmp	r3, #46	@ 0x2e
 800b834:	d10a      	bne.n	800b84c <_svfiprintf_r+0x130>
 800b836:	7863      	ldrb	r3, [r4, #1]
 800b838:	2b2a      	cmp	r3, #42	@ 0x2a
 800b83a:	d132      	bne.n	800b8a2 <_svfiprintf_r+0x186>
 800b83c:	9b03      	ldr	r3, [sp, #12]
 800b83e:	3402      	adds	r4, #2
 800b840:	1d1a      	adds	r2, r3, #4
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	9203      	str	r2, [sp, #12]
 800b846:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b84a:	9305      	str	r3, [sp, #20]
 800b84c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b904 <_svfiprintf_r+0x1e8>
 800b850:	2203      	movs	r2, #3
 800b852:	4650      	mov	r0, sl
 800b854:	7821      	ldrb	r1, [r4, #0]
 800b856:	f7fd fc80 	bl	800915a <memchr>
 800b85a:	b138      	cbz	r0, 800b86c <_svfiprintf_r+0x150>
 800b85c:	2240      	movs	r2, #64	@ 0x40
 800b85e:	9b04      	ldr	r3, [sp, #16]
 800b860:	eba0 000a 	sub.w	r0, r0, sl
 800b864:	4082      	lsls	r2, r0
 800b866:	4313      	orrs	r3, r2
 800b868:	3401      	adds	r4, #1
 800b86a:	9304      	str	r3, [sp, #16]
 800b86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b870:	2206      	movs	r2, #6
 800b872:	4825      	ldr	r0, [pc, #148]	@ (800b908 <_svfiprintf_r+0x1ec>)
 800b874:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b878:	f7fd fc6f 	bl	800915a <memchr>
 800b87c:	2800      	cmp	r0, #0
 800b87e:	d036      	beq.n	800b8ee <_svfiprintf_r+0x1d2>
 800b880:	4b22      	ldr	r3, [pc, #136]	@ (800b90c <_svfiprintf_r+0x1f0>)
 800b882:	bb1b      	cbnz	r3, 800b8cc <_svfiprintf_r+0x1b0>
 800b884:	9b03      	ldr	r3, [sp, #12]
 800b886:	3307      	adds	r3, #7
 800b888:	f023 0307 	bic.w	r3, r3, #7
 800b88c:	3308      	adds	r3, #8
 800b88e:	9303      	str	r3, [sp, #12]
 800b890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b892:	4433      	add	r3, r6
 800b894:	9309      	str	r3, [sp, #36]	@ 0x24
 800b896:	e76a      	b.n	800b76e <_svfiprintf_r+0x52>
 800b898:	460c      	mov	r4, r1
 800b89a:	2001      	movs	r0, #1
 800b89c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8a0:	e7a8      	b.n	800b7f4 <_svfiprintf_r+0xd8>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	f04f 0c0a 	mov.w	ip, #10
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	3401      	adds	r4, #1
 800b8ac:	9305      	str	r3, [sp, #20]
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8b4:	3a30      	subs	r2, #48	@ 0x30
 800b8b6:	2a09      	cmp	r2, #9
 800b8b8:	d903      	bls.n	800b8c2 <_svfiprintf_r+0x1a6>
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d0c6      	beq.n	800b84c <_svfiprintf_r+0x130>
 800b8be:	9105      	str	r1, [sp, #20]
 800b8c0:	e7c4      	b.n	800b84c <_svfiprintf_r+0x130>
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8ca:	e7f0      	b.n	800b8ae <_svfiprintf_r+0x192>
 800b8cc:	ab03      	add	r3, sp, #12
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	462a      	mov	r2, r5
 800b8d2:	4638      	mov	r0, r7
 800b8d4:	4b0e      	ldr	r3, [pc, #56]	@ (800b910 <_svfiprintf_r+0x1f4>)
 800b8d6:	a904      	add	r1, sp, #16
 800b8d8:	f7fc fccc 	bl	8008274 <_printf_float>
 800b8dc:	1c42      	adds	r2, r0, #1
 800b8de:	4606      	mov	r6, r0
 800b8e0:	d1d6      	bne.n	800b890 <_svfiprintf_r+0x174>
 800b8e2:	89ab      	ldrh	r3, [r5, #12]
 800b8e4:	065b      	lsls	r3, r3, #25
 800b8e6:	f53f af2d 	bmi.w	800b744 <_svfiprintf_r+0x28>
 800b8ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8ec:	e72c      	b.n	800b748 <_svfiprintf_r+0x2c>
 800b8ee:	ab03      	add	r3, sp, #12
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	462a      	mov	r2, r5
 800b8f4:	4638      	mov	r0, r7
 800b8f6:	4b06      	ldr	r3, [pc, #24]	@ (800b910 <_svfiprintf_r+0x1f4>)
 800b8f8:	a904      	add	r1, sp, #16
 800b8fa:	f7fc ff59 	bl	80087b0 <_printf_i>
 800b8fe:	e7ed      	b.n	800b8dc <_svfiprintf_r+0x1c0>
 800b900:	0800e509 	.word	0x0800e509
 800b904:	0800e50f 	.word	0x0800e50f
 800b908:	0800e513 	.word	0x0800e513
 800b90c:	08008275 	.word	0x08008275
 800b910:	0800b665 	.word	0x0800b665

0800b914 <__sflush_r>:
 800b914:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b91a:	0716      	lsls	r6, r2, #28
 800b91c:	4605      	mov	r5, r0
 800b91e:	460c      	mov	r4, r1
 800b920:	d454      	bmi.n	800b9cc <__sflush_r+0xb8>
 800b922:	684b      	ldr	r3, [r1, #4]
 800b924:	2b00      	cmp	r3, #0
 800b926:	dc02      	bgt.n	800b92e <__sflush_r+0x1a>
 800b928:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	dd48      	ble.n	800b9c0 <__sflush_r+0xac>
 800b92e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b930:	2e00      	cmp	r6, #0
 800b932:	d045      	beq.n	800b9c0 <__sflush_r+0xac>
 800b934:	2300      	movs	r3, #0
 800b936:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b93a:	682f      	ldr	r7, [r5, #0]
 800b93c:	6a21      	ldr	r1, [r4, #32]
 800b93e:	602b      	str	r3, [r5, #0]
 800b940:	d030      	beq.n	800b9a4 <__sflush_r+0x90>
 800b942:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b944:	89a3      	ldrh	r3, [r4, #12]
 800b946:	0759      	lsls	r1, r3, #29
 800b948:	d505      	bpl.n	800b956 <__sflush_r+0x42>
 800b94a:	6863      	ldr	r3, [r4, #4]
 800b94c:	1ad2      	subs	r2, r2, r3
 800b94e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b950:	b10b      	cbz	r3, 800b956 <__sflush_r+0x42>
 800b952:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b954:	1ad2      	subs	r2, r2, r3
 800b956:	2300      	movs	r3, #0
 800b958:	4628      	mov	r0, r5
 800b95a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b95c:	6a21      	ldr	r1, [r4, #32]
 800b95e:	47b0      	blx	r6
 800b960:	1c43      	adds	r3, r0, #1
 800b962:	89a3      	ldrh	r3, [r4, #12]
 800b964:	d106      	bne.n	800b974 <__sflush_r+0x60>
 800b966:	6829      	ldr	r1, [r5, #0]
 800b968:	291d      	cmp	r1, #29
 800b96a:	d82b      	bhi.n	800b9c4 <__sflush_r+0xb0>
 800b96c:	4a28      	ldr	r2, [pc, #160]	@ (800ba10 <__sflush_r+0xfc>)
 800b96e:	410a      	asrs	r2, r1
 800b970:	07d6      	lsls	r6, r2, #31
 800b972:	d427      	bmi.n	800b9c4 <__sflush_r+0xb0>
 800b974:	2200      	movs	r2, #0
 800b976:	6062      	str	r2, [r4, #4]
 800b978:	6922      	ldr	r2, [r4, #16]
 800b97a:	04d9      	lsls	r1, r3, #19
 800b97c:	6022      	str	r2, [r4, #0]
 800b97e:	d504      	bpl.n	800b98a <__sflush_r+0x76>
 800b980:	1c42      	adds	r2, r0, #1
 800b982:	d101      	bne.n	800b988 <__sflush_r+0x74>
 800b984:	682b      	ldr	r3, [r5, #0]
 800b986:	b903      	cbnz	r3, 800b98a <__sflush_r+0x76>
 800b988:	6560      	str	r0, [r4, #84]	@ 0x54
 800b98a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b98c:	602f      	str	r7, [r5, #0]
 800b98e:	b1b9      	cbz	r1, 800b9c0 <__sflush_r+0xac>
 800b990:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b994:	4299      	cmp	r1, r3
 800b996:	d002      	beq.n	800b99e <__sflush_r+0x8a>
 800b998:	4628      	mov	r0, r5
 800b99a:	f7fe fa41 	bl	8009e20 <_free_r>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9a2:	e00d      	b.n	800b9c0 <__sflush_r+0xac>
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	47b0      	blx	r6
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	1c50      	adds	r0, r2, #1
 800b9ae:	d1c9      	bne.n	800b944 <__sflush_r+0x30>
 800b9b0:	682b      	ldr	r3, [r5, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d0c6      	beq.n	800b944 <__sflush_r+0x30>
 800b9b6:	2b1d      	cmp	r3, #29
 800b9b8:	d001      	beq.n	800b9be <__sflush_r+0xaa>
 800b9ba:	2b16      	cmp	r3, #22
 800b9bc:	d11d      	bne.n	800b9fa <__sflush_r+0xe6>
 800b9be:	602f      	str	r7, [r5, #0]
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	e021      	b.n	800ba08 <__sflush_r+0xf4>
 800b9c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9c8:	b21b      	sxth	r3, r3
 800b9ca:	e01a      	b.n	800ba02 <__sflush_r+0xee>
 800b9cc:	690f      	ldr	r7, [r1, #16]
 800b9ce:	2f00      	cmp	r7, #0
 800b9d0:	d0f6      	beq.n	800b9c0 <__sflush_r+0xac>
 800b9d2:	0793      	lsls	r3, r2, #30
 800b9d4:	bf18      	it	ne
 800b9d6:	2300      	movne	r3, #0
 800b9d8:	680e      	ldr	r6, [r1, #0]
 800b9da:	bf08      	it	eq
 800b9dc:	694b      	ldreq	r3, [r1, #20]
 800b9de:	1bf6      	subs	r6, r6, r7
 800b9e0:	600f      	str	r7, [r1, #0]
 800b9e2:	608b      	str	r3, [r1, #8]
 800b9e4:	2e00      	cmp	r6, #0
 800b9e6:	ddeb      	ble.n	800b9c0 <__sflush_r+0xac>
 800b9e8:	4633      	mov	r3, r6
 800b9ea:	463a      	mov	r2, r7
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	6a21      	ldr	r1, [r4, #32]
 800b9f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b9f4:	47e0      	blx	ip
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	dc07      	bgt.n	800ba0a <__sflush_r+0xf6>
 800b9fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba02:	f04f 30ff 	mov.w	r0, #4294967295
 800ba06:	81a3      	strh	r3, [r4, #12]
 800ba08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba0a:	4407      	add	r7, r0
 800ba0c:	1a36      	subs	r6, r6, r0
 800ba0e:	e7e9      	b.n	800b9e4 <__sflush_r+0xd0>
 800ba10:	dfbffffe 	.word	0xdfbffffe

0800ba14 <_fflush_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	690b      	ldr	r3, [r1, #16]
 800ba18:	4605      	mov	r5, r0
 800ba1a:	460c      	mov	r4, r1
 800ba1c:	b913      	cbnz	r3, 800ba24 <_fflush_r+0x10>
 800ba1e:	2500      	movs	r5, #0
 800ba20:	4628      	mov	r0, r5
 800ba22:	bd38      	pop	{r3, r4, r5, pc}
 800ba24:	b118      	cbz	r0, 800ba2e <_fflush_r+0x1a>
 800ba26:	6a03      	ldr	r3, [r0, #32]
 800ba28:	b90b      	cbnz	r3, 800ba2e <_fflush_r+0x1a>
 800ba2a:	f7fd fa7d 	bl	8008f28 <__sinit>
 800ba2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d0f3      	beq.n	800ba1e <_fflush_r+0xa>
 800ba36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ba38:	07d0      	lsls	r0, r2, #31
 800ba3a:	d404      	bmi.n	800ba46 <_fflush_r+0x32>
 800ba3c:	0599      	lsls	r1, r3, #22
 800ba3e:	d402      	bmi.n	800ba46 <_fflush_r+0x32>
 800ba40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba42:	f7fd fb88 	bl	8009156 <__retarget_lock_acquire_recursive>
 800ba46:	4628      	mov	r0, r5
 800ba48:	4621      	mov	r1, r4
 800ba4a:	f7ff ff63 	bl	800b914 <__sflush_r>
 800ba4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba50:	4605      	mov	r5, r0
 800ba52:	07da      	lsls	r2, r3, #31
 800ba54:	d4e4      	bmi.n	800ba20 <_fflush_r+0xc>
 800ba56:	89a3      	ldrh	r3, [r4, #12]
 800ba58:	059b      	lsls	r3, r3, #22
 800ba5a:	d4e1      	bmi.n	800ba20 <_fflush_r+0xc>
 800ba5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba5e:	f7fd fb7b 	bl	8009158 <__retarget_lock_release_recursive>
 800ba62:	e7dd      	b.n	800ba20 <_fflush_r+0xc>

0800ba64 <memmove>:
 800ba64:	4288      	cmp	r0, r1
 800ba66:	b510      	push	{r4, lr}
 800ba68:	eb01 0402 	add.w	r4, r1, r2
 800ba6c:	d902      	bls.n	800ba74 <memmove+0x10>
 800ba6e:	4284      	cmp	r4, r0
 800ba70:	4623      	mov	r3, r4
 800ba72:	d807      	bhi.n	800ba84 <memmove+0x20>
 800ba74:	1e43      	subs	r3, r0, #1
 800ba76:	42a1      	cmp	r1, r4
 800ba78:	d008      	beq.n	800ba8c <memmove+0x28>
 800ba7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba82:	e7f8      	b.n	800ba76 <memmove+0x12>
 800ba84:	4601      	mov	r1, r0
 800ba86:	4402      	add	r2, r0
 800ba88:	428a      	cmp	r2, r1
 800ba8a:	d100      	bne.n	800ba8e <memmove+0x2a>
 800ba8c:	bd10      	pop	{r4, pc}
 800ba8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba96:	e7f7      	b.n	800ba88 <memmove+0x24>

0800ba98 <strncmp>:
 800ba98:	b510      	push	{r4, lr}
 800ba9a:	b16a      	cbz	r2, 800bab8 <strncmp+0x20>
 800ba9c:	3901      	subs	r1, #1
 800ba9e:	1884      	adds	r4, r0, r2
 800baa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baa4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d103      	bne.n	800bab4 <strncmp+0x1c>
 800baac:	42a0      	cmp	r0, r4
 800baae:	d001      	beq.n	800bab4 <strncmp+0x1c>
 800bab0:	2a00      	cmp	r2, #0
 800bab2:	d1f5      	bne.n	800baa0 <strncmp+0x8>
 800bab4:	1ad0      	subs	r0, r2, r3
 800bab6:	bd10      	pop	{r4, pc}
 800bab8:	4610      	mov	r0, r2
 800baba:	e7fc      	b.n	800bab6 <strncmp+0x1e>

0800babc <_sbrk_r>:
 800babc:	b538      	push	{r3, r4, r5, lr}
 800babe:	2300      	movs	r3, #0
 800bac0:	4d05      	ldr	r5, [pc, #20]	@ (800bad8 <_sbrk_r+0x1c>)
 800bac2:	4604      	mov	r4, r0
 800bac4:	4608      	mov	r0, r1
 800bac6:	602b      	str	r3, [r5, #0]
 800bac8:	f7f8 fbce 	bl	8004268 <_sbrk>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	d102      	bne.n	800bad6 <_sbrk_r+0x1a>
 800bad0:	682b      	ldr	r3, [r5, #0]
 800bad2:	b103      	cbz	r3, 800bad6 <_sbrk_r+0x1a>
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	bd38      	pop	{r3, r4, r5, pc}
 800bad8:	20000758 	.word	0x20000758

0800badc <memcpy>:
 800badc:	440a      	add	r2, r1
 800bade:	4291      	cmp	r1, r2
 800bae0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bae4:	d100      	bne.n	800bae8 <memcpy+0xc>
 800bae6:	4770      	bx	lr
 800bae8:	b510      	push	{r4, lr}
 800baea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baee:	4291      	cmp	r1, r2
 800baf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baf4:	d1f9      	bne.n	800baea <memcpy+0xe>
 800baf6:	bd10      	pop	{r4, pc}

0800baf8 <nan>:
 800baf8:	2000      	movs	r0, #0
 800bafa:	4901      	ldr	r1, [pc, #4]	@ (800bb00 <nan+0x8>)
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	7ff80000 	.word	0x7ff80000

0800bb04 <__assert_func>:
 800bb04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb06:	4614      	mov	r4, r2
 800bb08:	461a      	mov	r2, r3
 800bb0a:	4b09      	ldr	r3, [pc, #36]	@ (800bb30 <__assert_func+0x2c>)
 800bb0c:	4605      	mov	r5, r0
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	68d8      	ldr	r0, [r3, #12]
 800bb12:	b954      	cbnz	r4, 800bb2a <__assert_func+0x26>
 800bb14:	4b07      	ldr	r3, [pc, #28]	@ (800bb34 <__assert_func+0x30>)
 800bb16:	461c      	mov	r4, r3
 800bb18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb1c:	9100      	str	r1, [sp, #0]
 800bb1e:	462b      	mov	r3, r5
 800bb20:	4905      	ldr	r1, [pc, #20]	@ (800bb38 <__assert_func+0x34>)
 800bb22:	f000 fba7 	bl	800c274 <fiprintf>
 800bb26:	f000 fbb7 	bl	800c298 <abort>
 800bb2a:	4b04      	ldr	r3, [pc, #16]	@ (800bb3c <__assert_func+0x38>)
 800bb2c:	e7f4      	b.n	800bb18 <__assert_func+0x14>
 800bb2e:	bf00      	nop
 800bb30:	20000038 	.word	0x20000038
 800bb34:	0800e55d 	.word	0x0800e55d
 800bb38:	0800e52f 	.word	0x0800e52f
 800bb3c:	0800e522 	.word	0x0800e522

0800bb40 <_calloc_r>:
 800bb40:	b570      	push	{r4, r5, r6, lr}
 800bb42:	fba1 5402 	umull	r5, r4, r1, r2
 800bb46:	b93c      	cbnz	r4, 800bb58 <_calloc_r+0x18>
 800bb48:	4629      	mov	r1, r5
 800bb4a:	f7fe f9db 	bl	8009f04 <_malloc_r>
 800bb4e:	4606      	mov	r6, r0
 800bb50:	b928      	cbnz	r0, 800bb5e <_calloc_r+0x1e>
 800bb52:	2600      	movs	r6, #0
 800bb54:	4630      	mov	r0, r6
 800bb56:	bd70      	pop	{r4, r5, r6, pc}
 800bb58:	220c      	movs	r2, #12
 800bb5a:	6002      	str	r2, [r0, #0]
 800bb5c:	e7f9      	b.n	800bb52 <_calloc_r+0x12>
 800bb5e:	462a      	mov	r2, r5
 800bb60:	4621      	mov	r1, r4
 800bb62:	f7fd fa7a 	bl	800905a <memset>
 800bb66:	e7f5      	b.n	800bb54 <_calloc_r+0x14>

0800bb68 <rshift>:
 800bb68:	6903      	ldr	r3, [r0, #16]
 800bb6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bb72:	f100 0414 	add.w	r4, r0, #20
 800bb76:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bb7a:	dd46      	ble.n	800bc0a <rshift+0xa2>
 800bb7c:	f011 011f 	ands.w	r1, r1, #31
 800bb80:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bb84:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bb88:	d10c      	bne.n	800bba4 <rshift+0x3c>
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	f100 0710 	add.w	r7, r0, #16
 800bb90:	42b1      	cmp	r1, r6
 800bb92:	d335      	bcc.n	800bc00 <rshift+0x98>
 800bb94:	1a9b      	subs	r3, r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	1eea      	subs	r2, r5, #3
 800bb9a:	4296      	cmp	r6, r2
 800bb9c:	bf38      	it	cc
 800bb9e:	2300      	movcc	r3, #0
 800bba0:	4423      	add	r3, r4
 800bba2:	e015      	b.n	800bbd0 <rshift+0x68>
 800bba4:	46a1      	mov	r9, r4
 800bba6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bbaa:	f1c1 0820 	rsb	r8, r1, #32
 800bbae:	40cf      	lsrs	r7, r1
 800bbb0:	f105 0e04 	add.w	lr, r5, #4
 800bbb4:	4576      	cmp	r6, lr
 800bbb6:	46f4      	mov	ip, lr
 800bbb8:	d816      	bhi.n	800bbe8 <rshift+0x80>
 800bbba:	1a9a      	subs	r2, r3, r2
 800bbbc:	0092      	lsls	r2, r2, #2
 800bbbe:	3a04      	subs	r2, #4
 800bbc0:	3501      	adds	r5, #1
 800bbc2:	42ae      	cmp	r6, r5
 800bbc4:	bf38      	it	cc
 800bbc6:	2200      	movcc	r2, #0
 800bbc8:	18a3      	adds	r3, r4, r2
 800bbca:	50a7      	str	r7, [r4, r2]
 800bbcc:	b107      	cbz	r7, 800bbd0 <rshift+0x68>
 800bbce:	3304      	adds	r3, #4
 800bbd0:	42a3      	cmp	r3, r4
 800bbd2:	eba3 0204 	sub.w	r2, r3, r4
 800bbd6:	bf08      	it	eq
 800bbd8:	2300      	moveq	r3, #0
 800bbda:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bbde:	6102      	str	r2, [r0, #16]
 800bbe0:	bf08      	it	eq
 800bbe2:	6143      	streq	r3, [r0, #20]
 800bbe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbe8:	f8dc c000 	ldr.w	ip, [ip]
 800bbec:	fa0c fc08 	lsl.w	ip, ip, r8
 800bbf0:	ea4c 0707 	orr.w	r7, ip, r7
 800bbf4:	f849 7b04 	str.w	r7, [r9], #4
 800bbf8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bbfc:	40cf      	lsrs	r7, r1
 800bbfe:	e7d9      	b.n	800bbb4 <rshift+0x4c>
 800bc00:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc04:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc08:	e7c2      	b.n	800bb90 <rshift+0x28>
 800bc0a:	4623      	mov	r3, r4
 800bc0c:	e7e0      	b.n	800bbd0 <rshift+0x68>

0800bc0e <__hexdig_fun>:
 800bc0e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bc12:	2b09      	cmp	r3, #9
 800bc14:	d802      	bhi.n	800bc1c <__hexdig_fun+0xe>
 800bc16:	3820      	subs	r0, #32
 800bc18:	b2c0      	uxtb	r0, r0
 800bc1a:	4770      	bx	lr
 800bc1c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bc20:	2b05      	cmp	r3, #5
 800bc22:	d801      	bhi.n	800bc28 <__hexdig_fun+0x1a>
 800bc24:	3847      	subs	r0, #71	@ 0x47
 800bc26:	e7f7      	b.n	800bc18 <__hexdig_fun+0xa>
 800bc28:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bc2c:	2b05      	cmp	r3, #5
 800bc2e:	d801      	bhi.n	800bc34 <__hexdig_fun+0x26>
 800bc30:	3827      	subs	r0, #39	@ 0x27
 800bc32:	e7f1      	b.n	800bc18 <__hexdig_fun+0xa>
 800bc34:	2000      	movs	r0, #0
 800bc36:	4770      	bx	lr

0800bc38 <__gethex>:
 800bc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3c:	468a      	mov	sl, r1
 800bc3e:	4690      	mov	r8, r2
 800bc40:	b085      	sub	sp, #20
 800bc42:	9302      	str	r3, [sp, #8]
 800bc44:	680b      	ldr	r3, [r1, #0]
 800bc46:	9001      	str	r0, [sp, #4]
 800bc48:	1c9c      	adds	r4, r3, #2
 800bc4a:	46a1      	mov	r9, r4
 800bc4c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bc50:	2830      	cmp	r0, #48	@ 0x30
 800bc52:	d0fa      	beq.n	800bc4a <__gethex+0x12>
 800bc54:	eba9 0303 	sub.w	r3, r9, r3
 800bc58:	f1a3 0b02 	sub.w	fp, r3, #2
 800bc5c:	f7ff ffd7 	bl	800bc0e <__hexdig_fun>
 800bc60:	4605      	mov	r5, r0
 800bc62:	2800      	cmp	r0, #0
 800bc64:	d168      	bne.n	800bd38 <__gethex+0x100>
 800bc66:	2201      	movs	r2, #1
 800bc68:	4648      	mov	r0, r9
 800bc6a:	499f      	ldr	r1, [pc, #636]	@ (800bee8 <__gethex+0x2b0>)
 800bc6c:	f7ff ff14 	bl	800ba98 <strncmp>
 800bc70:	4607      	mov	r7, r0
 800bc72:	2800      	cmp	r0, #0
 800bc74:	d167      	bne.n	800bd46 <__gethex+0x10e>
 800bc76:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bc7a:	4626      	mov	r6, r4
 800bc7c:	f7ff ffc7 	bl	800bc0e <__hexdig_fun>
 800bc80:	2800      	cmp	r0, #0
 800bc82:	d062      	beq.n	800bd4a <__gethex+0x112>
 800bc84:	4623      	mov	r3, r4
 800bc86:	7818      	ldrb	r0, [r3, #0]
 800bc88:	4699      	mov	r9, r3
 800bc8a:	2830      	cmp	r0, #48	@ 0x30
 800bc8c:	f103 0301 	add.w	r3, r3, #1
 800bc90:	d0f9      	beq.n	800bc86 <__gethex+0x4e>
 800bc92:	f7ff ffbc 	bl	800bc0e <__hexdig_fun>
 800bc96:	fab0 f580 	clz	r5, r0
 800bc9a:	f04f 0b01 	mov.w	fp, #1
 800bc9e:	096d      	lsrs	r5, r5, #5
 800bca0:	464a      	mov	r2, r9
 800bca2:	4616      	mov	r6, r2
 800bca4:	7830      	ldrb	r0, [r6, #0]
 800bca6:	3201      	adds	r2, #1
 800bca8:	f7ff ffb1 	bl	800bc0e <__hexdig_fun>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d1f8      	bne.n	800bca2 <__gethex+0x6a>
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	4630      	mov	r0, r6
 800bcb4:	498c      	ldr	r1, [pc, #560]	@ (800bee8 <__gethex+0x2b0>)
 800bcb6:	f7ff feef 	bl	800ba98 <strncmp>
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	d13f      	bne.n	800bd3e <__gethex+0x106>
 800bcbe:	b944      	cbnz	r4, 800bcd2 <__gethex+0x9a>
 800bcc0:	1c74      	adds	r4, r6, #1
 800bcc2:	4622      	mov	r2, r4
 800bcc4:	4616      	mov	r6, r2
 800bcc6:	7830      	ldrb	r0, [r6, #0]
 800bcc8:	3201      	adds	r2, #1
 800bcca:	f7ff ffa0 	bl	800bc0e <__hexdig_fun>
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	d1f8      	bne.n	800bcc4 <__gethex+0x8c>
 800bcd2:	1ba4      	subs	r4, r4, r6
 800bcd4:	00a7      	lsls	r7, r4, #2
 800bcd6:	7833      	ldrb	r3, [r6, #0]
 800bcd8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bcdc:	2b50      	cmp	r3, #80	@ 0x50
 800bcde:	d13e      	bne.n	800bd5e <__gethex+0x126>
 800bce0:	7873      	ldrb	r3, [r6, #1]
 800bce2:	2b2b      	cmp	r3, #43	@ 0x2b
 800bce4:	d033      	beq.n	800bd4e <__gethex+0x116>
 800bce6:	2b2d      	cmp	r3, #45	@ 0x2d
 800bce8:	d034      	beq.n	800bd54 <__gethex+0x11c>
 800bcea:	2400      	movs	r4, #0
 800bcec:	1c71      	adds	r1, r6, #1
 800bcee:	7808      	ldrb	r0, [r1, #0]
 800bcf0:	f7ff ff8d 	bl	800bc0e <__hexdig_fun>
 800bcf4:	1e43      	subs	r3, r0, #1
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	2b18      	cmp	r3, #24
 800bcfa:	d830      	bhi.n	800bd5e <__gethex+0x126>
 800bcfc:	f1a0 0210 	sub.w	r2, r0, #16
 800bd00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd04:	f7ff ff83 	bl	800bc0e <__hexdig_fun>
 800bd08:	f100 3cff 	add.w	ip, r0, #4294967295
 800bd0c:	fa5f fc8c 	uxtb.w	ip, ip
 800bd10:	f1bc 0f18 	cmp.w	ip, #24
 800bd14:	f04f 030a 	mov.w	r3, #10
 800bd18:	d91e      	bls.n	800bd58 <__gethex+0x120>
 800bd1a:	b104      	cbz	r4, 800bd1e <__gethex+0xe6>
 800bd1c:	4252      	negs	r2, r2
 800bd1e:	4417      	add	r7, r2
 800bd20:	f8ca 1000 	str.w	r1, [sl]
 800bd24:	b1ed      	cbz	r5, 800bd62 <__gethex+0x12a>
 800bd26:	f1bb 0f00 	cmp.w	fp, #0
 800bd2a:	bf0c      	ite	eq
 800bd2c:	2506      	moveq	r5, #6
 800bd2e:	2500      	movne	r5, #0
 800bd30:	4628      	mov	r0, r5
 800bd32:	b005      	add	sp, #20
 800bd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd38:	2500      	movs	r5, #0
 800bd3a:	462c      	mov	r4, r5
 800bd3c:	e7b0      	b.n	800bca0 <__gethex+0x68>
 800bd3e:	2c00      	cmp	r4, #0
 800bd40:	d1c7      	bne.n	800bcd2 <__gethex+0x9a>
 800bd42:	4627      	mov	r7, r4
 800bd44:	e7c7      	b.n	800bcd6 <__gethex+0x9e>
 800bd46:	464e      	mov	r6, r9
 800bd48:	462f      	mov	r7, r5
 800bd4a:	2501      	movs	r5, #1
 800bd4c:	e7c3      	b.n	800bcd6 <__gethex+0x9e>
 800bd4e:	2400      	movs	r4, #0
 800bd50:	1cb1      	adds	r1, r6, #2
 800bd52:	e7cc      	b.n	800bcee <__gethex+0xb6>
 800bd54:	2401      	movs	r4, #1
 800bd56:	e7fb      	b.n	800bd50 <__gethex+0x118>
 800bd58:	fb03 0002 	mla	r0, r3, r2, r0
 800bd5c:	e7ce      	b.n	800bcfc <__gethex+0xc4>
 800bd5e:	4631      	mov	r1, r6
 800bd60:	e7de      	b.n	800bd20 <__gethex+0xe8>
 800bd62:	4629      	mov	r1, r5
 800bd64:	eba6 0309 	sub.w	r3, r6, r9
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	2b07      	cmp	r3, #7
 800bd6c:	dc0a      	bgt.n	800bd84 <__gethex+0x14c>
 800bd6e:	9801      	ldr	r0, [sp, #4]
 800bd70:	f7fe f954 	bl	800a01c <_Balloc>
 800bd74:	4604      	mov	r4, r0
 800bd76:	b940      	cbnz	r0, 800bd8a <__gethex+0x152>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	21e4      	movs	r1, #228	@ 0xe4
 800bd7c:	4b5b      	ldr	r3, [pc, #364]	@ (800beec <__gethex+0x2b4>)
 800bd7e:	485c      	ldr	r0, [pc, #368]	@ (800bef0 <__gethex+0x2b8>)
 800bd80:	f7ff fec0 	bl	800bb04 <__assert_func>
 800bd84:	3101      	adds	r1, #1
 800bd86:	105b      	asrs	r3, r3, #1
 800bd88:	e7ef      	b.n	800bd6a <__gethex+0x132>
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	f100 0a14 	add.w	sl, r0, #20
 800bd90:	4655      	mov	r5, sl
 800bd92:	469b      	mov	fp, r3
 800bd94:	45b1      	cmp	r9, r6
 800bd96:	d337      	bcc.n	800be08 <__gethex+0x1d0>
 800bd98:	f845 bb04 	str.w	fp, [r5], #4
 800bd9c:	eba5 050a 	sub.w	r5, r5, sl
 800bda0:	10ad      	asrs	r5, r5, #2
 800bda2:	6125      	str	r5, [r4, #16]
 800bda4:	4658      	mov	r0, fp
 800bda6:	f7fe fa2b 	bl	800a200 <__hi0bits>
 800bdaa:	016d      	lsls	r5, r5, #5
 800bdac:	f8d8 6000 	ldr.w	r6, [r8]
 800bdb0:	1a2d      	subs	r5, r5, r0
 800bdb2:	42b5      	cmp	r5, r6
 800bdb4:	dd54      	ble.n	800be60 <__gethex+0x228>
 800bdb6:	1bad      	subs	r5, r5, r6
 800bdb8:	4629      	mov	r1, r5
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f7fe fdb3 	bl	800a926 <__any_on>
 800bdc0:	4681      	mov	r9, r0
 800bdc2:	b178      	cbz	r0, 800bde4 <__gethex+0x1ac>
 800bdc4:	f04f 0901 	mov.w	r9, #1
 800bdc8:	1e6b      	subs	r3, r5, #1
 800bdca:	1159      	asrs	r1, r3, #5
 800bdcc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bdd0:	f003 021f 	and.w	r2, r3, #31
 800bdd4:	fa09 f202 	lsl.w	r2, r9, r2
 800bdd8:	420a      	tst	r2, r1
 800bdda:	d003      	beq.n	800bde4 <__gethex+0x1ac>
 800bddc:	454b      	cmp	r3, r9
 800bdde:	dc36      	bgt.n	800be4e <__gethex+0x216>
 800bde0:	f04f 0902 	mov.w	r9, #2
 800bde4:	4629      	mov	r1, r5
 800bde6:	4620      	mov	r0, r4
 800bde8:	f7ff febe 	bl	800bb68 <rshift>
 800bdec:	442f      	add	r7, r5
 800bdee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bdf2:	42bb      	cmp	r3, r7
 800bdf4:	da42      	bge.n	800be7c <__gethex+0x244>
 800bdf6:	4621      	mov	r1, r4
 800bdf8:	9801      	ldr	r0, [sp, #4]
 800bdfa:	f7fe f94f 	bl	800a09c <_Bfree>
 800bdfe:	2300      	movs	r3, #0
 800be00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be02:	25a3      	movs	r5, #163	@ 0xa3
 800be04:	6013      	str	r3, [r2, #0]
 800be06:	e793      	b.n	800bd30 <__gethex+0xf8>
 800be08:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800be0c:	2a2e      	cmp	r2, #46	@ 0x2e
 800be0e:	d012      	beq.n	800be36 <__gethex+0x1fe>
 800be10:	2b20      	cmp	r3, #32
 800be12:	d104      	bne.n	800be1e <__gethex+0x1e6>
 800be14:	f845 bb04 	str.w	fp, [r5], #4
 800be18:	f04f 0b00 	mov.w	fp, #0
 800be1c:	465b      	mov	r3, fp
 800be1e:	7830      	ldrb	r0, [r6, #0]
 800be20:	9303      	str	r3, [sp, #12]
 800be22:	f7ff fef4 	bl	800bc0e <__hexdig_fun>
 800be26:	9b03      	ldr	r3, [sp, #12]
 800be28:	f000 000f 	and.w	r0, r0, #15
 800be2c:	4098      	lsls	r0, r3
 800be2e:	ea4b 0b00 	orr.w	fp, fp, r0
 800be32:	3304      	adds	r3, #4
 800be34:	e7ae      	b.n	800bd94 <__gethex+0x15c>
 800be36:	45b1      	cmp	r9, r6
 800be38:	d8ea      	bhi.n	800be10 <__gethex+0x1d8>
 800be3a:	2201      	movs	r2, #1
 800be3c:	4630      	mov	r0, r6
 800be3e:	492a      	ldr	r1, [pc, #168]	@ (800bee8 <__gethex+0x2b0>)
 800be40:	9303      	str	r3, [sp, #12]
 800be42:	f7ff fe29 	bl	800ba98 <strncmp>
 800be46:	9b03      	ldr	r3, [sp, #12]
 800be48:	2800      	cmp	r0, #0
 800be4a:	d1e1      	bne.n	800be10 <__gethex+0x1d8>
 800be4c:	e7a2      	b.n	800bd94 <__gethex+0x15c>
 800be4e:	4620      	mov	r0, r4
 800be50:	1ea9      	subs	r1, r5, #2
 800be52:	f7fe fd68 	bl	800a926 <__any_on>
 800be56:	2800      	cmp	r0, #0
 800be58:	d0c2      	beq.n	800bde0 <__gethex+0x1a8>
 800be5a:	f04f 0903 	mov.w	r9, #3
 800be5e:	e7c1      	b.n	800bde4 <__gethex+0x1ac>
 800be60:	da09      	bge.n	800be76 <__gethex+0x23e>
 800be62:	1b75      	subs	r5, r6, r5
 800be64:	4621      	mov	r1, r4
 800be66:	462a      	mov	r2, r5
 800be68:	9801      	ldr	r0, [sp, #4]
 800be6a:	f7fe fb2d 	bl	800a4c8 <__lshift>
 800be6e:	4604      	mov	r4, r0
 800be70:	1b7f      	subs	r7, r7, r5
 800be72:	f100 0a14 	add.w	sl, r0, #20
 800be76:	f04f 0900 	mov.w	r9, #0
 800be7a:	e7b8      	b.n	800bdee <__gethex+0x1b6>
 800be7c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800be80:	42bd      	cmp	r5, r7
 800be82:	dd6f      	ble.n	800bf64 <__gethex+0x32c>
 800be84:	1bed      	subs	r5, r5, r7
 800be86:	42ae      	cmp	r6, r5
 800be88:	dc34      	bgt.n	800bef4 <__gethex+0x2bc>
 800be8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d022      	beq.n	800bed8 <__gethex+0x2a0>
 800be92:	2b03      	cmp	r3, #3
 800be94:	d024      	beq.n	800bee0 <__gethex+0x2a8>
 800be96:	2b01      	cmp	r3, #1
 800be98:	d115      	bne.n	800bec6 <__gethex+0x28e>
 800be9a:	42ae      	cmp	r6, r5
 800be9c:	d113      	bne.n	800bec6 <__gethex+0x28e>
 800be9e:	2e01      	cmp	r6, #1
 800bea0:	d10b      	bne.n	800beba <__gethex+0x282>
 800bea2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bea6:	9a02      	ldr	r2, [sp, #8]
 800bea8:	2562      	movs	r5, #98	@ 0x62
 800beaa:	6013      	str	r3, [r2, #0]
 800beac:	2301      	movs	r3, #1
 800beae:	6123      	str	r3, [r4, #16]
 800beb0:	f8ca 3000 	str.w	r3, [sl]
 800beb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beb6:	601c      	str	r4, [r3, #0]
 800beb8:	e73a      	b.n	800bd30 <__gethex+0xf8>
 800beba:	4620      	mov	r0, r4
 800bebc:	1e71      	subs	r1, r6, #1
 800bebe:	f7fe fd32 	bl	800a926 <__any_on>
 800bec2:	2800      	cmp	r0, #0
 800bec4:	d1ed      	bne.n	800bea2 <__gethex+0x26a>
 800bec6:	4621      	mov	r1, r4
 800bec8:	9801      	ldr	r0, [sp, #4]
 800beca:	f7fe f8e7 	bl	800a09c <_Bfree>
 800bece:	2300      	movs	r3, #0
 800bed0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bed2:	2550      	movs	r5, #80	@ 0x50
 800bed4:	6013      	str	r3, [r2, #0]
 800bed6:	e72b      	b.n	800bd30 <__gethex+0xf8>
 800bed8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d1f3      	bne.n	800bec6 <__gethex+0x28e>
 800bede:	e7e0      	b.n	800bea2 <__gethex+0x26a>
 800bee0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1dd      	bne.n	800bea2 <__gethex+0x26a>
 800bee6:	e7ee      	b.n	800bec6 <__gethex+0x28e>
 800bee8:	0800e3b0 	.word	0x0800e3b0
 800beec:	0800e245 	.word	0x0800e245
 800bef0:	0800e55e 	.word	0x0800e55e
 800bef4:	1e6f      	subs	r7, r5, #1
 800bef6:	f1b9 0f00 	cmp.w	r9, #0
 800befa:	d130      	bne.n	800bf5e <__gethex+0x326>
 800befc:	b127      	cbz	r7, 800bf08 <__gethex+0x2d0>
 800befe:	4639      	mov	r1, r7
 800bf00:	4620      	mov	r0, r4
 800bf02:	f7fe fd10 	bl	800a926 <__any_on>
 800bf06:	4681      	mov	r9, r0
 800bf08:	2301      	movs	r3, #1
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	1b76      	subs	r6, r6, r5
 800bf0e:	2502      	movs	r5, #2
 800bf10:	117a      	asrs	r2, r7, #5
 800bf12:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bf16:	f007 071f 	and.w	r7, r7, #31
 800bf1a:	40bb      	lsls	r3, r7
 800bf1c:	4213      	tst	r3, r2
 800bf1e:	4620      	mov	r0, r4
 800bf20:	bf18      	it	ne
 800bf22:	f049 0902 	orrne.w	r9, r9, #2
 800bf26:	f7ff fe1f 	bl	800bb68 <rshift>
 800bf2a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bf2e:	f1b9 0f00 	cmp.w	r9, #0
 800bf32:	d047      	beq.n	800bfc4 <__gethex+0x38c>
 800bf34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf38:	2b02      	cmp	r3, #2
 800bf3a:	d015      	beq.n	800bf68 <__gethex+0x330>
 800bf3c:	2b03      	cmp	r3, #3
 800bf3e:	d017      	beq.n	800bf70 <__gethex+0x338>
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d109      	bne.n	800bf58 <__gethex+0x320>
 800bf44:	f019 0f02 	tst.w	r9, #2
 800bf48:	d006      	beq.n	800bf58 <__gethex+0x320>
 800bf4a:	f8da 3000 	ldr.w	r3, [sl]
 800bf4e:	ea49 0903 	orr.w	r9, r9, r3
 800bf52:	f019 0f01 	tst.w	r9, #1
 800bf56:	d10e      	bne.n	800bf76 <__gethex+0x33e>
 800bf58:	f045 0510 	orr.w	r5, r5, #16
 800bf5c:	e032      	b.n	800bfc4 <__gethex+0x38c>
 800bf5e:	f04f 0901 	mov.w	r9, #1
 800bf62:	e7d1      	b.n	800bf08 <__gethex+0x2d0>
 800bf64:	2501      	movs	r5, #1
 800bf66:	e7e2      	b.n	800bf2e <__gethex+0x2f6>
 800bf68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf6a:	f1c3 0301 	rsb	r3, r3, #1
 800bf6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d0f0      	beq.n	800bf58 <__gethex+0x320>
 800bf76:	f04f 0c00 	mov.w	ip, #0
 800bf7a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bf7e:	f104 0314 	add.w	r3, r4, #20
 800bf82:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bf86:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf90:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bf94:	d01b      	beq.n	800bfce <__gethex+0x396>
 800bf96:	3201      	adds	r2, #1
 800bf98:	6002      	str	r2, [r0, #0]
 800bf9a:	2d02      	cmp	r5, #2
 800bf9c:	f104 0314 	add.w	r3, r4, #20
 800bfa0:	d13c      	bne.n	800c01c <__gethex+0x3e4>
 800bfa2:	f8d8 2000 	ldr.w	r2, [r8]
 800bfa6:	3a01      	subs	r2, #1
 800bfa8:	42b2      	cmp	r2, r6
 800bfaa:	d109      	bne.n	800bfc0 <__gethex+0x388>
 800bfac:	2201      	movs	r2, #1
 800bfae:	1171      	asrs	r1, r6, #5
 800bfb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bfb4:	f006 061f 	and.w	r6, r6, #31
 800bfb8:	fa02 f606 	lsl.w	r6, r2, r6
 800bfbc:	421e      	tst	r6, r3
 800bfbe:	d13a      	bne.n	800c036 <__gethex+0x3fe>
 800bfc0:	f045 0520 	orr.w	r5, r5, #32
 800bfc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfc6:	601c      	str	r4, [r3, #0]
 800bfc8:	9b02      	ldr	r3, [sp, #8]
 800bfca:	601f      	str	r7, [r3, #0]
 800bfcc:	e6b0      	b.n	800bd30 <__gethex+0xf8>
 800bfce:	4299      	cmp	r1, r3
 800bfd0:	f843 cc04 	str.w	ip, [r3, #-4]
 800bfd4:	d8d9      	bhi.n	800bf8a <__gethex+0x352>
 800bfd6:	68a3      	ldr	r3, [r4, #8]
 800bfd8:	459b      	cmp	fp, r3
 800bfda:	db17      	blt.n	800c00c <__gethex+0x3d4>
 800bfdc:	6861      	ldr	r1, [r4, #4]
 800bfde:	9801      	ldr	r0, [sp, #4]
 800bfe0:	3101      	adds	r1, #1
 800bfe2:	f7fe f81b 	bl	800a01c <_Balloc>
 800bfe6:	4681      	mov	r9, r0
 800bfe8:	b918      	cbnz	r0, 800bff2 <__gethex+0x3ba>
 800bfea:	4602      	mov	r2, r0
 800bfec:	2184      	movs	r1, #132	@ 0x84
 800bfee:	4b19      	ldr	r3, [pc, #100]	@ (800c054 <__gethex+0x41c>)
 800bff0:	e6c5      	b.n	800bd7e <__gethex+0x146>
 800bff2:	6922      	ldr	r2, [r4, #16]
 800bff4:	f104 010c 	add.w	r1, r4, #12
 800bff8:	3202      	adds	r2, #2
 800bffa:	0092      	lsls	r2, r2, #2
 800bffc:	300c      	adds	r0, #12
 800bffe:	f7ff fd6d 	bl	800badc <memcpy>
 800c002:	4621      	mov	r1, r4
 800c004:	9801      	ldr	r0, [sp, #4]
 800c006:	f7fe f849 	bl	800a09c <_Bfree>
 800c00a:	464c      	mov	r4, r9
 800c00c:	6923      	ldr	r3, [r4, #16]
 800c00e:	1c5a      	adds	r2, r3, #1
 800c010:	6122      	str	r2, [r4, #16]
 800c012:	2201      	movs	r2, #1
 800c014:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c018:	615a      	str	r2, [r3, #20]
 800c01a:	e7be      	b.n	800bf9a <__gethex+0x362>
 800c01c:	6922      	ldr	r2, [r4, #16]
 800c01e:	455a      	cmp	r2, fp
 800c020:	dd0b      	ble.n	800c03a <__gethex+0x402>
 800c022:	2101      	movs	r1, #1
 800c024:	4620      	mov	r0, r4
 800c026:	f7ff fd9f 	bl	800bb68 <rshift>
 800c02a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c02e:	3701      	adds	r7, #1
 800c030:	42bb      	cmp	r3, r7
 800c032:	f6ff aee0 	blt.w	800bdf6 <__gethex+0x1be>
 800c036:	2501      	movs	r5, #1
 800c038:	e7c2      	b.n	800bfc0 <__gethex+0x388>
 800c03a:	f016 061f 	ands.w	r6, r6, #31
 800c03e:	d0fa      	beq.n	800c036 <__gethex+0x3fe>
 800c040:	4453      	add	r3, sl
 800c042:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c046:	f7fe f8db 	bl	800a200 <__hi0bits>
 800c04a:	f1c6 0620 	rsb	r6, r6, #32
 800c04e:	42b0      	cmp	r0, r6
 800c050:	dbe7      	blt.n	800c022 <__gethex+0x3ea>
 800c052:	e7f0      	b.n	800c036 <__gethex+0x3fe>
 800c054:	0800e245 	.word	0x0800e245

0800c058 <L_shift>:
 800c058:	f1c2 0208 	rsb	r2, r2, #8
 800c05c:	0092      	lsls	r2, r2, #2
 800c05e:	b570      	push	{r4, r5, r6, lr}
 800c060:	f1c2 0620 	rsb	r6, r2, #32
 800c064:	6843      	ldr	r3, [r0, #4]
 800c066:	6804      	ldr	r4, [r0, #0]
 800c068:	fa03 f506 	lsl.w	r5, r3, r6
 800c06c:	432c      	orrs	r4, r5
 800c06e:	40d3      	lsrs	r3, r2
 800c070:	6004      	str	r4, [r0, #0]
 800c072:	f840 3f04 	str.w	r3, [r0, #4]!
 800c076:	4288      	cmp	r0, r1
 800c078:	d3f4      	bcc.n	800c064 <L_shift+0xc>
 800c07a:	bd70      	pop	{r4, r5, r6, pc}

0800c07c <__match>:
 800c07c:	b530      	push	{r4, r5, lr}
 800c07e:	6803      	ldr	r3, [r0, #0]
 800c080:	3301      	adds	r3, #1
 800c082:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c086:	b914      	cbnz	r4, 800c08e <__match+0x12>
 800c088:	6003      	str	r3, [r0, #0]
 800c08a:	2001      	movs	r0, #1
 800c08c:	bd30      	pop	{r4, r5, pc}
 800c08e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c092:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c096:	2d19      	cmp	r5, #25
 800c098:	bf98      	it	ls
 800c09a:	3220      	addls	r2, #32
 800c09c:	42a2      	cmp	r2, r4
 800c09e:	d0f0      	beq.n	800c082 <__match+0x6>
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	e7f3      	b.n	800c08c <__match+0x10>

0800c0a4 <__hexnan>:
 800c0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a8:	2500      	movs	r5, #0
 800c0aa:	680b      	ldr	r3, [r1, #0]
 800c0ac:	4682      	mov	sl, r0
 800c0ae:	115e      	asrs	r6, r3, #5
 800c0b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c0b4:	f013 031f 	ands.w	r3, r3, #31
 800c0b8:	bf18      	it	ne
 800c0ba:	3604      	addne	r6, #4
 800c0bc:	1f37      	subs	r7, r6, #4
 800c0be:	4690      	mov	r8, r2
 800c0c0:	46b9      	mov	r9, r7
 800c0c2:	463c      	mov	r4, r7
 800c0c4:	46ab      	mov	fp, r5
 800c0c6:	b087      	sub	sp, #28
 800c0c8:	6801      	ldr	r1, [r0, #0]
 800c0ca:	9301      	str	r3, [sp, #4]
 800c0cc:	f846 5c04 	str.w	r5, [r6, #-4]
 800c0d0:	9502      	str	r5, [sp, #8]
 800c0d2:	784a      	ldrb	r2, [r1, #1]
 800c0d4:	1c4b      	adds	r3, r1, #1
 800c0d6:	9303      	str	r3, [sp, #12]
 800c0d8:	b342      	cbz	r2, 800c12c <__hexnan+0x88>
 800c0da:	4610      	mov	r0, r2
 800c0dc:	9105      	str	r1, [sp, #20]
 800c0de:	9204      	str	r2, [sp, #16]
 800c0e0:	f7ff fd95 	bl	800bc0e <__hexdig_fun>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d151      	bne.n	800c18c <__hexnan+0xe8>
 800c0e8:	9a04      	ldr	r2, [sp, #16]
 800c0ea:	9905      	ldr	r1, [sp, #20]
 800c0ec:	2a20      	cmp	r2, #32
 800c0ee:	d818      	bhi.n	800c122 <__hexnan+0x7e>
 800c0f0:	9b02      	ldr	r3, [sp, #8]
 800c0f2:	459b      	cmp	fp, r3
 800c0f4:	dd13      	ble.n	800c11e <__hexnan+0x7a>
 800c0f6:	454c      	cmp	r4, r9
 800c0f8:	d206      	bcs.n	800c108 <__hexnan+0x64>
 800c0fa:	2d07      	cmp	r5, #7
 800c0fc:	dc04      	bgt.n	800c108 <__hexnan+0x64>
 800c0fe:	462a      	mov	r2, r5
 800c100:	4649      	mov	r1, r9
 800c102:	4620      	mov	r0, r4
 800c104:	f7ff ffa8 	bl	800c058 <L_shift>
 800c108:	4544      	cmp	r4, r8
 800c10a:	d952      	bls.n	800c1b2 <__hexnan+0x10e>
 800c10c:	2300      	movs	r3, #0
 800c10e:	f1a4 0904 	sub.w	r9, r4, #4
 800c112:	f844 3c04 	str.w	r3, [r4, #-4]
 800c116:	461d      	mov	r5, r3
 800c118:	464c      	mov	r4, r9
 800c11a:	f8cd b008 	str.w	fp, [sp, #8]
 800c11e:	9903      	ldr	r1, [sp, #12]
 800c120:	e7d7      	b.n	800c0d2 <__hexnan+0x2e>
 800c122:	2a29      	cmp	r2, #41	@ 0x29
 800c124:	d157      	bne.n	800c1d6 <__hexnan+0x132>
 800c126:	3102      	adds	r1, #2
 800c128:	f8ca 1000 	str.w	r1, [sl]
 800c12c:	f1bb 0f00 	cmp.w	fp, #0
 800c130:	d051      	beq.n	800c1d6 <__hexnan+0x132>
 800c132:	454c      	cmp	r4, r9
 800c134:	d206      	bcs.n	800c144 <__hexnan+0xa0>
 800c136:	2d07      	cmp	r5, #7
 800c138:	dc04      	bgt.n	800c144 <__hexnan+0xa0>
 800c13a:	462a      	mov	r2, r5
 800c13c:	4649      	mov	r1, r9
 800c13e:	4620      	mov	r0, r4
 800c140:	f7ff ff8a 	bl	800c058 <L_shift>
 800c144:	4544      	cmp	r4, r8
 800c146:	d936      	bls.n	800c1b6 <__hexnan+0x112>
 800c148:	4623      	mov	r3, r4
 800c14a:	f1a8 0204 	sub.w	r2, r8, #4
 800c14e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c152:	429f      	cmp	r7, r3
 800c154:	f842 1f04 	str.w	r1, [r2, #4]!
 800c158:	d2f9      	bcs.n	800c14e <__hexnan+0xaa>
 800c15a:	1b3b      	subs	r3, r7, r4
 800c15c:	f023 0303 	bic.w	r3, r3, #3
 800c160:	3304      	adds	r3, #4
 800c162:	3401      	adds	r4, #1
 800c164:	3e03      	subs	r6, #3
 800c166:	42b4      	cmp	r4, r6
 800c168:	bf88      	it	hi
 800c16a:	2304      	movhi	r3, #4
 800c16c:	2200      	movs	r2, #0
 800c16e:	4443      	add	r3, r8
 800c170:	f843 2b04 	str.w	r2, [r3], #4
 800c174:	429f      	cmp	r7, r3
 800c176:	d2fb      	bcs.n	800c170 <__hexnan+0xcc>
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	b91b      	cbnz	r3, 800c184 <__hexnan+0xe0>
 800c17c:	4547      	cmp	r7, r8
 800c17e:	d128      	bne.n	800c1d2 <__hexnan+0x12e>
 800c180:	2301      	movs	r3, #1
 800c182:	603b      	str	r3, [r7, #0]
 800c184:	2005      	movs	r0, #5
 800c186:	b007      	add	sp, #28
 800c188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c18c:	3501      	adds	r5, #1
 800c18e:	2d08      	cmp	r5, #8
 800c190:	f10b 0b01 	add.w	fp, fp, #1
 800c194:	dd06      	ble.n	800c1a4 <__hexnan+0x100>
 800c196:	4544      	cmp	r4, r8
 800c198:	d9c1      	bls.n	800c11e <__hexnan+0x7a>
 800c19a:	2300      	movs	r3, #0
 800c19c:	2501      	movs	r5, #1
 800c19e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1a2:	3c04      	subs	r4, #4
 800c1a4:	6822      	ldr	r2, [r4, #0]
 800c1a6:	f000 000f 	and.w	r0, r0, #15
 800c1aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c1ae:	6020      	str	r0, [r4, #0]
 800c1b0:	e7b5      	b.n	800c11e <__hexnan+0x7a>
 800c1b2:	2508      	movs	r5, #8
 800c1b4:	e7b3      	b.n	800c11e <__hexnan+0x7a>
 800c1b6:	9b01      	ldr	r3, [sp, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d0dd      	beq.n	800c178 <__hexnan+0xd4>
 800c1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c1c0:	f1c3 0320 	rsb	r3, r3, #32
 800c1c4:	40da      	lsrs	r2, r3
 800c1c6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c1ca:	4013      	ands	r3, r2
 800c1cc:	f846 3c04 	str.w	r3, [r6, #-4]
 800c1d0:	e7d2      	b.n	800c178 <__hexnan+0xd4>
 800c1d2:	3f04      	subs	r7, #4
 800c1d4:	e7d0      	b.n	800c178 <__hexnan+0xd4>
 800c1d6:	2004      	movs	r0, #4
 800c1d8:	e7d5      	b.n	800c186 <__hexnan+0xe2>

0800c1da <__ascii_mbtowc>:
 800c1da:	b082      	sub	sp, #8
 800c1dc:	b901      	cbnz	r1, 800c1e0 <__ascii_mbtowc+0x6>
 800c1de:	a901      	add	r1, sp, #4
 800c1e0:	b142      	cbz	r2, 800c1f4 <__ascii_mbtowc+0x1a>
 800c1e2:	b14b      	cbz	r3, 800c1f8 <__ascii_mbtowc+0x1e>
 800c1e4:	7813      	ldrb	r3, [r2, #0]
 800c1e6:	600b      	str	r3, [r1, #0]
 800c1e8:	7812      	ldrb	r2, [r2, #0]
 800c1ea:	1e10      	subs	r0, r2, #0
 800c1ec:	bf18      	it	ne
 800c1ee:	2001      	movne	r0, #1
 800c1f0:	b002      	add	sp, #8
 800c1f2:	4770      	bx	lr
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	e7fb      	b.n	800c1f0 <__ascii_mbtowc+0x16>
 800c1f8:	f06f 0001 	mvn.w	r0, #1
 800c1fc:	e7f8      	b.n	800c1f0 <__ascii_mbtowc+0x16>

0800c1fe <_realloc_r>:
 800c1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c202:	4680      	mov	r8, r0
 800c204:	4615      	mov	r5, r2
 800c206:	460c      	mov	r4, r1
 800c208:	b921      	cbnz	r1, 800c214 <_realloc_r+0x16>
 800c20a:	4611      	mov	r1, r2
 800c20c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c210:	f7fd be78 	b.w	8009f04 <_malloc_r>
 800c214:	b92a      	cbnz	r2, 800c222 <_realloc_r+0x24>
 800c216:	f7fd fe03 	bl	8009e20 <_free_r>
 800c21a:	2400      	movs	r4, #0
 800c21c:	4620      	mov	r0, r4
 800c21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c222:	f000 f840 	bl	800c2a6 <_malloc_usable_size_r>
 800c226:	4285      	cmp	r5, r0
 800c228:	4606      	mov	r6, r0
 800c22a:	d802      	bhi.n	800c232 <_realloc_r+0x34>
 800c22c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c230:	d8f4      	bhi.n	800c21c <_realloc_r+0x1e>
 800c232:	4629      	mov	r1, r5
 800c234:	4640      	mov	r0, r8
 800c236:	f7fd fe65 	bl	8009f04 <_malloc_r>
 800c23a:	4607      	mov	r7, r0
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d0ec      	beq.n	800c21a <_realloc_r+0x1c>
 800c240:	42b5      	cmp	r5, r6
 800c242:	462a      	mov	r2, r5
 800c244:	4621      	mov	r1, r4
 800c246:	bf28      	it	cs
 800c248:	4632      	movcs	r2, r6
 800c24a:	f7ff fc47 	bl	800badc <memcpy>
 800c24e:	4621      	mov	r1, r4
 800c250:	4640      	mov	r0, r8
 800c252:	f7fd fde5 	bl	8009e20 <_free_r>
 800c256:	463c      	mov	r4, r7
 800c258:	e7e0      	b.n	800c21c <_realloc_r+0x1e>

0800c25a <__ascii_wctomb>:
 800c25a:	4603      	mov	r3, r0
 800c25c:	4608      	mov	r0, r1
 800c25e:	b141      	cbz	r1, 800c272 <__ascii_wctomb+0x18>
 800c260:	2aff      	cmp	r2, #255	@ 0xff
 800c262:	d904      	bls.n	800c26e <__ascii_wctomb+0x14>
 800c264:	228a      	movs	r2, #138	@ 0x8a
 800c266:	f04f 30ff 	mov.w	r0, #4294967295
 800c26a:	601a      	str	r2, [r3, #0]
 800c26c:	4770      	bx	lr
 800c26e:	2001      	movs	r0, #1
 800c270:	700a      	strb	r2, [r1, #0]
 800c272:	4770      	bx	lr

0800c274 <fiprintf>:
 800c274:	b40e      	push	{r1, r2, r3}
 800c276:	b503      	push	{r0, r1, lr}
 800c278:	4601      	mov	r1, r0
 800c27a:	ab03      	add	r3, sp, #12
 800c27c:	4805      	ldr	r0, [pc, #20]	@ (800c294 <fiprintf+0x20>)
 800c27e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c282:	6800      	ldr	r0, [r0, #0]
 800c284:	9301      	str	r3, [sp, #4]
 800c286:	f000 f83d 	bl	800c304 <_vfiprintf_r>
 800c28a:	b002      	add	sp, #8
 800c28c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c290:	b003      	add	sp, #12
 800c292:	4770      	bx	lr
 800c294:	20000038 	.word	0x20000038

0800c298 <abort>:
 800c298:	2006      	movs	r0, #6
 800c29a:	b508      	push	{r3, lr}
 800c29c:	f000 fa06 	bl	800c6ac <raise>
 800c2a0:	2001      	movs	r0, #1
 800c2a2:	f7f7 ff88 	bl	80041b6 <_exit>

0800c2a6 <_malloc_usable_size_r>:
 800c2a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2aa:	1f18      	subs	r0, r3, #4
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	bfbc      	itt	lt
 800c2b0:	580b      	ldrlt	r3, [r1, r0]
 800c2b2:	18c0      	addlt	r0, r0, r3
 800c2b4:	4770      	bx	lr

0800c2b6 <__sfputc_r>:
 800c2b6:	6893      	ldr	r3, [r2, #8]
 800c2b8:	b410      	push	{r4}
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	6093      	str	r3, [r2, #8]
 800c2c0:	da07      	bge.n	800c2d2 <__sfputc_r+0x1c>
 800c2c2:	6994      	ldr	r4, [r2, #24]
 800c2c4:	42a3      	cmp	r3, r4
 800c2c6:	db01      	blt.n	800c2cc <__sfputc_r+0x16>
 800c2c8:	290a      	cmp	r1, #10
 800c2ca:	d102      	bne.n	800c2d2 <__sfputc_r+0x1c>
 800c2cc:	bc10      	pop	{r4}
 800c2ce:	f000 b931 	b.w	800c534 <__swbuf_r>
 800c2d2:	6813      	ldr	r3, [r2, #0]
 800c2d4:	1c58      	adds	r0, r3, #1
 800c2d6:	6010      	str	r0, [r2, #0]
 800c2d8:	7019      	strb	r1, [r3, #0]
 800c2da:	4608      	mov	r0, r1
 800c2dc:	bc10      	pop	{r4}
 800c2de:	4770      	bx	lr

0800c2e0 <__sfputs_r>:
 800c2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	460f      	mov	r7, r1
 800c2e6:	4614      	mov	r4, r2
 800c2e8:	18d5      	adds	r5, r2, r3
 800c2ea:	42ac      	cmp	r4, r5
 800c2ec:	d101      	bne.n	800c2f2 <__sfputs_r+0x12>
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	e007      	b.n	800c302 <__sfputs_r+0x22>
 800c2f2:	463a      	mov	r2, r7
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2fa:	f7ff ffdc 	bl	800c2b6 <__sfputc_r>
 800c2fe:	1c43      	adds	r3, r0, #1
 800c300:	d1f3      	bne.n	800c2ea <__sfputs_r+0xa>
 800c302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c304 <_vfiprintf_r>:
 800c304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c308:	460d      	mov	r5, r1
 800c30a:	4614      	mov	r4, r2
 800c30c:	4698      	mov	r8, r3
 800c30e:	4606      	mov	r6, r0
 800c310:	b09d      	sub	sp, #116	@ 0x74
 800c312:	b118      	cbz	r0, 800c31c <_vfiprintf_r+0x18>
 800c314:	6a03      	ldr	r3, [r0, #32]
 800c316:	b90b      	cbnz	r3, 800c31c <_vfiprintf_r+0x18>
 800c318:	f7fc fe06 	bl	8008f28 <__sinit>
 800c31c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c31e:	07d9      	lsls	r1, r3, #31
 800c320:	d405      	bmi.n	800c32e <_vfiprintf_r+0x2a>
 800c322:	89ab      	ldrh	r3, [r5, #12]
 800c324:	059a      	lsls	r2, r3, #22
 800c326:	d402      	bmi.n	800c32e <_vfiprintf_r+0x2a>
 800c328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c32a:	f7fc ff14 	bl	8009156 <__retarget_lock_acquire_recursive>
 800c32e:	89ab      	ldrh	r3, [r5, #12]
 800c330:	071b      	lsls	r3, r3, #28
 800c332:	d501      	bpl.n	800c338 <_vfiprintf_r+0x34>
 800c334:	692b      	ldr	r3, [r5, #16]
 800c336:	b99b      	cbnz	r3, 800c360 <_vfiprintf_r+0x5c>
 800c338:	4629      	mov	r1, r5
 800c33a:	4630      	mov	r0, r6
 800c33c:	f000 f938 	bl	800c5b0 <__swsetup_r>
 800c340:	b170      	cbz	r0, 800c360 <_vfiprintf_r+0x5c>
 800c342:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c344:	07dc      	lsls	r4, r3, #31
 800c346:	d504      	bpl.n	800c352 <_vfiprintf_r+0x4e>
 800c348:	f04f 30ff 	mov.w	r0, #4294967295
 800c34c:	b01d      	add	sp, #116	@ 0x74
 800c34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c352:	89ab      	ldrh	r3, [r5, #12]
 800c354:	0598      	lsls	r0, r3, #22
 800c356:	d4f7      	bmi.n	800c348 <_vfiprintf_r+0x44>
 800c358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c35a:	f7fc fefd 	bl	8009158 <__retarget_lock_release_recursive>
 800c35e:	e7f3      	b.n	800c348 <_vfiprintf_r+0x44>
 800c360:	2300      	movs	r3, #0
 800c362:	9309      	str	r3, [sp, #36]	@ 0x24
 800c364:	2320      	movs	r3, #32
 800c366:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c36a:	2330      	movs	r3, #48	@ 0x30
 800c36c:	f04f 0901 	mov.w	r9, #1
 800c370:	f8cd 800c 	str.w	r8, [sp, #12]
 800c374:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c520 <_vfiprintf_r+0x21c>
 800c378:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c37c:	4623      	mov	r3, r4
 800c37e:	469a      	mov	sl, r3
 800c380:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c384:	b10a      	cbz	r2, 800c38a <_vfiprintf_r+0x86>
 800c386:	2a25      	cmp	r2, #37	@ 0x25
 800c388:	d1f9      	bne.n	800c37e <_vfiprintf_r+0x7a>
 800c38a:	ebba 0b04 	subs.w	fp, sl, r4
 800c38e:	d00b      	beq.n	800c3a8 <_vfiprintf_r+0xa4>
 800c390:	465b      	mov	r3, fp
 800c392:	4622      	mov	r2, r4
 800c394:	4629      	mov	r1, r5
 800c396:	4630      	mov	r0, r6
 800c398:	f7ff ffa2 	bl	800c2e0 <__sfputs_r>
 800c39c:	3001      	adds	r0, #1
 800c39e:	f000 80a7 	beq.w	800c4f0 <_vfiprintf_r+0x1ec>
 800c3a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3a4:	445a      	add	r2, fp
 800c3a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f000 809f 	beq.w	800c4f0 <_vfiprintf_r+0x1ec>
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3bc:	f10a 0a01 	add.w	sl, sl, #1
 800c3c0:	9304      	str	r3, [sp, #16]
 800c3c2:	9307      	str	r3, [sp, #28]
 800c3c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3ca:	4654      	mov	r4, sl
 800c3cc:	2205      	movs	r2, #5
 800c3ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3d2:	4853      	ldr	r0, [pc, #332]	@ (800c520 <_vfiprintf_r+0x21c>)
 800c3d4:	f7fc fec1 	bl	800915a <memchr>
 800c3d8:	9a04      	ldr	r2, [sp, #16]
 800c3da:	b9d8      	cbnz	r0, 800c414 <_vfiprintf_r+0x110>
 800c3dc:	06d1      	lsls	r1, r2, #27
 800c3de:	bf44      	itt	mi
 800c3e0:	2320      	movmi	r3, #32
 800c3e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3e6:	0713      	lsls	r3, r2, #28
 800c3e8:	bf44      	itt	mi
 800c3ea:	232b      	movmi	r3, #43	@ 0x2b
 800c3ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c3f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3f6:	d015      	beq.n	800c424 <_vfiprintf_r+0x120>
 800c3f8:	4654      	mov	r4, sl
 800c3fa:	2000      	movs	r0, #0
 800c3fc:	f04f 0c0a 	mov.w	ip, #10
 800c400:	9a07      	ldr	r2, [sp, #28]
 800c402:	4621      	mov	r1, r4
 800c404:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c408:	3b30      	subs	r3, #48	@ 0x30
 800c40a:	2b09      	cmp	r3, #9
 800c40c:	d94b      	bls.n	800c4a6 <_vfiprintf_r+0x1a2>
 800c40e:	b1b0      	cbz	r0, 800c43e <_vfiprintf_r+0x13a>
 800c410:	9207      	str	r2, [sp, #28]
 800c412:	e014      	b.n	800c43e <_vfiprintf_r+0x13a>
 800c414:	eba0 0308 	sub.w	r3, r0, r8
 800c418:	fa09 f303 	lsl.w	r3, r9, r3
 800c41c:	4313      	orrs	r3, r2
 800c41e:	46a2      	mov	sl, r4
 800c420:	9304      	str	r3, [sp, #16]
 800c422:	e7d2      	b.n	800c3ca <_vfiprintf_r+0xc6>
 800c424:	9b03      	ldr	r3, [sp, #12]
 800c426:	1d19      	adds	r1, r3, #4
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	9103      	str	r1, [sp, #12]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	bfbb      	ittet	lt
 800c430:	425b      	neglt	r3, r3
 800c432:	f042 0202 	orrlt.w	r2, r2, #2
 800c436:	9307      	strge	r3, [sp, #28]
 800c438:	9307      	strlt	r3, [sp, #28]
 800c43a:	bfb8      	it	lt
 800c43c:	9204      	strlt	r2, [sp, #16]
 800c43e:	7823      	ldrb	r3, [r4, #0]
 800c440:	2b2e      	cmp	r3, #46	@ 0x2e
 800c442:	d10a      	bne.n	800c45a <_vfiprintf_r+0x156>
 800c444:	7863      	ldrb	r3, [r4, #1]
 800c446:	2b2a      	cmp	r3, #42	@ 0x2a
 800c448:	d132      	bne.n	800c4b0 <_vfiprintf_r+0x1ac>
 800c44a:	9b03      	ldr	r3, [sp, #12]
 800c44c:	3402      	adds	r4, #2
 800c44e:	1d1a      	adds	r2, r3, #4
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	9203      	str	r2, [sp, #12]
 800c454:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c458:	9305      	str	r3, [sp, #20]
 800c45a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c524 <_vfiprintf_r+0x220>
 800c45e:	2203      	movs	r2, #3
 800c460:	4650      	mov	r0, sl
 800c462:	7821      	ldrb	r1, [r4, #0]
 800c464:	f7fc fe79 	bl	800915a <memchr>
 800c468:	b138      	cbz	r0, 800c47a <_vfiprintf_r+0x176>
 800c46a:	2240      	movs	r2, #64	@ 0x40
 800c46c:	9b04      	ldr	r3, [sp, #16]
 800c46e:	eba0 000a 	sub.w	r0, r0, sl
 800c472:	4082      	lsls	r2, r0
 800c474:	4313      	orrs	r3, r2
 800c476:	3401      	adds	r4, #1
 800c478:	9304      	str	r3, [sp, #16]
 800c47a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c47e:	2206      	movs	r2, #6
 800c480:	4829      	ldr	r0, [pc, #164]	@ (800c528 <_vfiprintf_r+0x224>)
 800c482:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c486:	f7fc fe68 	bl	800915a <memchr>
 800c48a:	2800      	cmp	r0, #0
 800c48c:	d03f      	beq.n	800c50e <_vfiprintf_r+0x20a>
 800c48e:	4b27      	ldr	r3, [pc, #156]	@ (800c52c <_vfiprintf_r+0x228>)
 800c490:	bb1b      	cbnz	r3, 800c4da <_vfiprintf_r+0x1d6>
 800c492:	9b03      	ldr	r3, [sp, #12]
 800c494:	3307      	adds	r3, #7
 800c496:	f023 0307 	bic.w	r3, r3, #7
 800c49a:	3308      	adds	r3, #8
 800c49c:	9303      	str	r3, [sp, #12]
 800c49e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4a0:	443b      	add	r3, r7
 800c4a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4a4:	e76a      	b.n	800c37c <_vfiprintf_r+0x78>
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	2001      	movs	r0, #1
 800c4aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4ae:	e7a8      	b.n	800c402 <_vfiprintf_r+0xfe>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	f04f 0c0a 	mov.w	ip, #10
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	3401      	adds	r4, #1
 800c4ba:	9305      	str	r3, [sp, #20]
 800c4bc:	4620      	mov	r0, r4
 800c4be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4c2:	3a30      	subs	r2, #48	@ 0x30
 800c4c4:	2a09      	cmp	r2, #9
 800c4c6:	d903      	bls.n	800c4d0 <_vfiprintf_r+0x1cc>
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d0c6      	beq.n	800c45a <_vfiprintf_r+0x156>
 800c4cc:	9105      	str	r1, [sp, #20]
 800c4ce:	e7c4      	b.n	800c45a <_vfiprintf_r+0x156>
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4d8:	e7f0      	b.n	800c4bc <_vfiprintf_r+0x1b8>
 800c4da:	ab03      	add	r3, sp, #12
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	462a      	mov	r2, r5
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	4b13      	ldr	r3, [pc, #76]	@ (800c530 <_vfiprintf_r+0x22c>)
 800c4e4:	a904      	add	r1, sp, #16
 800c4e6:	f7fb fec5 	bl	8008274 <_printf_float>
 800c4ea:	4607      	mov	r7, r0
 800c4ec:	1c78      	adds	r0, r7, #1
 800c4ee:	d1d6      	bne.n	800c49e <_vfiprintf_r+0x19a>
 800c4f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4f2:	07d9      	lsls	r1, r3, #31
 800c4f4:	d405      	bmi.n	800c502 <_vfiprintf_r+0x1fe>
 800c4f6:	89ab      	ldrh	r3, [r5, #12]
 800c4f8:	059a      	lsls	r2, r3, #22
 800c4fa:	d402      	bmi.n	800c502 <_vfiprintf_r+0x1fe>
 800c4fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4fe:	f7fc fe2b 	bl	8009158 <__retarget_lock_release_recursive>
 800c502:	89ab      	ldrh	r3, [r5, #12]
 800c504:	065b      	lsls	r3, r3, #25
 800c506:	f53f af1f 	bmi.w	800c348 <_vfiprintf_r+0x44>
 800c50a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c50c:	e71e      	b.n	800c34c <_vfiprintf_r+0x48>
 800c50e:	ab03      	add	r3, sp, #12
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	462a      	mov	r2, r5
 800c514:	4630      	mov	r0, r6
 800c516:	4b06      	ldr	r3, [pc, #24]	@ (800c530 <_vfiprintf_r+0x22c>)
 800c518:	a904      	add	r1, sp, #16
 800c51a:	f7fc f949 	bl	80087b0 <_printf_i>
 800c51e:	e7e4      	b.n	800c4ea <_vfiprintf_r+0x1e6>
 800c520:	0800e509 	.word	0x0800e509
 800c524:	0800e50f 	.word	0x0800e50f
 800c528:	0800e513 	.word	0x0800e513
 800c52c:	08008275 	.word	0x08008275
 800c530:	0800c2e1 	.word	0x0800c2e1

0800c534 <__swbuf_r>:
 800c534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c536:	460e      	mov	r6, r1
 800c538:	4614      	mov	r4, r2
 800c53a:	4605      	mov	r5, r0
 800c53c:	b118      	cbz	r0, 800c546 <__swbuf_r+0x12>
 800c53e:	6a03      	ldr	r3, [r0, #32]
 800c540:	b90b      	cbnz	r3, 800c546 <__swbuf_r+0x12>
 800c542:	f7fc fcf1 	bl	8008f28 <__sinit>
 800c546:	69a3      	ldr	r3, [r4, #24]
 800c548:	60a3      	str	r3, [r4, #8]
 800c54a:	89a3      	ldrh	r3, [r4, #12]
 800c54c:	071a      	lsls	r2, r3, #28
 800c54e:	d501      	bpl.n	800c554 <__swbuf_r+0x20>
 800c550:	6923      	ldr	r3, [r4, #16]
 800c552:	b943      	cbnz	r3, 800c566 <__swbuf_r+0x32>
 800c554:	4621      	mov	r1, r4
 800c556:	4628      	mov	r0, r5
 800c558:	f000 f82a 	bl	800c5b0 <__swsetup_r>
 800c55c:	b118      	cbz	r0, 800c566 <__swbuf_r+0x32>
 800c55e:	f04f 37ff 	mov.w	r7, #4294967295
 800c562:	4638      	mov	r0, r7
 800c564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c566:	6823      	ldr	r3, [r4, #0]
 800c568:	6922      	ldr	r2, [r4, #16]
 800c56a:	b2f6      	uxtb	r6, r6
 800c56c:	1a98      	subs	r0, r3, r2
 800c56e:	6963      	ldr	r3, [r4, #20]
 800c570:	4637      	mov	r7, r6
 800c572:	4283      	cmp	r3, r0
 800c574:	dc05      	bgt.n	800c582 <__swbuf_r+0x4e>
 800c576:	4621      	mov	r1, r4
 800c578:	4628      	mov	r0, r5
 800c57a:	f7ff fa4b 	bl	800ba14 <_fflush_r>
 800c57e:	2800      	cmp	r0, #0
 800c580:	d1ed      	bne.n	800c55e <__swbuf_r+0x2a>
 800c582:	68a3      	ldr	r3, [r4, #8]
 800c584:	3b01      	subs	r3, #1
 800c586:	60a3      	str	r3, [r4, #8]
 800c588:	6823      	ldr	r3, [r4, #0]
 800c58a:	1c5a      	adds	r2, r3, #1
 800c58c:	6022      	str	r2, [r4, #0]
 800c58e:	701e      	strb	r6, [r3, #0]
 800c590:	6962      	ldr	r2, [r4, #20]
 800c592:	1c43      	adds	r3, r0, #1
 800c594:	429a      	cmp	r2, r3
 800c596:	d004      	beq.n	800c5a2 <__swbuf_r+0x6e>
 800c598:	89a3      	ldrh	r3, [r4, #12]
 800c59a:	07db      	lsls	r3, r3, #31
 800c59c:	d5e1      	bpl.n	800c562 <__swbuf_r+0x2e>
 800c59e:	2e0a      	cmp	r6, #10
 800c5a0:	d1df      	bne.n	800c562 <__swbuf_r+0x2e>
 800c5a2:	4621      	mov	r1, r4
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	f7ff fa35 	bl	800ba14 <_fflush_r>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	d0d9      	beq.n	800c562 <__swbuf_r+0x2e>
 800c5ae:	e7d6      	b.n	800c55e <__swbuf_r+0x2a>

0800c5b0 <__swsetup_r>:
 800c5b0:	b538      	push	{r3, r4, r5, lr}
 800c5b2:	4b29      	ldr	r3, [pc, #164]	@ (800c658 <__swsetup_r+0xa8>)
 800c5b4:	4605      	mov	r5, r0
 800c5b6:	6818      	ldr	r0, [r3, #0]
 800c5b8:	460c      	mov	r4, r1
 800c5ba:	b118      	cbz	r0, 800c5c4 <__swsetup_r+0x14>
 800c5bc:	6a03      	ldr	r3, [r0, #32]
 800c5be:	b90b      	cbnz	r3, 800c5c4 <__swsetup_r+0x14>
 800c5c0:	f7fc fcb2 	bl	8008f28 <__sinit>
 800c5c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5c8:	0719      	lsls	r1, r3, #28
 800c5ca:	d422      	bmi.n	800c612 <__swsetup_r+0x62>
 800c5cc:	06da      	lsls	r2, r3, #27
 800c5ce:	d407      	bmi.n	800c5e0 <__swsetup_r+0x30>
 800c5d0:	2209      	movs	r2, #9
 800c5d2:	602a      	str	r2, [r5, #0]
 800c5d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5dc:	81a3      	strh	r3, [r4, #12]
 800c5de:	e033      	b.n	800c648 <__swsetup_r+0x98>
 800c5e0:	0758      	lsls	r0, r3, #29
 800c5e2:	d512      	bpl.n	800c60a <__swsetup_r+0x5a>
 800c5e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5e6:	b141      	cbz	r1, 800c5fa <__swsetup_r+0x4a>
 800c5e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5ec:	4299      	cmp	r1, r3
 800c5ee:	d002      	beq.n	800c5f6 <__swsetup_r+0x46>
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	f7fd fc15 	bl	8009e20 <_free_r>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c5fa:	89a3      	ldrh	r3, [r4, #12]
 800c5fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c600:	81a3      	strh	r3, [r4, #12]
 800c602:	2300      	movs	r3, #0
 800c604:	6063      	str	r3, [r4, #4]
 800c606:	6923      	ldr	r3, [r4, #16]
 800c608:	6023      	str	r3, [r4, #0]
 800c60a:	89a3      	ldrh	r3, [r4, #12]
 800c60c:	f043 0308 	orr.w	r3, r3, #8
 800c610:	81a3      	strh	r3, [r4, #12]
 800c612:	6923      	ldr	r3, [r4, #16]
 800c614:	b94b      	cbnz	r3, 800c62a <__swsetup_r+0x7a>
 800c616:	89a3      	ldrh	r3, [r4, #12]
 800c618:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c61c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c620:	d003      	beq.n	800c62a <__swsetup_r+0x7a>
 800c622:	4621      	mov	r1, r4
 800c624:	4628      	mov	r0, r5
 800c626:	f000 f882 	bl	800c72e <__smakebuf_r>
 800c62a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c62e:	f013 0201 	ands.w	r2, r3, #1
 800c632:	d00a      	beq.n	800c64a <__swsetup_r+0x9a>
 800c634:	2200      	movs	r2, #0
 800c636:	60a2      	str	r2, [r4, #8]
 800c638:	6962      	ldr	r2, [r4, #20]
 800c63a:	4252      	negs	r2, r2
 800c63c:	61a2      	str	r2, [r4, #24]
 800c63e:	6922      	ldr	r2, [r4, #16]
 800c640:	b942      	cbnz	r2, 800c654 <__swsetup_r+0xa4>
 800c642:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c646:	d1c5      	bne.n	800c5d4 <__swsetup_r+0x24>
 800c648:	bd38      	pop	{r3, r4, r5, pc}
 800c64a:	0799      	lsls	r1, r3, #30
 800c64c:	bf58      	it	pl
 800c64e:	6962      	ldrpl	r2, [r4, #20]
 800c650:	60a2      	str	r2, [r4, #8]
 800c652:	e7f4      	b.n	800c63e <__swsetup_r+0x8e>
 800c654:	2000      	movs	r0, #0
 800c656:	e7f7      	b.n	800c648 <__swsetup_r+0x98>
 800c658:	20000038 	.word	0x20000038

0800c65c <_raise_r>:
 800c65c:	291f      	cmp	r1, #31
 800c65e:	b538      	push	{r3, r4, r5, lr}
 800c660:	4605      	mov	r5, r0
 800c662:	460c      	mov	r4, r1
 800c664:	d904      	bls.n	800c670 <_raise_r+0x14>
 800c666:	2316      	movs	r3, #22
 800c668:	6003      	str	r3, [r0, #0]
 800c66a:	f04f 30ff 	mov.w	r0, #4294967295
 800c66e:	bd38      	pop	{r3, r4, r5, pc}
 800c670:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c672:	b112      	cbz	r2, 800c67a <_raise_r+0x1e>
 800c674:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c678:	b94b      	cbnz	r3, 800c68e <_raise_r+0x32>
 800c67a:	4628      	mov	r0, r5
 800c67c:	f000 f830 	bl	800c6e0 <_getpid_r>
 800c680:	4622      	mov	r2, r4
 800c682:	4601      	mov	r1, r0
 800c684:	4628      	mov	r0, r5
 800c686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c68a:	f000 b817 	b.w	800c6bc <_kill_r>
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d00a      	beq.n	800c6a8 <_raise_r+0x4c>
 800c692:	1c59      	adds	r1, r3, #1
 800c694:	d103      	bne.n	800c69e <_raise_r+0x42>
 800c696:	2316      	movs	r3, #22
 800c698:	6003      	str	r3, [r0, #0]
 800c69a:	2001      	movs	r0, #1
 800c69c:	e7e7      	b.n	800c66e <_raise_r+0x12>
 800c69e:	2100      	movs	r1, #0
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c6a6:	4798      	blx	r3
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	e7e0      	b.n	800c66e <_raise_r+0x12>

0800c6ac <raise>:
 800c6ac:	4b02      	ldr	r3, [pc, #8]	@ (800c6b8 <raise+0xc>)
 800c6ae:	4601      	mov	r1, r0
 800c6b0:	6818      	ldr	r0, [r3, #0]
 800c6b2:	f7ff bfd3 	b.w	800c65c <_raise_r>
 800c6b6:	bf00      	nop
 800c6b8:	20000038 	.word	0x20000038

0800c6bc <_kill_r>:
 800c6bc:	b538      	push	{r3, r4, r5, lr}
 800c6be:	2300      	movs	r3, #0
 800c6c0:	4d06      	ldr	r5, [pc, #24]	@ (800c6dc <_kill_r+0x20>)
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	4608      	mov	r0, r1
 800c6c6:	4611      	mov	r1, r2
 800c6c8:	602b      	str	r3, [r5, #0]
 800c6ca:	f7f7 fd64 	bl	8004196 <_kill>
 800c6ce:	1c43      	adds	r3, r0, #1
 800c6d0:	d102      	bne.n	800c6d8 <_kill_r+0x1c>
 800c6d2:	682b      	ldr	r3, [r5, #0]
 800c6d4:	b103      	cbz	r3, 800c6d8 <_kill_r+0x1c>
 800c6d6:	6023      	str	r3, [r4, #0]
 800c6d8:	bd38      	pop	{r3, r4, r5, pc}
 800c6da:	bf00      	nop
 800c6dc:	20000758 	.word	0x20000758

0800c6e0 <_getpid_r>:
 800c6e0:	f7f7 bd52 	b.w	8004188 <_getpid>

0800c6e4 <__swhatbuf_r>:
 800c6e4:	b570      	push	{r4, r5, r6, lr}
 800c6e6:	460c      	mov	r4, r1
 800c6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ec:	4615      	mov	r5, r2
 800c6ee:	2900      	cmp	r1, #0
 800c6f0:	461e      	mov	r6, r3
 800c6f2:	b096      	sub	sp, #88	@ 0x58
 800c6f4:	da0c      	bge.n	800c710 <__swhatbuf_r+0x2c>
 800c6f6:	89a3      	ldrh	r3, [r4, #12]
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c6fe:	bf14      	ite	ne
 800c700:	2340      	movne	r3, #64	@ 0x40
 800c702:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c706:	2000      	movs	r0, #0
 800c708:	6031      	str	r1, [r6, #0]
 800c70a:	602b      	str	r3, [r5, #0]
 800c70c:	b016      	add	sp, #88	@ 0x58
 800c70e:	bd70      	pop	{r4, r5, r6, pc}
 800c710:	466a      	mov	r2, sp
 800c712:	f000 f849 	bl	800c7a8 <_fstat_r>
 800c716:	2800      	cmp	r0, #0
 800c718:	dbed      	blt.n	800c6f6 <__swhatbuf_r+0x12>
 800c71a:	9901      	ldr	r1, [sp, #4]
 800c71c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c720:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c724:	4259      	negs	r1, r3
 800c726:	4159      	adcs	r1, r3
 800c728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c72c:	e7eb      	b.n	800c706 <__swhatbuf_r+0x22>

0800c72e <__smakebuf_r>:
 800c72e:	898b      	ldrh	r3, [r1, #12]
 800c730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c732:	079d      	lsls	r5, r3, #30
 800c734:	4606      	mov	r6, r0
 800c736:	460c      	mov	r4, r1
 800c738:	d507      	bpl.n	800c74a <__smakebuf_r+0x1c>
 800c73a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c73e:	6023      	str	r3, [r4, #0]
 800c740:	6123      	str	r3, [r4, #16]
 800c742:	2301      	movs	r3, #1
 800c744:	6163      	str	r3, [r4, #20]
 800c746:	b003      	add	sp, #12
 800c748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c74a:	466a      	mov	r2, sp
 800c74c:	ab01      	add	r3, sp, #4
 800c74e:	f7ff ffc9 	bl	800c6e4 <__swhatbuf_r>
 800c752:	9f00      	ldr	r7, [sp, #0]
 800c754:	4605      	mov	r5, r0
 800c756:	4639      	mov	r1, r7
 800c758:	4630      	mov	r0, r6
 800c75a:	f7fd fbd3 	bl	8009f04 <_malloc_r>
 800c75e:	b948      	cbnz	r0, 800c774 <__smakebuf_r+0x46>
 800c760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c764:	059a      	lsls	r2, r3, #22
 800c766:	d4ee      	bmi.n	800c746 <__smakebuf_r+0x18>
 800c768:	f023 0303 	bic.w	r3, r3, #3
 800c76c:	f043 0302 	orr.w	r3, r3, #2
 800c770:	81a3      	strh	r3, [r4, #12]
 800c772:	e7e2      	b.n	800c73a <__smakebuf_r+0xc>
 800c774:	89a3      	ldrh	r3, [r4, #12]
 800c776:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c77a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c77e:	81a3      	strh	r3, [r4, #12]
 800c780:	9b01      	ldr	r3, [sp, #4]
 800c782:	6020      	str	r0, [r4, #0]
 800c784:	b15b      	cbz	r3, 800c79e <__smakebuf_r+0x70>
 800c786:	4630      	mov	r0, r6
 800c788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c78c:	f000 f81e 	bl	800c7cc <_isatty_r>
 800c790:	b128      	cbz	r0, 800c79e <__smakebuf_r+0x70>
 800c792:	89a3      	ldrh	r3, [r4, #12]
 800c794:	f023 0303 	bic.w	r3, r3, #3
 800c798:	f043 0301 	orr.w	r3, r3, #1
 800c79c:	81a3      	strh	r3, [r4, #12]
 800c79e:	89a3      	ldrh	r3, [r4, #12]
 800c7a0:	431d      	orrs	r5, r3
 800c7a2:	81a5      	strh	r5, [r4, #12]
 800c7a4:	e7cf      	b.n	800c746 <__smakebuf_r+0x18>
	...

0800c7a8 <_fstat_r>:
 800c7a8:	b538      	push	{r3, r4, r5, lr}
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	4d06      	ldr	r5, [pc, #24]	@ (800c7c8 <_fstat_r+0x20>)
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	4608      	mov	r0, r1
 800c7b2:	4611      	mov	r1, r2
 800c7b4:	602b      	str	r3, [r5, #0]
 800c7b6:	f7f7 fd31 	bl	800421c <_fstat>
 800c7ba:	1c43      	adds	r3, r0, #1
 800c7bc:	d102      	bne.n	800c7c4 <_fstat_r+0x1c>
 800c7be:	682b      	ldr	r3, [r5, #0]
 800c7c0:	b103      	cbz	r3, 800c7c4 <_fstat_r+0x1c>
 800c7c2:	6023      	str	r3, [r4, #0]
 800c7c4:	bd38      	pop	{r3, r4, r5, pc}
 800c7c6:	bf00      	nop
 800c7c8:	20000758 	.word	0x20000758

0800c7cc <_isatty_r>:
 800c7cc:	b538      	push	{r3, r4, r5, lr}
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	4d05      	ldr	r5, [pc, #20]	@ (800c7e8 <_isatty_r+0x1c>)
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	4608      	mov	r0, r1
 800c7d6:	602b      	str	r3, [r5, #0]
 800c7d8:	f7f7 fd2f 	bl	800423a <_isatty>
 800c7dc:	1c43      	adds	r3, r0, #1
 800c7de:	d102      	bne.n	800c7e6 <_isatty_r+0x1a>
 800c7e0:	682b      	ldr	r3, [r5, #0]
 800c7e2:	b103      	cbz	r3, 800c7e6 <_isatty_r+0x1a>
 800c7e4:	6023      	str	r3, [r4, #0]
 800c7e6:	bd38      	pop	{r3, r4, r5, pc}
 800c7e8:	20000758 	.word	0x20000758

0800c7ec <atan2>:
 800c7ec:	f000 b918 	b.w	800ca20 <__ieee754_atan2>

0800c7f0 <fmod>:
 800c7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7f4:	4680      	mov	r8, r0
 800c7f6:	4689      	mov	r9, r1
 800c7f8:	4616      	mov	r6, r2
 800c7fa:	461f      	mov	r7, r3
 800c7fc:	f000 f9e2 	bl	800cbc4 <__ieee754_fmod>
 800c800:	4632      	mov	r2, r6
 800c802:	4604      	mov	r4, r0
 800c804:	460d      	mov	r5, r1
 800c806:	463b      	mov	r3, r7
 800c808:	4640      	mov	r0, r8
 800c80a:	4649      	mov	r1, r9
 800c80c:	f7f4 f8fe 	bl	8000a0c <__aeabi_dcmpun>
 800c810:	b990      	cbnz	r0, 800c838 <fmod+0x48>
 800c812:	2200      	movs	r2, #0
 800c814:	2300      	movs	r3, #0
 800c816:	4630      	mov	r0, r6
 800c818:	4639      	mov	r1, r7
 800c81a:	f7f4 f8c5 	bl	80009a8 <__aeabi_dcmpeq>
 800c81e:	b158      	cbz	r0, 800c838 <fmod+0x48>
 800c820:	f7fc fc6e 	bl	8009100 <__errno>
 800c824:	2321      	movs	r3, #33	@ 0x21
 800c826:	2200      	movs	r2, #0
 800c828:	6003      	str	r3, [r0, #0]
 800c82a:	2300      	movs	r3, #0
 800c82c:	4610      	mov	r0, r2
 800c82e:	4619      	mov	r1, r3
 800c830:	f7f3 ff7c 	bl	800072c <__aeabi_ddiv>
 800c834:	4604      	mov	r4, r0
 800c836:	460d      	mov	r5, r1
 800c838:	4620      	mov	r0, r4
 800c83a:	4629      	mov	r1, r5
 800c83c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c840 <pow>:
 800c840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c844:	4614      	mov	r4, r2
 800c846:	461d      	mov	r5, r3
 800c848:	4680      	mov	r8, r0
 800c84a:	4689      	mov	r9, r1
 800c84c:	f000 fac0 	bl	800cdd0 <__ieee754_pow>
 800c850:	4622      	mov	r2, r4
 800c852:	4606      	mov	r6, r0
 800c854:	460f      	mov	r7, r1
 800c856:	462b      	mov	r3, r5
 800c858:	4620      	mov	r0, r4
 800c85a:	4629      	mov	r1, r5
 800c85c:	f7f4 f8d6 	bl	8000a0c <__aeabi_dcmpun>
 800c860:	bbc8      	cbnz	r0, 800c8d6 <pow+0x96>
 800c862:	2200      	movs	r2, #0
 800c864:	2300      	movs	r3, #0
 800c866:	4640      	mov	r0, r8
 800c868:	4649      	mov	r1, r9
 800c86a:	f7f4 f89d 	bl	80009a8 <__aeabi_dcmpeq>
 800c86e:	b1b8      	cbz	r0, 800c8a0 <pow+0x60>
 800c870:	2200      	movs	r2, #0
 800c872:	2300      	movs	r3, #0
 800c874:	4620      	mov	r0, r4
 800c876:	4629      	mov	r1, r5
 800c878:	f7f4 f896 	bl	80009a8 <__aeabi_dcmpeq>
 800c87c:	2800      	cmp	r0, #0
 800c87e:	d141      	bne.n	800c904 <pow+0xc4>
 800c880:	4620      	mov	r0, r4
 800c882:	4629      	mov	r1, r5
 800c884:	f000 f844 	bl	800c910 <finite>
 800c888:	b328      	cbz	r0, 800c8d6 <pow+0x96>
 800c88a:	2200      	movs	r2, #0
 800c88c:	2300      	movs	r3, #0
 800c88e:	4620      	mov	r0, r4
 800c890:	4629      	mov	r1, r5
 800c892:	f7f4 f893 	bl	80009bc <__aeabi_dcmplt>
 800c896:	b1f0      	cbz	r0, 800c8d6 <pow+0x96>
 800c898:	f7fc fc32 	bl	8009100 <__errno>
 800c89c:	2322      	movs	r3, #34	@ 0x22
 800c89e:	e019      	b.n	800c8d4 <pow+0x94>
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	4639      	mov	r1, r7
 800c8a4:	f000 f834 	bl	800c910 <finite>
 800c8a8:	b9c8      	cbnz	r0, 800c8de <pow+0x9e>
 800c8aa:	4640      	mov	r0, r8
 800c8ac:	4649      	mov	r1, r9
 800c8ae:	f000 f82f 	bl	800c910 <finite>
 800c8b2:	b1a0      	cbz	r0, 800c8de <pow+0x9e>
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	4629      	mov	r1, r5
 800c8b8:	f000 f82a 	bl	800c910 <finite>
 800c8bc:	b178      	cbz	r0, 800c8de <pow+0x9e>
 800c8be:	4632      	mov	r2, r6
 800c8c0:	463b      	mov	r3, r7
 800c8c2:	4630      	mov	r0, r6
 800c8c4:	4639      	mov	r1, r7
 800c8c6:	f7f4 f8a1 	bl	8000a0c <__aeabi_dcmpun>
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	d0e4      	beq.n	800c898 <pow+0x58>
 800c8ce:	f7fc fc17 	bl	8009100 <__errno>
 800c8d2:	2321      	movs	r3, #33	@ 0x21
 800c8d4:	6003      	str	r3, [r0, #0]
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	4639      	mov	r1, r7
 800c8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8de:	2200      	movs	r2, #0
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	4639      	mov	r1, r7
 800c8e6:	f7f4 f85f 	bl	80009a8 <__aeabi_dcmpeq>
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	d0f3      	beq.n	800c8d6 <pow+0x96>
 800c8ee:	4640      	mov	r0, r8
 800c8f0:	4649      	mov	r1, r9
 800c8f2:	f000 f80d 	bl	800c910 <finite>
 800c8f6:	2800      	cmp	r0, #0
 800c8f8:	d0ed      	beq.n	800c8d6 <pow+0x96>
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	4629      	mov	r1, r5
 800c8fe:	f000 f807 	bl	800c910 <finite>
 800c902:	e7c8      	b.n	800c896 <pow+0x56>
 800c904:	2600      	movs	r6, #0
 800c906:	4f01      	ldr	r7, [pc, #4]	@ (800c90c <pow+0xcc>)
 800c908:	e7e5      	b.n	800c8d6 <pow+0x96>
 800c90a:	bf00      	nop
 800c90c:	3ff00000 	.word	0x3ff00000

0800c910 <finite>:
 800c910:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800c914:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800c918:	0fc0      	lsrs	r0, r0, #31
 800c91a:	4770      	bx	lr
 800c91c:	0000      	movs	r0, r0
	...

0800c920 <floor>:
 800c920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c924:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c928:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800c92c:	2e13      	cmp	r6, #19
 800c92e:	4602      	mov	r2, r0
 800c930:	460b      	mov	r3, r1
 800c932:	460c      	mov	r4, r1
 800c934:	4605      	mov	r5, r0
 800c936:	4680      	mov	r8, r0
 800c938:	dc35      	bgt.n	800c9a6 <floor+0x86>
 800c93a:	2e00      	cmp	r6, #0
 800c93c:	da17      	bge.n	800c96e <floor+0x4e>
 800c93e:	a334      	add	r3, pc, #208	@ (adr r3, 800ca10 <floor+0xf0>)
 800c940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c944:	f7f3 fc12 	bl	800016c <__adddf3>
 800c948:	2200      	movs	r2, #0
 800c94a:	2300      	movs	r3, #0
 800c94c:	f7f4 f854 	bl	80009f8 <__aeabi_dcmpgt>
 800c950:	b150      	cbz	r0, 800c968 <floor+0x48>
 800c952:	2c00      	cmp	r4, #0
 800c954:	da57      	bge.n	800ca06 <floor+0xe6>
 800c956:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c95a:	432c      	orrs	r4, r5
 800c95c:	2500      	movs	r5, #0
 800c95e:	42ac      	cmp	r4, r5
 800c960:	4c2d      	ldr	r4, [pc, #180]	@ (800ca18 <floor+0xf8>)
 800c962:	bf08      	it	eq
 800c964:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c968:	4623      	mov	r3, r4
 800c96a:	462a      	mov	r2, r5
 800c96c:	e024      	b.n	800c9b8 <floor+0x98>
 800c96e:	4f2b      	ldr	r7, [pc, #172]	@ (800ca1c <floor+0xfc>)
 800c970:	4137      	asrs	r7, r6
 800c972:	ea01 0c07 	and.w	ip, r1, r7
 800c976:	ea5c 0c00 	orrs.w	ip, ip, r0
 800c97a:	d01d      	beq.n	800c9b8 <floor+0x98>
 800c97c:	a324      	add	r3, pc, #144	@ (adr r3, 800ca10 <floor+0xf0>)
 800c97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c982:	f7f3 fbf3 	bl	800016c <__adddf3>
 800c986:	2200      	movs	r2, #0
 800c988:	2300      	movs	r3, #0
 800c98a:	f7f4 f835 	bl	80009f8 <__aeabi_dcmpgt>
 800c98e:	2800      	cmp	r0, #0
 800c990:	d0ea      	beq.n	800c968 <floor+0x48>
 800c992:	2c00      	cmp	r4, #0
 800c994:	bfbe      	ittt	lt
 800c996:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c99a:	4133      	asrlt	r3, r6
 800c99c:	18e4      	addlt	r4, r4, r3
 800c99e:	2500      	movs	r5, #0
 800c9a0:	ea24 0407 	bic.w	r4, r4, r7
 800c9a4:	e7e0      	b.n	800c968 <floor+0x48>
 800c9a6:	2e33      	cmp	r6, #51	@ 0x33
 800c9a8:	dd0a      	ble.n	800c9c0 <floor+0xa0>
 800c9aa:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c9ae:	d103      	bne.n	800c9b8 <floor+0x98>
 800c9b0:	f7f3 fbdc 	bl	800016c <__adddf3>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	4610      	mov	r0, r2
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9c0:	f04f 3cff 	mov.w	ip, #4294967295
 800c9c4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800c9c8:	fa2c f707 	lsr.w	r7, ip, r7
 800c9cc:	4207      	tst	r7, r0
 800c9ce:	d0f3      	beq.n	800c9b8 <floor+0x98>
 800c9d0:	a30f      	add	r3, pc, #60	@ (adr r3, 800ca10 <floor+0xf0>)
 800c9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d6:	f7f3 fbc9 	bl	800016c <__adddf3>
 800c9da:	2200      	movs	r2, #0
 800c9dc:	2300      	movs	r3, #0
 800c9de:	f7f4 f80b 	bl	80009f8 <__aeabi_dcmpgt>
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	d0c0      	beq.n	800c968 <floor+0x48>
 800c9e6:	2c00      	cmp	r4, #0
 800c9e8:	da0a      	bge.n	800ca00 <floor+0xe0>
 800c9ea:	2e14      	cmp	r6, #20
 800c9ec:	d101      	bne.n	800c9f2 <floor+0xd2>
 800c9ee:	3401      	adds	r4, #1
 800c9f0:	e006      	b.n	800ca00 <floor+0xe0>
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c9f8:	40b3      	lsls	r3, r6
 800c9fa:	441d      	add	r5, r3
 800c9fc:	4545      	cmp	r5, r8
 800c9fe:	d3f6      	bcc.n	800c9ee <floor+0xce>
 800ca00:	ea25 0507 	bic.w	r5, r5, r7
 800ca04:	e7b0      	b.n	800c968 <floor+0x48>
 800ca06:	2500      	movs	r5, #0
 800ca08:	462c      	mov	r4, r5
 800ca0a:	e7ad      	b.n	800c968 <floor+0x48>
 800ca0c:	f3af 8000 	nop.w
 800ca10:	8800759c 	.word	0x8800759c
 800ca14:	7e37e43c 	.word	0x7e37e43c
 800ca18:	bff00000 	.word	0xbff00000
 800ca1c:	000fffff 	.word	0x000fffff

0800ca20 <__ieee754_atan2>:
 800ca20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca24:	4617      	mov	r7, r2
 800ca26:	4690      	mov	r8, r2
 800ca28:	4699      	mov	r9, r3
 800ca2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ca2e:	427b      	negs	r3, r7
 800ca30:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800cbb8 <__ieee754_atan2+0x198>
 800ca34:	433b      	orrs	r3, r7
 800ca36:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ca3a:	4553      	cmp	r3, sl
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	460d      	mov	r5, r1
 800ca40:	d809      	bhi.n	800ca56 <__ieee754_atan2+0x36>
 800ca42:	4246      	negs	r6, r0
 800ca44:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ca48:	4306      	orrs	r6, r0
 800ca4a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800ca4e:	4556      	cmp	r6, sl
 800ca50:	468e      	mov	lr, r1
 800ca52:	4683      	mov	fp, r0
 800ca54:	d908      	bls.n	800ca68 <__ieee754_atan2+0x48>
 800ca56:	4642      	mov	r2, r8
 800ca58:	464b      	mov	r3, r9
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	4629      	mov	r1, r5
 800ca5e:	f7f3 fb85 	bl	800016c <__adddf3>
 800ca62:	4604      	mov	r4, r0
 800ca64:	460d      	mov	r5, r1
 800ca66:	e016      	b.n	800ca96 <__ieee754_atan2+0x76>
 800ca68:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800ca6c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800ca70:	433e      	orrs	r6, r7
 800ca72:	d103      	bne.n	800ca7c <__ieee754_atan2+0x5c>
 800ca74:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca78:	f000 bed2 	b.w	800d820 <atan>
 800ca7c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800ca80:	f006 0602 	and.w	r6, r6, #2
 800ca84:	ea53 0b0b 	orrs.w	fp, r3, fp
 800ca88:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800ca8c:	d107      	bne.n	800ca9e <__ieee754_atan2+0x7e>
 800ca8e:	2e02      	cmp	r6, #2
 800ca90:	d064      	beq.n	800cb5c <__ieee754_atan2+0x13c>
 800ca92:	2e03      	cmp	r6, #3
 800ca94:	d066      	beq.n	800cb64 <__ieee754_atan2+0x144>
 800ca96:	4620      	mov	r0, r4
 800ca98:	4629      	mov	r1, r5
 800ca9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca9e:	4317      	orrs	r7, r2
 800caa0:	d106      	bne.n	800cab0 <__ieee754_atan2+0x90>
 800caa2:	f1be 0f00 	cmp.w	lr, #0
 800caa6:	da68      	bge.n	800cb7a <__ieee754_atan2+0x15a>
 800caa8:	a537      	add	r5, pc, #220	@ (adr r5, 800cb88 <__ieee754_atan2+0x168>)
 800caaa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800caae:	e7f2      	b.n	800ca96 <__ieee754_atan2+0x76>
 800cab0:	4552      	cmp	r2, sl
 800cab2:	d10f      	bne.n	800cad4 <__ieee754_atan2+0xb4>
 800cab4:	4293      	cmp	r3, r2
 800cab6:	f106 36ff 	add.w	r6, r6, #4294967295
 800caba:	d107      	bne.n	800cacc <__ieee754_atan2+0xac>
 800cabc:	2e02      	cmp	r6, #2
 800cabe:	d855      	bhi.n	800cb6c <__ieee754_atan2+0x14c>
 800cac0:	4b3e      	ldr	r3, [pc, #248]	@ (800cbbc <__ieee754_atan2+0x19c>)
 800cac2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cac6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800caca:	e7e4      	b.n	800ca96 <__ieee754_atan2+0x76>
 800cacc:	2e02      	cmp	r6, #2
 800cace:	d851      	bhi.n	800cb74 <__ieee754_atan2+0x154>
 800cad0:	4b3b      	ldr	r3, [pc, #236]	@ (800cbc0 <__ieee754_atan2+0x1a0>)
 800cad2:	e7f6      	b.n	800cac2 <__ieee754_atan2+0xa2>
 800cad4:	4553      	cmp	r3, sl
 800cad6:	d0e4      	beq.n	800caa2 <__ieee754_atan2+0x82>
 800cad8:	1a9b      	subs	r3, r3, r2
 800cada:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800cade:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cae2:	da21      	bge.n	800cb28 <__ieee754_atan2+0x108>
 800cae4:	f1b9 0f00 	cmp.w	r9, #0
 800cae8:	da01      	bge.n	800caee <__ieee754_atan2+0xce>
 800caea:	323c      	adds	r2, #60	@ 0x3c
 800caec:	db20      	blt.n	800cb30 <__ieee754_atan2+0x110>
 800caee:	4642      	mov	r2, r8
 800caf0:	464b      	mov	r3, r9
 800caf2:	4620      	mov	r0, r4
 800caf4:	4629      	mov	r1, r5
 800caf6:	f7f3 fe19 	bl	800072c <__aeabi_ddiv>
 800cafa:	f001 f821 	bl	800db40 <fabs>
 800cafe:	f000 fe8f 	bl	800d820 <atan>
 800cb02:	4604      	mov	r4, r0
 800cb04:	460d      	mov	r5, r1
 800cb06:	2e01      	cmp	r6, #1
 800cb08:	d015      	beq.n	800cb36 <__ieee754_atan2+0x116>
 800cb0a:	2e02      	cmp	r6, #2
 800cb0c:	d017      	beq.n	800cb3e <__ieee754_atan2+0x11e>
 800cb0e:	2e00      	cmp	r6, #0
 800cb10:	d0c1      	beq.n	800ca96 <__ieee754_atan2+0x76>
 800cb12:	a31f      	add	r3, pc, #124	@ (adr r3, 800cb90 <__ieee754_atan2+0x170>)
 800cb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb18:	4620      	mov	r0, r4
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	f7f3 fb24 	bl	8000168 <__aeabi_dsub>
 800cb20:	a31d      	add	r3, pc, #116	@ (adr r3, 800cb98 <__ieee754_atan2+0x178>)
 800cb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb26:	e016      	b.n	800cb56 <__ieee754_atan2+0x136>
 800cb28:	a51d      	add	r5, pc, #116	@ (adr r5, 800cba0 <__ieee754_atan2+0x180>)
 800cb2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb2e:	e7ea      	b.n	800cb06 <__ieee754_atan2+0xe6>
 800cb30:	2400      	movs	r4, #0
 800cb32:	2500      	movs	r5, #0
 800cb34:	e7e7      	b.n	800cb06 <__ieee754_atan2+0xe6>
 800cb36:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800cb3a:	461d      	mov	r5, r3
 800cb3c:	e7ab      	b.n	800ca96 <__ieee754_atan2+0x76>
 800cb3e:	a314      	add	r3, pc, #80	@ (adr r3, 800cb90 <__ieee754_atan2+0x170>)
 800cb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb44:	4620      	mov	r0, r4
 800cb46:	4629      	mov	r1, r5
 800cb48:	f7f3 fb0e 	bl	8000168 <__aeabi_dsub>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	460b      	mov	r3, r1
 800cb50:	a111      	add	r1, pc, #68	@ (adr r1, 800cb98 <__ieee754_atan2+0x178>)
 800cb52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb56:	f7f3 fb07 	bl	8000168 <__aeabi_dsub>
 800cb5a:	e782      	b.n	800ca62 <__ieee754_atan2+0x42>
 800cb5c:	a50e      	add	r5, pc, #56	@ (adr r5, 800cb98 <__ieee754_atan2+0x178>)
 800cb5e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb62:	e798      	b.n	800ca96 <__ieee754_atan2+0x76>
 800cb64:	a510      	add	r5, pc, #64	@ (adr r5, 800cba8 <__ieee754_atan2+0x188>)
 800cb66:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb6a:	e794      	b.n	800ca96 <__ieee754_atan2+0x76>
 800cb6c:	a510      	add	r5, pc, #64	@ (adr r5, 800cbb0 <__ieee754_atan2+0x190>)
 800cb6e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb72:	e790      	b.n	800ca96 <__ieee754_atan2+0x76>
 800cb74:	2400      	movs	r4, #0
 800cb76:	2500      	movs	r5, #0
 800cb78:	e78d      	b.n	800ca96 <__ieee754_atan2+0x76>
 800cb7a:	a509      	add	r5, pc, #36	@ (adr r5, 800cba0 <__ieee754_atan2+0x180>)
 800cb7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb80:	e789      	b.n	800ca96 <__ieee754_atan2+0x76>
 800cb82:	bf00      	nop
 800cb84:	f3af 8000 	nop.w
 800cb88:	54442d18 	.word	0x54442d18
 800cb8c:	bff921fb 	.word	0xbff921fb
 800cb90:	33145c07 	.word	0x33145c07
 800cb94:	3ca1a626 	.word	0x3ca1a626
 800cb98:	54442d18 	.word	0x54442d18
 800cb9c:	400921fb 	.word	0x400921fb
 800cba0:	54442d18 	.word	0x54442d18
 800cba4:	3ff921fb 	.word	0x3ff921fb
 800cba8:	54442d18 	.word	0x54442d18
 800cbac:	c00921fb 	.word	0xc00921fb
 800cbb0:	54442d18 	.word	0x54442d18
 800cbb4:	3fe921fb 	.word	0x3fe921fb
 800cbb8:	7ff00000 	.word	0x7ff00000
 800cbbc:	0800e5d8 	.word	0x0800e5d8
 800cbc0:	0800e5c0 	.word	0x0800e5c0

0800cbc4 <__ieee754_fmod>:
 800cbc4:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800cbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbcc:	ea52 040c 	orrs.w	r4, r2, ip
 800cbd0:	461e      	mov	r6, r3
 800cbd2:	4617      	mov	r7, r2
 800cbd4:	4696      	mov	lr, r2
 800cbd6:	d00c      	beq.n	800cbf2 <__ieee754_fmod+0x2e>
 800cbd8:	4c76      	ldr	r4, [pc, #472]	@ (800cdb4 <__ieee754_fmod+0x1f0>)
 800cbda:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800cbde:	45a0      	cmp	r8, r4
 800cbe0:	4689      	mov	r9, r1
 800cbe2:	d806      	bhi.n	800cbf2 <__ieee754_fmod+0x2e>
 800cbe4:	4254      	negs	r4, r2
 800cbe6:	4d74      	ldr	r5, [pc, #464]	@ (800cdb8 <__ieee754_fmod+0x1f4>)
 800cbe8:	4314      	orrs	r4, r2
 800cbea:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800cbee:	42ac      	cmp	r4, r5
 800cbf0:	d907      	bls.n	800cc02 <__ieee754_fmod+0x3e>
 800cbf2:	f7f3 fc71 	bl	80004d8 <__aeabi_dmul>
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	f7f3 fd97 	bl	800072c <__aeabi_ddiv>
 800cbfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc02:	45e0      	cmp	r8, ip
 800cc04:	4682      	mov	sl, r0
 800cc06:	4604      	mov	r4, r0
 800cc08:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800cc0c:	dc09      	bgt.n	800cc22 <__ieee754_fmod+0x5e>
 800cc0e:	dbf6      	blt.n	800cbfe <__ieee754_fmod+0x3a>
 800cc10:	4282      	cmp	r2, r0
 800cc12:	d8f4      	bhi.n	800cbfe <__ieee754_fmod+0x3a>
 800cc14:	d105      	bne.n	800cc22 <__ieee754_fmod+0x5e>
 800cc16:	4b69      	ldr	r3, [pc, #420]	@ (800cdbc <__ieee754_fmod+0x1f8>)
 800cc18:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800cc1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc20:	e7ed      	b.n	800cbfe <__ieee754_fmod+0x3a>
 800cc22:	4a65      	ldr	r2, [pc, #404]	@ (800cdb8 <__ieee754_fmod+0x1f4>)
 800cc24:	ea19 0f02 	tst.w	r9, r2
 800cc28:	d148      	bne.n	800ccbc <__ieee754_fmod+0xf8>
 800cc2a:	f1b8 0f00 	cmp.w	r8, #0
 800cc2e:	d13d      	bne.n	800ccac <__ieee754_fmod+0xe8>
 800cc30:	4653      	mov	r3, sl
 800cc32:	4963      	ldr	r1, [pc, #396]	@ (800cdc0 <__ieee754_fmod+0x1fc>)
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	dc36      	bgt.n	800cca6 <__ieee754_fmod+0xe2>
 800cc38:	4216      	tst	r6, r2
 800cc3a:	d14f      	bne.n	800ccdc <__ieee754_fmod+0x118>
 800cc3c:	f1bc 0f00 	cmp.w	ip, #0
 800cc40:	d144      	bne.n	800cccc <__ieee754_fmod+0x108>
 800cc42:	463b      	mov	r3, r7
 800cc44:	4a5e      	ldr	r2, [pc, #376]	@ (800cdc0 <__ieee754_fmod+0x1fc>)
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	dc3d      	bgt.n	800ccc6 <__ieee754_fmod+0x102>
 800cc4a:	485e      	ldr	r0, [pc, #376]	@ (800cdc4 <__ieee754_fmod+0x200>)
 800cc4c:	4281      	cmp	r1, r0
 800cc4e:	db4a      	blt.n	800cce6 <__ieee754_fmod+0x122>
 800cc50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc58:	485a      	ldr	r0, [pc, #360]	@ (800cdc4 <__ieee754_fmod+0x200>)
 800cc5a:	4282      	cmp	r2, r0
 800cc5c:	db57      	blt.n	800cd0e <__ieee754_fmod+0x14a>
 800cc5e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800cc62:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800cc66:	1a89      	subs	r1, r1, r2
 800cc68:	1b98      	subs	r0, r3, r6
 800cc6a:	eba4 070e 	sub.w	r7, r4, lr
 800cc6e:	2900      	cmp	r1, #0
 800cc70:	d162      	bne.n	800cd38 <__ieee754_fmod+0x174>
 800cc72:	4574      	cmp	r4, lr
 800cc74:	bf38      	it	cc
 800cc76:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	bfa4      	itt	ge
 800cc7e:	463c      	movge	r4, r7
 800cc80:	4603      	movge	r3, r0
 800cc82:	ea53 0104 	orrs.w	r1, r3, r4
 800cc86:	d0c6      	beq.n	800cc16 <__ieee754_fmod+0x52>
 800cc88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc8c:	db69      	blt.n	800cd62 <__ieee754_fmod+0x19e>
 800cc8e:	494d      	ldr	r1, [pc, #308]	@ (800cdc4 <__ieee754_fmod+0x200>)
 800cc90:	428a      	cmp	r2, r1
 800cc92:	db6c      	blt.n	800cd6e <__ieee754_fmod+0x1aa>
 800cc94:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cc98:	432b      	orrs	r3, r5
 800cc9a:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800cc9e:	4620      	mov	r0, r4
 800cca0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cca4:	e7ab      	b.n	800cbfe <__ieee754_fmod+0x3a>
 800cca6:	3901      	subs	r1, #1
 800cca8:	005b      	lsls	r3, r3, #1
 800ccaa:	e7c3      	b.n	800cc34 <__ieee754_fmod+0x70>
 800ccac:	4945      	ldr	r1, [pc, #276]	@ (800cdc4 <__ieee754_fmod+0x200>)
 800ccae:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	ddc0      	ble.n	800cc38 <__ieee754_fmod+0x74>
 800ccb6:	3901      	subs	r1, #1
 800ccb8:	005b      	lsls	r3, r3, #1
 800ccba:	e7fa      	b.n	800ccb2 <__ieee754_fmod+0xee>
 800ccbc:	ea4f 5128 	mov.w	r1, r8, asr #20
 800ccc0:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ccc4:	e7b8      	b.n	800cc38 <__ieee754_fmod+0x74>
 800ccc6:	3a01      	subs	r2, #1
 800ccc8:	005b      	lsls	r3, r3, #1
 800ccca:	e7bc      	b.n	800cc46 <__ieee754_fmod+0x82>
 800cccc:	4a3d      	ldr	r2, [pc, #244]	@ (800cdc4 <__ieee754_fmod+0x200>)
 800ccce:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	ddb9      	ble.n	800cc4a <__ieee754_fmod+0x86>
 800ccd6:	3a01      	subs	r2, #1
 800ccd8:	005b      	lsls	r3, r3, #1
 800ccda:	e7fa      	b.n	800ccd2 <__ieee754_fmod+0x10e>
 800ccdc:	ea4f 522c 	mov.w	r2, ip, asr #20
 800cce0:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800cce4:	e7b1      	b.n	800cc4a <__ieee754_fmod+0x86>
 800cce6:	1a40      	subs	r0, r0, r1
 800cce8:	281f      	cmp	r0, #31
 800ccea:	dc0a      	bgt.n	800cd02 <__ieee754_fmod+0x13e>
 800ccec:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800ccf0:	fa08 f800 	lsl.w	r8, r8, r0
 800ccf4:	fa2a f303 	lsr.w	r3, sl, r3
 800ccf8:	ea43 0308 	orr.w	r3, r3, r8
 800ccfc:	fa0a f400 	lsl.w	r4, sl, r0
 800cd00:	e7aa      	b.n	800cc58 <__ieee754_fmod+0x94>
 800cd02:	4b31      	ldr	r3, [pc, #196]	@ (800cdc8 <__ieee754_fmod+0x204>)
 800cd04:	2400      	movs	r4, #0
 800cd06:	1a5b      	subs	r3, r3, r1
 800cd08:	fa0a f303 	lsl.w	r3, sl, r3
 800cd0c:	e7a4      	b.n	800cc58 <__ieee754_fmod+0x94>
 800cd0e:	1a80      	subs	r0, r0, r2
 800cd10:	281f      	cmp	r0, #31
 800cd12:	dc0a      	bgt.n	800cd2a <__ieee754_fmod+0x166>
 800cd14:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800cd18:	fa0c fc00 	lsl.w	ip, ip, r0
 800cd1c:	fa27 f606 	lsr.w	r6, r7, r6
 800cd20:	ea46 060c 	orr.w	r6, r6, ip
 800cd24:	fa07 fe00 	lsl.w	lr, r7, r0
 800cd28:	e79d      	b.n	800cc66 <__ieee754_fmod+0xa2>
 800cd2a:	4e27      	ldr	r6, [pc, #156]	@ (800cdc8 <__ieee754_fmod+0x204>)
 800cd2c:	f04f 0e00 	mov.w	lr, #0
 800cd30:	1ab6      	subs	r6, r6, r2
 800cd32:	fa07 f606 	lsl.w	r6, r7, r6
 800cd36:	e796      	b.n	800cc66 <__ieee754_fmod+0xa2>
 800cd38:	4574      	cmp	r4, lr
 800cd3a:	bf38      	it	cc
 800cd3c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800cd40:	2800      	cmp	r0, #0
 800cd42:	da05      	bge.n	800cd50 <__ieee754_fmod+0x18c>
 800cd44:	0fe0      	lsrs	r0, r4, #31
 800cd46:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800cd4a:	0064      	lsls	r4, r4, #1
 800cd4c:	3901      	subs	r1, #1
 800cd4e:	e78b      	b.n	800cc68 <__ieee754_fmod+0xa4>
 800cd50:	ea50 0307 	orrs.w	r3, r0, r7
 800cd54:	f43f af5f 	beq.w	800cc16 <__ieee754_fmod+0x52>
 800cd58:	0ffb      	lsrs	r3, r7, #31
 800cd5a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800cd5e:	007c      	lsls	r4, r7, #1
 800cd60:	e7f4      	b.n	800cd4c <__ieee754_fmod+0x188>
 800cd62:	0fe1      	lsrs	r1, r4, #31
 800cd64:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800cd68:	0064      	lsls	r4, r4, #1
 800cd6a:	3a01      	subs	r2, #1
 800cd6c:	e78c      	b.n	800cc88 <__ieee754_fmod+0xc4>
 800cd6e:	1a89      	subs	r1, r1, r2
 800cd70:	2914      	cmp	r1, #20
 800cd72:	dc0a      	bgt.n	800cd8a <__ieee754_fmod+0x1c6>
 800cd74:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800cd78:	fa03 f202 	lsl.w	r2, r3, r2
 800cd7c:	40cc      	lsrs	r4, r1
 800cd7e:	4322      	orrs	r2, r4
 800cd80:	410b      	asrs	r3, r1
 800cd82:	4610      	mov	r0, r2
 800cd84:	ea43 0105 	orr.w	r1, r3, r5
 800cd88:	e739      	b.n	800cbfe <__ieee754_fmod+0x3a>
 800cd8a:	291f      	cmp	r1, #31
 800cd8c:	dc07      	bgt.n	800cd9e <__ieee754_fmod+0x1da>
 800cd8e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800cd92:	40cc      	lsrs	r4, r1
 800cd94:	fa03 f202 	lsl.w	r2, r3, r2
 800cd98:	4322      	orrs	r2, r4
 800cd9a:	462b      	mov	r3, r5
 800cd9c:	e7f1      	b.n	800cd82 <__ieee754_fmod+0x1be>
 800cd9e:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800cda2:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800cda6:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800cdaa:	32e2      	adds	r2, #226	@ 0xe2
 800cdac:	fa43 f202 	asr.w	r2, r3, r2
 800cdb0:	e7f3      	b.n	800cd9a <__ieee754_fmod+0x1d6>
 800cdb2:	bf00      	nop
 800cdb4:	7fefffff 	.word	0x7fefffff
 800cdb8:	7ff00000 	.word	0x7ff00000
 800cdbc:	0800e5f0 	.word	0x0800e5f0
 800cdc0:	fffffbed 	.word	0xfffffbed
 800cdc4:	fffffc02 	.word	0xfffffc02
 800cdc8:	fffffbe2 	.word	0xfffffbe2
 800cdcc:	00000000 	.word	0x00000000

0800cdd0 <__ieee754_pow>:
 800cdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdd4:	b091      	sub	sp, #68	@ 0x44
 800cdd6:	e9cd 2300 	strd	r2, r3, [sp]
 800cdda:	468b      	mov	fp, r1
 800cddc:	e9dd 1800 	ldrd	r1, r8, [sp]
 800cde0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800cde4:	4682      	mov	sl, r0
 800cde6:	ea57 0001 	orrs.w	r0, r7, r1
 800cdea:	d112      	bne.n	800ce12 <__ieee754_pow+0x42>
 800cdec:	4653      	mov	r3, sl
 800cdee:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800cdf2:	18db      	adds	r3, r3, r3
 800cdf4:	4152      	adcs	r2, r2
 800cdf6:	4298      	cmp	r0, r3
 800cdf8:	4b91      	ldr	r3, [pc, #580]	@ (800d040 <__ieee754_pow+0x270>)
 800cdfa:	4193      	sbcs	r3, r2
 800cdfc:	f080 84ce 	bcs.w	800d79c <__ieee754_pow+0x9cc>
 800ce00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce04:	4650      	mov	r0, sl
 800ce06:	4659      	mov	r1, fp
 800ce08:	f7f3 f9b0 	bl	800016c <__adddf3>
 800ce0c:	b011      	add	sp, #68	@ 0x44
 800ce0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce12:	4b8c      	ldr	r3, [pc, #560]	@ (800d044 <__ieee754_pow+0x274>)
 800ce14:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800ce18:	429e      	cmp	r6, r3
 800ce1a:	465d      	mov	r5, fp
 800ce1c:	46d1      	mov	r9, sl
 800ce1e:	d807      	bhi.n	800ce30 <__ieee754_pow+0x60>
 800ce20:	d102      	bne.n	800ce28 <__ieee754_pow+0x58>
 800ce22:	f1ba 0f00 	cmp.w	sl, #0
 800ce26:	d1eb      	bne.n	800ce00 <__ieee754_pow+0x30>
 800ce28:	429f      	cmp	r7, r3
 800ce2a:	d801      	bhi.n	800ce30 <__ieee754_pow+0x60>
 800ce2c:	d10f      	bne.n	800ce4e <__ieee754_pow+0x7e>
 800ce2e:	b171      	cbz	r1, 800ce4e <__ieee754_pow+0x7e>
 800ce30:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800ce34:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800ce38:	ea55 0509 	orrs.w	r5, r5, r9
 800ce3c:	d1e0      	bne.n	800ce00 <__ieee754_pow+0x30>
 800ce3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ce42:	18db      	adds	r3, r3, r3
 800ce44:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800ce48:	4152      	adcs	r2, r2
 800ce4a:	429d      	cmp	r5, r3
 800ce4c:	e7d4      	b.n	800cdf8 <__ieee754_pow+0x28>
 800ce4e:	2d00      	cmp	r5, #0
 800ce50:	4633      	mov	r3, r6
 800ce52:	da39      	bge.n	800cec8 <__ieee754_pow+0xf8>
 800ce54:	4a7c      	ldr	r2, [pc, #496]	@ (800d048 <__ieee754_pow+0x278>)
 800ce56:	4297      	cmp	r7, r2
 800ce58:	d84e      	bhi.n	800cef8 <__ieee754_pow+0x128>
 800ce5a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800ce5e:	4297      	cmp	r7, r2
 800ce60:	f240 84ab 	bls.w	800d7ba <__ieee754_pow+0x9ea>
 800ce64:	153a      	asrs	r2, r7, #20
 800ce66:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ce6a:	2a14      	cmp	r2, #20
 800ce6c:	dd0f      	ble.n	800ce8e <__ieee754_pow+0xbe>
 800ce6e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800ce72:	fa21 f402 	lsr.w	r4, r1, r2
 800ce76:	fa04 f202 	lsl.w	r2, r4, r2
 800ce7a:	428a      	cmp	r2, r1
 800ce7c:	f040 849d 	bne.w	800d7ba <__ieee754_pow+0x9ea>
 800ce80:	f004 0401 	and.w	r4, r4, #1
 800ce84:	f1c4 0402 	rsb	r4, r4, #2
 800ce88:	2900      	cmp	r1, #0
 800ce8a:	d15a      	bne.n	800cf42 <__ieee754_pow+0x172>
 800ce8c:	e00e      	b.n	800ceac <__ieee754_pow+0xdc>
 800ce8e:	2900      	cmp	r1, #0
 800ce90:	d156      	bne.n	800cf40 <__ieee754_pow+0x170>
 800ce92:	f1c2 0214 	rsb	r2, r2, #20
 800ce96:	fa47 f402 	asr.w	r4, r7, r2
 800ce9a:	fa04 f202 	lsl.w	r2, r4, r2
 800ce9e:	42ba      	cmp	r2, r7
 800cea0:	f040 8488 	bne.w	800d7b4 <__ieee754_pow+0x9e4>
 800cea4:	f004 0401 	and.w	r4, r4, #1
 800cea8:	f1c4 0402 	rsb	r4, r4, #2
 800ceac:	4a67      	ldr	r2, [pc, #412]	@ (800d04c <__ieee754_pow+0x27c>)
 800ceae:	4297      	cmp	r7, r2
 800ceb0:	d130      	bne.n	800cf14 <__ieee754_pow+0x144>
 800ceb2:	f1b8 0f00 	cmp.w	r8, #0
 800ceb6:	f280 8479 	bge.w	800d7ac <__ieee754_pow+0x9dc>
 800ceba:	4652      	mov	r2, sl
 800cebc:	465b      	mov	r3, fp
 800cebe:	2000      	movs	r0, #0
 800cec0:	4962      	ldr	r1, [pc, #392]	@ (800d04c <__ieee754_pow+0x27c>)
 800cec2:	f7f3 fc33 	bl	800072c <__aeabi_ddiv>
 800cec6:	e7a1      	b.n	800ce0c <__ieee754_pow+0x3c>
 800cec8:	2400      	movs	r4, #0
 800ceca:	2900      	cmp	r1, #0
 800cecc:	d139      	bne.n	800cf42 <__ieee754_pow+0x172>
 800cece:	4a5d      	ldr	r2, [pc, #372]	@ (800d044 <__ieee754_pow+0x274>)
 800ced0:	4297      	cmp	r7, r2
 800ced2:	d1eb      	bne.n	800ceac <__ieee754_pow+0xdc>
 800ced4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800ced8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800cedc:	ea53 0309 	orrs.w	r3, r3, r9
 800cee0:	f000 845c 	beq.w	800d79c <__ieee754_pow+0x9cc>
 800cee4:	4b5a      	ldr	r3, [pc, #360]	@ (800d050 <__ieee754_pow+0x280>)
 800cee6:	429e      	cmp	r6, r3
 800cee8:	d908      	bls.n	800cefc <__ieee754_pow+0x12c>
 800ceea:	f1b8 0f00 	cmp.w	r8, #0
 800ceee:	f2c0 8459 	blt.w	800d7a4 <__ieee754_pow+0x9d4>
 800cef2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cef6:	e789      	b.n	800ce0c <__ieee754_pow+0x3c>
 800cef8:	2402      	movs	r4, #2
 800cefa:	e7e6      	b.n	800ceca <__ieee754_pow+0xfa>
 800cefc:	f1b8 0f00 	cmp.w	r8, #0
 800cf00:	f04f 0000 	mov.w	r0, #0
 800cf04:	f04f 0100 	mov.w	r1, #0
 800cf08:	da80      	bge.n	800ce0c <__ieee754_pow+0x3c>
 800cf0a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cf0e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cf12:	e77b      	b.n	800ce0c <__ieee754_pow+0x3c>
 800cf14:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800cf18:	d106      	bne.n	800cf28 <__ieee754_pow+0x158>
 800cf1a:	4652      	mov	r2, sl
 800cf1c:	465b      	mov	r3, fp
 800cf1e:	4650      	mov	r0, sl
 800cf20:	4659      	mov	r1, fp
 800cf22:	f7f3 fad9 	bl	80004d8 <__aeabi_dmul>
 800cf26:	e771      	b.n	800ce0c <__ieee754_pow+0x3c>
 800cf28:	4a4a      	ldr	r2, [pc, #296]	@ (800d054 <__ieee754_pow+0x284>)
 800cf2a:	4590      	cmp	r8, r2
 800cf2c:	d109      	bne.n	800cf42 <__ieee754_pow+0x172>
 800cf2e:	2d00      	cmp	r5, #0
 800cf30:	db07      	blt.n	800cf42 <__ieee754_pow+0x172>
 800cf32:	4650      	mov	r0, sl
 800cf34:	4659      	mov	r1, fp
 800cf36:	b011      	add	sp, #68	@ 0x44
 800cf38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf3c:	f000 bea2 	b.w	800dc84 <__ieee754_sqrt>
 800cf40:	2400      	movs	r4, #0
 800cf42:	4650      	mov	r0, sl
 800cf44:	4659      	mov	r1, fp
 800cf46:	9302      	str	r3, [sp, #8]
 800cf48:	f000 fdfa 	bl	800db40 <fabs>
 800cf4c:	9b02      	ldr	r3, [sp, #8]
 800cf4e:	f1b9 0f00 	cmp.w	r9, #0
 800cf52:	d127      	bne.n	800cfa4 <__ieee754_pow+0x1d4>
 800cf54:	4a3d      	ldr	r2, [pc, #244]	@ (800d04c <__ieee754_pow+0x27c>)
 800cf56:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800cf5a:	4594      	cmp	ip, r2
 800cf5c:	d000      	beq.n	800cf60 <__ieee754_pow+0x190>
 800cf5e:	bb0e      	cbnz	r6, 800cfa4 <__ieee754_pow+0x1d4>
 800cf60:	f1b8 0f00 	cmp.w	r8, #0
 800cf64:	da05      	bge.n	800cf72 <__ieee754_pow+0x1a2>
 800cf66:	4602      	mov	r2, r0
 800cf68:	460b      	mov	r3, r1
 800cf6a:	2000      	movs	r0, #0
 800cf6c:	4937      	ldr	r1, [pc, #220]	@ (800d04c <__ieee754_pow+0x27c>)
 800cf6e:	f7f3 fbdd 	bl	800072c <__aeabi_ddiv>
 800cf72:	2d00      	cmp	r5, #0
 800cf74:	f6bf af4a 	bge.w	800ce0c <__ieee754_pow+0x3c>
 800cf78:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800cf7c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800cf80:	4326      	orrs	r6, r4
 800cf82:	d108      	bne.n	800cf96 <__ieee754_pow+0x1c6>
 800cf84:	4602      	mov	r2, r0
 800cf86:	460b      	mov	r3, r1
 800cf88:	4610      	mov	r0, r2
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	f7f3 f8ec 	bl	8000168 <__aeabi_dsub>
 800cf90:	4602      	mov	r2, r0
 800cf92:	460b      	mov	r3, r1
 800cf94:	e795      	b.n	800cec2 <__ieee754_pow+0xf2>
 800cf96:	2c01      	cmp	r4, #1
 800cf98:	f47f af38 	bne.w	800ce0c <__ieee754_pow+0x3c>
 800cf9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	e733      	b.n	800ce0c <__ieee754_pow+0x3c>
 800cfa4:	0fea      	lsrs	r2, r5, #31
 800cfa6:	3a01      	subs	r2, #1
 800cfa8:	ea52 0c04 	orrs.w	ip, r2, r4
 800cfac:	d102      	bne.n	800cfb4 <__ieee754_pow+0x1e4>
 800cfae:	4652      	mov	r2, sl
 800cfb0:	465b      	mov	r3, fp
 800cfb2:	e7e9      	b.n	800cf88 <__ieee754_pow+0x1b8>
 800cfb4:	f04f 0900 	mov.w	r9, #0
 800cfb8:	3c01      	subs	r4, #1
 800cfba:	4314      	orrs	r4, r2
 800cfbc:	bf14      	ite	ne
 800cfbe:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800d04c <__ieee754_pow+0x27c>
 800cfc2:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800d058 <__ieee754_pow+0x288>
 800cfc6:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800cfca:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800cfce:	f240 8107 	bls.w	800d1e0 <__ieee754_pow+0x410>
 800cfd2:	4b22      	ldr	r3, [pc, #136]	@ (800d05c <__ieee754_pow+0x28c>)
 800cfd4:	429f      	cmp	r7, r3
 800cfd6:	4b1e      	ldr	r3, [pc, #120]	@ (800d050 <__ieee754_pow+0x280>)
 800cfd8:	d913      	bls.n	800d002 <__ieee754_pow+0x232>
 800cfda:	429e      	cmp	r6, r3
 800cfdc:	d808      	bhi.n	800cff0 <__ieee754_pow+0x220>
 800cfde:	f1b8 0f00 	cmp.w	r8, #0
 800cfe2:	da08      	bge.n	800cff6 <__ieee754_pow+0x226>
 800cfe4:	2000      	movs	r0, #0
 800cfe6:	b011      	add	sp, #68	@ 0x44
 800cfe8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfec:	f000 be44 	b.w	800dc78 <__math_oflow>
 800cff0:	f1b8 0f00 	cmp.w	r8, #0
 800cff4:	dcf6      	bgt.n	800cfe4 <__ieee754_pow+0x214>
 800cff6:	2000      	movs	r0, #0
 800cff8:	b011      	add	sp, #68	@ 0x44
 800cffa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cffe:	f000 be36 	b.w	800dc6e <__math_uflow>
 800d002:	429e      	cmp	r6, r3
 800d004:	d20c      	bcs.n	800d020 <__ieee754_pow+0x250>
 800d006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d00a:	2200      	movs	r2, #0
 800d00c:	2300      	movs	r3, #0
 800d00e:	f7f3 fcd5 	bl	80009bc <__aeabi_dcmplt>
 800d012:	3800      	subs	r0, #0
 800d014:	bf18      	it	ne
 800d016:	2001      	movne	r0, #1
 800d018:	f1b8 0f00 	cmp.w	r8, #0
 800d01c:	daec      	bge.n	800cff8 <__ieee754_pow+0x228>
 800d01e:	e7e2      	b.n	800cfe6 <__ieee754_pow+0x216>
 800d020:	4b0a      	ldr	r3, [pc, #40]	@ (800d04c <__ieee754_pow+0x27c>)
 800d022:	2200      	movs	r2, #0
 800d024:	429e      	cmp	r6, r3
 800d026:	d91b      	bls.n	800d060 <__ieee754_pow+0x290>
 800d028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d02c:	2300      	movs	r3, #0
 800d02e:	f7f3 fcc5 	bl	80009bc <__aeabi_dcmplt>
 800d032:	3800      	subs	r0, #0
 800d034:	bf18      	it	ne
 800d036:	2001      	movne	r0, #1
 800d038:	f1b8 0f00 	cmp.w	r8, #0
 800d03c:	dcd3      	bgt.n	800cfe6 <__ieee754_pow+0x216>
 800d03e:	e7db      	b.n	800cff8 <__ieee754_pow+0x228>
 800d040:	fff00000 	.word	0xfff00000
 800d044:	7ff00000 	.word	0x7ff00000
 800d048:	433fffff 	.word	0x433fffff
 800d04c:	3ff00000 	.word	0x3ff00000
 800d050:	3fefffff 	.word	0x3fefffff
 800d054:	3fe00000 	.word	0x3fe00000
 800d058:	bff00000 	.word	0xbff00000
 800d05c:	43f00000 	.word	0x43f00000
 800d060:	4b5b      	ldr	r3, [pc, #364]	@ (800d1d0 <__ieee754_pow+0x400>)
 800d062:	f7f3 f881 	bl	8000168 <__aeabi_dsub>
 800d066:	a352      	add	r3, pc, #328	@ (adr r3, 800d1b0 <__ieee754_pow+0x3e0>)
 800d068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06c:	4604      	mov	r4, r0
 800d06e:	460d      	mov	r5, r1
 800d070:	f7f3 fa32 	bl	80004d8 <__aeabi_dmul>
 800d074:	a350      	add	r3, pc, #320	@ (adr r3, 800d1b8 <__ieee754_pow+0x3e8>)
 800d076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07a:	4606      	mov	r6, r0
 800d07c:	460f      	mov	r7, r1
 800d07e:	4620      	mov	r0, r4
 800d080:	4629      	mov	r1, r5
 800d082:	f7f3 fa29 	bl	80004d8 <__aeabi_dmul>
 800d086:	2200      	movs	r2, #0
 800d088:	4682      	mov	sl, r0
 800d08a:	468b      	mov	fp, r1
 800d08c:	4620      	mov	r0, r4
 800d08e:	4629      	mov	r1, r5
 800d090:	4b50      	ldr	r3, [pc, #320]	@ (800d1d4 <__ieee754_pow+0x404>)
 800d092:	f7f3 fa21 	bl	80004d8 <__aeabi_dmul>
 800d096:	4602      	mov	r2, r0
 800d098:	460b      	mov	r3, r1
 800d09a:	a149      	add	r1, pc, #292	@ (adr r1, 800d1c0 <__ieee754_pow+0x3f0>)
 800d09c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0a0:	f7f3 f862 	bl	8000168 <__aeabi_dsub>
 800d0a4:	4622      	mov	r2, r4
 800d0a6:	462b      	mov	r3, r5
 800d0a8:	f7f3 fa16 	bl	80004d8 <__aeabi_dmul>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	4949      	ldr	r1, [pc, #292]	@ (800d1d8 <__ieee754_pow+0x408>)
 800d0b4:	f7f3 f858 	bl	8000168 <__aeabi_dsub>
 800d0b8:	4622      	mov	r2, r4
 800d0ba:	4680      	mov	r8, r0
 800d0bc:	4689      	mov	r9, r1
 800d0be:	462b      	mov	r3, r5
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	f7f3 fa08 	bl	80004d8 <__aeabi_dmul>
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	4640      	mov	r0, r8
 800d0ce:	4649      	mov	r1, r9
 800d0d0:	f7f3 fa02 	bl	80004d8 <__aeabi_dmul>
 800d0d4:	a33c      	add	r3, pc, #240	@ (adr r3, 800d1c8 <__ieee754_pow+0x3f8>)
 800d0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0da:	f7f3 f9fd 	bl	80004d8 <__aeabi_dmul>
 800d0de:	4602      	mov	r2, r0
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	4650      	mov	r0, sl
 800d0e4:	4659      	mov	r1, fp
 800d0e6:	f7f3 f83f 	bl	8000168 <__aeabi_dsub>
 800d0ea:	2400      	movs	r4, #0
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	4680      	mov	r8, r0
 800d0f2:	4689      	mov	r9, r1
 800d0f4:	4630      	mov	r0, r6
 800d0f6:	4639      	mov	r1, r7
 800d0f8:	f7f3 f838 	bl	800016c <__adddf3>
 800d0fc:	4632      	mov	r2, r6
 800d0fe:	463b      	mov	r3, r7
 800d100:	4620      	mov	r0, r4
 800d102:	460d      	mov	r5, r1
 800d104:	f7f3 f830 	bl	8000168 <__aeabi_dsub>
 800d108:	4602      	mov	r2, r0
 800d10a:	460b      	mov	r3, r1
 800d10c:	4640      	mov	r0, r8
 800d10e:	4649      	mov	r1, r9
 800d110:	f7f3 f82a 	bl	8000168 <__aeabi_dsub>
 800d114:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d118:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d11c:	2300      	movs	r3, #0
 800d11e:	9304      	str	r3, [sp, #16]
 800d120:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d124:	4606      	mov	r6, r0
 800d126:	460f      	mov	r7, r1
 800d128:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d12c:	4652      	mov	r2, sl
 800d12e:	465b      	mov	r3, fp
 800d130:	f7f3 f81a 	bl	8000168 <__aeabi_dsub>
 800d134:	4622      	mov	r2, r4
 800d136:	462b      	mov	r3, r5
 800d138:	f7f3 f9ce 	bl	80004d8 <__aeabi_dmul>
 800d13c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d140:	4680      	mov	r8, r0
 800d142:	4689      	mov	r9, r1
 800d144:	4630      	mov	r0, r6
 800d146:	4639      	mov	r1, r7
 800d148:	f7f3 f9c6 	bl	80004d8 <__aeabi_dmul>
 800d14c:	4602      	mov	r2, r0
 800d14e:	460b      	mov	r3, r1
 800d150:	4640      	mov	r0, r8
 800d152:	4649      	mov	r1, r9
 800d154:	f7f3 f80a 	bl	800016c <__adddf3>
 800d158:	4652      	mov	r2, sl
 800d15a:	465b      	mov	r3, fp
 800d15c:	4606      	mov	r6, r0
 800d15e:	460f      	mov	r7, r1
 800d160:	4620      	mov	r0, r4
 800d162:	4629      	mov	r1, r5
 800d164:	f7f3 f9b8 	bl	80004d8 <__aeabi_dmul>
 800d168:	460b      	mov	r3, r1
 800d16a:	4602      	mov	r2, r0
 800d16c:	4680      	mov	r8, r0
 800d16e:	4689      	mov	r9, r1
 800d170:	4630      	mov	r0, r6
 800d172:	4639      	mov	r1, r7
 800d174:	f7f2 fffa 	bl	800016c <__adddf3>
 800d178:	4b18      	ldr	r3, [pc, #96]	@ (800d1dc <__ieee754_pow+0x40c>)
 800d17a:	4604      	mov	r4, r0
 800d17c:	4299      	cmp	r1, r3
 800d17e:	460d      	mov	r5, r1
 800d180:	468a      	mov	sl, r1
 800d182:	468b      	mov	fp, r1
 800d184:	f340 82e0 	ble.w	800d748 <__ieee754_pow+0x978>
 800d188:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800d18c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800d190:	4303      	orrs	r3, r0
 800d192:	f000 81df 	beq.w	800d554 <__ieee754_pow+0x784>
 800d196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d19a:	2200      	movs	r2, #0
 800d19c:	2300      	movs	r3, #0
 800d19e:	f7f3 fc0d 	bl	80009bc <__aeabi_dcmplt>
 800d1a2:	3800      	subs	r0, #0
 800d1a4:	bf18      	it	ne
 800d1a6:	2001      	movne	r0, #1
 800d1a8:	e71d      	b.n	800cfe6 <__ieee754_pow+0x216>
 800d1aa:	bf00      	nop
 800d1ac:	f3af 8000 	nop.w
 800d1b0:	60000000 	.word	0x60000000
 800d1b4:	3ff71547 	.word	0x3ff71547
 800d1b8:	f85ddf44 	.word	0xf85ddf44
 800d1bc:	3e54ae0b 	.word	0x3e54ae0b
 800d1c0:	55555555 	.word	0x55555555
 800d1c4:	3fd55555 	.word	0x3fd55555
 800d1c8:	652b82fe 	.word	0x652b82fe
 800d1cc:	3ff71547 	.word	0x3ff71547
 800d1d0:	3ff00000 	.word	0x3ff00000
 800d1d4:	3fd00000 	.word	0x3fd00000
 800d1d8:	3fe00000 	.word	0x3fe00000
 800d1dc:	408fffff 	.word	0x408fffff
 800d1e0:	4ad3      	ldr	r2, [pc, #844]	@ (800d530 <__ieee754_pow+0x760>)
 800d1e2:	402a      	ands	r2, r5
 800d1e4:	2a00      	cmp	r2, #0
 800d1e6:	f040 817a 	bne.w	800d4de <__ieee754_pow+0x70e>
 800d1ea:	4bd2      	ldr	r3, [pc, #840]	@ (800d534 <__ieee754_pow+0x764>)
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f7f3 f973 	bl	80004d8 <__aeabi_dmul>
 800d1f2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	151a      	asrs	r2, r3, #20
 800d1fa:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800d1fe:	4422      	add	r2, r4
 800d200:	920a      	str	r2, [sp, #40]	@ 0x28
 800d202:	4acd      	ldr	r2, [pc, #820]	@ (800d538 <__ieee754_pow+0x768>)
 800d204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d208:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800d20c:	4293      	cmp	r3, r2
 800d20e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d212:	dd08      	ble.n	800d226 <__ieee754_pow+0x456>
 800d214:	4ac9      	ldr	r2, [pc, #804]	@ (800d53c <__ieee754_pow+0x76c>)
 800d216:	4293      	cmp	r3, r2
 800d218:	f340 8163 	ble.w	800d4e2 <__ieee754_pow+0x712>
 800d21c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d21e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800d222:	3301      	adds	r3, #1
 800d224:	930a      	str	r3, [sp, #40]	@ 0x28
 800d226:	2600      	movs	r6, #0
 800d228:	00f3      	lsls	r3, r6, #3
 800d22a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d22c:	4bc4      	ldr	r3, [pc, #784]	@ (800d540 <__ieee754_pow+0x770>)
 800d22e:	4629      	mov	r1, r5
 800d230:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d234:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d238:	461a      	mov	r2, r3
 800d23a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800d23e:	4623      	mov	r3, r4
 800d240:	4682      	mov	sl, r0
 800d242:	f7f2 ff91 	bl	8000168 <__aeabi_dsub>
 800d246:	4652      	mov	r2, sl
 800d248:	462b      	mov	r3, r5
 800d24a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800d24e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d252:	f7f2 ff8b 	bl	800016c <__adddf3>
 800d256:	4602      	mov	r2, r0
 800d258:	460b      	mov	r3, r1
 800d25a:	2000      	movs	r0, #0
 800d25c:	49b9      	ldr	r1, [pc, #740]	@ (800d544 <__ieee754_pow+0x774>)
 800d25e:	f7f3 fa65 	bl	800072c <__aeabi_ddiv>
 800d262:	4602      	mov	r2, r0
 800d264:	460b      	mov	r3, r1
 800d266:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d26a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d26e:	f7f3 f933 	bl	80004d8 <__aeabi_dmul>
 800d272:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d276:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d27a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d27e:	2300      	movs	r3, #0
 800d280:	2200      	movs	r2, #0
 800d282:	46ab      	mov	fp, r5
 800d284:	106d      	asrs	r5, r5, #1
 800d286:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800d28a:	9304      	str	r3, [sp, #16]
 800d28c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800d290:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d294:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800d298:	4640      	mov	r0, r8
 800d29a:	4649      	mov	r1, r9
 800d29c:	4614      	mov	r4, r2
 800d29e:	461d      	mov	r5, r3
 800d2a0:	f7f3 f91a 	bl	80004d8 <__aeabi_dmul>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2ac:	f7f2 ff5c 	bl	8000168 <__aeabi_dsub>
 800d2b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d2b4:	4606      	mov	r6, r0
 800d2b6:	460f      	mov	r7, r1
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	4629      	mov	r1, r5
 800d2bc:	f7f2 ff54 	bl	8000168 <__aeabi_dsub>
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	4650      	mov	r0, sl
 800d2c6:	4659      	mov	r1, fp
 800d2c8:	f7f2 ff4e 	bl	8000168 <__aeabi_dsub>
 800d2cc:	4642      	mov	r2, r8
 800d2ce:	464b      	mov	r3, r9
 800d2d0:	f7f3 f902 	bl	80004d8 <__aeabi_dmul>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	460b      	mov	r3, r1
 800d2d8:	4630      	mov	r0, r6
 800d2da:	4639      	mov	r1, r7
 800d2dc:	f7f2 ff44 	bl	8000168 <__aeabi_dsub>
 800d2e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d2e4:	f7f3 f8f8 	bl	80004d8 <__aeabi_dmul>
 800d2e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d2f0:	4610      	mov	r0, r2
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	f7f3 f8f0 	bl	80004d8 <__aeabi_dmul>
 800d2f8:	a37b      	add	r3, pc, #492	@ (adr r3, 800d4e8 <__ieee754_pow+0x718>)
 800d2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fe:	4604      	mov	r4, r0
 800d300:	460d      	mov	r5, r1
 800d302:	f7f3 f8e9 	bl	80004d8 <__aeabi_dmul>
 800d306:	a37a      	add	r3, pc, #488	@ (adr r3, 800d4f0 <__ieee754_pow+0x720>)
 800d308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30c:	f7f2 ff2e 	bl	800016c <__adddf3>
 800d310:	4622      	mov	r2, r4
 800d312:	462b      	mov	r3, r5
 800d314:	f7f3 f8e0 	bl	80004d8 <__aeabi_dmul>
 800d318:	a377      	add	r3, pc, #476	@ (adr r3, 800d4f8 <__ieee754_pow+0x728>)
 800d31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31e:	f7f2 ff25 	bl	800016c <__adddf3>
 800d322:	4622      	mov	r2, r4
 800d324:	462b      	mov	r3, r5
 800d326:	f7f3 f8d7 	bl	80004d8 <__aeabi_dmul>
 800d32a:	a375      	add	r3, pc, #468	@ (adr r3, 800d500 <__ieee754_pow+0x730>)
 800d32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d330:	f7f2 ff1c 	bl	800016c <__adddf3>
 800d334:	4622      	mov	r2, r4
 800d336:	462b      	mov	r3, r5
 800d338:	f7f3 f8ce 	bl	80004d8 <__aeabi_dmul>
 800d33c:	a372      	add	r3, pc, #456	@ (adr r3, 800d508 <__ieee754_pow+0x738>)
 800d33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d342:	f7f2 ff13 	bl	800016c <__adddf3>
 800d346:	4622      	mov	r2, r4
 800d348:	462b      	mov	r3, r5
 800d34a:	f7f3 f8c5 	bl	80004d8 <__aeabi_dmul>
 800d34e:	a370      	add	r3, pc, #448	@ (adr r3, 800d510 <__ieee754_pow+0x740>)
 800d350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d354:	f7f2 ff0a 	bl	800016c <__adddf3>
 800d358:	4622      	mov	r2, r4
 800d35a:	4606      	mov	r6, r0
 800d35c:	460f      	mov	r7, r1
 800d35e:	462b      	mov	r3, r5
 800d360:	4620      	mov	r0, r4
 800d362:	4629      	mov	r1, r5
 800d364:	f7f3 f8b8 	bl	80004d8 <__aeabi_dmul>
 800d368:	4602      	mov	r2, r0
 800d36a:	460b      	mov	r3, r1
 800d36c:	4630      	mov	r0, r6
 800d36e:	4639      	mov	r1, r7
 800d370:	f7f3 f8b2 	bl	80004d8 <__aeabi_dmul>
 800d374:	4604      	mov	r4, r0
 800d376:	460d      	mov	r5, r1
 800d378:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d37c:	4642      	mov	r2, r8
 800d37e:	464b      	mov	r3, r9
 800d380:	f7f2 fef4 	bl	800016c <__adddf3>
 800d384:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d388:	f7f3 f8a6 	bl	80004d8 <__aeabi_dmul>
 800d38c:	4622      	mov	r2, r4
 800d38e:	462b      	mov	r3, r5
 800d390:	f7f2 feec 	bl	800016c <__adddf3>
 800d394:	4642      	mov	r2, r8
 800d396:	4682      	mov	sl, r0
 800d398:	468b      	mov	fp, r1
 800d39a:	464b      	mov	r3, r9
 800d39c:	4640      	mov	r0, r8
 800d39e:	4649      	mov	r1, r9
 800d3a0:	f7f3 f89a 	bl	80004d8 <__aeabi_dmul>
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	4b68      	ldr	r3, [pc, #416]	@ (800d548 <__ieee754_pow+0x778>)
 800d3a8:	4606      	mov	r6, r0
 800d3aa:	460f      	mov	r7, r1
 800d3ac:	f7f2 fede 	bl	800016c <__adddf3>
 800d3b0:	4652      	mov	r2, sl
 800d3b2:	465b      	mov	r3, fp
 800d3b4:	f7f2 feda 	bl	800016c <__adddf3>
 800d3b8:	2400      	movs	r4, #0
 800d3ba:	460d      	mov	r5, r1
 800d3bc:	4622      	mov	r2, r4
 800d3be:	460b      	mov	r3, r1
 800d3c0:	4640      	mov	r0, r8
 800d3c2:	4649      	mov	r1, r9
 800d3c4:	f7f3 f888 	bl	80004d8 <__aeabi_dmul>
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	4680      	mov	r8, r0
 800d3cc:	4689      	mov	r9, r1
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	4629      	mov	r1, r5
 800d3d2:	4b5d      	ldr	r3, [pc, #372]	@ (800d548 <__ieee754_pow+0x778>)
 800d3d4:	f7f2 fec8 	bl	8000168 <__aeabi_dsub>
 800d3d8:	4632      	mov	r2, r6
 800d3da:	463b      	mov	r3, r7
 800d3dc:	f7f2 fec4 	bl	8000168 <__aeabi_dsub>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	4650      	mov	r0, sl
 800d3e6:	4659      	mov	r1, fp
 800d3e8:	f7f2 febe 	bl	8000168 <__aeabi_dsub>
 800d3ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3f0:	f7f3 f872 	bl	80004d8 <__aeabi_dmul>
 800d3f4:	4622      	mov	r2, r4
 800d3f6:	4606      	mov	r6, r0
 800d3f8:	460f      	mov	r7, r1
 800d3fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d3fe:	462b      	mov	r3, r5
 800d400:	f7f3 f86a 	bl	80004d8 <__aeabi_dmul>
 800d404:	4602      	mov	r2, r0
 800d406:	460b      	mov	r3, r1
 800d408:	4630      	mov	r0, r6
 800d40a:	4639      	mov	r1, r7
 800d40c:	f7f2 feae 	bl	800016c <__adddf3>
 800d410:	2400      	movs	r4, #0
 800d412:	4606      	mov	r6, r0
 800d414:	460f      	mov	r7, r1
 800d416:	4602      	mov	r2, r0
 800d418:	460b      	mov	r3, r1
 800d41a:	4640      	mov	r0, r8
 800d41c:	4649      	mov	r1, r9
 800d41e:	f7f2 fea5 	bl	800016c <__adddf3>
 800d422:	a33d      	add	r3, pc, #244	@ (adr r3, 800d518 <__ieee754_pow+0x748>)
 800d424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d428:	4620      	mov	r0, r4
 800d42a:	460d      	mov	r5, r1
 800d42c:	f7f3 f854 	bl	80004d8 <__aeabi_dmul>
 800d430:	4642      	mov	r2, r8
 800d432:	464b      	mov	r3, r9
 800d434:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d438:	4620      	mov	r0, r4
 800d43a:	4629      	mov	r1, r5
 800d43c:	f7f2 fe94 	bl	8000168 <__aeabi_dsub>
 800d440:	4602      	mov	r2, r0
 800d442:	460b      	mov	r3, r1
 800d444:	4630      	mov	r0, r6
 800d446:	4639      	mov	r1, r7
 800d448:	f7f2 fe8e 	bl	8000168 <__aeabi_dsub>
 800d44c:	a334      	add	r3, pc, #208	@ (adr r3, 800d520 <__ieee754_pow+0x750>)
 800d44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d452:	f7f3 f841 	bl	80004d8 <__aeabi_dmul>
 800d456:	a334      	add	r3, pc, #208	@ (adr r3, 800d528 <__ieee754_pow+0x758>)
 800d458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45c:	4606      	mov	r6, r0
 800d45e:	460f      	mov	r7, r1
 800d460:	4620      	mov	r0, r4
 800d462:	4629      	mov	r1, r5
 800d464:	f7f3 f838 	bl	80004d8 <__aeabi_dmul>
 800d468:	4602      	mov	r2, r0
 800d46a:	460b      	mov	r3, r1
 800d46c:	4630      	mov	r0, r6
 800d46e:	4639      	mov	r1, r7
 800d470:	f7f2 fe7c 	bl	800016c <__adddf3>
 800d474:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d476:	4b35      	ldr	r3, [pc, #212]	@ (800d54c <__ieee754_pow+0x77c>)
 800d478:	2400      	movs	r4, #0
 800d47a:	4413      	add	r3, r2
 800d47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d480:	f7f2 fe74 	bl	800016c <__adddf3>
 800d484:	4682      	mov	sl, r0
 800d486:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d488:	468b      	mov	fp, r1
 800d48a:	f7f2 ffbb 	bl	8000404 <__aeabi_i2d>
 800d48e:	4606      	mov	r6, r0
 800d490:	460f      	mov	r7, r1
 800d492:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d494:	4b2e      	ldr	r3, [pc, #184]	@ (800d550 <__ieee754_pow+0x780>)
 800d496:	4413      	add	r3, r2
 800d498:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d49c:	4652      	mov	r2, sl
 800d49e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4a2:	465b      	mov	r3, fp
 800d4a4:	f7f2 fe62 	bl	800016c <__adddf3>
 800d4a8:	4642      	mov	r2, r8
 800d4aa:	464b      	mov	r3, r9
 800d4ac:	f7f2 fe5e 	bl	800016c <__adddf3>
 800d4b0:	4632      	mov	r2, r6
 800d4b2:	463b      	mov	r3, r7
 800d4b4:	f7f2 fe5a 	bl	800016c <__adddf3>
 800d4b8:	4632      	mov	r2, r6
 800d4ba:	463b      	mov	r3, r7
 800d4bc:	4620      	mov	r0, r4
 800d4be:	460d      	mov	r5, r1
 800d4c0:	f7f2 fe52 	bl	8000168 <__aeabi_dsub>
 800d4c4:	4642      	mov	r2, r8
 800d4c6:	464b      	mov	r3, r9
 800d4c8:	f7f2 fe4e 	bl	8000168 <__aeabi_dsub>
 800d4cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4d0:	f7f2 fe4a 	bl	8000168 <__aeabi_dsub>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	4650      	mov	r0, sl
 800d4da:	4659      	mov	r1, fp
 800d4dc:	e618      	b.n	800d110 <__ieee754_pow+0x340>
 800d4de:	2400      	movs	r4, #0
 800d4e0:	e68a      	b.n	800d1f8 <__ieee754_pow+0x428>
 800d4e2:	2601      	movs	r6, #1
 800d4e4:	e6a0      	b.n	800d228 <__ieee754_pow+0x458>
 800d4e6:	bf00      	nop
 800d4e8:	4a454eef 	.word	0x4a454eef
 800d4ec:	3fca7e28 	.word	0x3fca7e28
 800d4f0:	93c9db65 	.word	0x93c9db65
 800d4f4:	3fcd864a 	.word	0x3fcd864a
 800d4f8:	a91d4101 	.word	0xa91d4101
 800d4fc:	3fd17460 	.word	0x3fd17460
 800d500:	518f264d 	.word	0x518f264d
 800d504:	3fd55555 	.word	0x3fd55555
 800d508:	db6fabff 	.word	0xdb6fabff
 800d50c:	3fdb6db6 	.word	0x3fdb6db6
 800d510:	33333303 	.word	0x33333303
 800d514:	3fe33333 	.word	0x3fe33333
 800d518:	e0000000 	.word	0xe0000000
 800d51c:	3feec709 	.word	0x3feec709
 800d520:	dc3a03fd 	.word	0xdc3a03fd
 800d524:	3feec709 	.word	0x3feec709
 800d528:	145b01f5 	.word	0x145b01f5
 800d52c:	be3e2fe0 	.word	0xbe3e2fe0
 800d530:	7ff00000 	.word	0x7ff00000
 800d534:	43400000 	.word	0x43400000
 800d538:	0003988e 	.word	0x0003988e
 800d53c:	000bb679 	.word	0x000bb679
 800d540:	0800e620 	.word	0x0800e620
 800d544:	3ff00000 	.word	0x3ff00000
 800d548:	40080000 	.word	0x40080000
 800d54c:	0800e600 	.word	0x0800e600
 800d550:	0800e610 	.word	0x0800e610
 800d554:	a39a      	add	r3, pc, #616	@ (adr r3, 800d7c0 <__ieee754_pow+0x9f0>)
 800d556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55a:	4630      	mov	r0, r6
 800d55c:	4639      	mov	r1, r7
 800d55e:	f7f2 fe05 	bl	800016c <__adddf3>
 800d562:	4642      	mov	r2, r8
 800d564:	e9cd 0100 	strd	r0, r1, [sp]
 800d568:	464b      	mov	r3, r9
 800d56a:	4620      	mov	r0, r4
 800d56c:	4629      	mov	r1, r5
 800d56e:	f7f2 fdfb 	bl	8000168 <__aeabi_dsub>
 800d572:	4602      	mov	r2, r0
 800d574:	460b      	mov	r3, r1
 800d576:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d57a:	f7f3 fa3d 	bl	80009f8 <__aeabi_dcmpgt>
 800d57e:	2800      	cmp	r0, #0
 800d580:	f47f ae09 	bne.w	800d196 <__ieee754_pow+0x3c6>
 800d584:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d588:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d58c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800d590:	fa43 fa0a 	asr.w	sl, r3, sl
 800d594:	44da      	add	sl, fp
 800d596:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d59a:	489b      	ldr	r0, [pc, #620]	@ (800d808 <__ieee754_pow+0xa38>)
 800d59c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800d5a0:	4108      	asrs	r0, r1
 800d5a2:	ea00 030a 	and.w	r3, r0, sl
 800d5a6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d5aa:	f1c1 0114 	rsb	r1, r1, #20
 800d5ae:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800d5b2:	4640      	mov	r0, r8
 800d5b4:	fa4a fa01 	asr.w	sl, sl, r1
 800d5b8:	f1bb 0f00 	cmp.w	fp, #0
 800d5bc:	4649      	mov	r1, r9
 800d5be:	f04f 0200 	mov.w	r2, #0
 800d5c2:	bfb8      	it	lt
 800d5c4:	f1ca 0a00 	rsblt	sl, sl, #0
 800d5c8:	f7f2 fdce 	bl	8000168 <__aeabi_dsub>
 800d5cc:	4680      	mov	r8, r0
 800d5ce:	4689      	mov	r9, r1
 800d5d0:	2400      	movs	r4, #0
 800d5d2:	4632      	mov	r2, r6
 800d5d4:	463b      	mov	r3, r7
 800d5d6:	4640      	mov	r0, r8
 800d5d8:	4649      	mov	r1, r9
 800d5da:	f7f2 fdc7 	bl	800016c <__adddf3>
 800d5de:	a37a      	add	r3, pc, #488	@ (adr r3, 800d7c8 <__ieee754_pow+0x9f8>)
 800d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	460d      	mov	r5, r1
 800d5e8:	f7f2 ff76 	bl	80004d8 <__aeabi_dmul>
 800d5ec:	4642      	mov	r2, r8
 800d5ee:	464b      	mov	r3, r9
 800d5f0:	e9cd 0100 	strd	r0, r1, [sp]
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	4629      	mov	r1, r5
 800d5f8:	f7f2 fdb6 	bl	8000168 <__aeabi_dsub>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	460b      	mov	r3, r1
 800d600:	4630      	mov	r0, r6
 800d602:	4639      	mov	r1, r7
 800d604:	f7f2 fdb0 	bl	8000168 <__aeabi_dsub>
 800d608:	a371      	add	r3, pc, #452	@ (adr r3, 800d7d0 <__ieee754_pow+0xa00>)
 800d60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60e:	f7f2 ff63 	bl	80004d8 <__aeabi_dmul>
 800d612:	a371      	add	r3, pc, #452	@ (adr r3, 800d7d8 <__ieee754_pow+0xa08>)
 800d614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d618:	4680      	mov	r8, r0
 800d61a:	4689      	mov	r9, r1
 800d61c:	4620      	mov	r0, r4
 800d61e:	4629      	mov	r1, r5
 800d620:	f7f2 ff5a 	bl	80004d8 <__aeabi_dmul>
 800d624:	4602      	mov	r2, r0
 800d626:	460b      	mov	r3, r1
 800d628:	4640      	mov	r0, r8
 800d62a:	4649      	mov	r1, r9
 800d62c:	f7f2 fd9e 	bl	800016c <__adddf3>
 800d630:	4604      	mov	r4, r0
 800d632:	460d      	mov	r5, r1
 800d634:	4602      	mov	r2, r0
 800d636:	460b      	mov	r3, r1
 800d638:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d63c:	f7f2 fd96 	bl	800016c <__adddf3>
 800d640:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d644:	4680      	mov	r8, r0
 800d646:	4689      	mov	r9, r1
 800d648:	f7f2 fd8e 	bl	8000168 <__aeabi_dsub>
 800d64c:	4602      	mov	r2, r0
 800d64e:	460b      	mov	r3, r1
 800d650:	4620      	mov	r0, r4
 800d652:	4629      	mov	r1, r5
 800d654:	f7f2 fd88 	bl	8000168 <__aeabi_dsub>
 800d658:	4642      	mov	r2, r8
 800d65a:	4606      	mov	r6, r0
 800d65c:	460f      	mov	r7, r1
 800d65e:	464b      	mov	r3, r9
 800d660:	4640      	mov	r0, r8
 800d662:	4649      	mov	r1, r9
 800d664:	f7f2 ff38 	bl	80004d8 <__aeabi_dmul>
 800d668:	a35d      	add	r3, pc, #372	@ (adr r3, 800d7e0 <__ieee754_pow+0xa10>)
 800d66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66e:	4604      	mov	r4, r0
 800d670:	460d      	mov	r5, r1
 800d672:	f7f2 ff31 	bl	80004d8 <__aeabi_dmul>
 800d676:	a35c      	add	r3, pc, #368	@ (adr r3, 800d7e8 <__ieee754_pow+0xa18>)
 800d678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67c:	f7f2 fd74 	bl	8000168 <__aeabi_dsub>
 800d680:	4622      	mov	r2, r4
 800d682:	462b      	mov	r3, r5
 800d684:	f7f2 ff28 	bl	80004d8 <__aeabi_dmul>
 800d688:	a359      	add	r3, pc, #356	@ (adr r3, 800d7f0 <__ieee754_pow+0xa20>)
 800d68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68e:	f7f2 fd6d 	bl	800016c <__adddf3>
 800d692:	4622      	mov	r2, r4
 800d694:	462b      	mov	r3, r5
 800d696:	f7f2 ff1f 	bl	80004d8 <__aeabi_dmul>
 800d69a:	a357      	add	r3, pc, #348	@ (adr r3, 800d7f8 <__ieee754_pow+0xa28>)
 800d69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a0:	f7f2 fd62 	bl	8000168 <__aeabi_dsub>
 800d6a4:	4622      	mov	r2, r4
 800d6a6:	462b      	mov	r3, r5
 800d6a8:	f7f2 ff16 	bl	80004d8 <__aeabi_dmul>
 800d6ac:	a354      	add	r3, pc, #336	@ (adr r3, 800d800 <__ieee754_pow+0xa30>)
 800d6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b2:	f7f2 fd5b 	bl	800016c <__adddf3>
 800d6b6:	4622      	mov	r2, r4
 800d6b8:	462b      	mov	r3, r5
 800d6ba:	f7f2 ff0d 	bl	80004d8 <__aeabi_dmul>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	4640      	mov	r0, r8
 800d6c4:	4649      	mov	r1, r9
 800d6c6:	f7f2 fd4f 	bl	8000168 <__aeabi_dsub>
 800d6ca:	4604      	mov	r4, r0
 800d6cc:	460d      	mov	r5, r1
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	4640      	mov	r0, r8
 800d6d4:	4649      	mov	r1, r9
 800d6d6:	f7f2 feff 	bl	80004d8 <__aeabi_dmul>
 800d6da:	2200      	movs	r2, #0
 800d6dc:	e9cd 0100 	strd	r0, r1, [sp]
 800d6e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	4629      	mov	r1, r5
 800d6e8:	f7f2 fd3e 	bl	8000168 <__aeabi_dsub>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6f4:	f7f3 f81a 	bl	800072c <__aeabi_ddiv>
 800d6f8:	4632      	mov	r2, r6
 800d6fa:	4604      	mov	r4, r0
 800d6fc:	460d      	mov	r5, r1
 800d6fe:	463b      	mov	r3, r7
 800d700:	4640      	mov	r0, r8
 800d702:	4649      	mov	r1, r9
 800d704:	f7f2 fee8 	bl	80004d8 <__aeabi_dmul>
 800d708:	4632      	mov	r2, r6
 800d70a:	463b      	mov	r3, r7
 800d70c:	f7f2 fd2e 	bl	800016c <__adddf3>
 800d710:	4602      	mov	r2, r0
 800d712:	460b      	mov	r3, r1
 800d714:	4620      	mov	r0, r4
 800d716:	4629      	mov	r1, r5
 800d718:	f7f2 fd26 	bl	8000168 <__aeabi_dsub>
 800d71c:	4642      	mov	r2, r8
 800d71e:	464b      	mov	r3, r9
 800d720:	f7f2 fd22 	bl	8000168 <__aeabi_dsub>
 800d724:	4602      	mov	r2, r0
 800d726:	460b      	mov	r3, r1
 800d728:	2000      	movs	r0, #0
 800d72a:	4938      	ldr	r1, [pc, #224]	@ (800d80c <__ieee754_pow+0xa3c>)
 800d72c:	f7f2 fd1c 	bl	8000168 <__aeabi_dsub>
 800d730:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d734:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800d738:	da2e      	bge.n	800d798 <__ieee754_pow+0x9c8>
 800d73a:	4652      	mov	r2, sl
 800d73c:	f000 fa04 	bl	800db48 <scalbn>
 800d740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d744:	f7ff bbed 	b.w	800cf22 <__ieee754_pow+0x152>
 800d748:	4c31      	ldr	r4, [pc, #196]	@ (800d810 <__ieee754_pow+0xa40>)
 800d74a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d74e:	42a3      	cmp	r3, r4
 800d750:	d91a      	bls.n	800d788 <__ieee754_pow+0x9b8>
 800d752:	4b30      	ldr	r3, [pc, #192]	@ (800d814 <__ieee754_pow+0xa44>)
 800d754:	440b      	add	r3, r1
 800d756:	4303      	orrs	r3, r0
 800d758:	d009      	beq.n	800d76e <__ieee754_pow+0x99e>
 800d75a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d75e:	2200      	movs	r2, #0
 800d760:	2300      	movs	r3, #0
 800d762:	f7f3 f92b 	bl	80009bc <__aeabi_dcmplt>
 800d766:	3800      	subs	r0, #0
 800d768:	bf18      	it	ne
 800d76a:	2001      	movne	r0, #1
 800d76c:	e444      	b.n	800cff8 <__ieee754_pow+0x228>
 800d76e:	4642      	mov	r2, r8
 800d770:	464b      	mov	r3, r9
 800d772:	f7f2 fcf9 	bl	8000168 <__aeabi_dsub>
 800d776:	4632      	mov	r2, r6
 800d778:	463b      	mov	r3, r7
 800d77a:	f7f3 f933 	bl	80009e4 <__aeabi_dcmpge>
 800d77e:	2800      	cmp	r0, #0
 800d780:	d1eb      	bne.n	800d75a <__ieee754_pow+0x98a>
 800d782:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800d818 <__ieee754_pow+0xa48>
 800d786:	e6fd      	b.n	800d584 <__ieee754_pow+0x7b4>
 800d788:	469a      	mov	sl, r3
 800d78a:	4b24      	ldr	r3, [pc, #144]	@ (800d81c <__ieee754_pow+0xa4c>)
 800d78c:	459a      	cmp	sl, r3
 800d78e:	f63f aef9 	bhi.w	800d584 <__ieee754_pow+0x7b4>
 800d792:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d796:	e71b      	b.n	800d5d0 <__ieee754_pow+0x800>
 800d798:	4621      	mov	r1, r4
 800d79a:	e7d1      	b.n	800d740 <__ieee754_pow+0x970>
 800d79c:	2000      	movs	r0, #0
 800d79e:	491b      	ldr	r1, [pc, #108]	@ (800d80c <__ieee754_pow+0xa3c>)
 800d7a0:	f7ff bb34 	b.w	800ce0c <__ieee754_pow+0x3c>
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	f7ff bb30 	b.w	800ce0c <__ieee754_pow+0x3c>
 800d7ac:	4650      	mov	r0, sl
 800d7ae:	4659      	mov	r1, fp
 800d7b0:	f7ff bb2c 	b.w	800ce0c <__ieee754_pow+0x3c>
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	f7ff bb79 	b.w	800ceac <__ieee754_pow+0xdc>
 800d7ba:	2400      	movs	r4, #0
 800d7bc:	f7ff bb64 	b.w	800ce88 <__ieee754_pow+0xb8>
 800d7c0:	652b82fe 	.word	0x652b82fe
 800d7c4:	3c971547 	.word	0x3c971547
 800d7c8:	00000000 	.word	0x00000000
 800d7cc:	3fe62e43 	.word	0x3fe62e43
 800d7d0:	fefa39ef 	.word	0xfefa39ef
 800d7d4:	3fe62e42 	.word	0x3fe62e42
 800d7d8:	0ca86c39 	.word	0x0ca86c39
 800d7dc:	be205c61 	.word	0xbe205c61
 800d7e0:	72bea4d0 	.word	0x72bea4d0
 800d7e4:	3e663769 	.word	0x3e663769
 800d7e8:	c5d26bf1 	.word	0xc5d26bf1
 800d7ec:	3ebbbd41 	.word	0x3ebbbd41
 800d7f0:	af25de2c 	.word	0xaf25de2c
 800d7f4:	3f11566a 	.word	0x3f11566a
 800d7f8:	16bebd93 	.word	0x16bebd93
 800d7fc:	3f66c16c 	.word	0x3f66c16c
 800d800:	5555553e 	.word	0x5555553e
 800d804:	3fc55555 	.word	0x3fc55555
 800d808:	fff00000 	.word	0xfff00000
 800d80c:	3ff00000 	.word	0x3ff00000
 800d810:	4090cbff 	.word	0x4090cbff
 800d814:	3f6f3400 	.word	0x3f6f3400
 800d818:	4090cc00 	.word	0x4090cc00
 800d81c:	3fe00000 	.word	0x3fe00000

0800d820 <atan>:
 800d820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d824:	4bbc      	ldr	r3, [pc, #752]	@ (800db18 <atan+0x2f8>)
 800d826:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800d82a:	429e      	cmp	r6, r3
 800d82c:	4604      	mov	r4, r0
 800d82e:	460d      	mov	r5, r1
 800d830:	468b      	mov	fp, r1
 800d832:	d918      	bls.n	800d866 <atan+0x46>
 800d834:	4bb9      	ldr	r3, [pc, #740]	@ (800db1c <atan+0x2fc>)
 800d836:	429e      	cmp	r6, r3
 800d838:	d801      	bhi.n	800d83e <atan+0x1e>
 800d83a:	d109      	bne.n	800d850 <atan+0x30>
 800d83c:	b140      	cbz	r0, 800d850 <atan+0x30>
 800d83e:	4622      	mov	r2, r4
 800d840:	462b      	mov	r3, r5
 800d842:	4620      	mov	r0, r4
 800d844:	4629      	mov	r1, r5
 800d846:	f7f2 fc91 	bl	800016c <__adddf3>
 800d84a:	4604      	mov	r4, r0
 800d84c:	460d      	mov	r5, r1
 800d84e:	e006      	b.n	800d85e <atan+0x3e>
 800d850:	f1bb 0f00 	cmp.w	fp, #0
 800d854:	f340 8123 	ble.w	800da9e <atan+0x27e>
 800d858:	a593      	add	r5, pc, #588	@ (adr r5, 800daa8 <atan+0x288>)
 800d85a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d85e:	4620      	mov	r0, r4
 800d860:	4629      	mov	r1, r5
 800d862:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d866:	4bae      	ldr	r3, [pc, #696]	@ (800db20 <atan+0x300>)
 800d868:	429e      	cmp	r6, r3
 800d86a:	d811      	bhi.n	800d890 <atan+0x70>
 800d86c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d870:	429e      	cmp	r6, r3
 800d872:	d80a      	bhi.n	800d88a <atan+0x6a>
 800d874:	a38e      	add	r3, pc, #568	@ (adr r3, 800dab0 <atan+0x290>)
 800d876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87a:	f7f2 fc77 	bl	800016c <__adddf3>
 800d87e:	2200      	movs	r2, #0
 800d880:	4ba8      	ldr	r3, [pc, #672]	@ (800db24 <atan+0x304>)
 800d882:	f7f3 f8b9 	bl	80009f8 <__aeabi_dcmpgt>
 800d886:	2800      	cmp	r0, #0
 800d888:	d1e9      	bne.n	800d85e <atan+0x3e>
 800d88a:	f04f 3aff 	mov.w	sl, #4294967295
 800d88e:	e027      	b.n	800d8e0 <atan+0xc0>
 800d890:	f000 f956 	bl	800db40 <fabs>
 800d894:	4ba4      	ldr	r3, [pc, #656]	@ (800db28 <atan+0x308>)
 800d896:	4604      	mov	r4, r0
 800d898:	429e      	cmp	r6, r3
 800d89a:	460d      	mov	r5, r1
 800d89c:	f200 80b8 	bhi.w	800da10 <atan+0x1f0>
 800d8a0:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d8a4:	429e      	cmp	r6, r3
 800d8a6:	f200 809c 	bhi.w	800d9e2 <atan+0x1c2>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	f7f2 fc5d 	bl	800016c <__adddf3>
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	4b9b      	ldr	r3, [pc, #620]	@ (800db24 <atan+0x304>)
 800d8b6:	f7f2 fc57 	bl	8000168 <__aeabi_dsub>
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	4606      	mov	r6, r0
 800d8be:	460f      	mov	r7, r1
 800d8c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	4629      	mov	r1, r5
 800d8c8:	f7f2 fc50 	bl	800016c <__adddf3>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	4639      	mov	r1, r7
 800d8d4:	f7f2 ff2a 	bl	800072c <__aeabi_ddiv>
 800d8d8:	f04f 0a00 	mov.w	sl, #0
 800d8dc:	4604      	mov	r4, r0
 800d8de:	460d      	mov	r5, r1
 800d8e0:	4622      	mov	r2, r4
 800d8e2:	462b      	mov	r3, r5
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	4629      	mov	r1, r5
 800d8e8:	f7f2 fdf6 	bl	80004d8 <__aeabi_dmul>
 800d8ec:	4602      	mov	r2, r0
 800d8ee:	460b      	mov	r3, r1
 800d8f0:	4680      	mov	r8, r0
 800d8f2:	4689      	mov	r9, r1
 800d8f4:	f7f2 fdf0 	bl	80004d8 <__aeabi_dmul>
 800d8f8:	a36f      	add	r3, pc, #444	@ (adr r3, 800dab8 <atan+0x298>)
 800d8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fe:	4606      	mov	r6, r0
 800d900:	460f      	mov	r7, r1
 800d902:	f7f2 fde9 	bl	80004d8 <__aeabi_dmul>
 800d906:	a36e      	add	r3, pc, #440	@ (adr r3, 800dac0 <atan+0x2a0>)
 800d908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90c:	f7f2 fc2e 	bl	800016c <__adddf3>
 800d910:	4632      	mov	r2, r6
 800d912:	463b      	mov	r3, r7
 800d914:	f7f2 fde0 	bl	80004d8 <__aeabi_dmul>
 800d918:	a36b      	add	r3, pc, #428	@ (adr r3, 800dac8 <atan+0x2a8>)
 800d91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91e:	f7f2 fc25 	bl	800016c <__adddf3>
 800d922:	4632      	mov	r2, r6
 800d924:	463b      	mov	r3, r7
 800d926:	f7f2 fdd7 	bl	80004d8 <__aeabi_dmul>
 800d92a:	a369      	add	r3, pc, #420	@ (adr r3, 800dad0 <atan+0x2b0>)
 800d92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d930:	f7f2 fc1c 	bl	800016c <__adddf3>
 800d934:	4632      	mov	r2, r6
 800d936:	463b      	mov	r3, r7
 800d938:	f7f2 fdce 	bl	80004d8 <__aeabi_dmul>
 800d93c:	a366      	add	r3, pc, #408	@ (adr r3, 800dad8 <atan+0x2b8>)
 800d93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d942:	f7f2 fc13 	bl	800016c <__adddf3>
 800d946:	4632      	mov	r2, r6
 800d948:	463b      	mov	r3, r7
 800d94a:	f7f2 fdc5 	bl	80004d8 <__aeabi_dmul>
 800d94e:	a364      	add	r3, pc, #400	@ (adr r3, 800dae0 <atan+0x2c0>)
 800d950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d954:	f7f2 fc0a 	bl	800016c <__adddf3>
 800d958:	4642      	mov	r2, r8
 800d95a:	464b      	mov	r3, r9
 800d95c:	f7f2 fdbc 	bl	80004d8 <__aeabi_dmul>
 800d960:	a361      	add	r3, pc, #388	@ (adr r3, 800dae8 <atan+0x2c8>)
 800d962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d966:	4680      	mov	r8, r0
 800d968:	4689      	mov	r9, r1
 800d96a:	4630      	mov	r0, r6
 800d96c:	4639      	mov	r1, r7
 800d96e:	f7f2 fdb3 	bl	80004d8 <__aeabi_dmul>
 800d972:	a35f      	add	r3, pc, #380	@ (adr r3, 800daf0 <atan+0x2d0>)
 800d974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d978:	f7f2 fbf6 	bl	8000168 <__aeabi_dsub>
 800d97c:	4632      	mov	r2, r6
 800d97e:	463b      	mov	r3, r7
 800d980:	f7f2 fdaa 	bl	80004d8 <__aeabi_dmul>
 800d984:	a35c      	add	r3, pc, #368	@ (adr r3, 800daf8 <atan+0x2d8>)
 800d986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98a:	f7f2 fbed 	bl	8000168 <__aeabi_dsub>
 800d98e:	4632      	mov	r2, r6
 800d990:	463b      	mov	r3, r7
 800d992:	f7f2 fda1 	bl	80004d8 <__aeabi_dmul>
 800d996:	a35a      	add	r3, pc, #360	@ (adr r3, 800db00 <atan+0x2e0>)
 800d998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99c:	f7f2 fbe4 	bl	8000168 <__aeabi_dsub>
 800d9a0:	4632      	mov	r2, r6
 800d9a2:	463b      	mov	r3, r7
 800d9a4:	f7f2 fd98 	bl	80004d8 <__aeabi_dmul>
 800d9a8:	a357      	add	r3, pc, #348	@ (adr r3, 800db08 <atan+0x2e8>)
 800d9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ae:	f7f2 fbdb 	bl	8000168 <__aeabi_dsub>
 800d9b2:	4632      	mov	r2, r6
 800d9b4:	463b      	mov	r3, r7
 800d9b6:	f7f2 fd8f 	bl	80004d8 <__aeabi_dmul>
 800d9ba:	4602      	mov	r2, r0
 800d9bc:	460b      	mov	r3, r1
 800d9be:	4640      	mov	r0, r8
 800d9c0:	4649      	mov	r1, r9
 800d9c2:	f7f2 fbd3 	bl	800016c <__adddf3>
 800d9c6:	4622      	mov	r2, r4
 800d9c8:	462b      	mov	r3, r5
 800d9ca:	f7f2 fd85 	bl	80004d8 <__aeabi_dmul>
 800d9ce:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	d144      	bne.n	800da62 <atan+0x242>
 800d9d8:	4620      	mov	r0, r4
 800d9da:	4629      	mov	r1, r5
 800d9dc:	f7f2 fbc4 	bl	8000168 <__aeabi_dsub>
 800d9e0:	e733      	b.n	800d84a <atan+0x2a>
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	4b4f      	ldr	r3, [pc, #316]	@ (800db24 <atan+0x304>)
 800d9e6:	f7f2 fbbf 	bl	8000168 <__aeabi_dsub>
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	4606      	mov	r6, r0
 800d9ee:	460f      	mov	r7, r1
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	4b4b      	ldr	r3, [pc, #300]	@ (800db24 <atan+0x304>)
 800d9f6:	f7f2 fbb9 	bl	800016c <__adddf3>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	4630      	mov	r0, r6
 800da00:	4639      	mov	r1, r7
 800da02:	f7f2 fe93 	bl	800072c <__aeabi_ddiv>
 800da06:	f04f 0a01 	mov.w	sl, #1
 800da0a:	4604      	mov	r4, r0
 800da0c:	460d      	mov	r5, r1
 800da0e:	e767      	b.n	800d8e0 <atan+0xc0>
 800da10:	4b46      	ldr	r3, [pc, #280]	@ (800db2c <atan+0x30c>)
 800da12:	429e      	cmp	r6, r3
 800da14:	d21a      	bcs.n	800da4c <atan+0x22c>
 800da16:	2200      	movs	r2, #0
 800da18:	4b45      	ldr	r3, [pc, #276]	@ (800db30 <atan+0x310>)
 800da1a:	f7f2 fba5 	bl	8000168 <__aeabi_dsub>
 800da1e:	2200      	movs	r2, #0
 800da20:	4606      	mov	r6, r0
 800da22:	460f      	mov	r7, r1
 800da24:	4620      	mov	r0, r4
 800da26:	4629      	mov	r1, r5
 800da28:	4b41      	ldr	r3, [pc, #260]	@ (800db30 <atan+0x310>)
 800da2a:	f7f2 fd55 	bl	80004d8 <__aeabi_dmul>
 800da2e:	2200      	movs	r2, #0
 800da30:	4b3c      	ldr	r3, [pc, #240]	@ (800db24 <atan+0x304>)
 800da32:	f7f2 fb9b 	bl	800016c <__adddf3>
 800da36:	4602      	mov	r2, r0
 800da38:	460b      	mov	r3, r1
 800da3a:	4630      	mov	r0, r6
 800da3c:	4639      	mov	r1, r7
 800da3e:	f7f2 fe75 	bl	800072c <__aeabi_ddiv>
 800da42:	f04f 0a02 	mov.w	sl, #2
 800da46:	4604      	mov	r4, r0
 800da48:	460d      	mov	r5, r1
 800da4a:	e749      	b.n	800d8e0 <atan+0xc0>
 800da4c:	4602      	mov	r2, r0
 800da4e:	460b      	mov	r3, r1
 800da50:	2000      	movs	r0, #0
 800da52:	4938      	ldr	r1, [pc, #224]	@ (800db34 <atan+0x314>)
 800da54:	f7f2 fe6a 	bl	800072c <__aeabi_ddiv>
 800da58:	f04f 0a03 	mov.w	sl, #3
 800da5c:	4604      	mov	r4, r0
 800da5e:	460d      	mov	r5, r1
 800da60:	e73e      	b.n	800d8e0 <atan+0xc0>
 800da62:	4b35      	ldr	r3, [pc, #212]	@ (800db38 <atan+0x318>)
 800da64:	4e35      	ldr	r6, [pc, #212]	@ (800db3c <atan+0x31c>)
 800da66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800da6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6e:	f7f2 fb7b 	bl	8000168 <__aeabi_dsub>
 800da72:	4622      	mov	r2, r4
 800da74:	462b      	mov	r3, r5
 800da76:	f7f2 fb77 	bl	8000168 <__aeabi_dsub>
 800da7a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800da7e:	4602      	mov	r2, r0
 800da80:	460b      	mov	r3, r1
 800da82:	e9d6 0100 	ldrd	r0, r1, [r6]
 800da86:	f7f2 fb6f 	bl	8000168 <__aeabi_dsub>
 800da8a:	f1bb 0f00 	cmp.w	fp, #0
 800da8e:	4604      	mov	r4, r0
 800da90:	460d      	mov	r5, r1
 800da92:	f6bf aee4 	bge.w	800d85e <atan+0x3e>
 800da96:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da9a:	461d      	mov	r5, r3
 800da9c:	e6df      	b.n	800d85e <atan+0x3e>
 800da9e:	a51c      	add	r5, pc, #112	@ (adr r5, 800db10 <atan+0x2f0>)
 800daa0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800daa4:	e6db      	b.n	800d85e <atan+0x3e>
 800daa6:	bf00      	nop
 800daa8:	54442d18 	.word	0x54442d18
 800daac:	3ff921fb 	.word	0x3ff921fb
 800dab0:	8800759c 	.word	0x8800759c
 800dab4:	7e37e43c 	.word	0x7e37e43c
 800dab8:	e322da11 	.word	0xe322da11
 800dabc:	3f90ad3a 	.word	0x3f90ad3a
 800dac0:	24760deb 	.word	0x24760deb
 800dac4:	3fa97b4b 	.word	0x3fa97b4b
 800dac8:	a0d03d51 	.word	0xa0d03d51
 800dacc:	3fb10d66 	.word	0x3fb10d66
 800dad0:	c54c206e 	.word	0xc54c206e
 800dad4:	3fb745cd 	.word	0x3fb745cd
 800dad8:	920083ff 	.word	0x920083ff
 800dadc:	3fc24924 	.word	0x3fc24924
 800dae0:	5555550d 	.word	0x5555550d
 800dae4:	3fd55555 	.word	0x3fd55555
 800dae8:	2c6a6c2f 	.word	0x2c6a6c2f
 800daec:	bfa2b444 	.word	0xbfa2b444
 800daf0:	52defd9a 	.word	0x52defd9a
 800daf4:	3fadde2d 	.word	0x3fadde2d
 800daf8:	af749a6d 	.word	0xaf749a6d
 800dafc:	3fb3b0f2 	.word	0x3fb3b0f2
 800db00:	fe231671 	.word	0xfe231671
 800db04:	3fbc71c6 	.word	0x3fbc71c6
 800db08:	9998ebc4 	.word	0x9998ebc4
 800db0c:	3fc99999 	.word	0x3fc99999
 800db10:	54442d18 	.word	0x54442d18
 800db14:	bff921fb 	.word	0xbff921fb
 800db18:	440fffff 	.word	0x440fffff
 800db1c:	7ff00000 	.word	0x7ff00000
 800db20:	3fdbffff 	.word	0x3fdbffff
 800db24:	3ff00000 	.word	0x3ff00000
 800db28:	3ff2ffff 	.word	0x3ff2ffff
 800db2c:	40038000 	.word	0x40038000
 800db30:	3ff80000 	.word	0x3ff80000
 800db34:	bff00000 	.word	0xbff00000
 800db38:	0800e630 	.word	0x0800e630
 800db3c:	0800e650 	.word	0x0800e650

0800db40 <fabs>:
 800db40:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800db44:	4619      	mov	r1, r3
 800db46:	4770      	bx	lr

0800db48 <scalbn>:
 800db48:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800db4c:	4616      	mov	r6, r2
 800db4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800db52:	4683      	mov	fp, r0
 800db54:	468c      	mov	ip, r1
 800db56:	460b      	mov	r3, r1
 800db58:	b982      	cbnz	r2, 800db7c <scalbn+0x34>
 800db5a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800db5e:	4303      	orrs	r3, r0
 800db60:	d039      	beq.n	800dbd6 <scalbn+0x8e>
 800db62:	4b2f      	ldr	r3, [pc, #188]	@ (800dc20 <scalbn+0xd8>)
 800db64:	2200      	movs	r2, #0
 800db66:	f7f2 fcb7 	bl	80004d8 <__aeabi_dmul>
 800db6a:	4b2e      	ldr	r3, [pc, #184]	@ (800dc24 <scalbn+0xdc>)
 800db6c:	4683      	mov	fp, r0
 800db6e:	429e      	cmp	r6, r3
 800db70:	468c      	mov	ip, r1
 800db72:	da0d      	bge.n	800db90 <scalbn+0x48>
 800db74:	a326      	add	r3, pc, #152	@ (adr r3, 800dc10 <scalbn+0xc8>)
 800db76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7a:	e01b      	b.n	800dbb4 <scalbn+0x6c>
 800db7c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800db80:	42ba      	cmp	r2, r7
 800db82:	d109      	bne.n	800db98 <scalbn+0x50>
 800db84:	4602      	mov	r2, r0
 800db86:	f7f2 faf1 	bl	800016c <__adddf3>
 800db8a:	4683      	mov	fp, r0
 800db8c:	468c      	mov	ip, r1
 800db8e:	e022      	b.n	800dbd6 <scalbn+0x8e>
 800db90:	460b      	mov	r3, r1
 800db92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800db96:	3a36      	subs	r2, #54	@ 0x36
 800db98:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800db9c:	428e      	cmp	r6, r1
 800db9e:	dd0c      	ble.n	800dbba <scalbn+0x72>
 800dba0:	a31d      	add	r3, pc, #116	@ (adr r3, 800dc18 <scalbn+0xd0>)
 800dba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba6:	461c      	mov	r4, r3
 800dba8:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800dbac:	f361 74df 	bfi	r4, r1, #31, #1
 800dbb0:	4621      	mov	r1, r4
 800dbb2:	481d      	ldr	r0, [pc, #116]	@ (800dc28 <scalbn+0xe0>)
 800dbb4:	f7f2 fc90 	bl	80004d8 <__aeabi_dmul>
 800dbb8:	e7e7      	b.n	800db8a <scalbn+0x42>
 800dbba:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800dbbe:	4432      	add	r2, r6
 800dbc0:	428a      	cmp	r2, r1
 800dbc2:	dced      	bgt.n	800dba0 <scalbn+0x58>
 800dbc4:	2a00      	cmp	r2, #0
 800dbc6:	dd0a      	ble.n	800dbde <scalbn+0x96>
 800dbc8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dbcc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800dbd0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dbd4:	46ac      	mov	ip, r5
 800dbd6:	4658      	mov	r0, fp
 800dbd8:	4661      	mov	r1, ip
 800dbda:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800dbde:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800dbe2:	da09      	bge.n	800dbf8 <scalbn+0xb0>
 800dbe4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800dbe8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800dbec:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800dbf0:	480e      	ldr	r0, [pc, #56]	@ (800dc2c <scalbn+0xe4>)
 800dbf2:	f041 011f 	orr.w	r1, r1, #31
 800dbf6:	e7bd      	b.n	800db74 <scalbn+0x2c>
 800dbf8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dbfc:	3236      	adds	r2, #54	@ 0x36
 800dbfe:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800dc02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dc06:	4658      	mov	r0, fp
 800dc08:	4629      	mov	r1, r5
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	4b08      	ldr	r3, [pc, #32]	@ (800dc30 <scalbn+0xe8>)
 800dc0e:	e7d1      	b.n	800dbb4 <scalbn+0x6c>
 800dc10:	c2f8f359 	.word	0xc2f8f359
 800dc14:	01a56e1f 	.word	0x01a56e1f
 800dc18:	8800759c 	.word	0x8800759c
 800dc1c:	7e37e43c 	.word	0x7e37e43c
 800dc20:	43500000 	.word	0x43500000
 800dc24:	ffff3cb0 	.word	0xffff3cb0
 800dc28:	8800759c 	.word	0x8800759c
 800dc2c:	c2f8f359 	.word	0xc2f8f359
 800dc30:	3c900000 	.word	0x3c900000

0800dc34 <with_errno>:
 800dc34:	b570      	push	{r4, r5, r6, lr}
 800dc36:	4604      	mov	r4, r0
 800dc38:	460d      	mov	r5, r1
 800dc3a:	4616      	mov	r6, r2
 800dc3c:	f7fb fa60 	bl	8009100 <__errno>
 800dc40:	4629      	mov	r1, r5
 800dc42:	6006      	str	r6, [r0, #0]
 800dc44:	4620      	mov	r0, r4
 800dc46:	bd70      	pop	{r4, r5, r6, pc}

0800dc48 <xflow>:
 800dc48:	b513      	push	{r0, r1, r4, lr}
 800dc4a:	4604      	mov	r4, r0
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	4610      	mov	r0, r2
 800dc50:	b10c      	cbz	r4, 800dc56 <xflow+0xe>
 800dc52:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800dc56:	e9cd 2300 	strd	r2, r3, [sp]
 800dc5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc5e:	f7f2 fc3b 	bl	80004d8 <__aeabi_dmul>
 800dc62:	2222      	movs	r2, #34	@ 0x22
 800dc64:	b002      	add	sp, #8
 800dc66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc6a:	f7ff bfe3 	b.w	800dc34 <with_errno>

0800dc6e <__math_uflow>:
 800dc6e:	2200      	movs	r2, #0
 800dc70:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800dc74:	f7ff bfe8 	b.w	800dc48 <xflow>

0800dc78 <__math_oflow>:
 800dc78:	2200      	movs	r2, #0
 800dc7a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800dc7e:	f7ff bfe3 	b.w	800dc48 <xflow>
	...

0800dc84 <__ieee754_sqrt>:
 800dc84:	4a67      	ldr	r2, [pc, #412]	@ (800de24 <__ieee754_sqrt+0x1a0>)
 800dc86:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc8a:	438a      	bics	r2, r1
 800dc8c:	4606      	mov	r6, r0
 800dc8e:	460f      	mov	r7, r1
 800dc90:	460b      	mov	r3, r1
 800dc92:	4604      	mov	r4, r0
 800dc94:	d10e      	bne.n	800dcb4 <__ieee754_sqrt+0x30>
 800dc96:	4602      	mov	r2, r0
 800dc98:	f7f2 fc1e 	bl	80004d8 <__aeabi_dmul>
 800dc9c:	4602      	mov	r2, r0
 800dc9e:	460b      	mov	r3, r1
 800dca0:	4630      	mov	r0, r6
 800dca2:	4639      	mov	r1, r7
 800dca4:	f7f2 fa62 	bl	800016c <__adddf3>
 800dca8:	4606      	mov	r6, r0
 800dcaa:	460f      	mov	r7, r1
 800dcac:	4630      	mov	r0, r6
 800dcae:	4639      	mov	r1, r7
 800dcb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcb4:	2900      	cmp	r1, #0
 800dcb6:	dc0c      	bgt.n	800dcd2 <__ieee754_sqrt+0x4e>
 800dcb8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800dcbc:	4302      	orrs	r2, r0
 800dcbe:	d0f5      	beq.n	800dcac <__ieee754_sqrt+0x28>
 800dcc0:	b189      	cbz	r1, 800dce6 <__ieee754_sqrt+0x62>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	f7f2 fa50 	bl	8000168 <__aeabi_dsub>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	460b      	mov	r3, r1
 800dccc:	f7f2 fd2e 	bl	800072c <__aeabi_ddiv>
 800dcd0:	e7ea      	b.n	800dca8 <__ieee754_sqrt+0x24>
 800dcd2:	150a      	asrs	r2, r1, #20
 800dcd4:	d115      	bne.n	800dd02 <__ieee754_sqrt+0x7e>
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	e009      	b.n	800dcee <__ieee754_sqrt+0x6a>
 800dcda:	0ae3      	lsrs	r3, r4, #11
 800dcdc:	3a15      	subs	r2, #21
 800dcde:	0564      	lsls	r4, r4, #21
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d0fa      	beq.n	800dcda <__ieee754_sqrt+0x56>
 800dce4:	e7f7      	b.n	800dcd6 <__ieee754_sqrt+0x52>
 800dce6:	460a      	mov	r2, r1
 800dce8:	e7fa      	b.n	800dce0 <__ieee754_sqrt+0x5c>
 800dcea:	005b      	lsls	r3, r3, #1
 800dcec:	3101      	adds	r1, #1
 800dcee:	02d8      	lsls	r0, r3, #11
 800dcf0:	d5fb      	bpl.n	800dcea <__ieee754_sqrt+0x66>
 800dcf2:	1e48      	subs	r0, r1, #1
 800dcf4:	1a12      	subs	r2, r2, r0
 800dcf6:	f1c1 0020 	rsb	r0, r1, #32
 800dcfa:	fa24 f000 	lsr.w	r0, r4, r0
 800dcfe:	4303      	orrs	r3, r0
 800dd00:	408c      	lsls	r4, r1
 800dd02:	2600      	movs	r6, #0
 800dd04:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800dd08:	2116      	movs	r1, #22
 800dd0a:	07d2      	lsls	r2, r2, #31
 800dd0c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800dd10:	4632      	mov	r2, r6
 800dd12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd1a:	bf5c      	itt	pl
 800dd1c:	005b      	lslpl	r3, r3, #1
 800dd1e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800dd22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dd26:	bf58      	it	pl
 800dd28:	0064      	lslpl	r4, r4, #1
 800dd2a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800dd2e:	107f      	asrs	r7, r7, #1
 800dd30:	0064      	lsls	r4, r4, #1
 800dd32:	1815      	adds	r5, r2, r0
 800dd34:	429d      	cmp	r5, r3
 800dd36:	bfde      	ittt	le
 800dd38:	182a      	addle	r2, r5, r0
 800dd3a:	1b5b      	suble	r3, r3, r5
 800dd3c:	1836      	addle	r6, r6, r0
 800dd3e:	0fe5      	lsrs	r5, r4, #31
 800dd40:	3901      	subs	r1, #1
 800dd42:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800dd46:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800dd4a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800dd4e:	d1f0      	bne.n	800dd32 <__ieee754_sqrt+0xae>
 800dd50:	460d      	mov	r5, r1
 800dd52:	f04f 0a20 	mov.w	sl, #32
 800dd56:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	eb01 0c00 	add.w	ip, r1, r0
 800dd60:	db02      	blt.n	800dd68 <__ieee754_sqrt+0xe4>
 800dd62:	d113      	bne.n	800dd8c <__ieee754_sqrt+0x108>
 800dd64:	45a4      	cmp	ip, r4
 800dd66:	d811      	bhi.n	800dd8c <__ieee754_sqrt+0x108>
 800dd68:	f1bc 0f00 	cmp.w	ip, #0
 800dd6c:	eb0c 0100 	add.w	r1, ip, r0
 800dd70:	da42      	bge.n	800ddf8 <__ieee754_sqrt+0x174>
 800dd72:	2900      	cmp	r1, #0
 800dd74:	db40      	blt.n	800ddf8 <__ieee754_sqrt+0x174>
 800dd76:	f102 0e01 	add.w	lr, r2, #1
 800dd7a:	1a9b      	subs	r3, r3, r2
 800dd7c:	4672      	mov	r2, lr
 800dd7e:	45a4      	cmp	ip, r4
 800dd80:	bf88      	it	hi
 800dd82:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dd86:	eba4 040c 	sub.w	r4, r4, ip
 800dd8a:	4405      	add	r5, r0
 800dd8c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800dd90:	f1ba 0a01 	subs.w	sl, sl, #1
 800dd94:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800dd98:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800dd9c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800dda0:	d1db      	bne.n	800dd5a <__ieee754_sqrt+0xd6>
 800dda2:	431c      	orrs	r4, r3
 800dda4:	d01a      	beq.n	800dddc <__ieee754_sqrt+0x158>
 800dda6:	4c20      	ldr	r4, [pc, #128]	@ (800de28 <__ieee754_sqrt+0x1a4>)
 800dda8:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800de2c <__ieee754_sqrt+0x1a8>
 800ddac:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ddb0:	e9db 2300 	ldrd	r2, r3, [fp]
 800ddb4:	f7f2 f9d8 	bl	8000168 <__aeabi_dsub>
 800ddb8:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	4640      	mov	r0, r8
 800ddc2:	4649      	mov	r1, r9
 800ddc4:	f7f2 fe04 	bl	80009d0 <__aeabi_dcmple>
 800ddc8:	b140      	cbz	r0, 800dddc <__ieee754_sqrt+0x158>
 800ddca:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ddce:	e9db 2300 	ldrd	r2, r3, [fp]
 800ddd2:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ddd6:	d111      	bne.n	800ddfc <__ieee754_sqrt+0x178>
 800ddd8:	4655      	mov	r5, sl
 800ddda:	3601      	adds	r6, #1
 800dddc:	1072      	asrs	r2, r6, #1
 800ddde:	086b      	lsrs	r3, r5, #1
 800dde0:	07f1      	lsls	r1, r6, #31
 800dde2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800dde6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ddea:	bf48      	it	mi
 800ddec:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800ddf6:	e757      	b.n	800dca8 <__ieee754_sqrt+0x24>
 800ddf8:	4696      	mov	lr, r2
 800ddfa:	e7be      	b.n	800dd7a <__ieee754_sqrt+0xf6>
 800ddfc:	f7f2 f9b6 	bl	800016c <__adddf3>
 800de00:	e9d4 8900 	ldrd	r8, r9, [r4]
 800de04:	4602      	mov	r2, r0
 800de06:	460b      	mov	r3, r1
 800de08:	4640      	mov	r0, r8
 800de0a:	4649      	mov	r1, r9
 800de0c:	f7f2 fdd6 	bl	80009bc <__aeabi_dcmplt>
 800de10:	b120      	cbz	r0, 800de1c <__ieee754_sqrt+0x198>
 800de12:	1ca8      	adds	r0, r5, #2
 800de14:	bf08      	it	eq
 800de16:	3601      	addeq	r6, #1
 800de18:	3502      	adds	r5, #2
 800de1a:	e7df      	b.n	800dddc <__ieee754_sqrt+0x158>
 800de1c:	1c6b      	adds	r3, r5, #1
 800de1e:	f023 0501 	bic.w	r5, r3, #1
 800de22:	e7db      	b.n	800dddc <__ieee754_sqrt+0x158>
 800de24:	7ff00000 	.word	0x7ff00000
 800de28:	20000200 	.word	0x20000200
 800de2c:	200001f8 	.word	0x200001f8

0800de30 <_init>:
 800de30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de32:	bf00      	nop
 800de34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de36:	bc08      	pop	{r3}
 800de38:	469e      	mov	lr, r3
 800de3a:	4770      	bx	lr

0800de3c <_fini>:
 800de3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de3e:	bf00      	nop
 800de40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de42:	bc08      	pop	{r3}
 800de44:	469e      	mov	lr, r3
 800de46:	4770      	bx	lr
